void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t DERParseSequenceToObject(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  uint64_t result;
  unint64_t v12[4];

  v12[3] = *MEMORY[0x24BDAC8D0];
  memset(v12, 170, 24);
  result = DERDecodeItemPartialBufferGetLength(a1, v12, 0);
  if (!(_DWORD)result)
  {
    if (v12[0] == 0x2000000000000010)
      return DERParseSequenceContentToObject(&v12[1], a2, a3, a4, a5, a6);
    else
      return 2;
  }
  return result;
}

uint64_t DERParseSequenceContentToObject(unint64_t *a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  unsigned __int16 v17;
  __int16 v18;
  unint64_t v19;
  char *v21;
  uint64_t v23;
  unint64_t v24;
  __int16 *v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  char *v29;
  unint64_t v31[3];
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v32 = 0;
  if (a6)
  {
    if (a6 > a5)
      goto LABEL_59;
    bzero((void *)a4, a6);
  }
  v10 = *a1;
  v11 = a1[1];
  if (__CFADD__(*a1, v11))
    goto LABEL_58;
  v12 = v10 + v11;
  if (v10 > v12)
LABEL_59:
    __break(0x5519u);
  v32 = *a1;
  v33 = v12;
  if (a2)
  {
    v13 = 0;
    v29 = (char *)(a4 + a5);
    while (1)
    {
      memset(v31, 170, sizeof(v31));
      v15 = v32;
      v14 = v33;
      result = DERDecodeSeqNext(&v32, v31);
      if ((_DWORD)result)
        break;
      if (a2 <= v13)
        return 2;
      while (1)
      {
        if (24 * (__int16)v13 > (unint64_t)~a3)
          goto LABEL_58;
        v17 = v13;
        v18 = *(_WORD *)(a3 + 24 * v13 + 16);
        if ((v18 & 2) != 0 || v31[0] == *(_QWORD *)(a3 + 24 * v13 + 8))
          break;
        result = 2;
        if ((v18 & 1) != 0)
        {
          ++v13;
          if (a2 > (unsigned __int16)(v17 + 1))
            continue;
        }
        return result;
      }
      if ((v18 & 4) == 0)
      {
        v19 = *(_QWORD *)(a3 + 24 * v13);
        if (v19 > 0xFFFFFFFFFFFFFFEFLL || v19 + 16 > a5)
          return 7;
        if (v19 > ~a4)
          goto LABEL_58;
        v21 = (char *)(a4 + v19);
        if (v21 >= v29 || (unint64_t)v21 < a4)
          goto LABEL_59;
        *(_OWORD *)v21 = *(_OWORD *)&v31[1];
        if ((v18 & 8) != 0)
        {
          if (v15 >= v31[1])
          {
            if (v21 + 16 <= v29 && v14 >= v15 && *((_QWORD *)v21 + 1) <= v14 - v15)
            {
              *(_QWORD *)v21 = v15;
              return 3;
            }
            goto LABEL_59;
          }
          if (v21 + 16 > v29)
            goto LABEL_59;
          v23 = *((_QWORD *)v21 + 1);
          v24 = v23 + v31[1] - v15;
          if (__CFADD__(v23, v31[1] - v15))
          {
            __break(0x5500u);
            return result;
          }
          if (v14 < v15 || v24 > v14 - v15)
            goto LABEL_59;
          *(_QWORD *)v21 = v15;
          *((_QWORD *)v21 + 1) = v24;
        }
      }
      ++v13;
      if (a2 == (unsigned __int16)(v17 + 1))
      {
        if (!__CFADD__(v31[1], v31[2]))
        {
          v28 = a1[1];
          if (!__CFADD__(*a1, v28))
          {
            v10 = v31[1] + v31[2];
            v12 = *a1 + v28;
            goto LABEL_47;
          }
        }
LABEL_58:
        __break(0x5513u);
        goto LABEL_59;
      }
      if (a2 <= (unsigned __int16)(v17 + 1))
      {
        v10 = v32;
        v12 = v33;
        goto LABEL_47;
      }
    }
    if ((_DWORD)result == 1)
    {
      if (a2 <= v13)
      {
        return 0;
      }
      else
      {
        v25 = (__int16 *)(a3 + 24 * v13 + 16);
        v26 = a2 - (unint64_t)v13;
        result = 0;
        while (1)
        {
          v27 = *v25;
          v25 += 12;
          if ((v27 & 1) == 0)
            break;
          if (!--v26)
            return result;
        }
        return 5;
      }
    }
  }
  else
  {
LABEL_47:
    if (v10 == v12)
      return 0;
    else
      return 3;
  }
  return result;
}

uint64_t DERDecodeSeqNext(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  v10[0] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 >= v3)
    return 1;
  v10[0] = *a1;
  v10[1] = v3 - v2;
  result = DERDecodeItemPartialBufferGetLength((uint64_t)v10, a2, 0);
  if (!(_DWORD)result)
  {
    v8 = a2[1];
    v7 = a2[2];
    if (!__CFADD__(v8, v7))
    {
      v9 = v8 + v7;
      if (v9 <= a1[1] && *a1 <= v9)
      {
        result = 0;
        *a1 = v9;
        return result;
      }
      __break(0x5519u);
    }
    __break(0x5513u);
  }
  return result;
}

uint64_t DERDecodeItemPartialBufferGetLength(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  char *v12;
  unsigned __int8 v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  char v26;
  unint64_t v27;
  _BYTE *v28;

  v3 = *(_QWORD *)(result + 8);
  if (v3 < 2)
    return 3;
  v4 = *(_BYTE **)result;
  if (*(_QWORD *)result == -1)
    goto LABEL_68;
  v5 = &v4[v3];
  v6 = v4 + 1;
  v7 = v3 - 1;
  v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1)
    {
      if (v12 >= v5 || v12 < v4)
        goto LABEL_69;
      v14 = v12 + 1;
      v15 = *v12;
      v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        if (a3 || v16 >= v15)
        {
          if (v16 >= v15)
            v17 = *v12;
          else
            v17 = v7 - 1;
          v10 = v5 >= v14;
          v18 = v5 - v14;
          if (v10 && v4 <= v14 && v17 <= v18)
          {
            a2[1] = (unint64_t)v14;
            a2[2] = v17;
            if (!a3)
              return 0;
LABEL_34:
            result = 0;
            *a3 = v15;
            return result;
          }
LABEL_69:
          __break(0x5519u);
LABEL_70:
          __break(0x5515u);
          return result;
        }
        return 3;
      }
      v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8)
        return 3;
      if ((v15 & 0x7F) == 0 || v16 < v19)
        return 3;
      if (v14 >= v5 || v14 < v4)
        goto LABEL_69;
      if (!*v14)
        return 3;
      v15 = 0;
      v21 = (v19 - 1);
      v22 = v7 - v21 - 2;
      v23 = (unint64_t)&v12[v21 + 2];
      while (v14 != (_BYTE *)-1)
      {
        if (v14 >= v5)
          goto LABEL_69;
        v10 = v16-- != 0;
        if (!v10)
          goto LABEL_70;
        v24 = *v14++;
        v15 = (v15 << 8) | v24;
        LODWORD(v19) = v19 - 1;
        if (!(_DWORD)v19)
        {
          if (a3)
            v25 = 0;
          else
            v25 = v15 > v22;
          v26 = v25;
          result = 3;
          if (v15 < 0x80 || (v26 & 1) != 0)
            return result;
          if (v15 >= v22)
            v27 = v22;
          else
            v27 = v15;
          v10 = (unint64_t)v5 >= v23;
          v28 = &v5[-v23];
          if (!v10 || (unint64_t)v4 > v23 || v27 > (unint64_t)v28)
            goto LABEL_69;
          a2[1] = v23;
          a2[2] = v27;
          if (a3)
            goto LABEL_34;
          return 0;
        }
      }
    }
LABEL_68:
    __break(0x5513u);
    goto LABEL_69;
  }
  v9 = *v6;
  v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10)
    return 3;
  v8 = 0;
  result = 3;
  while (v7 >= 2)
  {
    v11 = v8;
    if (v8 >> 57)
      break;
    if (v6 == (unsigned __int8 *)-1)
      goto LABEL_68;
    if (v6 >= v5 || v6 < v4)
      goto LABEL_69;
    v12 = (char *)(v6 + 1);
    --v7;
    v13 = *v6;
    v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54)
        return 3;
      goto LABEL_20;
    }
  }
  return result;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(_QWORD *)(a2 + 8));
    if (*(char *)(a2 + 79) < 0)
    {
      operator delete(*(void **)(a2 + 56));
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_4:
      operator delete((void *)a2);
      return;
    }
    operator delete(*(void **)(a2 + 32));
    operator delete((void *)a2);
  }
}

uint64_t DERDecodeSeqInit(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8[4];

  v8[3] = *MEMORY[0x24BDAC8D0];
  memset(v8, 170, 24);
  result = DERDecodeItemPartialBufferGetLength(a1, v8, 0);
  if (!(_DWORD)result)
  {
    v6 = v8[0];
    *a2 = v8[0];
    if (v6 >> 1 == 0x1000000000000008)
    {
      if (__CFADD__(v8[1], v8[2]))
      {
        __break(0x5513u);
      }
      else
      {
        v7 = v8[1] + v8[2];
        if (v8[1] <= v8[1] + v8[2])
        {
          result = 0;
          *a3 = v8[1];
          a3[1] = v7;
          return result;
        }
      }
      __break(0x5519u);
    }
    else
    {
      return 2;
    }
  }
  return result;
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(std::regex_iterator<std::__wrap_iter<const char *>, char> *this, std::__wrap_iter<const char *> __a, std::__wrap_iter<const char *> __b, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__re, std::regex_constants::match_flag_type __m)
{
  __int16 v5;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  __int128 v10;
  _BYTE __p[40];
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v5 = __m;
  this->__begin_ = __a;
  this->__end_ = __b;
  this->__pregex_ = __re;
  this->__flags_ = __m;
  *(_OWORD *)&this->__match_.__matches_.__begin_ = 0u;
  p_match = &this->__match_;
  this->__match_.__prefix_.first.__i_ = 0;
  this->__match_.__prefix_.second.__i_ = 0;
  this->__match_.__prefix_.matched = 0;
  this->__match_.__suffix_.first.__i_ = 0;
  this->__match_.__suffix_.second.__i_ = 0;
  this->__match_.__suffix_.matched = 0;
  this->__match_.__ready_ = 0;
  this->__match_.__position_start_.__i_ = 0;
  *(_OWORD *)&this->__match_.__matches_.__end_cap_.__value_ = 0u;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&this->__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                               + 1) = 0u;
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13 = 0xAAAAAAAAAAAAAAAALL;
  v15 = 0xAAAAAAAAAAAAAA00;
  v17 = v10;
  v14 = 0;
  v16 = 0uLL;
  LOBYTE(v17) = 0;
  BYTE8(v17) = 0;
  v18 = 0;
  memset(__p, 0, sizeof(__p));
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)__re, (std::sub_match<const char *> *)__a.__i_, (std::sub_match<const char *> *)__b.__i_, (std::vector<std::csub_match> *)__p, __m);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)__a.__i_, (std::sub_match<std::__wrap_iter<const char *>> *)__b.__i_, (uint64_t *)__p, (v5 & 0x800) != 0);
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  return this;
}

void sub_212A4ED80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void *v13;

  if (__p)
  {
    operator delete(__p);
    v13 = *v11;
    if (!*v11)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v13 = *v11;
    if (!*v11)
      goto LABEL_3;
  }
  *(_QWORD *)(v10 + 40) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  int v9;
  int v10;
  const std::vector<std::csub_match>::value_type *v11;
  int v12;
  const char *i;
  std::vector<std::csub_match>::pointer begin;
  std::sub_match<const char *> *first;
  std::sub_match<const char *> *second;
  uint64_t result;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0)
    this[4].__end_ = a2;
  LOBYTE(this[4].__begin_) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) != 0)goto LABEL_28;
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28;
LABEL_13:
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      v12 = v9 | 0x80;
      for (i = (char *)&a2->first + 1; i != (const char *)a3; ++i)
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
          }
          else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)i, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
          {
            goto LABEL_28;
          }
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      }
      std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a3, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
      }
      else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
      {
        goto LABEL_28;
      }
    }
    result = 0;
    this->__end_ = this->__begin_;
    return result;
  }
  if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) == 0)goto LABEL_13;
LABEL_28:
  if (this->__end_ == this->__begin_)
    begin = (std::vector<std::csub_match>::pointer)v11;
  else
    begin = this->__begin_;
  first = (std::sub_match<const char *> *)begin->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)begin->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)begin->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  void *v25;
  void *v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  void *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  _BYTE v45[96];
  std::vector<std::csub_match>::value_type __x;
  char *v47;
  char *v48;
  unint64_t v49;

  v47 = 0;
  v48 = 0;
  v49 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.second = a3;
    *(_QWORD *)&__x.matched = 0xAAAAAAAAAAAAAA00;
    __x.first = a3;
    *(_DWORD *)v45 = 0;
    memset(&v45[8], 0, 85);
    v48 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v47, (uint64_t)v45);
    if (*(_QWORD *)&v45[56])
    {
      *(_QWORD *)&v45[64] = *(_QWORD *)&v45[56];
      operator delete(*(void **)&v45[56]);
    }
    if (*(_QWORD *)&v45[32])
    {
      *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
      operator delete(*(void **)&v45[32]);
    }
    v13 = v48;
    *((_DWORD *)v48 - 24) = 0;
    *((_QWORD *)v13 - 11) = a2;
    *((_QWORD *)v13 - 10) = a2;
    *((_QWORD *)v13 - 9) = a3;
    v14 = *((_QWORD *)v13 - 8);
    v15 = *(unsigned int *)(a1 + 28);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v13 - 7) - v14) >> 3);
    if (v15 <= v16)
    {
      if (v15 < v16)
        *((_QWORD *)v13 - 7) = v14 + 24 * v15;
    }
    else
    {
      std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
      v13 = v48;
    }
    v17 = *((_QWORD *)v13 - 5);
    v18 = *(unsigned int *)(a1 + 32);
    v19 = (*((_QWORD *)v13 - 4) - v17) >> 4;
    if (v18 <= v19)
    {
      if (v18 < v19)
        *((_QWORD *)v13 - 4) = v17 + 16 * v18;
    }
    else
    {
      std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v18 - v19);
      v13 = v48;
    }
    *((_QWORD *)v13 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *(v13 - 4) = a6;
    v20 = 1;
    while (2)
    {
      if ((v20 & 0xFFF) == 0 && (int)(v20 >> 12) >= (int)a3 - (int)a2)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v22 = *((_QWORD *)v13 - 2);
      if (v22)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v13 - 96);
      switch(*((_DWORD *)v13 - 24))
      {
        case 0xFFFFFC18:
          v23 = (const char *)*((_QWORD *)v13 - 10);
          if ((a5 & 0x20) != 0 && v23 == a2 || (a5 & 0x1000) != 0 && v23 != a3)
            goto LABEL_26;
          v36 = *a4;
          *(_QWORD *)v36 = a2;
          *(_QWORD *)(v36 + 8) = v23;
          *(_BYTE *)(v36 + 16) = 1;
          v37 = *((_QWORD *)v13 - 8);
          v38 = *((_QWORD *)v13 - 7) - v37;
          if (v38)
          {
            v39 = 0xAAAAAAAAAAAAAAABLL * (v38 >> 3);
            v40 = (_BYTE *)(v37 + 16);
            v41 = 1;
            do
            {
              v42 = v36 + 24 * v41;
              *(_OWORD *)v42 = *((_OWORD *)v40 - 1);
              v43 = *v40;
              v40 += 24;
              *(_BYTE *)(v42 + 16) = v43;
            }
            while (v39 > v41++);
          }
          v6 = 1;
          v21 = v47;
          if (!v47)
            return v6;
          goto LABEL_37;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_16;
        case 0xFFFFFC1F:
LABEL_26:
          v24 = v48;
          v25 = (void *)*((_QWORD *)v48 - 5);
          if (v25)
          {
            *((_QWORD *)v48 - 4) = v25;
            operator delete(v25);
          }
          v26 = (void *)*((_QWORD *)v24 - 8);
          if (v26)
          {
            *((_QWORD *)v24 - 7) = v26;
            operator delete(v26);
          }
          v48 = v24 - 96;
          goto LABEL_16;
        case 0xFFFFFC20:
          *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v45[64] = v27;
          *(_OWORD *)&v45[80] = v27;
          *(_OWORD *)&v45[32] = v27;
          *(_OWORD *)&v45[48] = v27;
          *(_OWORD *)v45 = v27;
          *(_OWORD *)&v45[16] = v27;
          std::__state<char>::__state((uint64_t)v45, (__int128 *)v13 - 6);
          (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v13 - 2) + 24))(*((_QWORD *)v13 - 2), 1, v13 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v45[80] + 24))(*(_QWORD *)&v45[80], 0, v45);
          v28 = v48;
          if ((unint64_t)v48 >= v49)
          {
            v48 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v47, (uint64_t)v45);
            if (*(_QWORD *)&v45[56])
            {
              *(_QWORD *)&v45[64] = *(_QWORD *)&v45[56];
              operator delete(*(void **)&v45[56]);
            }
          }
          else
          {
            v29 = *(_OWORD *)&v45[16];
            *(_OWORD *)v48 = *(_OWORD *)v45;
            *((_OWORD *)v28 + 1) = v29;
            *((_QWORD *)v28 + 4) = 0;
            *((_QWORD *)v28 + 5) = 0;
            *((_QWORD *)v28 + 6) = 0;
            *((_QWORD *)v28 + 7) = 0;
            *((_OWORD *)v28 + 2) = *(_OWORD *)&v45[32];
            *((_QWORD *)v28 + 6) = *(_QWORD *)&v45[48];
            memset(&v45[32], 0, 24);
            *((_QWORD *)v28 + 8) = 0;
            *((_QWORD *)v28 + 9) = 0;
            *(_OWORD *)(v28 + 56) = *(_OWORD *)&v45[56];
            *((_QWORD *)v28 + 9) = *(_QWORD *)&v45[72];
            memset(&v45[56], 0, 24);
            v30 = *(_QWORD *)&v45[80];
            *(_QWORD *)(v28 + 85) = *(_QWORD *)&v45[85];
            *((_QWORD *)v28 + 10) = v30;
            v48 = v28 + 96;
          }
          if (*(_QWORD *)&v45[32])
          {
            *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
            operator delete(*(void **)&v45[32]);
          }
LABEL_16:
          v21 = v47;
          v13 = v48;
          ++v20;
          if (v47 != v48)
            continue;
          v6 = 0;
          if (v47)
          {
LABEL_37:
            v31 = v48;
            v32 = v21;
            if (v48 != v21)
            {
              do
              {
                v33 = (void *)*((_QWORD *)v31 - 5);
                if (v33)
                {
                  *((_QWORD *)v31 - 4) = v33;
                  operator delete(v33);
                }
                v34 = (void *)*((_QWORD *)v31 - 8);
                if (v34)
                {
                  *((_QWORD *)v31 - 7) = v34;
                  operator delete(v34);
                }
                v31 -= 96;
              }
              while (v31 != v21);
              v32 = v47;
            }
            v48 = v21;
            operator delete(v32);
          }
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  return v6;
}

void sub_212A4F4D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_212A4F4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::__state<char>::~__state((uint64_t *)va);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_212A4F530(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_212A4F544(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v2;
  char *current;
  char *last;
  char v6;
  char v7;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v14;
  char v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  void **v19;
  char v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  BOOL v24;
  uint64_t v25;
  _BOOL4 negate;
  void *v27;
  unsigned __int8 v28;
  std::vector<char>::pointer v29;
  unint64_t v30;
  int v31;
  std::regex_traits<char>::char_class_type v32;
  char v33;
  int v34;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v36;
  char *v37;
  std::vector<std::pair<std::string, std::string>>::pointer v38;
  std::vector<std::pair<std::string, std::string>>::pointer v39;
  unsigned int v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  void **v44;
  void *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  BOOL v48;
  int v49;
  char *v50;
  size_t v51;
  size_t v52;
  int v53;
  int v54;
  char *v55;
  size_t v56;
  size_t v57;
  int v58;
  int v59;
  char *v60;
  size_t v61;
  size_t v62;
  int v63;
  int v64;
  char *v65;
  size_t v66;
  size_t v67;
  int v68;
  int v69;
  int v70;
  std::vector<std::string>::pointer v71;
  uint64_t v72;
  int64_t v73;
  unint64_t v74;
  unint64_t v75;
  const void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  BOOL v80;
  std::string *v81;
  void *v82;
  int v83;
  std::string *v84;
  uint64_t v85;
  const void *v86;
  void *v87;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v88;
  std::vector<std::string>::pointer v89;
  int v90;
  int64_t v91;
  unint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  std::string *v98;
  void *v99;
  int v100;
  void **v101;
  uint64_t v102;
  uint64_t v103;
  const void *v104;
  uint64_t v105;
  std::string::size_type size;
  int v107;
  std::vector<std::string>::pointer v108;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v111;
  std::regex_traits<char>::char_class_type neg_mask;
  int v113;
  std::string::size_type v114;
  std::regex_traits<char>::char_class_type v115;
  int v116;
  std::__node<char> *first;
  int v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  std::string::value_type *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char v126;
  BOOL v127;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v128;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v129;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v130;
  _BOOL4 v131;
  _BOOL4 v132;
  int v133;
  uint64_t v134;
  int v135;
  void *v136[3];
  __int16 __src;
  void *__p[3];

  v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v25 = 0;
    negate = this->__negate_;
    goto LABEL_245;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_34;
  v6 = *current;
  LOBYTE(__src) = *current;
  v7 = current[1];
  HIBYTE(__src) = v7;
  if (this->__icase_)
  {
    LOBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>(&__src, (uint64_t)&this->__traits_, __p, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    v27 = __p[1];
    operator delete(__p[0]);
    if (v27)
      goto LABEL_8;
LABEL_34:
    negate = 0;
    v25 = 1;
    v28 = *v2->__current_;
    LOBYTE(__src) = v28;
    if (!this->__icase_)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (!HIBYTE(__p[2]))
    goto LABEL_34;
LABEL_8:
  begin = this->__digraphs_.__begin_;
  v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    p_second = &begin->second;
    while (__src != *(p_second - 1) || HIBYTE(__src) != *p_second)
    {
      p_second += 2;
      if (!--v11)
        goto LABEL_17;
    }
    goto LABEL_227;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
    goto LABEL_167;
  }
  memset(v136, 170, sizeof(v136));
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x2AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAA00AAAALL;
  LOWORD(__p[0]) = __src;
  (*(void (**)(void **__return_ptr, const std::collate<char> *, void **, char *))(*(_QWORD *)this->__traits_.__col_
                                                                                           + 32))(v136, this->__traits_.__col_, __p, (char *)__p + 2);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v14 = this->__ranges_.__begin_;
  v15 = HIBYTE(v136[2]);
  v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (!v16)
  {
    v24 = 0;
    v70 = 0;
    v69 = 0;
    goto LABEL_164;
  }
  v128 = v2;
  v17 = 0;
  v18 = v16 / 48;
  if (SHIBYTE(v136[2]) >= 0)
    v19 = v136;
  else
    v19 = (void **)v136[0];
  v20 = HIBYTE(v136[2]);
  if (SHIBYTE(v136[2]) >= 0)
    v21 = (void *)HIBYTE(v136[2]);
  else
    v21 = v136[1];
  if (v18 <= 1)
    v22 = 1;
  else
    v22 = v16 / 48;
  v23 = (unsigned __int8 *)&v14->second.__r_.__value_.__r.__words[2] + 7;
  v24 = 1;
  do
  {
    v59 = (char)*(v23 - 24);
    if (v59 >= 0)
      v60 = (char *)(v23 - 47);
    else
      v60 = *(char **)(v23 - 47);
    if (v59 >= 0)
      v61 = *(v23 - 24);
    else
      v61 = *(_QWORD *)(v23 - 39);
    if ((unint64_t)v21 >= v61)
      v62 = v61;
    else
      v62 = (size_t)v21;
    v63 = memcmp(v60, v19, v62);
    if (v63)
    {
      if ((v63 & 0x80000000) == 0)
        goto LABEL_98;
    }
    else if (v61 > (unint64_t)v21)
    {
      goto LABEL_98;
    }
    v64 = (char)*v23;
    if (v64 >= 0)
      v65 = (char *)(v23 - 23);
    else
      v65 = *(char **)(v23 - 23);
    if (v64 >= 0)
      v66 = *v23;
    else
      v66 = *(_QWORD *)(v23 - 15);
    if (v66 >= (unint64_t)v21)
      v67 = (size_t)v21;
    else
      v67 = v66;
    v68 = memcmp(v19, v65, v67);
    if (v68)
    {
      if (v68 < 0)
      {
LABEL_123:
        v69 = 1;
        v70 = 5;
        goto LABEL_162;
      }
    }
    else if ((unint64_t)v21 <= v66)
    {
      goto LABEL_123;
    }
LABEL_98:
    v24 = ++v17 < v18;
    v23 += 48;
  }
  while (v22 != v17);
  v70 = 0;
  v69 = 0;
LABEL_162:
  v2 = v128;
  p_traits = &this->__traits_;
  v15 = v20;
LABEL_164:
  if (v15 < 0)
    operator delete(v136[0]);
  negate = v69;
  if (v24)
    goto LABEL_207;
LABEL_167:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_209;
  v133 = negate;
  v88 = v2;
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)p_traits, __p, __p);
  v89 = this->__equivalences_.__begin_;
  v90 = SHIBYTE(__p[2]);
  v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (!v91)
    goto LABEL_188;
  v92 = v91 / 24;
  v93 = __p[1];
  if (SHIBYTE(__p[2]) >= 0)
    v94 = (void *)HIBYTE(__p[2]);
  else
    v94 = __p[1];
  if (SHIBYTE(__p[2]) < 0)
  {
    v135 = SHIBYTE(__p[2]);
    v103 = 0;
    v104 = __p[0];
    if (v92 <= 1)
      v105 = 1;
    else
      v105 = v91 / 24;
    v97 = 1;
    do
    {
      size = HIBYTE(v89->__r_.__value_.__r.__words[2]);
      v107 = (char)size;
      if ((size & 0x80u) != 0)
        size = v89->__r_.__value_.__l.__size_;
      if (v94 == (void *)size)
      {
        v108 = v107 >= 0 ? v89 : (std::vector<std::string>::pointer)v89->__r_.__value_.__r.__words[0];
        if (!memcmp(v104, v108, (size_t)v93))
        {
          v133 = 1;
          v70 = 5;
          goto LABEL_203;
        }
      }
      v97 = ++v103 < v92;
      ++v89;
    }
    while (v105 != v103);
    v70 = 0;
LABEL_203:
    v2 = v88;
    v90 = v135;
    goto LABEL_204;
  }
  if (!HIBYTE(__p[2]))
  {
    v114 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
    if ((v114 & 0x80u) != 0)
      v114 = v89->__r_.__value_.__l.__size_;
    if (v114 != HIBYTE(__p[2]))
    {
      v119 = 0;
      if (v92 <= 1)
        v120 = 1;
      else
        v120 = v92;
      v121 = v120 - 1;
      v122 = &v89[1].__r_.__value_.__s.__data_[8];
      v2 = v88;
      while (v121 != v119)
      {
        ++v119;
        v123 = v122[15];
        v125 = *(_QWORD *)v122;
        v122 += 24;
        v124 = v125;
        if ((v123 & 0x80u) != 0)
          v123 = v124;
        if (v94 == (void *)v123)
        {
          v97 = v119 < v92;
          v133 = 1;
          v70 = 5;
          goto LABEL_204;
        }
      }
      v97 = 0;
      v70 = 0;
      goto LABEL_204;
    }
    v2 = v88;
    negate = 1;
LABEL_208:
    v25 = 2;
    goto LABEL_245;
  }
  v95 = 0;
  v96 = v92 <= 1 ? 1 : v91 / 24;
  v97 = 1;
  do
  {
    v98 = &v89[v95];
    v99 = (void *)HIBYTE(v98->__r_.__value_.__r.__words[2]);
    v100 = (char)v99;
    if ((char)v99 < 0)
      v99 = (void *)v98->__r_.__value_.__l.__size_;
    if (v94 == v99)
    {
      if (v100 < 0)
        v98 = (std::string *)v98->__r_.__value_.__r.__words[0];
      v101 = __p;
      v102 = HIBYTE(__p[2]);
      while (*(unsigned __int8 *)v101 == v98->__r_.__value_.__s.__data_[0])
      {
        v101 = (void **)((char *)v101 + 1);
        v98 = (std::string *)((char *)v98 + 1);
        if (!--v102)
        {
          v133 = 1;
          v70 = 5;
          v2 = v88;
          goto LABEL_204;
        }
      }
    }
    v97 = ++v95 < v92;
  }
  while (v95 != v96);
LABEL_188:
  v97 = 0;
  v70 = 0;
  v2 = v88;
LABEL_204:
  if (v90 < 0)
    operator delete(__p[0]);
  negate = v133;
  if (!v97)
  {
LABEL_209:
    if ((char)__src < 0)
    {
      neg_mask = this->__neg_mask_;
    }
    else
    {
      mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      v111 = tab[__src];
      if (((v111 & mask) != 0 || __src == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(__src) & 0x80000000) == 0
        && ((tab[HIBYTE(__src)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(__src) == 95))
      {
        goto LABEL_227;
      }
      neg_mask = this->__neg_mask_;
      if ((neg_mask & v111) != 0 || __src == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_226:
        v113 = negate;
LABEL_228:
        negate = v113;
        v25 = 2;
        goto LABEL_245;
      }
    }
    if ((SHIBYTE(__src) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(__src)] & neg_mask) == 0)
      {
        v113 = 1;
        if (HIBYTE(__src) != 95 || (neg_mask & 0x80) == 0)
          goto LABEL_228;
      }
      goto LABEL_226;
    }
LABEL_227:
    v113 = 1;
    goto LABEL_228;
  }
LABEL_207:
  if (v70)
    goto LABEL_208;
  v25 = 2;
  v28 = *v2->__current_;
  LOBYTE(__src) = v28;
  if (this->__icase_)
  {
LABEL_35:
    v28 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v28);
    LOBYTE(__src) = v28;
  }
LABEL_36:
  v29 = this->__chars_.__begin_;
  v30 = this->__chars_.__end_ - v29;
  if (v30)
  {
    if (v30 <= 1)
      v30 = 1;
    while (1)
    {
      v31 = *v29++;
      if (v31 == v28)
        break;
      if (!--v30)
        goto LABEL_41;
    }
LABEL_244:
    negate = 1;
    goto LABEL_245;
  }
LABEL_41:
  v32 = this->__neg_mask_;
  if (v32 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v28 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v28] & v32) == 0)
    {
      v34 = (v32 >> 7) & 1;
      v33 = v28 == 95 ? v34 : 0;
    }
    else
    {
      v33 = 1;
    }
    end = this->__neg_chars_.__end_;
    v36 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v28, end - this->__neg_chars_.__begin_);
    v37 = v36 ? v36 : end;
    if ((v33 & 1) == 0 && v37 == end)
      goto LABEL_244;
  }
  v38 = this->__ranges_.__begin_;
  v39 = this->__ranges_.__end_;
  if (v38 == v39)
    goto LABEL_128;
  memset(v136, 170, sizeof(v136));
  if (!this->__collate_)
  {
    v40 = 1;
    HIBYTE(v136[2]) = 1;
    LOWORD(v136[0]) = v28;
    v41 = (char *)v39 - (char *)v38;
    if (v41)
      goto LABEL_59;
LABEL_155:
    v48 = 0;
    if ((v40 & 0x80) != 0)
      goto LABEL_126;
    goto LABEL_127;
  }
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x1AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  LOWORD(__p[0]) = v28;
  (*(void (**)(void **__return_ptr, const std::collate<char> *, void **, char *))(*(_QWORD *)this->__traits_.__col_
                                                                                           + 32))(v136, this->__traits_.__col_, __p, (char *)__p + 1);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v38 = this->__ranges_.__begin_;
  v40 = HIBYTE(v136[2]);
  v41 = (char *)this->__ranges_.__end_ - (char *)v38;
  if (!v41)
    goto LABEL_155;
LABEL_59:
  v134 = v25;
  v131 = negate;
  v129 = v2;
  v42 = 0;
  v43 = v41 / 48;
  v126 = v40;
  if ((v40 & 0x80u) == 0)
    v44 = v136;
  else
    v44 = (void **)v136[0];
  if ((v40 & 0x80u) == 0)
    v45 = (void *)v40;
  else
    v45 = v136[1];
  if (v43 <= 1)
    v46 = 1;
  else
    v46 = v41 / 48;
  v47 = (unsigned __int8 *)&v38->second.__r_.__value_.__r.__words[2] + 7;
  v48 = 1;
  while (2)
  {
    v49 = (char)*(v47 - 24);
    if (v49 >= 0)
      v50 = (char *)(v47 - 47);
    else
      v50 = *(char **)(v47 - 47);
    if (v49 >= 0)
      v51 = *(v47 - 24);
    else
      v51 = *(_QWORD *)(v47 - 39);
    if ((unint64_t)v45 >= v51)
      v52 = v51;
    else
      v52 = (size_t)v45;
    v53 = memcmp(v50, v44, v52);
    if (v53)
    {
      if (v53 < 0)
        goto LABEL_84;
    }
    else if (v51 <= (unint64_t)v45)
    {
LABEL_84:
      v54 = (char)*v47;
      if (v54 >= 0)
        v55 = (char *)(v47 - 23);
      else
        v55 = *(char **)(v47 - 23);
      if (v54 >= 0)
        v56 = *v47;
      else
        v56 = *(_QWORD *)(v47 - 15);
      if (v56 >= (unint64_t)v45)
        v57 = (size_t)v45;
      else
        v57 = v56;
      v58 = memcmp(v44, v55, v57);
      if (v58)
      {
        if (v58 < 0)
        {
LABEL_95:
          negate = 1;
          v2 = v129;
          v25 = v134;
          if ((v126 & 0x80) == 0)
            goto LABEL_127;
          goto LABEL_126;
        }
      }
      else if ((unint64_t)v45 <= v56)
      {
        goto LABEL_95;
      }
    }
    v48 = ++v42 < v43;
    v47 += 48;
    if (v46 != v42)
      continue;
    break;
  }
  v2 = v129;
  negate = v131;
  v25 = v134;
  if ((v126 & 0x80) == 0)
    goto LABEL_127;
LABEL_126:
  operator delete(v136[0]);
LABEL_127:
  if (v48)
    goto LABEL_245;
LABEL_128:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_239:
    if ((v28 & 0x80) != 0)
      goto LABEL_245;
    v115 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v28] & v115) == 0)
    {
      v116 = (v115 >> 7) & 1;
      if (v28 != 95)
        v116 = 0;
      if (v116 != 1)
        goto LABEL_245;
    }
    goto LABEL_244;
  }
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)&this->__traits_, (_BYTE *)&__src + 1, __p);
  v71 = this->__equivalences_.__begin_;
  v72 = HIBYTE(__p[2]);
  v73 = (char *)this->__equivalences_.__end_ - (char *)v71;
  if (!v73)
  {
    if ((HIBYTE(__p[2]) & 0x80) != 0)
      operator delete(__p[0]);
LABEL_238:
    v28 = __src;
    goto LABEL_239;
  }
  v132 = negate;
  v130 = v2;
  v74 = 0;
  v75 = v73 / 24;
  v76 = __p[0];
  v77 = __p[1];
  if (SHIBYTE(__p[2]) >= 0)
    v78 = (void *)HIBYTE(__p[2]);
  else
    v78 = __p[1];
  if (v75 <= 1)
    v79 = 1;
  else
    v79 = v73 / 24;
  v80 = 1;
  while (2)
  {
    v81 = &v71[v74];
    v82 = (void *)HIBYTE(v81->__r_.__value_.__r.__words[2]);
    v83 = (char)v82;
    if ((char)v82 < 0)
      v82 = (void *)v81->__r_.__value_.__l.__size_;
    if (v78 != v82)
    {
LABEL_149:
      if (++v74 == v79)
      {
        if ((v72 & 0x80) != 0)
LABEL_236:
          operator delete(__p[0]);
        v2 = v130;
        negate = v132;
        goto LABEL_238;
      }
      goto LABEL_153;
    }
    if (v83 >= 0)
      v84 = &v71[v74];
    else
      v84 = (std::string *)v81->__r_.__value_.__r.__words[0];
    if ((v72 & 0x80) == 0)
    {
      if (!(_DWORD)v72)
      {
LABEL_157:
        v2 = v130;
        negate = 1;
        if (!v80)
          goto LABEL_238;
        goto LABEL_245;
      }
      v85 = 0;
      while (*((unsigned __int8 *)__p + v85) == v84->__r_.__value_.__s.__data_[v85])
      {
        if (v72 == ++v85)
          goto LABEL_157;
      }
      goto LABEL_149;
    }
    v127 = v80;
    v86 = v76;
    v87 = v77;
    if (memcmp(v76, v84, (size_t)v77))
    {
      ++v74;
      v77 = v87;
      v76 = v86;
      if (v74 == v79)
        goto LABEL_236;
LABEL_153:
      v80 = v74 < v75;
      continue;
    }
    break;
  }
  operator delete(__p[0]);
  v2 = v130;
  negate = 1;
  if (!v127)
    goto LABEL_238;
LABEL_245:
  if (negate == this->__negate_)
  {
    first = 0;
    v118 = -993;
  }
  else
  {
    v2->__current_ += v25;
    first = this->__first_;
    v118 = -995;
  }
  v2->__do_ = v118;
  v2->__node_ = first;
}

void sub_212A5001C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;

  v2 = *(unsigned int *)(result + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    *v4 = 0;
    if (!*(_QWORD *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(_QWORD *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
      *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
      v20 = *(_DWORD *)(result + 44);
      v21 = *(_DWORD *)(result + 48);
      if (v20 == v21)
        return result;
      v22 = (v21 - 1);
      v23 = (v20 - 1);
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 32);
      v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        v28 = v25 + 24 * v23 + 24;
        v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(_QWORD *)(v28 - 24) = v24;
          *(_QWORD *)(v28 - 16) = v24;
          *(_QWORD *)v28 = v24;
          *(_QWORD *)(v28 + 8) = v24;
          *(_BYTE *)(v28 - 8) = 0;
          *(_BYTE *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL))
          return result;
      }
      else
      {
        v27 = v23;
      }
      v30 = v22 - v27;
      v31 = (_BYTE *)(v25 + 24 * v27 + 16);
      do
      {
        *((_QWORD *)v31 - 2) = v24;
        *((_QWORD *)v31 - 1) = v24;
        *v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  v5 = *v4 + 1;
  *v4 = v5;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6)
    v8 = v5 < v7 && *(_QWORD *)(v3 + 16 * v2 + 8) != *(_QWORD *)(a2 + 16);
  if (v8 && v5 >= v6)
    goto LABEL_26;
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(result + 44);
  v13 = *(_DWORD *)(result + 48);
  if (v12 == v13)
    return result;
  v14 = (v13 - 1);
  v15 = (v12 - 1);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    v19 = v15;
LABEL_39:
    v34 = v14 - v19;
    v35 = (_BYTE *)(v17 + 24 * v19 + 16);
    do
    {
      *((_QWORD *)v35 - 2) = v16;
      *((_QWORD *)v35 - 1) = v16;
      *v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  v32 = v17 + 24 * v15 + 24;
  v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)(v32 - 24) = v16;
    *(_QWORD *)(v32 - 16) = v16;
    *(_QWORD *)v32 = v16;
    *(_QWORD *)(v32 + 8) = v16;
    *(_BYTE *)(v32 - 8) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_39;
  return result;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  uint64_t v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::sub_match<const char *> *v14;
  std::vector<std::csub_match>::pointer end;
  unint64_t v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v10;
    v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    v13 = 24 * __n;
    v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v12->matched = *(_QWORD *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  end = this->__end_;
  v16 = end - begin;
  if (v16 >= __n)
    v17 = __n;
  else
    v17 = end - begin;
  if (v17)
  {
    v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  v19 = &end[__n - v16];
  v20 = 24 * __n - 24 * v16;
  do
  {
    v21 = __u->std::pair<const char *, const char *>;
    *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::pair<unsigned long, const char *> *value;
  std::pair<unsigned long, const char *> *end;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  std::vector<std::pair<unsigned long, const char *>>::size_type v12;
  std::pair<unsigned long, const char *> *v13;
  size_t v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((v7 + __n) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    v14 = __n;
    v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
      operator delete(end);
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale *v1;

  v1 = std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);
  operator delete(v1);
}

uint64_t DEREncodeSequenceFromObject(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t *a8)
{
  unint64_t v8;
  unint64_t v11;
  uint64_t result;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  const void **v27;
  __int16 v28;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  size_t v36;
  unint64_t v37;
  size_t v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v44;
  unint64_t v45[2];

  v45[1] = *MEMORY[0x24BDAC8D0];
  v8 = ~a6;
  if (~a6 < a7)
    goto LABEL_73;
  v11 = *a8;
  v44 = a7;
  v45[0] = 0;
  if (v11 < a7)
    goto LABEL_74;
  result = DEREncodeTag(a1, a6, &v44);
  if ((_DWORD)result)
    return result;
  if (v44 > v8)
    goto LABEL_73;
  v17 = a7 - v44;
  if (a7 < v44)
    goto LABEL_75;
  v18 = a6 + a7;
  v19 = a6 + v44;
  if (a6 + v44 < v18)
  {
    result = DERContentLengthOfEncodedSequence(a2, a3, a4, a5, v45);
    if ((_DWORD)result)
      return result;
    v44 = v17;
    if (v19 > a6 + v11 || v19 < a6 || v17 > a6 + v11 - v19)
      goto LABEL_74;
    v42 = a6 + v11;
    v20 = v45[0];
    result = DEREncodeLengthSized(v45[0], v19, v17, (uint64_t *)&v44);
    if ((_DWORD)result)
      return result;
    v21 = v42;
    if (__CFADD__(v19, v44))
    {
LABEL_73:
      __break(0x5513u);
      goto LABEL_74;
    }
    v22 = v17 - v44;
    if (v17 >= v44)
    {
      v23 = (_BYTE *)(v19 + v44);
      if (!__CFADD__(v19 + v44, v20))
      {
        if ((unint64_t)&v23[v20] > v18)
          return 7;
        if (a4)
        {
          v24 = 0;
          v25 = a2 + a3;
          v41 = 24 * a4;
          while (1)
          {
            if (v24 > ~a5)
              goto LABEL_73;
            v26 = *(_QWORD *)(a5 + v24);
            if (v26 > ~a2)
              goto LABEL_73;
            v27 = (const void **)(a2 + v26);
            v28 = *(_WORD *)(a5 + v24 + 16);
            if ((v28 & 0x200) != 0)
              break;
            if ((v28 & 1) == 0)
              goto LABEL_29;
            if ((unint64_t)v27 < a2 || (unint64_t)(v27 + 2) > v25)
              goto LABEL_74;
            if (v27[1])
            {
LABEL_29:
              v44 = v22;
              if ((unint64_t)v23 > v21 || (unint64_t)v23 < a6 || v22 > v21 - (unint64_t)v23)
                goto LABEL_74;
              result = DEREncodeTag(*(_QWORD *)(a5 + v24 + 8), (unint64_t)v23, &v44);
              if ((_DWORD)result)
                return result;
              if (__CFADD__(v23, v44))
                goto LABEL_73;
              v30 = v22 - v44;
              if (v22 < v44)
                goto LABEL_75;
              if ((unint64_t)v27 < a2 || (unint64_t)(v27 + 2) > v25)
                goto LABEL_74;
              v31 = (unint64_t)v27[1];
              v45[0] = v31;
              v32 = 1;
              if ((v28 & 0x100) != 0 && v31 && *(char *)*v27 < 0)
              {
                v32 = 0;
                v45[0] = ++v31;
              }
              v33 = (unint64_t)&v23[v44];
              v44 = v30;
              if (v33 > v42 || v33 < a6 || v30 > v42 - v33)
                goto LABEL_74;
              result = DEREncodeLengthSized(v31, v33, v30, (uint64_t *)&v44);
              if ((_DWORD)result)
                return result;
              v34 = v44;
              if (__CFADD__(v33, v44))
                goto LABEL_73;
              v35 = v30 - v44;
              if (v30 < v44)
                goto LABEL_75;
              v23 = (_BYTE *)(v33 + v44);
              if ((v32 & 1) == 0)
              {
                if (v23 == (_BYTE *)-1)
                  goto LABEL_73;
                if ((unint64_t)v23 >= v42 || (unint64_t)v23 < a6)
                  goto LABEL_74;
                *v23 = 0;
                --v35;
                if (v30 == v34)
                  goto LABEL_75;
                ++v23;
              }
              if ((unint64_t)v23 > v42)
                goto LABEL_74;
              if ((unint64_t)v23 < a6)
                goto LABEL_74;
              v36 = (size_t)v27[1];
              if (v36 > v42 - (unint64_t)v23)
                goto LABEL_74;
              result = (uint64_t)memmove(v23, *v27, v36);
              v21 = v42;
              v37 = (unint64_t)v27[1];
              if (__CFADD__(v23, v37))
                goto LABEL_73;
              v22 = v35 - v37;
              if (v35 < v37)
                goto LABEL_75;
              goto LABEL_69;
            }
LABEL_70:
            v24 += 24;
            if (v41 == v24)
              goto LABEL_71;
          }
          if ((unint64_t)v27 < a2 || (unint64_t)(v27 + 2) > v25)
            goto LABEL_74;
          if ((unint64_t)v23 > v21)
            goto LABEL_74;
          if ((unint64_t)v23 < a6)
            goto LABEL_74;
          v39 = (size_t)v27[1];
          if (v39 > v21 - (unint64_t)v23)
            goto LABEL_74;
          result = (uint64_t)memmove(v23, *v27, v39);
          v21 = v42;
          v37 = (unint64_t)v27[1];
          if (__CFADD__(v23, v37))
            goto LABEL_73;
          v40 = v22 >= v37;
          v22 -= v37;
          if (!v40)
            goto LABEL_75;
LABEL_69:
          v23 += v37;
          goto LABEL_70;
        }
LABEL_71:
        if ((unint64_t)&v23[-a6] <= *a8)
        {
          result = 0;
          *a8 = (unint64_t)&v23[-a6];
          return result;
        }
LABEL_74:
        __break(0x5519u);
      }
      goto LABEL_73;
    }
LABEL_75:
    __break(0x5515u);
    return result;
  }
  return 7;
}

uint64_t DEREncodeTag(uint64_t result, unint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;

  v3 = result & 0x1FFFFFFFFFFFFFFFLL;
  if ((result & 0x1FFFFFFFFFFFFFFFuLL) < 0x1F)
  {
    if (*a3)
    {
      *(_BYTE *)a2 = HIBYTE(result) & 0xE0 | result;
      v8 = 1;
      goto LABEL_17;
    }
    return 7;
  }
  v4 = 0;
  v5 = result & 0x1FFFFFFFFFFFFFFFLL;
  do
  {
    ++v4;
    v6 = v5 > 0x7F;
    v5 >>= 7;
  }
  while (v6);
  v7 = *a3;
  if (v4 >= *a3)
    return 7;
  if (v4 >= ~a2 || (*(_BYTE *)a2 = HIBYTE(result) | 0x1F, a2 + v4 == -2))
  {
LABEL_20:
    __break(0x5513u);
    goto LABEL_21;
  }
  if (a2 + v4 >= a2)
  {
    v8 = v4 + 1;
    *(_BYTE *)(a2 + v4) = result & 0x7F;
    if (v3 >= 0x80)
    {
      v9 = (_BYTE *)(a2 + v4 - 1);
      v10 = (_BYTE *)(a2 + v7);
      while (v9 != (_BYTE *)-2)
      {
        if (v9 >= v10 || (unint64_t)v9 < a2)
          goto LABEL_21;
        v11 = v3 >> 14;
        v3 >>= 7;
        *v9-- = v3 | 0x80;
        if (!v11)
          goto LABEL_17;
      }
      goto LABEL_20;
    }
LABEL_17:
    if (v8 <= *a3)
    {
      result = 0;
      *a3 = v8;
      return result;
    }
  }
LABEL_21:
  __break(0x5519u);
  return result;
}

unint64_t DEREncodeLengthSized(unint64_t result, unint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;

  if (result >= 0x80)
  {
    v5 = 0;
    v6 = result;
    do
    {
      --v5;
      v7 = v6 > 0xFF;
      v6 >>= 8;
    }
    while (v7);
    v8 = -v5;
    v9 = 7;
    if (-v5 < a3 && v8 <= 0x7E)
    {
      if (*a4)
      {
        v4 = 1 - v5;
        *(_BYTE *)a2 = -(char)v5 | 0x80;
        if (v8 < ~a2)
        {
          v10 = (_BYTE *)(a2 - v5);
          if (a2 - v5 != -2)
          {
            v11 = (_BYTE *)(a2 + *a4);
            while (v10 != (_BYTE *)-1)
            {
              if (v10 >= v11 || (unint64_t)v10 < a2)
                goto LABEL_23;
              *v10-- = result;
              v7 = result > 0xFF;
              result >>= 8;
              if (!v7)
              {
                if (v8 >= *a4)
                  goto LABEL_23;
                goto LABEL_19;
              }
            }
          }
        }
        __break(0x5513u);
      }
      goto LABEL_23;
    }
    return v9;
  }
  if (!a3)
    return 7;
  if (*a4)
  {
    *(_BYTE *)a2 = result;
    if (*a4)
    {
      v4 = 1;
LABEL_19:
      v9 = 0;
      *a4 = v4;
      return v9;
    }
  }
LABEL_23:
  __break(0x5519u);
  return result;
}

uint64_t DEREncodeItemSized(unint64_t a1, unint64_t a2, const void *a3, unint64_t a4, unint64_t a5, unint64_t *a6)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x24BDAC8D0];
  v12 = *a6;
  v13 = DERLengthOfItem(a1, a2);
  if (v13 > a5)
    return 7;
  v15 = v13;
  if (v13 > *a6)
    goto LABEL_20;
  *a6 = v13;
  v22[0] = v13;
  if (v13 > v12)
    goto LABEL_20;
  result = DEREncodeTag(a1, a4, (unint64_t *)v22);
  if ((_DWORD)result)
    return result;
  v16 = v22[0];
  if (__CFADD__(a4, v22[0]))
  {
LABEL_21:
    __break(0x5513u);
    goto LABEL_22;
  }
  v17 = v15 >= v22[0];
  v18 = v15 - v22[0];
  if (!v17)
    goto LABEL_22;
  v19 = a4 + v12;
  v20 = a4 + v22[0];
  v22[0] = v18;
  if (a4 + v16 > a4 + v12 || v20 < a4 || v18 > v19 - v20)
LABEL_20:
    __break(0x5519u);
  result = DEREncodeLengthSized(a2, v20, v18, v22);
  if ((_DWORD)result)
    return result;
  if (__CFADD__(v20, v22[0]))
    goto LABEL_21;
  if (v18 < v22[0])
  {
LABEL_22:
    __break(0x5515u);
    return result;
  }
  v21 = (void *)(v20 + v22[0]);
  if (v19 < v20 + v22[0] || (unint64_t)v21 < a4 || v19 - (v20 + v22[0]) < a2)
    goto LABEL_20;
  memmove(v21, a3, a2);
  return 0;
}

unint64_t DERLengthOfItem(unint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;

  v2 = result & 0x1FFFFFFFFFFFFFFFLL;
  v3 = 1;
  if ((result & 0x1FFFFFFFFFFFFFFFLL) >= 0x1F)
  {
    do
    {
      ++v3;
      v4 = v2 > 0x7F;
      v2 >>= 7;
    }
    while (v4);
  }
  v5 = 1;
  if (a2 >= 0x80)
  {
    v6 = a2;
    do
    {
      ++v5;
      v4 = v6 > 0xFF;
      v6 >>= 8;
    }
    while (v4);
  }
  v7 = __CFADD__(v3, v5);
  v8 = v3 + v5;
  if (v7 || (result = v8 + a2, __CFADD__(v8, a2)))
    __break(0x5500u);
  return result;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

void std::__alternate<char>::~__alternate(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24CE82A38;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

uint64_t DERParseInteger(char **a1, _DWORD *a2)
{
  uint64_t result;
  unint64_t v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v4[0] = 0xAAAAAAAAAAAAAAAALL;
  result = DERParseInteger64(a1, v4);
  if (!(_DWORD)result)
  {
    if (HIDWORD(v4[0]))
    {
      return 7;
    }
    else
    {
      result = 0;
      *a2 = v4[0];
    }
  }
  return result;
}

uint64_t DERParseInteger64(char **a1, unint64_t *a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t result;
  unint64_t v5;
  unsigned int v6;

  v2 = (unint64_t)a1[1];
  if (!v2)
    return 3;
  v3 = (unsigned __int8 *)*a1;
  if (**a1 < 0)
    return 3;
  if (**a1)
  {
    if (v2 > 8)
      return 7;
    goto LABEL_10;
  }
  if (v2 >= 2)
  {
    if (((char)v3[1] & 0x80000000) == 0)
      return 3;
    if (v2 > 9)
      return 7;
  }
LABEL_10:
  v5 = 0;
  do
  {
    v6 = *v3++;
    v5 = v6 | (v5 << 8);
    --v2;
  }
  while (v2);
  result = 0;
  *a2 = v5;
  return result;
}

uint64_t DERLengthOfEncodedSequence(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5[2];

  v5[1] = *MEMORY[0x24BDAC8D0];
  v5[0] = 0;
  if ((a2 | 0x7FFFFFFFFFFFFFFFLL) < a2)
    __break(0x5519u);
  if (DERLengthOfEncodedSequenceFromObject(a1, a2, ~a2 & 0x7FFFFFFFFFFFFFFFLL, a3, a4, v5))
    return 0;
  else
    return v5[0];
}

unint64_t DERLengthOfEncodedSequenceFromObject(uint64_t a1, unint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t *a6)
{
  unint64_t result;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  v17[0] = 0;
  result = DERContentLengthOfEncodedSequence(a2, a3, a4, a5, v17);
  if (!(_DWORD)result)
  {
    v9 = a1 & 0x1FFFFFFFFFFFFFFFLL;
    v10 = 1;
    if ((a1 & 0x1FFFFFFFFFFFFFFFuLL) >= 0x1F)
    {
      do
      {
        ++v10;
        v11 = v9 > 0x7F;
        v9 >>= 7;
      }
      while (v11);
    }
    v12 = 1;
    if (v17[0] >= 0x80uLL)
    {
      v13 = v17[0];
      do
      {
        ++v12;
        v11 = v13 > 0xFF;
        v13 >>= 8;
      }
      while (v11);
    }
    v14 = __CFADD__(v10, v12);
    v15 = v10 + v12;
    if (v14 || (v14 = __CFADD__(v15, v17[0]), v16 = v15 + v17[0], v14))
    {
      __break(0x5500u);
    }
    else
    {
      result = 0;
      *a6 = v16;
    }
  }
  return result;
}

unint64_t DERContentLengthOfEncodedSequence(unint64_t result, unint64_t a2, int a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unsigned __int8 **v10;
  __int16 v11;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v20;
  unint64_t v21;
  uint64_t v22;

  v5 = 0;
  if (!a3)
  {
LABEL_38:
    result = 0;
LABEL_40:
    *a5 = v5;
    return result;
  }
  v6 = 0;
  v7 = result + a2;
  while (24 * (unint64_t)v6 <= ~a4)
  {
    v8 = *(_QWORD *)(a4 + 24 * v6);
    v9 = v8 > 0xFFFFFFFFFFFFFFEFLL || v8 + 16 > a2;
    if (v9)
    {
      v5 = 0;
      result = 7;
      goto LABEL_40;
    }
    if (v8 > ~result)
      break;
    v10 = (unsigned __int8 **)(result + v8);
    v11 = *(_WORD *)(a4 + 24 * v6 + 16);
    if ((v11 & 0x200) == 0)
    {
      if ((v11 & 1) != 0)
      {
        if ((unint64_t)v10 < result || (unint64_t)(v10 + 2) > v7)
          goto LABEL_43;
        if (!v10[1])
          goto LABEL_37;
      }
      v13 = *(_QWORD *)(a4 + 24 * v6 + 8) & 0x1FFFFFFFFFFFFFFFLL;
      v14 = 1;
      if (v13 >= 0x1F)
      {
        do
        {
          ++v14;
          v9 = v13 > 0x7F;
          v13 >>= 7;
        }
        while (v9);
      }
      v15 = __CFADD__(v5, v14);
      v16 = v5 + v14;
      if (v15)
        goto LABEL_42;
      if ((unint64_t)v10 < result || (unint64_t)(v10 + 2) > v7)
        goto LABEL_43;
      v17 = (unint64_t)v10[1];
      if ((*(_WORD *)(a4 + 24 * v6 + 16) & 0x100) != 0)
      {
        if (v17)
        {
          v17 += (unint64_t)**v10 >> 7;
          goto LABEL_24;
        }
LABEL_25:
        v18 = 1;
      }
      else
      {
LABEL_24:
        if (v17 < 0x80)
          goto LABEL_25;
        v18 = 1;
        v21 = v17;
        do
        {
          ++v18;
          v9 = v21 > 0xFF;
          v21 >>= 8;
        }
        while (v9);
      }
      v15 = __CFADD__(v16, v18);
      v22 = v16 + v18;
      if (v15)
        goto LABEL_42;
      v15 = __CFADD__(v22, v17);
      v5 = v22 + v17;
      if (v15)
        goto LABEL_42;
      goto LABEL_37;
    }
    if ((unint64_t)v10 < result || (unint64_t)(v10 + 2) > v7)
      goto LABEL_43;
    v20 = v10[1];
    v15 = __CFADD__(v5, v20);
    v5 += (uint64_t)v20;
    if (v15)
      goto LABEL_42;
LABEL_37:
    if (++v6 == a3)
      goto LABEL_38;
  }
  __break(0x5513u);
LABEL_42:
  __break(0x5500u);
LABEL_43:
  __break(0x5519u);
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  std::basic_regex<char> *v8;
  std::__owns_one_state<char> *v9;
  unsigned int marked_count;
  std::basic_regex<char> *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  std::__node<char> *v15;
  std::__node<char> *v16;
  std::__node<char> *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;
  std::__node<char> *v20;
  std::__owns_one_state<char> *v21;
  std::basic_regex<char> *v22;
  char *v23;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  std::basic_regex<char> *v26;
  std::__node<char> *v27;
  std::__owns_one_state<char> *v28;
  std::__node<char> *v29;

  end = a1->__end_;
  v7 = a2;
  while (1)
  {
    v8 = (std::basic_regex<char> *)v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v7, a3);
    if (v7 == (char *)v8)
      break;
LABEL_2:
    if (v7 == (char *)v8)
      goto LABEL_6;
  }
  v9 = a1->__end_;
  marked_count = a1->__marked_count_;
  v11 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
  if (v11 != v8)
  {
    v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == (std::basic_regex<char> *)a2)
  {
    v12 = (std::__node<char> *)operator new(0x10uLL);
    v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v8 == (std::basic_regex<char> *)a3)
    return a3;
  while (2)
  {
    if (LOBYTE(v8->__traits_.__loc_.__locale_) != 124)
      return (char *)v8;
    v21 = a1->__end_;
    v22 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v23 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (2)
    {
      v8 = (std::basic_regex<char> *)v23;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v23, a3);
      if (v23 != (char *)v8)
      {
LABEL_14:
        if (v23 == (char *)v8)
          goto LABEL_17;
        continue;
      }
      break;
    }
    v24 = a1->__end_;
    v25 = a1->__marked_count_;
    v26 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
    if (v26 != v8)
    {
      v23 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v26, (std::basic_regex<char> *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
      goto LABEL_14;
    }
LABEL_17:
    if (v8 == v22)
    {
      v27 = (std::__node<char> *)operator new(0x10uLL);
      v28 = a1->__end_;
      v29 = v28->__first_;
      v27[1].__vftable = (std::__node<char>_vtbl *)v29;
      v28->__first_ = v27;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    v15 = (std::__node<char> *)operator new(0x18uLL);
    v16 = v21->__first_;
    v15[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
    v15[2].__vftable = (std::__node<char>_vtbl *)v16;
    v15->__vftable = (std::__node<char>_vtbl *)&unk_24CE82AB0;
    end->__first_ = v15;
    v21->__first_ = 0;
    v17 = (std::__node<char> *)operator new(0x10uLL);
    v18 = a1->__end_->__first_;
    v17[1].__vftable = (std::__node<char>_vtbl *)v18;
    v21->__first_ = v17;
    a1->__end_->__first_ = 0;
    v19 = (std::__node<char> *)operator new(0x10uLL);
    v20 = v21->__first_;
    v19->__vftable = (std::__node<char>_vtbl *)&unk_24CE82AF8;
    v19[1].__vftable = (std::__node<char>_vtbl *)v20;
    a1->__end_->__first_ = v19;
    a1->__end_ = (std::__owns_one_state<char> *)v21->__first_;
    if (v8 != (std::basic_regex<char> *)a3)
      continue;
    return a3;
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  void *v8;
  char *v9;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if (v7 == a3)
      goto LABEL_20;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3)
      goto LABEL_20;
    do
    {
      v9 = v7;
      v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v7, a3, (uint64_t)v8);
    }
    while (v7 != v9);
    if (v9 == a3)
      goto LABEL_20;
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_212A514B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v4;
  int v5;
  char *v6;
  int v9;
  int v10;
  char v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  std::basic_regex<char>::value_type *v26;
  char *v27;
  char *v28;
  int v29;
  void **v30;
  _BYTE *v31;
  char *v32;
  _BYTE *v34;
  void *v35[2];
  uint64_t v36;
  void *v37[2];
  uint64_t v38;
  void *__p[2];
  uint64_t v40;
  __int128 v41;
  int64_t v42;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (char *)a4;
  v9 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_38:
    v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_33;
  }
  v10 = a2[1];
  if (v10 != 46)
  {
    if (v10 != 58)
    {
      if (v10 == 61)
      {
        v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
        v11 = 0;
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_64;
        goto LABEL_63;
      }
      v9 = 0;
      goto LABEL_38;
    }
    v12 = a2 + 2;
    if (a3 - (v4 + 2) >= 2)
    {
      v13 = 0;
      v14 = (unsigned __int8 *)v4;
      if (v4[2] == 58)
        goto LABEL_14;
      do
      {
        do
        {
          if (a3 - v4 - 4 == v13)
            goto LABEL_89;
          v14 = (unsigned __int8 *)&v4[++v13];
        }
        while (v4[v13 + 2] != 58);
LABEL_14:
        ;
      }
      while (v14[3] != 93);
      v15 = &v4[v13 + 2];
      if (v15 != a3)
      {
        v16 = std::regex_traits<char>::__lookup_classname<char const*>(a1, v12, v15, *(_DWORD *)(a1 + 24) & 1);
        if (!v16)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
        v11 = 0;
        *((_DWORD *)v6 + 40) |= v16;
        v6 = &v4[v13 + 4];
        if (SHIBYTE(v40) < 0)
          goto LABEL_63;
        goto LABEL_64;
      }
    }
LABEL_89:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  v17 = a2 + 2;
  if (a3 - (v4 + 2) < 2)
    goto LABEL_89;
  v18 = a3 - v4 - 4;
  v19 = v4 + 2;
  v20 = v17 + 1;
  if (*v17 == 46)
    goto LABEL_23;
  do
  {
    do
    {
      if (!v18)
        goto LABEL_89;
      --v18;
      v19 = v20;
      v21 = *v20++;
    }
    while (v21 != 46);
LABEL_23:
    ;
  }
  while (*v20 != 93);
  if (v19 == a3)
    goto LABEL_89;
  std::regex_traits<char>::__lookup_collatename<char *>(v17, a1, v19, (uint64_t)&v41);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v40 = v42;
  *(_OWORD *)__p = v41;
  v22 = (char *)HIBYTE(v42);
  v9 = SHIBYTE(v42);
  v23 = *((_QWORD *)&v41 + 1);
  if (v42 < 0)
    v22 = (char *)__p[1];
  if ((unint64_t)(v22 - 1) >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  v4 = v19 + 2;
  v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v42 >= 0)
    v23 = HIBYTE(v42);
  if (v23)
  {
    v28 = v4;
    if (v4 == a3)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_33:
  if ((v24 | 0x40) != 0x40)
  {
    LOBYTE(v25) = *v4;
LABEL_57:
    if (v9 < 0)
    {
      v34 = __p[0];
      __p[1] = (void *)1;
      *(_BYTE *)__p[0] = v25;
      v34[1] = 0;
      v28 = v4 + 1;
      if (v4 + 1 == a3)
        goto LABEL_41;
    }
    else
    {
      HIBYTE(v40) = 1;
      LOWORD(__p[0]) = v25;
      v28 = v4 + 1;
      if (v4 + 1 == a3)
        goto LABEL_41;
    }
    goto LABEL_40;
  }
  v25 = *v4;
  if (v25 != 92)
    goto LABEL_57;
  v26 = v4 + 1;
  if (v24)
    v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v26, a3, (uint64_t *)__p);
  else
    v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v26, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v6);
  v28 = v27;
  if (v27 == a3)
  {
LABEL_41:
    if (SHIBYTE(v40) < 0)
    {
      if (!__p[1])
        goto LABEL_62;
      if (__p[1] != (void *)1)
      {
        v30 = (void **)__p[0];
LABEL_61:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v6, *(char *)v30, *((char *)v30 + 1));
LABEL_62:
        v11 = 1;
        v4 = v28;
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_64;
        goto LABEL_63;
      }
      v30 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v40))
        goto LABEL_62;
      v30 = __p;
      if (HIBYTE(v40) != 1)
        goto LABEL_61;
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, *(char *)v30);
    goto LABEL_62;
  }
LABEL_40:
  v29 = *v28;
  if (v29 == 93)
    goto LABEL_41;
  v31 = v28 + 1;
  if (v28 + 1 == a3 || v29 != 45 || *v31 == 93)
    goto LABEL_41;
  v41 = 0uLL;
  v42 = 0;
  v4 = v28 + 2;
  if (v28 + 2 == a3 || *v31 != 91 || *v4 != 46)
  {
    if ((v24 | 0x40) == 0x40)
    {
      LODWORD(v31) = *v31;
      if ((_DWORD)v31 == 92)
      {
        if (v24)
          v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v28 + 2, a3, (uint64_t *)&v41);
        else
          v32 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v28 + 2, (unsigned __int8 *)a3, (uint64_t)&v41, (uint64_t)v6);
        goto LABEL_79;
      }
    }
    else
    {
      LOBYTE(v31) = *v31;
    }
    HIBYTE(v42) = 1;
    LOWORD(v41) = v31;
    goto LABEL_80;
  }
  v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v28 + 3, a3, (uint64_t)&v41);
LABEL_79:
  v4 = v32;
LABEL_80:
  *(_OWORD *)v37 = *(_OWORD *)__p;
  v38 = v40;
  __p[1] = 0;
  v40 = 0;
  __p[0] = 0;
  *(_OWORD *)v35 = v41;
  v36 = v42;
  v41 = 0uLL;
  v42 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v6, (char *)v37, (uint64_t)v35);
  if (SHIBYTE(v36) < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_83;
LABEL_87:
      operator delete((void *)v41);
      v11 = 1;
      if (SHIBYTE(v40) < 0)
        goto LABEL_63;
      goto LABEL_64;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_82;
  }
  operator delete(v37[0]);
  if (SHIBYTE(v42) < 0)
    goto LABEL_87;
LABEL_83:
  v11 = 1;
  if (SHIBYTE(v40) < 0)
LABEL_63:
    operator delete(__p[0]);
LABEL_64:
  if ((v11 & 1) != 0)
    return v4;
  return v6;
}

void sub_212A519D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int v6;
  int locale_low;
  std::basic_regex<char> *v8;
  char *v9;
  size_t v10;
  char *v11;
  int v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  std::basic_regex<char> *v17;
  unsigned __int8 *v18;
  BOOL v20;
  std::basic_regex<char> *v21;
  BOOL v22;
  char *v23;
  size_t v24;
  std::basic_regex<char> *v25;
  int v26;
  int v27;
  std::basic_regex<char> *v28;
  int v29;
  std::basic_regex<char> *v30;
  _BYTE *v31;

  if (this == a3)
    return this;
  v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6)
        v20 = 1;
      else
        v20 = v8 == a3;
      if (!v20 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v10 = 0;
        goto LABEL_35;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v24 = 0;
      goto LABEL_44;
    }
    if (locale_low == 43)
    {
      v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v10 = 1;
LABEL_35:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v10, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v9;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v24 = 1;
      goto LABEL_44;
    }
    return this;
  }
  if (locale_low == 63)
  {
    v21 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6)
      v22 = 1;
    else
      v22 = v21 == a3;
    if (v22 || LOBYTE(v21->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v21;
    }
    else
    {
      v23 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v23;
    }
  }
  else
  {
    if (locale_low != 123)
      return this;
    v11 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_71;
    v12 = *v11;
    if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38)
      goto LABEL_71;
    v13 = v12 - 48;
    v14 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_19:
      v14 = (char *)a3;
    }
    else
    {
      while (1)
      {
        v15 = *v14;
        if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
          break;
        if (v13 >= 214748364)
          goto LABEL_71;
        v13 = v15 + 10 * v13 - 48;
        if (++v14 == (char *)a3)
          goto LABEL_19;
      }
    }
    if (v14 == v11)
      goto LABEL_71;
    if (v14 == (char *)a3)
      goto LABEL_72;
    v16 = *v14;
    if (v16 != 44)
    {
      if (v16 == 125)
      {
        v17 = (std::basic_regex<char> *)(v14 + 1);
        if (v6 || v17 == a3 || LOBYTE(v17->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 1);
          return v17;
        }
        else
        {
          v18 = (unsigned __int8 *)(v14 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v18;
        }
      }
LABEL_71:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    v25 = (std::basic_regex<char> *)(v14 + 1);
    if (v14 + 1 == (char *)a3)
      goto LABEL_71;
    v26 = LOBYTE(v25->__traits_.__loc_.__locale_);
    if (v26 == 125)
    {
      v8 = (std::basic_regex<char> *)(v14 + 2);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v10 = v13;
        v9 = v14 + 3;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        goto LABEL_35;
      }
      v24 = v13;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
LABEL_44:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v24, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v8;
    }
    if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38)
      goto LABEL_72;
    v27 = v26 - 48;
    v28 = (std::basic_regex<char> *)(v14 + 2);
    if (v28 == a3)
    {
LABEL_60:
      v28 = a3;
    }
    else
    {
      while (1)
      {
        v29 = LOBYTE(v28->__traits_.__loc_.__locale_);
        if ((v29 & 0xF8) != 0x30 && (v29 & 0xFE) != 0x38)
          break;
        if (v27 >= 214748364)
          goto LABEL_71;
        v27 = v29 + 10 * v27 - 48;
        v28 = (std::basic_regex<char> *)((char *)v28 + 1);
        if (v28 == a3)
          goto LABEL_60;
      }
    }
    if (v28 == v25 || v28 == a3 || LOBYTE(v28->__traits_.__loc_.__locale_) != 125)
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v27 < v13)
      goto LABEL_71;
    v30 = (std::basic_regex<char> *)((char *)&v28->__traits_.__loc_.__locale_ + 1);
    if (v6 || v30 == a3 || LOBYTE(v30->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 1);
      return v30;
    }
    else
    {
      v31 = (char *)&v28->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v31;
    }
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  void *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = operator new(0x10uLL);
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new(0x38uLL);
  LODWORD(first) = this->__loop_count_;
  v18 = __s->__first_;
  *(_QWORD *)v17 = &unk_24CE829D8;
  *((_QWORD *)v17 + 1) = v18;
  *((_QWORD *)v17 + 2) = v14;
  *((_QWORD *)v17 + 3) = __min;
  *((_QWORD *)v17 + 4) = __max;
  *((_DWORD *)v17 + 10) = (_DWORD)first;
  *((_DWORD *)v17 + 11) = v9;
  *((_DWORD *)v17 + 12) = v8;
  *((_BYTE *)v17 + 52) = __greedy;
  __s->__first_ = 0;
  v19 = (std::__node<char> *)operator new(0x10uLL);
  v19->__vftable = (std::__node<char>_vtbl *)&unk_24CE82A68;
  v19[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v19;
  this->__end_ = (std::__owns_one_state<char> *)*((_QWORD *)v17 + 2);
  __s->__first_ = (std::__node<char> *)v17;
  this->__loop_count_ = (_DWORD)first + 1;
}

void sub_212A51F40(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);

  std::__loop<char>::~__loop(v1);
  _Unwind_Resume(a1);
}

void sub_212A51F54(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  BOOL v8;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int v20;
  __int128 v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  unsigned int marked_count;
  std::basic_regex<char> v27;

  if (a2 == a3)
    return a2;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v15 = a2[1];
        if (v15 == 66)
        {
          v16 = (char *)operator new(0x30uLL);
          v24 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_24CE82678;
          *((_QWORD *)v16 + 1) = v24;
          std::locale::locale((std::locale *)v16 + 2, (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          v16[40] = 1;
        }
        else
        {
          if (v15 != 98)
            return a2;
          v16 = (char *)operator new(0x30uLL);
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_24CE82678;
          *((_QWORD *)v16 + 1) = v17;
          std::locale::locale((std::locale *)v16 + 2, (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          v16[40] = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return a2 + 2;
      }
      return a2;
    }
    if (v6 != 94)
      return a2;
    v10 = operator new(0x18uLL);
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
LABEL_14:
    *v10 = v14 + 16;
    v10[1] = v13;
    *((_BYTE *)v10 + 16) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    v10 = operator new(0x18uLL);
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    goto LABEL_14;
  }
  v8 = v6 == 40;
  v7 = a2 + 1;
  v8 = !v8 || v7 == a3;
  if (v8)
    return a2;
  v8 = *v7 == 63;
  v18 = a2 + 2;
  if (!v8 || v18 == a3)
    return a2;
  v20 = *v18;
  if (v20 == 33)
  {
    *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v27.__loop_count_ = v25;
    *(_OWORD *)&v27.__start_.__cntrl_ = v25;
    *(_OWORD *)&v27.__traits_.__loc_.__locale_ = v25;
    *(_OWORD *)&v27.__traits_.__col_ = v25;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v27);
    v27.__flags_ = *(_DWORD *)(a1 + 24);
    v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v27, a2 + 3, a3);
    marked_count = v27.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v27, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v22 == a3 || *v22 != 41)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    goto LABEL_32;
  }
  if (v20 != 61)
    return a2;
  *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v27.__loop_count_ = v21;
  *(_OWORD *)&v27.__start_.__cntrl_ = v21;
  *(_OWORD *)&v27.__traits_.__loc_.__locale_ = v21;
  *(_OWORD *)&v27.__traits_.__col_ = v21;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v27);
  v27.__flags_ = *(_DWORD *)(a1 + 24);
  v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v27, a2 + 3, a3);
  v23 = v27.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v27, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v23;
  if (v22 == a3 || *v22 != 41)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_32:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v27.__traits_.__loc_);
  return v22 + 1;
}

void sub_212A52288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_212A5229C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_212A522B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_212A522C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  int *p_open_count;
  char *v7;
  std::__node<char> *v8;
  std::__owns_one_state<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v12;
  unsigned int marked_count;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *v19;

  v3 = a2;
  if (a2 != a3)
  {
    switch(LOBYTE(a2->__traits_.__loc_.__locale_))
    {
      case '(':
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3)
          goto LABEL_26;
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
          && BYTE1(a2->__traits_.__loc_.__locale_) == 63
          && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, (char *)a3);
          if (v7 == (char *)a3)
            goto LABEL_26;
          v3 = (std::basic_regex<char> *)v7;
          if (*v7 != 41)
            goto LABEL_26;
        }
        else
        {
          if ((this->__flags_ & 2) != 0)
          {
            marked_count = this->__marked_count_;
          }
          else
          {
            v12 = (std::__node<char> *)operator new(0x18uLL);
            marked_count = this->__marked_count_ + 1;
            this->__marked_count_ = marked_count;
            end = this->__end_;
            first = end->__first_;
            v12->__vftable = (std::__node<char>_vtbl *)&unk_24CE82948;
            v12[1].__vftable = (std::__node<char>_vtbl *)first;
            LODWORD(v12[2].__vftable) = marked_count;
            end->__first_ = v12;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, (char *)a3);
          if (v16 == (char *)a3 || (v3 = (std::basic_regex<char> *)v16, *v16 != 41))
LABEL_26:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          if ((this->__flags_ & 2) == 0)
          {
            v17 = (std::__node<char> *)operator new(0x18uLL);
            v18 = this->__end_;
            v19 = v18->__first_;
            v17->__vftable = (std::__node<char>_vtbl *)&unk_24CE82990;
            v17[1].__vftable = (std::__node<char>_vtbl *)v19;
            LODWORD(v17[2].__vftable) = marked_count;
            v18->__first_ = v17;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
        }
        --*p_open_count;
LABEL_23:
        v3 = (std::basic_regex<char> *)((char *)v3 + 1);
        break;
      case ')':
      case ',':
      case '-':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
      case '*':
      case '+':
      case '?':
        goto LABEL_25;
      case '.':
        v8 = (std::__node<char> *)operator new(0x10uLL);
        v9 = this->__end_;
        v10 = v9->__first_;
        v8->__vftable = (std::__node<char>_vtbl *)&unk_24CE82708;
        v8[1].__vftable = (std::__node<char>_vtbl *)v10;
        v9->__first_ = v8;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_23;
      case '[':
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      case '\\':
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      default:
        if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123)
LABEL_25:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v15;
  std::basic_regex<char> *v16;
  std::__owns_one_state<char> *v17;
  int v18;
  std::basic_regex<char> *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  std::basic_regex<char> *v30;
  char *v31;
  std::__owns_one_state<char> *v32;
  int v33;
  std::basic_regex<char> *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = operator new(8uLL);
  *v6 = &unk_24CE82498;
  v7 = operator new(0x10uLL);
  v7[1] = v6;
  v8 = operator new(0x20uLL);
  *v8 = &unk_24CE824F0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v12 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 56) = v12;
      v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if (v13 <= 0x3F)
        goto LABEL_6;
LABEL_11:
      if (v13 != 64)
      {
        if (v13 == 128)
          return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(a1, a2, a3);
        if (v13 == 256)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
LABEL_38:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    }
  }
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v13 > 0x3F)
    goto LABEL_11;
LABEL_6:
  if (v13)
  {
    if (v13 == 16)
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, a3);
    if (v13 != 32)
      goto LABEL_38;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  }
  v15 = a2;
  while (1)
  {
    v16 = (std::basic_regex<char> *)v15;
    v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v15, a3);
    if (v15 == (char *)v16)
      break;
LABEL_17:
    if (v15 == (char *)v16)
      goto LABEL_23;
  }
  v17 = *(std::__owns_one_state<char> **)(a1 + 56);
  v18 = *(_DWORD *)(a1 + 28);
  v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v16, (std::basic_regex<char> *)a3);
  if (v19 != v16)
  {
    v15 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v19, (std::basic_regex<char> *)a3, v17, (v18 + 1), (*(_DWORD *)(a1 + 28) + 1));
    goto LABEL_17;
  }
LABEL_23:
  if (v16 == (std::basic_regex<char> *)a2)
  {
    v20 = operator new(0x10uLL);
    v21 = *(_QWORD *)(a1 + 56);
    v22 = *(_QWORD *)(v21 + 8);
    v20[1] = v22;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v16 == (std::basic_regex<char> *)a3)
    return (std::basic_regex<char> *)a3;
  while (2)
  {
    if (LOBYTE(v16->__traits_.__loc_.__locale_) != 124)
      return v16;
    v29 = *(_QWORD *)(a1 + 56);
    v30 = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
    v31 = (char *)&v16->__traits_.__loc_.__locale_ + 1;
    while (2)
    {
      v16 = (std::basic_regex<char> *)v31;
      v31 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v31, a3);
      if (v31 != (char *)v16)
      {
LABEL_32:
        if (v31 == (char *)v16)
          goto LABEL_27;
        continue;
      }
      break;
    }
    v32 = *(std::__owns_one_state<char> **)(a1 + 56);
    v33 = *(_DWORD *)(a1 + 28);
    v34 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v16, (std::basic_regex<char> *)a3);
    if (v34 != v16)
    {
      v31 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v34, (std::basic_regex<char> *)a3, v32, (v33 + 1), (*(_DWORD *)(a1 + 28) + 1));
      goto LABEL_32;
    }
LABEL_27:
    if (v16 == v30)
    {
      v35 = operator new(0x10uLL);
      v36 = *(_QWORD *)(a1 + 56);
      v37 = *(_QWORD *)(v36 + 8);
      v35[1] = v37;
      *(_QWORD *)(v36 + 8) = v35;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    v23 = operator new(0x18uLL);
    v24 = *(_QWORD *)(v29 + 8);
    v23[1] = *(_QWORD *)(v12 + 8);
    v23[2] = v24;
    *v23 = &unk_24CE82AB0;
    *(_QWORD *)(v12 + 8) = v23;
    *(_QWORD *)(v29 + 8) = 0;
    v25 = operator new(0x10uLL);
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v25[1] = v26;
    *(_QWORD *)(v29 + 8) = v25;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v27 = operator new(0x10uLL);
    v28 = *(_QWORD *)(v29 + 8);
    *v27 = &unk_24CE82AF8;
    v27[1] = v28;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v27;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v29 + 8);
    if (v16 != (std::basic_regex<char> *)a3)
      continue;
    return (std::basic_regex<char> *)a3;
  }
}

void sub_212A52924(_Unwind_Exception *a1)
{
  void *v1;
  void (__cdecl ***v2)(std::__owns_one_state<char> *__hidden);

  operator delete(v1);
  operator delete(v2);
  (*(void (**)(void *))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_212A52960(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 8))(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *result;

  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

void std::vector<BOOL>::reserve(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 > *(_QWORD *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<std::pair<std::string,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v3 = ((a2 - 1) >> 6) + 1;
    v4 = (uint64_t *)operator new(8 * v3);
    v5 = *(_QWORD **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = v6 & 0x3F;
    v8 = (v6 - 1) >> 6;
    if (v6 < 0x41)
      v8 = 0;
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      v9 = 0;
      v10 = 0;
      v11 = &v5[v6 >> 6];
      v12 = v4;
      v13 = v5;
      do
      {
        v14 = 1 << v9;
        if (((*v13 >> v10) & 1) != 0)
          v15 = *v12 | v14;
        else
          v15 = *v12 & ~v14;
        *v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63)
          v10 = 0;
        else
          ++v10;
        v12 += v9 == 63;
        if (v9 == 63)
          v9 = 0;
        else
          ++v9;
      }
      while (v10 != v7 || v13 != v11);
    }
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v3;
    if (v5)
      operator delete(v5);
  }
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  void *v7;
  unint64_t v8;
  std::string *v9;
  unint64_t v10;
  size_t v11;
  std::string::size_type v12;
  uint64_t v13;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __n - v8)
      {
        v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v7 = operator new(v11);
          memcpy(v7, __s, __n);
          if (v8 != 22)
            operator delete(v9);
          this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
          this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_23:
          this->__r_.__value_.__l.__size_ = __n;
          goto LABEL_24;
        }
LABEL_8:
        v12 = 2 * v8;
        if (__n > 2 * v8)
          v12 = __n;
        v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v13 = v12 | 7;
        if (v12 >= 0x17)
          v11 = v13 + 1;
        else
          v11 = 23;
        goto LABEL_15;
      }
LABEL_25:
      std::string::__throw_length_error[abi:ne180100]();
    }
    v6 = HIBYTE(v10);
    v7 = (void *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      if (__n - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        v8 = 22;
        v9 = this;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    goto LABEL_23;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_24:
  *((_BYTE *)v7 + __n) = 0;
  return this;
}

double DERImg4DecodeFindInSequence(unint64_t *a1, uint64_t a2, _OWORD *a3)
{
  double result;
  unint64_t v7;
  __int128 v8;

  v7 = 0;
  v8 = 0uLL;
  while (!DERDecodeSeqNext(a1, &v7))
  {
    if (v7 == a2)
    {
      result = *(double *)&v8;
      *a3 = v8;
      return result;
    }
  }
  return result;
}

uint64_t DERImg4DecodeTagCompare(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  unsigned int v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 < 4)
    return 0xFFFFFFFFLL;
  if (v2 != 4)
    return 1;
  v5 = 0;
  if (DERParseInteger((char **)a1, &v5))
    return 4294967294;
  if (v5 < a2)
    return 0xFFFFFFFFLL;
  return v5 > a2;
}

uint64_t DERImg4DecodeManifest(_QWORD *a1, unint64_t a2)
{
  return DERImg4DecodeManifestCommon(a1, 5uLL, (uint64_t)&DERImg4ManifestItemSpecs, a2, 0x494D344Du);
}

uint64_t DERImg4DecodeManifestCommon(_QWORD *a1, unint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  uint64_t result;
  unsigned int v9;

  result = 6;
  if (a1 && a4)
  {
    if (!*a1 || !a1[1])
      return 0;
    if (a2 >= 0x10000)
    {
      __break(0x5507u);
      return result;
    }
    result = DERParseSequenceToObject((uint64_t)a1, (unsigned __int16)a2, a3, a4, 0xC0uLL, 0);
    if (!(_DWORD)result)
    {
      if (DERImg4DecodeTagCompare(a4, a5))
        return 2;
      v9 = 0;
      result = DERParseInteger((char **)(a4 + 16), &v9);
      if ((_DWORD)result)
        return result;
      if (v9 > 2)
        return 2;
      return 0;
    }
  }
  return result;
}

uint64_t DERImg4DecodeUnsignedManifest(_QWORD *a1, unint64_t a2)
{
  return DERImg4DecodeManifestCommon(a1, 3uLL, (uint64_t)&DERImg4UnsignedManifestItemSpecs, a2, 0x494D344Du);
}

uint64_t DERImg4DecodeCertificate(_QWORD *a1, unint64_t a2)
{
  return DERImg4DecodeManifestCommon(a1, 4uLL, (uint64_t)&DERImg4CertificateItemSpecs, a2, 0x494D3443u);
}

uint64_t DERImg4DecodeUnsignedCertificate(_QWORD *a1, unint64_t a2)
{
  return DERImg4DecodeManifestCommon(a1, 3uLL, (uint64_t)&DERImg4UnsignedManifestItemSpecs, a2, 0x494D3443u);
}

uint64_t DERImg4DecodePropertyWithItem(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t result;
  unsigned int v8;
  _QWORD v9[4];
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v8 = 0;
  v9[0] = 0;
  v9[2] = 0;
  v9[1] = 22;
  v9[3] = 24;
  v10 = a3;
  result = DERParseSequenceToObject(a1, 2u, (uint64_t)v9, a4, 0x30uLL, 0);
  if (!(_DWORD)result)
  {
    result = DERParseInteger((char **)a4, &v8);
    if (!(_DWORD)result)
    {
      if ((v8 | 0xE000000000000000) == a2)
      {
        result = 0;
        *(_QWORD *)(a4 + 16) = a2 | 0xE000000000000000;
        *(_QWORD *)(a4 + 40) = a3;
      }
      else
      {
        return 2;
      }
    }
  }
  return result;
}

void DERImg4DecodeFindPropertyInSequence(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  int v7;
  __int128 v8;

  v8 = 0uLL;
  DERImg4DecodeFindInSequence(a1, a2, &v8);
  if (!v7)
    DERImg4DecodePropertyWithItem((uint64_t)&v8, a2, a3, a4);
}

void DERImg4DecodeFindProperty(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7[2];

  v7[0] = 0;
  v7[1] = 0;
  if (!DERDecodeSeqContentInit(a1, v7))
    DERImg4DecodeFindPropertyInSequence(v7, a2, a3, a4);
}

void DERImg4DecodeParseManifestProperties(uint64_t a1, unint64_t a2, unint64_t a3)
{
  DERImg4DecodeParseManifestPropertiesInternal(a1, a2, a3, 0x4D414E42u);
}

void DERImg4DecodeParseManifestPropertiesInternal(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  _OWORD v12[3];
  _OWORD v13[3];
  unint64_t v14;
  unint64_t v15[2];

  v11 = 0;
  if (a1)
  {
    if (a2 | a3)
    {
      v14 = 0;
      v15[0] = 0;
      v15[1] = 0;
      memset(v13, 0, sizeof(v13));
      memset(v12, 0, sizeof(v12));
      if (!DERDecodeItem(a1 + 264, &v14)
        && v14 == 0x2000000000000011
        && !DERParseInteger((char **)(a1 + 248), &v11))
      {
        v8 = v11 == 2 ? 0x2000000000000010 : 0x2000000000000011;
        DERImg4DecodeFindProperty(v15, a4 | 0xE000000000000000, v8, (unint64_t)v13);
        if (!v9)
        {
          if (a2)
            *(_OWORD *)a2 = *(_OWORD *)((char *)&v13[1] + 8);
          DERImg4DecodeFindProperty((unint64_t *)&v13[1] + 1, 0xE00000004D414E50, 0x2000000000000011uLL, (unint64_t)v12);
          if (a3)
          {
            if (!v10)
              *(_OWORD *)a3 = *(_OWORD *)((char *)&v12[1] + 8);
          }
        }
      }
    }
  }
}

double Img4DecodeGetObjectProperty(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _OWORD *a5)
{
  double result;
  int v10;
  int v11;
  int v12;
  _OWORD v13[3];
  unint64_t v14[2];

  v14[0] = 0;
  v14[1] = 0;
  result = 0.0;
  memset(v13, 0, sizeof(v13));
  if (a1)
  {
    if (a5)
    {
      DERImg4DecodeParseManifestProperties(a1, (unint64_t)v14, 0);
      if (v10
        || (DERImg4DecodeFindProperty(v14, a2 | 0xE000000000000000, 0x2000000000000011uLL, (unint64_t)v13), v11)
        || (DERImg4DecodeFindProperty((unint64_t *)&v13[1] + 1, a3, a4, (unint64_t)a5), v12))
      {
        result = 0.0;
        a5[1] = 0u;
        a5[2] = 0u;
        *a5 = 0u;
      }
    }
  }
  return result;
}

void Img4DecodeGetObjectPropertyData(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  if (a1 && a4 && a5)
  {
    Img4DecodeGetObjectProperty(a1, a2, a3 | 0xE000000000000000, 4uLL, &v9);
    if (v7)
    {
      v8 = 0;
      *a4 = 0;
    }
    else
    {
      v8 = v11;
      *a4 = *((_QWORD *)&v10 + 1);
    }
    *a5 = v8;
  }
}

uint64_t Img4DecodeInitManifest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Img4DecodeInitManifestCommon(a1, a2, 1, a3, 1229796429);
}

uint64_t Img4DecodeInitManifestCommon(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = 6;
  if (a1 && a4)
  {
    v15 = a1;
    v16 = a2;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 160) = 0u;
    *(_OWORD *)(a4 + 176) = 0u;
    *(_OWORD *)(a4 + 192) = 0u;
    *(_OWORD *)(a4 + 208) = 0u;
    *(_OWORD *)(a4 + 224) = 0u;
    *(_OWORD *)(a4 + 240) = 0u;
    *(_OWORD *)(a4 + 256) = 0u;
    *(_OWORD *)(a4 + 272) = 0u;
    *(_OWORD *)(a4 + 288) = 0u;
    *(_OWORD *)(a4 + 304) = 0u;
    *(_OWORD *)(a4 + 320) = 0u;
    *(_OWORD *)(a4 + 336) = 0u;
    *(_OWORD *)(a4 + 352) = 0u;
    *(_OWORD *)(a4 + 368) = 0u;
    *(_OWORD *)(a4 + 384) = 0u;
    *(_OWORD *)(a4 + 400) = 0u;
    *(_OWORD *)(a4 + 416) = 0u;
    *(_OWORD *)(a4 + 432) = 0u;
    *(_QWORD *)(a4 + 448) = 0;
    if (a5 == 1229796419)
    {
      v10 = a4 + 232;
      if (a3)
        result = DERImg4DecodeCertificate(&v15, v10);
      else
        result = DERImg4DecodeUnsignedCertificate(&v15, v10);
    }
    else
    {
      if (a5 != 1229796429)
        return 2;
      v9 = a4 + 232;
      if (a3)
        result = DERImg4DecodeManifest(&v15, v9);
      else
        result = DERImg4DecodeUnsignedManifest(&v15, v9);
    }
    if (!(_DWORD)result)
    {
      if (*(_QWORD *)(a4 + 264))
      {
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v15 = a1;
        v16 = a2;
        result = DERDecodeItemPartialBufferGetLength((uint64_t)&v15, &v12, 0);
        if (!(_DWORD)result)
        {
          *(_QWORD *)(a4 + 24) = a1;
          v11 = v14 + v13 - a1;
          if (__CFADD__(v14, v13 - a1))
          {
            __break(0x5500u);
          }
          else
          {
            *(_QWORD *)(a4 + 32) = v11;
            if (v11 == a2)
              return 0;
            else
              return 7;
          }
        }
      }
      else
      {
        return 3;
      }
    }
  }
  return result;
}

uint64_t DERDecodeItem(uint64_t a1, unint64_t *a2)
{
  return DERDecodeItemPartialBufferGetLength(a1, a2, 0);
}

unint64_t *DERDecodeSeqContentInit(unint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *result;
  v3 = result[1];
  if (__CFADD__(*result, v3))
  {
    __break(0x5513u);
  }
  else
  {
    v4 = v2 + v3;
    if (v2 <= v4)
    {
      *a2 = v2;
      a2[1] = v4;
      return 0;
    }
  }
  __break(0x5519u);
  return result;
}

uint64_t DERParseSequence(uint64_t result, unsigned int a2, uint64_t a3, unint64_t a4, size_t a5)
{
  if ((a4 | 0x7FFFFFFFFFFFFFFFLL) >= a4)
    return DERParseSequenceToObject(result, a2, a3, a4, ~a4 & 0x7FFFFFFFFFFFFFFFLL, a5);
  __break(0x5519u);
  return result;
}

unint64_t *DERParseSequenceContent(unint64_t *result, unsigned int a2, uint64_t a3, unint64_t a4, size_t a5)
{
  if ((a4 | 0x7FFFFFFFFFFFFFFFLL) >= a4)
    return (unint64_t *)DERParseSequenceContentToObject(result, a2, a3, a4, ~a4 & 0x7FFFFFFFFFFFFFFFLL, a5);
  __break(0x5519u);
  return result;
}

uint64_t DEREncodeItem(unint64_t a1, unint64_t a2, const void *a3, unint64_t a4, unint64_t *a5)
{
  return DEREncodeItemSized(a1, a2, a3, a4, *a5, a5);
}

uint64_t DEREncodeSequence(uint64_t result, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, unint64_t *a6)
{
  if ((a2 | 0x7FFFFFFFFFFFFFFFLL) >= a2)
    return DEREncodeSequenceFromObject(result, a2, ~a2 & 0x7FFFFFFFFFFFFFFFLL, a3, a4, a5, *a6, a6);
  __break(0x5519u);
  return result;
}

BOOL AMFDRIsSupported()
{
  pthread_once(&ExportTableOnce, (void (*)(void))AMFDRLoadLibrary);
  return ExportTable != 0;
}

double AMFDRLoadLibrary()
{
  void *v0;
  void *v1;
  double result;

  v0 = dlopen("/usr/lib/libFDR.dylib", 261);
  if (!v0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_1();
    goto LABEL_161;
  }
  v1 = v0;
  *(_QWORD *)&ExportTable = dlsym(v0, "AMFDRCreateWithOptions");
  if (!(_QWORD)ExportTable)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_2();
    goto LABEL_161;
  }
  *((_QWORD *)&ExportTable + 1) = dlsym(v1, "AMFDRCreatePermissionsString");
  if (!*((_QWORD *)&ExportTable + 1))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_3();
    goto LABEL_161;
  }
  qword_254B603A8 = (uint64_t)dlsym(v1, "AMFDRCreateInstanceString");
  if (!qword_254B603A8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_4();
    goto LABEL_161;
  }
  qword_254B603B0 = (uint64_t)dlsym(v1, "AMFDRSetOption");
  if (!qword_254B603B0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_5();
    goto LABEL_161;
  }
  *(_QWORD *)&xmmword_254B603B8 = dlsym(v1, "AMFDRSetSealingMap");
  if (!(_QWORD)xmmword_254B603B8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_6();
    goto LABEL_161;
  }
  *((_QWORD *)&xmmword_254B603B8 + 1) = dlsym(v1, "AMFDRGetSealingMap");
  if (!*((_QWORD *)&xmmword_254B603B8 + 1))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_7();
    goto LABEL_161;
  }
  qword_254B603C8 = (uint64_t)dlsym(v1, "AMFDRSetRecoveryVerifier");
  if (!qword_254B603C8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_8();
    goto LABEL_161;
  }
  qword_254B603D0 = (uint64_t)dlsym(v1, "AMFDRGetOptions");
  if (!qword_254B603D0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_9();
    goto LABEL_161;
  }
  *(_QWORD *)&xmmword_254B603D8 = dlsym(v1, "AMFDRGetInfo");
  if (!(_QWORD)xmmword_254B603D8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_10();
    goto LABEL_161;
  }
  *((_QWORD *)&xmmword_254B603D8 + 1) = dlsym(v1, "AMFDRGetCert");
  if (!*((_QWORD *)&xmmword_254B603D8 + 1))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_11();
    goto LABEL_161;
  }
  off_254B603E8 = dlsym(v1, "AMFDRGetTrustError");
  if (!off_254B603E8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_12();
    goto LABEL_161;
  }
  qword_254B603F0 = (uint64_t)dlsym(v1, "AMFDRCopyClientId");
  if (!qword_254B603F0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_13();
    goto LABEL_161;
  }
  *(_QWORD *)&xmmword_254B603F8 = dlsym(v1, "AMFDRCopyUnderlyingDictionary");
  if (!(_QWORD)xmmword_254B603F8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_14();
    goto LABEL_161;
  }
  *((_QWORD *)&xmmword_254B603F8 + 1) = dlsym(v1, "AMFDRLogSetHandler");
  if (!*((_QWORD *)&xmmword_254B603F8 + 1))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_15();
    goto LABEL_161;
  }
  qword_254B60408 = (uint64_t)dlsym(v1, "AMFDRPerformManifestCheck");
  if (!qword_254B60408)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_16();
    goto LABEL_161;
  }
  qword_254B60410 = (uint64_t)dlsym(v1, "AMFDRAppendPermissionsString");
  if (!qword_254B60410)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_17();
    goto LABEL_161;
  }
  *(_QWORD *)&xmmword_254B60418 = dlsym(v1, "AMFDRDataCopyDigest");
  if (!(_QWORD)xmmword_254B60418)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_18();
    goto LABEL_161;
  }
  *((_QWORD *)&xmmword_254B60418 + 1) = dlsym(v1, "AMFDRDataPresent");
  if (!*((_QWORD *)&xmmword_254B60418 + 1))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_19();
    goto LABEL_161;
  }
  off_254B60428 = dlsym(v1, "AMFDRDataCopy");
  if (!off_254B60428)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_20();
    goto LABEL_161;
  }
  qword_254B60430 = (uint64_t)dlsym(v1, "AMFDRDataMultiCopy");
  if (!qword_254B60430)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_21();
    goto LABEL_161;
  }
  *(_QWORD *)&xmmword_254B60438 = dlsym(v1, "AMFDRDataPut");
  if (!(_QWORD)xmmword_254B60438)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_22();
    goto LABEL_161;
  }
  *((_QWORD *)&xmmword_254B60438 + 1) = dlsym(v1, "AMFDRDataMultiPut");
  if (!*((_QWORD *)&xmmword_254B60438 + 1))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_23();
    goto LABEL_161;
  }
  qword_254B60448 = (uint64_t)dlsym(v1, "AMFDRDataPrefetch");
  if (!qword_254B60448)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_24();
    goto LABEL_161;
  }
  qword_254B60450 = (uint64_t)dlsym(v1, "AMFDRDataExport");
  if (!qword_254B60450)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_25();
    goto LABEL_161;
  }
  *(_QWORD *)&xmmword_254B60458 = dlsym(v1, "AMFDRDataMultiExport");
  if (!(_QWORD)xmmword_254B60458)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_26();
    goto LABEL_161;
  }
  *((_QWORD *)&xmmword_254B60458 + 1) = dlsym(v1, "AMFDRDataDelete");
  if (!*((_QWORD *)&xmmword_254B60458 + 1))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_27();
    goto LABEL_161;
  }
  qword_254B60468 = (uint64_t)dlsym(v1, "AMFDRDataMultiDelete");
  if (!qword_254B60468)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_28();
    goto LABEL_161;
  }
  qword_254B60470 = (uint64_t)dlsym(v1, "AMFDRDataCopyTrustObject");
  if (!qword_254B60470)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_29();
    goto LABEL_161;
  }
  *(_QWORD *)&xmmword_254B60478 = dlsym(v1, "AMFDRDataCopySslRoots");
  if (!(_QWORD)xmmword_254B60478)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_30();
    goto LABEL_161;
  }
  *((_QWORD *)&xmmword_254B60478 + 1) = dlsym(v1, "AMFDRDataIterate");
  if (!*((_QWORD *)&xmmword_254B60478 + 1))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_31();
    goto LABEL_161;
  }
  qword_254B60488 = (uint64_t)dlsym(v1, "AMFDRDataRecover");
  if (!qword_254B60488)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_32();
    goto LABEL_161;
  }
  qword_254B60490 = (uint64_t)dlsym(v1, "AMFDRDataLocalCreateFullKey");
  if (!qword_254B60490)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_33();
    goto LABEL_161;
  }
  *(_QWORD *)&xmmword_254B60498 = dlsym(v1, "AMFDRSealingMapCreateRecoveryPermissions");
  if (!(_QWORD)xmmword_254B60498)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_34();
    goto LABEL_161;
  }
  *((_QWORD *)&xmmword_254B60498 + 1) = dlsym(v1, "AMFDRSealingMapRecoverCurrentDevice");
  if (!*((_QWORD *)&xmmword_254B60498 + 1))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_35();
    goto LABEL_161;
  }
  qword_254B604A8 = (uint64_t)dlsym(v1, "AMFDRSealingMapGetEntry");
  if (!qword_254B604A8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_36();
    goto LABEL_161;
  }
  qword_254B604B0 = (uint64_t)dlsym(v1, "AMFDRSealingMapGetEntriesForDevice");
  if (!qword_254B604B0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_37();
    goto LABEL_161;
  }
  *(_QWORD *)&xmmword_254B604B8 = dlsym(v1, "AMFDRSealingMapCopyInstanceWithIdentifiers");
  if (!(_QWORD)xmmword_254B604B8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_38();
    goto LABEL_161;
  }
  *((_QWORD *)&xmmword_254B604B8 + 1) = dlsym(v1, "AMFDRSealingMapCopyRequiredIdentifiers");
  if (!*((_QWORD *)&xmmword_254B604B8 + 1))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_39();
    goto LABEL_161;
  }
  off_254B604C8 = dlsym(v1, "AMFDRSealingMapCopyLocalData");
  if (!off_254B604C8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_40();
    goto LABEL_161;
  }
  qword_254B604D0 = (uint64_t)dlsym(v1, "AMFDRSealingMapCopyLocalDataForClass");
  if (!qword_254B604D0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_41();
    goto LABEL_161;
  }
  *(_QWORD *)&xmmword_254B604D8 = dlsym(v1, "AMFDRSealingMapCopyLocalMinimalManifestForInstance");
  if (!(_QWORD)xmmword_254B604D8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_42();
    goto LABEL_161;
  }
  *((_QWORD *)&xmmword_254B604D8 + 1) = dlsym(v1, "AMFDRSealingMapVerifySealing");
  if (!*((_QWORD *)&xmmword_254B604D8 + 1))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_43();
    goto LABEL_161;
  }
  qword_254B604E8 = (uint64_t)dlsym(v1, "AMFDRSealingMapCreateAndPopulateSealedData");
  if (!qword_254B604E8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_44();
    goto LABEL_161;
  }
  qword_254B604F0 = (uint64_t)dlsym(v1, "AMFDRSealingMapVerifyAndCommitSealedData");
  if (!qword_254B604F0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_45();
    goto LABEL_161;
  }
  *(_QWORD *)&xmmword_254B604F8 = dlsym(v1, "AMFDRSealedDataCreateSealingRequest");
  if (!(_QWORD)xmmword_254B604F8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_46();
    goto LABEL_161;
  }
  *((_QWORD *)&xmmword_254B604F8 + 1) = dlsym(v1, "AMFDRSealedDataCreate");
  if (!*((_QWORD *)&xmmword_254B604F8 + 1))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_47();
    goto LABEL_161;
  }
  qword_254B60508 = (uint64_t)dlsym(v1, "AMFDRSealedDataPopulate");
  if (!qword_254B60508)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_48();
    goto LABEL_161;
  }
  qword_254B60510 = (uint64_t)dlsym(v1, "AMFDRCopyDisposableKeys");
  if (!qword_254B60510)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_49();
    goto LABEL_161;
  }
  *(_QWORD *)&xmmword_254B60518 = dlsym(v1, "AMFDRCopyDeviceKeys");
  if (!(_QWORD)xmmword_254B60518)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_50();
    goto LABEL_161;
  }
  qword_254B60528 = (uint64_t)dlsym(v1, "AMFDRDataPutForSysCfgKey");
  if (!qword_254B60528)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_51();
    goto LABEL_161;
  }
  *((_QWORD *)&xmmword_254B60518 + 1) = dlsym(v1, "AMFDRCreateLocalPending");
  if (!*((_QWORD *)&xmmword_254B60518 + 1))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_52();
    goto LABEL_161;
  }
  qword_254B60530 = (uint64_t)dlsym(v1, "AMFDRSealingMapSetMGCopyAnswer");
  if (!qword_254B60530)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      AMFDRLoadLibrary_cold_53();
LABEL_161:
    result = 0.0;
    xmmword_254B60518 = 0u;
    *(_OWORD *)&qword_254B60528 = 0u;
    xmmword_254B604F8 = 0u;
    *(_OWORD *)&qword_254B60508 = 0u;
    xmmword_254B604D8 = 0u;
    *(_OWORD *)&qword_254B604E8 = 0u;
    xmmword_254B604B8 = 0u;
    *(_OWORD *)&off_254B604C8 = 0u;
    xmmword_254B60498 = 0u;
    *(_OWORD *)&qword_254B604A8 = 0u;
    xmmword_254B60478 = 0u;
    *(_OWORD *)&qword_254B60488 = 0u;
    xmmword_254B60458 = 0u;
    *(_OWORD *)&qword_254B60468 = 0u;
    xmmword_254B60438 = 0u;
    *(_OWORD *)&qword_254B60448 = 0u;
    xmmword_254B60418 = 0u;
    *(_OWORD *)&off_254B60428 = 0u;
    xmmword_254B603F8 = 0u;
    *(_OWORD *)&qword_254B60408 = 0u;
    xmmword_254B603D8 = 0u;
    *(_OWORD *)&off_254B603E8 = 0u;
    xmmword_254B603B8 = 0u;
    *(_OWORD *)&qword_254B603C8 = 0u;
    ExportTable = 0u;
    *(_OWORD *)&qword_254B603A8 = 0u;
  }
  return result;
}

uint64_t AMFDRCreateWithOptions(uint64_t a1, uint64_t a2)
{
  pthread_once(&ExportTableOnce, (void (*)(void))AMFDRLoadLibrary);
  if (ExportTable)
    return ExportTable(a1, a2);
  else
    return 0;
}

uint64_t AMFDRGetTrustError(uint64_t a1)
{
  pthread_once(&ExportTableOnce, (void (*)(void))AMFDRLoadLibrary);
  if (off_254B603E8)
    return off_254B603E8(a1);
  else
    return 0;
}

uint64_t AMFDRLogSetHandler(uint64_t a1)
{
  uint64_t result;

  result = pthread_once(&ExportTableOnce, (void (*)(void))AMFDRLoadLibrary);
  if (*((_QWORD *)&xmmword_254B603F8 + 1))
    return (*((uint64_t (**)(uint64_t))&xmmword_254B603F8 + 1))(a1);
  return result;
}

uint64_t AMFDRDataCopy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  pthread_once(&ExportTableOnce, (void (*)(void))AMFDRLoadLibrary);
  if (off_254B60428)
    return off_254B60428(a1, a2, a3, a4);
  else
    return 0;
}

uint64_t AMFDRSealingMapCopyLocalData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  pthread_once(&ExportTableOnce, (void (*)(void))AMFDRLoadLibrary);
  if (off_254B604C8)
    return off_254B604C8(a1, a2, a3, a4);
  else
    return 0;
}

void AMFDRLoadLibrary_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  dlerror();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load %s: %s\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_12()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_13()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_15()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_17()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_19()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_21()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_22()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_23()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_25()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_26()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_27()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_29()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_31()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_32()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_33()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_35()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_36()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_37()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_39()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_41()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_42()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_43()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_45()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_46()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_47()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_49()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_51()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_52()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

void AMFDRLoadLibrary_cold_53()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_212A4D000, MEMORY[0x24BDACB70], v0, "failed to load '%s' from '%s'\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_2();
}

const void **ctu::cf::CFSharedRef<void const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

_QWORD **std::unique_ptr<KTLOptions,support::transport::ARI::KTLOptionsDestructor>::~unique_ptr[abi:ne180100](_QWORD **a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v2[1])
    {
      TelephonyUtilTransportFree();
      v3 = (void *)v2[1];
      if (v3)
        operator delete(v3);
    }
    operator delete(v2);
  }
  return a1;
}

void ___ZN7support9transport3ARI9initLibTUEPKcjj_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;
  support::log::buffer *v5;
  int v6;
  _QWORD *v7;
  support::log::buffer *v8;
  int v9;
  _QWORD *v10;
  support::log::buffer *v11;
  int v12;
  uint64_t v13;
  char *v14;
  std::chrono::system_clock::time_point v15;
  _QWORD *v16;
  uint64_t k;
  uint64_t v18;
  _QWORD *v19;
  uint64_t i;
  uint64_t v21;
  _QWORD *v22;
  uint64_t j;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  char v25;
  void (**v26)(support::log::details *__hidden);
  uint64_t v27;
  char *v28;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *p_rep;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if ((_DWORD)a2 == 1)
  {
    v7 = *(_QWORD **)(v2 + 104);
    v25 = 1;
    v8 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v7 + 16))(v7, a2, **(_QWORD **)(v2 + 80));
    if ((_DWORD)v8)
    {
      if (v7[17])
      {
        v9 = 2;
        support::log::buffer::borrow(v8);
      }
      else
      {
        v9 = 0;
      }
      if (v9 | os_log_type_enabled(**(os_log_t **)(v2 + 80), OS_LOG_TYPE_ERROR))
      {
        LOWORD(v26) = 0;
        v18 = _os_log_send_and_compose_impl();
        if (v18)
        {
          v14 = (char *)v18;
          v15.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          rep = v15.__d_.__rep_;
          v26 = off_24CE7E8F8;
          v27 = v2 + 40;
          v28 = &v25;
          p_rep = &rep;
          v19 = v7 + 15;
          for (i = v7[16]; (_QWORD *)i != v19; i = *(_QWORD *)(i + 8))
            v15.__d_.__rep_ = (***(uint64_t (****)(_QWORD, void (***)(support::log::details *__hidden), char *))(i + 16))(*(_QWORD *)(i + 16), &v26, v14);
          goto LABEL_29;
        }
      }
    }
  }
  else
  {
    v3 = a2;
    if ((_DWORD)a2)
    {
      v10 = *(_QWORD **)(v2 + 104);
      v25 = 1;
      v11 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v10 + 16))(v10, 1, **(_QWORD **)(v2 + 80));
      if ((_DWORD)v11)
      {
        if (v10[17])
        {
          v12 = 2;
          support::log::buffer::borrow(v11);
        }
        else
        {
          v12 = 0;
        }
        if (v12 | os_log_type_enabled(**(os_log_t **)(v2 + 80), OS_LOG_TYPE_ERROR))
        {
          LODWORD(v26) = 67109120;
          HIDWORD(v26) = v3;
          v21 = _os_log_send_and_compose_impl();
          if (v21)
          {
            v14 = (char *)v21;
            v15.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
            rep = v15.__d_.__rep_;
            v26 = off_24CE7E8F8;
            v27 = v2 + 40;
            v28 = &v25;
            p_rep = &rep;
            v22 = v10 + 15;
            for (j = v10[16]; (_QWORD *)j != v22; j = *(_QWORD *)(j + 8))
              v15.__d_.__rep_ = (***(uint64_t (****)(_QWORD, void (***)(support::log::details *__hidden), char *))(j + 16))(*(_QWORD *)(j + 16), &v26, v14);
            goto LABEL_29;
          }
        }
      }
    }
    else
    {
      v4 = *(_QWORD **)(v2 + 104);
      v25 = 1;
      v5 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v4 + 16))(v4, 1, **(_QWORD **)(v2 + 80));
      if ((_DWORD)v5)
      {
        if (v4[17])
        {
          v6 = 2;
          support::log::buffer::borrow(v5);
        }
        else
        {
          v6 = 0;
        }
        if (v6 | os_log_type_enabled(**(os_log_t **)(v2 + 80), OS_LOG_TYPE_ERROR))
        {
          LOWORD(v26) = 0;
          v13 = _os_log_send_and_compose_impl();
          if (v13)
          {
            v14 = (char *)v13;
            v15.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
            rep = v15.__d_.__rep_;
            v26 = off_24CE7E8F8;
            v27 = v2 + 40;
            v28 = &v25;
            p_rep = &rep;
            v16 = v4 + 15;
            for (k = v4[16]; (_QWORD *)k != v16; k = *(_QWORD *)(k + 8))
              v15.__d_.__rep_ = (***(uint64_t (****)(_QWORD, void (***)(support::log::details *__hidden), char *))(k + 16))(*(_QWORD *)(k + 16), &v26, v14);
LABEL_29:
            support::log::manager::release_log_buffer((support::log::manager *)v15.__d_.__rep_, v14);
          }
        }
      }
    }
  }
}

void support::transport::ARI::create(support::transport::ARI *this@<X0>, dispatch_queue_s *a2@<X1>, char a3@<W3>, uint64_t a4@<X4>, char **a5@<X8>)
{
  __int128 v11;
  char *v12;
  _QWORD **v13;
  _OWORD *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  int isProcessRunning;
  size_t v19;
  std::string::size_type v20;
  std::string *p_dst;
  _QWORD *v22;
  size_t v23;
  std::string::size_type v24;
  std::string *v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  __int128 v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  AriHost *v33;
  NSObject *v34;
  _OWORD *v35;
  _QWORD *v36;
  int v37;
  int v38;
  void *v39;
  BOOL v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  std::string::size_type size;
  std::string *v50;
  dispatch_queue_t v51;
  NSObject *v52;
  uint64_t v53;
  _OWORD *v54;
  _QWORD *v55;
  void *v56;
  char v57;
  support::log::manager *v58;
  support::log::buffer *v59;
  int v60;
  support::log::manager *v61;
  support::log::buffer *v62;
  int v63;
  support::log::buffer *v64;
  int v65;
  support::log::buffer *v66;
  int v67;
  support::log::buffer *v68;
  int v69;
  support::log::buffer *v70;
  int v71;
  support::log::manager *v72;
  support::log::buffer *v73;
  int v74;
  support::log::buffer *v75;
  int v76;
  uint64_t v77;
  support::log::manager *v78;
  support::log::buffer *v79;
  int v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  support::log::buffer *v86;
  int v87;
  support::log::manager *v88;
  support::log::buffer *v89;
  int v90;
  support::log::manager *v91;
  support::log::buffer *v92;
  int v93;
  support::log::buffer *v94;
  int v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  void *v102;
  support::log::manager *v103;
  support::log::buffer *v104;
  int v105;
  uint64_t v106;
  char *v107;
  _BYTE v108[64];
  std::string __p;
  std::string v110;
  _OWORD v111[3];
  __int128 v112;
  __int128 v113;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  std::string __dst;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *p_rep;
  char v117;
  _OWORD *v118;
  std::string v119;
  std::string *v120;
  char *v121;
  _BYTE v122[32];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  std::string v127;

  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v112 = v11;
  v113 = v11;
  v111[1] = v11;
  v111[2] = v11;
  v111[0] = v11;
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_WORD *)&v108[50] = 0;
  *(_DWORD *)&v108[52] = 0;
  *(_QWORD *)&v108[56] = 0x8000000000000030;
  *(_OWORD *)&v110.__r_.__value_.__r.__words[1] = xmmword_212B50600;
  strcpy(v110.__r_.__value_.__l.__data_, "com.apple.telephony.basebandservices.support");
  strcpy(v108, "services.supportony.basebandservcom.apple.teleph,");
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&__p, "ari.create");
  support::log::client::client(v111, &v110, &__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v110.__r_.__value_.__l.__data_);
LABEL_3:
  *a5 = (char *)0xAAAAAAAAAAAAAAAALL;
  v12 = (char *)operator new(0x70uLL);
  *(_QWORD *)v12 = off_24CE7E8C8;
  *((_QWORD *)v12 + 1) = 0;
  *((_DWORD *)v12 + 4) = 0;
  *((_QWORD *)v12 + 3) = 0;
  v13 = (_QWORD **)(v12 + 24);
  v14 = operator new(0x30uLL);
  *(_QWORD *)v122 = v14;
  *(_OWORD *)&v122[8] = *(_OWORD *)&v108[48];
  *v14 = *(_OWORD *)&v108[32];
  v14[1] = *(_OWORD *)&v108[16];
  *(_OWORD *)((char *)v14 + 28) = *(_OWORD *)v108;
  *((_BYTE *)v14 + 44) = 0;
  *((_BYTE *)&v119.__r_.__value_.__s + 23) = 3;
  LODWORD(v119.__r_.__value_.__l.__data_) = 6910561;
  support::log::client::client((_QWORD *)v12 + 4, (std::string *)v122, &v119, a4);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v119.__r_.__value_.__l.__data_);
    if ((v122[23] & 0x80000000) == 0)
      goto LABEL_5;
LABEL_20:
    operator delete(*(void **)v122);
    goto LABEL_5;
  }
  if ((v122[23] & 0x80000000) != 0)
    goto LABEL_20;
LABEL_5:
  *(_QWORD *)&v108[48] = a5;
  *a5 = v12;
  v15 = getprogname();
  if (!strncmp(v15, "CommCenter", 0xAuLL))
    goto LABEL_24;
  v16 = getprogname();
  if (!strncmp(v16, "CommCenter-asan", 0xFuLL))
    goto LABEL_24;
  v17 = getprogname();
  if (!strncmp(v17, "basebandd", 9uLL))
    goto LABEL_24;
  v122[23] = 10;
  strcpy(v122, "CommCenter");
  if ((ctu::isProcessRunning() & 1) != 0)
  {
    isProcessRunning = 1;
    if ((v122[23] & 0x80000000) != 0)
      goto LABEL_10;
LABEL_23:
    if (!isProcessRunning)
      goto LABEL_11;
    goto LABEL_24;
  }
  *((_BYTE *)&v119.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v119, "basebandd");
  isProcessRunning = ctu::isProcessRunning();
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v119.__r_.__value_.__l.__data_);
    if ((v122[23] & 0x80000000) == 0)
      goto LABEL_23;
  }
  else if ((v122[23] & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
LABEL_10:
  operator delete(*(void **)v122);
  if (!isProcessRunning)
  {
LABEL_11:
    strcpy((char *)&v127, "com.apple.ARITransport");
    *((_BYTE *)&v127.__r_.__value_.__s + 23) = 22;
    v126 = 0;
    v124 = 0u;
    v125 = 0u;
    v123 = 0u;
    memset(v122, 0, sizeof(v122));
    if (!this || !*(_BYTE *)this)
    {
      v78 = (support::log::manager *)*((_QWORD *)v12 + 13);
      LOBYTE(v118) = 1;
      v79 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v78 + 16))(v78, 1, **((_QWORD **)v12 + 10));
      if (!(_DWORD)v79)
        goto LABEL_205;
      if (*((_QWORD *)v78 + 17))
      {
        support::log::buffer::borrow(v79);
        v80 = 2;
      }
      else
      {
        v80 = 0;
      }
      if (!(v80 | os_log_type_enabled(**((os_log_t **)v12 + 10), OS_LOG_TYPE_ERROR)))
        goto LABEL_205;
      LOWORD(v119.__r_.__value_.__l.__data_) = 0;
      v96 = _os_log_send_and_compose_impl();
      if (!v96)
        goto LABEL_205;
      goto LABEL_184;
    }
    v19 = strlen((const char *)this);
    if (v19 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v20 = v19;
    if (v19 >= 0x17)
    {
      v44 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17)
        v44 = v19 | 7;
      v45 = v44 + 1;
      p_dst = (std::string *)operator new(v44 + 1);
      __dst.__r_.__value_.__l.__size_ = v20;
      __dst.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19;
      p_dst = &__dst;
      if (!v19)
        goto LABEL_75;
    }
    memcpy(p_dst, this, v20);
LABEL_75:
    p_dst->__r_.__value_.__s.__data_[v20] = 0;
    v46 = std::string::insert(&__dst, 0, ".", 1uLL);
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v119.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v119;
    else
      v48 = (std::string *)v119.__r_.__value_.__r.__words[0];
    if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v119.__r_.__value_.__r.__words[2]);
    else
      size = v119.__r_.__value_.__l.__size_;
    std::string::append(&v127, (const std::string::value_type *)v48, size);
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v119.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = &v127;
    else
      v50 = (std::string *)v127.__r_.__value_.__r.__words[0];
    v51 = dispatch_queue_create((const char *)v50, 0);
    v52 = *((_QWORD *)v12 + 1);
    *((_QWORD *)v12 + 1) = v51;
    if (v52)
    {
      dispatch_release(v52);
      v51 = (dispatch_queue_t)*((_QWORD *)v12 + 1);
    }
    if (v51)
    {
      TelephonyBasebandPCITransportInitParameters();
      v53 = *((_QWORD *)v12 + 1);
      *(_DWORD *)&v122[24] = (_DWORD)a2;
      LODWORD(v123) = v123 | 1;
      *(_DWORD *)v122 = 8;
      v118 = 0;
      v119.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
      v119.__r_.__value_.__l.__size_ = 0x40000000;
      v119.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN7support9transport3ARI9initLibTUEPKcjj_block_invoke;
      v120 = (std::string *)&__block_descriptor_tmp;
      v121 = v12;
      *(_QWORD *)&v122[8] = v53;
      *(_QWORD *)&v122[16] = &v119;
      operator new(0x58uLL);
      if ((TelephonyBasebandPCITransportCreate() & 1) == 0)
      {
        v88 = (support::log::manager *)*((_QWORD *)v12 + 13);
        v117 = 1;
        v89 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v88 + 16))(v88, 1, **((_QWORD **)v12 + 10));
        if ((_DWORD)v89)
        {
          if (*((_QWORD *)v88 + 17))
          {
            support::log::buffer::borrow(v89);
            v90 = 2;
          }
          else
          {
            v90 = 0;
          }
          if (v90 | os_log_type_enabled(**((os_log_t **)v12 + 10), OS_LOG_TYPE_ERROR))
          {
            LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
            v98 = _os_log_send_and_compose_impl();
            if (v98)
            {
              v99 = (char *)v98;
              rep = std::chrono::system_clock::now().__d_.__rep_;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24CE7E8F8;
              __dst.__r_.__value_.__l.__size_ = (std::string::size_type)(v12 + 40);
              __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v117;
              p_rep = &rep;
              support::log::manager::message_delegates(v88, (const support::log::details *)&__dst, v99);
            }
          }
        }
LABEL_205:
        v57 = 0;
        if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_100;
        goto LABEL_206;
      }
      v54 = operator new(0x20uLL);
      *v54 = 0u;
      v54[1] = 0u;
      v118 = v54;
      if ((KTLInitOptions() & 1) != 0)
      {
        if ((KTLOpenChannel() & 1) != 0)
        {
          v118 = 0;
          v55 = *v13;
          *v13 = v54;
          if (v55)
          {
            if (v55[1])
            {
              TelephonyUtilTransportFree();
              v56 = (void *)v55[1];
              if (v56)
                operator delete(v56);
            }
            operator delete(v55);
          }
          v57 = 1;
          if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_100:
            if ((v57 & 1) != 0)
              goto LABEL_65;
LABEL_207:
            __dst.__r_.__value_.__s.__data_[0] = 1;
            v103 = (support::log::manager *)*((_QWORD *)&v113 + 1);
            v104 = (support::log::buffer *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v113 + 1)
                                                                                              + 16))(*((_QWORD *)&v113 + 1), 1, *(_QWORD *)v112);
            if ((_DWORD)v104)
            {
              if (*((_QWORD *)v103 + 17))
              {
                support::log::buffer::borrow(v104);
                v105 = 2;
              }
              else
              {
                v105 = 0;
              }
              if (v105 | os_log_type_enabled(*(os_log_t *)v112, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v122 = 0;
                v106 = _os_log_send_and_compose_impl();
                if (v106)
                {
                  v107 = (char *)v106;
                  v119.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
                  *(_QWORD *)v122 = off_24CE7E8F8;
                  *(_QWORD *)&v122[8] = (char *)v111 + 8;
                  *(_QWORD *)&v122[16] = &__dst;
                  *(_QWORD *)&v122[24] = &v119;
                  support::log::manager::message_delegates(v103, (const support::log::details *)v122, v107);
                }
              }
            }
            v22 = *(_QWORD **)&v108[48];
            goto LABEL_215;
          }
LABEL_206:
          operator delete(v127.__r_.__value_.__l.__data_);
          if ((v57 & 1) != 0)
            goto LABEL_65;
          goto LABEL_207;
        }
        v91 = (support::log::manager *)*((_QWORD *)v12 + 13);
        v117 = 1;
        v94 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v91 + 16))(v91, 1, **((_QWORD **)v12 + 10));
        if (!(_DWORD)v94)
          goto LABEL_201;
        if (*((_QWORD *)v91 + 17))
        {
          support::log::buffer::borrow(v94);
          v95 = 2;
        }
        else
        {
          v95 = 0;
        }
        if (!(v95 | os_log_type_enabled(**((os_log_t **)v12 + 10), OS_LOG_TYPE_ERROR)))
          goto LABEL_201;
        LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
        v100 = _os_log_send_and_compose_impl();
        if (!v100)
          goto LABEL_201;
      }
      else
      {
        v91 = (support::log::manager *)*((_QWORD *)v12 + 13);
        v117 = 1;
        v92 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v91 + 16))(v91, 1, **((_QWORD **)v12 + 10));
        if (!(_DWORD)v92)
          goto LABEL_201;
        if (*((_QWORD *)v91 + 17))
        {
          support::log::buffer::borrow(v92);
          v93 = 2;
        }
        else
        {
          v93 = 0;
        }
        if (!(v93 | os_log_type_enabled(**((os_log_t **)v12 + 10), OS_LOG_TYPE_ERROR)))
          goto LABEL_201;
        LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
        v100 = _os_log_send_and_compose_impl();
        if (!v100)
          goto LABEL_201;
      }
      v101 = (char *)v100;
      rep = std::chrono::system_clock::now().__d_.__rep_;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24CE7E8F8;
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)(v12 + 40);
      __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v117;
      p_rep = &rep;
      support::log::manager::message_delegates(v91, (const support::log::details *)&__dst, v101);
LABEL_201:
      v118 = 0;
      if (*((_QWORD *)v54 + 1))
      {
        TelephonyUtilTransportFree();
        v102 = (void *)*((_QWORD *)v54 + 1);
        if (v102)
          operator delete(v102);
      }
      operator delete(v54);
      goto LABEL_205;
    }
    v78 = (support::log::manager *)*((_QWORD *)v12 + 13);
    LOBYTE(v118) = 1;
    v86 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v78 + 16))(v78, 1, **((_QWORD **)v12 + 10));
    if (!(_DWORD)v86)
      goto LABEL_205;
    if (*((_QWORD *)v78 + 17))
    {
      support::log::buffer::borrow(v86);
      v87 = 2;
    }
    else
    {
      v87 = 0;
    }
    if (!(v87 | os_log_type_enabled(**((os_log_t **)v12 + 10), OS_LOG_TYPE_ERROR)))
      goto LABEL_205;
    LOWORD(v119.__r_.__value_.__l.__data_) = 0;
    v96 = _os_log_send_and_compose_impl();
    if (!v96)
      goto LABEL_205;
LABEL_184:
    v97 = (char *)v96;
    __dst.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
    v119.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24CE7E8F8;
    v119.__r_.__value_.__l.__size_ = (std::string::size_type)(v12 + 40);
    v119.__r_.__value_.__r.__words[2] = (std::string::size_type)&v118;
    v120 = &__dst;
    support::log::manager::message_delegates(v78, (const support::log::details *)&v119, v97);
    goto LABEL_205;
  }
LABEL_24:
  if ((a3 & 1) == 0)
  {
    __dst.__r_.__value_.__s.__data_[0] = 1;
    v61 = (support::log::manager *)*((_QWORD *)&v113 + 1);
    v22 = *(_QWORD **)&v108[48];
    v62 = (support::log::buffer *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v113 + 1) + 16))(*((_QWORD *)&v113 + 1), 1, *(_QWORD *)v112);
    if (!(_DWORD)v62)
      goto LABEL_215;
    if (*((_QWORD *)v61 + 17))
    {
      support::log::buffer::borrow(v62);
      v63 = 2;
    }
    else
    {
      v63 = 0;
    }
    if (!(v63 | os_log_type_enabled(*(os_log_t *)v112, OS_LOG_TYPE_ERROR)))
      goto LABEL_215;
    *(_WORD *)v122 = 0;
    v81 = _os_log_send_and_compose_impl();
    if (!v81)
      goto LABEL_215;
    goto LABEL_138;
  }
  strcpy((char *)&v119, "com.apple.ARITransport");
  *((_BYTE *)&v119.__r_.__value_.__s + 23) = 22;
  v22 = *(_QWORD **)&v108[48];
  if (!this || !*(_BYTE *)this)
  {
    v58 = (support::log::manager *)*((_QWORD *)v12 + 13);
    v127.__r_.__value_.__s.__data_[0] = 1;
    v59 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v58 + 16))(v58, 1, **((_QWORD **)v12 + 10));
    if (!(_DWORD)v59)
      goto LABEL_155;
    if (*((_QWORD *)v58 + 17))
    {
      support::log::buffer::borrow(v59);
      v60 = 2;
    }
    else
    {
      v60 = 0;
    }
    if (!(v60 | os_log_type_enabled(**((os_log_t **)v12 + 10), OS_LOG_TYPE_ERROR)))
      goto LABEL_155;
    *(_WORD *)v122 = 0;
    v77 = _os_log_send_and_compose_impl();
    if (!v77)
      goto LABEL_155;
LABEL_154:
    v83 = (char *)v77;
    __dst.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
    *(_QWORD *)v122 = off_24CE7E8F8;
    *(_QWORD *)&v122[8] = v12 + 40;
    *(_QWORD *)&v122[16] = &v127;
    *(_QWORD *)&v122[24] = &__dst;
    support::log::manager::message_delegates(v58, (const support::log::details *)v122, v83);
    goto LABEL_155;
  }
  v23 = strlen((const char *)this);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v24 = v23;
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v25 = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = v24;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    v22 = *(_QWORD **)&v108[48];
    goto LABEL_34;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v23;
  v25 = &__dst;
  if (v23)
LABEL_34:
    memcpy(v25, this, v24);
  v25->__r_.__value_.__s.__data_[v24] = 0;
  v28 = std::string::insert(&__dst, 0, ".", 1uLL);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  *(_QWORD *)&v122[16] = *((_QWORD *)&v28->__r_.__value_.__l + 2);
  *(_OWORD *)v122 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (v122[23] >= 0)
    v30 = v122;
  else
    v30 = *(const std::string::value_type **)v122;
  if (v122[23] >= 0)
    v31 = v122[23];
  else
    v31 = *(_QWORD *)&v122[8];
  std::string::append(&v119, v30, v31);
  if ((v122[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v122);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_43;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_43:
  if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = &v119;
  else
    v32 = (std::string *)v119.__r_.__value_.__r.__words[0];
  v33 = (AriHost *)dispatch_queue_create((const char *)v32, 0);
  v34 = *((_QWORD *)v12 + 1);
  *((_QWORD *)v12 + 1) = v33;
  if (v34)
  {
    dispatch_release(v34);
    v33 = (AriHost *)*((_QWORD *)v12 + 1);
  }
  if (!v33)
  {
    v58 = (support::log::manager *)*((_QWORD *)v12 + 13);
    v127.__r_.__value_.__s.__data_[0] = 1;
    v66 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v58 + 16))(v58, 1, **((_QWORD **)v12 + 10));
    if (!(_DWORD)v66)
      goto LABEL_155;
    if (*((_QWORD *)v58 + 17))
    {
      support::log::buffer::borrow(v66);
      v67 = 2;
    }
    else
    {
      v67 = 0;
    }
    if (!(v67 | os_log_type_enabled(**((os_log_t **)v12 + 10), OS_LOG_TYPE_ERROR)))
      goto LABEL_155;
    *(_WORD *)v122 = 0;
    v77 = _os_log_send_and_compose_impl();
    if (!v77)
      goto LABEL_155;
    goto LABEL_154;
  }
  if (AriHost::Init(v33))
  {
    v58 = (support::log::manager *)*((_QWORD *)v12 + 13);
    v127.__r_.__value_.__s.__data_[0] = 1;
    v68 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v58 + 16))(v58, 1, **((_QWORD **)v12 + 10));
    if (!(_DWORD)v68)
      goto LABEL_155;
    if (*((_QWORD *)v58 + 17))
    {
      support::log::buffer::borrow(v68);
      v69 = 2;
    }
    else
    {
      v69 = 0;
    }
    if (!(v69 | os_log_type_enabled(**((os_log_t **)v12 + 10), OS_LOG_TYPE_ERROR)))
      goto LABEL_155;
    *(_WORD *)v122 = 0;
    v77 = _os_log_send_and_compose_impl();
    if (!v77)
      goto LABEL_155;
    goto LABEL_154;
  }
  if (!AriHost::RegisterClient(this, v12 + 16, *((int **)v12 + 1), a2))
  {
    v35 = operator new(0x20uLL);
    *v35 = 0u;
    v35[1] = 0u;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
    if ((KTLInitOptions() & 1) != 0)
    {
      if ((KTLOpenChannel() & 1) != 0)
      {
        __dst.__r_.__value_.__r.__words[0] = 0;
        v36 = *v13;
        *v13 = v35;
        if (v36)
        {
          if (v36[1])
          {
            TelephonyUtilTransportFree();
            v37 = 0;
            v38 = 0;
            v39 = (void *)v36[1];
            if (!v39)
              goto LABEL_62;
            goto LABEL_56;
          }
          v38 = 0;
          goto LABEL_62;
        }
        v40 = 1;
        if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_64;
LABEL_63:
        operator delete(v119.__r_.__value_.__l.__data_);
        goto LABEL_64;
      }
      v72 = (support::log::manager *)*((_QWORD *)v12 + 13);
      LOBYTE(v118) = 1;
      v75 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v72 + 16))(v72, 1, **((_QWORD **)v12 + 10));
      if ((_DWORD)v75)
      {
        if (*((_QWORD *)v72 + 17))
        {
          support::log::buffer::borrow(v75);
          v76 = 2;
        }
        else
        {
          v76 = 0;
        }
        if (v76 | os_log_type_enabled(**((os_log_t **)v12 + 10), OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v122 = 0;
          v84 = _os_log_send_and_compose_impl();
          if (v84)
            goto LABEL_164;
        }
      }
    }
    else
    {
      v72 = (support::log::manager *)*((_QWORD *)v12 + 13);
      LOBYTE(v118) = 1;
      v73 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v72 + 16))(v72, 1, **((_QWORD **)v12 + 10));
      if ((_DWORD)v73)
      {
        if (*((_QWORD *)v72 + 17))
        {
          support::log::buffer::borrow(v73);
          v74 = 2;
        }
        else
        {
          v74 = 0;
        }
        if (v74 | os_log_type_enabled(**((os_log_t **)v12 + 10), OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v122 = 0;
          v84 = _os_log_send_and_compose_impl();
          if (v84)
          {
LABEL_164:
            v85 = (char *)v84;
            v127.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
            *(_QWORD *)v122 = off_24CE7E8F8;
            *(_QWORD *)&v122[8] = v12 + 40;
            *(_QWORD *)&v122[16] = &v118;
            *(_QWORD *)&v122[24] = &v127;
            support::log::manager::message_delegates(v72, (const support::log::details *)v122, v85);
          }
        }
      }
    }
    __dst.__r_.__value_.__r.__words[0] = 0;
    if (*((_QWORD *)v35 + 1))
    {
      TelephonyUtilTransportFree();
      v39 = (void *)*((_QWORD *)v35 + 1);
      v37 = 8;
      v36 = v35;
      v38 = 8;
      if (v39)
      {
LABEL_56:
        operator delete(v39);
        v38 = v37;
      }
    }
    else
    {
      v38 = 8;
      v36 = v35;
    }
LABEL_62:
    operator delete(v36);
    v40 = v38 == 0;
    if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_64;
    goto LABEL_63;
  }
  v58 = (support::log::manager *)*((_QWORD *)v12 + 13);
  v127.__r_.__value_.__s.__data_[0] = 1;
  v70 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v58 + 16))(v58, 1, **((_QWORD **)v12 + 10));
  if ((_DWORD)v70)
  {
    if (*((_QWORD *)v58 + 17))
    {
      support::log::buffer::borrow(v70);
      v71 = 2;
    }
    else
    {
      v71 = 0;
    }
    if (v71 | os_log_type_enabled(**((os_log_t **)v12 + 10), OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v122 = 0;
      v77 = _os_log_send_and_compose_impl();
      if (v77)
        goto LABEL_154;
    }
  }
LABEL_155:
  v40 = 0;
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_63;
LABEL_64:
  if (v40)
    goto LABEL_65;
  __dst.__r_.__value_.__s.__data_[0] = 1;
  v61 = (support::log::manager *)*((_QWORD *)&v113 + 1);
  v64 = (support::log::buffer *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v113 + 1) + 16))(*((_QWORD *)&v113 + 1), 1, *(_QWORD *)v112);
  if (!(_DWORD)v64)
    goto LABEL_215;
  if (*((_QWORD *)v61 + 17))
  {
    support::log::buffer::borrow(v64);
    v65 = 2;
  }
  else
  {
    v65 = 0;
  }
  if (!(v65 | os_log_type_enabled(*(os_log_t *)v112, OS_LOG_TYPE_ERROR)))
    goto LABEL_215;
  *(_WORD *)v122 = 0;
  v81 = _os_log_send_and_compose_impl();
  if (!v81)
    goto LABEL_215;
LABEL_138:
  v82 = (char *)v81;
  v119.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
  *(_QWORD *)v122 = off_24CE7E8F8;
  *(_QWORD *)&v122[8] = (char *)v111 + 8;
  *(_QWORD *)&v122[16] = &__dst;
  *(_QWORD *)&v122[24] = &v119;
  support::log::manager::message_delegates(v61, (const support::log::details *)v122, v82);
LABEL_215:
  *v22 = 0;
  (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
LABEL_65:
  *(_QWORD *)&v111[0] = &unk_24CE7E928;
  v41 = (std::__shared_weak_count *)v113;
  if ((_QWORD)v113)
  {
    v42 = (unint64_t *)(v113 + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_212A57604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,_QWORD *a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;
  uint64_t v58;

  std::unique_ptr<KTLOptions,support::transport::ARI::KTLOptionsDestructor>::~unique_ptr[abi:ne180100](&a51);
  if (*(char *)(v58 - 105) < 0)
    operator delete(*(void **)(v58 - 128));
  *a17 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  support::log::client::~client((support::log::client *)&a31);
  _Unwind_Resume(a1);
}

void support::log::client::~client(support::log::client *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &unk_24CE7E928;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &unk_24CE7E928;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(this);
  }
  else
  {
LABEL_5:
    operator delete(this);
  }
}

void support::transport::ARI::~ARI(support::transport::ARI *this)
{
  AriHost *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  void *v7;
  NSObject *v8;

  *(_QWORD *)this = off_24CE7E8C8;
  if (*((_QWORD *)this + 3))
    KTLCloseChannel();
  v2 = (AriHost *)*((unsigned int *)this + 4);
  if ((_DWORD)v2)
    AriHost::DeregisterClient(v2);
  *((_QWORD *)this + 4) = &unk_24CE7E928;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (!v3)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (_QWORD *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (!v6)
      goto LABEL_14;
  }
  else
  {
LABEL_9:
    v6 = (_QWORD *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (!v6)
      goto LABEL_14;
  }
  if (v6[1])
  {
    TelephonyUtilTransportFree();
    v7 = (void *)v6[1];
    if (v7)
      operator delete(v7);
  }
  operator delete(v6);
LABEL_14:
  v8 = *((_QWORD *)this + 1);
  if (v8)
    dispatch_release(v8);
}

{
  void *v1;

  support::transport::ARI::~ARI(this);
  operator delete(v1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24CE7E280, MEMORY[0x24BEDAAF0]);
}

void sub_212A57A9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24CE7E288, MEMORY[0x24BEDAB00]);
}

void sub_212A57B28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t __cxx_global_var_init()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_212A4D000);
  }
  return result;
}

void BBUEURLoader::BBUEURLoader(BBUEURLoader *this, BBUFeedback *a2)
{
  capabilities::updater *v3;
  capabilities::updater *v4;
  void *exception;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)this = &unk_24CE85280;
  *((_QWORD *)this + 1) = a2;
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBULoader.cpp", 0x10u, (ctu::LogMessageBuffer *)"Assertion failure(fFeedback)", v6, v7, v8, v9);
  }
  *(_QWORD *)this = off_24CE7E958;
  *((_BYTE *)this + 24) = 0;
  v3 = (capabilities::updater *)capabilities::radio::chipID(this);
  *((_DWORD *)this + 7) = (_DWORD)v3;
  v4 = (capabilities::updater *)capabilities::updater::loaderConnectAttempts(v3);
  *((_DWORD *)this + 8) = (_DWORD)v4;
  *((_DWORD *)this + 9) = capabilities::updater::loaderCommandTimeout(v4);
  *((_BYTE *)this + 40) = 0;
}

void sub_212A57D68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURLoader::getCommandTimeout(BBUEURLoader *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t BBUEURLoader::connect(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *exception;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
      goto LABEL_5;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
    _BBULog(9, 0, v2, "", "Connecting\n", v3, v4, v5, v19);
  }
LABEL_5:
  BBUFeedback::handleBeginQuickStep(*(BBUFeedback **)(a1 + 8), "Connecting to Loader");
  if (!*(_DWORD *)(a1 + 32))
  {
LABEL_17:
    v13 = 3;
    goto LABEL_18;
  }
  v6 = 0;
  while (1)
  {
    if ((ETLDLOADCommandCreateParametersRequest() & 1) == 0)
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEURLoader.cpp", 0x42u, (ctu::LogMessageBuffer *)"Assertion failure(success)", v16, v17, v18, v19);
    }
    v7 = ETLDLOADCommandSend();
    HDLCFrameFree();
    if (v7)
    {
      if (ETLDLOADCommandReceiveSmallWithFlags())
      {
        v8 = ETLDLOADCommandParseParametersResponse();
        HDLCFrameFree();
        if (v8)
          break;
      }
    }
    if (++v6 >= *(_DWORD *)(a1 + 32))
      goto LABEL_17;
  }
  *(_DWORD *)(a1 + 16) = 43690;
  *(_DWORD *)(a1 + 20) = 170;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) != 0)
      goto LABEL_14;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) != 0)
    {
LABEL_14:
      if (gBBULogVerbosity >= 1)
      {
        v9 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
        _BBULog(9, 1, v9, "", "Max write size %u, Protocol version %u\n", v10, v11, v12, *(_DWORD *)(a1 + 16));
      }
    }
  }
  v13 = 0;
LABEL_18:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v13);
  return v13;
}

void sub_212A57FF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURLoader::getVersion(BBUFeedback **a1, uint64_t a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *exception;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void *__dst[2];
  unint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char __s[16];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 75, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEURLoader.cpp", 0x77u, (ctu::LogMessageBuffer *)"Assertion failure(version && \"Invalid BBU loader verson.\")", v18, v19, v20, v25);
  }
  BBUFeedback::handleBeginQuickStep(a1[1], "Getting Version");
  v28 = -1431655766;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  *(_OWORD *)__s = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  if ((ETLDLOADCommandCreateVersionRequest() & 1) == 0)
  {
    v21 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v21, 75, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEURLoader.cpp", 0x89u, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Unable to load command to create BBU loader version.\")", v22, v23, v24, v25);
  }
  ETLDLOADCommandSend();
  if (ETLDLOADCommandReceiveSmallWithFlags())
  {
    v5 = ETLDLOADCommandParseVersionResponse();
    if (v5)
      v6 = 0;
    else
      v6 = 3;
  }
  else
  {
    v5 = 0;
    v6 = 3;
  }
  HDLCFrameFree();
  HDLCFrameFree();
  (*(void (**)(BBUFeedback *, uint64_t))(*(_QWORD *)a1[1] + 24))(a1[1], v6);
  if (v5)
  {
    v7 = strlen(__s);
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v8 = (void *)v7;
    if (v7 >= 0x17)
    {
      v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v10 = v7 | 7;
      v11 = v10 + 1;
      v9 = (void **)operator new(v10 + 1);
      __dst[1] = v8;
      v27 = v11 | 0x8000000000000000;
      __dst[0] = v9;
    }
    else
    {
      HIBYTE(v27) = v7;
      v9 = __dst;
      if (!v7)
      {
LABEL_17:
        *((_BYTE *)v8 + (_QWORD)v9) = 0;
        *a3 = BBULoaderVersion::createFromVersionString((uint64_t)__dst);
        if (SHIBYTE(v27) < 0)
          operator delete(__dst[0]);
        goto LABEL_19;
      }
    }
    memcpy(v9, __s, (size_t)v8);
    goto LABEL_17;
  }
LABEL_19:
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
      return v6;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
      return v6;
  }
  if (gBBULogVerbosity >= 1)
  {
    v12 = (const char *)(*((uint64_t (**)(BBUFeedback **))*a1 + 9))(a1);
    _BBULog(9, 1, v12, "", "Version is %s\n", v13, v14, v15, (char)__s);
  }
  return v6;
}

void sub_212A58304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUEURLoader::enableStepThroughImages(uint64_t this)
{
  *(_BYTE *)(this + 40) = 1;
  return this;
}

uint64_t BBUEURLoader::load(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  void *exception;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  void *__p[2];
  __int128 v39;
  __int128 v40;
  __int16 v41;
  char v42;
  int v43[3];

  if (!a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEURLoader.cpp", 0xB7u, (ctu::LogMessageBuffer *)"Assertion failure(source && \"BBU Data source problem.\")", v33, v34, v35, v36);
LABEL_39:
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  v7 = operator new[](*(unsigned int *)(a1 + 16));
  v8 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v8 + 44))
    *(_DWORD *)(v8 + 40) = 1;
  BYTE7(v39) = 7;
  strcpy((char *)__p, "Loading");
  (*(void (**)(uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, __p, v5, v6 + v5);
  if (SBYTE7(v39) < 0)
  {
    operator delete(__p[0]);
    v43[0] = -1431655766;
    v24 = *(_DWORD *)(a1 + 16);
    if (v24 >= v6)
      v10 = v6;
    else
      v10 = v24;
    if ((_DWORD)v10)
      goto LABEL_9;
  }
  else
  {
    v43[0] = -1431655766;
    v9 = *(_DWORD *)(a1 + 16);
    if (v9 >= v6)
      v10 = v6;
    else
      v10 = v9;
    if ((_DWORD)v10)
    {
LABEL_9:
      v11 = 0;
      v12 = 1.0 / (double)v6;
      LODWORD(v13) = v5;
      v37 = v6;
      while (1)
      {
        if ((*(unsigned int (**)(uint64_t, void *, uint64_t, int *, uint64_t))(*(_QWORD *)a3 + 16))(a3, v7, v10, v43, v11))
        {
          exception = __cxa_allocate_exception(0x210uLL);
          _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEURLoader.cpp", 0xF1u, (ctu::LogMessageBuffer *)"Assertion failure(ret == kBBUReturnSuccess)", v27, v28, v29, v36);
          goto LABEL_39;
        }
        v42 = -86;
        v41 = -21846;
        *(_OWORD *)__p = 0u;
        v39 = 0u;
        v40 = 0u;
        if ((ETLDLOADCommandCreateWriteRequest() & 1) == 0)
        {
          exception = __cxa_allocate_exception(0x210uLL);
          _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEURLoader.cpp", 0x100u, (ctu::LogMessageBuffer *)"Assertion failure(success)", v30, v31, v32, v36);
          goto LABEL_39;
        }
        if (ETLDLOADCommandSend()
          && ETLDLOADCommandReceiveSmallWithFlags()
          && ETLDLOADCommandParseACKNAKResponse())
        {
          if (v42)
          {
            v15 = 0;
            v16 = 1;
          }
          else
          {
            v17 = ETLDLOADGetNAKReasonAsString();
            if (gBBULogMaskGet(void)::once == -1)
            {
              v16 = 0;
              v15 = 12;
              if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) != 0)
                goto LABEL_27;
            }
            else
            {
              v23 = v17;
              dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
              v17 = v23;
              v16 = 0;
              v15 = 12;
              if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) != 0)
              {
LABEL_27:
                if (gBBULogVerbosity >= 1)
                {
                  v18 = v17;
                  v19 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
                  _BBULog(9, 1, v19, "", "Response was NAK, Reason %s(%u)\n", v20, v21, v22, v18);
                  v16 = 0;
                }
              }
            }
          }
        }
        else
        {
          v16 = 0;
          v15 = 3;
        }
        HDLCFrameFree();
        HDLCFrameFree();
        if ((v16 & 1) != 0)
        {
          v13 = (v13 + v10);
          v11 = (v11 + v10);
          if ((v13 - v5) > 0x8000)
          {
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), v13);
            BBUFeedback::updateProgressBarItem(*(BBUFeedback **)(a1 + 8), (double)v11 * v12);
            LODWORD(v5) = v13;
          }
          v43[0] = -1431655766;
          v14 = *(_DWORD *)(a1 + 16);
          v10 = v14 >= v37 - v11 ? v37 - v11 : v14;
          if ((_DWORD)v10)
            continue;
        }
        goto LABEL_36;
      }
    }
  }
  v15 = 0;
LABEL_36:
  operator delete[](v7);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v15);
  return v15;
}

void sub_212A58744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  __cxa_free_exception(v24);
  _Unwind_Resume(a1);
}

uint64_t BBUEURLoader::go(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *exception;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  BBUFeedback::handleBeginQuickStep(*(BBUFeedback **)(a1 + 8), "Launching");
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  if ((ETLDLOADCommandCreateGoRequest() & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEURLoader.cpp", 0x14Fu, (ctu::LogMessageBuffer *)"Assertion failure(success)", v7, v8, v9, v10);
  }
  if (ETLDLOADCommandSend() && ETLDLOADCommandReceiveSmallWithFlags())
    ETLDLOADCommandParseACKNAKResponse();
  HDLCFrameFree();
  HDLCFrameFree();
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), 0);
  BBUFeedback::endProgressBarItem(*(BBUFeedback **)(a1 + 8));
  return 0;
}

void sub_212A58958(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURLoader::queryChipInfo(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __int128 v5;
  uint64_t v6;
  char v7;
  unsigned __int8 *v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *exception;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _OWORD v21[16];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if ((ETLDLOADCommandCreateSerialNumberRequest() & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 100, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEURLoader.cpp", 0x184u, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Unable to load command to create serial number request.\")", v17, v18, v19, v20);
  }
  if (ETLDLOADCommandSend() && ETLDLOADCommandReceiveSmallWithFlags())
  {
    *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v21[14] = v5;
    v21[15] = v5;
    v21[12] = v5;
    v21[13] = v5;
    v21[10] = v5;
    v21[11] = v5;
    v21[8] = v5;
    v21[9] = v5;
    v21[6] = v5;
    v21[7] = v5;
    v21[4] = v5;
    v21[5] = v5;
    v21[2] = v5;
    v21[3] = v5;
    v21[0] = v5;
    v21[1] = v5;
    if (ETLDLOADCommandParseSerialNumberResponse())
    {
      v6 = 357913941;
      v7 = *(_BYTE *)(a1 + 24);
      v8 = (unsigned __int8 *)v21;
      do
      {
        if (v7)
          break;
        v9 = *v8++;
        v7 = v9 != 0;
        *(_BYTE *)(a1 + 24) = v9 != 0;
        --v6;
      }
      while (v6);
      v10 = BBUEURPersonalizationParameters::EURSerialNumber::createFromSerialNumber((BBUEURPersonalizationParameters::EURSerialNumber *)v21, (const unsigned __int8 *)0xAAAAAAAALL);
      v11 = BBUEURPersonalizationParameters::EURChipID::createFromChipID((BBUEURPersonalizationParameters::EURChipID *)*(unsigned int *)(a1 + 28));
      v12 = v11;
      if (v10)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*a3 + 16))(a3, v10);
        v13 = a3[2];
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v14 = 0;
        a3[2] = v12;
        goto LABEL_15;
      }
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
    v14 = 3;
LABEL_15:
    HDLCFrameFree();
    goto LABEL_16;
  }
  v14 = 3;
LABEL_16:
  HDLCFrameFree();
  return v14;
}

void sub_212A58B64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURLoader::isFused(BBUEURLoader *this)
{
  return *((unsigned __int8 *)this + 24);
}

const char *BBUEURLoader::getDebugName(BBUEURLoader *this)
{
  return "BBUEURLoader";
}

void BBUICE16Loader::BBUICE16Loader(BBUICE16Loader *this, BBUFeedback *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _OWORD *v5;
  char *v6;
  char *v7;

  BBUICELoader::BBUICELoader(this, a2);
  *v3 = off_24CE7E9D8;
  *(_QWORD *)((char *)v3 + 44) = 0x8000001388;
  v3[7] = 0;
  v4 = v3 + 7;
  v3[8] = 0;
  v3[9] = 0;
  v5 = operator new(0x80uLL);
  *v4 = v5;
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  *((_QWORD *)this + 8) = v5 + 8;
  *((_QWORD *)this + 9) = v5 + 8;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 20) = 4096;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  v6 = (char *)operator new(0x1000uLL);
  *((_QWORD *)this + 14) = v6;
  v7 = v6 + 4096;
  *((_QWORD *)this + 16) = v6 + 4096;
  bzero(v6, 0x1000uLL);
  *((_QWORD *)this + 15) = v7;
  if ((TelephonyUtilRingBufferInitialize() & 1) == 0)
    BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "failed initializing ring buffer");
}

void sub_212A58C6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (!*v2)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v1 + 64) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

uint64_t BBUICE16Loader::connect(uint64_t a1)
{
  BBUFeedback::handleBeginQuickStep(*(BBUFeedback **)(a1 + 8), "Connecting to Loader");
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), 0);
  return 0;
}

uint64_t BBUICE16Loader::getVersion(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __int128 v5;
  size_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *__p[2];
  __int128 v23;
  __int128 v24;
  _OWORD v25[9];
  unint64_t v26;

  BBUFeedback::handleBeginQuickStep(*(BBUFeedback **)(a1 + 8), "Getting Version");
  if (!a3)
  {
    v8 = 2;
    goto LABEL_21;
  }
  v26 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[7] = v5;
  v25[8] = v5;
  v25[5] = v5;
  v25[6] = v5;
  v25[3] = v5;
  v25[4] = v5;
  v25[1] = v5;
  v25[2] = v5;
  v24 = v5;
  v25[0] = v5;
  *(_OWORD *)__p = v5;
  v23 = v5;
  v20 = v5;
  v21 = v5;
  v18 = v5;
  v19 = v5;
  v17 = v5;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v17);
  std::ostream::operator<<();
  if ((BYTE8(v24) & 0x10) != 0)
  {
    v9 = v24;
    if ((unint64_t)v24 < *((_QWORD *)&v21 + 1))
    {
      *(_QWORD *)&v24 = *((_QWORD *)&v21 + 1);
      v9 = *((_QWORD *)&v21 + 1);
    }
    v10 = (const void *)v21;
    v6 = v9 - v21;
    if ((unint64_t)(v9 - v21) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_23;
  }
  else
  {
    if ((BYTE8(v24) & 8) == 0)
    {
      v6 = 0;
      HIBYTE(v16) = 0;
      v7 = __dst;
      goto LABEL_16;
    }
    v10 = (const void *)*((_QWORD *)&v19 + 1);
    v6 = *((_QWORD *)&v20 + 1) - *((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v20 + 1) - *((_QWORD *)&v19 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_23:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    v7 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v6;
    v16 = v12 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v16) = v6;
    v7 = __dst;
    if (!v6)
      goto LABEL_16;
  }
  memmove(v7, v10, v6);
LABEL_16:
  *((_BYTE *)v7 + v6) = 0;
  *a3 = BBULoaderVersion::createFromVersionString((uint64_t)__dst);
  if (SHIBYTE(v16) < 0)
    operator delete(__dst[0]);
  *(_QWORD *)&v17 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v17 + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v18 = v13;
  *((_QWORD *)&v18 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v23) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BFA3D0](v25);
  v8 = 0;
LABEL_21:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v8);
  return v8;
}

void sub_212A58F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_212A59060(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x212BFA3D0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BFA3D0](a1 + 128);
  return a1;
}

uint64_t BBUICE16Loader::queryChipInfo(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t (*v7)(uint64_t, uint64_t, unsigned __int8 *, uint64_t, unsigned int *, _QWORD);
  char v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BBUFeedback *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void **v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  char v38;
  void *__p[2];
  char v40;
  void *v41[2];
  char v42;
  unsigned int v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v43 = 0;
  v6 = (unsigned __int8 *)operator new(0x60uLL);
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  v44 = 0u;
  v45 = 0u;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t, unsigned int *, _QWORD))(a2 + 40);
  if (!v7 || ((v8 = v7(a2, 5, v6, 60, &v43, 0), v43 > 0x3B) ? (v9 = v8) : (v9 = 0), (v9 & 1) == 0))
  {
    v22 = 3;
    goto LABEL_52;
  }
  v10 = BBUICEPersonalizationParameters::ICEChipID::createFromChipID((BBUICEPersonalizationParameters::ICEChipID *)v6[2]);
  v11 = *(_QWORD *)(a3 + 16);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *(_QWORD *)(a3 + 16) = v10;
  v12 = BBUICEPersonalizationParameters::ICESerialNumber::createFromSerialNumber(v6 + 10, (const unsigned __int8 *)0x60);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a3 + 16))(a3, v12);
  v13 = operator new(0x10uLL);
  *v13 = off_24CE864C8;
  v13[1] = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v6 + 22, 32);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a3 + 24))(a3, v13);
  if ((_QWORD)v44 == *(_QWORD *)(v6 + 22)
    && *((_QWORD *)&v44 + 1) == *(_QWORD *)(v6 + 30)
    && (_QWORD)v45 == *(_QWORD *)(v6 + 38)
    && *((_QWORD *)&v45 + 1) == *(_QWORD *)(v6 + 46))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v17 = 1;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
        goto LABEL_27;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v17 = 1;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
        goto LABEL_27;
    }
    if (gBBULogVerbosity >= 1)
    {
      v23 = (const char *)(*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
      _BBULog(9, 1, v23, "", "Detect as unfused BB\n", v24, v25, v26, v38);
    }
  }
  else
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v17 = 3;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
        goto LABEL_27;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v17 = 3;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
        goto LABEL_27;
    }
    if (gBBULogVerbosity >= 1)
    {
      v18 = (const char *)(*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
      _BBULog(9, 1, v18, "", "Detect as fused BB\n", v19, v20, v21, v38);
    }
  }
LABEL_27:
  v27 = -559030611;
  *(_DWORD *)(a3 + 88) = v17;
  v28 = (BBUFeedback *)a1[1];
  v29 = *(_QWORD *)(a3 + 16);
  v30 = -559030611;
  if (v29)
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  v31 = *(_QWORD *)(a3 + 32);
  if (!v31)
  {
    v33 = "failed";
    v34 = *(_QWORD *)(a3 + 40);
    if (v34)
      goto LABEL_38;
LABEL_43:
    v35 = "failed";
    v36 = *(_QWORD *)(a3 + 24);
    if (!v36)
      goto LABEL_45;
    goto LABEL_44;
  }
  v32 = v41;
  (*(void (**)(void **__return_ptr, _QWORD))(*(_QWORD *)v31 + 24))(v41, *(_QWORD *)(a3 + 32));
  if (v42 < 0)
    v32 = (void **)v41[0];
  if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
  {
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
      goto LABEL_34;
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
      goto LABEL_34;
  }
  dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
LABEL_34:
  if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)
    v33 = (const char *)v32;
  else
    v33 = "<< SNUM >>";
  v34 = *(_QWORD *)(a3 + 40);
  if (!v34)
    goto LABEL_43;
LABEL_38:
  v35 = (const char *)__p;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v34 + 24))(__p, v34);
  if (v40 < 0)
    v35 = (const char *)__p[0];
  v36 = *(_QWORD *)(a3 + 24);
  if (!v36)
    goto LABEL_45;
LABEL_44:
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
LABEL_45:
  BBUFeedback::handleComment(v28, "CHIPID=0x%x SNUM=0x%s, PKHASH=0x%s CERTID=0x%x\n", v30, v33, v35, v27);
  if (v34 && v40 < 0)
    operator delete(__p[0]);
  if (v31 && v42 < 0)
    operator delete(v41[0]);
  v22 = 0;
LABEL_52:
  operator delete(v6);
  return v22;
}

void sub_212A59568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  uint64_t v26;

  if (v26)
  {
    if (a25 < 0)
    {
      operator delete(__p);
      operator delete(v25);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v25);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16Loader::load(BBUFeedback **a1, _QWORD *a2, const void *a3)
{
  uint64_t v6;
  void *v7;
  BOOL v8;
  uint64_t (*v10)(_QWORD *, void *, uint64_t, uint64_t *, uint64_t, int *, _QWORD);
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  int v17;
  int v18;
  uint64_t v19;

  if (!a2 || !a3)
  {
    BBUFeedback::handleComment(a1[1], "invalid arguments transport:  %p, updateSource:  %p", a2, a3);
    return 2;
  }
  v19 = 0;
  v18 = -1;
  v6 = (*(uint64_t (**)(const void *))(*(_QWORD *)a3 + 24))(a3);
  BBUFeedback::handleComment(a1[1], "Send PSI-RAM (%d bytes)", v6);
  v7 = operator new[](v6);
  if ((*(unsigned int (**)(const void *, void *, uint64_t, char *, _QWORD))(*(_QWORD *)a3 + 16))(a3, v7, v6, (char *)&v19 + 4, 0))
  {
    v8 = 0;
  }
  else
  {
    v8 = HIDWORD(v19) == (_DWORD)v6;
  }
  if (!v8)
  {
    BBUFeedback::handleComment(a1[1], "Error: copying PSI-RAM buffer.");
    operator delete[](v7);
    return 1;
  }
  v10 = (uint64_t (*)(_QWORD *, void *, uint64_t, uint64_t *, uint64_t, int *, _QWORD))a2[4];
  if (v10)
  {
    v11 = v10(a2, v7, v6, &v19, 10000, &v18, 0);
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_11;
  }
  else
  {
    v11 = 0;
    if (gBBULogMaskGet(void)::once == -1)
    {
LABEL_11:
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) != 0)
        goto LABEL_12;
      goto LABEL_16;
    }
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) != 0)
  {
LABEL_12:
    if (gBBULogVerbosity >= 1)
    {
      v12 = (const char *)(*((uint64_t (**)(BBUFeedback **))*a1 + 9))(a1);
      v16 = "failure";
      if (v11)
        v16 = "success";
      _BBULog(9, 1, v12, "", "SendImage returned %s, amountWritten = %u, status = %u\n", v13, v14, v15, (char)v16);
    }
  }
LABEL_16:
  operator delete[](v7);
  if ((_DWORD)v19 == (_DWORD)v6)
    v17 = v11;
  else
    v17 = 0;
  if (v17 == 1 && (v18 == 1 || v18 == 16))
  {
    BBUFeedback::handleComment(a1[1], "Sent PSI sucessfully!");
    return 0;
  }
  else
  {
    BBUFeedback::handleComment(a1[1], "Failed to send PSI!");
    return 3;
  }
}

uint64_t BBUICE16Loader::go()
{
  return 0;
}

void BBUICE16Loader::~BBUICE16Loader(BBUICE16Loader *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_24CE7E9D8;
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_24CE7E9D8;
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  operator delete(this);
}

uint64_t BBUICELoader::isFused(BBUICELoader *this)
{
  return *((unsigned __int8 *)this + 24);
}

const char *BBUICE16Loader::getDebugName(BBUICE16Loader *this)
{
  return "BBUICE16Loader";
}

uint64_t RecipeUtil::uninit(RecipeUtil *this)
{
  void **i;
  void *v3;
  void *v4;
  void **v5;
  unint64_t v6;
  unsigned int v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  void *v12;

  for (i = (void **)*((_QWORD *)this + 9); i; i = (void **)*((_QWORD *)this + 9))
  {
    v12 = *i;
    *((_QWORD *)this + 9) = i[1];
    if (v12)
      free(v12);
    operator delete(i);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    operator delete[](v3);
    *((_QWORD *)this + 13) = 0;
  }
  v5 = (void **)((char *)this + 120);
  v4 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 17) = 0;
  if (v4)
  {
    if (!*((_QWORD *)this + 16))
      goto LABEL_9;
    v6 = 0;
    v7 = 1;
    do
    {
      free(*(void **)(*((_QWORD *)this + 15) + 8 * v6));
      v6 = v7++;
    }
    while (*((_QWORD *)this + 16) > v6);
    v4 = *v5;
    if (*v5)
LABEL_9:
      operator delete[](v4);
    *v5 = 0;
    *((_QWORD *)this + 16) = 0;
  }
  v10 = (void *)*((_QWORD *)this + 18);
  v9 = (_QWORD *)((char *)this + 144);
  v8 = v10;
  if (v10)
  {
    operator delete[](v8);
    *v9 = 0;
    v9[1] = 0;
  }
  return 0;
}

uint64_t RecipeUtil::_parseVariables(RecipeUtil *this)
{
  uint64_t v1;
  __int128 *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  _QWORD *v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  void *v25;
  void *v26;
  unint64_t v27;
  size_t v28;
  void *v29;
  unint64_t v30;
  void *v31;

  v1 = 2147483656;
  v2 = *(__int128 **)this;
  if (!*(_QWORD *)this)
    return v1;
  v4 = *((_QWORD *)this + 1);
  if (!v4)
    return v1;
  v5 = 268435461;
  v6 = v4 - 54;
  if (v4 < 0x36)
    return 268435461;
  v8 = v2[1];
  v7 = v2[2];
  v9 = *v2;
  *(_QWORD *)((char *)this + 62) = *(_QWORD *)((char *)v2 + 46);
  *((_OWORD *)this + 2) = v8;
  *((_OWORD *)this + 3) = v7;
  *((_OWORD *)this + 1) = v9;
  if (*((_DWORD *)this + 4))
    return 2147483659;
  if (v6 < 8)
  {
LABEL_37:
    if (v6)
    {
      v5 = 2147483650;
      goto LABEL_46;
    }
    return 0;
  }
  v10 = (unsigned int *)((char *)v2 + 54);
  while (2)
  {
    v11 = v10[1];
    if (!(_DWORD)v11)
    {
      v5 = 2147483652;
      goto LABEL_46;
    }
    v12 = v10 + 2;
    v6 -= 8;
    switch(*v10)
    {
      case 1u:
        if (*((_QWORD *)this + 9))
        {
          v5 = 2147483657;
        }
        else
        {
          v13 = operator new(0x10uLL);
          *((_QWORD *)this + 9) = v13;
          v14 = v10[1];
          if (!v14)
            goto LABEL_9;
          v15 = v13;
          v16 = 0;
          while (v6 >= 0xC)
          {
            v19 = v12[2];
            if (v6 < v19)
              break;
            v20 = v19 + 12;
            v21 = malloc(v19 + 12);
            *v15 = v21;
            if (!v21)
            {
              v5 = 2147483653;
              goto LABEL_46;
            }
            memcpy(v21, v12, v20);
            v22 = v12[2];
            if (v16 < v14 - 1)
            {
              v17 = operator new(0x10uLL);
              v18 = v17;
            }
            else
            {
              v17 = 0;
              v18 = v15;
            }
            v12 = (unsigned int *)((char *)v12 + v22 + 12);
            v6 -= v22 + 12;
            v15[1] = v17;
            ++v16;
            v15 = v18;
            if (v14 == v16)
              goto LABEL_9;
          }
        }
        goto LABEL_46;
      case 2u:
        *((_QWORD *)this + 14) = v11;
        v23 = 52 * v11;
        v24 = v6 >= v23;
        v6 -= v23;
        if (!v24)
          goto LABEL_46;
        if (*((_QWORD *)this + 13))
          goto LABEL_43;
        v25 = operator new[](52 * v11);
        *((_QWORD *)this + 13) = v25;
        memcpy(v25, v10 + 2, 52 * v11);
        v12 = (unsigned int *)((char *)v12 + v23);
        goto LABEL_9;
      case 3u:
        if (v6 < 8)
          goto LABEL_46;
        if (*((_QWORD *)this + 15))
          goto LABEL_43;
        v26 = operator new[](8 * v11);
        v27 = 0;
        *((_QWORD *)this + 15) = v26;
        while (1)
        {
          if (v6 < 8)
            goto LABEL_46;
          v28 = 8 * v12[1] + 8;
          *(_QWORD *)(*((_QWORD *)this + 15) + 8 * v27) = malloc(v28);
          v29 = *(void **)(*((_QWORD *)this + 15) + 8 * v27);
          if (!v29)
            break;
          memcpy(v29, v12, v28);
          v12 = (unsigned int *)((char *)v12 + v28);
          v6 -= v28;
          ++v27;
          v30 = v10[1];
          if (v27 >= v30)
          {
            *((_QWORD *)this + 16) = v30;
            goto LABEL_9;
          }
        }
        v5 = 2147483662;
        goto LABEL_46;
      case 4u:
        v24 = v6 >= 8 * v11;
        v6 -= 8 * v11;
        if (!v24)
          goto LABEL_46;
        if (!*((_QWORD *)this + 18))
        {
          v31 = operator new[](8 * v11);
          *((_QWORD *)this + 18) = v31;
          memcpy(v31, v10 + 2, 8 * v11);
          v12 += 2 * v11;
          *((_QWORD *)this + 19) = v11;
LABEL_9:
          v10 = v12;
          if (v6 <= 7)
            goto LABEL_37;
          continue;
        }
LABEL_43:
        v5 = 2147483656;
LABEL_46:
        RecipeUtil::uninit(this);
        return v5;
      default:
        v5 = 2147483669;
        goto LABEL_46;
    }
  }
}

void BBUEUR13FirmwareVersion::BBUEUR13FirmwareVersion(BBUEUR13FirmwareVersion *this)
{
  const void *v2;
  size_t v3;
  size_t v4;
  __int128 *p_dst;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  void *v9;
  __int128 __dst;
  unint64_t v11;

  v2 = (const void *)BBUEUR13FirmwareVersion::kFirmwarePrefix;
  v3 = strlen((const char *)BBUEUR13FirmwareVersion::kFirmwarePrefix);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_dst = (__int128 *)operator new(v6 + 1);
    *((_QWORD *)&__dst + 1) = v4;
    v11 = v7 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v11) = v3;
  p_dst = &__dst;
  if (v3)
LABEL_8:
    memmove(p_dst, v2, v4);
  *((_BYTE *)p_dst + v4) = 0;
  *(_QWORD *)this = off_24CE80C30;
  *((_DWORD *)this + 5) = -1;
  *(_OWORD *)((char *)this + 24) = 0u;
  v8 = (std::string *)((char *)this + 72);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (SHIBYTE(v11) < 0)
  {
    v9 = (void *)__dst;
    std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
    *((_DWORD *)this + 4) = 0;
    *((_QWORD *)this + 1) = 0;
    operator delete(v9);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = __dst;
    *((_QWORD *)this + 11) = v11;
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = off_24CE7EA58;
}

void sub_212A59DD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*(void **)(v1 + 48));
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v2);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void BBUEUR13FirmwareVersion::~BBUEUR13FirmwareVersion(void **this)
{
  *this = off_24CE80C30;
  if (*((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(this[3]);
      return;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    goto LABEL_7;
}

{
  *this = off_24CE80C30;
  if ((*((char *)this + 95) & 0x80000000) == 0)
  {
    if ((*((char *)this + 71) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_7:
    operator delete(this[6]);
    if ((*((char *)this + 47) & 0x80000000) == 0)
      goto LABEL_4;
LABEL_8:
    operator delete(this[3]);
    operator delete(this);
    return;
  }
  operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    goto LABEL_7;
LABEL_3:
  if (*((char *)this + 47) < 0)
    goto LABEL_8;
LABEL_4:
  operator delete(this);
}

unint64_t BBUEUR13FirmwareVersion::getFirmwarePrefix@<X0>(_QWORD *a1@<X8>)
{
  const void *v3;
  unint64_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const void *)BBUEUR13FirmwareVersion::kFirmwarePrefix;
  result = strlen((const char *)BBUEUR13FirmwareVersion::kFirmwarePrefix);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a1[1] = v5;
    a1[2] = v7 | 0x8000000000000000;
    *a1 = v8;
    a1 = v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a1 = 0;
      return result;
    }
  }
  result = (unint64_t)memmove(a1, v3, v5);
  *((_BYTE *)a1 + v5) = 0;
  return result;
}

void BBUpdaterController::BBUpdaterController(BBUpdaterController *this, const void *a2)
{
  char *v4;
  capabilities::updater *v5;
  unint64_t v6;
  capabilities::updater *v7;
  capabilities::updater *v8;
  capabilities::updater *v9;
  capabilities::updater *v10;
  capabilities::updater *v11;
  capabilities::updater *v12;
  capabilities::updater *v13;
  capabilities::updater *v14;
  capabilities::updater *v15;
  capabilities::updater *v16;
  _QWORD *v17;
  CFMutableDictionaryRef *v18;
  const __CFAllocator *v19;
  BBUFeedback *v20;
  BBUFeedback *v21;
  BBUPersonalizationParameters *v22;
  uint64_t v23;
  capabilities::radio *Mutable;
  const void *v25;
  uint64_t (*v26)(uint64_t);
  int v27;
  CFNumberRef v28;
  uint64_t (*v29)(uint64_t);
  const void *v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  BBUFeedback *v35;
  BBUFeedback *v36;
  uint64_t *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  int v44;
  void *exception;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  void *v78;
  void *v79;
  CFNumberRef cf;
  int valuePtr;

  *(_QWORD *)this = off_24CE7EAC8;
  *((_QWORD *)this + 1) = a2;
  v4 = (char *)operator new(0x1D0uLL);
  *((_QWORD *)v4 + 2) = this;
  *(_QWORD *)v4 = off_24CE7EF18;
  *((_DWORD *)v4 + 6) = 0;
  v5 = (capabilities::updater *)capabilities::updater::repersonalizeLimitCount((capabilities::updater *)v4);
  *((_DWORD *)v4 + 7) = (_DWORD)v5;
  *(_QWORD *)v4 = off_24CE7EDF0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *((_WORD *)v4 + 50) = 0;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *((_QWORD *)v4 + 57) = 0;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *((_QWORD *)v4 + 18) = off_24CE7EF48;
  *((_OWORD *)v4 + 11) = 0u;
  *((_OWORD *)v4 + 12) = 0u;
  *((_OWORD *)v4 + 13) = 0u;
  *(_QWORD *)(v4 + 236) = 0;
  *(_QWORD *)(v4 + 252) = 0;
  *(_QWORD *)(v4 + 244) = 0;
  *((_QWORD *)v4 + 33) = 0;
  *((_DWORD *)v4 + 68) = 0;
  *((_QWORD *)v4 + 37) = 0;
  *((_QWORD *)v4 + 36) = 0;
  *((_QWORD *)v4 + 35) = off_24CE7F018;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 372) = 0u;
  *(_OWORD *)(v4 + 388) = 0u;
  *(_OWORD *)(v4 + 404) = 0u;
  v6 = capabilities::updater::EUICCAttemptCount(v5);
  if (HIDWORD(v6))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 11, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0xF7u, (ctu::LogMessageBuffer *)"Assertion failure(capabilities::updater::EUICCAttemptCount() <= std::numeric_limits<unsigned>::max() && \"capabilities::updater::EUICCAttemptCount() returns too large a value\")", v46, v47, v48, v77);
  }
  v7 = (capabilities::updater *)capabilities::updater::EUICCAttemptCount((capabilities::updater *)v6);
  *((_DWORD *)v4 + 95) = (_DWORD)v7;
  *(_QWORD *)(v4 + 388) = 0;
  v8 = (capabilities::updater *)capabilities::updater::intermittentFailureRetryCount(v7);
  *((_DWORD *)v4 + 98) = (_DWORD)v8;
  v9 = (capabilities::updater *)capabilities::updater::intermittentFailureRetryCount(v8);
  v10 = (capabilities::updater *)capabilities::updater::intermittentFailureRetryCount(v9);
  *((_DWORD *)v4 + 98) = (_DWORD)v10;
  *((_QWORD *)v4 + 50) = 0;
  v11 = (capabilities::updater *)capabilities::updater::intermittentFailureRetryCount(v10);
  *((_DWORD *)v4 + 101) = (_DWORD)v11;
  v12 = (capabilities::updater *)capabilities::updater::intermittentFailureRetryCount(v11);
  *((_DWORD *)v4 + 101) = (_DWORD)v12;
  v13 = (capabilities::updater *)capabilities::updater::intermittentFailureRetryCount(v12);
  v14 = (capabilities::updater *)capabilities::updater::intermittentFailureRetryCount(v13);
  *((_DWORD *)v4 + 101) = (_DWORD)v14;
  *(_QWORD *)(v4 + 412) = 0;
  v15 = (capabilities::updater *)capabilities::updater::loaderConnectAttempts(v14);
  *((_DWORD *)v4 + 104) = (_DWORD)v15;
  *((_DWORD *)v4 + 76) = 0;
  *((_DWORD *)v4 + 91) = 0;
  *(_QWORD *)(v4 + 428) = 0;
  v16 = (capabilities::updater *)capabilities::updater::manifestCheckRetryCount(v15);
  *((_DWORD *)v4 + 108) = (_DWORD)v16;
  *((_QWORD *)v4 + 55) = 0;
  *((_DWORD *)v4 + 111) = capabilities::updater::initialStagePingAttemptCount(v16);
  *((_QWORD *)v4 + 56) = 0;
  *((_DWORD *)v4 + 114) = 0;
  *((_QWORD *)v4 + 4) = 0x700000000;
  *(_QWORD *)(v4 + 92) = 0x700000000;
  v4[233] = 1;
  v4[369] = 1;
  *((_QWORD *)this + 2) = v4;
  v17 = operator new(0x20uLL);
  *v17 = off_24CE7F0E8;
  v17[1] = 0;
  v17[2] = 0;
  v17[3] = v4;
  *((_QWORD *)this + 4) = 0;
  v18 = (CFMutableDictionaryRef *)((char *)this + 32);
  *((_QWORD *)this + 3) = v17;
  *((_QWORD *)this + 5) = 0;
  v19 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  *((_QWORD *)this + 6) = TelephonyBasebandCreateController();
  v20 = (BBUFeedback *)operator new(0x128uLL);
  BBUFeedback::BBUFeedback(v20, a2);
  *((_DWORD *)v20 + 46) = 1;
  *((_QWORD *)v20 + 35) = 0;
  *((_QWORD *)v20 + 36) = 0;
  *((_OWORD *)v20 + 12) = 0u;
  *((_OWORD *)v20 + 13) = 0u;
  *((_OWORD *)v20 + 14) = 0u;
  *((_WORD *)v20 + 120) = 0;
  *(_QWORD *)v20 = &unk_24CE80438;
  *((_QWORD *)this + 7) = v20;
  *((_QWORD *)this + 8) = BBUCommunication::create(*((capabilities::updater **)this + 6));
  v22 = (BBUPersonalizationParameters *)BBUInitializer::create(*((BBUInitializer **)this + 7), v21);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = v22;
  *((_QWORD *)this + 11) = 0;
  BBUPersonalizationParameters::create(v22);
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 12) = v23;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_WORD *)this + 120) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_BYTE *)this + 242) = 0;
  *((_DWORD *)this + 85) = 0;
  *((_BYTE *)this + 344) = 0;
  *((_BYTE *)this + 256) = 0;
  *(_OWORD *)((char *)this + 260) = 0u;
  *(_OWORD *)((char *)this + 276) = 0u;
  *(_OWORD *)((char *)this + 292) = 0u;
  *(_OWORD *)((char *)this + 308) = 0u;
  *(_OWORD *)((char *)this + 321) = 0u;
  *((_QWORD *)this + 44) = 0x900000000;
  Mutable = CFDictionaryCreateMutable(v19, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v25 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = Mutable;
  if (v25)
  {
    CFRelease(v25);
    Mutable = *v18;
  }
  v26 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  if (!Mutable)
    v26 = 0;
  if (!v26)
  {
    v49 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v49, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x4Fu, (ctu::LogMessageBuffer *)"Assertion failure(fOutput)", v50, v51, v52, (char)v49);
  }
  valuePtr = -1431655766;
  if (capabilities::radio::vendor(Mutable) == 2)
    v27 = 2;
  else
    v27 = 3;
  valuePtr = v27;
  v28 = CFNumberCreate(v19, kCFNumberSInt32Type, &valuePtr);
  cf = v28;
  v29 = ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get;
  if (!v28)
    v29 = 0;
  if (!v29)
  {
    v53 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v53, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x67u, (ctu::LogMessageBuffer *)"Assertion failure(v)", v54, v55, v56, (char)v53);
    goto LABEL_43;
  }
  CFDictionarySetValue(*v18, CFSTR("VendorID"), v28);
  v30 = (const void *)*MEMORY[0x24BDBD268];
  CFDictionarySetValue(*v18, CFSTR("done"), (const void *)*MEMORY[0x24BDBD268]);
  CFDictionarySetValue(*v18, CFSTR("attemptedToFuse"), v30);
  if (*((_QWORD *)this + 6))
    v31 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
  else
    v31 = 0;
  if (!v31)
  {
    v57 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v57, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x6Eu, (ctu::LogMessageBuffer *)"Assertion failure(fBasebandController)", v58, v59, v60, (char)v57);
    goto LABEL_43;
  }
  v32 = *((_QWORD *)this + 7);
  if (!v32)
  {
    v61 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v61, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x6Fu, (ctu::LogMessageBuffer *)"Assertion failure(fFeedback)", v62, v63, v64, (char)v61);
    goto LABEL_43;
  }
  if (!*((_QWORD *)this + 9))
  {
    v65 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v65, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x70u, (ctu::LogMessageBuffer *)"Assertion failure(fInitializer)", v66, v67, v68, (char)v65);
    goto LABEL_43;
  }
  if (!*((_QWORD *)this + 12))
  {
    v69 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v69, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x71u, (ctu::LogMessageBuffer *)"Assertion failure(fPersonalizationParameters)", v70, v71, v72, (char)v69);
    goto LABEL_43;
  }
  if (!*((_QWORD *)this + 2))
  {
    v73 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v73, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x72u, (ctu::LogMessageBuffer *)"Assertion failure(fFSM)", v74, v75, v76, (char)v73);
LABEL_43:
  }
  *((_QWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  v34 = *(_QWORD **)(v32 + 16);
  v33 = v32 + 16;
  std::__tree<std::__value_type<BBUFeedback::ProgressBarStages,double>,std::__map_value_compare<BBUFeedback::ProgressBarStages,std::__value_type<BBUFeedback::ProgressBarStages,double>,std::less<BBUFeedback::ProgressBarStages>,true>,std::allocator<std::__value_type<BBUFeedback::ProgressBarStages,double>>>::destroy(v33 - 8, v34);
  *(_QWORD *)(v33 - 8) = v33;
  *(_QWORD *)v33 = 0;
  *(_QWORD *)(v33 + 8) = 0;
  *(_DWORD *)(v33 + 24) = 0;
  *(_QWORD *)(v33 + 32) = 0;
  BBULoader::addProgressBarTimes(*((uint64_t ***)this + 7), v35);
  v37 = BBUProgrammer::addProgressBarTimes(*((uint64_t ***)this + 7), v36);
  v38 = *((_QWORD *)this + 2);
  v39 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(p_shared_owners);
    while (__stxr(v41 + 1, p_shared_owners));
    *(_QWORD *)(v38 + 32) = 0x700000000;
    ++*(_DWORD *)(v38 + 452);
    ++*(_DWORD *)(v38 + 124);
    v42 = (unint64_t *)&v39->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  else
  {
    *(_QWORD *)(v38 + 32) = 0x700000000;
    ++*(_DWORD *)(v38 + 452);
    ++*(_DWORD *)(v38 + 124);
  }
  capabilities::diag::supportedInterfaces((capabilities::diag *)v37);
  if (capabilities::diag::operator&())
    v44 = 8;
  else
    v44 = 4;
  *((_DWORD *)this + 89) = v44;
  *((_BYTE *)this + 355) = 0;
  if (cf)
    CFRelease(cf);
}

void sub_212A5A6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, const void **a10, const void *a11)
{
  _QWORD *v11;
  uint64_t v12;
  const void **v13;
  const void **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  __cxa_free_exception(a9);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(&a11);
  BBUpdaterController::DebugOptions::~DebugOptions(v19);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v17);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v16);
  v21 = v11[12];
  v11[12] = 0;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = v11[11];
    v11[11] = 0;
    if (!v22)
    {
LABEL_3:
      v23 = *v15;
      *v15 = 0;
      if (!v23)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v22 = v11[11];
    v11[11] = 0;
    if (!v22)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *v15;
  *v15 = 0;
  if (!v23)
  {
LABEL_4:
    v24 = v11[9];
    v11[9] = 0;
    if (!v24)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v11[9];
  v11[9] = 0;
  if (!v24)
  {
LABEL_5:
    v25 = v11[8];
    v11[8] = 0;
    if (!v25)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
  v25 = v11[8];
  v11[8] = 0;
  if (!v25)
  {
LABEL_6:
    v26 = v11[7];
    v11[7] = 0;
    if (!v26)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_13:
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = v11[7];
  v11[7] = 0;
  if (!v26)
  {
LABEL_8:
    ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(a10);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v14);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v13);
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v12);
    _Unwind_Resume(a1);
  }
LABEL_7:
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  goto LABEL_8;
}

uint64_t ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

const void **ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void BBUpdaterController::DebugOptions::~DebugOptions(void **this)
{
  if (*((char *)this + 87) < 0)
  {
    operator delete(this[8]);
    if ((*((char *)this + 63) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 39) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(this[2]);
      return;
    }
  }
  else if ((*((char *)this + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    goto LABEL_7;
}

const void **ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void BBUpdaterController::~BBUpdaterController(BBUpdaterController *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  const void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;

  *(_QWORD *)this = off_24CE7EAC8;
  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), (char *)this + 152);
  if (*((char *)this + 335) < 0)
  {
    operator delete(*((void **)this + 39));
    if ((*((char *)this + 311) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 287) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*((void **)this + 33));
      v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
      if (!v2)
        goto LABEL_13;
      goto LABEL_9;
    }
  }
  else if ((*((char *)this + 311) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*((void **)this + 36));
  if (*((char *)this + 287) < 0)
    goto LABEL_8;
LABEL_4:
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v2)
    goto LABEL_13;
LABEL_9:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_13:
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  v15 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = (const void *)*((_QWORD *)this + 6);
  if (v17)
    CFRelease(v17);
  v18 = (const void *)*((_QWORD *)this + 5);
  if (v18)
    CFRelease(v18);
  v19 = (const void *)*((_QWORD *)this + 4);
  if (v19)
    CFRelease(v19);
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

{
  void *v1;

  BBUpdaterController::~BBUpdaterController(this);
  operator delete(v1);
}

uint64_t std::map<__CFString const*,BBUpdaterController::CmdInfo,BBUpdaterController::CFStringCompareFunctor,std::allocator<std::pair<__CFString const* const,BBUpdaterController::CmdInfo>>>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,BBUpdaterController::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t BBUpdaterController::setOptions(uint64_t a1, int a2, const __CFDictionary *cf)
{
  const __CFDictionary *v3;
  const void *v5;
  _QWORD *v6;
  BBUPartitionManager *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  int v16;
  void **v17;
  void **v18;
  size_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  BBUPartitionManager *v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  int v32;
  void **v33;
  void **v34;
  size_t v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  BBUPartitionManager *v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  int v48;
  void **v49;
  void **v50;
  size_t v51;
  unint64_t *v52;
  unint64_t v53;
  const __CFDictionary *v54;
  uint64_t (*v55)(uint64_t);
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  CFTypeID v63;
  size_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  char v70;
  _DWORD *v71;
  const char **v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  const char *v79;
  int v80;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  char v87;
  void *v88[3];
  _QWORD v89[2];
  char *__endptr;
  void *__dst[3];
  void *value;
  void *__p[130];

  __p[128] = *(void **)MEMORY[0x24BDAC8D0];
  if (cf)
  {
    v3 = cf;
    CFRetain(cf);
    v5 = *(const void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v3;
    if (v5)
    {
      CFRelease(v5);
      v3 = *(const __CFDictionary **)(a1 + 40);
    }
    v89[0] = 0xAAAAAAAAAAAAAAAALL;
    v89[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v89, v3);
    memset(v88, 170, sizeof(v88));
    HIBYTE(__p[2]) = 0;
    LOBYTE(__p[0]) = 0;
    ctu::cf::map_adapter::getString();
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
    v6 = off_253D31E68;
    if (!off_253D31E68)
    {
      v7 = (BBUPartitionManager *)operator new(0x18uLL);
      BBUPartitionManager::BBUPartitionManager(v7);
      v8 = operator new(0x20uLL);
      *v8 = &unk_24CE85728;
      v8[1] = 0;
      v8[2] = 0;
      v8[3] = v7;
      v9 = (std::__shared_weak_count *)off_253D31E70;
      off_253D31E68 = v7;
      off_253D31E70 = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v6 = off_253D31E68;
    }
    v12 = (std::__shared_weak_count *)off_253D31E70;
    __p[0] = v6;
    __p[1] = off_253D31E70;
    if (off_253D31E70)
    {
      v13 = (unint64_t *)((char *)off_253D31E70 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
    v15 = (uint64_t *)v6[1];
    if (!v15)
LABEL_22:
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    while (1)
    {
      while (1)
      {
        v16 = *((_DWORD *)v15 + 8);
        if (v16 < 1)
          break;
        v15 = (uint64_t *)*v15;
        if (!v15)
          goto LABEL_22;
      }
      if ((v16 & 0x80000000) == 0)
        break;
      v15 = (uint64_t *)v15[1];
      if (!v15)
        goto LABEL_22;
    }
    v17 = (void **)(v15 + 5);
    if (v15 + 5 != (uint64_t *)v88)
    {
      if (*((char *)v15 + 63) < 0)
      {
        if (SHIBYTE(v88[2]) >= 0)
          v18 = v88;
        else
          v18 = (void **)v88[0];
        if (SHIBYTE(v88[2]) >= 0)
          v19 = HIBYTE(v88[2]);
        else
          v19 = (size_t)v88[1];
        std::string::__assign_no_alias<false>(v17, v18, v19);
      }
      else if ((HIBYTE(v88[2]) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v17, v88[0], (size_t)v88[1]);
      }
      else
      {
        *(_OWORD *)v17 = *(_OWORD *)v88;
        v15[7] = (uint64_t)v88[2];
      }
    }
    if (v12)
    {
      v20 = (unint64_t *)&v12->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    HIBYTE(__dst[2]) = 0;
    LOBYTE(__dst[0]) = 0;
    ctu::cf::map_adapter::getString();
    if (SHIBYTE(v88[2]) < 0)
      operator delete(v88[0]);
    *(_OWORD *)v88 = *(_OWORD *)__p;
    v88[2] = __p[2];
    HIBYTE(__p[2]) = 0;
    LOBYTE(__p[0]) = 0;
    if (SHIBYTE(__dst[2]) < 0)
      operator delete(__dst[0]);
    pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
    v22 = off_253D31E68;
    if (!off_253D31E68)
    {
      v23 = (BBUPartitionManager *)operator new(0x18uLL);
      BBUPartitionManager::BBUPartitionManager(v23);
      v24 = operator new(0x20uLL);
      *v24 = &unk_24CE85728;
      v24[1] = 0;
      v24[2] = 0;
      v24[3] = v23;
      v25 = (std::__shared_weak_count *)off_253D31E70;
      off_253D31E68 = v23;
      off_253D31E70 = v24;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v22 = off_253D31E68;
    }
    v28 = (std::__shared_weak_count *)off_253D31E70;
    __p[0] = v22;
    __p[1] = off_253D31E70;
    if (off_253D31E70)
    {
      v29 = (unint64_t *)((char *)off_253D31E70 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
    v31 = (uint64_t *)v22[1];
    if (!v31)
LABEL_60:
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    while (1)
    {
      while (1)
      {
        v32 = *((_DWORD *)v31 + 8);
        if (v32 < 2)
          break;
        v31 = (uint64_t *)*v31;
        if (!v31)
          goto LABEL_60;
      }
      if (v32 == 1)
        break;
      v31 = (uint64_t *)v31[1];
      if (!v31)
        goto LABEL_60;
    }
    v33 = (void **)(v31 + 5);
    if (v31 + 5 != (uint64_t *)v88)
    {
      if (*((char *)v31 + 63) < 0)
      {
        if (SHIBYTE(v88[2]) >= 0)
          v34 = v88;
        else
          v34 = (void **)v88[0];
        if (SHIBYTE(v88[2]) >= 0)
          v35 = HIBYTE(v88[2]);
        else
          v35 = (size_t)v88[1];
        std::string::__assign_no_alias<false>(v33, v34, v35);
      }
      else if ((HIBYTE(v88[2]) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v33, v88[0], (size_t)v88[1]);
      }
      else
      {
        *(_OWORD *)v33 = *(_OWORD *)v88;
        v31[7] = (uint64_t)v88[2];
      }
    }
    if (v28)
    {
      v36 = (unint64_t *)&v28->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    __dst[0] = operator new(0x28uLL);
    *(_OWORD *)&__dst[1] = xmmword_212B50720;
    strcpy((char *)__dst[0], "/private/var/wireless/baseband_data");
    ctu::cf::map_adapter::getString();
    if (SHIBYTE(v88[2]) < 0)
      operator delete(v88[0]);
    *(_OWORD *)v88 = *(_OWORD *)__p;
    v88[2] = __p[2];
    HIBYTE(__p[2]) = 0;
    LOBYTE(__p[0]) = 0;
    if (SHIBYTE(__dst[2]) < 0)
      operator delete(__dst[0]);
    pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
    v38 = off_253D31E68;
    if (!off_253D31E68)
    {
      v39 = (BBUPartitionManager *)operator new(0x18uLL);
      BBUPartitionManager::BBUPartitionManager(v39);
      v40 = operator new(0x20uLL);
      *v40 = &unk_24CE85728;
      v40[1] = 0;
      v40[2] = 0;
      v40[3] = v39;
      v41 = (std::__shared_weak_count *)off_253D31E70;
      off_253D31E68 = v39;
      off_253D31E70 = v40;
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v38 = off_253D31E68;
    }
    v44 = (std::__shared_weak_count *)off_253D31E70;
    __p[0] = v38;
    __p[1] = off_253D31E70;
    if (off_253D31E70)
    {
      v45 = (unint64_t *)((char *)off_253D31E70 + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
    v47 = (uint64_t *)v38[1];
    if (!v47)
LABEL_98:
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    while (1)
    {
      while (1)
      {
        v48 = *((_DWORD *)v47 + 8);
        if (v48 < 3)
          break;
        v47 = (uint64_t *)*v47;
        if (!v47)
          goto LABEL_98;
      }
      if (v48 == 2)
        break;
      v47 = (uint64_t *)v47[1];
      if (!v47)
        goto LABEL_98;
    }
    v49 = (void **)(v47 + 5);
    if (v47 + 5 != (uint64_t *)v88)
    {
      if (*((char *)v47 + 63) < 0)
      {
        if (SHIBYTE(v88[2]) >= 0)
          v50 = v88;
        else
          v50 = (void **)v88[0];
        if (SHIBYTE(v88[2]) >= 0)
          v51 = HIBYTE(v88[2]);
        else
          v51 = (size_t)v88[1];
        std::string::__assign_no_alias<false>(v49, v50, v51);
      }
      else if ((HIBYTE(v88[2]) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v49, v88[0], (size_t)v88[1]);
      }
      else
      {
        *(_OWORD *)v49 = *(_OWORD *)v88;
        v47[7] = (uint64_t)v88[2];
      }
    }
    if (v44)
    {
      v52 = (unint64_t *)&v44->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v54 = *(const __CFDictionary **)(a1 + 40);
    v55 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    if (!v54)
      v55 = 0;
    v56 = &qword_253D37000;
    v57 = &qword_253D37000;
    v58 = &qword_253D37000;
    v59 = (_BYTE *)&unk_254B60000;
    if (!v55)
    {
LABEL_175:
      if (v56[503] == -1)
      {
        if (v57[504] == -1)
          goto LABEL_177;
      }
      else
      {
        dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
        if (v57[504] == -1)
        {
LABEL_177:
          if (*((unsigned __int8 *)v58 + 4056) | v59[1505])
            goto LABEL_183;
          goto LABEL_178;
        }
      }
      dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
      if (*((unsigned __int8 *)v58 + 4056) | v59[1505])
        goto LABEL_183;
LABEL_178:
      if (*(_BYTE *)(a1 + 344))
      {
        sDelegate = (uint64_t (*)(const char *, const char *, char *))BBURemoteFSPrintDelegate;
        if (SHIBYTE(v88[2]) < 0)
          goto LABEL_188;
        goto LABEL_189;
      }
LABEL_183:
      BBULogRegisterDelegates();
      __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 64) + 56))(__p);
      v82 = *(void **)(a1 + 120);
      v83 = *(std::__shared_weak_count **)(a1 + 128);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)__p;
      __p[0] = v82;
      __p[1] = v83;
      if (v83)
      {
        v84 = (unint64_t *)&v83->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
          if ((SHIBYTE(v88[2]) & 0x80000000) == 0)
            goto LABEL_189;
          goto LABEL_188;
        }
      }
      if (SHIBYTE(v88[2]) < 0)
LABEL_188:
        operator delete(v88[0]);
LABEL_189:
      MEMORY[0x212BF9A70](v89);
      return 1;
    }
    value = (void *)0xAAAAAAAAAAAAAAAALL;
    if (!CFDictionaryGetValueIfPresent(v54, CFSTR("DebugArgs"), (const void **)&value)
      || (v63 = CFGetTypeID(value), v63 != CFStringGetTypeID()))
    {
LABEL_168:
      if (v56[503] == -1)
      {
        if (v57[504] == -1)
          goto LABEL_170;
      }
      else
      {
        dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
        if (v57[504] == -1)
        {
LABEL_170:
          if (!(*((unsigned __int8 *)v58 + 4056) | v59[1505]))
            goto LABEL_175;
LABEL_171:
          if (*(_QWORD *)(a1 + 120))
          {
            if (gBBULogMaskGet(void)::once != -1)
              dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            _BBULog(19, 0xFFFFFFFFLL, "BBUpdaterController", "", "enabling kernel IPC log\n", v60, v61, v62, v87);
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 32))(*(_QWORD *)(a1 + 120));
          }
          goto LABEL_175;
        }
      }
      dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
      if (!(*((unsigned __int8 *)v58 + 4056) | v59[1505]))
        goto LABEL_175;
      goto LABEL_171;
    }
    memset(__dst, 170, sizeof(__dst));
    memset(__p, 170, 0x400uLL);
    CFStringGetCString((CFStringRef)value, (char *)__p, 1024, 0x8000100u);
    v64 = strlen((const char *)__p);
    if (v64 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v65 = (void *)v64;
    if (v64 >= 0x17)
    {
      v67 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v64 | 7) != 0x17)
        v67 = v64 | 7;
      v68 = v67 + 1;
      v66 = operator new(v67 + 1);
      __dst[1] = v65;
      __dst[2] = (void *)(v68 | 0x8000000000000000);
      __dst[0] = v66;
    }
    else
    {
      HIBYTE(__dst[2]) = v64;
      v66 = __dst;
      if (!v64)
        goto LABEL_129;
    }
    memcpy(v66, __p, (size_t)v65);
LABEL_129:
    *((_BYTE *)v65 + (_QWORD)v66) = 0;
    v69 = (void *)HIBYTE(__dst[2]);
    v70 = HIBYTE(__dst[2]);
    if (SHIBYTE(__dst[2]) < 0)
      v69 = __dst[1];
    if (v69)
    {
      memset(__p, 0, 24);
      BBUStringToArgv(__dst, __p);
      v71 = (_DWORD *)MEMORY[0x24BDAF288];
      *MEMORY[0x24BDAF278] = 1;
      *v71 = 1;
      v72 = (const char **)MEMORY[0x24BDAF270];
      while (1)
      {
        while (1)
        {
          do
          {
            while (1)
            {
              while (1)
              {
                v73 = getopt_long(((unint64_t)((char *)__p[1] - (char *)__p[0]) >> 3) - 1, (char *const *)__p[0], "hl:C:v:x:t:r:p:e:c:w:i:s:fUFD:nHSqPVB:N", (const option *)&BBUpdaterController::parseDebugArgs(void)::long_options, 0);
                if ((int)v73 > 117)
                  break;
                switch((_DWORD)v73)
                {
                  case 0x42:
                    v79 = *v72;
                    if (!strncmp("none", *v72, 4uLL))
                    {
                      *(_DWORD *)(a1 + 340) = 0;
                    }
                    else if (!strncmp("feedback", v79, 8uLL))
                    {
                      *(_DWORD *)(a1 + 340) = 1;
                    }
                    else
                    {
                      *(_DWORD *)(a1 + 340) = 2 * (strncmp("oslog", v79, 5uLL) == 0);
                    }
                    break;
                  case 0x6C:
                    __endptr = (char *)0xAAAAAAAAAAAAAAAALL;
                    v74 = strtoul(*v72, &__endptr, 0);
                    if (!*__endptr)
                    {
                      v75 = v74;
                      sLogInternalMask = v74;
                      if (gBBULogMaskGet(void)::once != -1)
                        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
                      *(_QWORD *)gBBULogMaskGet(void)::sBBULogMask = v75;
                    }
                    break;
                  case 0xFFFFFFFF:
                    if (__p[0])
                    {
                      __p[1] = __p[0];
                      operator delete(__p[0]);
                    }
                    v70 = HIBYTE(__dst[2]);
                    v58 = &qword_253D37000;
                    v59 = (unsigned __int8 *)&unk_254B60000;
                    v57 = &qword_253D37000;
                    v56 = &qword_253D37000;
                    goto LABEL_166;
                  default:
LABEL_134:
                    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 56), "%s: Ignoring unknown/GM'd out option %c", "parseDebugArgs", v73);
                    break;
                }
              }
              if ((_DWORD)v73 != 118)
                break;
              __endptr = (char *)0xAAAAAAAAAAAAAAAALL;
              v80 = strtoul(*v72, &__endptr, 0);
              if (!*__endptr)
                gBBULogVerbosity = v80;
            }
            if ((_DWORD)v73 != 120)
              goto LABEL_134;
            __endptr = (char *)0xAAAAAAAAAAAAAAAALL;
            v76 = strtoul(*v72, &__endptr, 0);
          }
          while (*__endptr);
          v77 = v76;
          if (gBBULogMaskGet(void)::once != -1)
            break;
          if (v76 >= 7 && (*(_QWORD *)gBBULogMaskGet(void)::sBBULogMask & 0x40) != 0)
            goto LABEL_150;
        }
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if (v77 >= 7 && (*(_QWORD *)gBBULogMaskGet(void)::sBBULogMask & 0x40) != 0)
LABEL_150:
          TelephonyUtilDebugSetFlags();
      }
    }
LABEL_166:
    if (v70 < 0)
      operator delete(__dst[0]);
    goto LABEL_168;
  }
  return 1;
}

void sub_212A5B9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a25 < 0)
    operator delete(a20);
  if (a16 < 0)
    operator delete(a11);
  MEMORY[0x212BF9A70](&a17);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t BBUpdaterController::execCommand(uint64_t a1, int a2, CFStringRef theString2, CFDictionaryRef *a4, CFTypeRef *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t *v14;
  CFComparisonResult v15;
  uint64_t *v16;
  BBUFeedback *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v26;
  unint64_t v27;
  unint64_t *p_shared_weak_owners;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::string::size_type v40;
  NSObject *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  size_t v50;
  uint64_t v51;
  size_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  int v57;
  __int16 v58;
  size_t v60;
  uint64_t v61;
  std::__shared_weak_count_vtbl *v62;
  NSObject *v63;
  NSObject *v64;
  NSObject *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  std::__shared_weak_count *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  NSObject *v82;
  int v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  std::__shared_weak_count_vtbl *v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  NSObject *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  std::string::size_type v114;
  void *v116[2];
  uint64_t v117;
  _QWORD v118[2];
  std::string v119;
  void *v120[2];
  char v121;
  void *v122[2];
  char v123;
  CFTypeRef cf;
  std::string *p_p;
  std::string *v126;
  std::string **v127;
  uint64_t v128;
  int v129;
  std::string __p;
  void *v131;
  _QWORD *v132;
  CFTypeRef *p_cf;
  _BYTE block[24];
  void *v135;
  uint64_t v136;
  std::string **p_p_p;

  cf = 0;
  if (!theString2)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_141;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_141;
    }
    if (gBBULogVerbosity >= 6)
      _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_141:
    std::string::basic_string[abi:ne180100]<0>(v122, "null command");
    BBUpdaterCommon::BBUCreateCFError((CFErrorRef *)&cf, (uint64_t)v122, 2u, 0, v101, v102, v103, v104);
    if (v123 < 0)
    {
      operator delete(v122[0]);
      v95 = 0;
      if (!a5)
        return v95;
      goto LABEL_163;
    }
    goto LABEL_159;
  }
  if (!a4)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_148;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_148;
    }
    if (gBBULogVerbosity >= 6)
      _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_148:
    std::string::basic_string[abi:ne180100]<0>(v120, "null output");
    BBUpdaterCommon::BBUCreateCFError((CFErrorRef *)&cf, (uint64_t)v120, 2u, 0, v105, v106, v107, v108);
    if (v121 < 0)
    {
      operator delete(v120[0]);
      v95 = 0;
      if (!a5)
        return v95;
      goto LABEL_163;
    }
    goto LABEL_159;
  }
  v12 = atomic_load((unsigned __int8 *)&_MergedGlobals_1);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_1))
  {
    qword_253D36788 = 0;
    qword_253D36780 = 0;
    qword_253D36778 = (uint64_t)&qword_253D36780;
    __cxa_atexit((void (*)(void *))std::map<__CFString const*,BBUpdaterController::CmdInfo,BBUpdaterController::CFStringCompareFunctor,std::allocator<std::pair<__CFString const* const,BBUpdaterController::CmdInfo>>>::~map[abi:ne180100], &qword_253D36778, &dword_212A4D000);
    __cxa_guard_release(&_MergedGlobals_1);
  }
  if (qword_253D366C8 == -1)
  {
    v13 = qword_253D36780;
    if (!qword_253D36780)
      goto LABEL_152;
  }
  else
  {
    dispatch_once(&qword_253D366C8, &__block_literal_global);
    v13 = qword_253D36780;
    if (!qword_253D36780)
      goto LABEL_152;
  }
  v14 = &qword_253D36780;
  do
  {
    v15 = CFStringCompare(*(CFStringRef *)(v13 + 32), theString2, 0);
    v16 = (uint64_t *)(v13 + 8);
    if (v15 >= kCFCompareEqualTo)
    {
      v16 = (uint64_t *)v13;
      v14 = (uint64_t *)v13;
    }
    v13 = *v16;
  }
  while (*v16);
  if (v14 == &qword_253D36780 || CFStringCompare(theString2, (CFStringRef)v14[4], 0) < 0)
  {
LABEL_152:
    memset(block, 0, sizeof(block));
    ctu::cf::assign();
    strcpy((char *)&__p, "Unrecognized command");
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 21;
    *(_WORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 5) = 0;
    v113 = (void *)__p.__r_.__value_.__r.__words[0];
    v114 = __p.__r_.__value_.__r.__words[2];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      std::string::__init_copy_ctor_external(&v119, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v119 = __p;
    BBUpdaterCommon::BBUCreateCFError((CFErrorRef *)&cf, (uint64_t)&v119, 2u, 0, v109, v110, v111, v112);
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v119.__r_.__value_.__l.__data_);
      if ((v114 & 0x8000000000000000) != 0)
        goto LABEL_162;
    }
    else if ((v114 & 0x8000000000000000) != 0)
    {
LABEL_162:
      operator delete(v113);
      v95 = 0;
      if (!a5)
        return v95;
      goto LABEL_163;
    }
LABEL_159:
    v95 = 0;
    goto LABEL_160;
  }
  v17 = *(BBUFeedback **)(a1 + 56);
  memset(block, 0, sizeof(block));
  ctu::cf::assign();
  memset(&__p, 0, sizeof(__p));
  BBUFeedback::handleBeginPhase(v17, "Command: %s", (const char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  (*(void (**)(void))(v14[6] + 16))();
  v18 = *(_QWORD *)(a1 + 56);
  pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  v19 = qword_253D31DC8;
  if (!qword_253D31DC8)
  {
    v20 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
    v21 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
    v22 = dispatch_queue_create("BBUError", v21);
    v20->~__shared_weak_count = 0;
    v20->~__shared_weak_count_0 = 0;
    v20->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v22;
    if (v22)
    {
      v23 = v22;
      dispatch_retain(v22);
      v20->__get_deleter = 0;
      dispatch_release(v23);
    }
    else
    {
      v20->__get_deleter = 0;
    }
    v20->__on_zero_shared_weak = 0;
    v20[1].~__shared_weak_count = 0;
    v20[1].~__shared_weak_count_0 = 0;
    v24 = (std::__shared_weak_count *)operator new(0x20uLL);
    v24->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    v24->__vftable = (std::__shared_weak_count_vtbl *)off_24CE7F548;
    v24->__shared_weak_owners_ = 0;
    v24[1].__vftable = v20;
    v26 = (std::__shared_weak_count *)v20->~__shared_weak_count_0;
    if (v26)
    {
      if (v26->__shared_owners_ != -1)
      {
LABEL_31:
        v34 = (std::__shared_weak_count *)off_253D31DD0;
        qword_253D31DC8 = (uint64_t)v20;
        off_253D31DD0 = v24;
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        v19 = qword_253D31DC8;
        goto LABEL_37;
      }
      do
        v27 = __ldxr(p_shared_owners);
      while (__stxr(v27 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v24->__shared_weak_owners_;
      do
        v29 = __ldxr(p_shared_weak_owners);
      while (__stxr(v29 + 1, p_shared_weak_owners));
      v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
      v20->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
      std::__shared_weak_count::__release_weak(v26);
    }
    else
    {
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
      v31 = (unint64_t *)&v24->__shared_weak_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
      v20->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
    }
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_31;
  }
LABEL_37:
  v37 = (std::__shared_weak_count *)off_253D31DD0;
  v118[0] = v19;
  v118[1] = off_253D31DD0;
  if (off_253D31DD0)
  {
    v38 = (unint64_t *)((char *)off_253D31DD0 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  v126 = 0;
  v127 = &v126;
  v128 = 0x2000000000;
  v40 = MEMORY[0x24BDAC760];
  v129 = 0;
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
  __p.__r_.__value_.__l.__size_ = 1107296256;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8BBUError12getErrorCodeEv_block_invoke;
  v131 = &__block_descriptor_tmp_4_0;
  v132 = &v126;
  p_cf = (CFTypeRef *)v19;
  p_p = &__p;
  *(_QWORD *)block = MEMORY[0x24BDAC760];
  *(_QWORD *)&block[8] = 0x40000000;
  *(_QWORD *)&block[16] = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v135 = &__block_descriptor_tmp_10;
  v136 = v19;
  p_p_p = &p_p;
  v41 = *(NSObject **)(v19 + 16);
  if (*(_QWORD *)(v19 + 24))
    dispatch_async_and_wait(v41, block);
  else
    dispatch_sync(v41, block);
  v42 = *((unsigned int *)v127 + 6);
  _Block_object_dispose(&v126, 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v42);
  if (!v37)
    goto LABEL_47;
  v43 = (unint64_t *)&v37->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (v44)
  {
LABEL_47:
    v45 = *(unsigned __int8 *)(a1 + 335);
    if ((*(char *)(a1 + 335) & 0x80000000) == 0)
      goto LABEL_48;
LABEL_51:
    if (!*(_QWORD *)(a1 + 320))
      goto LABEL_74;
    goto LABEL_52;
  }
  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
  std::__shared_weak_count::__release_weak(v37);
  v45 = *(unsigned __int8 *)(a1 + 335);
  if (*(char *)(a1 + 335) < 0)
    goto LABEL_51;
LABEL_48:
  if (!v45)
    goto LABEL_74;
LABEL_52:
  v46 = (char *)(a1 + 312);
  if (!ctu::fs::is_directory())
    goto LABEL_74;
  BBUFeedback::handleBeginPhase(*(BBUFeedback **)(a1 + 56), "BB Booted");
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), 0);
  v47 = *(_QWORD *)(a1 + 56);
  v48 = (char *)operator new(0x19uLL);
  v49 = v48;
  *(_QWORD *)block = v48;
  *(_OWORD *)&block[8] = xmmword_212B50730;
  strcpy(v48, "/bbupdate_profile.plist");
  if (*(char *)(a1 + 335) >= 0)
  {
    v50 = *(unsigned __int8 *)(a1 + 335);
  }
  else
  {
    v46 = *(char **)(a1 + 312);
    v50 = *(_QWORD *)(a1 + 320);
  }
  if (v50 > 1)
  {
    if (v50 - 0x7FFFFFFFFFFFFFE0 < 0x8000000000000021)
      std::string::__throw_length_error[abi:ne180100]();
    v51 = 48;
    if (v50 + 23 > 0x30)
      v51 = v50 + 23;
    v52 = (v51 | 7) + 1;
    v53 = (char *)operator new(v52);
    memcpy(v53, v46, v50);
    qmemcpy(&v53[v50], "/bbupdate_profile.plist", 23);
    operator delete(v49);
    *(_QWORD *)&block[8] = v50 + 23;
    *(_QWORD *)&block[16] = v52 | 0x8000000000000000;
    *(_QWORD *)block = v53;
    v54 = &v53[v50 + 23];
    v40 = MEMORY[0x24BDAC760];
    goto LABEL_69;
  }
  if (v50)
  {
    v55 = &v48[v50];
    v56 = *(_OWORD *)v48;
    v57 = *((_DWORD *)v48 + 4);
    v58 = *((_WORD *)v48 + 10);
    v55[22] = v48[22];
    *((_WORD *)v55 + 10) = v58;
    *((_DWORD *)v55 + 4) = v57;
    *(_OWORD *)v55 = v56;
    if (v48 + 23 <= v46 || v48 > v46)
      v60 = 0;
    else
      v60 = v50;
    memmove(v48, &v46[v60], v50);
    *(_QWORD *)&block[8] = v50 + 23;
    v54 = &v49[v50 + 23];
LABEL_69:
    *v54 = 0;
  }
  *(_OWORD *)v116 = *(_OWORD *)block;
  v117 = *(_QWORD *)&block[16];
  memset(block, 0, sizeof(block));
  BBUProfiler::exportToFile((CFTypeRef *)(v47 + 80), (uint64_t)v116);
  if (SHIBYTE(v117) < 0)
    operator delete(v116[0]);
  if ((block[23] & 0x80000000) != 0)
    operator delete(*(void **)block);
LABEL_74:
  pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  v61 = qword_253D31DC8;
  if (qword_253D31DC8)
    goto LABEL_97;
  v62 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
  v63 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  v64 = dispatch_queue_create("BBUError", v63);
  v62->~__shared_weak_count = 0;
  v62->~__shared_weak_count_0 = 0;
  v62->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v64;
  if (v64)
  {
    v65 = v64;
    dispatch_retain(v64);
    v62->__get_deleter = 0;
    dispatch_release(v65);
  }
  else
  {
    v62->__get_deleter = 0;
  }
  v62->__on_zero_shared_weak = 0;
  v62[1].~__shared_weak_count = 0;
  v62[1].~__shared_weak_count_0 = 0;
  v66 = (std::__shared_weak_count *)operator new(0x20uLL);
  v66->__shared_owners_ = 0;
  v67 = (unint64_t *)&v66->__shared_owners_;
  v66->__vftable = (std::__shared_weak_count_vtbl *)off_24CE7F548;
  v66->__shared_weak_owners_ = 0;
  v66[1].__vftable = v62;
  v68 = (std::__shared_weak_count *)v62->~__shared_weak_count_0;
  if (!v68)
  {
    do
      v72 = __ldxr(v67);
    while (__stxr(v72 + 1, v67));
    v73 = (unint64_t *)&v66->__shared_weak_owners_;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
    v62->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v62;
    v62->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v66;
    do
LABEL_88:
      v75 = __ldaxr(v67);
    while (__stlxr(v75 - 1, v67));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
    goto LABEL_91;
  }
  if (v68->__shared_owners_ == -1)
  {
    do
      v69 = __ldxr(v67);
    while (__stxr(v69 + 1, v67));
    v70 = (unint64_t *)&v66->__shared_weak_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
    v62->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v62;
    v62->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v66;
    std::__shared_weak_count::__release_weak(v68);
    goto LABEL_88;
  }
LABEL_91:
  v76 = (std::__shared_weak_count *)off_253D31DD0;
  qword_253D31DC8 = (uint64_t)v62;
  off_253D31DD0 = v66;
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v61 = qword_253D31DC8;
LABEL_97:
  v79 = (std::__shared_weak_count *)off_253D31DD0;
  if (off_253D31DD0)
  {
    v80 = (unint64_t *)((char *)off_253D31DD0 + 8);
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  v126 = 0;
  v127 = &v126;
  v128 = 0x2000000000;
  v129 = 0;
  __p.__r_.__value_.__r.__words[0] = v40;
  __p.__r_.__value_.__l.__size_ = 1107296256;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8BBUError12getErrorCodeEv_block_invoke;
  v131 = &__block_descriptor_tmp_4_0;
  v132 = &v126;
  p_cf = (CFTypeRef *)v61;
  v118[0] = &__p;
  *(_QWORD *)block = v40;
  *(_QWORD *)&block[8] = 0x40000000;
  *(_QWORD *)&block[16] = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v135 = &__block_descriptor_tmp_10;
  v136 = v61;
  p_p_p = (std::string **)v118;
  v82 = *(NSObject **)(v61 + 16);
  if (*(_QWORD *)(v61 + 24))
  {
    dispatch_async_and_wait(v82, block);
    v83 = *((_DWORD *)v127 + 6);
    _Block_object_dispose(&v126, 8);
    if (!v79)
      goto LABEL_107;
  }
  else
  {
    dispatch_sync(v82, block);
    v83 = *((_DWORD *)v127 + 6);
    _Block_object_dispose(&v126, 8);
    if (!v79)
      goto LABEL_107;
  }
  v84 = (unint64_t *)&v79->__shared_owners_;
  do
    v85 = __ldaxr(v84);
  while (__stlxr(v85 - 1, v84));
  if (v85)
  {
LABEL_107:
    if (v83)
      goto LABEL_108;
LABEL_129:
    v95 = 1;
    if (!a5)
      return v95;
    goto LABEL_163;
  }
  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
  std::__shared_weak_count::__release_weak(v79);
  if (!v83)
    goto LABEL_129;
LABEL_108:
  pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  v86 = qword_253D31DC8;
  if (!qword_253D31DC8)
  {
    v87 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
    __p.__r_.__value_.__r.__words[0] = 0;
    ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v87, "BBUError", QOS_CLASS_UTILITY, (NSObject **)&__p);
    if (__p.__r_.__value_.__r.__words[0])
      dispatch_release((dispatch_object_t)__p.__r_.__value_.__l.__data_);
    v87->__on_zero_shared_weak = 0;
    v87[1].~__shared_weak_count = 0;
    v87[1].~__shared_weak_count_0 = 0;
    std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)block, v87);
    v88 = *(_OWORD *)block;
    *(_OWORD *)block = 0uLL;
    v89 = (std::__shared_weak_count *)off_253D31DD0;
    *(_OWORD *)&qword_253D31DC8 = v88;
    if (v89)
    {
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    v92 = *(std::__shared_weak_count **)&block[8];
    if (*(_QWORD *)&block[8])
    {
      v93 = (unint64_t *)(*(_QWORD *)&block[8] + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    v86 = qword_253D31DC8;
  }
  v95 = (uint64_t)off_253D31DD0;
  if (off_253D31DD0)
  {
    v96 = (unint64_t *)((char *)off_253D31DD0 + 8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  __p.__r_.__value_.__r.__words[0] = v40;
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8BBUError10getCFErrorEPP9__CFError_block_invoke;
  v131 = &__block_descriptor_tmp_5;
  v132 = (_QWORD *)v86;
  p_cf = &cf;
  v126 = &__p;
  *(_QWORD *)block = v40;
  *(_QWORD *)&block[8] = 0x40000000;
  *(_QWORD *)&block[16] = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v135 = &__block_descriptor_tmp_10;
  v136 = v86;
  p_p_p = &v126;
  v98 = *(NSObject **)(v86 + 16);
  if (!*(_QWORD *)(v86 + 24))
  {
    dispatch_sync(v98, block);
    if (!v95)
      goto LABEL_160;
    goto LABEL_132;
  }
  dispatch_async_and_wait(v98, block);
  if (v95)
  {
LABEL_132:
    v99 = (unint64_t *)(v95 + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v95 + 16))(v95);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v95);
      v95 = 0;
      if (!a5)
        return v95;
      goto LABEL_163;
    }
    goto LABEL_159;
  }
LABEL_160:
  if (!a5)
    return v95;
LABEL_163:
  if (cf)
  {
    *a5 = CFRetain(cf);
    CFRelease(cf);
    cf = 0;
    if (a4)
    {
      if (!*a4)
        *a4 = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    }
  }
  return v95;
}

void sub_212A5CAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_212A5CAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(a1);
}

void sub_212A5CAD8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,CFTypeRef cf,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,dispatch_object_t object)
{
  void *v35;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (object)
    dispatch_release(object);
  operator delete(v35);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  if (a2 == 2)
  {
    v43 = __cxa_begin_catch(a1);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    BBUpdaterController::handleException((CFErrorRef *)&cf, (const char *)v43 + 8, *((_DWORD *)v43 + 130), v38, v39, v40, v41, v42);
  }
  else
  {
    if (a2 != 1)
      JUMPOUT(0x212A5CD54);
    v44 = __cxa_begin_catch(a1);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    v45 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v44 + 16))(v44);
    BBUpdaterController::handleException((CFErrorRef *)&cf, v45, 0xBu, v46, v47, v48, v49, v50);
  }
  __cxa_end_catch();
  JUMPOUT(0x212A5C968);
}

void sub_212A5CAF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CFErrorRef a32)
{
  uint64_t v32;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 153) < 0)
    operator delete(*(void **)(v32 - 176));
  if (a2 == 2)
  {
    v40 = __cxa_begin_catch(a1);
    if (a32)
    {
      CFRelease(a32);
      a32 = 0;
    }
    BBUpdaterController::handleException(&a32, (const char *)v40 + 8, *((_DWORD *)v40 + 130), v35, v36, v37, v38, v39);
  }
  else
  {
    if (a2 != 1)
      JUMPOUT(0x212A5CD54);
    v41 = __cxa_begin_catch(a1);
    if (a32)
    {
      CFRelease(a32);
      a32 = 0;
    }
    v42 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
    BBUpdaterController::handleException(&a32, v42, 0xBu, v43, v44, v45, v46, v47);
  }
  __cxa_end_catch();
  JUMPOUT(0x212A5C968);
}

void sub_212A5CB34(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1}::operator() const(BBUError*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_212A5CB54(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,CFErrorRef a29)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  __cxa_end_catch();
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  if (a2 == 2)
  {
    v36 = __cxa_begin_catch(a1);
    if (a29)
    {
      CFRelease(a29);
      a29 = 0;
    }
    BBUpdaterController::handleException(&a29, (const char *)v36 + 8, *((_DWORD *)v36 + 130), v31, v32, v33, v34, v35);
  }
  else
  {
    if (a2 != 1)
      JUMPOUT(0x212A5CD54);
    v37 = __cxa_begin_catch(a1);
    if (a29)
    {
      CFRelease(a29);
      a29 = 0;
    }
    v38 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v37 + 16))(v37);
    BBUpdaterController::handleException(&a29, v38, 0xBu, v39, v40, v41, v42, v43);
  }
  __cxa_end_catch();
  JUMPOUT(0x212A5C968);
}

void sub_212A5CB84(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1}::operator() const(BBUError*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_212A5CBA4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,CFErrorRef a29)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  __cxa_end_catch();
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  if (a2 == 2)
  {
    v36 = __cxa_begin_catch(a1);
    if (a29)
    {
      CFRelease(a29);
      a29 = 0;
    }
    BBUpdaterController::handleException(&a29, (const char *)v36 + 8, *((_DWORD *)v36 + 130), v31, v32, v33, v34, v35);
  }
  else
  {
    if (a2 != 1)
      JUMPOUT(0x212A5CD54);
    v37 = __cxa_begin_catch(a1);
    if (a29)
    {
      CFRelease(a29);
      a29 = 0;
    }
    v38 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v37 + 16))(v37);
    BBUpdaterController::handleException(&a29, v38, 0xBu, v39, v40, v41, v42, v43);
  }
  __cxa_end_catch();
  JUMPOUT(0x212A5C968);
}

void sub_212A5CBD4()
{
  JUMPOUT(0x212A5CBDCLL);
}

void sub_212A5CC00(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,CFErrorRef a29)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a2 == 2)
  {
    v36 = __cxa_begin_catch(a1);
    if (a29)
    {
      CFRelease(a29);
      a29 = 0;
    }
    BBUpdaterController::handleException(&a29, (const char *)v36 + 8, *((_DWORD *)v36 + 130), v31, v32, v33, v34, v35);
  }
  else
  {
    if (a2 != 1)
      JUMPOUT(0x212A5CD54);
    v37 = __cxa_begin_catch(a1);
    if (a29)
    {
      CFRelease(a29);
      a29 = 0;
    }
    v38 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v37 + 16))(v37);
    BBUpdaterController::handleException(&a29, v38, 0xBu, v39, v40, v41, v42, v43);
  }
  __cxa_end_catch();
  JUMPOUT(0x212A5C968);
}

void sub_212A5CC20(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,CFErrorRef a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  if (a40 < 0)
    operator delete(a35);
  if (a2 == 2)
  {
    v47 = __cxa_begin_catch(a1);
    if (a29)
    {
      CFRelease(a29);
      a29 = 0;
    }
    BBUpdaterController::handleException(&a29, (const char *)v47 + 8, *((_DWORD *)v47 + 130), v42, v43, v44, v45, v46);
  }
  else
  {
    if (a2 != 1)
      JUMPOUT(0x212A5CD54);
    v48 = __cxa_begin_catch(a1);
    if (a29)
    {
      CFRelease(a29);
      a29 = 0;
    }
    v49 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v48 + 16))(v48);
    BBUpdaterController::handleException(&a29, v49, 0xBu, v50, v51, v52, v53, v54);
  }
  __cxa_end_catch();
  JUMPOUT(0x212A5C968);
}

void sub_212A5CC58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A5CC64()
{
  JUMPOUT(0x212A5CC6CLL);
}

void sub_212A5CCF0()
{
  __cxa_end_catch();
  JUMPOUT(0x212A5CD54);
}

void sub_212A5CCFC()
{
  __cxa_end_catch();
  JUMPOUT(0x212A5CD54);
}

void sub_212A5CD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  uint64_t v26;

  if (a25 < 0)
    operator delete(__p);
  if (v26 < 0)
    operator delete(v25);
  _Unwind_Resume(a1);
}

void sub_212A5CD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(a35);
  _Unwind_Resume(a1);
}

void sub_212A5CD40()
{
  uint64_t v0;

  if (*(char *)(v0 - 153) < 0)
    JUMPOUT(0x212A5CD50);
  JUMPOUT(0x212A5CD54);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(a1);
  v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void BBUpdaterController::handleException(CFErrorRef *a1, const char *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  void *__dst[2];
  unint64_t v21;

  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(25, 0xFFFFFFFFLL, "BBUpdaterController", "", "%s\n", a6, a7, a8, (char)a2);
  v11 = strlen(a2);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v16 = (void *)v11;
  if (v11 >= 0x17)
  {
    v18 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v18 = v11 | 7;
    v19 = v18 + 1;
    v17 = (void **)operator new(v18 + 1);
    __dst[1] = v16;
    v21 = v19 | 0x8000000000000000;
    __dst[0] = v17;
    goto LABEL_10;
  }
  HIBYTE(v21) = v11;
  v17 = __dst;
  if (v11)
LABEL_10:
    memcpy(v17, a2, (size_t)v16);
  *((_BYTE *)v16 + (_QWORD)v17) = 0;
  BBUpdaterCommon::BBUCreateCFError(a1, (uint64_t)__dst, a3, 0, v12, v13, v14, v15);
  if (SHIBYTE(v21) < 0)
    operator delete(__dst[0]);
}

void sub_212A5CEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BBUpdaterController::registerLogSink(BBUpdaterController *this, uint64_t a2, void (*a3)(void *, int, const char *))
{
  gBBULogSinkContext = a2;
  gBBULogSinkFunc = a3;
}

void BBUpdaterController::query(_QWORD *a1, int a2)
{
  BBUEUR10UpdateSource *FirmwareDataSource;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BBUEUR10UpdateSource *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  __CFDictionary *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int updated;
  void *exception;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  std::string cf;
  BBUEUR10UpdateSource *v25;
  std::string __p;
  std::string v27;
  uint64_t v28;
  CFMutableDictionaryRef v29;

  FirmwareDataSource = BBUpdaterController::getFirmwareDataSource((BBUpdaterController *)a1, 0);
  v8 = FirmwareDataSource;
  v25 = FirmwareDataSource;
  if (a2 == 4)
  {
    if (FirmwareDataSource)
    {
      BBUpdaterController::queryInfoSecondStageInternal((uint64_t)a1, 1, &v25);
      goto LABEL_27;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_32;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_32;
    }
    if (gBBULogVerbosity >= 6)
      _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v5, v6, v7, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_32:
    std::string::basic_string[abi:ne180100]<0>(&cf, "second");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Fail to get update source in ", &cf, &__p);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      v27 = __p;
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  if (a2 != 32)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x135u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized BBU stage.\")", v20, v21, v22, v23);
  }
  if (!BBUpdaterController::shouldPerformEUICC((const __CFDictionary **)a1))
  {
    if (!v8)
      return;
LABEL_27:
    (*(void (**)(BBUEUR10UpdateSource *))(*(_QWORD *)v8 + 16))(v8);
    return;
  }
  if (v8)
  {
    v12 = (const void *)a1[5];
    cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    if (v12)
      CFRetain(v12);
    v13 = (__CFDictionary *)a1[4];
    v29 = v13;
    if (v13)
      CFRetain(v13);
    updated = eUICC::UpdateOutput(a1 + 19, (const __CFDictionary **)&cf, &v29);
    if (v29)
      CFRelease(v29);
    if (cf.__r_.__value_.__r.__words[0])
      CFRelease(cf.__r_.__value_.__l.__data_);
    if (!updated)
    {
      if (a1[4]
         ? ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get
         : 0)
      {
        goto LABEL_27;
      }
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_20;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_20:
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v14, v15, v16, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Failed to eUICC::updateOutput in BootedStage");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v27, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v27 = __p;
    v28 = updated;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)a1, (uint64_t)&v27);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_27;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_38;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_38;
  }
  if (gBBULogVerbosity >= 6)
    _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v9, v10, v11, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_38:
  std::string::basic_string[abi:ne180100]<0>(&cf, "eUICC");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Fail to get update source in ", &cf, &__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v27 = __p;
    goto LABEL_47;
  }
LABEL_46:
  std::string::__init_copy_ctor_external(&v27, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_47:
  v28 = 35;
  BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)a1, (uint64_t)&v27);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_49:
      if ((SHIBYTE(cf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_53:
      operator delete(cf.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_49;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_53;
}

void sub_212A5D3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a17 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a17 & 0x80000000) == 0)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(a12);
  _Unwind_Resume(exception_object);
}

BBUEUR10UpdateSource *BBUpdaterController::getFirmwareDataSource(BBUpdaterController *this, int a2)
{
  const __CFDictionary *v4;
  uint64_t (*v5)(uint64_t);
  CFTypeID v6;
  const __CFData *v7;
  BBUZipFile *v8;
  _QWORD *v9;
  capabilities::radio *FirmwareFolder;
  void *v12;
  int v13;
  void **v14;
  void *exception;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  void *v21;
  void *value[4];

  v4 = (const __CFDictionary *)*((_QWORD *)this + 5);
  v5 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!v4)
    v5 = 0;
  if (v5)
  {
    value[0] = (void *)0xAAAAAAAAAAAAAAAALL;
    if (CFDictionaryGetValueIfPresent(v4, CFSTR("firmwareData"), (const void **)value))
    {
      v6 = CFGetTypeID(value[0]);
      if (v6 == CFDataGetTypeID())
      {
        v7 = (const __CFData *)value[0];
        if (value[0])
        {
          v8 = (BBUZipFile *)operator new(0x98uLL);
          BBUZipFile::BBUZipFile(v8, v7);
          return BBUUpdateSource::createFromZipFile(v8, *((BBUZipFile **)this + 7), (BBUFeedback *)(*(_DWORD *)(*((_QWORD *)this + 12) + 88) == 3));
        }
      }
    }
  }
  if (!a2)
    return 0;
  memset(value, 170, 24);
  FirmwareFolder = (capabilities::radio *)BBUpdaterController::getFirmwareFolder(value, *((const __CFDictionary **)this + 5));
  v12 = (void *)HIBYTE(value[2]);
  if (SHIBYTE(value[2]) < 0)
    v12 = value[1];
  if (!v12)
  {
    capabilities::radio::personalizedFirmwarePath(FirmwareFolder);
    if (SHIBYTE(value[2]) < 0)
    {
      operator delete(value[0]);
      value[2] = v21;
      *(_OWORD *)value = v20;
      v13 = SHIBYTE(v21);
      if ((SHIBYTE(v21) & 0x80000000) == 0)
      {
LABEL_15:
        if (v13)
        {
          v14 = value;
LABEL_21:
          BBUFeedback::handleComment(*((BBUFeedback **)this + 7), "Baseband fw path that is used: %s\n", (const char *)v14);
          goto LABEL_22;
        }
        goto LABEL_24;
      }
    }
    else
    {
      value[2] = v21;
      *(_OWORD *)value = v20;
      v13 = SHIBYTE(v21);
      if ((SHIBYTE(v21) & 0x80000000) == 0)
        goto LABEL_15;
    }
    if (value[1])
    {
      v14 = (void **)value[0];
      goto LABEL_21;
    }
LABEL_24:
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x55Fu, (ctu::LogMessageBuffer *)"Assertion failure(folder.empty() != true && \"Failed finding the bbfw path.\")", v16, v17, v18, v19);
  }
LABEL_22:
  v9 = BBUUpdateSource::createFromFolder((__int128 *)value, *((_QWORD *)this + 7), *(_DWORD *)(*((_QWORD *)this + 12) + 88) == 3);
  if ((SHIBYTE(value[2]) & 0x80000000) == 0)
    return (BBUEUR10UpdateSource *)v9;
  operator delete(value[0]);
  return (BBUEUR10UpdateSource *)v9;
}

void sub_212A5D70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  __cxa_free_exception(v18);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t BBUpdaterController::parsePreflightArgs(BBUpdaterController *this)
{
  uint64_t result;
  CFTypeID v3;
  void *exception;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *value;

  result = *((_QWORD *)this + 5);
  if (result)
  {
    value = (void *)0xAAAAAAAAAAAAAAAALL;
    result = CFDictionaryGetValueIfPresent((CFDictionaryRef)result, CFSTR("PreflightInfo"), (const void **)&value);
    if ((_DWORD)result)
    {
      v3 = CFGetTypeID(value);
      result = CFDictionaryGetTypeID();
      if (v3 == result && !*((_BYTE *)this + 353))
      {
        BBUFeedback::handleComment(*((BBUFeedback **)this + 7), "Preflight detected");
        *((_BYTE *)this + 353) = 1;
        result = (*(uint64_t (**)(_QWORD, _QWORD, void *))(**((_QWORD **)this + 9) + 80))(*((_QWORD *)this + 9), *((_QWORD *)this + 12), value);
        if ((_DWORD)result)
        {
          exception = __cxa_allocate_exception(0x210uLL);
          _BBUException::_BBUException((uint64_t)exception, 11, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x8A0u, (ctu::LogMessageBuffer *)"Assertion failure(ret == kBBUReturnSuccess && \"Failed overriding preflight personalization parameters.\")", v5, v6, v7, v8);
        }
      }
    }
  }
  return result;
}

void sub_212A5D824(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUpdaterController::queryInfoFirstStageInternal(BBULoader **this, BBUFeedback *a2)
{
  char *v3;
  BBULoader *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int TransportNoEvents;
  BOOL v9;
  uint64_t v10;
  int v11;
  capabilities::updater *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BBUFeedback *v18;
  std::string *p_p;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  capabilities::updater *v25;
  int v26;
  void *exception;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  std::string v32;
  std::string v33;
  std::string __p;
  int v35;
  int v36;

  v3 = BBULoader::create(this[7], a2);
  v4 = this[10];
  this[10] = (BBULoader *)v3;
  if (v4)
  {
    (*(void (**)(BBULoader *))(*(_QWORD *)v4 + 8))(v4);
    v3 = (char *)this[10];
  }
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 11, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x811u, (ctu::LogMessageBuffer *)"Assertion failure(fLoader && \"Failed to reset and create BBULoader.\")", v28, v29, v30, v31);
  }
  TransportNoEvents = BBUpdaterController::createTransportNoEvents((uint64_t)this, 1, 2);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
    {
LABEL_15:
      v9 = TransportNoEvents == 0;
LABEL_16:
      v10 = *(_QWORD *)gBBULogMaskGet(void)::sBBULogMask;
      v11 = gBBULogVerbosity;
      if (!v9)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      goto LABEL_15;
  }
  if (gBBULogVerbosity < 0)
    goto LABEL_15;
  _BBULog(13, 0, "BBUpdaterController", "", "createTransportNoEvents ret status is %d\n", v5, v6, v7, TransportNoEvents);
  v9 = TransportNoEvents == 0;
  if (gBBULogMaskGet(void)::once == -1)
    goto LABEL_16;
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v10 = *(_QWORD *)gBBULogMaskGet(void)::sBBULogMask;
  v11 = gBBULogVerbosity;
  if (TransportNoEvents)
  {
LABEL_9:
    if ((v10 & 2) != 0 && v11 >= 6)
      _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v5, v6, v7, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v32, "kBBUReturnFailCreateTransportFirst");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Fail to create transport: ", &v32, &v33);
    v13 = capabilities::updater::loaderConnectAttempts(v12);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
    else
      __p = v33;
    v35 = 50;
    v36 = v13;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventRetry>((uint64_t)this, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_47:
        if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return 50;
LABEL_51:
        operator delete(v32.__r_.__value_.__l.__data_);
        return 50;
      }
    }
    else if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_47;
    }
    operator delete(v33.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 50;
    goto LABEL_51;
  }
LABEL_17:
  if ((v10 & 0x2000) != 0 && (v11 & 0x80000000) == 0)
    _BBULog(13, 0, "BBUpdaterController", "", "Querying first stage\n", v5, v6, v7, v31);
  v14 = (*(uint64_t (**)(BBULoader *, char *))(*(_QWORD *)this[10] + 16))(this[10], (char *)this + 152);
  if ((_DWORD)v14)
  {
    v23 = v14;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_36;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_36;
    }
    if (gBBULogVerbosity >= 6)
      _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v15, v16, v17, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_36:
    std::string::basic_string[abi:ne180100]<0>(&v32, BBUReturnAsString::BBUReturnStrings[v23]);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Fail to connect to loader: ", &v32, &v33);
    v26 = capabilities::updater::loaderConnectAttempts(v25);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
    else
      __p = v33;
    v35 = v23;
    v36 = v26;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventRetry>((uint64_t)this, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_55:
        if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return v23;
LABEL_59:
        operator delete(v32.__r_.__value_.__l.__data_);
        return v23;
      }
    }
    else if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_55;
    }
    operator delete(v33.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v23;
    goto LABEL_59;
  }
  v33.__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(BBULoader *, char *, std::string *))(*(_QWORD *)this[10] + 24))(this[10], (char *)this + 152, &v33);
  if (v33.__r_.__value_.__r.__words[0])
  {
    v18 = this[7];
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v33.__r_.__value_.__l.__data_ + 16))(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    BBUFeedback::handleComment(v18, "Loader version: %s", (const char *)p_p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v33.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v33.__r_.__value_.__l.__data_ + 8))(v33.__r_.__value_.__r.__words[0]);
  }
  v23 = (*(uint64_t (**)(BBULoader *, char *, BBULoader *))(*(_QWORD *)this[10] + 32))(this[10], (char *)this + 152, this[12]);
  if (!(_DWORD)v23)
  {
    BBUFeedback::handleComment(this[7], "fusingState: %d", *((_DWORD *)this[12] + 22));
    return v23;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      goto LABEL_40;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
    {
LABEL_40:
      if (gBBULogVerbosity >= 6)
        _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v20, v21, v22, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v33, "Failed querying chip information in the first stage.");
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  else
    __p = v33;
  v35 = v23;
  v36 = 0;
  BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)this, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  return v23;
}

void sub_212A5DE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  int *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void **v7;
  void **v8;
  char v9;
  __int128 v10;
  char *v11;
  size_t v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *__p[3];
  void *__dst[2];
  uint64_t v30;
  int *v31;
  std::__shared_weak_count *v32;

  v4 = *(int **)(a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  v31 = v4;
  v32 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  __dst[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v30 = 0x7AAAAAAAAAAAAAALL;
  strcpy((char *)__dst, "unknown");
  memset(__p, 170, sizeof(__p));
  (*(void (**)(void **__return_ptr, int *))(*(_QWORD *)v4 + 24))(__p, v4);
  v7 = (void **)__p[0];
  v8 = (void **)((char *)__p[0] + 24 * v4[8]);
  if (__dst != v8)
  {
    v9 = *((_BYTE *)v8 + 23);
    if (SHIBYTE(v30) < 0)
    {
      if (v9 >= 0)
        v11 = (char *)__p[0] + 24 * v4[8];
      else
        v11 = (char *)*v8;
      if (v9 >= 0)
        v12 = *((unsigned __int8 *)v8 + 23);
      else
        v12 = (size_t)v8[1];
      std::string::__assign_no_alias<false>(__dst, v11, v12);
    }
    else if ((*((_BYTE *)v8 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(__dst, *v8, (size_t)v8[1]);
    }
    else
    {
      v10 = *(_OWORD *)v8;
      v30 = (uint64_t)v8[2];
      *(_OWORD *)__dst = v10;
    }
    v7 = (void **)__p[0];
  }
  if (v7)
  {
    v13 = (void **)__p[1];
    v14 = v7;
    if (__p[1] != v7)
    {
      do
      {
        if (*((char *)v13 - 1) < 0)
          operator delete(*(v13 - 3));
        v13 -= 3;
      }
      while (v13 != v7);
      v14 = (void **)__p[0];
    }
    __p[1] = v7;
    operator delete(v14);
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_33;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_33;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    boost::core::demangle((boost::core *)__p, (const char *)(0x8000000212B5103DLL & 0x7FFFFFFFFFFFFFFFLL));
    if (SHIBYTE(__p[2]) >= 0)
      v18 = __p;
    else
      LOBYTE(v18) = __p[0];
    _BBULog(21, 0, "BBUpdaterController", "", "processing event: %s, current state %d [%s]\n", v15, v16, v17, (char)v18);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
LABEL_33:
  v19 = (uint64_t)v31;
  if (!boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::is_event_handling_blocked_helper<BBUpdaterControllerFSM::eventError>((uint64_t)v31)
    && boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventError,BBUpdaterControllerFSM::eventError>(v19, a2))
  {
    v20 = ((uint64_t (*)(uint64_t, _QWORD))_MergedGlobals_1[*(_DWORD *)(v19 + 32) + 218])(v19, 0);
    if (!(((unsigned int (*)(uint64_t, uint64_t))_MergedGlobals_1[*(_DWORD *)(v19 + 36) + 218])(v19, 1) | v20))
    {
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventError>(v19, v19, *(_DWORD *)(v19 + 32));
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventError>(v19, v19, *(_DWORD *)(v19 + 36));
    }
    *(_BYTE *)(v19 + 100) = 0;
    boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(v19);
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_46;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_46;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    boost::core::demangle((boost::core *)__p, (const char *)(0x8000000212B5103DLL & 0x7FFFFFFFFFFFFFFFLL));
    if (SHIBYTE(__p[2]) >= 0)
      v24 = __p;
    else
      LOBYTE(v24) = __p[0];
    _BBULog(21, 0, "BBUpdaterController", "", "finish processing event: %s\n", v21, v22, v23, (char)v24);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
LABEL_46:
  if (SHIBYTE(v30) < 0)
    operator delete(__dst[0]);
  v25 = v32;
  if (v32)
  {
    v26 = (unint64_t *)&v32->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_212A5E2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0)
  {
    operator delete(__p);
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t BBUpdaterController::queryInfoSecondStageInternal(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  int v26;
  std::string v27;
  std::string __p;
  std::string v29;
  uint64_t v30;

  v9 = BBUProgrammer::create(*(capabilities::updater **)(a1 + 56), a1 + 152, *(_QWORD *)(a1 + 48));
  v10 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (*a3)
  {
    if (!BBUpdaterController::createTransportNoEvents(a1, 0, 4))
    {
      if (*(char *)(a1 + 311) < 0)
      {
        if (!*(_QWORD *)(a1 + 296))
        {
LABEL_8:
          v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88));
          if (!(_DWORD)v14)
          {
            if (!a2)
              return 0;
            v26 = 0;
            v18 = *(_QWORD *)(a1 + 96);
            if (*(_DWORD *)(v18 + 88) == 3)
            {
              v19 = (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 48))(*a3) ^ 1;
              v18 = *(_QWORD *)(a1 + 96);
            }
            else
            {
              v19 = 0;
            }
            v24 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, int *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 88)
                                                                                              + 32))(*(_QWORD *)(a1 + 88), 0, 1, &v26, v18, v19);
            if (!(_DWORD)v24)
              return v24;
            if (gBBULogMaskGet(void)::once == -1)
            {
              if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
                goto LABEL_40;
            }
            else
            {
              dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
              if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
                goto LABEL_40;
            }
            if (gBBULogVerbosity >= 6)
              _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v21, v22, v23, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_40:
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88));
            std::string::basic_string[abi:ne180100]<0>(&v27, BBUReturnAsString::BBUReturnStrings[v24]);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Failed gathering personalization parameters @ second stage: ", &v27, &__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v29, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            else
              v29 = __p;
            v30 = v24;
            BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(a1, (uint64_t)&v29);
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v29.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_64:
                if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_68;
                return v24;
              }
            }
            else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_64;
            }
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_68:
              v25 = (void *)v27.__r_.__value_.__r.__words[0];
              goto LABEL_69;
            }
            return v24;
          }
          v24 = v14;
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
              goto LABEL_34;
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
              goto LABEL_34;
          }
          if (gBBULogVerbosity >= 6)
            _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v15, v16, v17, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_34:
          std::string::basic_string[abi:ne180100]<0>(&__p, "Failed connecting to programmer while querying information in the second stage.");
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v29, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            v29 = __p;
          v30 = v24;
          BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(a1, (uint64_t)&v29);
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v29.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            v25 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_69:
            operator delete(v25);
            return v24;
          }
          return v24;
        }
      }
      else if (!*(_BYTE *)(a1 + 311))
      {
        goto LABEL_8;
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 56))(*(_QWORD *)(a1 + 88), a1 + 288);
      goto LABEL_8;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_28;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_28;
    }
    if (gBBULogVerbosity >= 6)
      _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v11, v12, v13, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_28:
    std::string::basic_string[abi:ne180100]<0>(&v27, "kBBUReturnFailCreateTransportSecond");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Fail to create transport ", &v27, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v29, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v29 = __p;
    v30 = 51;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(a1, (uint64_t)&v29);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v29.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_51:
        if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return 51;
LABEL_55:
        operator delete(v27.__r_.__value_.__l.__data_);
        return 51;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_51;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 51;
    goto LABEL_55;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      goto LABEL_20;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
    {
LABEL_20:
      if (gBBULogVerbosity >= 6)
        _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v6, v7, v8, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Fail to get update source for queryInfoSecondStageInternal");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v29, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v29 = __p;
  v30 = 35;
  BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(a1, (uint64_t)&v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 35;
}

void sub_212A5E988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(a13);
  goto LABEL_6;
}

uint64_t BBUpdaterController::shouldPerformEUICC(const __CFDictionary **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const __CFDictionary *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  char v12;
  const __CFDictionary *v13;
  _BYTE v14[16];
  void *__p;
  char v16;

  v5 = capabilities::euicc::supportsLegacyUpdater((capabilities::euicc *)this);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
      goto LABEL_5;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(19, 0, "BBUpdaterController", "", "supports legacy eUICC update? %d\n", v2, v3, v4, v5);
LABEL_5:
  if (!v5)
    return 0;
  v6 = this[5];
  v13 = v6;
  if (v6)
    CFRetain(v6);
  eUICC::Options::Options((uint64_t)v14, &v13);
  v10 = v14[8];
  if (v16 < 0)
  {
    operator delete(__p);
    if (!v6)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v6)
LABEL_12:
    CFRelease(v6);
LABEL_13:
  if (!v10)
    return 1;
  if (gBBULogMaskGet(void)::once == -1)
  {
    result = 0;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
      return result;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    result = 0;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
      return result;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    _BBULog(19, 0, "BBUpdaterController", "", "Skip eUICC options\n", v7, v8, v9, v12);
    return 0;
  }
  return result;
}

void sub_212A5EC04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void BBUpdaterController::personalize(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BBUEUR10UpdateSource *FirmwareDataSource;
  BBUFeedback *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  capabilities::updater *v14;
  std::string::size_type v15;
  int *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string::size_type v19;
  std::string::size_type v20;
  char v21;
  __int128 v22;
  BBUFeedback *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  capabilities::updater *v39;
  unsigned int v40;
  BBUFeedback *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  BBUFeedback *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  void *v91;
  size_t v92;
  std::string::size_type size;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::string *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  std::string *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  char *v106;
  capabilities::updater *v107;
  std::string *p_p;
  std::string::size_type v109;
  std::string *v110;
  __int128 v111;
  capabilities::updater *v112;
  unsigned int v113;
  capabilities::updater *v114;
  unsigned int v115;
  capabilities::updater *v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  void *exception;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  char v128;
  char v129;
  std::string v130;
  std::string v131;
  std::string cf;
  BBUEUR10UpdateSource *v133;
  std::string __p;
  std::string v135;
  std::string v136;
  std::string __dst;
  unint64_t v138;

  *(_BYTE *)(a1 + 352) = 1;
  memset(&__p, 0, sizeof(__p));
  FirmwareDataSource = BBUpdaterController::getFirmwareDataSource((BBUpdaterController *)a1, 0);
  v133 = FirmwareDataSource;
  if (!FirmwareDataSource)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_113;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_113:
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v4, v5, v6, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      }
    }
    v106 = (char *)BBUStageAsString(a2);
    std::string::basic_string[abi:ne180100]<0>(&v135, v106);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Fail to get update source in ", &v135, &v136);
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__dst, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
    else
      __dst = v136;
    v138 = 35;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(a1, (uint64_t)&__dst);
    goto LABEL_119;
  }
  switch(a2)
  {
    case 2:
      v8 = *(BBUFeedback **)(a1 + 56);
      BBUFeedback::handleComment(v8, "entering %s", "StageContext::PersonalizeStageFirst");
      v9 = *((_QWORD *)v8 + 19);
      v10 = *((_QWORD *)v8 + 18);
      if (v9 == v10)
        v11 = 0;
      else
        v11 = ((v9 - v10) << 7) - 1;
      v12 = *((_QWORD *)v8 + 22);
      v13 = v12 + *((_QWORD *)v8 + 21);
      if (v11 == v13)
      {
        std::deque<BBUpdaterCommon::StageContext>::__add_back_capacity((_QWORD *)v8 + 17);
        v10 = *((_QWORD *)v8 + 18);
        v12 = *((_QWORD *)v8 + 22);
        v13 = *((_QWORD *)v8 + 21) + v12;
      }
      *(_DWORD *)(*(_QWORD *)(v10 + ((v13 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v13 & 0x3FF)) = 2;
      *((_QWORD *)v8 + 22) = v12 + 1;
      if (*(_DWORD *)(*(_QWORD *)(a1 + 96) + 88) != 3)
      {
        v14 = (capabilities::updater *)(*(uint64_t (**)(BBUEUR10UpdateSource *))(*(_QWORD *)FirmwareDataSource
                                                                                         + 80))(FirmwareDataSource);
        if (!(_DWORD)v14)
        {
          if (capabilities::updater::shouldSkipRestoreForUnfused(v14))
          {
            BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 56), "Detecting unfused BB and skip restore");
            v16 = *(int **)(a1 + 16);
            v15 = *(_QWORD *)(a1 + 24);
            v135.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
            v135.__r_.__value_.__l.__size_ = v15;
            if (v15)
            {
              v17 = (unint64_t *)(v15 + 8);
              do
                v18 = __ldxr(v17);
              while (__stxr(v18 + 1, v17));
            }
            __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[2] = 0x7AAAAAAAAAAAAAALL;
            strcpy((char *)&__dst, "unknown");
            memset(&v136, 170, sizeof(v136));
            (*(void (**)(std::string *__return_ptr, int *))(*(_QWORD *)v16 + 24))(&v136, v16);
            v19 = v136.__r_.__value_.__r.__words[0];
            v20 = v136.__r_.__value_.__r.__words[0] + 24 * v16[8];
            if (&__dst != (std::string *)v20)
            {
              v21 = *(_BYTE *)(v20 + 23);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              {
                if (v21 >= 0)
                  v91 = (void *)(v136.__r_.__value_.__r.__words[0] + 24 * v16[8]);
                else
                  v91 = *(void **)v20;
                if (v21 >= 0)
                  v92 = *(unsigned __int8 *)(v20 + 23);
                else
                  v92 = *(_QWORD *)(v20 + 8);
                std::string::__assign_no_alias<false>((void **)&__dst.__r_.__value_.__l.__data_, v91, v92);
              }
              else if ((*(_BYTE *)(v20 + 23) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>(&__dst, *(void **)v20, *(_QWORD *)(v20 + 8));
              }
              else
              {
                v22 = *(_OWORD *)v20;
                __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v20 + 16);
                *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v22;
              }
              v19 = v136.__r_.__value_.__r.__words[0];
            }
            if (v19)
            {
              size = v136.__r_.__value_.__l.__size_;
              v94 = (void *)v19;
              if (v136.__r_.__value_.__l.__size_ != v19)
              {
                do
                {
                  if (*(char *)(size - 1) < 0)
                    operator delete(*(void **)(size - 24));
                  size -= 24;
                }
                while (size != v19);
                v94 = (void *)v136.__r_.__value_.__r.__words[0];
              }
              v136.__r_.__value_.__l.__size_ = v19;
              operator delete(v94);
            }
            if (gBBULogMaskGet(void)::once == -1)
            {
              if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
                goto LABEL_96;
            }
            else
            {
              dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
              if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
                goto LABEL_96;
            }
            if ((gBBULogVerbosity & 0x80000000) == 0)
            {
              boost::core::demangle((boost::core *)&v136, (const char *)(0x8000000212B511CELL & 0x7FFFFFFFFFFFFFFFLL));
              if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v98 = &v136;
              else
                LOBYTE(v98) = v136.__r_.__value_.__s.__data_[0];
              _BBULog(21, 0, "BBUpdaterController", "", "processing event: %s, current state %d [%s]\n", v95, v96, v97, (char)v98);
              if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v136.__r_.__value_.__l.__data_);
            }
LABEL_96:
            boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventSkipPersonalize>((uint64_t)v135.__r_.__value_.__l.__data_, (uint64_t)&cf, 1);
            if (gBBULogMaskGet(void)::once == -1)
            {
              if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
              {
LABEL_98:
                if ((gBBULogVerbosity & 0x80000000) == 0)
                {
                  boost::core::demangle((boost::core *)&v136, (const char *)(0x8000000212B511CELL & 0x7FFFFFFFFFFFFFFFLL));
                  if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v102 = &v136;
                  else
                    LOBYTE(v102) = v136.__r_.__value_.__s.__data_[0];
                  _BBULog(21, 0, "BBUpdaterController", "", "finish processing event: %s\n", v99, v100, v101, (char)v102);
                  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v136.__r_.__value_.__l.__data_);
                }
              }
            }
            else
            {
              dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
              if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
                goto LABEL_98;
            }
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            v103 = (std::__shared_weak_count *)v135.__r_.__value_.__l.__size_;
            if (v135.__r_.__value_.__l.__size_)
            {
              v104 = (unint64_t *)(v135.__r_.__value_.__l.__size_ + 8);
              do
                v105 = __ldaxr(v104);
              while (__stlxr(v105 - 1, v104));
              if (!v105)
              {
                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                std::__shared_weak_count::__release_weak(v103);
              }
            }
            goto LABEL_66;
          }
        }
      }
      v90 = BBUpdaterController::performFirstStageInternal(a1, 1, &v133, &__p);
      if (!v90)
        goto LABEL_66;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_185;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_185;
      }
      if (gBBULogVerbosity >= 6)
        _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v87, v88, v89, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_185:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        __dst = __p;
      v138 = v90;
      BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(a1, (uint64_t)&__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_66;
    case 4:
      v63 = *(BBUFeedback **)(a1 + 56);
      BBUFeedback::handleComment(v63, "entering %s", "StageContext::PersonalizeStageSecond");
      v64 = *((_QWORD *)v63 + 19);
      v65 = *((_QWORD *)v63 + 18);
      if (v64 == v65)
        v66 = 0;
      else
        v66 = ((v64 - v65) << 7) - 1;
      v67 = *((_QWORD *)v63 + 22);
      v68 = v67 + *((_QWORD *)v63 + 21);
      if (v66 == v68)
      {
        std::deque<BBUpdaterCommon::StageContext>::__add_back_capacity((_QWORD *)v63 + 17);
        v65 = *((_QWORD *)v63 + 18);
        v67 = *((_QWORD *)v63 + 22);
        v68 = *((_QWORD *)v63 + 21) + v67;
      }
      *(_DWORD *)(*(_QWORD *)(v65 + ((v68 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v68 & 0x3FF)) = 3;
      *((_QWORD *)v63 + 22) = v67 + 1;
      if (!*(_QWORD *)(a1 + 88))
      {
        exception = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 68, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x15Au, (ctu::LogMessageBuffer *)"Assertion failure(fProgrammer && \"Null programmer?\")", v124, v125, v126, v129);
LABEL_231:
      }
      v72 = (*(uint64_t (**)(BBUEUR10UpdateSource *))(*(_QWORD *)FirmwareDataSource + 80))(FirmwareDataSource);
      if (!v72)
      {
        v73 = *(_QWORD *)(a1 + 96);
        if (v73)
        {
          v74 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v73 + 16) + 24))(*(_QWORD *)(v73 + 16));
          (*(void (**)(BBUEUR10UpdateSource *, uint64_t))(*(_QWORD *)FirmwareDataSource + 200))(FirmwareDataSource, v74);
          v75 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 96) + 24) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 24));
          (*(void (**)(BBUEUR10UpdateSource *, uint64_t))(*(_QWORD *)FirmwareDataSource + 208))(FirmwareDataSource, v75);
        }
        v79 = BBUpdaterController::performSecondStageInternal(a1, 1, &v133, &__p);
        if (!v79)
        {
          v83 = BBUpdaterController::bootupInternal((BBULoader **)a1, &v133);
          if (!v83)
          {
            v35 = BBUpdaterController::performPingInternal(a1, 0);
            if (!v35)
              goto LABEL_64;
            if (gBBULogMaskGet(void)::once == -1)
            {
              if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
                goto LABEL_179;
            }
            else
            {
              dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
              if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
                goto LABEL_179;
            }
            if (gBBULogVerbosity >= 6)
              _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v84, v85, v86, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_179:
            std::string::basic_string[abi:ne180100]<0>(&v135, BBUReturnAsString::BBUReturnStrings[v35]);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Fail to ping baseband: ", &v135, &v136);
            v40 = capabilities::updater::intermittentFailureRetryCount(v116);
            if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_218;
            __dst = v136;
LABEL_219:
            v138 = __PAIR64__(v40, v35);
            BBUpdaterController::process_event<BBUpdaterControllerFSM::eventRetry>(a1, (uint64_t)&__dst);
LABEL_119:
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_121:
                if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_66;
LABEL_125:
                operator delete(v135.__r_.__value_.__l.__data_);
                goto LABEL_66;
              }
            }
            else if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_121;
            }
            operator delete(v136.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_66;
            goto LABEL_125;
          }
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
              goto LABEL_173;
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
              goto LABEL_173;
          }
          if (gBBULogVerbosity >= 6)
            _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v80, v81, v82, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_173:
          std::string::basic_string[abi:ne180100]<0>(&v135, BBUReturnAsString::BBUReturnStrings[v83]);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Fail to bootup baseband: ", &v135, &v136);
          v115 = capabilities::updater::intermittentFailureRetryCount(v114);
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
          {
            v118 = v115;
            std::string::__init_copy_ctor_external(&__dst, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
            v115 = v118;
          }
          else
          {
            __dst = v136;
          }
          v138 = __PAIR64__(v115, v83);
          BBUpdaterController::process_event<BBUpdaterControllerFSM::eventRetry>(a1, (uint64_t)&__dst);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_213:
              if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_214:
                *(_BYTE *)(a1 + 354) = 1;
                goto LABEL_66;
              }
LABEL_217:
              operator delete(v135.__r_.__value_.__l.__data_);
              goto LABEL_214;
            }
          }
          else if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_213;
          }
          operator delete(v136.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_214;
          goto LABEL_217;
        }
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
            goto LABEL_161;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
            goto LABEL_161;
        }
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v76, v77, v78, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_161:
        std::string::basic_string[abi:ne180100]<0>(&v130, BBUReturnAsString::BBUReturnStrings[v79]);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Fail to perform second stage: ", &v130, &v131);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": ", &v131, &cf);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v109 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v109 = __p.__r_.__value_.__l.__size_;
        v110 = std::string::append(&cf, (const std::string::value_type *)p_p, v109);
        v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
        v135.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v111;
        v110->__r_.__value_.__l.__size_ = 0;
        v110->__r_.__value_.__r.__words[2] = 0;
        v110->__r_.__value_.__r.__words[0] = 0;
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\n", &v135, &v136);
        v113 = capabilities::updater::intermittentFailureRetryCount(v112);
        if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        {
          v117 = v113;
          std::string::__init_copy_ctor_external(&__dst, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
          v113 = v117;
        }
        else
        {
          __dst = v136;
        }
        v138 = __PAIR64__(v113, v79);
        BBUpdaterController::process_event<BBUpdaterControllerFSM::eventRetry>(a1, (uint64_t)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_198:
            if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_199;
            goto LABEL_205;
          }
        }
        else if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_198;
        }
        operator delete(v136.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_199:
          if ((SHIBYTE(cf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_200;
          goto LABEL_206;
        }
LABEL_205:
        operator delete(v135.__r_.__value_.__l.__data_);
        if ((SHIBYTE(cf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_200:
          if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_201;
          goto LABEL_207;
        }
LABEL_206:
        operator delete(cf.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_201:
          if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_66;
LABEL_208:
          operator delete(v130.__r_.__value_.__l.__data_);
          goto LABEL_66;
        }
LABEL_207:
        operator delete(v131.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_66;
        goto LABEL_208;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_136;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_136;
      }
      if (gBBULogVerbosity >= 6)
        _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v69, v70, v71, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_136:
      std::string::basic_string[abi:ne180100]<0>(&v136, "Miss images for saveImages\n");
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__dst, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
      else
        __dst = v136;
      v138 = v72;
      BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(a1, (uint64_t)&__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      goto LABEL_66;
    case 8:
      v23 = *(BBUFeedback **)(a1 + 56);
      BBUFeedback::handleComment(v23, "entering %s", "StageContext::PersonalizeBooted");
      v24 = *((_QWORD *)v23 + 19);
      v25 = *((_QWORD *)v23 + 18);
      if (v24 == v25)
        v26 = 0;
      else
        v26 = ((v24 - v25) << 7) - 1;
      v27 = *((_QWORD *)v23 + 22);
      v28 = v27 + *((_QWORD *)v23 + 21);
      if (v26 == v28)
      {
        std::deque<BBUpdaterCommon::StageContext>::__add_back_capacity((_QWORD *)v23 + 17);
        v25 = *((_QWORD *)v23 + 18);
        v27 = *((_QWORD *)v23 + 22);
        v28 = *((_QWORD *)v23 + 21) + v27;
      }
      *(_DWORD *)(*(_QWORD *)(v25 + ((v28 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v28 & 0x3FF)) = 4;
      *((_QWORD *)v23 + 22) = v27 + 1;
      if (!(*(unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 48), 2, 1))
      {
        v35 = BBUpdaterController::bootupInternal((BBULoader **)a1, &v133);
        if (!v35)
        {
          v35 = BBUpdaterController::performPingInternal(a1, 0);
          if (!v35)
          {
LABEL_64:
            BBUpdaterController::performBootedStageInternal(a1, (uint64_t *)&v133);
            goto LABEL_66;
          }
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
              goto LABEL_30;
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
              goto LABEL_30;
          }
          if (gBBULogVerbosity >= 6)
            _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v36, v37, v38, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_30:
          std::string::basic_string[abi:ne180100]<0>(&v135, BBUReturnAsString::BBUReturnStrings[v35]);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Fail to ping baseband: ", &v135, &v136);
          v40 = capabilities::updater::intermittentFailureRetryCount(v39);
          if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            __dst = v136;
            goto LABEL_219;
          }
LABEL_218:
          v119 = v40;
          std::string::__init_copy_ctor_external(&__dst, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
          v40 = v119;
          goto LABEL_219;
        }
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
            goto LABEL_148;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
            goto LABEL_148;
        }
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v32, v33, v34, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_148:
        std::string::basic_string[abi:ne180100]<0>(&v135, BBUReturnAsString::BBUReturnStrings[v35]);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Fail to bootup baseband: ", &v135, &v136);
        v40 = capabilities::updater::intermittentFailureRetryCount(v107);
        if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          __dst = v136;
          goto LABEL_219;
        }
        goto LABEL_218;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_66;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_66;
      }
      if (gBBULogVerbosity >= 6)
        _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v29, v30, v31, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      goto LABEL_66;
    case 32:
      v41 = *(BBUFeedback **)(a1 + 56);
      BBUFeedback::handleComment(v41, "entering %s", "StageContext::PersonalizeEUICC");
      v45 = *((_QWORD *)v41 + 19);
      v46 = *((_QWORD *)v41 + 18);
      if (v45 == v46)
        v47 = 0;
      else
        v47 = ((v45 - v46) << 7) - 1;
      v48 = *((_QWORD *)v41 + 22);
      v49 = v48 + *((_QWORD *)v41 + 21);
      if (v47 == v49)
      {
        std::deque<BBUpdaterCommon::StageContext>::__add_back_capacity((_QWORD *)v41 + 17);
        v46 = *((_QWORD *)v41 + 18);
        v48 = *((_QWORD *)v41 + 22);
        v49 = *((_QWORD *)v41 + 21) + v48;
      }
      *(_DWORD *)(*(_QWORD *)(v46 + ((v49 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v49 & 0x3FF)) = 5;
      *((_QWORD *)v41 + 22) = v48 + 1;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
          goto LABEL_41;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
          goto LABEL_41;
      }
      if (gBBULogVerbosity >= 1)
        _BBULog(19, 1, "BBUpdaterController", "", "perform eUICC update\n", v42, v43, v44, v128);
LABEL_41:
      v50 = *(const void **)(a1 + 40);
      cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
      if (v50)
        CFRetain(v50);
      v54 = eUICC::Run((void *)(a1 + 152), (uint64_t)FirmwareDataSource, (const void **)&cf.__r_.__value_.__l.__data_);
      if (cf.__r_.__value_.__r.__words[0])
        CFRelease(cf.__r_.__value_.__l.__data_);
      if (v54)
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
            goto LABEL_140;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
          {
LABEL_140:
            if (gBBULogVerbosity >= 6)
              _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v51, v52, v53, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v135, BBUReturnAsString::BBUReturnStrings[v54]);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Failed performing eUICC: ", &v135, &v136);
        if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__dst, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
        else
          __dst = v136;
        v138 = v54;
        BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(a1, (uint64_t)&__dst);
        goto LABEL_119;
      }
      v55 = *(const void **)(a1 + 40);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
      if (v55)
        CFRetain(v55);
      v62 = eUICC::Done((const __CFDictionary **)&__dst);
      if (__dst.__r_.__value_.__r.__words[0])
        CFRelease(__dst.__r_.__value_.__l.__data_);
      if ((v62 & 1) != 0)
      {
        BBUpdaterController::getShouldFuseProvision(a1, &v133, v56, v57, v58, v59, v60, v61);
        goto LABEL_66;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_154;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_154;
      }
      if (gBBULogVerbosity > 5)
      {
        _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v59, v60, v61, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
        if (gBBULogMaskGet(void)::once != -1)
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
            goto LABEL_66;
          goto LABEL_155;
        }
      }
LABEL_154:
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
        goto LABEL_66;
LABEL_155:
      if (gBBULogVerbosity >= 1)
        _BBULog(19, 1, "BBUpdaterController", "", "eUICC is not done yet, waiting\n", v59, v60, v61, v128);
LABEL_66:
      BBUFeedback::exitStageContext(*(BBUFeedback **)(a1 + 56));
      if (FirmwareDataSource)
        (*(void (**)(BBUEUR10UpdateSource *))(*(_QWORD *)FirmwareDataSource + 16))(FirmwareDataSource);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    default:
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x1CAu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized BBU stage.\")", v121, v122, v123, v127);
      goto LABEL_231;
  }
}

void sub_212A600F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a30)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a30 + 16))(a30);
    if ((a36 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BBUpdaterController::performFirstStageInternal(uint64_t a1, int a2, _QWORD *a3, std::string *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BBUFeedback *v19;
  int v20;
  uint64_t v21;
  const __CFDictionary *v22;
  uint64_t (*v23)(uint64_t);
  BOOL *v24;
  CFTypeID v25;
  const __CFBoolean *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *exception;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void *value;
  char v46;

  v8 = *(_QWORD *)(a1 + 96);
  if (v8)
  {
    v9 = *a3;
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 24))(*(_QWORD *)(v8 + 16));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 200))(v9, v10);
    v11 = *a3;
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 96) + 24) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 24));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 208))(v11, v12);
  }
  v13 = a2 ^ 1u;
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, v13);
  if (!v14)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_28;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_28:
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v15, v16, v17, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      }
    }
    std::string::__assign_external(a4, "Firmware data does not contain programmer\n", 0x2AuLL);
    v21 = 35;
    goto LABEL_23;
  }
  if (!*(_QWORD *)(a1 + 80))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 11, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x86Au, (ctu::LogMessageBuffer *)"Assertion failure(fLoader && \"No valid BBULoader!\")", v41, v42, v43, v44);
  }
  v18 = v14;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 96) + 88) == 3
    && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 48))(*a3) & 1) == 0
    && (a2 & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 56), "Attempting to load an unpersonalized image on a fused radio\n");
    v19 = *(BBUFeedback **)(a1 + 56);
    v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 48))(*a3);
    BBUFeedback::handleComment(v19, "hasManifestSource() = %d, personalize = %d\n", v20, 0);
    v21 = 34;
    goto LABEL_23;
  }
  v46 = 0;
  value = 0;
  v22 = *(const __CFDictionary **)(a1 + 40);
  v23 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!v22)
    v23 = 0;
  if (!v23
    || !CFDictionaryGetValueIfPresent(v22, CFSTR("EraseEFS"), (const void **)&value)
    || (v24 = (BOOL *)value) == 0
    || (v25 = CFGetTypeID(value), v25 != CFBooleanGetTypeID())
    || (ctu::cf::assign((ctu::cf *)&v46, v24, v26), !v46)
    || BBUpdaterController::performFirstStageInternal(BOOL,std::unique_ptr<BBUUpdateSource> &,std::string &)::EFSErased == 1)
  {
    if (!*(_BYTE *)(a1 + 354))
    {
LABEL_20:
      v31 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), a1 + 152, v18, v13);
      if (!(_DWORD)v31)
      {
        v21 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 48))(*(_QWORD *)(a1 + 80), a1 + 152, v18);
        if (!(_DWORD)v21)
        {
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 40))(*(_QWORD *)(a1 + 64), a1 + 152);
          goto LABEL_23;
        }
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
            goto LABEL_39;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
          {
LABEL_39:
            if (gBBULogVerbosity >= 6)
              _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v35, v36, v37, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
          }
        }
        std::string::__assign_external(a4, "Failed starting loader.", 0x17uLL);
        goto LABEL_23;
      }
      v21 = v31;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
          goto LABEL_33;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        {
LABEL_33:
          if (gBBULogVerbosity >= 6)
            _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v32, v33, v34, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
        }
      }
      if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0)
      {
        a4->__r_.__value_.__l.__size_ = 22;
        a4 = (std::string *)a4->__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&a4->__r_.__value_.__s + 23) = 22;
      }
      strcpy((char *)a4, "Failed loading loader.");
      goto LABEL_23;
    }
  }
  v27 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 176))(*a3);
  if (!(_DWORD)v27)
  {
    BBUpdaterController::performFirstStageInternal(BOOL,std::unique_ptr<BBUUpdateSource> &,std::string &)::EFSErased = 1;
    *(_BYTE *)(a1 + 354) = 0;
    goto LABEL_20;
  }
  v21 = v27;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      goto LABEL_44;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
    {
LABEL_44:
      if (gBBULogVerbosity >= 6)
        _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v28, v29, v30, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
    }
  }
  std::string::__assign_external(a4, "failed erasing baseband filesystem\n", 0x23uLL);
LABEL_23:
  v38 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  return v21;
}

void sub_212A60A58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUpdaterController::performSecondStageInternal(uint64_t a1, uint64_t a2, _QWORD *a3, std::string *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const __CFDictionary *v13;
  uint64_t (*v14)(uint64_t);
  CFTypeID v15;
  std::string::size_type v16;
  capabilities::diag *v17;
  uint64_t v18;
  _BOOL4 v19;
  const __CFDictionary *v20;
  uint64_t (*v21)(uint64_t);
  BOOL *v22;
  CFTypeID v23;
  const __CFBoolean *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string::size_type v40;
  std::string::size_type v41;
  void *v42;
  const std::string::value_type *v43;
  std::string *p_value;
  std::string::size_type size;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::string::size_type v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::string::size_type v61;
  int v62;
  uint64_t v63;
  std::string v64;
  std::string v65;
  std::string value;
  std::string __p;
  char v68;

  v68 = 0;
  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 128))(*a3);
  memset(&__p, 0, sizeof(__p));
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 96) + 32) + 24))(&value);
  v9 = *a3;
  __p = value;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  v11 = *a3;
  v12 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 88);
  v13 = *(const __CFDictionary **)(a1 + 40);
  if (v13)
    v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  else
    v14 = 0;
  if (v14
    && (value.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL,
        CFDictionaryGetValueIfPresent(v13, CFSTR("apTicket"), (const void **)&value.__r_.__value_.__l.__data_))
    && (v15 = CFGetTypeID(value.__r_.__value_.__l.__data_), v15 == CFDataGetTypeID()))
  {
    v16 = value.__r_.__value_.__r.__words[0];
  }
  else
  {
    v16 = 0;
  }
  v17 = (capabilities::diag *)(*(uint64_t (**)(uint64_t, std::string *, uint64_t, BOOL, std::string::size_type, _QWORD))(*(_QWORD *)v11 + 168))(v11, &__p, v10, v12 == 3, v16, *(unsigned __int8 *)(a1 + 355));
  v18 = (uint64_t)v17;
  if ((_DWORD)v17)
    goto LABEL_59;
  if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
  {
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
      goto LABEL_12;
LABEL_15:
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
    if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)
      goto LABEL_13;
    goto LABEL_16;
  }
  dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
  if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS != -1)
    goto LABEL_15;
LABEL_12:
  if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)
  {
LABEL_13:
    capabilities::diag::supportedInterfaces(v17);
    v19 = capabilities::diag::operator&() != 0;
    goto LABEL_25;
  }
LABEL_16:
  v65.__r_.__value_.__s.__data_[0] = 0;
  value.__r_.__value_.__r.__words[0] = 0;
  v20 = *(const __CFDictionary **)(a1 + 40);
  if (v20)
    v21 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  else
    v21 = 0;
  if (v21)
  {
    if (CFDictionaryGetValueIfPresent(v20, CFSTR("forceHSIC"), (const void **)&value.__r_.__value_.__l.__data_))
    {
      v22 = (BOOL *)value.__r_.__value_.__r.__words[0];
      if (value.__r_.__value_.__r.__words[0])
      {
        v23 = CFGetTypeID(value.__r_.__value_.__l.__data_);
        if (v23 == CFBooleanGetTypeID())
        {
          v17 = (capabilities::diag *)ctu::cf::assign((ctu::cf *)&v65, v22, v24);
          if (v65.__r_.__value_.__s.__data_[0])
            goto LABEL_13;
        }
      }
    }
  }
  v19 = 0;
LABEL_25:
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 56), "Setting DIAG over HSIC? %d", v19);
  v25 = *(_BYTE **)(a1 + 88);
  v25[64] = v19;
  v26 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
  v27 = *(unsigned int *)(a1 + 260);
  LODWORD(v63) = 1;
  HIDWORD(v63) = BBUpdaterController::getNVRestoreSetting(*(BBUpdaterController **)(a1 + 40), v28, v29, v30, v31, v32, v33, v34);
  LOBYTE(v62) = 1;
  v35 = (*(uint64_t (**)(_BYTE *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int, char *, uint64_t))(*(_QWORD *)v25 + 40))(v25, v10, 0, a2, v8, v26, v27, 1, v62, &v68, v63);
  v18 = v35;
  if (!(_DWORD)a2)
  {
    if (!(_DWORD)v35)
      goto LABEL_55;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_39;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_39;
    }
    if (gBBULogVerbosity >= 6)
      _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v36, v37, v38, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_39:
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88));
    if ((_DWORD)v18 == 65)
      v43 = "Wrong firmware, doesn’t match hardware ID ";
    else
      v43 = "Failed sending images ";
    std::string::__assign_external(a4, v43);
    std::string::basic_string[abi:ne180100]<0>(&value, BBUReturnAsString::BBUReturnStrings[v18]);
    if ((value.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_value = &value;
    else
      p_value = (std::string *)value.__r_.__value_.__r.__words[0];
    if ((value.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(value.__r_.__value_.__r.__words[2]);
    else
      size = value.__r_.__value_.__l.__size_;
    std::string::append(a4, (const std::string::value_type *)p_value, size);
    if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
      operator delete(value.__r_.__value_.__l.__data_);
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_87;
LABEL_106:
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
LABEL_87:
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      LOBYTE(v57) = (_BYTE)a4;
    else
      v57 = a4->__r_.__value_.__r.__words[0];
LABEL_77:
    _BBULog(19, 0xFFFFFFFFLL, "BBUpdaterController", "", "%s", v46, v47, v48, v57);
    goto LABEL_57;
  }
  if ((_DWORD)v35)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_82;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_82;
    }
    if (gBBULogVerbosity >= 6)
      _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v36, v37, v38, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_82:
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88));
    std::string::basic_string[abi:ne180100]<0>(&v65, BBUReturnAsString::BBUReturnStrings[v18]);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Failed personalizing in second stage ", &v65, &value);
    if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0)
      operator delete(a4->__r_.__value_.__l.__data_);
    *a4 = value;
    *((_BYTE *)&value.__r_.__value_.__s + 23) = 0;
    value.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_87;
    goto LABEL_106;
  }
  if (!v68)
    goto LABEL_55;
  v39 = *a3;
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 88) + 112))(&value);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v39 + 192))(v39, &value);
  v40 = value.__r_.__value_.__r.__words[0];
  if (value.__r_.__value_.__r.__words[0])
  {
    v41 = value.__r_.__value_.__l.__size_;
    v42 = (void *)value.__r_.__value_.__r.__words[0];
    if (value.__r_.__value_.__l.__size_ != value.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v41 - 1) < 0)
          operator delete(*(void **)(v41 - 24));
        v41 -= 24;
      }
      while (v41 != v40);
      v42 = (void *)value.__r_.__value_.__r.__words[0];
    }
    value.__r_.__value_.__l.__size_ = v40;
    operator delete(v42);
  }
  v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 136))(*a3);
  if (!(_DWORD)v18)
  {
LABEL_55:
    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88));
    if (!(_DWORD)v18)
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 40))(*(_QWORD *)(a1 + 64), a1 + 152);
      v18 = 0;
      goto LABEL_57;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_66;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_66:
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v52, v53, v54, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v65, BBUReturnAsString::BBUReturnStrings[v18]);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Failed disconnecting programmer ", &v65, &value);
    if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0)
      operator delete(a4->__r_.__value_.__l.__data_);
    *a4 = value;
    *((_BYTE *)&value.__r_.__value_.__s + 23) = 0;
    value.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      LOBYTE(v57) = (_BYTE)a4;
    else
      v57 = a4->__r_.__value_.__r.__words[0];
    goto LABEL_77;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_94;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_94;
  }
  if (gBBULogVerbosity >= 6)
    _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v49, v50, v51, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_94:
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88));
  std::string::basic_string[abi:ne180100]<0>(&v64, BBUReturnAsString::BBUReturnStrings[v18]);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Failed sending images ", &v64, &v65);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\n", &v65, &value);
  if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0)
    operator delete(a4->__r_.__value_.__l.__data_);
  *a4 = value;
  *((_BYTE *)&value.__r_.__value_.__s + 23) = 0;
  value.__r_.__value_.__s.__data_[0] = 0;
  if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_98;
LABEL_104:
    operator delete(v64.__r_.__value_.__l.__data_);
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_99;
LABEL_105:
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    goto LABEL_99;
  }
  operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_104;
LABEL_98:
  if (gBBULogMaskGet(void)::once != -1)
    goto LABEL_105;
LABEL_99:
  if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    LOBYTE(v61) = (_BYTE)a4;
  else
    v61 = a4->__r_.__value_.__r.__words[0];
  _BBULog(19, 0xFFFFFFFFLL, "BBUpdaterController", "", "%s", v58, v59, v60, v61);
LABEL_57:
  v55 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
LABEL_59:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return v18;
}

void sub_212A613D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a35 < 0)
  {
    operator delete(a30);
    if (v35)
      goto LABEL_7;
  }
  else if (v35)
  {
LABEL_7:
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void BBUpdaterController::process_event<BBUpdaterControllerFSM::eventRetry>(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  int *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void **v7;
  void **v8;
  char v9;
  __int128 v10;
  char *v11;
  size_t v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *__p[3];
  void *__dst[2];
  uint64_t v30;
  int *v31;
  std::__shared_weak_count *v32;

  v4 = *(int **)(a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  v31 = v4;
  v32 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  __dst[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v30 = 0x7AAAAAAAAAAAAAALL;
  strcpy((char *)__dst, "unknown");
  memset(__p, 170, sizeof(__p));
  (*(void (**)(void **__return_ptr, int *))(*(_QWORD *)v4 + 24))(__p, v4);
  v7 = (void **)__p[0];
  v8 = (void **)((char *)__p[0] + 24 * v4[8]);
  if (__dst != v8)
  {
    v9 = *((_BYTE *)v8 + 23);
    if (SHIBYTE(v30) < 0)
    {
      if (v9 >= 0)
        v11 = (char *)__p[0] + 24 * v4[8];
      else
        v11 = (char *)*v8;
      if (v9 >= 0)
        v12 = *((unsigned __int8 *)v8 + 23);
      else
        v12 = (size_t)v8[1];
      std::string::__assign_no_alias<false>(__dst, v11, v12);
    }
    else if ((*((_BYTE *)v8 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(__dst, *v8, (size_t)v8[1]);
    }
    else
    {
      v10 = *(_OWORD *)v8;
      v30 = (uint64_t)v8[2];
      *(_OWORD *)__dst = v10;
    }
    v7 = (void **)__p[0];
  }
  if (v7)
  {
    v13 = (void **)__p[1];
    v14 = v7;
    if (__p[1] != v7)
    {
      do
      {
        if (*((char *)v13 - 1) < 0)
          operator delete(*(v13 - 3));
        v13 -= 3;
      }
      while (v13 != v7);
      v14 = (void **)__p[0];
    }
    __p[1] = v7;
    operator delete(v14);
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_33;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_33;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    boost::core::demangle((boost::core *)__p, (const char *)(0x8000000212B513EDLL & 0x7FFFFFFFFFFFFFFFLL));
    if (SHIBYTE(__p[2]) >= 0)
      v18 = __p;
    else
      LOBYTE(v18) = __p[0];
    _BBULog(21, 0, "BBUpdaterController", "", "processing event: %s, current state %d [%s]\n", v15, v16, v17, (char)v18);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
LABEL_33:
  v19 = (uint64_t)v31;
  if (!boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::is_event_handling_blocked_helper<BBUpdaterControllerFSM::eventRetry>((uint64_t)v31)
    && boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventRetry,BBUpdaterControllerFSM::eventRetry>(v19, a2))
  {
    v20 = ((uint64_t (*)(uint64_t, _QWORD))_MergedGlobals_1[*(_DWORD *)(v19 + 32) + 240])(v19, 0);
    if (!(((unsigned int (*)(uint64_t, uint64_t))_MergedGlobals_1[*(_DWORD *)(v19 + 36) + 240])(v19, 1) | v20))
    {
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry>(v19, v19, *(_DWORD *)(v19 + 32));
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry>(v19, v19, *(_DWORD *)(v19 + 36));
    }
    *(_BYTE *)(v19 + 100) = 0;
    boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(v19);
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_46;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_46;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    boost::core::demangle((boost::core *)__p, (const char *)(0x8000000212B513EDLL & 0x7FFFFFFFFFFFFFFFLL));
    if (SHIBYTE(__p[2]) >= 0)
      v24 = __p;
    else
      LOBYTE(v24) = __p[0];
    _BBULog(21, 0, "BBUpdaterController", "", "finish processing event: %s\n", v21, v22, v23, (char)v24);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
LABEL_46:
  if (SHIBYTE(v30) < 0)
    operator delete(__dst[0]);
  v25 = v32;
  if (v32)
  {
    v26 = (unint64_t *)&v32->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_212A6186C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0)
  {
    operator delete(__p);
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t BBUpdaterController::bootupInternal(BBULoader **a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t InfoFirstStageInternal;
  BBUFeedback *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string __p;
  std::string v15;
  int v16;
  int v17;
  std::string v18;

  memset(&v18, 0, sizeof(v18));
  InfoFirstStageInternal = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
  if ((_DWORD)InfoFirstStageInternal)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_12;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_12:
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v4, v5, v6, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Miss images for bootupInternal\n");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v15 = __p;
    v16 = InfoFirstStageInternal;
    v17 = 0;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)a1, (uint64_t)&v15);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_7;
  }
  BBUFeedback::handleBeginPhase(a1[7], "bootup");
  InfoFirstStageInternal = BBUpdaterController::queryInfoFirstStageInternal(a1, v8);
  BBUFeedback::handleComment(a1[7], "queryInfoFirstStageInternal ret status is %d", InfoFirstStageInternal);
  if (!(_DWORD)InfoFirstStageInternal)
  {
    InfoFirstStageInternal = BBUpdaterController::pushImagesInternal((uint64_t)a1, a2, 0, &v18);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v18;
    else
      v12 = (std::string *)v18.__r_.__value_.__r.__words[0];
    BBUFeedback::handleComment(a1[7], "pushImagesInternal ret status is %d: %s\n", InfoFirstStageInternal, (const char *)v12);
    goto LABEL_7;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_7;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_7;
  }
  if (gBBULogVerbosity >= 6)
    _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v9, v10, v11, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_7:
  (*(void (**)(BBULoader *, uint64_t))(*(_QWORD *)a1[7] + 16))(a1[7], InfoFirstStageInternal);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return InfoFirstStageInternal;
}

void sub_212A61BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BBUpdaterController::performPingInternal(uint64_t a1, unint64_t a2)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9;
  uint64_t TransportNoEvents;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::chrono::nanoseconds *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  char v32;
  std::chrono::nanoseconds __ns[2];
  __int16 v34;
  char v35;
  uint64_t block;
  void *v37;

  v2 = a2;
  v4 = HIDWORD(a2);
  v5 = capabilities::updater::pingDelay((capabilities::updater *)a1);
  if (v2)
    v6 = v4;
  else
    v6 = v5;
  if (v6 >= 1)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 56), "Waiting %llu milliseconds before first ping", v6);
    if (v6 == 0x8637BD057A0)
      v7 = 0;
    else
      v7 = -127;
    if ((unint64_t)v6 > 0x8637BD057A0)
      v7 = 1;
    if ((unint64_t)v6 < 0x8637BD057A0)
      v7 = -1;
    v8 = v7 >= 0 || v7 == -127;
    v9 = 1000000 * v6;
    if (v8)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    __ns[0].__rep_ = v9;
    std::this_thread::sleep_for (__ns);
  }
  TransportNoEvents = BBUpdaterController::createTransportNoEvents(a1, 0, 8);
  if ((_DWORD)TransportNoEvents)
  {
    v21 = TransportNoEvents;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_25:
        if (gBBULogVerbosity >= 6)
        {
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v11, v12, v13, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
          if (gBBULogMaskGet(void)::once != -1)
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        }
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_25;
    }
    std::string::basic_string[abi:ne180100]<0>(__ns, BBUReturnAsString::BBUReturnStrings[v21]);
    if (v35 >= 0)
      v25 = __ns;
    else
      LOBYTE(v25) = __ns[0].__rep_;
    _BBULog(19, 0xFFFFFFFFLL, "BBUpdaterController", "", "Fail to create transport %s\n", v22, v23, v24, (char)v25);
    if (v35 < 0)
      operator delete((void *)__ns[0].__rep_);
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    v26 = qword_253D31DC8;
    if (!qword_253D31DC8)
    {
      BBUError::create_default_global((std::__shared_weak_count_vtbl **)__ns);
      std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_253D31DC8, (__int128 *)&__ns[0].__rep_);
      std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)__ns);
      v26 = qword_253D31DC8;
    }
    block = v26;
    v37 = off_253D31DD0;
    if (off_253D31DD0)
    {
      v27 = (unint64_t *)((char *)off_253D31DD0 + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    std::string::basic_string[abi:ne180100]<0>(__ns, "Fail to create transport\n");
    goto LABEL_50;
  }
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), a1 + 152);
  if (!(_DWORD)v14)
  {
    TelephonyBasebandGetReset();
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v35 = 17;
    *(_OWORD *)&__ns[0].__rep_ = *(_OWORD *)"kBBUReturnSuccess";
    v34 = str_8[16];
    _BBULog(19, 0xFFFFFFFFLL, "BBUpdaterController", "", "BB ping return status: %s\n", v18, v19, v20, (char)__ns);
    if (v35 < 0)
      operator delete((void *)__ns[0].__rep_);
    return 0;
  }
  v21 = v14;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
    {
LABEL_41:
      if (gBBULogVerbosity >= 6)
      {
        _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v15, v16, v17, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      }
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      goto LABEL_41;
  }
  _BBULog(19, 0xFFFFFFFFLL, "BBUpdaterController", "", "Timeout on waiting for BB init status\n", v15, v16, v17, v32);
  pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  v26 = qword_253D31DC8;
  if (!qword_253D31DC8)
  {
    BBUError::create_default_global((std::__shared_weak_count_vtbl **)__ns);
    std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_253D31DC8, (__int128 *)&__ns[0].__rep_);
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)__ns);
    v26 = qword_253D31DC8;
  }
  block = v26;
  v37 = off_253D31DD0;
  if (off_253D31DD0)
  {
    v29 = (unint64_t *)((char *)off_253D31DD0 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  std::string::basic_string[abi:ne180100]<0>(__ns, "Timeout on waiting for BB init status\n");
LABEL_50:
  BBUError::addError(v26, (uint64_t)__ns, v21);
  if (v35 < 0)
    operator delete((void *)__ns[0].__rep_);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&block);
  return v21;
}

void sub_212A6239C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  _Unwind_Resume(a1);
}

void BBUpdaterController::performBootedStageInternal(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void *v16;
  int v17;
  std::string::size_type v18;
  int *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string::size_type v22;
  std::string::size_type v23;
  char v24;
  __int128 v25;
  int ShouldFuseProvision;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  size_t v31;
  std::string::size_type size;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::string *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  char v45;
  char v46;
  char v47;
  CFTypeRef cf;
  std::string v49;
  std::string __p;
  int v51;
  int v52;
  const void *v53;
  std::string v54;

  if (!BBUpdaterController::shouldPerformEUICC((const __CFDictionary **)a1))
    goto LABEL_30;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
      goto LABEL_6;
  }
  if (gBBULogVerbosity >= 1)
    _BBULog(19, 1, "BBUpdaterController", "", "Running eUICC\n", v7, v8, v9, v46);
LABEL_6:
  v10 = *a2;
  v11 = *(const void **)(a1 + 40);
  v53 = v11;
  if (v11)
    CFRetain(v11);
  v15 = eUICC::Run((void *)(a1 + 152), v10, &v53);
  if (v53)
    CFRelease(v53);
  if (v15)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_84;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_84;
    }
    if (gBBULogVerbosity >= 6)
      _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v12, v13, v14, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_84:
    std::string::basic_string[abi:ne180100]<0>(&v49, BBUReturnAsString::BBUReturnStrings[v15]);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Failed running eUICC: ", &v49, &v54);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
    else
      __p = v54;
    v51 = v15;
    v52 = 0;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(a1, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_89:
        if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_93;
      }
    }
    else if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_89;
    }
    operator delete(v54.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_93:
    operator delete(v49.__r_.__value_.__l.__data_);
    return;
  }
  v16 = *(const void **)(a1 + 40);
  cf = v16;
  if (v16)
    CFRetain(v16);
  if ((eUICC::Done((const __CFDictionary **)&cf) & 1) != 0)
  {
    if (cf)
      CFRelease(cf);
    goto LABEL_30;
  }
  v17 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 88);
  if (cf)
    CFRelease(cf);
  if (v17 != 3)
  {
LABEL_30:
    ShouldFuseProvision = BBUpdaterController::getShouldFuseProvision(a1, a2, v4, v5, v6, v7, v8, v9);
    if (!ShouldFuseProvision)
      return;
    v45 = ShouldFuseProvision;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_74;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_74:
        if (gBBULogVerbosity >= 6)
        {
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v27, v28, v29, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
          if (gBBULogMaskGet(void)::once != -1)
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        }
      }
    }
    _BBULog(19, 0xFFFFFFFFLL, "BBUpdaterController", "", "getShouldFuseProv %d\n", v27, v28, v29, v45);
    return;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
      goto LABEL_23;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
      goto LABEL_23;
  }
  if (gBBULogVerbosity >= 1)
    _BBULog(19, 1, "BBUpdaterController", "", "eUICC is not done yet\n", v7, v8, v9, v46);
LABEL_23:
  v19 = *(int **)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 24);
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  v49.__r_.__value_.__l.__size_ = v18;
  if (v18)
  {
    v20 = (unint64_t *)(v18 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  __p.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  __p.__r_.__value_.__r.__words[2] = 0x7AAAAAAAAAAAAAALL;
  strcpy((char *)&__p, "unknown");
  memset(&v54, 170, sizeof(v54));
  (*(void (**)(std::string *__return_ptr, int *))(*(_QWORD *)v19 + 24))(&v54, v19);
  v22 = v54.__r_.__value_.__r.__words[0];
  v23 = v54.__r_.__value_.__r.__words[0] + 24 * v19[8];
  if (&__p != (std::string *)v23)
  {
    v24 = *(_BYTE *)(v23 + 23);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v24 >= 0)
        v30 = (void *)(v54.__r_.__value_.__r.__words[0] + 24 * v19[8]);
      else
        v30 = *(void **)v23;
      if (v24 >= 0)
        v31 = *(unsigned __int8 *)(v23 + 23);
      else
        v31 = *(_QWORD *)(v23 + 8);
      std::string::__assign_no_alias<false>((void **)&__p.__r_.__value_.__l.__data_, v30, v31);
    }
    else if ((*(_BYTE *)(v23 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(&__p, *(void **)v23, *(_QWORD *)(v23 + 8));
    }
    else
    {
      v25 = *(_OWORD *)v23;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v23 + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v25;
    }
    v22 = v54.__r_.__value_.__r.__words[0];
  }
  if (v22)
  {
    size = v54.__r_.__value_.__l.__size_;
    v33 = (void *)v22;
    if (v54.__r_.__value_.__l.__size_ != v22)
    {
      do
      {
        if (*(char *)(size - 1) < 0)
          operator delete(*(void **)(size - 24));
        size -= 24;
      }
      while (size != v22);
      v33 = (void *)v54.__r_.__value_.__r.__words[0];
    }
    v54.__r_.__value_.__l.__size_ = v22;
    operator delete(v33);
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_57;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_57;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    boost::core::demangle((boost::core *)&v54, (const char *)(0x8000000212B51C40 & 0x7FFFFFFFFFFFFFFFLL));
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &v54;
    else
      LOBYTE(v37) = v54.__r_.__value_.__s.__data_[0];
    _BBULog(21, 0, "BBUpdaterController", "", "processing event: %s, current state %d [%s]\n", v34, v35, v36, (char)v37);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
  }
LABEL_57:
  boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventEUICC>((uint64_t)v49.__r_.__value_.__l.__data_, (uint64_t)&v47, 1);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
    {
LABEL_59:
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        boost::core::demangle((boost::core *)&v54, (const char *)(0x8000000212B51C40 & 0x7FFFFFFFFFFFFFFFLL));
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = &v54;
        else
          LOBYTE(v41) = v54.__r_.__value_.__s.__data_[0];
        _BBULog(21, 0, "BBUpdaterController", "", "finish processing event: %s\n", v38, v39, v40, (char)v41);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
      goto LABEL_59;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v42 = (std::__shared_weak_count *)v49.__r_.__value_.__l.__size_;
  if (v49.__r_.__value_.__l.__size_)
  {
    v43 = (unint64_t *)(v49.__r_.__value_.__l.__size_ + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
}

void sub_212A62B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (*(char *)(v25 - 49) < 0)
  {
    operator delete(*(void **)(v25 - 72));
    if ((a19 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a19 & 0x80000000) == 0)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BBUpdaterController::pushImagesInternal(uint64_t a1, _QWORD *a2, int a3, std::string *a4)
{
  capabilities::updater *StageInternal;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  BBUBootLogger *v22;
  uint64_t v23;
  int v24;
  capabilities::updater *v25;
  uint64_t v26;
  std::string::size_type v27;
  std::string::size_type v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  capabilities::updater *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::string::size_type v48;
  void *exception;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  std::string v54;
  std::string __p;

  if (capabilities::radio::supportsBasebandStateController((capabilities::radio *)a1))
    TelephonyBasebandSetBasebandState();
  StageInternal = (capabilities::updater *)BBUpdaterController::performFirstStageInternal(a1, 0, a2, a4);
  if ((_DWORD)StageInternal)
  {
    v42 = (uint64_t)StageInternal;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_34;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_34;
    }
    if (gBBULogVerbosity < 6)
      goto LABEL_34;
    goto LABEL_44;
  }
  if (capabilities::updater::supportsMHIBootLogger(StageInternal))
  {
    v12 = *(_DWORD *)(a1 + 340);
    if (v12)
    {
      v13 = *(_QWORD *)(a1 + 56);
      v14 = (std::__shared_weak_count_vtbl *)operator new(0x90uLL);
      BBUBootLogger::BBUBootLogger((uint64_t)v14, v12, v13);
      __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
      __p.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
      std::shared_ptr<BBUBootLogger>::shared_ptr[abi:ne180100]<BBUBootLogger,std::shared_ptr<BBUBootLogger> ctu::SharedSynchronizable<BBUBootLogger>::make_shared_ptr<BBUBootLogger>(BBUBootLogger*)::{lambda(BBUBootLogger*)#1},void>((std::__shared_weak_count_vtbl **)&__p, v14);
      v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      v16 = *(std::__shared_weak_count **)(a1 + 144);
      *(_OWORD *)(a1 + 136) = v15;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v22 = *(BBUBootLogger **)(a1 + 136);
      if (v22)
        BBUBootLogger::openTransport(v22);
    }
  }
  StageInternal = (capabilities::updater *)BBUpdaterController::queryInfoSecondStageInternal(a1, 0, a2);
  if ((_DWORD)StageInternal)
  {
    v42 = (uint64_t)StageInternal;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_34;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_34;
    }
    if (gBBULogVerbosity < 6)
      goto LABEL_34;
LABEL_44:
    StageInternal = (capabilities::updater *)_BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v9, v10, v11, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
    goto LABEL_34;
  }
  v23 = *(_QWORD *)(a1 + 88);
  if (!v23)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 68, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0xA81u, (ctu::LogMessageBuffer *)"Assertion failure(fProgrammer && \"No valid BBU Programmer!\")", v50, v51, v52, v53);
  }
  v24 = *(_DWORD *)(a1 + 356);
  *(_BYTE *)(v23 + 64) = v24 == 4;
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 56), "Preferred interface for DIAG? 0x%x", v24);
  if (!a3 || !capabilities::updater::shouldSkipRestoreForUnfused(v25))
    goto LABEL_31;
  v26 = *a2;
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 88) + 112))(&__p);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v26 + 192))(v26, &__p);
  v27 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    v28 = __p.__r_.__value_.__l.__size_;
    v29 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v28 - 1) < 0)
          operator delete(*(void **)(v28 - 24));
        v28 -= 24;
      }
      while (v28 != v27);
      v29 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v27;
    operator delete(v29);
  }
  v30 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 136))(*a2);
  if (!(_DWORD)v30)
  {
LABEL_31:
    v34 = *(_QWORD *)(a1 + 96);
    if (v34)
    {
      v35 = *a2;
      v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v34 + 16) + 24))(*(_QWORD *)(v34 + 16));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 200))(v35, v36);
      v37 = *a2;
      v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 96) + 24) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 24));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 208))(v37, v38);
    }
    StageInternal = (capabilities::updater *)BBUpdaterController::performSecondStageInternal(a1, 0, a2, a4);
    v42 = 0;
    if (!(_DWORD)StageInternal)
      goto LABEL_34;
    v44 = StageInternal;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_47;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_47:
        if (gBBULogVerbosity >= 6)
          StageInternal = (capabilities::updater *)_BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v39, v40, v41, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      }
    }
    v42 = (uint64_t)v44;
    goto LABEL_34;
  }
  v42 = v30;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      goto LABEL_52;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
    {
LABEL_52:
      if (gBBULogVerbosity >= 6)
        _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v31, v32, v33, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88));
  std::string::basic_string[abi:ne180100]<0>(&v54, BBUReturnAsString::BBUReturnStrings[v42]);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Failed saving images ", &v54, &__p);
  if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0)
    operator delete(a4->__r_.__value_.__l.__data_);
  *a4 = __p;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    LOBYTE(v48) = (_BYTE)a4;
  else
    v48 = a4->__r_.__value_.__r.__words[0];
  StageInternal = (capabilities::updater *)_BBULog(19, 0xFFFFFFFFLL, "BBUpdaterController", "", "%s", v45, v46, v47, v48);
LABEL_34:
  if (capabilities::radio::supportsBasebandStateController(StageInternal))
    TelephonyBasebandSetBasebandState();
  return v42;
}

void sub_212A632C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_212A63304(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void BBUpdaterController::bootup(BBUpdaterController *this)
{
  BBUFeedback *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BBUEUR10UpdateSource *FirmwareDataSource;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BBUEUR10UpdateSource *v12;
  capabilities::updater *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  CFTypeID v18;
  const __CFNumber *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::string cf;
  std::string value;
  uint64_t v26;
  BBUEUR10UpdateSource *v27;

  v2 = (BBUFeedback *)*((_QWORD *)this + 7);
  BBUFeedback::handleComment(v2, "entering %s", "StageContext::Boot");
  v3 = *((_QWORD *)v2 + 19);
  v4 = *((_QWORD *)v2 + 18);
  if (v3 == v4)
    v5 = 0;
  else
    v5 = ((v3 - v4) << 7) - 1;
  v6 = *((_QWORD *)v2 + 22);
  v7 = v6 + *((_QWORD *)v2 + 21);
  if (v5 == v7)
  {
    std::deque<BBUpdaterCommon::StageContext>::__add_back_capacity((_QWORD *)v2 + 17);
    v4 = *((_QWORD *)v2 + 18);
    v6 = *((_QWORD *)v2 + 22);
    v7 = *((_QWORD *)v2 + 21) + v6;
  }
  *(_DWORD *)(*(_QWORD *)(v4 + ((v7 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v7 & 0x3FF)) = 1;
  *((_QWORD *)v2 + 22) = v6 + 1;
  FirmwareDataSource = BBUpdaterController::getFirmwareDataSource(this, 1);
  v12 = FirmwareDataSource;
  v27 = FirmwareDataSource;
  if (!FirmwareDataSource)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_24;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_24:
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v9, v10, v11, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&cf, "Fail to get update source for bootup\n");
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&value, cf.__r_.__value_.__l.__data_, cf.__r_.__value_.__l.__size_);
    else
      value = cf;
    v26 = 35;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)this, (uint64_t)&value);
    if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
      operator delete(value.__r_.__value_.__l.__data_);
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cf.__r_.__value_.__l.__data_);
    goto LABEL_19;
  }
  capabilities::diag::supportedInterfaces(FirmwareDataSource);
  if (capabilities::diag::operator&())
    *((_DWORD *)this + 89) = 1;
  v13 = (capabilities::updater *)BBUpdaterController::bootupInternal((BBULoader **)this, &v27);
  if ((_DWORD)v13)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_19;
    }
    if (gBBULogVerbosity >= 6)
      _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v14, v15, v16, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
  }
  else
  {
    if (!capabilities::updater::shouldWaitForReadyAfterBoot(v13))
      goto LABEL_18;
    value.__r_.__value_.__r.__words[0] = 0;
    if (!CFDictionaryGetValueIfPresent(*((CFDictionaryRef *)this + 5), CFSTR("waitForReady"), (const void **)&value.__r_.__value_.__l.__data_)|| !CFBooleanGetValue((CFBooleanRef)value.__r_.__value_.__l.__data_))
    {
      goto LABEL_18;
    }
    v23 = 2863311360;
    cf.__r_.__value_.__r.__words[0] = 0;
    if (CFDictionaryGetValueIfPresent(*((CFDictionaryRef *)this + 5), CFSTR("waitForReadyDelayMilliseconds"), (const void **)&cf.__r_.__value_.__l.__data_))
    {
      LOBYTE(v23) = 1;
      v17 = (unsigned int *)cf.__r_.__value_.__r.__words[0];
      if (cf.__r_.__value_.__r.__words[0])
      {
        v18 = CFGetTypeID(cf.__r_.__value_.__l.__data_);
        if (v18 == CFNumberGetTypeID())
          ctu::cf::assign((ctu::cf *)((char *)&v23 + 4), v17, v19);
      }
    }
    if (!BBUpdaterController::performPingInternal((uint64_t)this, v23))
    {
LABEL_18:
      CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 4), CFSTR("done"), (const void *)*MEMORY[0x24BDBD270]);
      BBUpdaterController::process_event<BBUpdaterControllerFSM::eventContinue>(*((int **)this + 2), *((std::__shared_weak_count **)this + 3), (uint64_t)&value);
      goto LABEL_19;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_19;
    }
    if (gBBULogVerbosity >= 6)
      _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v20, v21, v22, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
  }
LABEL_19:
  BBUFeedback::exitStageContext(*((BBUFeedback **)this + 7));
  if (v12)
    (*(void (**)(BBUEUR10UpdateSource *))(*(_QWORD *)v12 + 16))(v12);
}

void sub_212A63738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void BBUpdaterController::process_event<BBUpdaterControllerFSM::eventContinue>(int *a1, std::__shared_weak_count *a2, uint64_t a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  void **v7;
  void **v8;
  char v9;
  __int128 v10;
  char *v11;
  size_t v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[3];
  void *__dst[2];
  uint64_t v28;
  int *v29;
  std::__shared_weak_count *v30;

  v29 = a1;
  v30 = a2;
  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  __dst[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v28 = 0x7AAAAAAAAAAAAAALL;
  strcpy((char *)__dst, "unknown");
  memset(__p, 170, sizeof(__p));
  (*(void (**)(void **__return_ptr, int *))(*(_QWORD *)a1 + 24))(__p, a1);
  v7 = (void **)__p[0];
  v8 = (void **)((char *)__p[0] + 24 * a1[8]);
  if (__dst != v8)
  {
    v9 = *((_BYTE *)v8 + 23);
    if (SHIBYTE(v28) < 0)
    {
      if (v9 >= 0)
        v11 = (char *)__p[0] + 24 * a1[8];
      else
        v11 = (char *)*v8;
      if (v9 >= 0)
        v12 = *((unsigned __int8 *)v8 + 23);
      else
        v12 = (size_t)v8[1];
      std::string::__assign_no_alias<false>(__dst, v11, v12);
    }
    else if ((*((_BYTE *)v8 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(__dst, *v8, (size_t)v8[1]);
    }
    else
    {
      v10 = *(_OWORD *)v8;
      v28 = (uint64_t)v8[2];
      *(_OWORD *)__dst = v10;
    }
    v7 = (void **)__p[0];
  }
  if (v7)
  {
    v13 = (void **)__p[1];
    v14 = v7;
    if (__p[1] != v7)
    {
      do
      {
        if (*((char *)v13 - 1) < 0)
          operator delete(*(v13 - 3));
        v13 -= 3;
      }
      while (v13 != v7);
      v14 = (void **)__p[0];
    }
    __p[1] = v7;
    operator delete(v14);
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_33;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_33;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    boost::core::demangle((boost::core *)__p, (const char *)(0x8000000212B515EELL & 0x7FFFFFFFFFFFFFFFLL));
    if (SHIBYTE(__p[2]) >= 0)
      v18 = __p;
    else
      LOBYTE(v18) = __p[0];
    _BBULog(21, 0, "BBUpdaterController", "", "processing event: %s, current state %d [%s]\n", v15, v16, v17, (char)v18);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
LABEL_33:
  boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventContinue>((uint64_t)v29, a3, 1);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_41;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_41;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    boost::core::demangle((boost::core *)__p, (const char *)(0x8000000212B515EELL & 0x7FFFFFFFFFFFFFFFLL));
    if (SHIBYTE(__p[2]) >= 0)
      v22 = __p;
    else
      LOBYTE(v22) = __p[0];
    _BBULog(21, 0, "BBUpdaterController", "", "finish processing event: %s\n", v19, v20, v21, (char)v22);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
LABEL_41:
  if (SHIBYTE(v28) < 0)
    operator delete(__dst[0]);
  v23 = v30;
  if (v30)
  {
    v24 = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_212A63AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  std::vector<std::string>::~vector[abi:ne180100](&a12);
  if ((a23 & 0x80000000) == 0)
  {
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v23 - 64);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v23 - 64);
  _Unwind_Resume(a1);
}

void BBUpdaterController::checkManifest(BBUpdaterController *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BBUFeedback *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BBUEUR10UpdateSource *FirmwareDataSource;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  std::string::size_type *v32;
  std::string::size_type v33;
  std::ios_base *v34;
  capabilities::updater *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  std::string::size_type v50;
  std::string *p_dst;
  uint64_t v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  std::string *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  capabilities::updater *v60;
  unsigned int v61;
  capabilities::updater *v62;
  _QWORD *v63;
  size_t v64;
  capabilities::updater *v65;
  unsigned int v66;
  char v67;
  char v68;
  BBUEUR10UpdateSource *v69;
  std::string __dst;
  std::string v71;
  uint64_t v72;
  char v73;
  std::string v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 __p;
  __int128 v79;
  unint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;

  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      goto LABEL_5;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(13, 0, "BBUpdaterController", "", "Perform manifest check\n", a6, a7, a8, v67);
LABEL_5:
  v9 = (BBUFeedback *)*((_QWORD *)this + 7);
  BBUFeedback::handleComment(v9, "entering %s", "StageContext::CheckManifest");
  v10 = *((_QWORD *)v9 + 19);
  v11 = *((_QWORD *)v9 + 18);
  if (v10 == v11)
    v12 = 0;
  else
    v12 = ((v10 - v11) << 7) - 1;
  v13 = *((_QWORD *)v9 + 22);
  v14 = v13 + *((_QWORD *)v9 + 21);
  if (v12 == v14)
  {
    std::deque<BBUpdaterCommon::StageContext>::__add_back_capacity((_QWORD *)v9 + 17);
    v11 = *((_QWORD *)v9 + 18);
    v13 = *((_QWORD *)v9 + 22);
    v14 = *((_QWORD *)v9 + 21) + v13;
  }
  *(_DWORD *)(*(_QWORD *)(v11 + ((v14 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v14 & 0x3FF)) = 7;
  *((_QWORD *)v9 + 22) = v13 + 1;
  *((_BYTE *)this + 355) = 1;
  FirmwareDataSource = BBUpdaterController::getFirmwareDataSource(this, 1);
  v69 = FirmwareDataSource;
  if (!FirmwareDataSource)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_72;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_72:
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v15, v16, v17, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v71, "Fail to get update source for checkManifest\n");
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v74, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
    else
      v74 = v71;
    *(_QWORD *)&v75 = 35;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)this, (uint64_t)&v74);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    goto LABEL_60;
  }
  if (!(*(unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), *((_QWORD *)this + 6), 2, 1))
  {
    *((_BYTE *)this + 352) = 1;
    v25 = BBUpdaterController::bootupInternal((BBULoader **)this, &v69);
    if (!v25)
    {
      v25 = BBUpdaterController::performPingInternal((uint64_t)this, 0);
      if (!v25)
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
            goto LABEL_19;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
            goto LABEL_19;
        }
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(13, 0, "BBUpdaterController", "", "Perform internal manifest check\n", v26, v27, v28, v68);
LABEL_19:
        *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v80 = 0xAAAAAAAAAAAAAAAALL;
        v90 = v29;
        v89 = v29;
        v88 = v29;
        v87 = v29;
        v86 = v29;
        v85 = v29;
        v84 = v29;
        v83 = v29;
        v82 = v29;
        v79 = v29;
        __p = v29;
        v77 = v29;
        v76 = v29;
        v75 = v29;
        *(_OWORD *)&v74.__r_.__value_.__r.__words[1] = v29;
        v30 = MEMORY[0x24BEDB870];
        v31 = MEMORY[0x24BEDB870] + 64;
        v81 = MEMORY[0x24BEDB870] + 64;
        v32 = (std::string::size_type *)MEMORY[0x24BEDB800];
        v33 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
        v74.__r_.__value_.__r.__words[0] = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
        *(std::string::size_type *)((char *)v74.__r_.__value_.__r.__words
                                  + *(_QWORD *)(v74.__r_.__value_.__r.__words[0] - 24)) = v33;
        v34 = (std::ios_base *)((char *)&v74 + *(_QWORD *)(v74.__r_.__value_.__r.__words[0] - 24));
        std::ios_base::init(v34, &v74.__r_.__value_.__r.__words[1]);
        v34[1].__vftable = 0;
        v34[1].__fmtflags_ = -1;
        v74.__r_.__value_.__r.__words[0] = v30 + 24;
        v81 = v31;
        std::streambuf::basic_streambuf();
        v74.__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
        __p = 0u;
        v79 = 0u;
        LODWORD(v80) = 16;
        v73 = 0;
        v35 = (capabilities::updater *)(*(uint64_t (**)(_QWORD, char *, _QWORD, char *, char *, _QWORD))(**((_QWORD **)this + 9) + 96))(*((_QWORD *)this + 9), (char *)this + 152, *((_QWORD *)this + 12), &v73, (char *)this + 240, 0);
        v39 = v35;
        if (!(_DWORD)v35)
        {
          v40 = (_QWORD *)*((_QWORD *)this + 12);
          v41 = v40[8];
          v42 = v40[9];
          v43 = v40[10];
          if (v42)
          {
            v35 = (capabilities::updater *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
            v44 = (int)v35;
            if (v41)
              goto LABEL_22;
          }
          else
          {
            v44 = -1;
            if (v41)
            {
LABEL_22:
              v35 = (capabilities::updater *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
              v45 = (int)v35;
              if (v43)
                goto LABEL_23;
              goto LABEL_27;
            }
          }
          v45 = -1;
          if (v43)
          {
LABEL_23:
            v35 = (capabilities::updater *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
            v39 = v35;
            if (!v41)
              goto LABEL_35;
            goto LABEL_28;
          }
LABEL_27:
          v39 = -1;
          if (!v41)
            goto LABEL_35;
LABEL_28:
          if (!v42 || v44 || v45)
            goto LABEL_35;
          if (v43 && !v39)
          {
            v46 = &qword_253D37000;
            goto LABEL_56;
          }
          if (capabilities::updater::supportsFATPCalibrationManifestStatus(v35))
          {
LABEL_35:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"Detected non-zero cal/prov/fac manifests status  [CMStatus=", 59);
            v47 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" ,PMStatus=", 11);
            v48 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)", FCMStatus=", 12);
            v49 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" ]", 2);
            memset(&__dst, 170, sizeof(__dst));
            if ((v80 & 0x10) != 0)
            {
              v52 = *((_QWORD *)&v79 + 1);
              if (*((_QWORD *)&v79 + 1) < (unint64_t)v77)
              {
                *((_QWORD *)&v79 + 1) = v77;
                v52 = v77;
              }
              v46 = &qword_253D37000;
              v53 = (const void *)*((_QWORD *)&v76 + 1);
              v50 = v52 - *((_QWORD *)&v76 + 1);
              if ((unint64_t)(v52 - *((_QWORD *)&v76 + 1)) >= 0x7FFFFFFFFFFFFFF8)
                goto LABEL_66;
            }
            else
            {
              if ((v80 & 8) == 0)
              {
                v50 = 0;
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
                p_dst = &__dst;
                v46 = &qword_253D37000;
                goto LABEL_48;
              }
              v46 = &qword_253D37000;
              v53 = (const void *)v75;
              v50 = v76 - v75;
              if ((_QWORD)v76 - (_QWORD)v75 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_66:
                std::string::__throw_length_error[abi:ne180100]();
            }
            if (v50 >= 0x17)
            {
              v54 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v50 | 7) != 0x17)
                v54 = v50 | 7;
              v55 = v54 + 1;
              p_dst = (std::string *)operator new(v54 + 1);
              __dst.__r_.__value_.__l.__size_ = v50;
              __dst.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v50;
              p_dst = &__dst;
              if (!v50)
              {
LABEL_48:
                p_dst->__r_.__value_.__s.__data_[v50] = 0;
                v56 = &__dst;
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v56 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                BBUFeedback::handleComment(*((BBUFeedback **)this + 7), "%s", (const char *)v56);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v71, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                else
                  v71 = __dst;
                v72 = 38;
                BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)this, (uint64_t)&v71);
                if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v71.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_55;
                }
                else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_55:
                  v39 = 38;
                  goto LABEL_56;
                }
                operator delete(__dst.__r_.__value_.__l.__data_);
                goto LABEL_55;
              }
            }
            memmove(p_dst, v53, v50);
            goto LABEL_48;
          }
          v39 = 0;
          v46 = &qword_253D37000;
LABEL_56:
          v74.__r_.__value_.__r.__words[0] = *v32;
          *(std::string::size_type *)((char *)v74.__r_.__value_.__r.__words
                                    + *(_QWORD *)(v74.__r_.__value_.__r.__words[0] - 24)) = v32[3];
          v74.__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
          if (SBYTE7(v79) < 0)
            operator delete((void *)__p);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x212BFA3D0](&v81);
          if (!v39)
          {
            (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), (char *)this + 152);
            CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 4), CFSTR("done"), (const void *)*MEMORY[0x24BDBD270]);
            BBUpdaterController::process_event<BBUpdaterControllerFSM::eventContinue>(*((int **)this + 2), *((std::__shared_weak_count **)this + 3), (uint64_t)&v74);
            goto LABEL_60;
          }
          if (v46[502] == -1)
          {
            if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
              goto LABEL_103;
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
            {
LABEL_103:
              if (gBBULogVerbosity >= 6)
                _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v57, v58, v59, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
            }
          }
          std::string::basic_string[abi:ne180100]<0>(&__dst, BBUReturnAsString::BBUReturnStrings[v39]);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Fail to check manifest in manifest check: ", &__dst, &v71);
          v66 = capabilities::updater::manifestCheckRetryCount(v65);
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v74, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
          else
            v74 = v71;
          *(_QWORD *)&v75 = __PAIR64__(v66, v39);
          BBUpdaterController::process_event<BBUpdaterControllerFSM::eventRetry>((uint64_t)this, (uint64_t)&v74);
LABEL_122:
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v74.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_124:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_60;
LABEL_128:
              operator delete(__dst.__r_.__value_.__l.__data_);
              goto LABEL_60;
            }
          }
          else if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_124;
          }
          operator delete(v71.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_60;
          goto LABEL_128;
        }
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
            goto LABEL_97;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
          {
LABEL_97:
            if (gBBULogVerbosity >= 6)
              _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v36, v37, v38, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
          }
        }
        v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"getProvisioningStatus returns: ", 31);
        v64 = strlen(BBUReturnAsString::BBUReturnStrings[v39]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)BBUReturnAsString::BBUReturnStrings[v39], v64);
        std::ostringstream::str[abi:ne180100](&__dst, (uint64_t)&v74);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v71, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v71 = __dst;
        v72 = v39;
        BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)this, (uint64_t)&v71);
        v46 = &qword_253D37000;
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_56;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_91;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_91;
      }
      if (gBBULogVerbosity >= 6)
        _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v26, v27, v28, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_91:
      std::string::basic_string[abi:ne180100]<0>(&__dst, BBUReturnAsString::BBUReturnStrings[v25]);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Fail to ping in manifest check: ", &__dst, &v71);
      v61 = capabilities::updater::manifestCheckRetryCount(v62);
      if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v74 = v71;
        goto LABEL_113;
      }
      goto LABEL_112;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_84;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_84;
    }
    if (gBBULogVerbosity >= 6)
      _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v22, v23, v24, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_84:
    std::string::basic_string[abi:ne180100]<0>(&__dst, BBUReturnAsString::BBUReturnStrings[v25]);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Fail to bootup in manifest check: ", &__dst, &v71);
    v61 = capabilities::updater::manifestCheckRetryCount(v60);
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      v74 = v71;
LABEL_113:
      *(_QWORD *)&v75 = __PAIR64__(v61, v25);
      BBUpdaterController::process_event<BBUpdaterControllerFSM::eventRetry>((uint64_t)this, (uint64_t)&v74);
      goto LABEL_122;
    }
LABEL_112:
    std::string::__init_copy_ctor_external(&v74, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
    goto LABEL_113;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_60;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_60;
  }
  if (gBBULogVerbosity >= 6)
    _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v19, v20, v21, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_60:
  BBUFeedback::exitStageContext(*((BBUFeedback **)this + 7));
  if (FirmwareDataSource)
    (*(void (**)(BBUEUR10UpdateSource *))(*(_QWORD *)FirmwareDataSource + 16))(FirmwareDataSource);
}

void sub_212A647E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a21 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a31);
  (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  _Unwind_Resume(a1);
}

void BBUpdaterController::finalize(BBUpdaterController *this)
{
  BBUEUR10UpdateSource *FirmwareDataSource;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BBUEUR10UpdateSource *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFDictionary *v15;
  uint64_t (*v16)(uint64_t);
  const __CFBoolean *v17;
  CFTypeID TypeID;
  uint64_t v19;
  capabilities::updater *v20;
  unsigned int v21;
  std::string *v22;
  std::string::size_type size;
  std::string::value_type *v24;
  int v25;
  uint64_t v26;
  uint64_t NVRestoreSetting;
  std::string::value_type v28;
  const __CFDictionary *v29;
  uint64_t (*v30)(uint64_t);
  signed __int8 *v31;
  CFTypeID v32;
  const __CFNumber *v33;
  const __CFDictionary *v34;
  uint64_t (*v35)(uint64_t);
  CFTypeID v36;
  size_t v37;
  std::string::size_type v38;
  void *p_dst;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::string::size_type v46;
  int *v47;
  unint64_t *v48;
  unint64_t v49;
  std::string::size_type v50;
  std::string::size_type v51;
  char v52;
  __int128 v53;
  void *v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::string::size_type v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::string *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::string *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  char v74;
  std::string cf;
  char v76;
  std::string __dst;
  std::string value[43];
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  FirmwareDataSource = BBUpdaterController::getFirmwareDataSource(this, 1);
  if (FirmwareDataSource)
  {
    v6 = FirmwareDataSource;
    BBUFeedback::handleBeginPhase(*((BBUFeedback **)this + 7), "Final stage");
    v76 = 0;
    v14 = (*(uint64_t (**)(_QWORD, char *, _QWORD, char *, char *, _QWORD))(**((_QWORD **)this + 9) + 96))(*((_QWORD *)this + 9), (char *)this + 152, *((_QWORD *)this + 12), &v76, (char *)this + 240, 0);
    v15 = (const __CFDictionary *)*((_QWORD *)this + 5);
    if (v15)
      v16 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v16 = 0;
    if (v16)
    {
      v17 = (const __CFBoolean *)CFDictionaryGetValue(v15, CFSTR("BypassManifestStatusCheck"));
      if (v17)
      {
        TypeID = CFBooleanGetTypeID();
        if (TypeID == CFGetTypeID(v17))
        {
          if (CFBooleanGetValue(v17))
          {
            BBUFeedback::handleComment(*((BBUFeedback **)this + 7), "Bypass manifest status check has been specified. Returning success");
            goto LABEL_20;
          }
        }
      }
    }
    if (!(_DWORD)v14)
    {
      if (v76)
      {
        v19 = *((_QWORD *)this + 12);
        v20 = *(capabilities::updater **)(v19 + 64);
        if (v20)
        {
          v20 = (capabilities::updater *)(*(uint64_t (**)(capabilities::updater *))(*(_QWORD *)v20 + 24))(v20);
          v21 = v20;
          if (*(_DWORD *)(*((_QWORD *)this + 12) + 88) != 3)
          {
LABEL_20:
            v26 = *((_QWORD *)this + 9);
            NVRestoreSetting = BBUpdaterController::getNVRestoreSetting(*((BBUpdaterController **)this + 5), v7, v8, v9, v10, v11, v12, v13);
            v28 = -1;
            __dst.__r_.__value_.__s.__data_[0] = -1;
            v29 = (const __CFDictionary *)*((_QWORD *)this + 5);
            if (v29)
              v30 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
            else
              v30 = 0;
            if (v30)
            {
              value[0].__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
              if (CFDictionaryGetValueIfPresent(v29, CFSTR("IMEISwVersion"), (const void **)&value[0].__r_.__value_.__l.__data_))
              {
                v31 = (signed __int8 *)value[0].__r_.__value_.__r.__words[0];
                if (value[0].__r_.__value_.__r.__words[0])
                {
                  v32 = CFGetTypeID(value[0].__r_.__value_.__l.__data_);
                  if (v32 == CFNumberGetTypeID())
                  {
                    if (ctu::cf::assign((ctu::cf *)&__dst, v31, v33))
                      v28 = __dst.__r_.__value_.__s.__data_[0];
                    else
                      v28 = -1;
                  }
                }
              }
            }
            v34 = (const __CFDictionary *)*((_QWORD *)this + 5);
            if (v34)
              v35 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
            else
              v35 = 0;
            if (!v35
              || (cf.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL,
                  !CFDictionaryGetValueIfPresent(v34, CFSTR("NVSerialNumber"), (const void **)&cf.__r_.__value_.__l.__data_))|| (v36 = CFGetTypeID(cf.__r_.__value_.__l.__data_), v36 != CFStringGetTypeID()))
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
              __dst.__r_.__value_.__s.__data_[0] = 0;
              goto LABEL_41;
            }
            memset(value, 170, 0x400uLL);
            CFStringGetCString((CFStringRef)cf.__r_.__value_.__l.__data_, (char *)value, 1024, 0x8000100u);
            v37 = strlen((const char *)value);
            if (v37 >= 0x7FFFFFFFFFFFFFF8)
              std::string::__throw_length_error[abi:ne180100]();
            v38 = v37;
            if (v37 >= 0x17)
            {
              v59 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v37 | 7) != 0x17)
                v59 = v37 | 7;
              v60 = v59 + 1;
              p_dst = operator new(v59 + 1);
              __dst.__r_.__value_.__l.__size_ = v38;
              __dst.__r_.__value_.__r.__words[2] = v60 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37;
              p_dst = &__dst;
              if (!v37)
                goto LABEL_82;
            }
            memcpy(p_dst, value, v38);
LABEL_82:
            *((_BYTE *)p_dst + v38) = 0;
LABEL_41:
            v14 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t, _QWORD, std::string *))(*(_QWORD *)v26 + 48))(v26, (char *)this + 152, 8, NVRestoreSetting, v28, &__dst);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (!(_DWORD)v14)
            {
              (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), (char *)this + 152);
              v14 = 0;
              goto LABEL_45;
            }
            if (gBBULogMaskGet(void)::once == -1)
            {
              if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
                goto LABEL_139;
            }
            else
            {
              dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
              if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
                goto LABEL_139;
            }
            if (gBBULogVerbosity >= 6)
              _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v40, v41, v42, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_139:
            std::string::basic_string[abi:ne180100]<0>(&cf, BBUReturnAsString::BBUReturnStrings[v14]);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Failed to finalize: ", &cf, &__dst);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(value, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
            else
              value[0] = __dst;
            value[1].__r_.__value_.__r.__words[0] = v14;
            BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)this, (uint64_t)value);
            if (SHIBYTE(value[0].__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(value[0].__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_170:
                if ((SHIBYTE(cf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_45;
LABEL_174:
                operator delete(cf.__r_.__value_.__l.__data_);
                goto LABEL_45;
              }
            }
            else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_170;
            }
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(cf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_45;
            goto LABEL_174;
          }
        }
        else
        {
          v21 = -1;
          if (*(_DWORD *)(v19 + 88) != 3)
            goto LABEL_20;
        }
        if (!v21 || !capabilities::updater::shouldBailOnNoManifestHashes(v20))
          goto LABEL_20;
        std::to_string(&__dst, v21);
        v22 = std::string::insert(&__dst, 0, "Detected non-zero prov manifest status: ", 0x28uLL);
        v24 = (std::string::value_type *)v22->__r_.__value_.__r.__words[0];
        size = v22->__r_.__value_.__l.__size_;
        LODWORD(cf.__r_.__value_.__l.__data_) = v22->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)cf.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v22->__r_.__value_.__r.__words[2]
                                                                          + 3);
        v25 = SHIBYTE(v22->__r_.__value_.__r.__words[2]);
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        if (v25 < 0)
        {
          std::string::__init_copy_ctor_external(value, v24, size);
        }
        else
        {
          value[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
          value[0].__r_.__value_.__l.__size_ = size;
          LODWORD(value[0].__r_.__value_.__r.__words[2]) = cf.__r_.__value_.__l.__data_;
          *(_DWORD *)((char *)&value[0].__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)cf.__r_.__value_.__r.__words
                                                                                      + 3);
          *((_BYTE *)&value[0].__r_.__value_.__s + 23) = v25;
        }
        value[1].__r_.__value_.__r.__words[0] = 27;
        BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)this, (uint64_t)value);
        if (SHIBYTE(value[0].__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(value[0].__r_.__value_.__l.__data_);
          if ((v25 & 0x80000000) == 0)
          {
LABEL_69:
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_70:
              v14 = 27;
              goto LABEL_71;
            }
LABEL_77:
            operator delete(__dst.__r_.__value_.__l.__data_);
            goto LABEL_70;
          }
        }
        else if ((v25 & 0x80000000) == 0)
        {
          goto LABEL_69;
        }
        operator delete(v24);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_70;
        goto LABEL_77;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
          goto LABEL_132;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        {
LABEL_132:
          if (gBBULogVerbosity >= 6)
            _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v11, v12, v13, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
        }
      }
      BBUFeedback::handleComment(*((BBUFeedback **)this + 7), "Key alignment is required");
      v14 = 41;
      goto LABEL_71;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_128;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_128;
    }
    if (gBBULogVerbosity >= 6)
      _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v11, v12, v13, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_128:
    std::to_string(&cf, v14);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Fail to getProvisioningStatus", &cf, &__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(value, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      value[0] = __dst;
    value[1].__r_.__value_.__r.__words[0] = v14;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)this, (uint64_t)value);
    if (SHIBYTE(value[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(value[0].__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_162:
        if ((SHIBYTE(cf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_71;
LABEL_166:
        operator delete(cf.__r_.__value_.__l.__data_);
LABEL_71:
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
            goto LABEL_45;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
            goto LABEL_45;
        }
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v56, v57, v58, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_45:
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7), v14);
        if ((_DWORD)v14 == 41)
        {
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
              goto LABEL_50;
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
              goto LABEL_50;
          }
          if ((gBBULogVerbosity & 0x80000000) == 0)
            _BBULog(13, 0, "BBUpdaterController", "", "re-personalize\n", v43, v44, v45, v74);
LABEL_50:
          v47 = (int *)*((_QWORD *)this + 2);
          v46 = *((_QWORD *)this + 3);
          cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
          cf.__r_.__value_.__l.__size_ = v46;
          if (v46)
          {
            v48 = (unint64_t *)(v46 + 8);
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
          }
          value[0].__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
          value[0].__r_.__value_.__r.__words[2] = 0x7AAAAAAAAAAAAAALL;
          strcpy((char *)value, "unknown");
          memset(&__dst, 170, sizeof(__dst));
          (*(void (**)(std::string *__return_ptr, int *))(*(_QWORD *)v47 + 24))(&__dst, v47);
          v50 = __dst.__r_.__value_.__r.__words[0];
          v51 = __dst.__r_.__value_.__r.__words[0] + 24 * v47[8];
          if (value != (std::string *)v51)
          {
            v52 = *(_BYTE *)(v51 + 23);
            if (SHIBYTE(value[0].__r_.__value_.__r.__words[2]) < 0)
            {
              if (v52 >= 0)
                v54 = (void *)(__dst.__r_.__value_.__r.__words[0] + 24 * v47[8]);
              else
                v54 = *(void **)v51;
              if (v52 >= 0)
                v55 = *(unsigned __int8 *)(v51 + 23);
              else
                v55 = *(_QWORD *)(v51 + 8);
              std::string::__assign_no_alias<false>((void **)&value[0].__r_.__value_.__l.__data_, v54, v55);
            }
            else if ((*(_BYTE *)(v51 + 23) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>(value, *(void **)v51, *(_QWORD *)(v51 + 8));
            }
            else
            {
              v53 = *(_OWORD *)v51;
              value[0].__r_.__value_.__r.__words[2] = *(_QWORD *)(v51 + 16);
              *(_OWORD *)&value[0].__r_.__value_.__l.__data_ = v53;
            }
            v50 = __dst.__r_.__value_.__r.__words[0];
          }
          if (v50)
          {
            v61 = __dst.__r_.__value_.__l.__size_;
            v62 = (void *)v50;
            if (__dst.__r_.__value_.__l.__size_ != v50)
            {
              do
              {
                if (*(char *)(v61 - 1) < 0)
                  operator delete(*(void **)(v61 - 24));
                v61 -= 24;
              }
              while (v61 != v50);
              v62 = (void *)__dst.__r_.__value_.__r.__words[0];
            }
            __dst.__r_.__value_.__l.__size_ = v50;
            operator delete(v62);
          }
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
              goto LABEL_101;
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
              goto LABEL_101;
          }
          if ((gBBULogVerbosity & 0x80000000) == 0)
          {
            boost::core::demangle((boost::core *)&__dst, (const char *)(0x8000000212B51701 & 0x7FFFFFFFFFFFFFFFLL));
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v66 = &__dst;
            else
              LOBYTE(v66) = __dst.__r_.__value_.__s.__data_[0];
            _BBULog(21, 0, "BBUpdaterController", "", "processing event: %s, current state %d [%s]\n", v63, v64, v65, (char)v66);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
          }
LABEL_101:
          boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventRepersonalize>((uint64_t)cf.__r_.__value_.__l.__data_, (uint64_t)&v76, 1);
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
            {
LABEL_103:
              if ((gBBULogVerbosity & 0x80000000) == 0)
              {
                boost::core::demangle((boost::core *)&__dst, (const char *)(0x8000000212B51701 & 0x7FFFFFFFFFFFFFFFLL));
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v70 = &__dst;
                else
                  LOBYTE(v70) = __dst.__r_.__value_.__s.__data_[0];
                _BBULog(21, 0, "BBUpdaterController", "", "finish processing event: %s\n", v67, v68, v69, (char)v70);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__dst.__r_.__value_.__l.__data_);
              }
            }
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
              goto LABEL_103;
          }
          if (SHIBYTE(value[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(value[0].__r_.__value_.__l.__data_);
          v71 = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
          if (cf.__r_.__value_.__l.__size_)
          {
            v72 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          goto LABEL_116;
        }
        if (!(_DWORD)v14)
        {
          BBUpdaterController::process_event<BBUpdaterControllerFSM::eventContinue>(*((int **)this + 2), *((std::__shared_weak_count **)this + 3), (uint64_t)value);
          CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 4), CFSTR("done"), (const void *)*MEMORY[0x24BDBD270]);
LABEL_116:
          (*(void (**)(BBUEUR10UpdateSource *))(*(_QWORD *)v6 + 16))(v6);
          return;
        }
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
            goto LABEL_143;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
          {
LABEL_143:
            if (gBBULogVerbosity >= 6)
              _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v43, v44, v45, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, "Fail to perform finalization.");
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(value, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          value[0] = __dst;
        value[1].__r_.__value_.__r.__words[0] = v14;
        BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)this, (uint64_t)value);
        if (SHIBYTE(value[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(value[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_116;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_162;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(cf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_166;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_122;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_122;
  }
  if (gBBULogVerbosity >= 6)
    _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v3, v4, v5, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_122:
  std::string::basic_string[abi:ne180100]<0>(&__dst, "Fail to get update source data for finalize\n");
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(value, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    value[0] = __dst;
  value[1].__r_.__value_.__r.__words[0] = 35;
  BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)this, (uint64_t)value);
  if (SHIBYTE(value[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(value[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_158:
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    goto LABEL_158;
  }
}

void sub_212A65760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a24 < 0)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
  _Unwind_Resume(a1);
}

uint64_t BBUpdaterController::collectCoredumpInternal(BBUpdaterController *this)
{
  BBUFeedback *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::string *p_p;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type size;
  std::string::size_type v13;
  passwd *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uid_t pw_uid;
  gid_t pw_gid;
  std::string *v23;
  capabilities::radio *v24;
  BBUFeedback *v25;
  int *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  capabilities::radio *InfoFirstStageInternal;
  BBUEUR10UpdateSource *FirmwareDataSource;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  BBUFeedback *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  capabilities::radio *FirmwareFolder;
  std::string::size_type v53;
  std::string *v54;
  BBUEUR10UpdateSource *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *exception;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  std::string v81;
  BBUEUR10UpdateSource *v82;
  std::string __p;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  uint64_t v88;

  memset(&v84, 0, sizeof(v84));
  v2 = (BBUFeedback *)*((_QWORD *)this + 7);
  BBUFeedback::handleComment(v2, "entering %s", "StageContext::Coredump");
  v3 = *((_QWORD *)v2 + 19);
  v4 = *((_QWORD *)v2 + 18);
  if (v3 == v4)
    v5 = 0;
  else
    v5 = ((v3 - v4) << 7) - 1;
  v6 = *((_QWORD *)v2 + 22);
  v7 = v6 + *((_QWORD *)v2 + 21);
  if (v5 == v7)
  {
    std::deque<BBUpdaterCommon::StageContext>::__add_back_capacity((_QWORD *)v2 + 17);
    v4 = *((_QWORD *)v2 + 18);
    v6 = *((_QWORD *)v2 + 22);
    v7 = *((_QWORD *)v2 + 21) + v6;
  }
  *(_DWORD *)(*(_QWORD *)(v4 + ((v7 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v7 & 0x3FF)) = 8;
  *((_QWORD *)v2 + 22) = v6 + 1;
  memset(&__p, 170, sizeof(__p));
  if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
  {
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
    {
LABEL_8:
      if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)
        goto LABEL_9;
LABEL_13:
      BBUpdaterController::getCoreDumpPath((BBUpdaterController *)&__p, (uint64_t)this);
      goto LABEL_14;
    }
  }
  dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
  if (!(BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS))
    goto LABEL_13;
LABEL_9:
  BBUpdaterController::getCoreDumpPath((BBUpdaterController *)&v87, (uint64_t)this);
  bbufs::createDirectoryWithTimestamp((const void **)&v87.__r_.__value_.__l.__data_, &__p);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
LABEL_14:
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  BBUFeedback::handleComment(*((BBUFeedback **)this + 7), "collecting coredump at %s", (const char *)p_p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (!size)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_97;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_97:
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v9, v10, v11, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v86, "core dump path unavailable or not specified.");
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v87, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
    else
      v87 = v86;
    v88 = 2;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)this, (uint64_t)&v87);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    FirmwareDataSource = 0;
    v34 = 0;
    v35 = 2;
    goto LABEL_40;
  }
  eUICC::DumpRecords((char *)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v13 = __p.__r_.__value_.__l.__size_;
  if (!v13)
  {
    BBUFeedback::handleComment(*((BBUFeedback **)this + 7), "Invalid path pointer to create coredump directory");
    goto LABEL_33;
  }
  if (!ctu::fs::create_directory())
  {
    BBUFeedback::handleComment(*((BBUFeedback **)this + 7), "Failed creating coredump directory");
    goto LABEL_33;
  }
  v14 = getpwnam("_wireless");
  if (!v14)
  {
    _BBUFSDebugPrint("getWirelessID", "failed to get uid and gid information for _wireless\n", v15, v16, v17, v18, v19, v20, v80);
    BBUFeedback::handleComment(*((BBUFeedback **)this + 7), "Failed to get uid and gid information for _wireless:_wireless");
LABEL_33:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_35;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_35:
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v28, v29, v30, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      }
    }
    v31 = (char *)operator new(0x20uLL);
    strcpy(v31, "failed to create dump path");
    std::string::__init_copy_ctor_external(&v87, v31, 0x1AuLL);
    v88 = 1;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)this, (uint64_t)&v87);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
    operator delete(v31);
    FirmwareDataSource = 0;
    v34 = 0;
    v35 = 1;
    goto LABEL_40;
  }
  pw_uid = v14->pw_uid;
  pw_gid = v14->pw_gid;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &__p;
  else
    v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v24 = (capabilities::radio *)chown((const char *)v23, pw_uid, pw_gid);
  if ((_DWORD)v24)
  {
    v25 = (BBUFeedback *)*((_QWORD *)this + 7);
    v26 = __error();
    v27 = strerror(*v26);
    BBUFeedback::handleComment(v25, "Failed changing owner of coredump directory:  %s", v27);
    goto LABEL_33;
  }
  if (capabilities::radio::supportsBasebandStateController(v24))
    TelephonyBasebandSetBasebandState();
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 9) + 56))(*((_QWORD *)this + 9), *((_QWORD *)this + 6), 0);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 9) + 144))(*((_QWORD *)this + 9), 2);
  InfoFirstStageInternal = (capabilities::radio *)BBUpdaterController::queryInfoFirstStageInternal((BBULoader **)this, v42);
  v35 = (uint64_t)InfoFirstStageInternal;
  if ((_DWORD)InfoFirstStageInternal)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      FirmwareDataSource = 0;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_183;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      FirmwareDataSource = 0;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_183;
    }
    if (gBBULogVerbosity >= 6)
    {
      InfoFirstStageInternal = (capabilities::radio *)_BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v43, v44, v45, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      FirmwareDataSource = 0;
      goto LABEL_166;
    }
LABEL_183:
    v34 = 0;
    goto LABEL_40;
  }
  FirmwareDataSource = BBUpdaterController::getFirmwareDataSource(this, 1);
  if (!FirmwareDataSource)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_115;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_115:
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v46, v47, v48, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v86, "Fail to get firmware data source\n");
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v87, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
    else
      v87 = v86;
    v88 = 35;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)this, (uint64_t)&v87);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    v82 = 0;
LABEL_151:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_153;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_153:
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v59, v60, v61, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v86, "Fail to get update source for collectCoredump\n");
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v87, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
    else
      v87 = v86;
    v88 = 35;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)this, (uint64_t)&v87);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    FirmwareDataSource = 0;
    v35 = 0;
    goto LABEL_166;
  }
  v49 = *((_QWORD *)this + 12);
  if (v49)
  {
    v50 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v49 + 16) + 24))(*(_QWORD *)(v49 + 16));
    (*(void (**)(BBUEUR10UpdateSource *, uint64_t))(*(_QWORD *)FirmwareDataSource + 200))(FirmwareDataSource, v50);
    v51 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 12) + 24) + 24))(*(_QWORD *)(*((_QWORD *)this + 12) + 24));
    (*(void (**)(BBUEUR10UpdateSource *, uint64_t))(*(_QWORD *)FirmwareDataSource + 208))(FirmwareDataSource, v51);
  }
  if (!(*(unsigned int (**)(BBUEUR10UpdateSource *))(*(_QWORD *)FirmwareDataSource + 88))(FirmwareDataSource))
  {
    v82 = FirmwareDataSource;
    goto LABEL_80;
  }
  (*(void (**)(BBUEUR10UpdateSource *))(*(_QWORD *)FirmwareDataSource + 16))(FirmwareDataSource);
  BBUFeedback::handleComment(*((BBUFeedback **)this + 7), "Source doesn’t contain coredump programmer, falling back to folder");
  memset(&v86, 170, sizeof(v86));
  FirmwareFolder = (capabilities::radio *)BBUpdaterController::getFirmwareFolder(&v86, *((const __CFDictionary **)this + 5));
  v53 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v53 = v86.__r_.__value_.__l.__size_;
  if (!v53)
  {
    capabilities::radio::personalizedFirmwarePath(FirmwareFolder);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    v86 = v87;
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v86.__r_.__value_.__l.__size_)
      {
        v54 = (std::string *)v86.__r_.__value_.__r.__words[0];
        goto LABEL_74;
      }
    }
    else if (*((_BYTE *)&v87.__r_.__value_.__s + 23))
    {
      v54 = &v86;
LABEL_74:
      BBUFeedback::handleComment(*((BBUFeedback **)this + 7), "Baseband fw path that is used: %s\n", (const char *)v54);
      goto LABEL_75;
    }
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0xAD9u, (ctu::LogMessageBuffer *)"Assertion failure(folder.empty() != true && \"Failed finding the bbfw path.\")", v77, v78, v79, v80);
  }
LABEL_75:
  v55 = (BBUEUR10UpdateSource *)BBUUpdateSource::createFromFolder((__int128 *)&v86, *((_QWORD *)this + 7), 0);
  FirmwareDataSource = v55;
  if (!v55)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_135;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_135:
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v56, v57, v58, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v85, "Fail to get update source from folder\n");
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v87, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
    else
      v87 = v85;
    v88 = 35;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)this, (uint64_t)&v87);
    goto LABEL_176;
  }
  v62 = (*(uint64_t (**)(BBUEUR10UpdateSource *))(*(_QWORD *)v55 + 88))(v55);
  if (!v62)
    goto LABEL_77;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      goto LABEL_141;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
    {
LABEL_141:
      if (gBBULogVerbosity >= 6)
        _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v59, v60, v61, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v85, "Miss image for collecting coredump");
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v87, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
  else
    v87 = v85;
  v88 = v62;
  BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)this, (uint64_t)&v87);
LABEL_176:
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
LABEL_77:
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  v82 = FirmwareDataSource;
  if (!FirmwareDataSource)
    goto LABEL_151;
LABEL_80:
  v35 = BBUpdaterController::performFirstStageInternal((uint64_t)this, 0, &v82, &v84);
  if ((_DWORD)v35)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_121;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_121:
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v63, v64, v65, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      }
    }
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v87, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
    else
      v87 = v84;
    v88 = v35;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)this, (uint64_t)&v87);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
    goto LABEL_166;
  }
  InfoFirstStageInternal = (capabilities::radio *)BBUpdaterController::queryInfoSecondStageInternal((uint64_t)this, 0, &v82);
  v35 = (uint64_t)InfoFirstStageInternal;
  if ((_DWORD)InfoFirstStageInternal)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v34 = 0;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_40;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v34 = 0;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_40;
    }
    if (gBBULogVerbosity < 6)
      goto LABEL_40;
    InfoFirstStageInternal = (capabilities::radio *)_BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v66, v67, v68, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_166:
    v34 = 0;
    goto LABEL_40;
  }
  v34 = (uint64_t *)(*(uint64_t (**)(BBUEUR10UpdateSource *))(*(_QWORD *)FirmwareDataSource + 72))(FirmwareDataSource);
  InfoFirstStageInternal = (capabilities::radio *)BBUProgrammer::addItemsFromList(*((_QWORD *)this + 11), (uint64_t)v34);
  v35 = (uint64_t)InfoFirstStageInternal;
  if ((_DWORD)InfoFirstStageInternal)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_40;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_40;
    }
    if (gBBULogVerbosity >= 6)
      InfoFirstStageInternal = (capabilities::radio *)_BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v69, v70, v71, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
  }
  else
  {
    v72 = *((_QWORD *)this + 11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v81, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v81 = __p;
    InfoFirstStageInternal = (capabilities::radio *)(*(uint64_t (**)(uint64_t, _QWORD, std::string *))(*(_QWORD *)v72 + 88))(v72, 0, &v81);
    v35 = (uint64_t)InfoFirstStageInternal;
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    if ((_DWORD)v35)
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
          goto LABEL_91;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        {
LABEL_91:
          if (gBBULogVerbosity >= 6)
            _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v73, v74, v75, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v86, "Fail to run collectCoreDump");
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v87, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
      else
        v87 = v86;
      v88 = v35;
      BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)this, (uint64_t)&v87);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
    }
  }
LABEL_40:
  if (capabilities::radio::supportsBasebandStateController(InfoFirstStageInternal))
    TelephonyBasebandSetBasebandState();
  v36 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), (char *)this + 152);
  BBUFeedback::exitStageContext(*((BBUFeedback **)this + 7));
  if (v34)
  {
    if (v34[2])
    {
      v38 = *v34;
      v37 = (uint64_t *)v34[1];
      v39 = *v37;
      *(_QWORD *)(v39 + 8) = *(_QWORD *)(*v34 + 8);
      **(_QWORD **)(v38 + 8) = v39;
      v34[2] = 0;
      if (v37 != v34)
      {
        do
        {
          v40 = (uint64_t *)v37[1];
          operator delete(v37);
          v37 = v40;
        }
        while (v40 != v34);
      }
    }
    operator delete(v34);
  }
  if (FirmwareDataSource)
    (*(void (**)(BBUEUR10UpdateSource *))(*(_QWORD *)FirmwareDataSource + 16))(FirmwareDataSource);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v35;
LABEL_55:
    operator delete(v84.__r_.__value_.__l.__data_);
    return v35;
  }
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_55;
  return v35;
}

void sub_212A66980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a38 < 0)
    operator delete(__p);
  if (*(char *)(v38 - 89) < 0)
    operator delete(*(void **)(v38 - 112));
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void BBUpdaterController::handleError(uint64_t a1, std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const __CFAllocator *v26;
  CFURLRef v27;
  std::string::size_type size;
  std::__shared_weak_count_vtbl *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::string::size_type v40;
  NSObject *v41;
  unint64_t *v42;
  unint64_t v43;
  BBUFeedback *v44;
  uint64_t v45;
  std::__shared_weak_count_vtbl *v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  NSObject *v56;
  uint64_t v57;
  const char *v58;
  BBUError *v59;
  std::__shared_weak_count_vtbl *v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::string *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  char v76;
  std::__shared_weak_count *v77;
  std::string __p;
  CFURLRef v79;
  std::string v80;
  void *v81;
  uint64_t v82;
  NSObject **v83;
  int v84;
  std::string block;
  void *v86;
  std::string *v87;
  std::string *v88;
  std::string v89;
  int v90;
  NSObject *v91[2];

  BBUFeedback::handleBeginPhase(*(BBUFeedback **)(a1 + 56), "handleError");
  BBUpdaterController::dumpDebugLogBuffer((_QWORD *)a1, a3, v6, v7, v8, v9, v10, v11);
  if (*(_BYTE *)(a1 + 352))
  {
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
    {
      if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
        goto LABEL_4;
    }
    else
    {
      dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
      if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
      {
LABEL_4:
        if (!(BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS))
          goto LABEL_9;
LABEL_5:
        if (*(_QWORD *)(a1 + 120))
        {
          if (gBBULogMaskGet(void)::once != -1)
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          _BBULog(19, 0xFFFFFFFFLL, "BBUpdaterController", "", "enabling kernel IPC log for coredump\n", v12, v13, v14, v76);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 32))(*(_QWORD *)(a1 + 120));
        }
LABEL_9:
        *(_BYTE *)(a1 + 352) = 0;
        v15 = BBUpdaterController::collectCoredumpInternal((BBUpdaterController *)a1);
        BBUpdaterController::dumpDebugLogBuffer((_QWORD *)a1, v15, v16, v17, v18, v19, v20, v21);
        if (!(_DWORD)v15)
        {
          std::string::append(a2, " [coredump collected]", 0x15uLL);
          BBUpdaterController::getCoreDumpPath((BBUpdaterController *)&__p, a1);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v89, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            v89 = __p;
          v91[0] = 0;
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&block, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
          else
            block = v89;
          if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v80, block.__r_.__value_.__l.__data_, block.__r_.__value_.__l.__size_);
          else
            v80 = block;
          v26 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          if (ctu::cf::convert_copy())
          {
            v27 = CFURLCreateWithString(v26, (CFStringRef)0xAAAAAAAAAAAAAAAALL, 0);
            CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
            if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_23;
          }
          else
          {
            v27 = 0;
            if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_23:
              if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_24;
              goto LABEL_32;
            }
          }
          operator delete(v80.__r_.__value_.__l.__data_);
          if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_24:
            v79 = v27;
            if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_25;
            goto LABEL_33;
          }
LABEL_32:
          operator delete(block.__r_.__value_.__l.__data_);
          v79 = v27;
          if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_25:
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_26;
LABEL_34:
            operator delete(__p.__r_.__value_.__l.__data_);
LABEL_26:
            memset(&v80, 170, sizeof(v80));
            BBUpdaterController::getCoreDumpPath((BBUpdaterController *)&v80, a1);
            size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
            if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = v80.__r_.__value_.__l.__size_;
            if (size)
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), CFSTR("LogDirectory"), v27);
            else
              BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 56), "CoreDump path passed in to BBU is empty, skipping setting the coredump path for caller.");
            if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v80.__r_.__value_.__l.__data_);
              if (!v27)
                goto LABEL_41;
            }
            else if (!v27)
            {
LABEL_41:
              v15 = 0;
              pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
              v25 = qword_253D31DC8;
              if (qword_253D31DC8)
                goto LABEL_55;
              goto LABEL_42;
            }
            CFRelease(v27);
            goto LABEL_41;
          }
LABEL_33:
          operator delete(v89.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_26;
          goto LABEL_34;
        }
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
            goto LABEL_126;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
            goto LABEL_126;
        }
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v22, v23, v24, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_126:
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 56), "Fail to collect coredump after hitting fatal error: %s", BBUReturnAsString::BBUReturnStrings[v15]);
        pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        v25 = qword_253D31DC8;
        if (qword_253D31DC8)
          goto LABEL_55;
        goto LABEL_42;
      }
    }
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
    if (!(BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS))
      goto LABEL_9;
    goto LABEL_5;
  }
  v15 = 1;
  pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  v25 = qword_253D31DC8;
  if (qword_253D31DC8)
    goto LABEL_55;
LABEL_42:
  v29 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
  block.__r_.__value_.__r.__words[0] = 0;
  ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v29, "BBUError", QOS_CLASS_UTILITY, (NSObject **)&block);
  if (block.__r_.__value_.__r.__words[0])
    dispatch_release((dispatch_object_t)block.__r_.__value_.__l.__data_);
  v29->__on_zero_shared_weak = 0;
  v29[1].~__shared_weak_count = 0;
  v29[1].~__shared_weak_count_0 = 0;
  std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&v80, v29);
  v30 = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
  *(_OWORD *)&v80.__r_.__value_.__l.__data_ = 0uLL;
  v31 = (std::__shared_weak_count *)off_253D31DD0;
  *(_OWORD *)&qword_253D31DC8 = v30;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (std::__shared_weak_count *)v80.__r_.__value_.__l.__size_;
  if (v80.__r_.__value_.__l.__size_)
  {
    v35 = (unint64_t *)(v80.__r_.__value_.__l.__size_ + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v25 = qword_253D31DC8;
LABEL_55:
  v37 = (std::__shared_weak_count *)off_253D31DD0;
  if (off_253D31DD0)
  {
    v38 = (unint64_t *)((char *)off_253D31DD0 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  v40 = MEMORY[0x24BDAC760];
  v80.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
  v80.__r_.__value_.__l.__size_ = 0x40000000;
  v80.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
  v81 = &__block_descriptor_tmp_6;
  v82 = v25;
  v83 = (NSObject **)a2;
  v84 = a3;
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
  block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
  block.__r_.__value_.__l.__size_ = 0x40000000;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v86 = &__block_descriptor_tmp_10;
  v87 = (std::string *)v25;
  v88 = &v89;
  v41 = *(NSObject **)(v25 + 16);
  if (*(_QWORD *)(v25 + 24))
  {
    dispatch_async_and_wait(v41, &block);
    if (!v37)
      goto LABEL_66;
  }
  else
  {
    dispatch_sync(v41, &block);
    if (!v37)
      goto LABEL_66;
  }
  v42 = (unint64_t *)&v37->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
LABEL_66:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), v15);
  v44 = *(BBUFeedback **)(a1 + 56);
  pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  v45 = qword_253D31DC8;
  if (!qword_253D31DC8)
  {
    v46 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
    block.__r_.__value_.__r.__words[0] = 0;
    ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v46, "BBUError", QOS_CLASS_UTILITY, (NSObject **)&block);
    if (block.__r_.__value_.__r.__words[0])
      dispatch_release((dispatch_object_t)block.__r_.__value_.__l.__data_);
    v46->__on_zero_shared_weak = 0;
    v46[1].~__shared_weak_count = 0;
    v46[1].~__shared_weak_count_0 = 0;
    std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&v80, v46);
    v47 = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = 0uLL;
    v48 = (std::__shared_weak_count *)off_253D31DD0;
    *(_OWORD *)&qword_253D31DC8 = v47;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = (std::__shared_weak_count *)v80.__r_.__value_.__l.__size_;
    if (v80.__r_.__value_.__l.__size_)
    {
      v52 = (unint64_t *)(v80.__r_.__value_.__l.__size_ + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v45 = qword_253D31DC8;
  }
  v77 = (std::__shared_weak_count *)off_253D31DD0;
  if (off_253D31DD0)
  {
    v54 = (unint64_t *)((char *)off_253D31DD0 + 8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  v89.__r_.__value_.__r.__words[0] = 0;
  v89.__r_.__value_.__l.__size_ = (std::string::size_type)&v89;
  v89.__r_.__value_.__r.__words[2] = 0x2000000000;
  v90 = 0;
  block.__r_.__value_.__r.__words[0] = v40;
  block.__r_.__value_.__l.__size_ = 1107296256;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8BBUError12getErrorCodeEv_block_invoke;
  v86 = &__block_descriptor_tmp_4_0;
  v87 = &v89;
  v88 = (std::string *)v45;
  v91[0] = &block;
  v80.__r_.__value_.__r.__words[0] = v40;
  v80.__r_.__value_.__l.__size_ = 0x40000000;
  v80.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v81 = &__block_descriptor_tmp_10;
  v82 = v45;
  v83 = v91;
  v56 = *(NSObject **)(v45 + 16);
  if (*(_QWORD *)(v45 + 24))
    dispatch_async_and_wait(v56, &v80);
  else
    dispatch_sync(v56, &v80);
  v57 = *(unsigned int *)(v89.__r_.__value_.__l.__size_ + 24);
  _Block_object_dispose(&v89, 8);
  v58 = BBUReturnAsString::BBUReturnStrings[v57];
  pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  v59 = (BBUError *)qword_253D31DC8;
  if (!qword_253D31DC8)
  {
    v60 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
    v91[0] = 0;
    ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v60, "BBUError", QOS_CLASS_UTILITY, v91);
    if (v91[0])
      dispatch_release(v91[0]);
    v60->__on_zero_shared_weak = 0;
    v60[1].~__shared_weak_count = 0;
    v60[1].~__shared_weak_count_0 = 0;
    std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&block, v60);
    v61 = *(_OWORD *)&block.__r_.__value_.__l.__data_;
    *(_OWORD *)&block.__r_.__value_.__l.__data_ = 0uLL;
    v62 = (std::__shared_weak_count *)off_253D31DD0;
    *(_OWORD *)&qword_253D31DC8 = v61;
    if (v62)
    {
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v65 = (std::__shared_weak_count *)block.__r_.__value_.__l.__size_;
    if (block.__r_.__value_.__l.__size_)
    {
      v66 = (unint64_t *)(block.__r_.__value_.__l.__size_ + 8);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    v59 = (BBUError *)qword_253D31DC8;
  }
  v68 = (std::__shared_weak_count *)off_253D31DD0;
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
  v89.__r_.__value_.__l.__size_ = (std::string::size_type)off_253D31DD0;
  if (off_253D31DD0)
  {
    v69 = (unint64_t *)((char *)off_253D31DD0 + 8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  BBUError::getErrorString(v59, &v80);
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v71 = &v80;
  else
    v71 = (std::string *)v80.__r_.__value_.__r.__words[0];
  BBUFeedback::handleComment(v44, "Hit fatal error: %s reason: %s", v58, (const char *)v71);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (v68)
  {
    v72 = (unint64_t *)&v68->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v77)
  {
    v74 = (unint64_t *)&v77->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
}

void sub_212A674A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,dispatch_object_t object,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a38 < 0)
  {
    operator delete(object);
    ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef((const void **)(v38 - 112));
    if ((*(char *)(v38 - 121) & 0x80000000) == 0)
    {
LABEL_3:
      if (a20 < 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef((const void **)(v38 - 112));
    if ((*(char *)(v38 - 121) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*(void **)(v38 - 144));
  if (a20 < 0)
  {
LABEL_4:
    operator delete(__p);
    _Unwind_Resume(a1);
  }
LABEL_7:
  _Unwind_Resume(a1);
}

void BBUpdaterController::dumpDebugLogBuffer(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];

  if (a2)
  {
    if (a1[13])
    {
      v9 = (std::__shared_weak_count *)a1[14];
      v20[0] = a1[13];
      v20[1] = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      BBUpdaterController::dumpLogBufferInternal((uint64_t)a1, v20, "Debug Log Buffer");
      if (v9)
      {
        v12 = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
    {
      if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
        goto LABEL_13;
    }
    else
    {
      dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
      if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
      {
LABEL_13:
        if (!(BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS))
          return;
LABEL_14:
        if (a1[15])
        {
          v14 = (std::__shared_weak_count *)a1[16];
          v19[0] = a1[15];
          v19[1] = v14;
          if (v14)
          {
            v15 = (unint64_t *)&v14->__shared_owners_;
            do
              v16 = __ldxr(v15);
            while (__stxr(v16 + 1, v15));
          }
          BBUpdaterController::dumpLogBufferInternal((uint64_t)a1, v19, "Kernel IPC Log");
          if (v14)
          {
            v17 = (unint64_t *)&v14->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
        }
        return;
      }
    }
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
    if (!(BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS))
      return;
    goto LABEL_14;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      return;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      return;
  }
  if (gBBULogVerbosity >= 6)
    _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
}

void sub_212A678D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212A678E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v1 - 32);
  _Unwind_Resume(a1);
}

void BBUpdaterController::getCoreDumpPath(BBUpdaterController *this, uint64_t a2)
{
  _QWORD *v4;
  BBUPartitionManager *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  std::string::size_type v17;
  _QWORD *v18;
  BBUPartitionManager *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  int v28;
  std::string::size_type size;
  const std::string::value_type *p_p;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  char v34;
  unint64_t *v35;
  unint64_t v36;
  std::string v37;
  std::string v38;
  void *__p;
  __int128 v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  __p = operator new(0x48uLL);
  v40 = xmmword_212B50750;
  strcpy((char *)__p, "/wireless/Library/Logs/CrashReporter/Baseband/baseband_updater_logs/");
  memset(this, 170, 24);
  *((_BYTE *)this + 23) = 0;
  *(_BYTE *)this = 0;
  memset(&v38, 170, sizeof(v38));
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v4 = off_253D31E68;
  if (!off_253D31E68)
  {
    v5 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v5);
    v6 = operator new(0x20uLL);
    *v6 = &unk_24CE85728;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v5;
    v7 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v5;
    off_253D31E70 = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v4 = off_253D31E68;
  }
  v10 = (std::__shared_weak_count *)off_253D31E70;
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  v37.__r_.__value_.__l.__size_ = (std::string::size_type)off_253D31E70;
  if (off_253D31E70)
  {
    v11 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v13 = (uint64_t *)v4[1];
  if (!v13)
LABEL_17:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v14 = *((_DWORD *)v13 + 8);
      if (v14 < 2)
        break;
      v13 = (uint64_t *)*v13;
      if (!v13)
        goto LABEL_17;
    }
    if (v14 == 1)
      break;
    v13 = (uint64_t *)v13[1];
    if (!v13)
      goto LABEL_17;
  }
  if (*((char *)v13 + 63) < 0)
    std::string::__init_copy_ctor_external(&v38, (const std::string::value_type *)v13[5], v13[6]);
  else
    v38 = *(std::string *)(v13 + 5);
  if (!v10)
    goto LABEL_25;
  v15 = (unint64_t *)&v10->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v38.__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_67;
  }
  else
  {
LABEL_25:
    v17 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = v38.__r_.__value_.__l.__size_;
    if (!v17)
      goto LABEL_67;
  }
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v18 = off_253D31E68;
  if (!off_253D31E68)
  {
    v19 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v19);
    v20 = operator new(0x20uLL);
    *v20 = &unk_24CE85728;
    v20[1] = 0;
    v20[2] = 0;
    v20[3] = v19;
    v21 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v19;
    off_253D31E70 = v20;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v18 = off_253D31E68;
  }
  v24 = (std::__shared_weak_count *)off_253D31E70;
  if (off_253D31E70)
  {
    v25 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v27 = (uint64_t *)v18[1];
  if (!v27)
LABEL_44:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v28 = *((_DWORD *)v27 + 8);
      if (v28 < 2)
        break;
      v27 = (uint64_t *)*v27;
      if (!v27)
        goto LABEL_44;
    }
    if (v28 == 1)
      break;
    v27 = (uint64_t *)v27[1];
    if (!v27)
      goto LABEL_44;
  }
  if (*((char *)v27 + 63) < 0)
    std::string::__init_copy_ctor_external(&v37, (const std::string::value_type *)v27[5], v27[6]);
  else
    v37 = *(std::string *)(v27 + 5);
  if (v40 >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if (v40 >= 0)
    v31 = HIBYTE(v40);
  else
    v31 = v40;
  v32 = std::string::append(&v37, p_p, v31);
  v33 = v32->__r_.__value_.__r.__words[0];
  v41[0] = v32->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v41 + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
  v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
  *(_QWORD *)this = v33;
  *((_QWORD *)this + 1) = v41[0];
  *(_QWORD *)((char *)this + 15) = *(_QWORD *)((char *)v41 + 7);
  *((_BYTE *)this + 23) = v34;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (v24)
  {
    v35 = (unint64_t *)&v24->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
LABEL_67:
  v37.__r_.__value_.__r.__words[0] = 0;
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a2 + 40), CFSTR("coreDumpPath"), (const void **)&v37.__r_.__value_.__l.__data_)&& (ctu::cf::assign() & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a2 + 56), "failed converting core dump path to string");
    if (*((char *)this + 23) < 0)
    {
      *((_QWORD *)this + 1) = 0;
      this = *(BBUpdaterController **)this;
    }
    else
    {
      *((_BYTE *)this + 23) = 0;
    }
    *(_BYTE *)this = 0;
  }
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v40) & 0x80000000) == 0)
      return;
LABEL_77:
    operator delete(__p);
    return;
  }
  operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40) < 0)
    goto LABEL_77;
}

void sub_212A67DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  char **v31;

  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v31, v31[1]);
  operator delete(v31);
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  if (a23 < 0)
    operator delete(__p);
  if (*(char *)(v30 + 23) < 0)
    operator delete(*(void **)v30);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void BBUpdaterController::updateProvisioningInfo(uint64_t a1, uint64_t a2)
{
  __CFDictionary *v2;
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  uint64_t (*v7)(uint64_t);
  __CFDictionary *v8;
  CFNumberRef v9;
  _QWORD *v10;
  uint64_t v11;
  CFDataRef v12;
  CFDataRef v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *exception;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  _QWORD valuePtr[2];
  void *value;

  v2 = *(__CFDictionary **)(a1 + 32);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 86, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x692u, (ctu::LogMessageBuffer *)"Assertion failure(dict && \"Failed to create dictionary for updating provisioning parameters.\")", v20, v21, v22, v54);
    goto LABEL_41;
  }
  if (!*(_BYTE *)(a1 + 242))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 86, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x694u, (ctu::LogMessageBuffer *)"Assertion failure(fProvisionState.requested && \"Failed to request provision state.\")", v23, v24, v25, v54);
LABEL_41:
  }
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  valuePtr[1] = Mutable;
  v7 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  if (!Mutable)
    v7 = 0;
  if (!v7)
  {
    v26 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v26, 86, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x69Au, (ctu::LogMessageBuffer *)"Assertion failure(tmp && \"Failed to create dictionary for updating provisioning parameters.\")", v27, v28, v29, v54);
  }
  v8 = Mutable;
  LODWORD(valuePtr[0]) = *(_BYTE *)(a1 + 241) == 0;
  v9 = CFNumberCreate(v5, kCFNumberSInt32Type, valuePtr);
  value = v9;
  CFDictionarySetValue(v8, CFSTR("Status"), v9);
  if (v9)
    CFRelease(v9);
  v10 = *(_QWORD **)a2;
  v11 = *(_QWORD *)(*(_QWORD *)a2 + 32);
  if (v11)
  {
    v12 = CFDataCreate(v5, *(const UInt8 **)v11, *(unsigned int *)(v11 + 8));
    v13 = v12;
    if (!v12)
    {
      v30 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v30, 103, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUProvisioningParameters.h", 0x6Cu, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Failed to get session key.\")", v31, v32, v33, v54);
    }
    value = v12;
    CFDictionarySetValue(v8, CFSTR("EncryptedSessionKey"), v12);
    CFRelease(v13);
    v10 = *(_QWORD **)a2;
  }
  if (*(_BYTE *)(a1 + 240))
  {
    if (*v10)
    {
      value = (void *)0xAAAAAAAAAAAAAAAALL;
      if ((ctu::cf::convert_copy() & 1) == 0)
      {
        v42 = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)v42, 30, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUProvisioningParameters.h", 0x1Cu, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Failed to get IMEI.\")", v43, v44, v45, v54);
      }
      v14 = value;
      valuePtr[0] = value;
      CFDictionarySetValue(v8, CFSTR("IMEI"), value);
      if (v14)
        CFRelease(v14);
      v10 = *(_QWORD **)a2;
    }
    if (v10[1])
    {
      value = (void *)0xAAAAAAAAAAAAAAAALL;
      if ((ctu::cf::convert_copy() & 1) == 0)
      {
        v46 = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)v46, 30, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUProvisioningParameters.h", 0x1Cu, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Failed to get IMEI.\")", v47, v48, v49, v54);
      }
      v15 = value;
      valuePtr[0] = value;
      CFDictionarySetValue(v8, CFSTR("IMEI2"), value);
      if (v15)
        CFRelease(v15);
      v10 = *(_QWORD **)a2;
    }
    if (v10[2])
    {
      value = (void *)0xAAAAAAAAAAAAAAAALL;
      if ((ctu::cf::convert_copy() & 1) == 0)
      {
        v50 = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)v50, 29, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUProvisioningParameters.h", 0x36u, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Failed to get MEID.\")", v51, v52, v53, v54);
      }
      v16 = value;
      valuePtr[0] = value;
      CFDictionarySetValue(v8, CFSTR("MEID"), value);
      if (v16)
        CFRelease(v16);
      v10 = *(_QWORD **)a2;
    }
  }
  if (v10[3])
  {
    value = (void *)0xAAAAAAAAAAAAAAAALL;
    if ((ctu::cf::convert_copy() & 1) == 0)
    {
      v34 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v34, 107, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUProvisioningParameters.h", 0x50u, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Failed to get EID.\")", v35, v36, v37, v54);
    }
    v17 = value;
    valuePtr[0] = value;
    CFDictionarySetValue(v8, CFSTR("EID"), value);
    if (v17)
      CFRelease(v17);
    v10 = *(_QWORD **)a2;
  }
  if (v10[6])
  {
    value = (void *)0xAAAAAAAAAAAAAAAALL;
    if ((ctu::cf::convert_copy() & 1) == 0)
    {
      v38 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v38, 32, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUProvisioningParameters.h", 0xA1u, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Unrecognized radio type.\")", v39, v40, v41, v54);
    }
    v18 = value;
    valuePtr[0] = value;
    CFDictionarySetValue(v8, CFSTR("CarrierID"), value);
    if (v18)
      CFRelease(v18);
  }
  CFDictionarySetValue(v2, CFSTR("provisioning"), v8);
  if (v8)
    CFRelease(v8);
}

void sub_212A6840C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, const void *a12)
{
  void *v12;

  __cxa_free_exception(v12);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a12);
  _Unwind_Resume(a1);
}

void sub_212A68460(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A68474(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A68488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212A6849C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212A684B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212A684C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((uint64_t *)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(va1);
  _Unwind_Resume(a1);
}

void sub_212A684EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212A6850C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212A68520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212A68534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212A68548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212A68564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212A68578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

BBUProvisioningParameters **std::unique_ptr<BBUProvisioningParameters>::~unique_ptr[abi:ne180100](BBUProvisioningParameters **a1)
{
  BBUProvisioningParameters *v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    BBUProvisioningParameters::~BBUProvisioningParameters(v2);
    operator delete(v3);
  }
  return a1;
}

void BBUpdaterController::provision(uint64_t a1, int a2)
{
  _OWORD *v4;
  BBUFeedback *v5;
  _DWORD *v6;
  _DWORD *v7;
  BBUEUR10UpdateSource *FirmwareDataSource;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BBUEUR10UpdateSource *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *exception;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  std::string __p;
  std::string v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;

  v37 = 0;
  v4 = operator new(0x38uLL);
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  *((_QWORD *)v4 + 6) = 0;
  v36 = v4;
  v6 = BBUProvisioner::create(*(BBUProvisioner **)(a1 + 56), v5);
  v7 = v6;
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x3BCu, (ctu::LogMessageBuffer *)"Assertion failure(provisioner)", v25, v26, v27, v32);
  }
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v6 + 24))(v6, 1);
  FirmwareDataSource = BBUpdaterController::getFirmwareDataSource((BBUpdaterController *)a1, 0);
  v12 = FirmwareDataSource;
  if (FirmwareDataSource)
  {
    (*(void (**)(BBUEUR10UpdateSource *))(*(_QWORD *)FirmwareDataSource + 104))(FirmwareDataSource);
    if (((*(uint64_t (**)(BBUEUR10UpdateSource *, uint64_t, uint64_t *))(*(_QWORD *)v12 + 120))(v12, 1, &v37) & 1) == 0)
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 56), "No provisioning data");
      BBUpdaterController::process_event<BBUpdaterControllerFSM::eventFinalize>(*(int **)(a1 + 16), *(std::__shared_weak_count **)(a1 + 24), (uint64_t)&v34);
      goto LABEL_12;
    }
    if (a2 != 2)
    {
      if (a2 != 1)
      {
        v28 = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)v28, 70, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x3E5u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized BBU provisioning stage.\")", v29, v30, v31, v32);
      }
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 56), "Will provision");
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 56), "Sending start provisioning command");
      v16 = (*(uint64_t (**)(_DWORD *, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v7 + 32))(v7, v37, v4, a1 + 152);
      if (!v16)
      {
        BBUpdaterController::updateProvisioningInfo(a1, (uint64_t)&v36);
LABEL_12:
        (*(void (**)(BBUEUR10UpdateSource *))(*(_QWORD *)v12 + 16))(v12);
        goto LABEL_13;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_35;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_35;
      }
      if (gBBULogVerbosity >= 6)
        _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v13, v14, v15, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_35:
      std::string::basic_string[abi:ne180100]<0>(&__p, "Failed starting mature provisioning.");
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v34 = __p;
        goto LABEL_44;
      }
      goto LABEL_43;
    }
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 56), "Sending finish provisioning command");
    v16 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v37, a1 + 152);
    if (!v16)
    {
      *(_BYTE *)(a1 + 241) = 1;
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 56), "Updating provisioning parameters from BB");
      v16 = (*(uint64_t (**)(_QWORD, uint64_t, _OWORD *))(**(_QWORD **)(a1 + 72) + 88))(*(_QWORD *)(a1 + 72), a1 + 152, v4);
      if (!v16)
      {
        BBUpdaterController::updateProvisioningInfo(a1, (uint64_t)&v36);
        BBUpdaterController::process_event<BBUpdaterControllerFSM::eventFinalize>(*(int **)(a1 + 16), *(std::__shared_weak_count **)(a1 + 24), (uint64_t)&v34);
        goto LABEL_12;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_41;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_41;
      }
      if (gBBULogVerbosity >= 6)
        _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v20, v21, v22, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__p, "Failed to update provisioning parameters");
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v34 = __p;
        goto LABEL_44;
      }
      goto LABEL_43;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_29;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_29;
    }
    if (gBBULogVerbosity >= 6)
      _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v17, v18, v19, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_29:
    std::string::basic_string[abi:ne180100]<0>(&__p, "Failed completing mature provisioning.");
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      v34 = __p;
LABEL_44:
      v35 = v16;
      BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(a1, (uint64_t)&v34);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_12;
    }
LABEL_43:
    std::string::__init_copy_ctor_external(&v34, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    goto LABEL_44;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      goto LABEL_16;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
    {
LABEL_16:
      if (gBBULogVerbosity >= 6)
        _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v9, v10, v11, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Fail to get update source for provision");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v34, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v34 = __p;
  v35 = 35;
  BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(a1, (uint64_t)&v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_13:
  (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
  BBUProvisioningParameters::~BBUProvisioningParameters((BBUProvisioningParameters *)v4);
  operator delete(v23);
}

void sub_212A68C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a17 < 0)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  std::unique_ptr<BBUProvisioningParameters>::~unique_ptr[abi:ne180100]((BBUProvisioningParameters **)(v25 - 64));
  _Unwind_Resume(a1);
}

void BBUpdaterController::process_event<BBUpdaterControllerFSM::eventFinalize>(int *a1, std::__shared_weak_count *a2, uint64_t a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  void **v7;
  void **v8;
  char v9;
  __int128 v10;
  char *v11;
  size_t v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[3];
  void *__dst[2];
  uint64_t v28;
  int *v29;
  std::__shared_weak_count *v30;

  v29 = a1;
  v30 = a2;
  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  __dst[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v28 = 0x7AAAAAAAAAAAAAALL;
  strcpy((char *)__dst, "unknown");
  memset(__p, 170, sizeof(__p));
  (*(void (**)(void **__return_ptr, int *))(*(_QWORD *)a1 + 24))(__p, a1);
  v7 = (void **)__p[0];
  v8 = (void **)((char *)__p[0] + 24 * a1[8]);
  if (__dst != v8)
  {
    v9 = *((_BYTE *)v8 + 23);
    if (SHIBYTE(v28) < 0)
    {
      if (v9 >= 0)
        v11 = (char *)__p[0] + 24 * a1[8];
      else
        v11 = (char *)*v8;
      if (v9 >= 0)
        v12 = *((unsigned __int8 *)v8 + 23);
      else
        v12 = (size_t)v8[1];
      std::string::__assign_no_alias<false>(__dst, v11, v12);
    }
    else if ((*((_BYTE *)v8 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(__dst, *v8, (size_t)v8[1]);
    }
    else
    {
      v10 = *(_OWORD *)v8;
      v28 = (uint64_t)v8[2];
      *(_OWORD *)__dst = v10;
    }
    v7 = (void **)__p[0];
  }
  if (v7)
  {
    v13 = (void **)__p[1];
    v14 = v7;
    if (__p[1] != v7)
    {
      do
      {
        if (*((char *)v13 - 1) < 0)
          operator delete(*(v13 - 3));
        v13 -= 3;
      }
      while (v13 != v7);
      v14 = (void **)__p[0];
    }
    __p[1] = v7;
    operator delete(v14);
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_33;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_33;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    boost::core::demangle((boost::core *)__p, (const char *)(0x8000000212B5181ELL & 0x7FFFFFFFFFFFFFFFLL));
    if (SHIBYTE(__p[2]) >= 0)
      v18 = __p;
    else
      LOBYTE(v18) = __p[0];
    _BBULog(21, 0, "BBUpdaterController", "", "processing event: %s, current state %d [%s]\n", v15, v16, v17, (char)v18);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
LABEL_33:
  boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventFinalize>((uint64_t)v29, a3, 1);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_41;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_41;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    boost::core::demangle((boost::core *)__p, (const char *)(0x8000000212B5181ELL & 0x7FFFFFFFFFFFFFFFLL));
    if (SHIBYTE(__p[2]) >= 0)
      v22 = __p;
    else
      LOBYTE(v22) = __p[0];
    _BBULog(21, 0, "BBUpdaterController", "", "finish processing event: %s\n", v19, v20, v21, (char)v22);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
LABEL_41:
  if (SHIBYTE(v28) < 0)
    operator delete(__dst[0]);
  v23 = v30;
  if (v30)
  {
    v24 = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_212A6909C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  std::vector<std::string>::~vector[abi:ne180100](&a12);
  if ((a23 & 0x80000000) == 0)
  {
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v23 - 64);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v23 - 64);
  _Unwind_Resume(a1);
}

uint64_t BBUpdaterController::createTransportNoEvents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _OWORD v23[4];
  void *__p[2];
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26 = 0xAAAAAAAAAAAAAAAALL;
  v28 = v6;
  v36 = v6;
  v35 = v6;
  v34 = v6;
  v33 = v6;
  v32 = v6;
  v31 = v6;
  v30 = v6;
  v29 = v6;
  *(_OWORD *)__p = v6;
  v25 = v6;
  v23[2] = v6;
  v23[3] = v6;
  v23[0] = v6;
  v23[1] = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v27 = MEMORY[0x24BEDB870] + 64;
  v9 = (uint64_t *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v22 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v22 + *(_QWORD *)(v22 - 24));
  std::ios_base::init(v11, v23);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v22 = v7 + 24;
  v27 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v23[0] = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  LODWORD(v26) = 16;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 40))(*(_QWORD *)(a1 + 64), a1 + 152);
  v16 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 48), a3, a2);
  if ((_DWORD)v16)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_8;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_8;
    }
    if (gBBULogVerbosity < 6)
      goto LABEL_8;
    goto LABEL_14;
  }
  v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, double))(**(_QWORD **)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64), a1 + 152, a3, 0, 0, 0.0);
  if ((_DWORD)v16)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_8;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_8;
    }
    if (gBBULogVerbosity < 6)
      goto LABEL_8;
LABEL_14:
    _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v13, v14, v15, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
    goto LABEL_8;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    v16 = 0;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x10) == 0)
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v16 = 0;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x10) == 0)
      goto LABEL_8;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v17 = BBUStageAsString(a3);
    _BBULog(4, 0, "BBUpdaterController", "", "Finish preparing at %s\n", v18, v19, v20, v17);
    v16 = 0;
  }
LABEL_8:
  v22 = *v9;
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = v9[3];
  *(_QWORD *)&v23[0] = v12 + 16;
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v27);
  return v16;
}

void sub_212A694AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](v1);
  _Unwind_Resume(a1);
}

void BBUpdaterController::process_event<BBUpdaterControllerFSM::eventCmdQueryInfo>(int *a1, std::__shared_weak_count *a2, uint64_t a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  void **v7;
  void **v8;
  char v9;
  __int128 v10;
  char *v11;
  size_t v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[3];
  void *__dst[2];
  uint64_t v28;
  int *v29;
  std::__shared_weak_count *v30;

  v29 = a1;
  v30 = a2;
  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  __dst[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v28 = 0x7AAAAAAAAAAAAAALL;
  strcpy((char *)__dst, "unknown");
  memset(__p, 170, sizeof(__p));
  (*(void (**)(void **__return_ptr, int *))(*(_QWORD *)a1 + 24))(__p, a1);
  v7 = (void **)__p[0];
  v8 = (void **)((char *)__p[0] + 24 * a1[8]);
  if (__dst != v8)
  {
    v9 = *((_BYTE *)v8 + 23);
    if (SHIBYTE(v28) < 0)
    {
      if (v9 >= 0)
        v11 = (char *)__p[0] + 24 * a1[8];
      else
        v11 = (char *)*v8;
      if (v9 >= 0)
        v12 = *((unsigned __int8 *)v8 + 23);
      else
        v12 = (size_t)v8[1];
      std::string::__assign_no_alias<false>(__dst, v11, v12);
    }
    else if ((*((_BYTE *)v8 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(__dst, *v8, (size_t)v8[1]);
    }
    else
    {
      v10 = *(_OWORD *)v8;
      v28 = (uint64_t)v8[2];
      *(_OWORD *)__dst = v10;
    }
    v7 = (void **)__p[0];
  }
  if (v7)
  {
    v13 = (void **)__p[1];
    v14 = v7;
    if (__p[1] != v7)
    {
      do
      {
        if (*((char *)v13 - 1) < 0)
          operator delete(*(v13 - 3));
        v13 -= 3;
      }
      while (v13 != v7);
      v14 = (void **)__p[0];
    }
    __p[1] = v7;
    operator delete(v14);
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_33;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_33;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    boost::core::demangle((boost::core *)__p, (const char *)(0x8000000212B51931 & 0x7FFFFFFFFFFFFFFFLL));
    if (SHIBYTE(__p[2]) >= 0)
      v18 = __p;
    else
      LOBYTE(v18) = __p[0];
    _BBULog(21, 0, "BBUpdaterController", "", "processing event: %s, current state %d [%s]\n", v15, v16, v17, (char)v18);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
LABEL_33:
  boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdQueryInfo>((uint64_t)v29, a3, 1);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_41;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_41;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    boost::core::demangle((boost::core *)__p, (const char *)(0x8000000212B51931 & 0x7FFFFFFFFFFFFFFFLL));
    if (SHIBYTE(__p[2]) >= 0)
      v22 = __p;
    else
      LOBYTE(v22) = __p[0];
    _BBULog(21, 0, "BBUpdaterController", "", "finish processing event: %s\n", v19, v20, v21, (char)v22);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
LABEL_41:
  if (SHIBYTE(v28) < 0)
    operator delete(__dst[0]);
  v23 = v30;
  if (v30)
  {
    v24 = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_212A69844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  std::vector<std::string>::~vector[abi:ne180100](&a12);
  if ((a23 & 0x80000000) == 0)
  {
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v23 - 64);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v23 - 64);
  _Unwind_Resume(a1);
}

void BBUpdaterController::updateOutputPersonalizedParameters(BBUpdaterController *this)
{
  __CFDictionary *v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  const void *v8;

  v2 = (__CFDictionary *)*((_QWORD *)this + 4);
  v3 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if (v3 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3))
  {
    v4 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    CFDictionarySetValue(v2, CFSTR("ChipSerialNo"), v4);
    v5 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
    if (!v5)
    {
LABEL_9:
      CFDictionaryRemoveValue(v2, CFSTR("CertID"));
      v7 = *(_QWORD *)(*((_QWORD *)this + 12) + 40);
      if (!v7)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
  else
  {
    CFDictionaryRemoveValue(v2, CFSTR("ChipSerialNo"));
    v5 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
    if (!v5)
      goto LABEL_9;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5))
    goto LABEL_9;
  v6 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  CFDictionarySetValue(v2, CFSTR("CertID"), v6);
  v7 = *(_QWORD *)(*((_QWORD *)this + 12) + 40);
  if (!v7)
    goto LABEL_12;
LABEL_10:
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7))
  {
    v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    CFDictionarySetValue(v2, CFSTR("CertHash"), v8);
    return;
  }
LABEL_12:
  CFDictionaryRemoveValue(v2, CFSTR("CertHash"));
}

void BBUpdaterController::cmdCopyRequirePartitionMount(BBUFeedback **this, const __CFDictionary **a2)
{
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  capabilities::updater *v6;
  uint64_t v7;
  CFNumberRef v8;
  NSObject *v9;
  std::__shared_weak_count_vtbl *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *isa;
  unint64_t *v22;
  unint64_t v23;
  void *__p[2];
  char v25;
  __int128 valuePtr;
  void (*v27)(uint64_t);
  void *v28;
  NSObject *v29;
  void **v30;
  int v31;
  __int128 *p_valuePtr;
  NSObject *block[6];

  if (a2)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    ctu::cf::insert<__CFString const*,BOOL>(Mutable, CFSTR("requireSystemPartitionMount"), 1);
    BBUFeedback::handleComment(this[7], "%s: supports flashless %d", "cmdCopyRequirePartitionMount", 1);
    BBUFeedback::handleComment(this[7], "%s: supports REFS %d", "cmdCopyRequirePartitionMount", 1);
    v6 = (capabilities::updater *)ctu::cf::insert<__CFString const*,BOOL>(Mutable, CFSTR("requireUserPartitionMount"), 1);
    v7 = capabilities::updater::BBUFSPartitionSizeMB(v6);
    block[0] = CFSTR("requestedBasebandFSPartitionMountSize");
    CFRetain(CFSTR("requestedBasebandFSPartitionMountSize"));
    *(_QWORD *)&valuePtr = v7;
    v8 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
    __p[0] = v8;
    if (v8)
    {
      CFDictionaryAddValue(Mutable, CFSTR("requestedBasebandFSPartitionMountSize"), v8);
      CFRelease(v8);
    }
    CFRelease(CFSTR("requestedBasebandFSPartitionMountSize"));
    *a2 = Mutable;
    return;
  }
  pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  v9 = qword_253D31DC8;
  if (!qword_253D31DC8)
  {
    v10 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
    block[0] = 0;
    ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v10, "BBUError", QOS_CLASS_UTILITY, block);
    if (block[0])
      dispatch_release(block[0]);
    v10->__on_zero_shared_weak = 0;
    v10[1].~__shared_weak_count = 0;
    v10[1].~__shared_weak_count_0 = 0;
    std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&valuePtr, v10);
    v11 = valuePtr;
    valuePtr = 0uLL;
    v12 = (std::__shared_weak_count *)off_253D31DD0;
    *(_OWORD *)&qword_253D31DC8 = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)*((_QWORD *)&valuePtr + 1);
    if (*((_QWORD *)&valuePtr + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&valuePtr + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v9 = qword_253D31DC8;
  }
  v18 = (std::__shared_weak_count *)off_253D31DD0;
  if (off_253D31DD0)
  {
    v19 = (unint64_t *)((char *)off_253D31DD0 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  v25 = 15;
  strcpy((char *)__p, "Null output ptr");
  *(_QWORD *)&valuePtr = MEMORY[0x24BDAC760];
  *((_QWORD *)&valuePtr + 1) = 0x40000000;
  v27 = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
  v28 = &__block_descriptor_tmp_6;
  v29 = v9;
  v30 = __p;
  v31 = 2;
  p_valuePtr = &valuePtr;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_10;
  block[4] = v9;
  block[5] = &p_valuePtr;
  isa = v9[2].isa;
  if (!v9[3].isa)
  {
    dispatch_sync(isa, block);
    if ((v25 & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
  dispatch_async_and_wait(isa, block);
  if (v25 < 0)
LABEL_25:
    operator delete(__p[0]);
LABEL_26:
  if (v18)
  {
    v22 = (unint64_t *)&v18->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_212A69D4C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  NSObject *v4;

  v4 = *(NSObject **)(v2 - 96);
  if (v4)
    dispatch_release(v4);
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_212A69D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v4 - 96));
  _Unwind_Resume(a1);
}

void sub_212A69DAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::insert<__CFString const*,BOOL>(CFMutableDictionaryRef theDict, CFTypeRef cf, int a3)
{
  const void **v6;
  const void *v7;
  BOOL v8;
  uint64_t v9;

  if (cf)
    CFRetain(cf);
  v6 = (const void **)MEMORY[0x24BDBD270];
  if (!a3)
    v6 = (const void **)MEMORY[0x24BDBD268];
  v7 = *v6;
  if (cf)
    v8 = v7 == 0;
  else
    v8 = 1;
  v9 = !v8;
  if (v8)
  {
    if (!v7)
      goto LABEL_15;
  }
  else
  {
    CFDictionaryAddValue(theDict, cf, v7);
  }
  CFRelease(v7);
LABEL_15:
  if (cf)
    CFRelease(cf);
  return v9;
}

void sub_212A69E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

_QWORD *BBUpdaterController::getFirmwareFolder(_QWORD *this, const __CFDictionary *a2)
{
  uint64_t (*v2)(uint64_t);
  _QWORD *v3;
  __int128 v4;
  uint64_t v5;
  _QWORD v6[2];

  *this = 0;
  this[1] = 0;
  this[2] = 0;
  v2 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!a2)
    v2 = 0;
  if (v2)
  {
    v3 = this;
    v6[0] = 0xAAAAAAAAAAAAAAAALL;
    v6[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v6, a2);
    ctu::cf::map_adapter::getString();
    *(_OWORD *)v3 = v4;
    v3[2] = v5;
    return (_QWORD *)MEMORY[0x212BF9A70](v6);
  }
  return this;
}

void sub_212A69F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x212BF9A70](v14 - 32);
  _Unwind_Resume(a1);
}

uint64_t BBUpdaterController::getNVRestoreSetting(BBUpdaterController *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v8)(uint64_t);
  int *v9;
  CFTypeID v10;
  const __CFNumber *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unsigned int v16;
  void *value;

  value = (void *)0xAAAAAAAAAAAAAAAALL;
  v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!this)
    v8 = 0;
  if (!v8
    || !CFDictionaryGetValueIfPresent(this, CFSTR("NVRestoreSetting"), (const void **)&value)
    || (v16 = -1431655766, (v9 = (int *)value) == 0)
    || (v10 = CFGetTypeID(value), v10 != CFNumberGetTypeID())
    || (v12 = ctu::cf::assign((ctu::cf *)&v16, v9, v11), (v12 & 1) == 0))
  {
LABEL_13:
    v14 = 2;
    goto LABEL_14;
  }
  v13 = v16;
  if (v16 - 6 > 0xFFFFFFFA)
  {
    v14 = v16;
    if (v16 != 5)
      goto LABEL_14;
    if ((capabilities::updater::supportsNVSettingOQCMagic((capabilities::updater *)v12) & 1) != 0)
    {
      v14 = 5;
      goto LABEL_14;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      v14 = 3;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
        goto LABEL_14;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v14 = 3;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
        goto LABEL_14;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      _BBULog(19, 0, "BBUpdaterController", "", "Invalid NVRestore setting provided: %d, changing to NoUpdate settings\n", a6, a7, a8, 5);
      v14 = 3;
    }
  }
  else
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v14 = 2;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
        goto LABEL_14;
      goto LABEL_11;
    }
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v14 = 2;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) != 0)
    {
LABEL_11:
      if (gBBULogVerbosity < 0)
        goto LABEL_14;
      _BBULog(19, 0, "BBUpdaterController", "", "Invalid NVRestore setting provided: %d, changing to Shipping (or NoUpdate for non-iOS) settings\n", a6, a7, a8, v13);
      goto LABEL_13;
    }
  }
LABEL_14:
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
      return v14;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
      return v14;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(19, 0, "BBUpdaterController", "", "NVRestore setting: %d\n", a6, a7, a8, v14);
  return v14;
}

void BBUpdaterController::updateOutputFusingManifestInfo(BBUpdaterController *this)
{
  __CFDictionary *v1;
  const __CFAllocator *v3;
  CFNumberRef v4;
  uint64_t (*v5)(uint64_t);
  CFNumberRef v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  __CFDictionary *Mutable;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  const void *v23;
  int v24;
  const void *v25;
  const void *v26;
  void *exception;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v1 = (__CFDictionary *)*((_QWORD *)this + 4);
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 24, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x625u, (ctu::LogMessageBuffer *)"Assertion failure(dict && \"Failed to create output dictionary for fusing manifest info.\")", v28, v29, v30, v39);
  }
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (const void *)(*((_QWORD *)this + 12) + 88));
  v5 = ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get;
  if (!v4)
    v5 = 0;
  if (!v5)
  {
    v31 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v31, 24, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x62Au, (ctu::LogMessageBuffer *)"Assertion failure(stateRef && \"Failed to create state reference for fusing manifest info.\")", v32, v33, v34, v39);
  }
  v6 = v4;
  CFDictionarySetValue(v1, CFSTR("FusingStatus"), v4);
  v7 = *((_QWORD *)this + 12);
  if (*(_DWORD *)(v7 + 88) == 3)
  {
    BBUpdaterController::updateOutputPersonalizedParameters(this);
    v7 = *((_QWORD *)this + 12);
  }
  v8 = *(_QWORD *)(v7 + 8);
  if (v8 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8))
  {
    v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    CFDictionarySetValue(v1, CFSTR("Nonce"), v9);
  }
  else
  {
    CFDictionaryRemoveValue(v1, CFSTR("Nonce"));
  }
  v10 = *(_QWORD *)(*((_QWORD *)this + 12) + 16);
  if (v10 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10))
  {
    v11 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    CFDictionarySetValue(v1, CFSTR("ChipID"), v11);
  }
  else
  {
    CFDictionaryRemoveValue(v1, CFSTR("ChipID"));
  }
  Mutable = CFDictionaryCreateMutable(v3, 6, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v13 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  if (!Mutable)
    v13 = 0;
  if (!v13)
  {
    v35 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v35, 24, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x64Cu, (ctu::LogMessageBuffer *)"Assertion failure(manifestInfo && \"Failed to create fusing manifest info dictionary.\")", v36, v37, v38, (char)Mutable);
  }
  v14 = *(_QWORD *)(*((_QWORD *)this + 12) + 48);
  if (v14 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14))
  {
    v15 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    CFDictionarySetValue(Mutable, CFSTR("SKeyStatus"), v15);
  }
  v16 = *(_QWORD *)(*((_QWORD *)this + 12) + 56);
  if (v16 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16))
  {
    v17 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    CFDictionarySetValue(Mutable, CFSTR("SKeyHash"), v17);
  }
  v18 = *(_QWORD *)(*((_QWORD *)this + 12) + 64);
  if (v18 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18))
  {
    v19 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    CFDictionarySetValue(Mutable, CFSTR("PMStatusCode"), v19);
  }
  v20 = *(_QWORD *)(*((_QWORD *)this + 12) + 72);
  if (v20 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20))
  {
    v21 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    CFDictionarySetValue(Mutable, CFSTR("CMStatusCode"), v21);
  }
  v22 = *(_QWORD *)(*((_QWORD *)this + 12) + 80);
  if (v22 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
  {
    v23 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    CFDictionarySetValue(Mutable, CFSTR("FCMStatusCode"), v23);
  }
  if (*((_BYTE *)this + 242))
  {
    v24 = *((unsigned __int8 *)this + 240);
    v25 = (const void *)*MEMORY[0x24BDBD270];
    if (v24)
      v26 = (const void *)*MEMORY[0x24BDBD270];
    else
      v26 = (const void *)*MEMORY[0x24BDBD268];
    CFDictionarySetValue(Mutable, CFSTR("ProvisioningManifestExists"), v26);
    CFDictionarySetValue(Mutable, CFSTR("ProvisioningManifestSupported"), v25);
  }
  if (CFDictionaryGetCount(Mutable) < 1)
    CFDictionaryRemoveValue(v1, CFSTR("ManifestInfo"));
  else
    CFDictionarySetValue(v1, CFSTR("ManifestInfo"), Mutable);
  if (Mutable)
    CFRelease(Mutable);
  if (v6)
    CFRelease(v6);
}

void sub_212A6A5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t BBUpdaterController::getShouldFuseProvision(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeID ValueIfPresent;
  uint64_t (*v11)(uint64_t);
  BOOL *v12;
  CFTypeID v13;
  const __CFBoolean *v14;
  BOOL *v15;
  CFTypeID v16;
  const __CFBoolean *v17;
  _DWORD *v18;
  _DWORD *v19;
  BBUEUR10UpdateSource *FirmwareDataSource;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BBUEUR10UpdateSource *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v32;
  std::__shared_weak_count *v33;
  int *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::string::size_type v37;
  std::string::size_type v38;
  char v39;
  __int128 v40;
  void *v41;
  size_t v42;
  std::string::size_type size;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::string *p_p;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::string *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  int *v60;
  unint64_t *v61;
  unint64_t v62;
  std::string::size_type v63;
  std::string::size_type v64;
  char v65;
  __int128 v66;
  void *v67;
  size_t v68;
  std::string::size_type v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  std::string *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::string *v78;
  unint64_t *v79;
  void *exception;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  std::string value;
  uint64_t v87;
  std::string __p;
  int *v89;
  std::__shared_weak_count *v90;

  value.__r_.__value_.__r.__words[0] = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  ValueIfPresent = *(_QWORD *)(a1 + 40);
  v11 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!ValueIfPresent)
    v11 = 0;
  if (v11 && *(_DWORD *)(*(_QWORD *)(a1 + 96) + 88) != 3)
  {
    ValueIfPresent = CFDictionaryGetValueIfPresent((CFDictionaryRef)ValueIfPresent, CFSTR("DisallowFusing"), (const void **)&value.__r_.__value_.__l.__data_);
    if (!(_DWORD)ValueIfPresent)
      goto LABEL_10;
    v12 = (BOOL *)value.__r_.__value_.__r.__words[0];
    if (value.__r_.__value_.__r.__words[0])
    {
      v13 = CFGetTypeID(value.__r_.__value_.__l.__data_);
      ValueIfPresent = CFBooleanGetTypeID();
      if (v13 == ValueIfPresent)
        ValueIfPresent = ctu::cf::assign((ctu::cf *)&__p, v12, v14);
    }
    if (!__p.__r_.__value_.__s.__data_[0])
    {
LABEL_10:
      ValueIfPresent = CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), CFSTR("fuseAttemptSucceeded"), (const void **)&value.__r_.__value_.__l.__data_);
      if (!(_DWORD)ValueIfPresent)
        goto LABEL_34;
      v15 = (BOOL *)value.__r_.__value_.__r.__words[0];
      if (value.__r_.__value_.__r.__words[0])
      {
        v16 = CFGetTypeID(value.__r_.__value_.__l.__data_);
        ValueIfPresent = CFBooleanGetTypeID();
        if (v16 == ValueIfPresent)
          ValueIfPresent = ctu::cf::assign((ctu::cf *)&__p, v15, v17);
      }
      if (!__p.__r_.__value_.__s.__data_[0])
      {
LABEL_34:
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
            goto LABEL_38;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
            goto LABEL_38;
        }
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(13, 0, "BBUpdaterController", "", "fusing is requested\n", a6, a7, a8, v84);
LABEL_38:
        v34 = *(int **)(a1 + 16);
        v33 = *(std::__shared_weak_count **)(a1 + 24);
        v89 = v34;
        v90 = v33;
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v36 = __ldxr(p_shared_owners);
          while (__stxr(v36 + 1, p_shared_owners));
        }
        value.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
        value.__r_.__value_.__r.__words[2] = 0x7AAAAAAAAAAAAAALL;
        strcpy((char *)&value, "unknown");
        memset(&__p, 170, sizeof(__p));
        (*(void (**)(std::string *__return_ptr, int *))(*(_QWORD *)v34 + 24))(&__p, v34);
        v37 = __p.__r_.__value_.__r.__words[0];
        v38 = __p.__r_.__value_.__r.__words[0] + 24 * v34[8];
        if (&value != (std::string *)v38)
        {
          v39 = *(_BYTE *)(v38 + 23);
          if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v39 >= 0)
              v41 = (void *)(__p.__r_.__value_.__r.__words[0] + 24 * v34[8]);
            else
              v41 = *(void **)v38;
            if (v39 >= 0)
              v42 = *(unsigned __int8 *)(v38 + 23);
            else
              v42 = *(_QWORD *)(v38 + 8);
            std::string::__assign_no_alias<false>((void **)&value.__r_.__value_.__l.__data_, v41, v42);
          }
          else if ((*(_BYTE *)(v38 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(&value, *(void **)v38, *(_QWORD *)(v38 + 8));
          }
          else
          {
            v40 = *(_OWORD *)v38;
            value.__r_.__value_.__r.__words[2] = *(_QWORD *)(v38 + 16);
            *(_OWORD *)&value.__r_.__value_.__l.__data_ = v40;
          }
          v37 = __p.__r_.__value_.__r.__words[0];
        }
        if (v37)
        {
          size = __p.__r_.__value_.__l.__size_;
          v44 = (void *)v37;
          if (__p.__r_.__value_.__l.__size_ != v37)
          {
            do
            {
              if (*(char *)(size - 1) < 0)
                operator delete(*(void **)(size - 24));
              size -= 24;
            }
            while (size != v37);
            v44 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          __p.__r_.__value_.__l.__size_ = v37;
          operator delete(v44);
        }
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
            goto LABEL_75;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
            goto LABEL_75;
        }
        if ((gBBULogVerbosity & 0x80000000) == 0)
        {
          boost::core::demangle((boost::core *)&__p, (const char *)(0x8000000212B51E41 & 0x7FFFFFFFFFFFFFFFLL));
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            LOBYTE(p_p) = __p.__r_.__value_.__s.__data_[0];
          _BBULog(21, 0, "BBUpdaterController", "", "processing event: %s, current state %d [%s]\n", v45, v46, v47, (char)p_p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
LABEL_75:
        boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventFuse>((uint64_t)v89, (uint64_t)&v85, 1);
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
          {
LABEL_77:
            if ((gBBULogVerbosity & 0x80000000) == 0)
            {
              boost::core::demangle((boost::core *)&__p, (const char *)(0x8000000212B51E41 & 0x7FFFFFFFFFFFFFFFLL));
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v52 = &__p;
              else
                LOBYTE(v52) = __p.__r_.__value_.__s.__data_[0];
              _BBULog(21, 0, "BBUpdaterController", "", "finish processing event: %s\n", v49, v50, v51, (char)v52);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
            goto LABEL_77;
        }
        if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
          operator delete(value.__r_.__value_.__l.__data_);
        v53 = v90;
        if (!v90)
          return 0;
        v54 = (unint64_t *)&v90->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
LABEL_147:
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
        return 0;
      }
    }
  }
  if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
  {
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
      goto LABEL_17;
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
    {
LABEL_17:
      if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)
        goto LABEL_18;
LABEL_91:
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
          goto LABEL_96;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
          goto LABEL_96;
      }
      if (gBBULogVerbosity < 1)
        goto LABEL_96;
      v32 = "shouldPerformFusingVerification: it is not Resotre OS!\n";
      goto LABEL_95;
    }
  }
  dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
  if (!(BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS))
    goto LABEL_91;
LABEL_18:
  if ((capabilities::updater::supportsBBFusing((capabilities::updater *)ValueIfPresent) & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
        goto LABEL_96;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
        goto LABEL_96;
    }
    if (gBBULogVerbosity < 1)
      goto LABEL_96;
    v32 = "shouldPerformFusingVerification: Fusing verification will not perform on legacy device\n";
    goto LABEL_95;
  }
  value.__r_.__value_.__r.__words[0] = 0;
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), CFSTR("fuseAttemptSucceeded"), (const void **)&value.__r_.__value_.__l.__data_))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
        goto LABEL_96;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
        goto LABEL_96;
    }
    if (gBBULogVerbosity < 1)
      goto LABEL_96;
    v32 = "shouldPerformFusingVerification: it didn't go through fusing process before.\n";
LABEL_95:
    _BBULog(19, 1, "BBUpdaterController", "", v32, a6, a7, a8, v84);
    goto LABEL_96;
  }
  v18 = BBUFusing::create(*(capabilities::updater **)(a1 + 56), a1 + 152);
  if (!v18)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 24, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x2EFu, (ctu::LogMessageBuffer *)"Assertion failure(fuser && \"Error in creating fusing process.\")", v81, v82, v83, v84);
  }
  v19 = v18;
  FirmwareDataSource = BBUpdaterController::getFirmwareDataSource((BBUpdaterController *)a1, 0);
  v24 = FirmwareDataSource;
  if (!FirmwareDataSource)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_168;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_168:
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v21, v22, v23, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Fail to get update source for fuse");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&value, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      value = __p;
    v87 = 35;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(a1, (uint64_t)&value);
    if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
      operator delete(value.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_29;
  }
  if (!(*(uint64_t (**)(BBUEUR10UpdateSource *))(*(_QWORD *)FirmwareDataSource + 64))(FirmwareDataSource))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_174;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_174:
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v25, v26, v27, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Fusing Verification is requested, but could not found the fusing source (fusingprogram.plist)");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&value, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      value = __p;
    v87 = 24;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(a1, (uint64_t)&value);
    if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
      operator delete(value.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_28;
  }
  if ((*(unsigned int (**)(_DWORD *, BBUEUR10UpdateSource *, _QWORD))(*(_QWORD *)v19 + 24))(v19, v24, 0))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) != 0)
        goto LABEL_26;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) != 0)
      {
LABEL_26:
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(19, 0, "BBUpdaterController", "", "Failed to verify fusing\n", v28, v29, v30, v84);
      }
    }
LABEL_28:
    (*(void (**)(BBUEUR10UpdateSource *))(*(_QWORD *)v24 + 16))(v24);
LABEL_29:
    (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 56), "Failed to validate fusing");
    return 125;
  }
  (*(void (**)(BBUEUR10UpdateSource *))(*(_QWORD *)v24 + 16))(v24);
  (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
LABEL_96:
  (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 104))(*a2);
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 112))(*a2))
  {
    *(_BYTE *)(a1 + 242) = 1;
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 56), "Will request provisioning");
    v60 = *(int **)(a1 + 16);
    v59 = *(std::__shared_weak_count **)(a1 + 24);
    v89 = v60;
    v90 = v59;
    if (v59)
    {
      v61 = (unint64_t *)&v59->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    value.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
    value.__r_.__value_.__r.__words[2] = 0x7AAAAAAAAAAAAAALL;
    strcpy((char *)&value, "unknown");
    memset(&__p, 170, sizeof(__p));
    (*(void (**)(std::string *__return_ptr, int *))(*(_QWORD *)v60 + 24))(&__p, v60);
    v63 = __p.__r_.__value_.__r.__words[0];
    v64 = __p.__r_.__value_.__r.__words[0] + 24 * v60[8];
    if (&value != (std::string *)v64)
    {
      v65 = *(_BYTE *)(v64 + 23);
      if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v65 >= 0)
          v67 = (void *)(__p.__r_.__value_.__r.__words[0] + 24 * v60[8]);
        else
          v67 = *(void **)v64;
        if (v65 >= 0)
          v68 = *(unsigned __int8 *)(v64 + 23);
        else
          v68 = *(_QWORD *)(v64 + 8);
        std::string::__assign_no_alias<false>((void **)&value.__r_.__value_.__l.__data_, v67, v68);
      }
      else if ((*(_BYTE *)(v64 + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(&value, *(void **)v64, *(_QWORD *)(v64 + 8));
      }
      else
      {
        v66 = *(_OWORD *)v64;
        value.__r_.__value_.__r.__words[2] = *(_QWORD *)(v64 + 16);
        *(_OWORD *)&value.__r_.__value_.__l.__data_ = v66;
      }
      v63 = __p.__r_.__value_.__r.__words[0];
    }
    if (v63)
    {
      v69 = __p.__r_.__value_.__l.__size_;
      v70 = (void *)v63;
      if (__p.__r_.__value_.__l.__size_ != v63)
      {
        do
        {
          if (*(char *)(v69 - 1) < 0)
            operator delete(*(void **)(v69 - 24));
          v69 -= 24;
        }
        while (v69 != v63);
        v70 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      __p.__r_.__value_.__l.__size_ = v63;
      operator delete(v70);
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
        goto LABEL_134;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
        goto LABEL_134;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      boost::core::demangle((boost::core *)&__p, (const char *)(0x8000000212B51F4ALL & 0x7FFFFFFFFFFFFFFFLL));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = &__p;
      else
        LOBYTE(v74) = __p.__r_.__value_.__s.__data_[0];
      _BBULog(21, 0, "BBUpdaterController", "", "processing event: %s, current state %d [%s]\n", v71, v72, v73, (char)v74);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_134:
    boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventProvision>((uint64_t)v89, (uint64_t)&v85, 1);
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
      {
LABEL_136:
        if ((gBBULogVerbosity & 0x80000000) == 0)
        {
          boost::core::demangle((boost::core *)&__p, (const char *)(0x8000000212B51F4ALL & 0x7FFFFFFFFFFFFFFFLL));
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v78 = &__p;
          else
            LOBYTE(v78) = __p.__r_.__value_.__s.__data_[0];
          _BBULog(21, 0, "BBUpdaterController", "", "finish processing event: %s\n", v75, v76, v77, (char)v78);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
        goto LABEL_136;
    }
    if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
      operator delete(value.__r_.__value_.__l.__data_);
    v53 = v90;
    if (!v90)
      return 0;
    v79 = (unint64_t *)&v90->__shared_owners_;
    do
      v55 = __ldaxr(v79);
    while (__stlxr(v55 - 1, v79));
    goto LABEL_147;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x10) != 0)
      goto LABEL_106;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x10) != 0)
    {
LABEL_106:
      if (gBBULogVerbosity >= 1)
        _BBULog(20, 1, "BBUpdaterController", "", "baseband provisioning is not requested\n", v56, v57, v58, v84);
    }
  }
  *(_BYTE *)(a1 + 242) = 0;
  BBUpdaterController::process_event<BBUpdaterControllerFSM::eventFinalize>(*(int **)(a1 + 16), *(std::__shared_weak_count **)(a1 + 24), (uint64_t)&value);
  return 0;
}

void sub_212A6B564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  if (a26 < 0)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  _Unwind_Resume(a1);
}

void sub_212A6B6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
  {
    operator delete(__p);
    if (a18 < 0)
    {
LABEL_5:
      operator delete(a13);
      std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v26 - 64);
      _Unwind_Resume(a1);
    }
  }
  else if (a18 < 0)
  {
    goto LABEL_5;
  }
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v26 - 64);
  _Unwind_Resume(a1);
}

void sub_212A6B6F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if ((a18 & 0x80000000) == 0)
    JUMPOUT(0x212A6B6FCLL);
  JUMPOUT(0x212A6B6C8);
}

_BYTE *std::ostringstream::str[abi:ne180100](_BYTE *__dst, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = __dst;
  v3 = *(_DWORD *)(a2 + 104);
  if ((v3 & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a2 + 96);
    v5 = *(_QWORD *)(a2 + 56);
    if (v4 < v5)
    {
      *(_QWORD *)(a2 + 96) = v5;
      v4 = v5;
    }
    v6 = *(const void **)(a2 + 48);
    v7 = v4 - (_QWORD)v6;
    if (v4 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_16;
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      __dst[23] = 0;
LABEL_4:
      *__dst = 0;
      return __dst;
    }
    v6 = *(const void **)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 40) - (_QWORD)v6;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_16:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v8 = v7 | 7;
    v9 = v8 + 1;
    v10 = operator new(v8 + 1);
    v2[1] = v7;
    v2[2] = v9 | 0x8000000000000000;
    *v2 = v10;
    v2 = v10;
  }
  else
  {
    __dst[23] = v7;
    if (!v7)
      goto LABEL_4;
  }
  __dst = memmove(v2, v6, v7);
  *((_BYTE *)v2 + v7) = 0;
  return __dst;
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](a1 + 112);
  return a1;
}

void BBUpdaterController::dumpLogBufferInternal(uint64_t a1, _QWORD *a2, const char *a3)
{
  std::locale::id *v6;
  const std::locale::facet *v7;
  _QWORD *v8;
  char *v9;
  BBUFeedback *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *exception;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  unint64_t v20;
  std::locale v21;
  char v22[1024];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (!a3 || !*a2)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0xB61u, (ctu::LogMessageBuffer *)"Assertion failure(logBuffer && msg)", v15, v16, v17, v18);
  }
  (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
  v19 = (_QWORD *)0xAAAAAAAAAAAAAAAALL;
  v20 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)*a2 + 48))(&v19);
  bzero(v22, 0x400uLL);
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 56), "LOG BEGIN: ******* %s *******\n", a3);
  v6 = (std::locale::id *)MEMORY[0x24BEDB350];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
    v7 = std::locale::use_facet(&v21, v6);
    ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
    std::locale::~locale(&v21);
    v8 = (_QWORD *)std::istream::getline();
    v9 = (char *)v8 + *(_QWORD *)(*v8 - 24);
    v10 = *(BBUFeedback **)(a1 + 56);
    if ((v9[32] & 5) != 0)
      break;
    BBUFeedback::handleComment(v10, "%s", v22);
  }
  BBUFeedback::handleComment(v10, "LOG END: ******* %s *******\n", a3);
  v11 = (std::__shared_weak_count *)v20;
  if (v20)
  {
    v12 = (unint64_t *)(v20 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_212A6BA74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A6BA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212A6BAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, std::locale a13)
{
  std::locale::~locale(&a13);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_212A6BABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN19BBUpdaterController16sCmdInfoTableGetEv_block_invoke()
{
  void *v0;
  uint64_t *v1;
  const void *v2;
  void *v3;
  uint64_t *v4;
  const void *v5;
  void *v6;
  uint64_t *v7;
  const void *v8;
  void *v9;
  uint64_t *v10;
  const void *v11;
  void *v12;
  uint64_t *v13;
  const void *v14;
  void *v15;
  uint64_t *v16;
  const void *v17;
  void *v18;
  uint64_t *v19;
  const void *v20;
  void *v21;
  uint64_t *v22;
  const void *v23;
  void *v24;
  uint64_t *v25;
  const void *v26;
  void *v27;
  uint64_t *v28;
  const void *v29;
  CFStringRef v30;
  const __CFString *v31;
  void *v32;
  CFStringRef *v33;

  v31 = CFSTR("Query Info");
  v0 = _Block_copy(&__block_literal_global_329);
  v30 = CFSTR("queryInfo");
  v32 = v0;
  v33 = &v30;
  v1 = std::__tree<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,BBUpdaterController::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v30, (uint64_t **)&v33);
  v32 = 0;
  v2 = (const void *)v1[6];
  v1[5] = (uint64_t)CFSTR("Query Info");
  v1[6] = (uint64_t)v0;
  if (v2)
    _Block_release(v2);
  v31 = CFSTR("Query Identifier Info");
  v3 = _Block_copy(&__block_literal_global_333);
  v30 = CFSTR("CopyIdentifier");
  v32 = v3;
  v33 = &v30;
  v4 = std::__tree<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,BBUpdaterController::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v30, (uint64_t **)&v33);
  v32 = 0;
  v5 = (const void *)v4[6];
  v4[5] = (uint64_t)CFSTR("Query Identifier Info");
  v4[6] = (uint64_t)v3;
  if (v5)
    _Block_release(v5);
  v31 = CFSTR("Perform Next Stage");
  v6 = _Block_copy(&__block_literal_global_337);
  v30 = CFSTR("performNextStage");
  v32 = v6;
  v33 = &v30;
  v7 = std::__tree<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,BBUpdaterController::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v30, (uint64_t **)&v33);
  v32 = 0;
  v8 = (const void *)v7[6];
  v7[5] = (uint64_t)CFSTR("Perform Next Stage");
  v7[6] = (uint64_t)v6;
  if (v8)
    _Block_release(v8);
  v31 = CFSTR("Perform Core Dump");
  v9 = _Block_copy(&__block_literal_global_341);
  v30 = CFSTR("performCoreDump");
  v32 = v9;
  v33 = &v30;
  v10 = std::__tree<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,BBUpdaterController::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v30, (uint64_t **)&v33);
  v32 = 0;
  v11 = (const void *)v10[6];
  v10[5] = (uint64_t)CFSTR("Perform Core Dump");
  v10[6] = (uint64_t)v9;
  if (v11)
    _Block_release(v11);
  v31 = CFSTR("Boot up");
  v12 = _Block_copy(&__block_literal_global_345);
  v30 = CFSTR("performBootup");
  v32 = v12;
  v33 = &v30;
  v13 = std::__tree<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,BBUpdaterController::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v30, (uint64_t **)&v33);
  v32 = 0;
  v14 = (const void *)v13[6];
  v13[5] = (uint64_t)CFSTR("Boot up");
  v13[6] = (uint64_t)v12;
  if (v14)
    _Block_release(v14);
  v31 = CFSTR("Manifest check");
  v15 = _Block_copy(&__block_literal_global_349);
  v30 = CFSTR("performManifestCheck");
  v32 = v15;
  v33 = &v30;
  v16 = std::__tree<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,BBUpdaterController::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v30, (uint64_t **)&v33);
  v32 = 0;
  v17 = (const void *)v16[6];
  v16[5] = (uint64_t)CFSTR("Manifest check");
  v16[6] = (uint64_t)v15;
  if (v17)
    _Block_release(v17);
  v31 = CFSTR("Query whether the system partition needs to be mounted");
  v18 = _Block_copy(&__block_literal_global_353);
  v30 = CFSTR("requireSystemPartitionMount");
  v32 = v18;
  v33 = &v30;
  v19 = std::__tree<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,BBUpdaterController::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v30, (uint64_t **)&v33);
  v32 = 0;
  v20 = (const void *)v19[6];
  v19[5] = (uint64_t)CFSTR("Query whether the system partition needs to be mounted");
  v19[6] = (uint64_t)v18;
  if (v20)
    _Block_release(v20);
  v31 = CFSTR("Query whether any partitions need to be mounted");
  v21 = _Block_copy(&__block_literal_global_355);
  v30 = CFSTR("requirePartitionMount");
  v32 = v21;
  v33 = &v30;
  v22 = std::__tree<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,BBUpdaterController::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v30, (uint64_t **)&v33);
  v32 = 0;
  v23 = (const void *)v22[6];
  v22[5] = (uint64_t)CFSTR("Query whether any partitions need to be mounted");
  v22[6] = (uint64_t)v21;
  if (v23)
    _Block_release(v23);
  v31 = CFSTR("Copy baseband data to migrate during an erase install");
  v24 = _Block_copy(&__block_literal_global_359);
  v30 = CFSTR("copyBasebandMigrationData");
  v32 = v24;
  v33 = &v30;
  v25 = std::__tree<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,BBUpdaterController::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v30, (uint64_t **)&v33);
  v32 = 0;
  v26 = (const void *)v25[6];
  v25[5] = (uint64_t)CFSTR("Copy baseband data to migrate during an erase install");
  v25[6] = (uint64_t)v24;
  if (v26)
    _Block_release(v26);
  v31 = CFSTR("restoreBasebandMigrationData");
  v27 = _Block_copy(&__block_literal_global_365);
  v30 = CFSTR("restoreBasebandMigrationData");
  v32 = v27;
  v33 = &v30;
  v28 = std::__tree<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,BBUpdaterController::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v30, (uint64_t **)&v33);
  v32 = 0;
  v29 = (const void *)v28[6];
  v28[5] = (uint64_t)CFSTR("restoreBasebandMigrationData");
  v28[6] = (uint64_t)v27;
  if (v29)
    _Block_release(v29);
}

void sub_212A6BE7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  BBUpdaterController::CmdInfo::~CmdInfo((BBUpdaterController::CmdInfo *)va);
  _Unwind_Resume(a1);
}

void sub_212A6BE94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  BBUpdaterController::CmdInfo::~CmdInfo((BBUpdaterController::CmdInfo *)va);
  _Unwind_Resume(a1);
}

void sub_212A6BEAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  BBUpdaterController::CmdInfo::~CmdInfo((BBUpdaterController::CmdInfo *)va);
  _Unwind_Resume(a1);
}

void sub_212A6BEC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  BBUpdaterController::CmdInfo::~CmdInfo((BBUpdaterController::CmdInfo *)va);
  _Unwind_Resume(a1);
}

void sub_212A6BEDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  BBUpdaterController::CmdInfo::~CmdInfo((BBUpdaterController::CmdInfo *)va);
  _Unwind_Resume(a1);
}

void sub_212A6BEF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  BBUpdaterController::CmdInfo::~CmdInfo((BBUpdaterController::CmdInfo *)va);
  _Unwind_Resume(a1);
}

void sub_212A6BF0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  BBUpdaterController::CmdInfo::~CmdInfo((BBUpdaterController::CmdInfo *)va);
  _Unwind_Resume(a1);
}

void sub_212A6BF24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  BBUpdaterController::CmdInfo::~CmdInfo((BBUpdaterController::CmdInfo *)va);
  _Unwind_Resume(a1);
}

void sub_212A6BF3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  BBUpdaterController::CmdInfo::~CmdInfo((BBUpdaterController::CmdInfo *)va);
  _Unwind_Resume(a1);
}

void sub_212A6BF54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  BBUpdaterController::CmdInfo::~CmdInfo((BBUpdaterController::CmdInfo *)va);
  _Unwind_Resume(a1);
}

CFTypeRef ___ZN19BBUpdaterController16sCmdInfoTableGetEv_block_invoke_2(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  CFTypeRef result;
  char v6;

  BBUpdaterController::process_event<BBUpdaterControllerFSM::eventCmdQueryInfo>(*(int **)(a2 + 16), *(std::__shared_weak_count **)(a2 + 24), (uint64_t)&v6);
  BBUpdaterController::updateOutputFusingManifestInfo((BBUpdaterController *)a2);
  result = CFRetain(*(CFTypeRef *)(a2 + 32));
  *a3 = result;
  return result;
}

void BBUpdaterController::CmdInfo::~CmdInfo(BBUpdaterController::CmdInfo *this)
{
  const void *v1;

  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    _Block_release(v1);
}

void ___ZN19BBUpdaterController16sCmdInfoTableGetEv_block_invoke_3(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef v10;
  char v11;
  std::string v12;
  char v13;

  v13 = 1;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 1) == 0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 1) == 0)
      goto LABEL_5;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(0, 0, "BBUpdaterController", "", "Entering cmdCopyIdentifier\n", a6, a7, a8, v11);
LABEL_5:
  TelephonyBasebandGetReset();
  BBUpdaterController::process_event<BBUpdaterControllerFSM::eventCmdQueryInfo>(*(int **)(a2 + 16), *(std::__shared_weak_count **)(a2 + 24), (uint64_t)&v12);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 64) + 40))(*(_QWORD *)(a2 + 64), a2 + 152);
  BBUpdaterController::updateOutputPersonalizedParameters((BBUpdaterController *)a2);
  BBUpdaterController::updateOutputFusingManifestInfo((BBUpdaterController *)a2);
  v10 = CFRetain(*(CFTypeRef *)(a2 + 32));
  *a3 = v10;
  CFShow(v10);
}

void sub_212A6C31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
  {
    operator delete(__p);
    operator delete(v17);
    _Unwind_Resume(a1);
  }
  operator delete(v17);
  _Unwind_Resume(a1);
}

CFTypeRef ___ZN19BBUpdaterController16sCmdInfoTableGetEv_block_invoke_4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  std::__shared_weak_count *v5;
  int *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void **v9;
  void **v10;
  char v11;
  __int128 v12;
  char *v13;
  size_t v14;
  void **v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  CFTypeRef result;
  std::string v29;
  int v30;
  int v31;
  void *__p[3];
  void *__dst[2];
  uint64_t v34;
  int *v35;
  std::__shared_weak_count *v36;

  memset(&v29, 0, sizeof(v29));
  v31 = 0;
  std::string::__assign_external(&v29, "Fail to perform cmdPerformNextStage", 0x23uLL);
  v30 = 42;
  v6 = *(int **)(a2 + 16);
  v5 = *(std::__shared_weak_count **)(a2 + 24);
  v35 = v6;
  v36 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  __dst[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v34 = 0x7AAAAAAAAAAAAAALL;
  strcpy((char *)__dst, "unknown");
  memset(__p, 170, sizeof(__p));
  (*(void (**)(void **__return_ptr, int *))(*(_QWORD *)v6 + 24))(__p, v6);
  v9 = (void **)__p[0];
  v10 = (void **)((char *)__p[0] + 24 * v6[8]);
  if (__dst != v10)
  {
    v11 = *((_BYTE *)v10 + 23);
    if (SHIBYTE(v34) < 0)
    {
      if (v11 >= 0)
        v13 = (char *)__p[0] + 24 * v6[8];
      else
        v13 = (char *)*v10;
      if (v11 >= 0)
        v14 = *((unsigned __int8 *)v10 + 23);
      else
        v14 = (size_t)v10[1];
      std::string::__assign_no_alias<false>(__dst, v13, v14);
    }
    else if ((*((_BYTE *)v10 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(__dst, *v10, (size_t)v10[1]);
    }
    else
    {
      v12 = *(_OWORD *)v10;
      v34 = (uint64_t)v10[2];
      *(_OWORD *)__dst = v12;
    }
    v9 = (void **)__p[0];
  }
  if (v9)
  {
    v15 = (void **)__p[1];
    v16 = v9;
    if (__p[1] != v9)
    {
      do
      {
        if (*((char *)v15 - 1) < 0)
          operator delete(*(v15 - 3));
        v15 -= 3;
      }
      while (v15 != v9);
      v16 = (void **)__p[0];
    }
    __p[1] = v9;
    operator delete(v16);
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_33;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_33;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    boost::core::demangle((boost::core *)__p, (const char *)(0x8000000212B5205FLL & 0x7FFFFFFFFFFFFFFFLL));
    if (SHIBYTE(__p[2]) >= 0)
      v20 = __p;
    else
      LOBYTE(v20) = __p[0];
    _BBULog(21, 0, "BBUpdaterController", "", "processing event: %s, current state %d [%s]\n", v17, v18, v19, (char)v20);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
LABEL_33:
  boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdPerformNextStage>((uint64_t)v35, (uint64_t)&v29, 1);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_41;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_41;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    boost::core::demangle((boost::core *)__p, (const char *)(0x8000000212B5205FLL & 0x7FFFFFFFFFFFFFFFLL));
    if (SHIBYTE(__p[2]) >= 0)
      v24 = __p;
    else
      LOBYTE(v24) = __p[0];
    _BBULog(21, 0, "BBUpdaterController", "", "finish processing event: %s\n", v21, v22, v23, (char)v24);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
LABEL_41:
  if (SHIBYTE(v34) < 0)
    operator delete(__dst[0]);
  v25 = v36;
  if (v36)
  {
    v26 = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_49;
      goto LABEL_48;
    }
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
LABEL_48:
    operator delete(v29.__r_.__value_.__l.__data_);
LABEL_49:
  BBUpdaterController::updateOutputFusingManifestInfo((BBUpdaterController *)a2);
  result = CFRetain(*(CFTypeRef *)(a2 + 32));
  *a3 = result;
  return result;
}

void sub_212A6C708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  std::vector<std::string>::~vector[abi:ne180100](&a19);
  if (a30 < 0)
    operator delete(__p);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v30 - 80);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_212A6C774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if ((a17 & 0x80000000) == 0)
    JUMPOUT(0x212A6C76CLL);
  JUMPOUT(0x212A6C764);
}

CFTypeRef ___ZN19BBUpdaterController16sCmdInfoTableGetEv_block_invoke_5(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  std::__shared_weak_count *v5;
  int *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void **v9;
  void **v10;
  char v11;
  __int128 v12;
  char *v13;
  size_t v14;
  void **v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  unint64_t *v25;
  unint64_t v26;
  CFTypeRef result;
  char v28;
  void *__p[3];
  void *__dst[2];
  uint64_t v31;

  v6 = *(int **)(a2 + 16);
  v5 = *(std::__shared_weak_count **)(a2 + 24);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  __dst[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v31 = 0x7AAAAAAAAAAAAAALL;
  strcpy((char *)__dst, "unknown");
  memset(__p, 170, sizeof(__p));
  (*(void (**)(void **__return_ptr, int *))(*(_QWORD *)v6 + 24))(__p, v6);
  v9 = (void **)__p[0];
  v10 = (void **)((char *)__p[0] + 24 * v6[8]);
  if (__dst != v10)
  {
    v11 = *((_BYTE *)v10 + 23);
    if (SHIBYTE(v31) < 0)
    {
      if (v11 >= 0)
        v13 = (char *)__p[0] + 24 * v6[8];
      else
        v13 = (char *)*v10;
      if (v11 >= 0)
        v14 = *((unsigned __int8 *)v10 + 23);
      else
        v14 = (size_t)v10[1];
      std::string::__assign_no_alias<false>(__dst, v13, v14);
    }
    else if ((*((_BYTE *)v10 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(__dst, *v10, (size_t)v10[1]);
    }
    else
    {
      v12 = *(_OWORD *)v10;
      v31 = (uint64_t)v10[2];
      *(_OWORD *)__dst = v12;
    }
    v9 = (void **)__p[0];
  }
  if (v9)
  {
    v15 = (void **)__p[1];
    v16 = v9;
    if (__p[1] != v9)
    {
      do
      {
        if (*((char *)v15 - 1) < 0)
          operator delete(*(v15 - 3));
        v15 -= 3;
      }
      while (v15 != v9);
      v16 = (void **)__p[0];
    }
    __p[1] = v9;
    operator delete(v16);
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_33;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_33;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    boost::core::demangle((boost::core *)__p, (const char *)(0x8000000212B5238ALL & 0x7FFFFFFFFFFFFFFFLL));
    if (SHIBYTE(__p[2]) >= 0)
      v20 = __p;
    else
      LOBYTE(v20) = __p[0];
    _BBULog(21, 0, "BBUpdaterController", "", "processing event: %s, current state %d [%s]\n", v17, v18, v19, (char)v20);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
LABEL_33:
  boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdPerformCoreDump>((uint64_t)v6, (uint64_t)&v28, 1);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_41;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_41;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    boost::core::demangle((boost::core *)__p, (const char *)(0x8000000212B5238ALL & 0x7FFFFFFFFFFFFFFFLL));
    if (SHIBYTE(__p[2]) >= 0)
      v24 = __p;
    else
      LOBYTE(v24) = __p[0];
    _BBULog(21, 0, "BBUpdaterController", "", "finish processing event: %s\n", v21, v22, v23, (char)v24);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
LABEL_41:
  if (SHIBYTE(v31) < 0)
    operator delete(__dst[0]);
  if (v5)
  {
    v25 = (unint64_t *)&v5->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  BBUpdaterController::updateOutputFusingManifestInfo((BBUpdaterController *)a2);
  result = CFRetain(*(CFTypeRef *)(a2 + 32));
  *a3 = result;
  return result;
}

void sub_212A6CAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **__p, void **a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count *v25;
  void **v27;
  void **v28;
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (__p)
  {
    v27 = a15;
    v28 = __p;
    if (a15 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != __p);
      v28 = __p;
    }
    operator delete(v28);
  }
  if (a25 < 0)
    operator delete(a20);
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef ___ZN19BBUpdaterController16sCmdInfoTableGetEv_block_invoke_6(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  std::__shared_weak_count *v5;
  int *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void **v9;
  void **v10;
  char v11;
  __int128 v12;
  char *v13;
  size_t v14;
  void **v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  unint64_t *v25;
  unint64_t v26;
  CFTypeRef result;
  char v28;
  void *__p[3];
  void *__dst[2];
  uint64_t v31;

  v6 = *(int **)(a2 + 16);
  v5 = *(std::__shared_weak_count **)(a2 + 24);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  __dst[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v31 = 0x7AAAAAAAAAAAAAALL;
  strcpy((char *)__dst, "unknown");
  memset(__p, 170, sizeof(__p));
  (*(void (**)(void **__return_ptr, int *))(*(_QWORD *)v6 + 24))(__p, v6);
  v9 = (void **)__p[0];
  v10 = (void **)((char *)__p[0] + 24 * v6[8]);
  if (__dst != v10)
  {
    v11 = *((_BYTE *)v10 + 23);
    if (SHIBYTE(v31) < 0)
    {
      if (v11 >= 0)
        v13 = (char *)__p[0] + 24 * v6[8];
      else
        v13 = (char *)*v10;
      if (v11 >= 0)
        v14 = *((unsigned __int8 *)v10 + 23);
      else
        v14 = (size_t)v10[1];
      std::string::__assign_no_alias<false>(__dst, v13, v14);
    }
    else if ((*((_BYTE *)v10 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(__dst, *v10, (size_t)v10[1]);
    }
    else
    {
      v12 = *(_OWORD *)v10;
      v31 = (uint64_t)v10[2];
      *(_OWORD *)__dst = v12;
    }
    v9 = (void **)__p[0];
  }
  if (v9)
  {
    v15 = (void **)__p[1];
    v16 = v9;
    if (__p[1] != v9)
    {
      do
      {
        if (*((char *)v15 - 1) < 0)
          operator delete(*(v15 - 3));
        v15 -= 3;
      }
      while (v15 != v9);
      v16 = (void **)__p[0];
    }
    __p[1] = v9;
    operator delete(v16);
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_33;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_33;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    boost::core::demangle((boost::core *)__p, (const char *)(0x8000000212B524B1 & 0x7FFFFFFFFFFFFFFFLL));
    if (SHIBYTE(__p[2]) >= 0)
      v20 = __p;
    else
      LOBYTE(v20) = __p[0];
    _BBULog(21, 0, "BBUpdaterController", "", "processing event: %s, current state %d [%s]\n", v17, v18, v19, (char)v20);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
LABEL_33:
  boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdPerformBootup>((uint64_t)v6, (uint64_t)&v28, 1);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_41;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_41;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    boost::core::demangle((boost::core *)__p, (const char *)(0x8000000212B524B1 & 0x7FFFFFFFFFFFFFFFLL));
    if (SHIBYTE(__p[2]) >= 0)
      v24 = __p;
    else
      LOBYTE(v24) = __p[0];
    _BBULog(21, 0, "BBUpdaterController", "", "finish processing event: %s\n", v21, v22, v23, (char)v24);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
LABEL_41:
  if (SHIBYTE(v31) < 0)
    operator delete(__dst[0]);
  if (v5)
  {
    v25 = (unint64_t *)&v5->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  BBUpdaterController::updateOutputFusingManifestInfo((BBUpdaterController *)a2);
  result = CFRetain(*(CFTypeRef *)(a2 + 32));
  *a3 = result;
  return result;
}

void sub_212A6CEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **__p, void **a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count *v25;
  void **v27;
  void **v28;
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (__p)
  {
    v27 = a15;
    v28 = __p;
    if (a15 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != __p);
      v28 = __p;
    }
    operator delete(v28);
  }
  if (a25 < 0)
    operator delete(a20);
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef ___ZN19BBUpdaterController16sCmdInfoTableGetEv_block_invoke_7(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  std::__shared_weak_count *v5;
  int *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void **v9;
  void **v10;
  char v11;
  __int128 v12;
  char *v13;
  size_t v14;
  void **v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  unint64_t *v25;
  unint64_t v26;
  CFTypeRef result;
  char v28;
  void *__p[3];
  void *__dst[2];
  uint64_t v31;

  v6 = *(int **)(a2 + 16);
  v5 = *(std::__shared_weak_count **)(a2 + 24);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  __dst[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v31 = 0x7AAAAAAAAAAAAAALL;
  strcpy((char *)__dst, "unknown");
  memset(__p, 170, sizeof(__p));
  (*(void (**)(void **__return_ptr, int *))(*(_QWORD *)v6 + 24))(__p, v6);
  v9 = (void **)__p[0];
  v10 = (void **)((char *)__p[0] + 24 * v6[8]);
  if (__dst != v10)
  {
    v11 = *((_BYTE *)v10 + 23);
    if (SHIBYTE(v31) < 0)
    {
      if (v11 >= 0)
        v13 = (char *)__p[0] + 24 * v6[8];
      else
        v13 = (char *)*v10;
      if (v11 >= 0)
        v14 = *((unsigned __int8 *)v10 + 23);
      else
        v14 = (size_t)v10[1];
      std::string::__assign_no_alias<false>(__dst, v13, v14);
    }
    else if ((*((_BYTE *)v10 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(__dst, *v10, (size_t)v10[1]);
    }
    else
    {
      v12 = *(_OWORD *)v10;
      v31 = (uint64_t)v10[2];
      *(_OWORD *)__dst = v12;
    }
    v9 = (void **)__p[0];
  }
  if (v9)
  {
    v15 = (void **)__p[1];
    v16 = v9;
    if (__p[1] != v9)
    {
      do
      {
        if (*((char *)v15 - 1) < 0)
          operator delete(*(v15 - 3));
        v15 -= 3;
      }
      while (v15 != v9);
      v16 = (void **)__p[0];
    }
    __p[1] = v9;
    operator delete(v16);
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_33;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_33;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    boost::core::demangle((boost::core *)__p, (const char *)(0x8000000212B525D4 & 0x7FFFFFFFFFFFFFFFLL));
    if (SHIBYTE(__p[2]) >= 0)
      v20 = __p;
    else
      LOBYTE(v20) = __p[0];
    _BBULog(21, 0, "BBUpdaterController", "", "processing event: %s, current state %d [%s]\n", v17, v18, v19, (char)v20);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
LABEL_33:
  boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>((uint64_t)v6, (uint64_t)&v28, 1);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_41;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) == 0)
      goto LABEL_41;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    boost::core::demangle((boost::core *)__p, (const char *)(0x8000000212B525D4 & 0x7FFFFFFFFFFFFFFFLL));
    if (SHIBYTE(__p[2]) >= 0)
      v24 = __p;
    else
      LOBYTE(v24) = __p[0];
    _BBULog(21, 0, "BBUpdaterController", "", "finish processing event: %s\n", v21, v22, v23, (char)v24);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
LABEL_41:
  if (SHIBYTE(v31) < 0)
    operator delete(__dst[0]);
  if (v5)
  {
    v25 = (unint64_t *)&v5->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  BBUpdaterController::updateOutputFusingManifestInfo((BBUpdaterController *)a2);
  result = CFRetain(*(CFTypeRef *)(a2 + 32));
  *a3 = result;
  return result;
}

void sub_212A6D304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **__p, void **a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count *v25;
  void **v27;
  void **v28;
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (__p)
  {
    v27 = a15;
    v28 = __p;
    if (a15 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != __p);
      v28 = __p;
    }
    operator delete(v28);
  }
  if (a25 < 0)
    operator delete(a20);
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19BBUpdaterController16sCmdInfoTableGetEv_block_invoke_8(int a1, BBUFeedback **this, __CFDictionary **a3)
{
  BBUpdaterController::cmdCopyRequirePartitionMount(this, a3);
}

void ___ZN19BBUpdaterController16sCmdInfoTableGetEv_block_invoke_9(int a1, BBUFeedback **this, __CFDictionary **a3)
{
  BBUpdaterController::cmdCopyRequirePartitionMount(this, a3);
}

void ___ZN19BBUpdaterController16sCmdInfoTableGetEv_block_invoke_10(capabilities::updater *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  BBUICE16UpdateSource *v4;
  int BasebandMigrationDataType;
  BBUFeedback *v6;
  NSObject *v7;
  std::__shared_weak_count_vtbl *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *isa;
  unint64_t *v20;
  unint64_t v21;
  void *__p[2];
  char v23;
  __int128 v24;
  void (*v25)(uint64_t);
  void *v26;
  NSObject *v27;
  void **v28;
  int v29;
  __int128 *v30;
  NSObject *block[6];

  if (a3)
  {
    v4 = *(BBUICE16UpdateSource **)(a2 + 56);
    BasebandMigrationDataType = capabilities::updater::getBasebandMigrationDataType(a1);
    if (BasebandMigrationDataType == 1)
    {
      *a3 = BBUICE16UpdateSource::copyBasebandMigrationData(v4, v6);
    }
    else if (BasebandMigrationDataType)
    {
      *a3 = 0;
    }
    else
    {
      *a3 = BBUEUR10UpdateSource::copyBasebandMigrationData(v4, v6);
    }
    return;
  }
  pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  v7 = qword_253D31DC8;
  if (!qword_253D31DC8)
  {
    v8 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
    block[0] = 0;
    ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v8, "BBUError", QOS_CLASS_UTILITY, block);
    if (block[0])
      dispatch_release(block[0]);
    v8->__on_zero_shared_weak = 0;
    v8[1].~__shared_weak_count = 0;
    v8[1].~__shared_weak_count_0 = 0;
    std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&v24, v8);
    v9 = v24;
    v24 = 0uLL;
    v10 = (std::__shared_weak_count *)off_253D31DD0;
    *(_OWORD *)&qword_253D31DC8 = v9;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v7 = qword_253D31DC8;
  }
  v16 = (std::__shared_weak_count *)off_253D31DD0;
  if (off_253D31DD0)
  {
    v17 = (unint64_t *)((char *)off_253D31DD0 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  v23 = 15;
  strcpy((char *)__p, "Null output ptr");
  *(_QWORD *)&v24 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v24 + 1) = 0x40000000;
  v25 = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
  v26 = &__block_descriptor_tmp_6;
  v27 = v7;
  v28 = __p;
  v29 = 2;
  v30 = &v24;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_10;
  block[4] = v7;
  block[5] = &v30;
  isa = v7[2].isa;
  if (!v7[3].isa)
  {
    dispatch_sync(isa, block);
    if ((v23 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  dispatch_async_and_wait(isa, block);
  if (v23 < 0)
LABEL_24:
    operator delete(__p[0]);
LABEL_25:
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_212A6D670(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  NSObject *v4;

  v4 = *(NSObject **)(v2 - 64);
  if (v4)
    dispatch_release(v4);
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  _Unwind_Resume(a1);
}

void ___ZN19BBUpdaterController16sCmdInfoTableGetEv_block_invoke_11(uint64_t a1, uint64_t a2, const __CFDictionary **a3)
{
  BBUFeedback *v4;
  BBUFeedback *v5;
  CFTypeID v6;
  BBUFeedback *v7;
  NSObject *v8;
  std::__shared_weak_count_vtbl *v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *isa;
  BBUICE16UpdateSource *v21;
  capabilities::updater *v22;
  int BasebandMigrationDataType;
  const __CFDictionary *v24;
  BBUFeedback *v25;
  int v26;
  int v27;
  const char *v28;
  unint64_t *v29;
  unint64_t v30;
  void *__p[2];
  char v32;
  __int128 v33;
  void (*v34)(uint64_t);
  void *v35;
  NSObject *v36;
  void **v37;
  int v38;
  __int128 *v39;
  NSObject *block[6];

  if (a3)
  {
    *(_QWORD *)&v33 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v33, *a3);
    v4 = (BBUFeedback *)(*(uint64_t (**)(__int128 *, const __CFString *))v33)(&v33, CFSTR("MigrationData"));
    v5 = v4;
    if (v4)
    {
      v6 = CFGetTypeID(v4);
      if (v6 == CFDictionaryGetTypeID())
        v7 = v5;
      else
        v7 = 0;
      CFRelease(v5);
    }
    else
    {
      v7 = 0;
    }
    BBUFeedback::handleComment(*(BBUFeedback **)(a2 + 56), "%s: restoring migration data", "cmdRestoreBasebandMigrationData");
    v21 = *(BBUICE16UpdateSource **)(a2 + 56);
    BasebandMigrationDataType = capabilities::updater::getBasebandMigrationDataType(v22);
    if (BasebandMigrationDataType)
    {
      if (BasebandMigrationDataType != 1)
      {
        if (BasebandMigrationDataType == 2)
        {
          v25 = *(BBUFeedback **)(a2 + 56);
LABEL_36:
          v28 = "succeeded";
LABEL_39:
          BBUFeedback::handleComment(v25, "restoring baseband migration data %s", v28);
          MEMORY[0x212BF9A70](&v33);
          return;
        }
        v25 = *(BBUFeedback **)(a2 + 56);
LABEL_38:
        v28 = "failed";
        goto LABEL_39;
      }
      v26 = BBUICE16UpdateSource::restoreBasebandMigrationData(v21, v7, v24);
    }
    else
    {
      v26 = BBUEUR10UpdateSource::restoreBasebandMigrationData(v21, v7, v24);
    }
    v27 = v26;
    v25 = *(BBUFeedback **)(a2 + 56);
    if (v27)
      goto LABEL_36;
    goto LABEL_38;
  }
  pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  v8 = qword_253D31DC8;
  if (!qword_253D31DC8)
  {
    v9 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
    block[0] = 0;
    ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v9, "BBUError", QOS_CLASS_UTILITY, block);
    if (block[0])
      dispatch_release(block[0]);
    v9->__on_zero_shared_weak = 0;
    v9[1].~__shared_weak_count = 0;
    v9[1].~__shared_weak_count_0 = 0;
    std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&v33, v9);
    v10 = v33;
    v33 = 0uLL;
    v11 = (std::__shared_weak_count *)off_253D31DD0;
    *(_OWORD *)&qword_253D31DC8 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v8 = qword_253D31DC8;
  }
  v17 = (std::__shared_weak_count *)off_253D31DD0;
  if (off_253D31DD0)
  {
    v18 = (unint64_t *)((char *)off_253D31DD0 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  v32 = 15;
  strcpy((char *)__p, "Null output ptr");
  *(_QWORD *)&v33 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v33 + 1) = 0x40000000;
  v34 = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
  v35 = &__block_descriptor_tmp_6;
  v36 = v8;
  v37 = __p;
  v38 = 2;
  v39 = &v33;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_10;
  block[4] = v8;
  block[5] = &v39;
  isa = v8[2].isa;
  if (v8[3].isa)
  {
    dispatch_async_and_wait(isa, block);
    if ((v32 & 0x80000000) == 0)
      goto LABEL_26;
LABEL_41:
    operator delete(__p[0]);
    if (!v17)
      return;
    goto LABEL_42;
  }
  dispatch_sync(isa, block);
  if (v32 < 0)
    goto LABEL_41;
LABEL_26:
  if (!v17)
    return;
LABEL_42:
  v29 = (unint64_t *)&v17->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_212A6D9F4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  NSObject *v4;

  v4 = *(NSObject **)(v2 - 80);
  if (v4)
    dispatch_release(v4);
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t BBUpdaterExtremePrivate::getOwner(BBUpdaterExtremePrivate *this)
{
  return *((_QWORD *)this + 1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  std::string::size_type v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

_QWORD *boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::~state_machine(_QWORD *a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = off_24CE7EDF0;
  boost::fusion::vector_detail::vector_data<std::integer_sequence<unsigned long,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul>,BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit>::~vector_data(a1 + 13);
  v2 = (void **)(a1 + 5);
  std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::clear(a1 + 5);
  v3 = (void **)a1[6];
  v4 = (void **)a1[7];
  if (v3 != v4)
  {
    do
    {
      v5 = *v3++;
      operator delete(v5);
    }
    while (v3 != v4);
    v7 = a1[6];
    v6 = a1[7];
    if (v6 != v7)
      a1[7] = v6 + ((v7 - v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v2)
    operator delete(*v2);
  return a1;
}

void boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::~state_machine(void **a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = off_24CE7EDF0;
  boost::fusion::vector_detail::vector_data<std::integer_sequence<unsigned long,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul>,BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit>::~vector_data(a1 + 13);
  v2 = a1 + 5;
  std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::clear(a1 + 5);
  v3 = (void **)a1[6];
  v4 = (void **)a1[7];
  if (v3 != v4)
  {
    do
    {
      v5 = *v3++;
      operator delete(v5);
    }
    while (v3 != v4);
    v7 = a1[6];
    v6 = a1[7];
    if (v6 != v7)
      a1[7] = &v6[(v7 - v6 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*v2)
    operator delete(*v2);
  operator delete(a1);
}

const char *BBUpdaterControllerFSM::ControllerFSM_TOP::getDebugName(BBUpdaterControllerFSM::ControllerFSM_TOP *this)
{
  return "ControllerFSM_TOP";
}

void BBUpdaterControllerFSM::ControllerFSM_TOP::getStateNames(_QWORD *a1@<X8>)
{
  void *v2[2];
  char v3[24];
  char v4;
  void *v5[3];
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[3];
  void *v14[2];
  char v15;
  void *__p[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  strcpy(v3, "\tstateBooting");
  strcpy((char *)v2, "stateInit");
  v4 = 12;
  HIBYTE(v5[2]) = 18;
  strcpy((char *)v5, "stateManifestCheck");
  HIBYTE(v6[2]) = 16;
  strcpy((char *)v6, "statePersonalize");
  v8 = 11;
  strcpy((char *)v7, "stateFusing");
  v10 = 14;
  strcpy((char *)v9, "stateProvision");
  v12 = 13;
  strcpy((char *)v11, "stateFinalize");
  HIBYTE(v13[2]) = 16;
  strcpy((char *)v13, "stateRegularMode");
  v15 = 13;
  strcpy((char *)v14, "stateCoredump");
  v17 = 14;
  strcpy((char *)__p, "stateDebugMode");
  std::vector<std::string>::vector[abi:ne180100](a1, (uint64_t)v2, 0xAuLL);
  if (v17 < 0)
  {
    operator delete(__p[0]);
    if ((v15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v13[2]) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v14[0]);
  if ((SHIBYTE(v13[2]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(v13[0]);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v11[0]);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v9[0]);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_7:
    if ((SHIBYTE(v6[2]) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v7[0]);
  if ((SHIBYTE(v6[2]) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v5[2]) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v6[0]);
  if ((SHIBYTE(v5[2]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v5[0]);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v3[0] & 0x80000000) == 0)
      return;
LABEL_21:
    operator delete(v2[0]);
    return;
  }
LABEL_20:
  operator delete(*(void **)&v3[1]);
  if (v3[0] < 0)
    goto LABEL_21;
}

void sub_212A6DF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *__p;
  char a69;

  if (a69 < 0)
  {
    operator delete(__p);
    if ((a63 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a57 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((a63 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a58);
  if ((a57 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a51 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a52);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a45 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a46);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a39 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a40);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a33 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a34);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a21 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a22);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a15 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
LABEL_11:
    _Unwind_Resume(a1);
LABEL_21:
  operator delete(a10);
  _Unwind_Resume(a1);
}

_QWORD *boost::fusion::vector_detail::store<6ul,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~store(_QWORD *a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = off_24CE7F018;
  v2 = (void **)(a1 + 4);
  std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::clear(a1 + 4);
  v3 = (void **)a1[5];
  v4 = (void **)a1[6];
  if (v3 != v4)
  {
    do
    {
      v5 = *v3++;
      operator delete(v5);
    }
    while (v3 != v4);
    v7 = a1[5];
    v6 = a1[6];
    if (v6 != v7)
      a1[6] = v6 + ((v7 - v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v2)
    operator delete(*v2);
  return a1;
}

_QWORD *boost::fusion::vector_detail::store<4ul,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~store(_QWORD *a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = off_24CE7EF48;
  v2 = (void **)(a1 + 4);
  std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::clear(a1 + 4);
  v3 = (void **)a1[5];
  v4 = (void **)a1[6];
  if (v3 != v4)
  {
    do
    {
      v5 = *v3++;
      operator delete(v5);
    }
    while (v3 != v4);
    v7 = a1[5];
    v6 = a1[6];
    if (v6 != v7)
      a1[6] = v6 + ((v7 - v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v2)
    operator delete(*v2);
  return a1;
}

_QWORD *boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::~state_machine(_QWORD *a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = off_24CE7EF48;
  v2 = (void **)(a1 + 4);
  std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::clear(a1 + 4);
  v3 = (void **)a1[5];
  v4 = (void **)a1[6];
  if (v3 != v4)
  {
    do
    {
      v5 = *v3++;
      operator delete(v5);
    }
    while (v3 != v4);
    v7 = a1[5];
    v6 = a1[6];
    if (v6 != v7)
      a1[6] = v6 + ((v7 - v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v2)
    operator delete(*v2);
  return a1;
}

void boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::~state_machine(void **a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = off_24CE7EF48;
  v2 = a1 + 4;
  std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::clear(a1 + 4);
  v3 = (void **)a1[5];
  v4 = (void **)a1[6];
  if (v3 != v4)
  {
    do
    {
      v5 = *v3++;
      operator delete(v5);
    }
    while (v3 != v4);
    v7 = a1[5];
    v6 = a1[6];
    if (v6 != v7)
      a1[6] = &v6[(v7 - v6 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*v2)
    operator delete(*v2);
  operator delete(a1);
}

const char *BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_::getDebugName(BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_ *this)
{
  return "Provision_";
}

void BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_::getStateNames(_QWORD *a1@<X8>)
{
  void *v2[3];
  char __p[21];
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  HIBYTE(v2[2]) = 19;
  strcpy((char *)v2, "stateProvisionStart");
  v4 = 20;
  strcpy(__p, "stateProvisionFinish");
  std::vector<std::string>::vector[abi:ne180100](a1, (uint64_t)v2, 2uLL);
  if ((v4 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v2[0]);
    return;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v2[2]) < 0)
    goto LABEL_5;
}

void sub_212A6E32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

void std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::clear(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v12 = 0;
  }
  else
  {
    v4 = a1[4];
    v5 = &v2[v4 >> 7];
    v6 = (char *)*v5;
    v7 = (char *)*v5 + 32 * (v4 & 0x7F);
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v4) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[5] + v4) & 0x7F);
    if (v7 != (char *)v8)
    {
      do
      {
        v9 = *(_QWORD *)v7;
        if (*(_QWORD *)v7)
        {
          if ((v9 & 1) == 0)
          {
            v10 = *(void (**)(char *, char *, uint64_t))(v9 & 0xFFFFFFFFFFFFFFFELL);
            if (v10)
              v10(v7 + 8, v7 + 8, 2);
          }
          *(_QWORD *)v7 = 0;
          v6 = (char *)*v5;
        }
        v7 += 32;
        if (v7 - v6 == 4096)
        {
          v11 = (char *)v5[1];
          ++v5;
          v6 = v11;
          v7 = v11;
        }
      }
      while (v7 != (char *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
    a1[5] = 0;
    v12 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v13 = a1[2];
        v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        v12 = v13 - (_QWORD)v2;
      }
      while (v12 > 0x10);
    }
  }
  if (v12 >> 3 == 1)
  {
    v14 = 64;
  }
  else
  {
    if (v12 >> 3 != 2)
      return;
    v14 = 128;
  }
  a1[4] = v14;
}

uint64_t *boost::function<boost::msm::back::HandledEnum ()(void)>::~function(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

_QWORD *std::vector<std::string>::vector[abi:ne180100](_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  std::string *v9;
  __int128 *v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = 24 * a3;
    v6 = (char *)operator new(24 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v9 = (std::string *)&v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v8 = *v10;
        v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_212A6E5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_212A6E5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

_QWORD *boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::~state_machine(_QWORD *a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = off_24CE7F018;
  v2 = (void **)(a1 + 4);
  std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::clear(a1 + 4);
  v3 = (void **)a1[5];
  v4 = (void **)a1[6];
  if (v3 != v4)
  {
    do
    {
      v5 = *v3++;
      operator delete(v5);
    }
    while (v3 != v4);
    v7 = a1[5];
    v6 = a1[6];
    if (v6 != v7)
      a1[6] = v6 + ((v7 - v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v2)
    operator delete(*v2);
  return a1;
}

void boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::~state_machine(void **a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = off_24CE7F018;
  v2 = a1 + 4;
  std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::clear(a1 + 4);
  v3 = (void **)a1[5];
  v4 = (void **)a1[6];
  if (v3 != v4)
  {
    do
    {
      v5 = *v3++;
      operator delete(v5);
    }
    while (v3 != v4);
    v7 = a1[5];
    v6 = a1[6];
    if (v6 != v7)
      a1[6] = &v6[(v7 - v6 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*v2)
    operator delete(*v2);
  operator delete(a1);
}

const char *BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::getDebugName(BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_ *this)
{
  return "Personalize_";
}

void BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::getStateNames(_QWORD *a1@<X8>)
{
  void *v2[3];
  void *v3[3];
  void *v4[3];
  char __p[22];
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  HIBYTE(v2[2]) = 21;
  strcpy((char *)v2, "statePersonalizeFirst");
  strcpy((char *)v3, "statePersonalizeSecond");
  HIBYTE(v3[2]) = 22;
  strcpy((char *)v4, "statePersonalizeBooted");
  HIBYTE(v4[2]) = 22;
  v6 = 21;
  strcpy(__p, "statePersonalizeEUICC");
  std::vector<std::string>::vector[abi:ne180100](a1, (uint64_t)v2, 4uLL);
  if (v6 < 0)
  {
    operator delete(*(void **)__p);
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v3[2]) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v4[0]);
  if ((SHIBYTE(v3[2]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v2[2]) & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(v2[0]);
    return;
  }
LABEL_8:
  operator delete(v3[0]);
  if (SHIBYTE(v2[2]) < 0)
    goto LABEL_9;
}

void sub_212A6E93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a14 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a15);
  if ((a14 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *boost::fusion::vector_detail::vector_data<std::integer_sequence<unsigned long,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul>,BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit>::~vector_data(_QWORD *a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  void **v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  a1[22] = off_24CE7F018;
  v2 = (void **)(a1 + 26);
  std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::clear(a1 + 26);
  v3 = (void **)a1[27];
  v4 = (void **)a1[28];
  if (v3 != v4)
  {
    do
    {
      v5 = *v3++;
      operator delete(v5);
    }
    while (v3 != v4);
    v7 = a1[27];
    v6 = a1[28];
    if (v6 != v7)
      a1[28] = v6 + ((v7 - v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v2)
    operator delete(*v2);
  a1[5] = off_24CE7EF48;
  v8 = (void **)(a1 + 9);
  std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::clear(a1 + 9);
  v9 = (void **)a1[10];
  v10 = (void **)a1[11];
  if (v9 != v10)
  {
    do
    {
      v11 = *v9++;
      operator delete(v11);
    }
    while (v9 != v10);
    v13 = a1[10];
    v12 = a1[11];
    if (v12 != v13)
      a1[11] = v12 + ((v13 - v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v8)
    operator delete(*v8);
  return a1;
}

void std::__shared_ptr_pointer<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_> *,std::shared_ptr<void>::__shared_ptr_default_delete<void,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>,std::allocator<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_> *,std::shared_ptr<void>::__shared_ptr_default_delete<void,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>,std::allocator<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_> *,std::shared_ptr<void>::__shared_ptr_default_delete<void,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>,std::allocator<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B50F98)
    return a1 + 24;
  if (((v3 & 0x8000000212B50F98 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B50F98))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B50F98 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

void std::__tree<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,BBUpdaterController::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>>>::destroy(_QWORD *a1)
{
  const void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,BBUpdaterController::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,BBUpdaterController::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>>>::destroy(a1[1]);
    v2 = (const void *)a1[6];
    if (v2)
      _Block_release(v2);
    operator delete(a1);
  }
}

uint64_t ctu::PthreadMutexGuardPolicy<BBUPartitionManager>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

std::__shared_weak_count_vtbl **BBUError::create_default_global@<X0>(std::__shared_weak_count_vtbl **a1@<X8>)
{
  std::__shared_weak_count_vtbl *v3;
  dispatch_object_t object;

  v3 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
  object = 0;
  ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v3, "BBUError", QOS_CLASS_UTILITY, &object);
  if (object)
    dispatch_release(object);
  v3->__on_zero_shared_weak = 0;
  v3[1].~__shared_weak_count = 0;
  v3[1].~__shared_weak_count_0 = 0;
  return std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>(a1, v3);
}

void sub_212A6EE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  void *v10;

  if (object)
    dispatch_release(object);
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<BBUError>::operator=[abi:ne180100](uint64_t result, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = result;
  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(result + 8);
  *(_OWORD *)result = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      return v2;
    }
  }
  return result;
}

std::__shared_weak_count_vtbl **std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_24CE7F548;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  if (!a2)
    return a1;
  v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_212A6EFFC(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1}::operator() const(BBUError*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_212A6F01C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<BBUError *,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError *)#1},std::allocator<BBUError>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BBUError *,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError *)#1},std::allocator<BBUError>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 16), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1}::operator() const(BBUError*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BBUError *,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError *)#1},std::allocator<BBUError>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI8BBUErrorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI8BBUErrorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI8BBUErrorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI8BBUErrorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1}::operator() const(BBUError*)::{lambda(void *)#1}::__invoke(BBUError *a1)
{
  void *v1;

  if (a1)
  {
    BBUError::~BBUError(a1);
    operator delete(v1);
  }
}

void BBUError::~BBUError(BBUError *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 3);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)this + 2);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

uint64_t ctu::PthreadMutexGuardPolicy<BBUError>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void boost::core::demangle(boost::core *this, const char *lpmangled)
{
  char *v4;
  char *v5;
  const char *v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  boost::core *v11;
  size_t v12;
  int status;

  status = 0;
  v12 = 0;
  v4 = __cxa_demangle(lpmangled, 0, &v12, &status);
  v5 = v4;
  if (v4)
    v6 = v4;
  else
    v6 = lpmangled;
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    v11 = (boost::core *)operator new(v9 + 1);
    *((_QWORD *)this + 1) = v8;
    *((_QWORD *)this + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)this = v11;
    this = v11;
  }
  else
  {
    *((_BYTE *)this + 23) = v7;
    if (!v7)
      goto LABEL_12;
  }
  memmove(this, v6, v8);
LABEL_12:
  *((_BYTE *)this + v8) = 0;
  free(v5);
}

void sub_212A6F31C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::string::__assign_no_alias<true>(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      std::string::__throw_length_error[abi:ne180100]();
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      v6 = __dst;
    }
  }
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void **std::string::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v13;
  uint64_t v14;

  v6 = (unint64_t)a1[2];
  v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    v8 = *a1;
    a1[1] = (void *)__len;
    if (__len)
      memmove(v8, __src, __len);
    goto LABEL_12;
  }
  v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = v7 - 1;
  v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2)
      goto LABEL_7;
LABEL_14:
    v13 = 2 * v10;
    if (__len > 2 * v10)
      v13 = __len;
    v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v14 = v13 | 7;
    if (v13 >= 0x17)
      v9 = v14 + 1;
    else
      v9 = 23;
    v8 = operator new(v9);
    if (!__len)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2)
    goto LABEL_14;
LABEL_7:
  v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len)
LABEL_8:
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22)
    operator delete(v11);
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventError>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  int v8;

  if (boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::is_event_handling_blocked_helper<BBUpdaterControllerFSM::eventError>(a1))
    return 1;
  if (!boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventError,BBUpdaterControllerFSM::eventError>(a1, a2))return 1;
  v8 = (*((uint64_t (**)(uint64_t, _QWORD))&unk_253D36D88 + *(_DWORD *)(a1 + 32) + 1))(a1, 0);
  v6 = (*((unsigned int (**)(uint64_t, uint64_t))&unk_253D36D88 + *(_DWORD *)(a1 + 36) + 1))(a1, 1) | v8;
  if ((!*(_BYTE *)(a1 + 101) || (a3 & 1) != 0) && !(_DWORD)v6)
  {
    BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventError>(a1, a1, *(_DWORD *)(a1 + 32));
    BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventError>(a1, a1, *(_DWORD *)(a1 + 36));
  }
  *(_BYTE *)(a1 + 100) = 0;
  if ((a3 & 6) != 0)
    return v6;
  boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  return v6;
}

BOOL boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::is_event_handling_blocked_helper<BBUpdaterControllerFSM::eventError>(uint64_t a1)
{
  char v2;
  char v3;
  _BOOL8 result;
  char v5;
  int v6;
  char v7;
  int v8;

  qword_253D368C8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::TerminateFlag>::flag_false;
  unk_253D368D0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::TerminateFlag>::flag_true;
  qword_253D368B8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::TerminateFlag>::flag_false;
  unk_253D368C0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::TerminateFlag>::flag_false;
  qword_253D368A8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::TerminateFlag>::flag_false;
  unk_253D368B0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36898 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::TerminateFlag>::flag_false;
  unk_253D368A0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36888[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::TerminateFlag>::flag_false;
  unk_253D36890 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::TerminateFlag>::flag_false;
  v2 = ((uint64_t (*)(void))qword_253D36888[*(int *)(a1 + 32)])();
  v3 = ((uint64_t (*)(uint64_t))qword_253D36888[*(int *)(a1 + 36)])(a1);
  result = 1;
  if ((v2 & 1) == 0 && (v3 & 1) == 0)
  {
    qword_253D36918 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36920 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D36908 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36910 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368F8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36900 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368E8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368F0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368D8[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368E0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::InterruptedFlag>::flag_false;
    v5 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 32)])(a1);
    v6 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 36)])(a1);
    if ((v5 & 1) == 0 && !v6)
      return 0;
    qword_253D36968 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false;
    unk_253D36970 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false;
    qword_253D36958 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false;
    unk_253D36960 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false;
    qword_253D36948 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false;
    unk_253D36950 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false;
    qword_253D36938 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false;
    unk_253D36940 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false;
    qword_253D36928[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false;
    unk_253D36930 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false;
    v7 = ((uint64_t (*)(uint64_t))qword_253D36928[*(int *)(a1 + 32)])(a1);
    v8 = ((uint64_t (*)(uint64_t))qword_253D36928[*(int *)(a1 + 36)])(a1);
    return (v7 & 1) == 0 && !v8;
  }
  return result;
}

BOOL boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventError,BBUpdaterControllerFSM::eventError>(uint64_t a1, uint64_t a2)
{
  int v3;
  std::string::size_type v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::value_type v8;
  std::string *v9;
  std::string *v10;
  std::string::value_type v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void (*v18)(uint64_t *, _WORD *, int);
  std::string v20;
  std::string::size_type v21;
  __int128 v22;
  std::string::size_type v23;
  __int128 __p;
  __int128 v25;
  std::string::value_type v26;
  unint64_t v27;
  uint64_t v28[3];
  __int128 v29;
  std::string::size_type v30;
  std::string v31;
  std::string::size_type v32;
  std::string::value_type v33;
  std::string v34;
  std::string v35;
  std::string::size_type v36;
  std::string::value_type v37;
  std::string v38;
  std::string v39;
  std::string::size_type v40;
  std::string::value_type v41;
  std::string v42;
  std::string v43;
  std::string::size_type v44;
  std::string::value_type v45;
  _BYTE v46[24];
  std::string v47;
  std::string::size_type v48;
  std::string::value_type v49;

  v3 = *(unsigned __int8 *)(a1 + 100);
  if (*(_BYTE *)(a1 + 100))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      v5 = *(_QWORD *)(a2 + 24);
      v21 = v5;
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_4:
        v34 = v20;
        v35.__r_.__value_.__r.__words[0] = v5;
        if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_5;
        goto LABEL_12;
      }
    }
    else
    {
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v5 = *(_QWORD *)(a2 + 24);
      v20.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      v21 = v5;
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_4;
    }
    std::string::__init_copy_ctor_external(&v34, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
    v5 = v21;
    v35.__r_.__value_.__r.__words[0] = v21;
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_5:
      v38 = v34;
      v39.__r_.__value_.__r.__words[0] = v5;
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_13;
    }
LABEL_12:
    std::string::__init_copy_ctor_external(&v38, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
    v5 = v35.__r_.__value_.__r.__words[0];
    v39.__r_.__value_.__r.__words[0] = v35.__r_.__value_.__r.__words[0];
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_6:
      v42 = v38;
      v43.__r_.__value_.__r.__words[0] = v5;
      *(_QWORD *)v46 = a1;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
LABEL_13:
    std::string::__init_copy_ctor_external(&v42, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
    v5 = v39.__r_.__value_.__r.__words[0];
    v43.__r_.__value_.__r.__words[0] = v39.__r_.__value_.__r.__words[0];
    *(_QWORD *)v46 = a1;
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_7:
      *(_OWORD *)&v46[8] = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[0] = v42.__r_.__value_.__r.__words[2];
      v47.__r_.__value_.__l.__size_ = v5;
      v47.__r_.__value_.__s.__data_[16] = 5;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
LABEL_14:
    std::string::__init_copy_ctor_external((std::string *)&v46[8], v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
    v47.__r_.__value_.__l.__size_ = v43.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v42.__r_.__value_.__l.__data_);
      v47.__r_.__value_.__s.__data_[16] = 5;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_17:
        *(_QWORD *)&v22 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventError>;
        *((_QWORD *)&v22 + 1) = 0;
        v23 = *(_QWORD *)v46;
        if (v47.__r_.__value_.__s.__data_[7] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p, *(const std::string::value_type **)&v46[8], *(std::string::size_type *)&v46[16]);
          *((_QWORD *)&v25 + 1) = v47.__r_.__value_.__l.__size_;
          v26 = v47.__r_.__value_.__s.__data_[16];
          if (v47.__r_.__value_.__s.__data_[7] < 0)
          {
            operator delete(*(void **)&v46[8]);
            if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_23:
              v29 = v22;
              v6 = v23;
              v30 = v23;
              if (SBYTE7(v25) < 0)
              {
                std::string::__init_copy_ctor_external(&v31, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
                v6 = v30;
              }
              else
              {
                *(_OWORD *)&v31.__r_.__value_.__l.__data_ = __p;
                v31.__r_.__value_.__r.__words[2] = v25;
              }
              v7 = *((_QWORD *)&v25 + 1);
              v32 = *((_QWORD *)&v25 + 1);
              v8 = v26;
              v33 = v26;
              v27 = 0;
              *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v29;
              v34.__r_.__value_.__r.__words[2] = v6;
              if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v35, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
                v7 = v32;
                v8 = v33;
                v6 = v34.__r_.__value_.__r.__words[2];
              }
              else
              {
                v35 = v31;
              }
              v36 = v7;
              v37 = v8;
              *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
              v38.__r_.__value_.__r.__words[2] = v6;
              if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v39, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
                v6 = v38.__r_.__value_.__r.__words[2];
                v7 = v36;
                v8 = v37;
              }
              else
              {
                v39 = v35;
              }
              v40 = v7;
              v41 = v8;
              *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
              v42.__r_.__value_.__r.__words[2] = v6;
              if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v43, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
                v7 = v40;
                v8 = v41;
                v6 = v42.__r_.__value_.__r.__words[2];
              }
              else
              {
                v43 = v39;
              }
              v44 = v7;
              v45 = v8;
              *(_OWORD *)v46 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
              *(_QWORD *)&v46[16] = v6;
              if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v47, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
                v7 = v44;
                v8 = v45;
              }
              else
              {
                v47 = v43;
              }
              v48 = v7;
              v49 = v8;
              v9 = (std::string *)operator new(0x40uLL);
              *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)v46;
              v9->__r_.__value_.__r.__words[2] = *(_QWORD *)&v46[16];
              v10 = v9 + 1;
              if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v10, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
                v11 = v49;
                v12 = SHIBYTE(v47.__r_.__value_.__r.__words[2]);
                v9[2].__r_.__value_.__r.__words[0] = v48;
                v9[2].__r_.__value_.__s.__data_[8] = v11;
                v28[0] = (uint64_t)v9;
                if (v12 < 0)
                {
                  operator delete(v47.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_65;
                }
                else if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                {
                  goto LABEL_65;
                }
              }
              else
              {
                *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
                v9[1].__r_.__value_.__r.__words[2] = v47.__r_.__value_.__r.__words[2];
                v9[2].__r_.__value_.__r.__words[0] = v7;
                v9[2].__r_.__value_.__s.__data_[8] = v8;
                v28[0] = (uint64_t)v9;
                if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                {
LABEL_65:
                  operator delete(v43.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
                  {
LABEL_66:
                    operator delete(v39.__r_.__value_.__l.__data_);
                    v27 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventError const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventError>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventError const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventError>,boost::_bi::value<unsigned char>>>)::stored_vtable;
                    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
                    {
LABEL_67:
                      operator delete(v35.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_46;
                      goto LABEL_68;
                    }
LABEL_45:
                    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_46;
LABEL_68:
                    operator delete(v31.__r_.__value_.__l.__data_);
LABEL_46:
                    v13 = *(_QWORD *)(a1 + 56);
                    v14 = *(_QWORD *)(a1 + 48);
                    v15 = 16 * (v13 - v14) - 1;
                    if (v13 == v14)
                      v15 = 0;
                    v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
                    if (v15 == v16)
                    {
                      std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 40));
                      v14 = *(_QWORD *)(a1 + 48);
                      v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
                    }
                    v17 = (_QWORD *)(*(_QWORD *)(v14 + ((v16 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v16 & 0x7F));
                    *v17 = 0;
                    boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v17, (uint64_t *)&v27);
                    ++*(_QWORD *)(a1 + 80);
                    if (v27)
                    {
                      if ((v27 & 1) == 0)
                      {
                        v18 = *(void (**)(uint64_t *, _WORD *, int))(v27 & 0xFFFFFFFFFFFFFFFELL);
                        if (v18)
                          v18(v28, v28, 2);
                      }
                      v27 = 0;
                    }
                    if (SBYTE7(v25) < 0)
                    {
                      operator delete((void *)__p);
                      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        return v3 == 0;
                    }
                    else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      return v3 == 0;
                    }
                    operator delete(v20.__r_.__value_.__l.__data_);
                    return v3 == 0;
                  }
LABEL_44:
                  v27 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventError const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventError>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventError const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventError>,boost::_bi::value<unsigned char>>>)::stored_vtable;
                  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_67;
                  goto LABEL_45;
                }
              }
              if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_66;
              goto LABEL_44;
            }
          }
          else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_23;
          }
        }
        else
        {
          __p = *(_OWORD *)&v46[8];
          v25 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
          v26 = v47.__r_.__value_.__s.__data_[16];
          if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_23;
        }
        operator delete(v34.__r_.__value_.__l.__data_);
        goto LABEL_23;
      }
    }
    else
    {
      v47.__r_.__value_.__s.__data_[16] = 5;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
    }
LABEL_16:
    operator delete(v38.__r_.__value_.__l.__data_);
    goto LABEL_17;
  }
  *(_BYTE *)(a1 + 100) = 1;
  return v3 == 0;
}

void sub_212A6FE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;
  uint64_t v62;

  operator delete(v61);
  if (*(char *)(v62 - 81) < 0)
  {
    operator delete(*(void **)(v62 - 104));
    if ((*(char *)(v62 - 145) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a61 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v62 - 145) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v62 - 168));
  if ((a61 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a50 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(__p);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a39 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a45);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a24 & 0x80000000) == 0)
    {
LABEL_14:
      if (a14 < 0)
        operator delete(a9);
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(a19);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a34);
  if ((a24 & 0x80000000) == 0)
    goto LABEL_14;
  goto LABEL_13;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::TerminateFlag>::flag_true()
{
  return 1;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::TerminateFlag>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::TerminateFlag>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::TerminateFlag>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::TerminateFlag>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::TerminateFlag>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::TerminateFlag>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::TerminateFlag>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::InterruptedFlag>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::InterruptedFlag>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::InterruptedFlag>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::InterruptedFlag>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::InterruptedFlag>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::InterruptedFlag>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::InterruptedFlag>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::InterruptedFlag>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventError>>::flag_false()
{
  return 0;
}

void std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  char *v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  BOOL v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v35 = (v5 - v9) >> 2;
    if (v5 == v9)
      v35 = 1;
    if (v35 >> 61)
      goto LABEL_109;
    v36 = v35 >> 2;
    v37 = 8 * v35;
    v38 = (char *)operator new(8 * v35);
    v39 = &v38[8 * v36];
    v41 = v5 - v7;
    v40 = v5 == v7;
    v5 = v39;
    if (!v40)
    {
      v5 = &v39[v41 & 0xFFFFFFFFFFFFFFF8];
      v42 = v41 - 8;
      if ((unint64_t)(v41 - 8) >= 0x38)
      {
        v92 = &v38[8 * v36];
        v43 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v42 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v43 = &v39[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v43 = &v38[8 * v36];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v43 = v99;
        v43 += 8;
      }
      while (v43 != v5);
    }
LABEL_89:
    *a1 = v38;
    a1[1] = v39;
    a1[2] = v5;
    a1[3] = &v38[v37];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v44 = &v72[8 * v70];
      v73 = v44;
      if (v18 != v19)
      {
        v73 = &v44[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v44[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v44;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v44 = (char *)a1[1];
      }
    }
    else
    {
      v44 = v19;
    }
    *((_QWORD *)v44 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v40 = v5 == v84;
      v5 = v105;
      if (!v40)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = &v28[8 * v22];
  v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    v33 = v29;
    if (v21 < 1)
    {
      if (v18 == v19)
        v45 = 1;
      else
        v45 = v21 >> 2;
      if (v45 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v30 = (char *)operator new(8 * v45);
      v31 = &v30[8 * v45];
      operator delete(v28);
      v46 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v30;
      *(_QWORD *)v30 = v33;
      v32 = v30 + 8;
      if (v18 == v46)
        goto LABEL_40;
    }
    else
    {
      v34 = v22 + 2;
      if (v22 >= -1)
        v34 = v22 + 1;
      v30 -= 8 * (v34 >> 1);
      *(_QWORD *)v30 = v29;
      v32 = v30 + 8;
      if (v18 == v19)
        goto LABEL_40;
    }
    goto LABEL_44;
  }
  *(_QWORD *)v30 = v29;
  v32 = v30 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_44:
      if (v30 == v28)
      {
        if (v32 >= v31)
        {
          if (v31 == v28)
            v53 = 1;
          else
            v53 = (v31 - v28) >> 2;
          if (v53 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v54 = (char *)operator new(8 * v53);
          v55 = v54;
          v56 = (v53 + 3) >> 2;
          v30 = &v54[8 * v56];
          v57 = v32 - v28;
          v40 = v32 == v28;
          v32 = v30;
          if (!v40)
          {
            v32 = &v30[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = v57 - 8;
            v59 = &v54[8 * v56];
            v60 = v28;
            if (v58 < 0x38)
              goto LABEL_114;
            v61 = 8 * v56;
            v59 = &v54[8 * v56];
            v60 = v28;
            if ((unint64_t)(v59 - v28) < 0x20)
              goto LABEL_114;
            v62 = (v58 >> 3) + 1;
            v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
            v59 = &v30[v63];
            v60 = &v28[v63];
            v64 = (__int128 *)(v28 + 16);
            v65 = &v54[v61 + 16];
            v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v67 = *v64;
              *((_OWORD *)v65 - 1) = *(v64 - 1);
              *(_OWORD *)v65 = v67;
              v64 += 2;
              v65 += 32;
              v66 -= 4;
            }
            while (v66);
            if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_114:
              do
              {
                v68 = *(_QWORD *)v60;
                v60 += 8;
                *(_QWORD *)v59 = v68;
                v59 += 8;
              }
              while (v59 != v32);
            }
          }
          v31 = &v54[8 * v53];
          operator delete(v28);
          v28 = v55;
        }
        else
        {
          v49 = (v31 - v32) >> 3;
          if (v49 >= -1)
            v50 = v49 + 1;
          else
            v50 = v49 + 2;
          v51 = v50 >> 1;
          v30 = &v28[8 * (v50 >> 1)];
          v52 = v28;
          if (v32 != v28)
          {
            memmove(v30, v28, v32 - v28);
            v52 = v32;
          }
          v32 = (char *)v52 + 8 * v51;
        }
      }
      v48 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v30 - 1) = v48;
      v30 -= 8;
    }
    while (v18 != (char *)a1[1]);
  }
LABEL_40:
  v47 = (char *)*a1;
  *a1 = v28;
  a1[1] = v30;
  a1[2] = v32;
  a1[3] = v31;
  if (v47)
    operator delete(v47);
}

void sub_212A706F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::function0<boost::msm::back::HandledEnum>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_212A707BC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_212A707CC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventError const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventError>,boost::_bi::value<unsigned char>>>>::manage(uint64_t *a1, _WORD *a2, int a3)
{
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  const char *v10;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = (std::string *)operator new(0x40uLL);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
      v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
      v7 = v6 + 1;
      if (*(char *)(v5 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(v5 + 24), *(_QWORD *)(v5 + 32));
      }
      else
      {
        v8 = *(_OWORD *)(v5 + 24);
        v6[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 40);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      v6[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(v5 + 48);
      v6[2].__r_.__value_.__s.__data_[8] = *(_BYTE *)(v5 + 56);
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      v9 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        if (*(char *)(v9 + 47) < 0)
          operator delete(*(void **)(v9 + 24));
        operator delete((void *)v9);
      }
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v10 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v10 == (const char *)(0x8000000212B51064 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v10, (const char *)(0x8000000212B51064 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
}

void sub_212A70958(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventError const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventError>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[56];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventError>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B5103DLL & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B5103DLL & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(unsigned int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A70FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _QWORD v13[2];
  std::locale v14;

  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x212BFA208](v13, a1);
  if (LOBYTE(v13[0]))
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x212BFA214](v13);
  return a1;
}

void sub_212A71240(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x212BFA214](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x212A71220);
}

void sub_212A71288(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[3];

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      memset(__b, 170, sizeof(__b));
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        __b[2] = (void *)(v15 | 0x8000000000000000);
        __b[0] = v13;
      }
      else
      {
        HIBYTE(__b[2]) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (SHIBYTE(__b[2]) >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(__b[2]) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_212A71430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(uint64_t result)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(char *, char *, uint64_t);
  __int128 v14;
  void (*v15)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v16;
  unint64_t v17;
  _OWORD v18[2];
  std::runtime_error v19;

  if (*(_QWORD *)(result + 80))
  {
    v1 = result;
    while (1)
    {
      *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v18[0] + 1) = 0xAAAAAAAAAAAAAAAALL;
      v18[1] = v2;
      v3 = *(_QWORD *)(v1 + 48);
      v4 = *(_QWORD *)(v1 + 72);
      v5 = v4 >> 7;
      v6 = v4 & 0x7F;
      v7 = *(_QWORD *)(v3 + 8 * (v4 >> 7)) + 32 * v6;
      *(_QWORD *)&v18[0] = 0;
      v8 = *(_QWORD *)v7;
      if (!*(_QWORD *)v7)
        goto LABEL_7;
      *(_QWORD *)&v18[0] = *(_QWORD *)v7;
      if ((v8 & 1) == 0)
        break;
      v14 = *(_OWORD *)(v7 + 8);
      *((_QWORD *)&v18[1] + 1) = *(_QWORD *)(v7 + 24);
      *(_OWORD *)((char *)v18 + 8) = v14;
      v9 = (uint64_t *)(*(_QWORD *)(v3 + 8 * v5) + 32 * v6);
      v10 = *v9;
      if (*v9)
      {
LABEL_16:
        if ((v10 & 1) == 0)
        {
          v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 & 0xFFFFFFFFFFFFFFFELL);
          if (v15)
          {
            v15(v9 + 1, v9 + 1, 2);
            v4 = *(_QWORD *)(v1 + 72);
          }
        }
        *v9 = 0;
        v16 = *(_QWORD *)(v1 + 80) - 1;
        v17 = v4 + 1;
        *(_QWORD *)(v1 + 72) = v17;
        *(_QWORD *)(v1 + 80) = v16;
        if (v17 < 0x100)
          goto LABEL_10;
LABEL_9:
        operator delete(**(void ***)(v1 + 48));
        *(_QWORD *)(v1 + 48) += 8;
        *(_QWORD *)(v1 + 72) -= 128;
        goto LABEL_10;
      }
LABEL_8:
      v11 = *(_QWORD *)(v1 + 80) - 1;
      v12 = v4 + 1;
      *(_QWORD *)(v1 + 72) = v12;
      *(_QWORD *)(v1 + 80) = v11;
      if (v12 >= 0x100)
        goto LABEL_9;
LABEL_10:
      if (!*(_QWORD *)&v18[0])
      {
        std::runtime_error::runtime_error(&v19, "call to empty boost::function");
        v19.__vftable = (std::runtime_error_vtbl *)off_24CE7F280;
        boost::throw_exception<boost::bad_function_call>(&v19);
      }
      result = (*(uint64_t (**)(char *))((*(_QWORD *)&v18[0] & 0xFFFFFFFFFFFFFFFELL) + 8))((char *)v18 + 8);
      if ((v18[0] & 1) == 0)
      {
        v13 = *(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)&v18[0] & 0xFFFFFFFFFFFFFFFELL);
        if (v13)
          result = v13((char *)v18 + 8, (char *)v18 + 8, 2);
      }
      if (!*(_QWORD *)(v1 + 80))
        return result;
    }
    (*(void (**)(uint64_t, char *, _QWORD))(v8 & 0xFFFFFFFFFFFFFFFELL))(v7 + 8, (char *)v18 + 8, 0);
    v3 = *(_QWORD *)(v1 + 48);
    v4 = *(_QWORD *)(v1 + 72);
    v5 = v4 >> 7;
    v6 = v4 & 0x7F;
LABEL_7:
    v9 = (uint64_t *)(*(_QWORD *)(v3 + 8 * v5) + 32 * v6);
    v10 = *v9;
    if (*v9)
      goto LABEL_16;
    goto LABEL_8;
  }
  return result;
}

void sub_212A71614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
  std::runtime_error::~runtime_error(&a13);
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

void sub_212A71630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

void sub_212A71644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::bad_function_call>(const std::runtime_error *a1)
{
  void *exception;
  void *v3;

  exception = __cxa_allocate_exception(0x40uLL);
  v3 = (void *)boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(_QWORD *)a1 = &unk_24CE7F250;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &off_24CE7F1D8;
  *(_QWORD *)(a1 + 8) = &unk_24CE7F208;
  *(_QWORD *)(a1 + 24) = &unk_24CE7F230;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24CE7F2A8;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

char *boost::wrapexcept<boost::bad_function_call>::clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24CE7F250;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *((_QWORD *)v2 + 1) = off_24CE7F280;
  *((_QWORD *)v2 + 3) = &unk_24CE7F2A8;
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v2 + 4) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_24CE7F1D8;
  *((_QWORD *)v2 + 1) = &unk_24CE7F208;
  *((_QWORD *)v2 + 3) = &unk_24CE7F230;
  boost::exception_detail::copy_boost_exception((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_212A71800(_Unwind_Exception *a1)
{
  void *v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A7181C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_212A71874(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24CE7F2A8;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  operator delete((void *)a1);
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_24CE7F2A8;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_24CE7F2A8;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
  operator delete(&this[-1].__imp_);
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_24CE7F2A8;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_24CE7F2A8;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete(&a1[-2].__imp_);
}

void boost::bad_function_call::~bad_function_call(std::runtime_error *this)
{
  void *v1;

  std::runtime_error::~runtime_error(this);
  operator delete(v1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24CE7F250;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = off_24CE7F280;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_24CE7F2A8;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_24CE7F1D8;
  *(_QWORD *)(a1 + 8) = &unk_24CE7F208;
  *(_QWORD *)(a1 + 24) = &unk_24CE7F230;
  return a1;
}

void sub_212A71AF8(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    v5 = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    result = *(_QWORD *)(a1 + 8);
    if (!result)
      goto LABEL_9;
    goto LABEL_8;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
  v5 = v7;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
LABEL_8:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
LABEL_9:
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_212A71BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventError>()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,BBUpdaterControllerFSM::eventError,BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,BBUpdaterControllerFSM::ControllerFSM_TOP::handleError,boost::msm::front::none>>::execute(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  std::string __p;

  v5 = a1 + 4 * a2;
  *(_DWORD *)(a1 + 124) = 0;
  *(_DWORD *)(v5 + 32) = 7;
  v6 = (_DWORD *)(v5 + 32);
  v7 = *(_QWORD *)(a1 + 16);
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  BBUpdaterController::handleError(v7, &__p, *(_DWORD *)(a4 + 24));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *v6 = 9;
  return 1;
}

void sub_212A71CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventSkipPersonalize>(uint64_t a1, uint64_t a2, char a3)
{
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  int v9;
  char v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void (*v18)(_QWORD *, _QWORD *, uint64_t);
  int v20;
  unint64_t v21;
  _QWORD v22[3];

  qword_253D368C8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::TerminateFlag>::flag_false;
  unk_253D368D0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::TerminateFlag>::flag_true;
  qword_253D368B8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::TerminateFlag>::flag_false;
  unk_253D368C0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::TerminateFlag>::flag_false;
  qword_253D368A8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::TerminateFlag>::flag_false;
  unk_253D368B0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36898 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::TerminateFlag>::flag_false;
  unk_253D368A0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36888[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::TerminateFlag>::flag_false;
  unk_253D36890 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::TerminateFlag>::flag_false;
  v5 = ((uint64_t (*)(void))qword_253D36888[*(int *)(a1 + 32)])();
  v6 = ((uint64_t (*)(uint64_t))qword_253D36888[*(int *)(a1 + 36)])(a1);
  v7 = 1;
  if ((v5 & 1) == 0 && (v6 & 1) == 0)
  {
    qword_253D36918 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36920 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D36908 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36910 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368F8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36900 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368E8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368F0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368D8[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368E0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::InterruptedFlag>::flag_false;
    v8 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 32)])(a1);
    v9 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 36)])(a1);
    if ((v8 & 1) != 0 || v9)
    {
      qword_253D369B8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false;
      unk_253D369C0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false;
      qword_253D369A8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false;
      unk_253D369B0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false;
      qword_253D36998 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false;
      unk_253D369A0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false;
      qword_253D36988 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false;
      unk_253D36990 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false;
      qword_253D36978[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false;
      unk_253D36980 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false;
      v10 = ((uint64_t (*)(uint64_t))qword_253D36978[*(int *)(a1 + 32)])(a1);
      v11 = ((uint64_t (*)(uint64_t))qword_253D36978[*(int *)(a1 + 36)])(a1);
      if ((v10 & 1) == 0 && !v11)
        return 1;
    }
    if (*(_BYTE *)(a1 + 100))
    {
      v12 = operator new(0x20uLL);
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(a1 + 48);
      v15 = 16 * (v13 - v14) - 1;
      *v12 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventSkipPersonalize>;
      v12[1] = 0;
      v12[2] = a1;
      *((_BYTE *)v12 + 25) = 5;
      v21 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventSkipPersonalize const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventSkipPersonalize>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventSkipPersonalize const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventSkipPersonalize>,boost::_bi::value<unsigned char>>>)::stored_vtable;
      v22[0] = v12;
      if (v13 == v14)
        v15 = 0;
      v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      if (v15 == v16)
      {
        std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 40));
        v14 = *(_QWORD *)(a1 + 48);
        v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      }
      v17 = (_QWORD *)(*(_QWORD *)(v14 + ((v16 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v16 & 0x7F));
      *v17 = 0;
      boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v17, (uint64_t *)&v21);
      ++*(_QWORD *)(a1 + 80);
      if (v21)
      {
        if ((v21 & 1) == 0)
        {
          v18 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v21 & 0xFFFFFFFFFFFFFFFELL);
          if (v18)
            v18(v22, v22, 2);
        }
      }
      return 1;
    }
    *(_BYTE *)(a1 + 100) = 1;
    v20 = (*((uint64_t (**)(uint64_t, _QWORD))&unk_253D36DE0 + *(_DWORD *)(a1 + 32) + 1))(a1, 0);
    v7 = (*((unsigned int (**)(uint64_t, uint64_t))&unk_253D36DE0 + *(_DWORD *)(a1 + 36) + 1))(a1, 1) | v20;
    if ((!*(_BYTE *)(a1 + 101) || (a3 & 1) != 0) && !(_DWORD)v7)
    {
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventSkipPersonalize>(a1, a1, *(_DWORD *)(a1 + 32));
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventSkipPersonalize>(a1, a1, *(_DWORD *)(a1 + 36));
    }
    *(_BYTE *)(a1 + 100) = 0;
    if ((a3 & 6) == 0)
      boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  }
  return v7;
}

void sub_212A72074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventSkipPersonalize>>::flag_false()
{
  return 0;
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventSkipPersonalize const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventSkipPersonalize>,boost::_bi::value<unsigned char>>>>::manage(_OWORD **a1, uint64_t a2, int a3)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  const char *v8;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = operator new(0x20uLL);
      v7 = v5[1];
      *v6 = *v5;
      v6[1] = v7;
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      if (*(_QWORD *)a2)
        operator delete(*(void **)a2);
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x8000000212B511FFLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x8000000212B511FFLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_WORD *)(a2 + 8) = 0;
      break;
  }
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventSkipPersonalize const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventSkipPersonalize>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[25];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventSkipPersonalize>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B511CELL & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B511CELL & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A72868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventSkipPersonalize>()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeSecond,BBUpdaterControllerFSM::eventSkipPersonalize,BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeBooted,BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::skipPersonalize,boost::msm::front::none>>::execute(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  BBUFeedback **v5;
  BBUFeedback *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BBUEUR10UpdateSource *FirmwareDataSource;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  char *v25;
  const char *v26;
  size_t v27;
  std::string::size_type v28;
  std::string *p_dst;
  const char *v30;
  size_t v31;
  std::string::size_type v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::value_type *v43;
  std::string::size_type v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  std::string *v49;
  std::string::value_type *v50;
  std::string::size_type size;
  int v52;
  unsigned int v53;
  std::string __dst;
  std::string v55;
  std::string v56;
  _DWORD v57[2];
  std::string v58;
  unint64_t v59;
  BBUEUR10UpdateSource *v60;
  std::string v61;

  v3 = a1 + 4 * a2;
  *(_DWORD *)(a1 + 120) = 0;
  *(_DWORD *)(v3 + 24) = 1;
  v4 = (_DWORD *)(v3 + 24);
  v5 = *(BBUFeedback ***)(a1 + 16);
  memset(&v61, 0, sizeof(v61));
  v6 = v5[7];
  BBUFeedback::handleComment(v6, "entering %s", "StageContext::SkipPersonalize");
  v7 = *((_QWORD *)v6 + 19);
  v8 = *((_QWORD *)v6 + 18);
  if (v7 == v8)
    v9 = 0;
  else
    v9 = ((v7 - v8) << 7) - 1;
  v10 = *((_QWORD *)v6 + 22);
  v11 = v10 + *((_QWORD *)v6 + 21);
  if (v9 == v11)
  {
    std::deque<BBUpdaterCommon::StageContext>::__add_back_capacity((_QWORD *)v6 + 17);
    v8 = *((_QWORD *)v6 + 18);
    v10 = *((_QWORD *)v6 + 22);
    v11 = *((_QWORD *)v6 + 21) + v10;
  }
  *(_DWORD *)(*(_QWORD *)(v8 + ((v11 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v11 & 0x3FF)) = 6;
  *((_QWORD *)v6 + 22) = v10 + 1;
  FirmwareDataSource = BBUpdaterController::getFirmwareDataSource((BBUpdaterController *)v5, 1);
  v60 = FirmwareDataSource;
  if (FirmwareDataSource)
  {
    v19 = BBUpdaterController::pushImagesInternal((uint64_t)v5, &v60, 1, &v61);
    if (!v19)
    {
      v23 = BBUpdaterController::performPingInternal((uint64_t)v5, 0);
      if (!v23)
      {
        BBUpdaterController::performBootedStageInternal((uint64_t)v5, (uint64_t *)&v60);
        goto LABEL_10;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_34;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_34;
      }
      if (gBBULogVerbosity >= 6)
        _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v20, v21, v22, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_34:
      v30 = BBUReturnAsString::BBUReturnStrings[v23];
      v31 = strlen(v30);
      if (v31 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v32 = v31;
      if (v31 >= 0x17)
      {
        v47 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v31 | 7) != 0x17)
          v47 = v31 | 7;
        v48 = v47 + 1;
        v33 = operator new(v47 + 1);
        v56.__r_.__value_.__l.__size_ = v32;
        v56.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
      }
      else
      {
        *((_BYTE *)&v56.__r_.__value_.__s + 23) = v31;
        v33 = &v56;
        if (!v31)
        {
LABEL_54:
          v33[v32] = 0;
          v49 = std::string::insert(&v56, 0, "Failed to ping baseband: ", 0x19uLL);
          v50 = (std::string::value_type *)v49->__r_.__value_.__r.__words[0];
          size = v49->__r_.__value_.__l.__size_;
          LODWORD(v55.__r_.__value_.__l.__data_) = v49->__r_.__value_.__r.__words[2];
          *(_DWORD *)((char *)v55.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v49->__r_.__value_.__r.__words[2]
                                                                             + 3);
          v52 = SHIBYTE(v49->__r_.__value_.__r.__words[2]);
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          v53 = capabilities::updater::intermittentFailureRetryCount((capabilities::updater *)v49);
          if (v52 < 0)
          {
            std::string::__init_copy_ctor_external(&v58, v50, size);
          }
          else
          {
            v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
            v58.__r_.__value_.__l.__size_ = size;
            LODWORD(v58.__r_.__value_.__r.__words[2]) = v55.__r_.__value_.__l.__data_;
            *(_DWORD *)((char *)&v58.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v55.__r_.__value_.__r.__words
                                                                                   + 3);
            *((_BYTE *)&v58.__r_.__value_.__s + 23) = v52;
          }
          v59 = __PAIR64__(v53, v23);
          BBUpdaterController::process_event<BBUpdaterControllerFSM::eventRetry>((uint64_t)v5, (uint64_t)&v58);
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v58.__r_.__value_.__l.__data_);
            if ((v52 & 0x80000000) == 0)
            {
LABEL_71:
              if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_10;
LABEL_75:
              operator delete(v56.__r_.__value_.__l.__data_);
              goto LABEL_10;
            }
          }
          else if ((v52 & 0x80000000) == 0)
          {
            goto LABEL_71;
          }
          operator delete(v50);
          if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_10;
          goto LABEL_75;
        }
      }
      memmove(v33, v30, v32);
      goto LABEL_54;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_26;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_26;
    }
    if (gBBULogVerbosity >= 6)
      _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v16, v17, v18, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_26:
    v26 = BBUReturnAsString::BBUReturnStrings[v19];
    v27 = strlen(v26);
    if (v27 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v28 = v27;
    if (v27 >= 0x17)
    {
      v34 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17)
        v34 = v27 | 7;
      v35 = v34 + 1;
      p_dst = (std::string *)operator new(v34 + 1);
      __dst.__r_.__value_.__l.__size_ = v28;
      __dst.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v27;
      p_dst = &__dst;
      if (!v27)
      {
LABEL_42:
        p_dst->__r_.__value_.__s.__data_[v28] = 0;
        v36 = std::string::insert(&__dst, 0, "Failed to push images: ", 0x17uLL);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v55.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        v38 = std::string::append(&v55, ": ", 2uLL);
        v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v40 = &v61;
        else
          v40 = (std::string *)v61.__r_.__value_.__r.__words[0];
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
        else
          v41 = v61.__r_.__value_.__l.__size_;
        v42 = std::string::append(&v56, (const std::string::value_type *)v40, v41);
        v43 = (std::string::value_type *)v42->__r_.__value_.__r.__words[0];
        v44 = v42->__r_.__value_.__l.__size_;
        v57[0] = v42->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v57 + 3) = *(_DWORD *)((char *)&v42->__r_.__value_.__r.__words[2] + 3);
        v45 = SHIBYTE(v42->__r_.__value_.__r.__words[2]);
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        v46 = capabilities::updater::intermittentFailureRetryCount((capabilities::updater *)v42);
        if (v45 < 0)
        {
          std::string::__init_copy_ctor_external(&v58, v43, v44);
        }
        else
        {
          v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
          v58.__r_.__value_.__l.__size_ = v44;
          LODWORD(v58.__r_.__value_.__r.__words[2]) = v57[0];
          *(_DWORD *)((char *)&v58.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v57 + 3);
          *((_BYTE *)&v58.__r_.__value_.__s + 23) = v45;
        }
        v59 = __PAIR64__(v46, v19);
        BBUpdaterController::process_event<BBUpdaterControllerFSM::eventRetry>((uint64_t)v5, (uint64_t)&v58);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v58.__r_.__value_.__l.__data_);
          if ((v45 & 0x80000000) == 0)
          {
LABEL_59:
            if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_60;
            goto LABEL_65;
          }
        }
        else if ((v45 & 0x80000000) == 0)
        {
          goto LABEL_59;
        }
        operator delete(v43);
        if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_60:
          if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_61;
          goto LABEL_66;
        }
LABEL_65:
        operator delete(v56.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_61:
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_10;
LABEL_67:
          operator delete(__dst.__r_.__value_.__l.__data_);
          goto LABEL_10;
        }
LABEL_66:
        operator delete(v55.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_10;
        goto LABEL_67;
      }
    }
    memmove(p_dst, v26, v28);
    goto LABEL_42;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      goto LABEL_17;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
    {
LABEL_17:
      if (gBBULogVerbosity >= 6)
        _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v12, v13, v14, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
    }
  }
  v25 = (char *)operator new(0x28uLL);
  strcpy(v25, "Fail to get update source for bootup\n");
  std::string::__init_copy_ctor_external(&v58, v25, 0x25uLL);
  v59 = 35;
  BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>((uint64_t)v5, (uint64_t)&v58);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  operator delete(v25);
LABEL_10:
  BBUFeedback::exitStageContext(v5[7]);
  if (FirmwareDataSource)
    (*(void (**)(BBUEUR10UpdateSource *))(*(_QWORD *)FirmwareDataSource + 16))(FirmwareDataSource);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  *v4 = 1;
  ++*(_DWORD *)(a1 + 108);
  *v4 = 2;
  return 1;
}

void sub_212A730A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (*(char *)(v37 - 81) < 0)
  {
    operator delete(*(void **)(v37 - 104));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventSkipPersonalize>()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::frow<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventSkipPersonalize>::execute(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v4 = a1 + 280;
  if (boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventSkipPersonalize,BBUpdaterControllerFSM::eventSkipPersonalize>(a1 + 280))
  {
    v5 = ((uint64_t (*)(uint64_t, _QWORD))_MergedGlobals_1[*(_DWORD *)(a1 + 304) + 33])(v4, 0);
    v6 = v5;
    if (*(_BYTE *)(a1 + 369))
      v7 = 0;
    else
      v7 = (_DWORD)v5 == 0;
    if (v7)
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventSkipPersonalize>(v4, v4, *(_DWORD *)(a1 + 304));
    *(_BYTE *)(a1 + 368) = 0;
    boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(v4);
  }
  else
  {
    v6 = 1;
  }
  *(_DWORD *)(a1 + 4 * a2 + 32) = 3;
  return v6;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventSkipPersonalize>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;

  if (!boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventSkipPersonalize,BBUpdaterControllerFSM::eventSkipPersonalize>())
    return 1;
  v5 = ((uint64_t (*)(uint64_t, _QWORD))_MergedGlobals_1[*(_DWORD *)(a1 + 24) + 33])(a1, 0);
  v6 = v5;
  if ((!*(_BYTE *)(a1 + 89) || (a3 & 1) != 0) && !(_DWORD)v5)
    BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventSkipPersonalize>(a1, a1, *(_DWORD *)(a1 + 24));
  *(_BYTE *)(a1 + 88) = 0;
  if ((a3 & 6) == 0)
    boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  return v6;
}

BOOL boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventSkipPersonalize,BBUpdaterControllerFSM::eventSkipPersonalize>(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  void (*v9)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v11;
  _QWORD v12[3];

  v2 = *(unsigned __int8 *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
  {
    v3 = operator new(0x20uLL);
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = 16 * (v4 - v5) - 1;
    *v3 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventSkipPersonalize>;
    v3[1] = 0;
    v3[2] = a1;
    *((_BYTE *)v3 + 25) = 5;
    v11 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventSkipPersonalize const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventSkipPersonalize>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventSkipPersonalize const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventSkipPersonalize>,boost::_bi::value<unsigned char>>>)::stored_vtable;
    v12[0] = v3;
    if (v4 == v5)
      v6 = 0;
    v7 = *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 64);
    if (v6 == v7)
    {
      std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 32));
      v5 = *(_QWORD *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 64);
    }
    v8 = (_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
    *v8 = 0;
    boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v8, (uint64_t *)&v11);
    ++*(_QWORD *)(a1 + 72);
    if (v11 && (v11 & 1) == 0)
    {
      v9 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 & 0xFFFFFFFFFFFFFFFELL);
      if (v9)
        v9(v12, v12, 2);
    }
    return v2 == 0;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    return v2 == 0;
  }
}

void sub_212A734F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventSkipPersonalize const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventSkipPersonalize>,boost::_bi::value<unsigned char>>>>::manage(_OWORD **a1, uint64_t a2, int a3)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  const char *v8;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = operator new(0x20uLL);
      v7 = v5[1];
      *v6 = *v5;
      v6[1] = v7;
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      if (*(_QWORD *)a2)
        operator delete(*(void **)a2);
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x8000000212B512EFLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x8000000212B512EFLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_WORD *)(a2 + 8) = 0;
      break;
  }
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventSkipPersonalize const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventSkipPersonalize>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[25];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventSkipPersonalize>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B511CELL & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B511CELL & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A73C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(uint64_t result)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(_BYTE *, _BYTE *, uint64_t);
  __int128 v14;
  void (*v15)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  std::runtime_error v20;

  if (*(_QWORD *)(result + 72))
  {
    v1 = result;
    while (1)
    {
      *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)v19 = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v19[8] = v2;
      v3 = *(_QWORD *)(v1 + 40);
      v4 = *(_QWORD *)(v1 + 64);
      v5 = v4 >> 7;
      v6 = v4 & 0x7F;
      v7 = *(_QWORD *)(v3 + 8 * (v4 >> 7)) + 32 * v6;
      v18 = 0;
      v8 = *(_QWORD *)v7;
      if (!*(_QWORD *)v7)
        goto LABEL_7;
      v18 = *(_QWORD *)v7;
      if ((v8 & 1) == 0)
        break;
      v14 = *(_OWORD *)(v7 + 8);
      *(_QWORD *)&v19[16] = *(_QWORD *)(v7 + 24);
      *(_OWORD *)v19 = v14;
      v9 = (uint64_t *)(*(_QWORD *)(v3 + 8 * v5) + 32 * v6);
      v10 = *v9;
      if (*v9)
      {
LABEL_16:
        if ((v10 & 1) == 0)
        {
          v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 & 0xFFFFFFFFFFFFFFFELL);
          if (v15)
          {
            v15(v9 + 1, v9 + 1, 2);
            v4 = *(_QWORD *)(v1 + 64);
          }
        }
        *v9 = 0;
        v16 = *(_QWORD *)(v1 + 72) - 1;
        v17 = v4 + 1;
        *(_QWORD *)(v1 + 64) = v17;
        *(_QWORD *)(v1 + 72) = v16;
        if (v17 < 0x100)
          goto LABEL_10;
LABEL_9:
        operator delete(**(void ***)(v1 + 40));
        *(_QWORD *)(v1 + 40) += 8;
        *(_QWORD *)(v1 + 64) -= 128;
        goto LABEL_10;
      }
LABEL_8:
      v11 = *(_QWORD *)(v1 + 72) - 1;
      v12 = v4 + 1;
      *(_QWORD *)(v1 + 64) = v12;
      *(_QWORD *)(v1 + 72) = v11;
      if (v12 >= 0x100)
        goto LABEL_9;
LABEL_10:
      if (!v18)
      {
        std::runtime_error::runtime_error(&v20, "call to empty boost::function");
        v20.__vftable = (std::runtime_error_vtbl *)off_24CE7F280;
        boost::throw_exception<boost::bad_function_call>(&v20);
      }
      result = (*(uint64_t (**)(_BYTE *))((v18 & 0xFFFFFFFFFFFFFFFELL) + 8))(v19);
      if ((v18 & 1) == 0)
      {
        v13 = *(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v18 & 0xFFFFFFFFFFFFFFFELL);
        if (v13)
          result = v13(v19, v19, 2);
      }
      if (!*(_QWORD *)(v1 + 72))
        return result;
    }
    (*(void (**)(uint64_t, _BYTE *, _QWORD))(v8 & 0xFFFFFFFFFFFFFFFELL))(v7 + 8, v19, 0);
    v3 = *(_QWORD *)(v1 + 40);
    v4 = *(_QWORD *)(v1 + 64);
    v5 = v4 >> 7;
    v6 = v4 & 0x7F;
LABEL_7:
    v9 = (uint64_t *)(*(_QWORD *)(v3 + 8 * v5) + 32 * v6);
    v10 = *v9;
    if (*v9)
      goto LABEL_16;
    goto LABEL_8;
  }
  return result;
}

void sub_212A73F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
  std::runtime_error::~runtime_error(&a13);
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

void sub_212A73FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

void sub_212A73FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventRetry>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  int v8;

  if (boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::is_event_handling_blocked_helper<BBUpdaterControllerFSM::eventRetry>(a1))
    return 1;
  if (!boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventRetry,BBUpdaterControllerFSM::eventRetry>(a1, a2))return 1;
  v8 = (*((uint64_t (**)(uint64_t, _QWORD))&unk_253D36E38 + *(_DWORD *)(a1 + 32) + 1))(a1, 0);
  v6 = (*((unsigned int (**)(uint64_t, uint64_t))&unk_253D36E38 + *(_DWORD *)(a1 + 36) + 1))(a1, 1) | v8;
  if ((!*(_BYTE *)(a1 + 101) || (a3 & 1) != 0) && !(_DWORD)v6)
  {
    BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry>(a1, a1, *(_DWORD *)(a1 + 32));
    BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry>(a1, a1, *(_DWORD *)(a1 + 36));
  }
  *(_BYTE *)(a1 + 100) = 0;
  if ((a3 & 6) != 0)
    return v6;
  boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  return v6;
}

BOOL boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::is_event_handling_blocked_helper<BBUpdaterControllerFSM::eventRetry>(uint64_t a1)
{
  char v2;
  char v3;
  _BOOL8 result;
  char v5;
  int v6;
  char v7;
  int v8;

  qword_253D368C8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::TerminateFlag>::flag_false;
  unk_253D368D0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::TerminateFlag>::flag_true;
  qword_253D368B8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::TerminateFlag>::flag_false;
  unk_253D368C0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::TerminateFlag>::flag_false;
  qword_253D368A8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::TerminateFlag>::flag_false;
  unk_253D368B0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36898 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::TerminateFlag>::flag_false;
  unk_253D368A0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36888[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::TerminateFlag>::flag_false;
  unk_253D36890 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::TerminateFlag>::flag_false;
  v2 = ((uint64_t (*)(void))qword_253D36888[*(int *)(a1 + 32)])();
  v3 = ((uint64_t (*)(uint64_t))qword_253D36888[*(int *)(a1 + 36)])(a1);
  result = 1;
  if ((v2 & 1) == 0 && (v3 & 1) == 0)
  {
    qword_253D36918 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36920 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D36908 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36910 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368F8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36900 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368E8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368F0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368D8[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368E0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::InterruptedFlag>::flag_false;
    v5 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 32)])(a1);
    v6 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 36)])(a1);
    if ((v5 & 1) == 0 && !v6)
      return 0;
    qword_253D36A08 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false;
    unk_253D36A10 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false;
    qword_253D369F8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false;
    unk_253D36A00 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false;
    qword_253D369E8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false;
    unk_253D369F0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false;
    qword_253D369D8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false;
    unk_253D369E0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false;
    qword_253D369C8[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false;
    unk_253D369D0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false;
    v7 = ((uint64_t (*)(uint64_t))qword_253D369C8[*(int *)(a1 + 32)])(a1);
    v8 = ((uint64_t (*)(uint64_t))qword_253D369C8[*(int *)(a1 + 36)])(a1);
    return (v7 & 1) == 0 && !v8;
  }
  return result;
}

BOOL boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventRetry,BBUpdaterControllerFSM::eventRetry>(uint64_t a1, uint64_t a2)
{
  int v3;
  std::string::size_type v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::value_type v8;
  std::string *v9;
  std::string *v10;
  std::string::value_type v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void (*v18)(uint64_t *, _WORD *, int);
  std::string v20;
  std::string::size_type v21;
  __int128 v22;
  std::string::size_type v23;
  __int128 __p;
  __int128 v25;
  std::string::value_type v26;
  unint64_t v27;
  uint64_t v28[3];
  __int128 v29;
  std::string::size_type v30;
  std::string v31;
  std::string::size_type v32;
  std::string::value_type v33;
  std::string v34;
  std::string v35;
  std::string::size_type v36;
  std::string::value_type v37;
  std::string v38;
  std::string v39;
  std::string::size_type v40;
  std::string::value_type v41;
  std::string v42;
  std::string v43;
  std::string::size_type v44;
  std::string::value_type v45;
  _BYTE v46[24];
  std::string v47;
  std::string::size_type v48;
  std::string::value_type v49;

  v3 = *(unsigned __int8 *)(a1 + 100);
  if (*(_BYTE *)(a1 + 100))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      v5 = *(_QWORD *)(a2 + 24);
      v21 = v5;
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_4:
        v34 = v20;
        v35.__r_.__value_.__r.__words[0] = v5;
        if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_5;
        goto LABEL_12;
      }
    }
    else
    {
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v5 = *(_QWORD *)(a2 + 24);
      v20.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      v21 = v5;
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_4;
    }
    std::string::__init_copy_ctor_external(&v34, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
    v5 = v21;
    v35.__r_.__value_.__r.__words[0] = v21;
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_5:
      v38 = v34;
      v39.__r_.__value_.__r.__words[0] = v5;
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_13;
    }
LABEL_12:
    std::string::__init_copy_ctor_external(&v38, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
    v5 = v35.__r_.__value_.__r.__words[0];
    v39.__r_.__value_.__r.__words[0] = v35.__r_.__value_.__r.__words[0];
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_6:
      v42 = v38;
      v43.__r_.__value_.__r.__words[0] = v5;
      *(_QWORD *)v46 = a1;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
LABEL_13:
    std::string::__init_copy_ctor_external(&v42, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
    v5 = v39.__r_.__value_.__r.__words[0];
    v43.__r_.__value_.__r.__words[0] = v39.__r_.__value_.__r.__words[0];
    *(_QWORD *)v46 = a1;
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_7:
      *(_OWORD *)&v46[8] = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[0] = v42.__r_.__value_.__r.__words[2];
      v47.__r_.__value_.__l.__size_ = v5;
      v47.__r_.__value_.__s.__data_[16] = 5;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
LABEL_14:
    std::string::__init_copy_ctor_external((std::string *)&v46[8], v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
    v47.__r_.__value_.__l.__size_ = v43.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v42.__r_.__value_.__l.__data_);
      v47.__r_.__value_.__s.__data_[16] = 5;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_17:
        *(_QWORD *)&v22 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventRetry>;
        *((_QWORD *)&v22 + 1) = 0;
        v23 = *(_QWORD *)v46;
        if (v47.__r_.__value_.__s.__data_[7] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p, *(const std::string::value_type **)&v46[8], *(std::string::size_type *)&v46[16]);
          *((_QWORD *)&v25 + 1) = v47.__r_.__value_.__l.__size_;
          v26 = v47.__r_.__value_.__s.__data_[16];
          if (v47.__r_.__value_.__s.__data_[7] < 0)
          {
            operator delete(*(void **)&v46[8]);
            if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_23:
              v29 = v22;
              v6 = v23;
              v30 = v23;
              if (SBYTE7(v25) < 0)
              {
                std::string::__init_copy_ctor_external(&v31, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
                v6 = v30;
              }
              else
              {
                *(_OWORD *)&v31.__r_.__value_.__l.__data_ = __p;
                v31.__r_.__value_.__r.__words[2] = v25;
              }
              v7 = *((_QWORD *)&v25 + 1);
              v32 = *((_QWORD *)&v25 + 1);
              v8 = v26;
              v33 = v26;
              v27 = 0;
              *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v29;
              v34.__r_.__value_.__r.__words[2] = v6;
              if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v35, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
                v7 = v32;
                v8 = v33;
                v6 = v34.__r_.__value_.__r.__words[2];
              }
              else
              {
                v35 = v31;
              }
              v36 = v7;
              v37 = v8;
              *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
              v38.__r_.__value_.__r.__words[2] = v6;
              if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v39, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
                v6 = v38.__r_.__value_.__r.__words[2];
                v7 = v36;
                v8 = v37;
              }
              else
              {
                v39 = v35;
              }
              v40 = v7;
              v41 = v8;
              *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
              v42.__r_.__value_.__r.__words[2] = v6;
              if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v43, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
                v7 = v40;
                v8 = v41;
                v6 = v42.__r_.__value_.__r.__words[2];
              }
              else
              {
                v43 = v39;
              }
              v44 = v7;
              v45 = v8;
              *(_OWORD *)v46 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
              *(_QWORD *)&v46[16] = v6;
              if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v47, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
                v7 = v44;
                v8 = v45;
              }
              else
              {
                v47 = v43;
              }
              v48 = v7;
              v49 = v8;
              v9 = (std::string *)operator new(0x40uLL);
              *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)v46;
              v9->__r_.__value_.__r.__words[2] = *(_QWORD *)&v46[16];
              v10 = v9 + 1;
              if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v10, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
                v11 = v49;
                v12 = SHIBYTE(v47.__r_.__value_.__r.__words[2]);
                v9[2].__r_.__value_.__r.__words[0] = v48;
                v9[2].__r_.__value_.__s.__data_[8] = v11;
                v28[0] = (uint64_t)v9;
                if (v12 < 0)
                {
                  operator delete(v47.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_65;
                }
                else if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                {
                  goto LABEL_65;
                }
              }
              else
              {
                *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
                v9[1].__r_.__value_.__r.__words[2] = v47.__r_.__value_.__r.__words[2];
                v9[2].__r_.__value_.__r.__words[0] = v7;
                v9[2].__r_.__value_.__s.__data_[8] = v8;
                v28[0] = (uint64_t)v9;
                if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                {
LABEL_65:
                  operator delete(v43.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
                  {
LABEL_66:
                    operator delete(v39.__r_.__value_.__l.__data_);
                    v27 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventRetry>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventRetry>,boost::_bi::value<unsigned char>>>)::stored_vtable;
                    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
                    {
LABEL_67:
                      operator delete(v35.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_46;
                      goto LABEL_68;
                    }
LABEL_45:
                    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_46;
LABEL_68:
                    operator delete(v31.__r_.__value_.__l.__data_);
LABEL_46:
                    v13 = *(_QWORD *)(a1 + 56);
                    v14 = *(_QWORD *)(a1 + 48);
                    v15 = 16 * (v13 - v14) - 1;
                    if (v13 == v14)
                      v15 = 0;
                    v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
                    if (v15 == v16)
                    {
                      std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 40));
                      v14 = *(_QWORD *)(a1 + 48);
                      v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
                    }
                    v17 = (_QWORD *)(*(_QWORD *)(v14 + ((v16 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v16 & 0x7F));
                    *v17 = 0;
                    boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v17, (uint64_t *)&v27);
                    ++*(_QWORD *)(a1 + 80);
                    if (v27)
                    {
                      if ((v27 & 1) == 0)
                      {
                        v18 = *(void (**)(uint64_t *, _WORD *, int))(v27 & 0xFFFFFFFFFFFFFFFELL);
                        if (v18)
                          v18(v28, v28, 2);
                      }
                      v27 = 0;
                    }
                    if (SBYTE7(v25) < 0)
                    {
                      operator delete((void *)__p);
                      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        return v3 == 0;
                    }
                    else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      return v3 == 0;
                    }
                    operator delete(v20.__r_.__value_.__l.__data_);
                    return v3 == 0;
                  }
LABEL_44:
                  v27 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventRetry>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventRetry>,boost::_bi::value<unsigned char>>>)::stored_vtable;
                  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_67;
                  goto LABEL_45;
                }
              }
              if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_66;
              goto LABEL_44;
            }
          }
          else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_23;
          }
        }
        else
        {
          __p = *(_OWORD *)&v46[8];
          v25 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
          v26 = v47.__r_.__value_.__s.__data_[16];
          if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_23;
        }
        operator delete(v34.__r_.__value_.__l.__data_);
        goto LABEL_23;
      }
    }
    else
    {
      v47.__r_.__value_.__s.__data_[16] = 5;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
    }
LABEL_16:
    operator delete(v38.__r_.__value_.__l.__data_);
    goto LABEL_17;
  }
  *(_BYTE *)(a1 + 100) = 1;
  return v3 == 0;
}

void sub_212A748B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;
  uint64_t v62;

  operator delete(v61);
  if (*(char *)(v62 - 81) < 0)
  {
    operator delete(*(void **)(v62 - 104));
    if ((*(char *)(v62 - 145) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a61 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v62 - 145) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v62 - 168));
  if ((a61 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a50 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(__p);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a39 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a45);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a24 & 0x80000000) == 0)
    {
LABEL_14:
      if (a14 < 0)
        operator delete(a9);
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(a19);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a34);
  if ((a24 & 0x80000000) == 0)
    goto LABEL_14;
  goto LABEL_13;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRetry>>::flag_false()
{
  return 0;
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventRetry>,boost::_bi::value<unsigned char>>>>::manage(uint64_t *a1, _WORD *a2, int a3)
{
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  const char *v10;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = (std::string *)operator new(0x40uLL);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
      v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
      v7 = v6 + 1;
      if (*(char *)(v5 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(v5 + 24), *(_QWORD *)(v5 + 32));
      }
      else
      {
        v8 = *(_OWORD *)(v5 + 24);
        v6[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 40);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      v6[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(v5 + 48);
      v6[2].__r_.__value_.__s.__data_[8] = *(_BYTE *)(v5 + 56);
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      v9 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        if (*(char *)(v9 + 47) < 0)
          operator delete(*(void **)(v9 + 24));
        operator delete((void *)v9);
      }
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v10 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v10 == (const char *)(0x8000000212B51414 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v10, (const char *)(0x8000000212B51414 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
}

void sub_212A74BF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventRetry>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[56];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B513EDLL & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B513EDLL & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(unsigned int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A7529C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventRetry>()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeBooted,BBUpdaterControllerFSM::eventRetry,boost::msm::front::none,BBUpdaterControllerFSM::performAction<(BBUStage)8>,BBUpdaterControllerFSM::ControllerFSM_TOP::allowRetry>>::execute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  NSObject *v22;
  std::__shared_weak_count_vtbl *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *size;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  NSObject *isa;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  char v40;
  dispatch_object_t object[5];
  dispatch_object_t *v42;
  std::string block;
  unint64_t v44;
  NSObject *v45;
  dispatch_object_t **v46;

  v10 = *(_DWORD *)(a1 + 112);
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v11 = -1;
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0 && (gBBULogVerbosity & 0x80000000) == 0)
  {
    _BBULog(21, 0, "allowRetry", "", "Retry limits are src.retryLimit:%u  evt.retryLimit:%u src.retryCounter:%u\n", a6, a7, a8, *(_DWORD *)(a1 + 112));
    v11 = gBBULogMaskGet(void)::once;
  }
  v12 = *(_DWORD *)(a4 + 28);
  v14 = *(_DWORD *)(a1 + 108);
  v13 = *(_DWORD *)(a1 + 112);
  if (v13 >= v12)
    v13 = *(_DWORD *)(a4 + 28);
  if (v12)
    v15 = v13;
  else
    v15 = v10;
  v16 = v14 + 1;
  *(_DWORD *)(a1 + 108) = v14 + 1;
  if (v11 == -1)
  {
    v17 = *(_QWORD *)gBBULogMaskGet(void)::sBBULogMask;
    v18 = gBBULogVerbosity;
    if (v16 > v15)
      goto LABEL_13;
LABEL_23:
    if ((v17 & 0x200000) != 0 && (v18 & 0x80000000) == 0)
      _BBULog(21, 0, "allowRetry", "", "Clearing error states since we are retrying.\n", a6, a7, a8, v40);
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    v22 = qword_253D31DC8;
    if (!qword_253D31DC8)
    {
      v23 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
      object[0] = 0;
      ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v23, "BBUError", QOS_CLASS_UTILITY, object);
      if (object[0])
        dispatch_release(object[0]);
      v23->__on_zero_shared_weak = 0;
      v23[1].~__shared_weak_count = 0;
      v23[1].~__shared_weak_count_0 = 0;
      std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&block, v23);
      v24 = *(_OWORD *)&block.__r_.__value_.__l.__data_;
      *(_OWORD *)&block.__r_.__value_.__l.__data_ = 0uLL;
      v25 = (std::__shared_weak_count *)off_253D31DD0;
      *(_OWORD *)&qword_253D31DC8 = v24;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      size = (std::__shared_weak_count *)block.__r_.__value_.__l.__size_;
      if (block.__r_.__value_.__l.__size_)
      {
        v29 = (unint64_t *)(block.__r_.__value_.__l.__size_ + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v22 = qword_253D31DC8;
    }
    v31 = (std::__shared_weak_count *)off_253D31DD0;
    if (off_253D31DD0)
    {
      v32 = (unint64_t *)((char *)off_253D31DD0 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    object[0] = (dispatch_object_t)MEMORY[0x24BDAC760];
    object[1] = (dispatch_object_t)0x40000000;
    object[2] = (dispatch_object_t)___ZN8BBUError11clearErrorsEv_block_invoke;
    object[3] = (dispatch_object_t)&__block_descriptor_tmp_7;
    object[4] = v22;
    v42 = object;
    block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
    block.__r_.__value_.__l.__size_ = 0x40000000;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    v44 = (unint64_t)&__block_descriptor_tmp_10;
    v45 = v22;
    v46 = &v42;
    isa = v22[2].isa;
    if (v22[3].isa)
    {
      dispatch_async_and_wait(isa, &block);
      if (!v31)
        goto LABEL_51;
    }
    else
    {
      dispatch_sync(isa, &block);
      if (!v31)
        goto LABEL_51;
    }
    v38 = (unint64_t *)&v31->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
LABEL_51:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
        goto LABEL_53;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
      {
LABEL_53:
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(21, 0, "allowRetry", "", "attempting %u out of %u\n", v35, v36, v37, *(_DWORD *)(a1 + 108));
      }
    }
    BBUpdaterController::personalize(*(_QWORD *)(a1 + 16), 8);
    return 1;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v17 = *(_QWORD *)gBBULogMaskGet(void)::sBBULogMask;
  v18 = gBBULogVerbosity;
  if (v16 <= v15)
    goto LABEL_23;
LABEL_13:
  if ((v17 & 2) != 0 && (v18 & 0x80000000) == 0)
    _BBULog(1, 0, "allowRetry", "", "too many retries: %u\n", a6, a7, a8, v15);
  v19 = *(_QWORD *)(a1 + 16);
  v20 = *(_DWORD *)(a4 + 24);
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&block, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    block = *(std::string *)a4;
  v44 = v20;
  BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(v19, (uint64_t)&block);
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
    operator delete(block.__r_.__value_.__l.__data_);
  return 2;
}

void sub_212A757E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  if (object)
    dispatch_release(object);
  operator delete(v24);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeSecond,BBUpdaterControllerFSM::eventRetry,boost::msm::front::none,BBUpdaterControllerFSM::performAction<(BBUStage)8>,BBUpdaterControllerFSM::ControllerFSM_TOP::allowRetry>>::execute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  NSObject *v22;
  std::__shared_weak_count_vtbl *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *size;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  NSObject *isa;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  char v40;
  dispatch_object_t object[5];
  dispatch_object_t *v42;
  std::string block;
  unint64_t v44;
  NSObject *v45;
  dispatch_object_t **v46;

  v10 = *(_DWORD *)(a1 + 124);
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v11 = -1;
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0 && (gBBULogVerbosity & 0x80000000) == 0)
  {
    _BBULog(21, 0, "allowRetry", "", "Retry limits are src.retryLimit:%u  evt.retryLimit:%u src.retryCounter:%u\n", a6, a7, a8, *(_DWORD *)(a1 + 124));
    v11 = gBBULogMaskGet(void)::once;
  }
  v12 = *(_DWORD *)(a4 + 28);
  v14 = *(_DWORD *)(a1 + 120);
  v13 = *(_DWORD *)(a1 + 124);
  if (v13 >= v12)
    v13 = *(_DWORD *)(a4 + 28);
  if (v12)
    v15 = v13;
  else
    v15 = v10;
  v16 = v14 + 1;
  *(_DWORD *)(a1 + 120) = v14 + 1;
  if (v11 == -1)
  {
    v17 = *(_QWORD *)gBBULogMaskGet(void)::sBBULogMask;
    v18 = gBBULogVerbosity;
    if (v16 > v15)
      goto LABEL_13;
LABEL_23:
    if ((v17 & 0x200000) != 0 && (v18 & 0x80000000) == 0)
      _BBULog(21, 0, "allowRetry", "", "Clearing error states since we are retrying.\n", a6, a7, a8, v40);
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    v22 = qword_253D31DC8;
    if (!qword_253D31DC8)
    {
      v23 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
      object[0] = 0;
      ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v23, "BBUError", QOS_CLASS_UTILITY, object);
      if (object[0])
        dispatch_release(object[0]);
      v23->__on_zero_shared_weak = 0;
      v23[1].~__shared_weak_count = 0;
      v23[1].~__shared_weak_count_0 = 0;
      std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&block, v23);
      v24 = *(_OWORD *)&block.__r_.__value_.__l.__data_;
      *(_OWORD *)&block.__r_.__value_.__l.__data_ = 0uLL;
      v25 = (std::__shared_weak_count *)off_253D31DD0;
      *(_OWORD *)&qword_253D31DC8 = v24;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      size = (std::__shared_weak_count *)block.__r_.__value_.__l.__size_;
      if (block.__r_.__value_.__l.__size_)
      {
        v29 = (unint64_t *)(block.__r_.__value_.__l.__size_ + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v22 = qword_253D31DC8;
    }
    v31 = (std::__shared_weak_count *)off_253D31DD0;
    if (off_253D31DD0)
    {
      v32 = (unint64_t *)((char *)off_253D31DD0 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    object[0] = (dispatch_object_t)MEMORY[0x24BDAC760];
    object[1] = (dispatch_object_t)0x40000000;
    object[2] = (dispatch_object_t)___ZN8BBUError11clearErrorsEv_block_invoke;
    object[3] = (dispatch_object_t)&__block_descriptor_tmp_7;
    object[4] = v22;
    v42 = object;
    block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
    block.__r_.__value_.__l.__size_ = 0x40000000;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    v44 = (unint64_t)&__block_descriptor_tmp_10;
    v45 = v22;
    v46 = &v42;
    isa = v22[2].isa;
    if (v22[3].isa)
    {
      dispatch_async_and_wait(isa, &block);
      if (!v31)
        goto LABEL_51;
    }
    else
    {
      dispatch_sync(isa, &block);
      if (!v31)
        goto LABEL_51;
    }
    v38 = (unint64_t *)&v31->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
LABEL_51:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
        goto LABEL_53;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
      {
LABEL_53:
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(21, 0, "allowRetry", "", "attempting %u out of %u\n", v35, v36, v37, *(_DWORD *)(a1 + 120));
      }
    }
    BBUpdaterController::personalize(*(_QWORD *)(a1 + 16), 8);
    return 1;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v17 = *(_QWORD *)gBBULogMaskGet(void)::sBBULogMask;
  v18 = gBBULogVerbosity;
  if (v16 <= v15)
    goto LABEL_23;
LABEL_13:
  if ((v17 & 2) != 0 && (v18 & 0x80000000) == 0)
    _BBULog(1, 0, "allowRetry", "", "too many retries: %u\n", a6, a7, a8, v15);
  v19 = *(_QWORD *)(a1 + 16);
  v20 = *(_DWORD *)(a4 + 24);
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&block, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    block = *(std::string *)a4;
  v44 = v20;
  BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(v19, (uint64_t)&block);
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
    operator delete(block.__r_.__value_.__l.__data_);
  return 2;
}

void sub_212A75C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  if (object)
    dispatch_release(object);
  operator delete(v24);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeFirst,BBUpdaterControllerFSM::eventRetry,boost::msm::front::none,BBUpdaterControllerFSM::queryAction<(BBUStage)2>,BBUpdaterControllerFSM::ControllerFSM_TOP::allowRetry>>::execute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  NSObject *v22;
  std::__shared_weak_count_vtbl *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *size;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  NSObject *isa;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  BBUpdaterController *v40;
  BBUEUR10UpdateSource *FirmwareDataSource;
  BBUFeedback *v42;
  char v43;
  dispatch_object_t object[5];
  dispatch_object_t *v45;
  std::string block;
  unint64_t v47;
  NSObject *v48;
  dispatch_object_t **v49;

  v10 = *(_DWORD *)(a1 + 136);
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v11 = -1;
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0 && (gBBULogVerbosity & 0x80000000) == 0)
  {
    _BBULog(21, 0, "allowRetry", "", "Retry limits are src.retryLimit:%u  evt.retryLimit:%u src.retryCounter:%u\n", a6, a7, a8, *(_DWORD *)(a1 + 136));
    v11 = gBBULogMaskGet(void)::once;
  }
  v12 = *(_DWORD *)(a4 + 28);
  v14 = *(_DWORD *)(a1 + 132);
  v13 = *(_DWORD *)(a1 + 136);
  if (v13 >= v12)
    v13 = *(_DWORD *)(a4 + 28);
  if (v12)
    v15 = v13;
  else
    v15 = v10;
  v16 = v14 + 1;
  *(_DWORD *)(a1 + 132) = v14 + 1;
  if (v11 == -1)
  {
    v17 = *(_QWORD *)gBBULogMaskGet(void)::sBBULogMask;
    v18 = gBBULogVerbosity;
    if (v16 > v15)
      goto LABEL_13;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v17 = *(_QWORD *)gBBULogMaskGet(void)::sBBULogMask;
    v18 = gBBULogVerbosity;
    if (v16 > v15)
    {
LABEL_13:
      if ((v17 & 2) != 0 && (v18 & 0x80000000) == 0)
        _BBULog(1, 0, "allowRetry", "", "too many retries: %u\n", a6, a7, a8, v15);
      v19 = *(_QWORD *)(a1 + 16);
      v20 = *(_DWORD *)(a4 + 24);
      if (*(char *)(a4 + 23) < 0)
        std::string::__init_copy_ctor_external(&block, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
      else
        block = *(std::string *)a4;
      v47 = v20;
      BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(v19, (uint64_t)&block);
      if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        operator delete(block.__r_.__value_.__l.__data_);
      return 2;
    }
  }
  if ((v17 & 0x200000) != 0 && (v18 & 0x80000000) == 0)
    _BBULog(21, 0, "allowRetry", "", "Clearing error states since we are retrying.\n", a6, a7, a8, v43);
  pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  v22 = qword_253D31DC8;
  if (!qword_253D31DC8)
  {
    v23 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
    object[0] = 0;
    ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v23, "BBUError", QOS_CLASS_UTILITY, object);
    if (object[0])
      dispatch_release(object[0]);
    v23->__on_zero_shared_weak = 0;
    v23[1].~__shared_weak_count = 0;
    v23[1].~__shared_weak_count_0 = 0;
    std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&block, v23);
    v24 = *(_OWORD *)&block.__r_.__value_.__l.__data_;
    *(_OWORD *)&block.__r_.__value_.__l.__data_ = 0uLL;
    v25 = (std::__shared_weak_count *)off_253D31DD0;
    *(_OWORD *)&qword_253D31DC8 = v24;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    size = (std::__shared_weak_count *)block.__r_.__value_.__l.__size_;
    if (block.__r_.__value_.__l.__size_)
    {
      v29 = (unint64_t *)(block.__r_.__value_.__l.__size_ + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v22 = qword_253D31DC8;
  }
  v31 = (std::__shared_weak_count *)off_253D31DD0;
  if (off_253D31DD0)
  {
    v32 = (unint64_t *)((char *)off_253D31DD0 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  object[0] = (dispatch_object_t)MEMORY[0x24BDAC760];
  object[1] = (dispatch_object_t)0x40000000;
  object[2] = (dispatch_object_t)___ZN8BBUError11clearErrorsEv_block_invoke;
  object[3] = (dispatch_object_t)&__block_descriptor_tmp_7;
  object[4] = v22;
  v45 = object;
  block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
  block.__r_.__value_.__l.__size_ = 0x40000000;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v47 = (unint64_t)&__block_descriptor_tmp_10;
  v48 = v22;
  v49 = &v45;
  isa = v22[2].isa;
  if (v22[3].isa)
  {
    dispatch_async_and_wait(isa, &block);
    if (!v31)
      goto LABEL_51;
  }
  else
  {
    dispatch_sync(isa, &block);
    if (!v31)
      goto LABEL_51;
  }
  v38 = (unint64_t *)&v31->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_51:
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
      goto LABEL_53;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
    {
LABEL_53:
      if ((gBBULogVerbosity & 0x80000000) == 0)
        _BBULog(21, 0, "allowRetry", "", "attempting %u out of %u\n", v35, v36, v37, *(_DWORD *)(a1 + 132));
    }
  }
  v40 = *(BBUpdaterController **)(a1 + 16);
  FirmwareDataSource = BBUpdaterController::getFirmwareDataSource(v40, 0);
  BBUpdaterController::parsePreflightArgs(v40);
  BBUpdaterController::queryInfoFirstStageInternal((BBULoader **)v40, v42);
  if (FirmwareDataSource)
    (*(void (**)(BBUEUR10UpdateSource *))(*(_QWORD *)FirmwareDataSource + 16))(FirmwareDataSource);
  return 1;
}

void sub_212A760D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  if (object)
    dispatch_release(object);
  operator delete(v24);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventRetry>()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::frow<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry>::execute(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v6 = a1 + 280;
  if (boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventRetry,BBUpdaterControllerFSM::eventRetry>(a1 + 280, a4))
  {
    v7 = ((uint64_t (*)(uint64_t, _QWORD))_MergedGlobals_1[*(_DWORD *)(a1 + 304) + 38])(v6, 0);
    v8 = v7;
    if (*(_BYTE *)(a1 + 369))
      v9 = 0;
    else
      v9 = (_DWORD)v7 == 0;
    if (v9)
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry>(v6, v6, *(_DWORD *)(a1 + 304));
    *(_BYTE *)(a1 + 368) = 0;
    boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(v6);
  }
  else
  {
    v8 = 1;
  }
  *(_DWORD *)(a1 + 4 * a2 + 32) = 3;
  return v8;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventRetry>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;

  if (!boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventRetry,BBUpdaterControllerFSM::eventRetry>())
    return 1;
  v5 = ((uint64_t (*)(uint64_t, _QWORD))_MergedGlobals_1[*(_DWORD *)(a1 + 24) + 38])(a1, 0);
  v6 = v5;
  if ((!*(_BYTE *)(a1 + 89) || (a3 & 1) != 0) && !(_DWORD)v5)
    BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry>(a1, a1, *(_DWORD *)(a1 + 24));
  *(_BYTE *)(a1 + 88) = 0;
  if ((a3 & 6) == 0)
    boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  return v6;
}

BOOL boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventRetry,BBUpdaterControllerFSM::eventRetry>(uint64_t a1, uint64_t a2)
{
  int v3;
  std::string::size_type v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::value_type v8;
  std::string *v9;
  std::string *v10;
  std::string::value_type v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void (*v18)(uint64_t *, _WORD *, int);
  std::string v20;
  std::string::size_type v21;
  __int128 v22;
  std::string::size_type v23;
  __int128 __p;
  __int128 v25;
  std::string::value_type v26;
  unint64_t v27;
  uint64_t v28[3];
  __int128 v29;
  std::string::size_type v30;
  std::string v31;
  std::string::size_type v32;
  std::string::value_type v33;
  std::string v34;
  std::string v35;
  std::string::size_type v36;
  std::string::value_type v37;
  std::string v38;
  std::string v39;
  std::string::size_type v40;
  std::string::value_type v41;
  std::string v42;
  std::string v43;
  std::string::size_type v44;
  std::string::value_type v45;
  _BYTE v46[24];
  std::string v47;
  std::string::size_type v48;
  std::string::value_type v49;

  v3 = *(unsigned __int8 *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      v5 = *(_QWORD *)(a2 + 24);
      v21 = v5;
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_4:
        v34 = v20;
        v35.__r_.__value_.__r.__words[0] = v5;
        if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_5;
        goto LABEL_12;
      }
    }
    else
    {
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v5 = *(_QWORD *)(a2 + 24);
      v20.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      v21 = v5;
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_4;
    }
    std::string::__init_copy_ctor_external(&v34, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
    v5 = v21;
    v35.__r_.__value_.__r.__words[0] = v21;
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_5:
      v38 = v34;
      v39.__r_.__value_.__r.__words[0] = v5;
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_13;
    }
LABEL_12:
    std::string::__init_copy_ctor_external(&v38, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
    v5 = v35.__r_.__value_.__r.__words[0];
    v39.__r_.__value_.__r.__words[0] = v35.__r_.__value_.__r.__words[0];
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_6:
      v42 = v38;
      v43.__r_.__value_.__r.__words[0] = v5;
      *(_QWORD *)v46 = a1;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
LABEL_13:
    std::string::__init_copy_ctor_external(&v42, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
    v5 = v39.__r_.__value_.__r.__words[0];
    v43.__r_.__value_.__r.__words[0] = v39.__r_.__value_.__r.__words[0];
    *(_QWORD *)v46 = a1;
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_7:
      *(_OWORD *)&v46[8] = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[0] = v42.__r_.__value_.__r.__words[2];
      v47.__r_.__value_.__l.__size_ = v5;
      v47.__r_.__value_.__s.__data_[16] = 5;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
LABEL_14:
    std::string::__init_copy_ctor_external((std::string *)&v46[8], v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
    v47.__r_.__value_.__l.__size_ = v43.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v42.__r_.__value_.__l.__data_);
      v47.__r_.__value_.__s.__data_[16] = 5;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_17:
        *(_QWORD *)&v22 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventRetry>;
        *((_QWORD *)&v22 + 1) = 0;
        v23 = *(_QWORD *)v46;
        if (v47.__r_.__value_.__s.__data_[7] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p, *(const std::string::value_type **)&v46[8], *(std::string::size_type *)&v46[16]);
          *((_QWORD *)&v25 + 1) = v47.__r_.__value_.__l.__size_;
          v26 = v47.__r_.__value_.__s.__data_[16];
          if (v47.__r_.__value_.__s.__data_[7] < 0)
          {
            operator delete(*(void **)&v46[8]);
            if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_23:
              v29 = v22;
              v6 = v23;
              v30 = v23;
              if (SBYTE7(v25) < 0)
              {
                std::string::__init_copy_ctor_external(&v31, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
                v6 = v30;
              }
              else
              {
                *(_OWORD *)&v31.__r_.__value_.__l.__data_ = __p;
                v31.__r_.__value_.__r.__words[2] = v25;
              }
              v7 = *((_QWORD *)&v25 + 1);
              v32 = *((_QWORD *)&v25 + 1);
              v8 = v26;
              v33 = v26;
              v27 = 0;
              *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v29;
              v34.__r_.__value_.__r.__words[2] = v6;
              if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v35, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
                v7 = v32;
                v8 = v33;
                v6 = v34.__r_.__value_.__r.__words[2];
              }
              else
              {
                v35 = v31;
              }
              v36 = v7;
              v37 = v8;
              *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
              v38.__r_.__value_.__r.__words[2] = v6;
              if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v39, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
                v6 = v38.__r_.__value_.__r.__words[2];
                v7 = v36;
                v8 = v37;
              }
              else
              {
                v39 = v35;
              }
              v40 = v7;
              v41 = v8;
              *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
              v42.__r_.__value_.__r.__words[2] = v6;
              if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v43, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
                v7 = v40;
                v8 = v41;
                v6 = v42.__r_.__value_.__r.__words[2];
              }
              else
              {
                v43 = v39;
              }
              v44 = v7;
              v45 = v8;
              *(_OWORD *)v46 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
              *(_QWORD *)&v46[16] = v6;
              if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v47, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
                v7 = v44;
                v8 = v45;
              }
              else
              {
                v47 = v43;
              }
              v48 = v7;
              v49 = v8;
              v9 = (std::string *)operator new(0x40uLL);
              *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)v46;
              v9->__r_.__value_.__r.__words[2] = *(_QWORD *)&v46[16];
              v10 = v9 + 1;
              if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v10, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
                v11 = v49;
                v12 = SHIBYTE(v47.__r_.__value_.__r.__words[2]);
                v9[2].__r_.__value_.__r.__words[0] = v48;
                v9[2].__r_.__value_.__s.__data_[8] = v11;
                v28[0] = (uint64_t)v9;
                if (v12 < 0)
                {
                  operator delete(v47.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_65;
                }
                else if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                {
                  goto LABEL_65;
                }
              }
              else
              {
                *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
                v9[1].__r_.__value_.__r.__words[2] = v47.__r_.__value_.__r.__words[2];
                v9[2].__r_.__value_.__r.__words[0] = v7;
                v9[2].__r_.__value_.__s.__data_[8] = v8;
                v28[0] = (uint64_t)v9;
                if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                {
LABEL_65:
                  operator delete(v43.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
                  {
LABEL_66:
                    operator delete(v39.__r_.__value_.__l.__data_);
                    v27 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventRetry>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventRetry>,boost::_bi::value<unsigned char>>>)::stored_vtable;
                    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
                    {
LABEL_67:
                      operator delete(v35.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_46;
                      goto LABEL_68;
                    }
LABEL_45:
                    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_46;
LABEL_68:
                    operator delete(v31.__r_.__value_.__l.__data_);
LABEL_46:
                    v13 = *(_QWORD *)(a1 + 48);
                    v14 = *(_QWORD *)(a1 + 40);
                    v15 = 16 * (v13 - v14) - 1;
                    if (v13 == v14)
                      v15 = 0;
                    v16 = *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 64);
                    if (v15 == v16)
                    {
                      std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 32));
                      v14 = *(_QWORD *)(a1 + 40);
                      v16 = *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 64);
                    }
                    v17 = (_QWORD *)(*(_QWORD *)(v14 + ((v16 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v16 & 0x7F));
                    *v17 = 0;
                    boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v17, (uint64_t *)&v27);
                    ++*(_QWORD *)(a1 + 72);
                    if (v27)
                    {
                      if ((v27 & 1) == 0)
                      {
                        v18 = *(void (**)(uint64_t *, _WORD *, int))(v27 & 0xFFFFFFFFFFFFFFFELL);
                        if (v18)
                          v18(v28, v28, 2);
                      }
                      v27 = 0;
                    }
                    if (SBYTE7(v25) < 0)
                    {
                      operator delete((void *)__p);
                      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        return v3 == 0;
                    }
                    else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      return v3 == 0;
                    }
                    operator delete(v20.__r_.__value_.__l.__data_);
                    return v3 == 0;
                  }
LABEL_44:
                  v27 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventRetry>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventRetry>,boost::_bi::value<unsigned char>>>)::stored_vtable;
                  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_67;
                  goto LABEL_45;
                }
              }
              if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_66;
              goto LABEL_44;
            }
          }
          else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_23;
          }
        }
        else
        {
          __p = *(_OWORD *)&v46[8];
          v25 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
          v26 = v47.__r_.__value_.__s.__data_[16];
          if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_23;
        }
        operator delete(v34.__r_.__value_.__l.__data_);
        goto LABEL_23;
      }
    }
    else
    {
      v47.__r_.__value_.__s.__data_[16] = 5;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
    }
LABEL_16:
    operator delete(v38.__r_.__value_.__l.__data_);
    goto LABEL_17;
  }
  *(_BYTE *)(a1 + 88) = 1;
  return v3 == 0;
}

void sub_212A76884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;
  uint64_t v62;

  operator delete(v61);
  if (*(char *)(v62 - 81) < 0)
  {
    operator delete(*(void **)(v62 - 104));
    if ((*(char *)(v62 - 145) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a61 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v62 - 145) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v62 - 168));
  if ((a61 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a50 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(__p);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a39 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a45);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a24 & 0x80000000) == 0)
    {
LABEL_14:
      if (a14 < 0)
        operator delete(a9);
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(a19);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a34);
  if ((a24 & 0x80000000) == 0)
    goto LABEL_14;
  goto LABEL_13;
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventRetry>,boost::_bi::value<unsigned char>>>>::manage(uint64_t *a1, _WORD *a2, int a3)
{
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  const char *v10;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = (std::string *)operator new(0x40uLL);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
      v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
      v7 = v6 + 1;
      if (*(char *)(v5 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(v5 + 24), *(_QWORD *)(v5 + 32));
      }
      else
      {
        v8 = *(_OWORD *)(v5 + 24);
        v6[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 40);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      v6[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(v5 + 48);
      v6[2].__r_.__value_.__s.__data_[8] = *(_BYTE *)(v5 + 56);
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      v9 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        if (*(char *)(v9 + 47) < 0)
          operator delete(*(void **)(v9 + 24));
        operator delete((void *)v9);
      }
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v10 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v10 == (const char *)(0x8000000212B514FALL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v10, (const char *)(0x8000000212B514FALL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
}

void sub_212A76B7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventRetry>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[56];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B513EDLL & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B513EDLL & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A77220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,BBUpdaterControllerFSM::eventRetry,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::queryAction<(BBUStage)2>,boost::msm::front::none>>::execute(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  BBUpdaterController *v5;
  BBUEUR10UpdateSource *FirmwareDataSource;
  BBUFeedback *v7;
  int v8;
  _DWORD *v9;

  v3 = a1 + 4 * a2;
  *(_DWORD *)(a1 + 268) = 0;
  *(_DWORD *)(v3 + 32) = 4;
  v4 = (_DWORD *)(v3 + 32);
  v5 = *(BBUpdaterController **)(a1 + 16);
  FirmwareDataSource = BBUpdaterController::getFirmwareDataSource(v5, 0);
  BBUpdaterController::parsePreflightArgs(v5);
  BBUpdaterController::queryInfoFirstStageInternal((BBULoader **)v5, v7);
  if (FirmwareDataSource)
    (*(void (**)(BBUEUR10UpdateSource *))(*(_QWORD *)FirmwareDataSource + 16))(FirmwareDataSource);
  *v4 = 4;
  v8 = *(_DWORD *)(a1 + 364);
  *(_DWORD *)(a1 + 304) = v8;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  switch(v8)
  {
    case 0:
      v9 = (_DWORD *)(a1 + 412);
      goto LABEL_8;
    case 1:
      v9 = (_DWORD *)(a1 + 400);
      goto LABEL_8;
    case 2:
      v9 = (_DWORD *)(a1 + 388);
      goto LABEL_8;
    case 3:
      v9 = (_DWORD *)(a1 + 376);
LABEL_8:
      ++*v9;
      break;
    default:
      break;
  }
  *(_BYTE *)(a1 + 368) = 0;
  boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1 + 280);
  *v4 = 3;
  return 1;
}

void sub_212A77444(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,BBUpdaterControllerFSM::eventRetry,boost::msm::front::none,BBUpdaterControllerFSM::ControllerFSM_TOP::checkManifest,BBUpdaterControllerFSM::ControllerFSM_TOP::allowRetry>>::execute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  NSObject *v21;
  std::__shared_weak_count_vtbl *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *isa;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char v43;
  dispatch_object_t object[5];
  dispatch_object_t *v45;
  std::string block;
  unint64_t v47;
  NSObject *v48;
  dispatch_object_t **v49;

  v10 = *(_DWORD *)(a1 + 432);
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v11 = -1;
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0 && (gBBULogVerbosity & 0x80000000) == 0)
  {
    _BBULog(21, 0, "allowRetry", "", "Retry limits are src.retryLimit:%u  evt.retryLimit:%u src.retryCounter:%u\n", a6, a7, a8, *(_DWORD *)(a1 + 432));
    v11 = gBBULogMaskGet(void)::once;
  }
  v12 = *(_DWORD *)(a4 + 28);
  v13 = *(_DWORD *)(a1 + 432);
  if (v13 >= v12)
    v13 = *(_DWORD *)(a4 + 28);
  if (v12)
    v14 = v13;
  else
    v14 = v10;
  v15 = *(_DWORD *)(a1 + 428) + 1;
  *(_DWORD *)(a1 + 428) = v15;
  if (v11 == -1)
  {
    v16 = *(_QWORD *)gBBULogMaskGet(void)::sBBULogMask;
    v17 = gBBULogVerbosity;
    if (v15 > v14)
      goto LABEL_13;
LABEL_23:
    if ((v16 & 0x200000) != 0 && (v17 & 0x80000000) == 0)
      _BBULog(21, 0, "allowRetry", "", "Clearing error states since we are retrying.\n", a6, a7, a8, v43);
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    v21 = qword_253D31DC8;
    if (!qword_253D31DC8)
    {
      v22 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
      object[0] = 0;
      ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v22, "BBUError", QOS_CLASS_UTILITY, object);
      if (object[0])
        dispatch_release(object[0]);
      v22->__on_zero_shared_weak = 0;
      v22[1].~__shared_weak_count = 0;
      v22[1].~__shared_weak_count_0 = 0;
      std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&block, v22);
      v23 = *(_OWORD *)&block.__r_.__value_.__l.__data_;
      *(_OWORD *)&block.__r_.__value_.__l.__data_ = 0uLL;
      v24 = (std::__shared_weak_count *)off_253D31DD0;
      *(_OWORD *)&qword_253D31DC8 = v23;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      size = (std::__shared_weak_count *)block.__r_.__value_.__l.__size_;
      if (block.__r_.__value_.__l.__size_)
      {
        v28 = (unint64_t *)(block.__r_.__value_.__l.__size_ + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v21 = qword_253D31DC8;
    }
    v30 = (std::__shared_weak_count *)off_253D31DD0;
    if (off_253D31DD0)
    {
      v31 = (unint64_t *)((char *)off_253D31DD0 + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    object[0] = (dispatch_object_t)MEMORY[0x24BDAC760];
    object[1] = (dispatch_object_t)0x40000000;
    object[2] = (dispatch_object_t)___ZN8BBUError11clearErrorsEv_block_invoke;
    object[3] = (dispatch_object_t)&__block_descriptor_tmp_7;
    object[4] = v21;
    v45 = object;
    block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
    block.__r_.__value_.__l.__size_ = 0x40000000;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    v47 = (unint64_t)&__block_descriptor_tmp_10;
    v48 = v21;
    v49 = &v45;
    isa = v21[2].isa;
    if (v21[3].isa)
    {
      dispatch_async_and_wait(isa, &block);
      if (!v30)
        goto LABEL_51;
    }
    else
    {
      dispatch_sync(isa, &block);
      if (!v30)
        goto LABEL_51;
    }
    v41 = (unint64_t *)&v30->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
LABEL_51:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
        goto LABEL_53;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
      {
LABEL_53:
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(21, 0, "allowRetry", "", "attempting %u out of %u\n", v38, v39, v40, *(_DWORD *)(a1 + 428));
      }
    }
    BBUpdaterController::checkManifest(*(BBUpdaterController **)(a1 + 16), v34, v35, v36, v37, v38, v39, v40);
    return 1;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v16 = *(_QWORD *)gBBULogMaskGet(void)::sBBULogMask;
  v17 = gBBULogVerbosity;
  if (v15 <= v14)
    goto LABEL_23;
LABEL_13:
  if ((v16 & 2) != 0 && (v17 & 0x80000000) == 0)
    _BBULog(1, 0, "allowRetry", "", "too many retries: %u\n", a6, a7, a8, v14);
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_DWORD *)(a4 + 24);
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&block, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    block = *(std::string *)a4;
  v47 = v19;
  BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(v18, (uint64_t)&block);
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
    operator delete(block.__r_.__value_.__l.__data_);
  return 2;
}

void sub_212A77874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  if (object)
    dispatch_release(object);
  operator delete(v24);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,BBUpdaterControllerFSM::eventRetry,boost::msm::front::none,BBUpdaterControllerFSM::ControllerFSM_TOP::bootup<true>,BBUpdaterControllerFSM::ControllerFSM_TOP::allowRetry>>::execute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  NSObject *v21;
  std::__shared_weak_count_vtbl *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *isa;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  char v39;
  dispatch_object_t object[5];
  dispatch_object_t *v41;
  std::string block;
  unint64_t v43;
  NSObject *v44;
  dispatch_object_t **v45;

  v10 = *(_DWORD *)(a1 + 444);
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v11 = -1;
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0 && (gBBULogVerbosity & 0x80000000) == 0)
  {
    _BBULog(21, 0, "allowRetry", "", "Retry limits are src.retryLimit:%u  evt.retryLimit:%u src.retryCounter:%u\n", a6, a7, a8, *(_DWORD *)(a1 + 444));
    v11 = gBBULogMaskGet(void)::once;
  }
  v12 = *(_DWORD *)(a4 + 28);
  v13 = *(_DWORD *)(a1 + 444);
  if (v13 >= v12)
    v13 = *(_DWORD *)(a4 + 28);
  if (v12)
    v14 = v13;
  else
    v14 = v10;
  v15 = *(_DWORD *)(a1 + 440) + 1;
  *(_DWORD *)(a1 + 440) = v15;
  if (v11 == -1)
  {
    v16 = *(_QWORD *)gBBULogMaskGet(void)::sBBULogMask;
    v17 = gBBULogVerbosity;
    if (v15 > v14)
      goto LABEL_13;
LABEL_23:
    if ((v16 & 0x200000) != 0 && (v17 & 0x80000000) == 0)
      _BBULog(21, 0, "allowRetry", "", "Clearing error states since we are retrying.\n", a6, a7, a8, v39);
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    v21 = qword_253D31DC8;
    if (!qword_253D31DC8)
    {
      v22 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
      object[0] = 0;
      ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v22, "BBUError", QOS_CLASS_UTILITY, object);
      if (object[0])
        dispatch_release(object[0]);
      v22->__on_zero_shared_weak = 0;
      v22[1].~__shared_weak_count = 0;
      v22[1].~__shared_weak_count_0 = 0;
      std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&block, v22);
      v23 = *(_OWORD *)&block.__r_.__value_.__l.__data_;
      *(_OWORD *)&block.__r_.__value_.__l.__data_ = 0uLL;
      v24 = (std::__shared_weak_count *)off_253D31DD0;
      *(_OWORD *)&qword_253D31DC8 = v23;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      size = (std::__shared_weak_count *)block.__r_.__value_.__l.__size_;
      if (block.__r_.__value_.__l.__size_)
      {
        v28 = (unint64_t *)(block.__r_.__value_.__l.__size_ + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v21 = qword_253D31DC8;
    }
    v30 = (std::__shared_weak_count *)off_253D31DD0;
    if (off_253D31DD0)
    {
      v31 = (unint64_t *)((char *)off_253D31DD0 + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    object[0] = (dispatch_object_t)MEMORY[0x24BDAC760];
    object[1] = (dispatch_object_t)0x40000000;
    object[2] = (dispatch_object_t)___ZN8BBUError11clearErrorsEv_block_invoke;
    object[3] = (dispatch_object_t)&__block_descriptor_tmp_7;
    object[4] = v21;
    v41 = object;
    block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
    block.__r_.__value_.__l.__size_ = 0x40000000;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    v43 = (unint64_t)&__block_descriptor_tmp_10;
    v44 = v21;
    v45 = &v41;
    isa = v21[2].isa;
    if (v21[3].isa)
    {
      dispatch_async_and_wait(isa, &block);
      if (!v30)
        goto LABEL_51;
    }
    else
    {
      dispatch_sync(isa, &block);
      if (!v30)
        goto LABEL_51;
    }
    v37 = (unint64_t *)&v30->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
LABEL_51:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
        goto LABEL_53;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
      {
LABEL_53:
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(21, 0, "allowRetry", "", "attempting %u out of %u\n", v34, v35, v36, *(_DWORD *)(a1 + 440));
      }
    }
    BBUpdaterController::bootup(*(BBUpdaterController **)(a1 + 16));
    return 1;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v16 = *(_QWORD *)gBBULogMaskGet(void)::sBBULogMask;
  v17 = gBBULogVerbosity;
  if (v15 <= v14)
    goto LABEL_23;
LABEL_13:
  if ((v16 & 2) != 0 && (v17 & 0x80000000) == 0)
    _BBULog(1, 0, "allowRetry", "", "too many retries: %u\n", a6, a7, a8, v14);
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_DWORD *)(a4 + 24);
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&block, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    block = *(std::string *)a4;
  v43 = v19;
  BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(v18, (uint64_t)&block);
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
    operator delete(block.__r_.__value_.__l.__data_);
  return 2;
}

void sub_212A77CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  if (object)
    dispatch_release(object);
  operator delete(v24);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventContinue>(uint64_t a1, uint64_t a2, char a3)
{
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  int v9;
  char v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void (*v18)(_QWORD *, _QWORD *, uint64_t);
  int v20;
  unint64_t v21;
  _QWORD v22[3];

  qword_253D368C8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::TerminateFlag>::flag_false;
  unk_253D368D0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::TerminateFlag>::flag_true;
  qword_253D368B8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::TerminateFlag>::flag_false;
  unk_253D368C0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::TerminateFlag>::flag_false;
  qword_253D368A8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::TerminateFlag>::flag_false;
  unk_253D368B0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36898 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::TerminateFlag>::flag_false;
  unk_253D368A0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36888[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::TerminateFlag>::flag_false;
  unk_253D36890 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::TerminateFlag>::flag_false;
  v5 = ((uint64_t (*)(void))qword_253D36888[*(int *)(a1 + 32)])();
  v6 = ((uint64_t (*)(uint64_t))qword_253D36888[*(int *)(a1 + 36)])(a1);
  v7 = 1;
  if ((v5 & 1) == 0 && (v6 & 1) == 0)
  {
    qword_253D36918 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36920 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D36908 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36910 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368F8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36900 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368E8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368F0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368D8[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368E0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::InterruptedFlag>::flag_false;
    v8 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 32)])(a1);
    v9 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 36)])(a1);
    if ((v8 & 1) != 0 || v9)
    {
      qword_253D36A58 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false;
      unk_253D36A60 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false;
      qword_253D36A48 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false;
      unk_253D36A50 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false;
      qword_253D36A38 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false;
      unk_253D36A40 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false;
      qword_253D36A28 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false;
      unk_253D36A30 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false;
      qword_253D36A18[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false;
      unk_253D36A20 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false;
      v10 = ((uint64_t (*)(uint64_t))qword_253D36A18[*(int *)(a1 + 32)])(a1);
      v11 = ((uint64_t (*)(uint64_t))qword_253D36A18[*(int *)(a1 + 36)])(a1);
      if ((v10 & 1) == 0 && !v11)
        return 1;
    }
    if (*(_BYTE *)(a1 + 100))
    {
      v12 = operator new(0x20uLL);
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(a1 + 48);
      v15 = 16 * (v13 - v14) - 1;
      *v12 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventContinue>;
      v12[1] = 0;
      v12[2] = a1;
      *((_BYTE *)v12 + 25) = 5;
      v21 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventContinue const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventContinue>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventContinue const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventContinue>,boost::_bi::value<unsigned char>>>)::stored_vtable;
      v22[0] = v12;
      if (v13 == v14)
        v15 = 0;
      v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      if (v15 == v16)
      {
        std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 40));
        v14 = *(_QWORD *)(a1 + 48);
        v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      }
      v17 = (_QWORD *)(*(_QWORD *)(v14 + ((v16 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v16 & 0x7F));
      *v17 = 0;
      boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v17, (uint64_t *)&v21);
      ++*(_QWORD *)(a1 + 80);
      if (v21)
      {
        if ((v21 & 1) == 0)
        {
          v18 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v21 & 0xFFFFFFFFFFFFFFFELL);
          if (v18)
            v18(v22, v22, 2);
        }
      }
      return 1;
    }
    *(_BYTE *)(a1 + 100) = 1;
    v20 = (*((uint64_t (**)(uint64_t, _QWORD))&unk_253D36E90 + *(_DWORD *)(a1 + 32) + 1))(a1, 0);
    v7 = (*((unsigned int (**)(uint64_t, uint64_t))&unk_253D36E90 + *(_DWORD *)(a1 + 36) + 1))(a1, 1) | v20;
    if ((!*(_BYTE *)(a1 + 101) || (a3 & 1) != 0) && !(_DWORD)v7)
    {
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventContinue>(a1, a1, *(_DWORD *)(a1 + 32));
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventContinue>(a1, a1, *(_DWORD *)(a1 + 36));
    }
    *(_BYTE *)(a1 + 100) = 0;
    if ((a3 & 6) == 0)
      boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  }
  return v7;
}

void sub_212A780A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventContinue>>::flag_false()
{
  return 0;
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventContinue const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventContinue>,boost::_bi::value<unsigned char>>>>::manage(_OWORD **a1, uint64_t a2, int a3)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  const char *v8;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = operator new(0x20uLL);
      v7 = v5[1];
      *v6 = *v5;
      v6[1] = v7;
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      if (*(_QWORD *)a2)
        operator delete(*(void **)a2);
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x8000000212B51618 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x8000000212B51618 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_WORD *)(a2 + 8) = 0;
      break;
  }
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventContinue const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventContinue>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[25];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventContinue>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B515EELL & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B515EELL & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A78898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventContinue>()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,BBUpdaterControllerFSM::eventContinue,BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::front::none,boost::msm::front::none>>::execute(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = a1 + 4 * a2;
  *(_DWORD *)(a1 + 136) = 0;
  *(_DWORD *)(v2 + 32) = 6;
  ++*(_DWORD *)(a1 + 452);
  *(_DWORD *)(v2 + 32) = 0;
  return 1;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,BBUpdaterControllerFSM::eventContinue,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::front::none,boost::msm::front::none>>::execute(uint64_t a1, int a2)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;
  _DWORD *v5;

  v2 = a1 + 4 * a2;
  *(_DWORD *)(a1 + 268) = 0;
  *(_DWORD *)(v2 + 32) = 4;
  v3 = (_DWORD *)(v2 + 32);
  v4 = *(_DWORD *)(a1 + 364);
  *(_DWORD *)(a1 + 304) = v4;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  switch(v4)
  {
    case 0:
      v5 = (_DWORD *)(a1 + 412);
      goto LABEL_6;
    case 1:
      v5 = (_DWORD *)(a1 + 400);
      goto LABEL_6;
    case 2:
      v5 = (_DWORD *)(a1 + 388);
      goto LABEL_6;
    case 3:
      v5 = (_DWORD *)(a1 + 376);
LABEL_6:
      ++*v5;
      break;
    default:
      break;
  }
  *(_BYTE *)(a1 + 368) = 0;
  boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1 + 280);
  *v3 = 3;
  return 1;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,BBUpdaterControllerFSM::eventContinue,BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::front::none,boost::msm::front::none>>::execute(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = a1 + 4 * a2;
  *(_DWORD *)(a1 + 428) = 0;
  *(_DWORD *)(v2 + 32) = 2;
  ++*(_DWORD *)(a1 + 452);
  *(_DWORD *)(v2 + 32) = 0;
  return 1;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,BBUpdaterControllerFSM::eventContinue,BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::front::none,boost::msm::front::none>>::execute(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = a1 + 4 * a2;
  *(_DWORD *)(a1 + 440) = 0;
  *(_DWORD *)(v2 + 32) = 1;
  ++*(_DWORD *)(a1 + 452);
  *(_DWORD *)(v2 + 32) = 0;
  return 1;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventRepersonalize>(uint64_t a1, uint64_t a2, char a3)
{
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  int v9;
  char v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void (*v18)(_QWORD *, _QWORD *, uint64_t);
  int v20;
  unint64_t v21;
  _QWORD v22[3];

  qword_253D368C8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::TerminateFlag>::flag_false;
  unk_253D368D0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::TerminateFlag>::flag_true;
  qword_253D368B8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::TerminateFlag>::flag_false;
  unk_253D368C0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::TerminateFlag>::flag_false;
  qword_253D368A8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::TerminateFlag>::flag_false;
  unk_253D368B0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36898 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::TerminateFlag>::flag_false;
  unk_253D368A0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36888[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::TerminateFlag>::flag_false;
  unk_253D36890 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::TerminateFlag>::flag_false;
  v5 = ((uint64_t (*)(void))qword_253D36888[*(int *)(a1 + 32)])();
  v6 = ((uint64_t (*)(uint64_t))qword_253D36888[*(int *)(a1 + 36)])(a1);
  v7 = 1;
  if ((v5 & 1) == 0 && (v6 & 1) == 0)
  {
    qword_253D36918 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36920 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D36908 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36910 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368F8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36900 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368E8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368F0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368D8[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368E0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::InterruptedFlag>::flag_false;
    v8 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 32)])(a1);
    v9 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 36)])(a1);
    if ((v8 & 1) != 0 || v9)
    {
      qword_253D36AA8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false;
      unk_253D36AB0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false;
      qword_253D36A98 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false;
      unk_253D36AA0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false;
      qword_253D36A88 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false;
      unk_253D36A90 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false;
      qword_253D36A78 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false;
      unk_253D36A80 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false;
      qword_253D36A68[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false;
      unk_253D36A70 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false;
      v10 = ((uint64_t (*)(uint64_t))qword_253D36A68[*(int *)(a1 + 32)])(a1);
      v11 = ((uint64_t (*)(uint64_t))qword_253D36A68[*(int *)(a1 + 36)])(a1);
      if ((v10 & 1) == 0 && !v11)
        return 1;
    }
    if (*(_BYTE *)(a1 + 100))
    {
      v12 = operator new(0x20uLL);
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(a1 + 48);
      v15 = 16 * (v13 - v14) - 1;
      *v12 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventRepersonalize>;
      v12[1] = 0;
      v12[2] = a1;
      *((_BYTE *)v12 + 25) = 5;
      v21 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRepersonalize const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventRepersonalize>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRepersonalize const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventRepersonalize>,boost::_bi::value<unsigned char>>>)::stored_vtable;
      v22[0] = v12;
      if (v13 == v14)
        v15 = 0;
      v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      if (v15 == v16)
      {
        std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 40));
        v14 = *(_QWORD *)(a1 + 48);
        v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      }
      v17 = (_QWORD *)(*(_QWORD *)(v14 + ((v16 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v16 & 0x7F));
      *v17 = 0;
      boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v17, (uint64_t *)&v21);
      ++*(_QWORD *)(a1 + 80);
      if (v21)
      {
        if ((v21 & 1) == 0)
        {
          v18 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v21 & 0xFFFFFFFFFFFFFFFELL);
          if (v18)
            v18(v22, v22, 2);
        }
      }
      return 1;
    }
    *(_BYTE *)(a1 + 100) = 1;
    v20 = (*((uint64_t (**)(uint64_t, _QWORD))&unk_253D36EE8 + *(_DWORD *)(a1 + 32) + 1))(a1, 0);
    v7 = (*((unsigned int (**)(uint64_t, uint64_t))&unk_253D36EE8 + *(_DWORD *)(a1 + 36) + 1))(a1, 1) | v20;
    if ((!*(_BYTE *)(a1 + 101) || (a3 & 1) != 0) && !(_DWORD)v7)
    {
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRepersonalize>(a1, a1, *(_DWORD *)(a1 + 32));
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRepersonalize>(a1, a1, *(_DWORD *)(a1 + 36));
    }
    *(_BYTE *)(a1 + 100) = 0;
    if ((a3 & 6) == 0)
      boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  }
  return v7;
}

void sub_212A78E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventRepersonalize>>::flag_false()
{
  return 0;
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRepersonalize const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventRepersonalize>,boost::_bi::value<unsigned char>>>>::manage(_OWORD **a1, uint64_t a2, int a3)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  const char *v8;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = operator new(0x20uLL);
      v7 = v5[1];
      *v6 = *v5;
      v6[1] = v7;
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      if (*(_QWORD *)a2)
        operator delete(*(void **)a2);
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x8000000212B51730 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x8000000212B51730 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_WORD *)(a2 + 8) = 0;
      break;
  }
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRepersonalize const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventRepersonalize>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[25];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRepersonalize>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B51701 & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B51701 & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A79660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventRepersonalize>()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,BBUpdaterControllerFSM::eventRepersonalize,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::queryAction<(BBUStage)2>,BBUpdaterControllerFSM::ControllerFSM_TOP::allowRePerso>>::execute(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  uint64_t v15;
  _DWORD *v16;
  BBUpdaterController *v17;
  BBUEUR10UpdateSource *FirmwareDataSource;
  BBUFeedback *v19;
  int v20;
  _DWORD *v21;
  std::string v22;
  uint64_t v23;

  v9 = *(_DWORD *)(a1 + 28);
  v10 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v10;
  if (v10 > v9)
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = (char *)operator new(0x20uLL);
    strcpy(v12, "too many repersonalizations");
    std::string::__init_copy_ctor_external(&v22, v12, 0x1BuLL);
    v23 = 43;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(v11, (uint64_t)&v22);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    operator delete(v12);
    return 2;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
      goto LABEL_7;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
    {
LABEL_7:
      if ((gBBULogVerbosity & 0x80000000) == 0)
        _BBULog(21, 0, "allowRePerso", "", "attempting %u out of %u\n", a6, a7, a8, *(_DWORD *)(a1 + 24));
    }
  }
  v15 = a1 + 4 * a2;
  *(_DWORD *)(a1 + 136) = 0;
  *(_DWORD *)(v15 + 32) = 6;
  v16 = (_DWORD *)(v15 + 32);
  v17 = *(BBUpdaterController **)(a1 + 16);
  FirmwareDataSource = BBUpdaterController::getFirmwareDataSource(v17, 0);
  BBUpdaterController::parsePreflightArgs(v17);
  BBUpdaterController::queryInfoFirstStageInternal((BBULoader **)v17, v19);
  if (FirmwareDataSource)
    (*(void (**)(BBUEUR10UpdateSource *))(*(_QWORD *)FirmwareDataSource + 16))(FirmwareDataSource);
  *v16 = 6;
  v20 = *(_DWORD *)(a1 + 364);
  *(_DWORD *)(a1 + 304) = v20;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  switch(v20)
  {
    case 0:
      v21 = (_DWORD *)(a1 + 412);
      goto LABEL_16;
    case 1:
      v21 = (_DWORD *)(a1 + 400);
      goto LABEL_16;
    case 2:
      v21 = (_DWORD *)(a1 + 388);
      goto LABEL_16;
    case 3:
      v21 = (_DWORD *)(a1 + 376);
LABEL_16:
      ++*v21;
      break;
    default:
      break;
  }
  *(_BYTE *)(a1 + 368) = 0;
  boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1 + 280);
  *v16 = 3;
  return 1;
}

void sub_212A799B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  if (a16 < 0)
  {
    operator delete(__p);
    operator delete(v16);
    _Unwind_Resume(a1);
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_212A799F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

void BBUProvisioningParameters::~BBUProvisioningParameters(BBUProvisioningParameters *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    operator delete((void *)v3);
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    operator delete((void *)v4);
  }
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    operator delete((void *)v5);
  }
  v6 = (void **)*((_QWORD *)this + 4);
  if (v6)
  {
    if (*v6)
      operator delete(*v6);
    operator delete(v6);
  }
  v7 = *((_QWORD *)this + 5);
  if (v7)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    operator delete((void *)v7);
  }
  v8 = *((_QWORD *)this + 6);
  if (v8)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    operator delete((void *)v8);
  }
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventFinalize>(uint64_t a1, uint64_t a2, char a3)
{
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  int v9;
  char v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void (*v18)(_QWORD *, _QWORD *, uint64_t);
  int v20;
  unint64_t v21;
  _QWORD v22[3];

  qword_253D368C8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::TerminateFlag>::flag_false;
  unk_253D368D0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::TerminateFlag>::flag_true;
  qword_253D368B8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::TerminateFlag>::flag_false;
  unk_253D368C0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::TerminateFlag>::flag_false;
  qword_253D368A8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::TerminateFlag>::flag_false;
  unk_253D368B0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36898 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::TerminateFlag>::flag_false;
  unk_253D368A0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36888[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::TerminateFlag>::flag_false;
  unk_253D36890 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::TerminateFlag>::flag_false;
  v5 = ((uint64_t (*)(void))qword_253D36888[*(int *)(a1 + 32)])();
  v6 = ((uint64_t (*)(uint64_t))qword_253D36888[*(int *)(a1 + 36)])(a1);
  v7 = 1;
  if ((v5 & 1) == 0 && (v6 & 1) == 0)
  {
    qword_253D36918 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36920 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D36908 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36910 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368F8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36900 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368E8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368F0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368D8[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368E0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::InterruptedFlag>::flag_false;
    v8 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 32)])(a1);
    v9 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 36)])(a1);
    if ((v8 & 1) != 0 || v9)
    {
      qword_253D36AF8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false;
      unk_253D36B00 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false;
      qword_253D36AE8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false;
      unk_253D36AF0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false;
      qword_253D36AD8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false;
      unk_253D36AE0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false;
      qword_253D36AC8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false;
      unk_253D36AD0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false;
      qword_253D36AB8[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false;
      unk_253D36AC0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false;
      v10 = ((uint64_t (*)(uint64_t))qword_253D36AB8[*(int *)(a1 + 32)])(a1);
      v11 = ((uint64_t (*)(uint64_t))qword_253D36AB8[*(int *)(a1 + 36)])(a1);
      if ((v10 & 1) == 0 && !v11)
        return 1;
    }
    if (*(_BYTE *)(a1 + 100))
    {
      v12 = operator new(0x20uLL);
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(a1 + 48);
      v15 = 16 * (v13 - v14) - 1;
      *v12 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventFinalize>;
      v12[1] = 0;
      v12[2] = a1;
      *((_BYTE *)v12 + 25) = 5;
      v21 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFinalize const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventFinalize>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFinalize const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventFinalize>,boost::_bi::value<unsigned char>>>)::stored_vtable;
      v22[0] = v12;
      if (v13 == v14)
        v15 = 0;
      v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      if (v15 == v16)
      {
        std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 40));
        v14 = *(_QWORD *)(a1 + 48);
        v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      }
      v17 = (_QWORD *)(*(_QWORD *)(v14 + ((v16 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v16 & 0x7F));
      *v17 = 0;
      boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v17, (uint64_t *)&v21);
      ++*(_QWORD *)(a1 + 80);
      if (v21)
      {
        if ((v21 & 1) == 0)
        {
          v18 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v21 & 0xFFFFFFFFFFFFFFFELL);
          if (v18)
            v18(v22, v22, 2);
        }
      }
      return 1;
    }
    *(_BYTE *)(a1 + 100) = 1;
    v20 = (*((uint64_t (**)(uint64_t, _QWORD))&unk_253D36F40 + *(_DWORD *)(a1 + 32) + 1))(a1, 0);
    v7 = (*((unsigned int (**)(uint64_t, uint64_t))&unk_253D36F40 + *(_DWORD *)(a1 + 36) + 1))(a1, 1) | v20;
    if ((!*(_BYTE *)(a1 + 101) || (a3 & 1) != 0) && !(_DWORD)v7)
    {
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFinalize>(a1, a1, *(_DWORD *)(a1 + 32));
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFinalize>(a1, a1, *(_DWORD *)(a1 + 36));
    }
    *(_BYTE *)(a1 + 100) = 0;
    if ((a3 & 6) == 0)
      boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  }
  return v7;
}

void sub_212A79E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFinalize>>::flag_false()
{
  return 0;
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFinalize const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventFinalize>,boost::_bi::value<unsigned char>>>>::manage(_OWORD **a1, uint64_t a2, int a3)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  const char *v8;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = operator new(0x20uLL);
      v7 = v5[1];
      *v6 = *v5;
      v6[1] = v7;
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      if (*(_QWORD *)a2)
        operator delete(*(void **)a2);
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x8000000212B51848 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x8000000212B51848 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_WORD *)(a2 + 8) = 0;
      break;
  }
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFinalize const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventFinalize>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[25];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFinalize>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B5181ELL & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B5181ELL & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A7A688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventFinalize>()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFinalize,BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,BBUpdaterControllerFSM::ControllerFSM_TOP::finalize,boost::msm::front::none>>::execute(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  int v5;
  _DWORD *v6;

  v3 = a1 + 4 * a2;
  *(_DWORD *)(v3 + 32) = 5;
  v4 = (_DWORD *)(v3 + 32);
  v5 = *(_DWORD *)(a1 + 168);
  if (!v5)
  {
    v6 = (_DWORD *)(a1 + 252);
    goto LABEL_5;
  }
  if (v5 == 1)
  {
    v6 = (_DWORD *)(a1 + 240);
LABEL_5:
    *v6 = 0;
  }
  *v4 = 5;
  BBUpdaterController::finalize(*(BBUpdaterController **)(a1 + 16));
  *v4 = 5;
  ++*(_DWORD *)(a1 + 136);
  *v4 = 6;
  return 1;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFinalize,BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,BBUpdaterControllerFSM::ControllerFSM_TOP::finalize,boost::msm::front::none>>::execute(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;

  v3 = a1 + 4 * a2;
  *(_DWORD *)(v3 + 32) = 3;
  v4 = (_DWORD *)(v3 + 32);
  switch(*(_DWORD *)(a1 + 304))
  {
    case 0:
      v5 = (_DWORD *)(a1 + 412);
      goto LABEL_6;
    case 1:
      v5 = (_DWORD *)(a1 + 400);
      goto LABEL_6;
    case 2:
      v5 = (_DWORD *)(a1 + 388);
      goto LABEL_6;
    case 3:
      v5 = (_DWORD *)(a1 + 376);
LABEL_6:
      *v5 = 0;
      break;
    default:
      break;
  }
  *v4 = 3;
  BBUpdaterController::finalize(*(BBUpdaterController **)(a1 + 16));
  *v4 = 3;
  ++*(_DWORD *)(a1 + 136);
  *v4 = 6;
  return 1;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdQueryInfo>(uint64_t a1, uint64_t a2, char a3)
{
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  int v9;
  char v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void (*v18)(_QWORD *, _QWORD *, uint64_t);
  int v20;
  unint64_t v21;
  _QWORD v22[3];

  qword_253D368C8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::TerminateFlag>::flag_false;
  unk_253D368D0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::TerminateFlag>::flag_true;
  qword_253D368B8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::TerminateFlag>::flag_false;
  unk_253D368C0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::TerminateFlag>::flag_false;
  qword_253D368A8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::TerminateFlag>::flag_false;
  unk_253D368B0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36898 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::TerminateFlag>::flag_false;
  unk_253D368A0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36888[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::TerminateFlag>::flag_false;
  unk_253D36890 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::TerminateFlag>::flag_false;
  v5 = ((uint64_t (*)(void))qword_253D36888[*(int *)(a1 + 32)])();
  v6 = ((uint64_t (*)(uint64_t))qword_253D36888[*(int *)(a1 + 36)])(a1);
  v7 = 1;
  if ((v5 & 1) == 0 && (v6 & 1) == 0)
  {
    qword_253D36918 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36920 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D36908 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36910 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368F8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36900 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368E8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368F0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368D8[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368E0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::InterruptedFlag>::flag_false;
    v8 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 32)])(a1);
    v9 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 36)])(a1);
    if ((v8 & 1) != 0 || v9)
    {
      qword_253D36B48 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false;
      unk_253D36B50 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false;
      qword_253D36B38 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false;
      unk_253D36B40 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false;
      qword_253D36B28 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false;
      unk_253D36B30 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false;
      qword_253D36B18 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false;
      unk_253D36B20 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false;
      qword_253D36B08[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false;
      unk_253D36B10 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false;
      v10 = ((uint64_t (*)(uint64_t))qword_253D36B08[*(int *)(a1 + 32)])(a1);
      v11 = ((uint64_t (*)(uint64_t))qword_253D36B08[*(int *)(a1 + 36)])(a1);
      if ((v10 & 1) == 0 && !v11)
        return 1;
    }
    if (*(_BYTE *)(a1 + 100))
    {
      v12 = operator new(0x20uLL);
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(a1 + 48);
      v15 = 16 * (v13 - v14) - 1;
      *v12 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdQueryInfo>;
      v12[1] = 0;
      v12[2] = a1;
      *((_BYTE *)v12 + 25) = 5;
      v21 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdQueryInfo>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdQueryInfo>,boost::_bi::value<unsigned char>>>)::stored_vtable;
      v22[0] = v12;
      if (v13 == v14)
        v15 = 0;
      v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      if (v15 == v16)
      {
        std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 40));
        v14 = *(_QWORD *)(a1 + 48);
        v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      }
      v17 = (_QWORD *)(*(_QWORD *)(v14 + ((v16 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v16 & 0x7F));
      *v17 = 0;
      boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v17, (uint64_t *)&v21);
      ++*(_QWORD *)(a1 + 80);
      if (v21)
      {
        if ((v21 & 1) == 0)
        {
          v18 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v21 & 0xFFFFFFFFFFFFFFFELL);
          if (v18)
            v18(v22, v22, 2);
        }
      }
      return 1;
    }
    *(_BYTE *)(a1 + 100) = 1;
    v20 = (*((uint64_t (**)(uint64_t, _QWORD))&unk_253D36F98 + *(_DWORD *)(a1 + 32) + 1))(a1, 0);
    v7 = (*((unsigned int (**)(uint64_t, uint64_t))&unk_253D36F98 + *(_DWORD *)(a1 + 36) + 1))(a1, 1) | v20;
    if ((!*(_BYTE *)(a1 + 101) || (a3 & 1) != 0) && !(_DWORD)v7)
    {
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo>(a1, a1, *(_DWORD *)(a1 + 32));
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo>(a1, a1, *(_DWORD *)(a1 + 36));
    }
    *(_BYTE *)(a1 + 100) = 0;
    if ((a3 & 6) == 0)
      boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  }
  return v7;
}

void sub_212A7AC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdQueryInfo>>::flag_false()
{
  return 0;
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdQueryInfo>,boost::_bi::value<unsigned char>>>>::manage(_OWORD **a1, uint64_t a2, int a3)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  const char *v8;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = operator new(0x20uLL);
      v7 = v5[1];
      *v6 = *v5;
      v6[1] = v7;
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      if (*(_QWORD *)a2)
        operator delete(*(void **)a2);
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x8000000212B5195FLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x8000000212B5195FLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_WORD *)(a2 + 8) = 0;
      break;
  }
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdQueryInfo>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[25];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B51931 & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B51931 & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A7B448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdQueryInfo>()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeEUICC,BBUpdaterControllerFSM::eventCmdQueryInfo,boost::msm::front::none,BBUpdaterControllerFSM::queryAction<(BBUStage)32>,boost::msm::front::none>>::execute(uint64_t a1)
{
  BBUpdaterController::query(*(_QWORD **)(a1 + 16), 32);
  return 1;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeSecond,BBUpdaterControllerFSM::eventCmdQueryInfo,boost::msm::front::none,BBUpdaterControllerFSM::queryAction<(BBUStage)4>,boost::msm::front::none>>::execute(uint64_t a1)
{
  BBUpdaterController::query(*(_QWORD **)(a1 + 16), 4);
  return 1;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeFirst,BBUpdaterControllerFSM::eventCmdQueryInfo,boost::msm::front::none,BBUpdaterControllerFSM::queryAction<(BBUStage)2>,boost::msm::front::none>>::execute(uint64_t a1)
{
  BBUpdaterController *v1;
  BBUEUR10UpdateSource *FirmwareDataSource;
  BBUFeedback *v3;

  v1 = *(BBUpdaterController **)(a1 + 16);
  FirmwareDataSource = BBUpdaterController::getFirmwareDataSource(v1, 0);
  BBUpdaterController::parsePreflightArgs(v1);
  BBUpdaterController::queryInfoFirstStageInternal((BBULoader **)v1, v3);
  if (FirmwareDataSource)
    (*(void (**)(BBUEUR10UpdateSource *))(*(_QWORD *)FirmwareDataSource + 16))(FirmwareDataSource);
  return 1;
}

void sub_212A7B618(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::_irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_::stateProvisionFinish,BBUpdaterControllerFSM::eventCmdQueryInfo,boost::msm::front::none,boost::msm::front::none,boost::msm::front::none>>::execute()
{
  return 1;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_::stateProvisionStart,BBUpdaterControllerFSM::eventCmdQueryInfo,boost::msm::front::none,BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_::gatherParam,boost::msm::front::none>>::execute(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  char *v13;
  std::string v14;
  int v15;
  int v16;
  _OWORD *v17;
  char v18;

  v1 = *(_QWORD *)(a1 + 16);
  v18 = -86;
  v2 = operator new(0x38uLL);
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  *((_QWORD *)v2 + 6) = 0;
  v17 = v2;
  BBUFeedback::handleComment(*(BBUFeedback **)(v1 + 56), "Getting manifest status for provisioning");
  v6 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, char *, uint64_t, uint64_t))(**(_QWORD **)(v1 + 72) + 96))(*(_QWORD *)(v1 + 72), v1 + 152, *(_QWORD *)(v1 + 96), &v18, v1 + 240, 1);
  if (!v6)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(v1 + 56), "Gathering provisioning parameters from BB");
    v10 = (*(uint64_t (**)(_QWORD, uint64_t, _OWORD *))(**(_QWORD **)(v1 + 72) + 88))(*(_QWORD *)(v1 + 72), v1 + 152, v2);
    if (!v10)
    {
      BBUpdaterController::updateProvisioningInfo(v1, (uint64_t)&v17);
      goto LABEL_4;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_12;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_12:
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v7, v8, v9, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      }
    }
    v13 = (char *)operator new(0x30uLL);
    strcpy(v13, "Failed to gather provisioning parameters");
    std::string::__init_copy_ctor_external(&v14, v13, 0x28uLL);
    v15 = v10;
    v16 = 0;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(v1, (uint64_t)&v14);
    goto LABEL_15;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      goto LABEL_7;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
    {
LABEL_7:
      if (gBBULogVerbosity >= 6)
        _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v3, v4, v5, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
    }
  }
  v13 = (char *)operator new(0x20uLL);
  strcpy(v13, "Failed to get manifest status");
  std::string::__init_copy_ctor_external(&v14, v13, 0x1DuLL);
  v15 = v6;
  v16 = 0;
  BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(v1, (uint64_t)&v14);
LABEL_15:
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  operator delete(v13);
LABEL_4:
  BBUProvisioningParameters::~BBUProvisioningParameters((BBUProvisioningParameters *)v2);
  operator delete(v11);
  return 1;
}

void sub_212A7B908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  BBUProvisioningParameters *v18;
  void *v19;
  void *v21;

  if (a18 < 0)
    operator delete(__p);
  operator delete(v19);
  BBUProvisioningParameters::~BBUProvisioningParameters(v18);
  operator delete(v21);
  _Unwind_Resume(a1);
}

void sub_212A7B960(_Unwind_Exception *a1)
{
  BBUProvisioningParameters *v1;
  void *v3;

  BBUProvisioningParameters::~BBUProvisioningParameters(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_212A7B978(_Unwind_Exception *a1)
{
  BBUProvisioningParameters *v1;
  void *v3;

  BBUProvisioningParameters::~BBUProvisioningParameters(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdQueryInfo>()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::frow<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo>::execute(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v4 = a1 + 280;
  if (boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventCmdQueryInfo,BBUpdaterControllerFSM::eventCmdQueryInfo>(a1 + 280))
  {
    v5 = ((uint64_t (*)(uint64_t, _QWORD))_MergedGlobals_1[*(_DWORD *)(a1 + 304) + 43])(v4, 0);
    v6 = v5;
    if (*(_BYTE *)(a1 + 369))
      v7 = 0;
    else
      v7 = (_DWORD)v5 == 0;
    if (v7)
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo>(v4, v4, *(_DWORD *)(a1 + 304));
    *(_BYTE *)(a1 + 368) = 0;
    boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(v4);
  }
  else
  {
    v6 = 1;
  }
  *(_DWORD *)(a1 + 4 * a2 + 32) = 3;
  return v6;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdQueryInfo>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;

  if (!boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventCmdQueryInfo,BBUpdaterControllerFSM::eventCmdQueryInfo>())
    return 1;
  v5 = ((uint64_t (*)(uint64_t, _QWORD))_MergedGlobals_1[*(_DWORD *)(a1 + 24) + 43])(a1, 0);
  v6 = v5;
  if ((!*(_BYTE *)(a1 + 89) || (a3 & 1) != 0) && !(_DWORD)v5)
    BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo>(a1, a1, *(_DWORD *)(a1 + 24));
  *(_BYTE *)(a1 + 88) = 0;
  if ((a3 & 6) == 0)
    boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  return v6;
}

BOOL boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventCmdQueryInfo,BBUpdaterControllerFSM::eventCmdQueryInfo>(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  void (*v9)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v11;
  _QWORD v12[3];

  v2 = *(unsigned __int8 *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
  {
    v3 = operator new(0x20uLL);
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = 16 * (v4 - v5) - 1;
    *v3 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdQueryInfo>;
    v3[1] = 0;
    v3[2] = a1;
    *((_BYTE *)v3 + 25) = 5;
    v11 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdQueryInfo>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdQueryInfo>,boost::_bi::value<unsigned char>>>)::stored_vtable;
    v12[0] = v3;
    if (v4 == v5)
      v6 = 0;
    v7 = *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 64);
    if (v6 == v7)
    {
      std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 32));
      v5 = *(_QWORD *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 64);
    }
    v8 = (_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
    *v8 = 0;
    boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v8, (uint64_t *)&v11);
    ++*(_QWORD *)(a1 + 72);
    if (v11 && (v11 & 1) == 0)
    {
      v9 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 & 0xFFFFFFFFFFFFFFFELL);
      if (v9)
        v9(v12, v12, 2);
    }
    return v2 == 0;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    return v2 == 0;
  }
}

void sub_212A7BC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdQueryInfo>,boost::_bi::value<unsigned char>>>>::manage(_OWORD **a1, uint64_t a2, int a3)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  const char *v8;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = operator new(0x20uLL);
      v7 = v5[1];
      *v6 = *v5;
      v6[1] = v7;
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      if (*(_QWORD *)a2)
        operator delete(*(void **)a2);
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x8000000212B51A4CLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x8000000212B51A4CLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_WORD *)(a2 + 8) = 0;
      break;
  }
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdQueryInfo>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[25];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B51931 & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B51931 & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A7C3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::frow<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo>::execute(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v4 = a1 + 144;
  if (boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventCmdQueryInfo,BBUpdaterControllerFSM::eventCmdQueryInfo>(a1 + 144))
  {
    v5 = ((uint64_t (*)(uint64_t, _QWORD))_MergedGlobals_1[*(_DWORD *)(a1 + 168) + 27])(v4, 0);
    v6 = v5;
    if (*(_BYTE *)(a1 + 233))
      v7 = 0;
    else
      v7 = (_DWORD)v5 == 0;
    if (v7)
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo>(v4, v4, *(_DWORD *)(a1 + 168));
    *(_BYTE *)(a1 + 232) = 0;
    boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(v4);
  }
  else
  {
    v6 = 1;
  }
  *(_DWORD *)(a1 + 4 * a2 + 32) = 5;
  return v6;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdQueryInfo>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;

  if (!boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventCmdQueryInfo,BBUpdaterControllerFSM::eventCmdQueryInfo>())
    return 1;
  v5 = ((uint64_t (*)(uint64_t, _QWORD))_MergedGlobals_1[*(_DWORD *)(a1 + 24) + 27])(a1, 0);
  v6 = v5;
  if ((!*(_BYTE *)(a1 + 89) || (a3 & 1) != 0) && !(_DWORD)v5)
    BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo>(a1, a1, *(_DWORD *)(a1 + 24));
  *(_BYTE *)(a1 + 88) = 0;
  if ((a3 & 6) == 0)
    boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  return v6;
}

BOOL boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventCmdQueryInfo,BBUpdaterControllerFSM::eventCmdQueryInfo>(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  void (*v9)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v11;
  _QWORD v12[3];

  v2 = *(unsigned __int8 *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
  {
    v3 = operator new(0x20uLL);
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = 16 * (v4 - v5) - 1;
    *v3 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdQueryInfo>;
    v3[1] = 0;
    v3[2] = a1;
    *((_BYTE *)v3 + 25) = 5;
    v11 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdQueryInfo>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdQueryInfo>,boost::_bi::value<unsigned char>>>)::stored_vtable;
    v12[0] = v3;
    if (v4 == v5)
      v6 = 0;
    v7 = *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 64);
    if (v6 == v7)
    {
      std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 32));
      v5 = *(_QWORD *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 64);
    }
    v8 = (_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
    *v8 = 0;
    boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v8, (uint64_t *)&v11);
    ++*(_QWORD *)(a1 + 72);
    if (v11 && (v11 & 1) == 0)
    {
      v9 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 & 0xFFFFFFFFFFFFFFFELL);
      if (v9)
        v9(v12, v12, 2);
    }
    return v2 == 0;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    return v2 == 0;
  }
}

void sub_212A7C790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdQueryInfo>,boost::_bi::value<unsigned char>>>>::manage(_OWORD **a1, uint64_t a2, int a3)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  const char *v8;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = operator new(0x20uLL);
      v7 = v5[1];
      *v6 = *v5;
      v6[1] = v7;
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      if (*(_QWORD *)a2)
        operator delete(*(void **)a2);
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x8000000212B51B47 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x8000000212B51B47 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_WORD *)(a2 + 8) = 0;
      break;
  }
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdQueryInfo>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[25];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B51931 & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B51931 & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A7CF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(uint64_t result)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(_BYTE *, _BYTE *, uint64_t);
  __int128 v14;
  void (*v15)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  std::runtime_error v20;

  if (*(_QWORD *)(result + 72))
  {
    v1 = result;
    while (1)
    {
      *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)v19 = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v19[8] = v2;
      v3 = *(_QWORD *)(v1 + 40);
      v4 = *(_QWORD *)(v1 + 64);
      v5 = v4 >> 7;
      v6 = v4 & 0x7F;
      v7 = *(_QWORD *)(v3 + 8 * (v4 >> 7)) + 32 * v6;
      v18 = 0;
      v8 = *(_QWORD *)v7;
      if (!*(_QWORD *)v7)
        goto LABEL_7;
      v18 = *(_QWORD *)v7;
      if ((v8 & 1) == 0)
        break;
      v14 = *(_OWORD *)(v7 + 8);
      *(_QWORD *)&v19[16] = *(_QWORD *)(v7 + 24);
      *(_OWORD *)v19 = v14;
      v9 = (uint64_t *)(*(_QWORD *)(v3 + 8 * v5) + 32 * v6);
      v10 = *v9;
      if (*v9)
      {
LABEL_16:
        if ((v10 & 1) == 0)
        {
          v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 & 0xFFFFFFFFFFFFFFFELL);
          if (v15)
          {
            v15(v9 + 1, v9 + 1, 2);
            v4 = *(_QWORD *)(v1 + 64);
          }
        }
        *v9 = 0;
        v16 = *(_QWORD *)(v1 + 72) - 1;
        v17 = v4 + 1;
        *(_QWORD *)(v1 + 64) = v17;
        *(_QWORD *)(v1 + 72) = v16;
        if (v17 < 0x100)
          goto LABEL_10;
LABEL_9:
        operator delete(**(void ***)(v1 + 40));
        *(_QWORD *)(v1 + 40) += 8;
        *(_QWORD *)(v1 + 64) -= 128;
        goto LABEL_10;
      }
LABEL_8:
      v11 = *(_QWORD *)(v1 + 72) - 1;
      v12 = v4 + 1;
      *(_QWORD *)(v1 + 64) = v12;
      *(_QWORD *)(v1 + 72) = v11;
      if (v12 >= 0x100)
        goto LABEL_9;
LABEL_10:
      if (!v18)
      {
        std::runtime_error::runtime_error(&v20, "call to empty boost::function");
        v20.__vftable = (std::runtime_error_vtbl *)off_24CE7F280;
        boost::throw_exception<boost::bad_function_call>(&v20);
      }
      result = (*(uint64_t (**)(_BYTE *))((v18 & 0xFFFFFFFFFFFFFFFELL) + 8))(v19);
      if ((v18 & 1) == 0)
      {
        v13 = *(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v18 & 0xFFFFFFFFFFFFFFFELL);
        if (v13)
          result = v13(v19, v19, 2);
      }
      if (!*(_QWORD *)(v1 + 72))
        return result;
    }
    (*(void (**)(uint64_t, _BYTE *, _QWORD))(v8 & 0xFFFFFFFFFFFFFFFELL))(v7 + 8, v19, 0);
    v3 = *(_QWORD *)(v1 + 40);
    v4 = *(_QWORD *)(v1 + 64);
    v5 = v4 >> 7;
    v6 = v4 & 0x7F;
LABEL_7:
    v9 = (uint64_t *)(*(_QWORD *)(v3 + 8 * v5) + 32 * v6);
    v10 = *v9;
    if (*v9)
      goto LABEL_16;
    goto LABEL_8;
  }
  return result;
}

void sub_212A7D230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
  std::runtime_error::~runtime_error(&a13);
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

void sub_212A7D24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

void sub_212A7D260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,BBUpdaterControllerFSM::eventCmdQueryInfo,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::queryAction<(BBUStage)2>,boost::msm::front::none>>::execute(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  BBUpdaterController *v5;
  BBUEUR10UpdateSource *FirmwareDataSource;
  BBUFeedback *v7;
  int v8;
  _DWORD *v9;

  v3 = a1 + 4 * a2;
  *(_DWORD *)(a1 + 452) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  v4 = (_DWORD *)(v3 + 32);
  v5 = *(BBUpdaterController **)(a1 + 16);
  FirmwareDataSource = BBUpdaterController::getFirmwareDataSource(v5, 0);
  BBUpdaterController::parsePreflightArgs(v5);
  BBUpdaterController::queryInfoFirstStageInternal((BBULoader **)v5, v7);
  if (FirmwareDataSource)
    (*(void (**)(BBUEUR10UpdateSource *))(*(_QWORD *)FirmwareDataSource + 16))(FirmwareDataSource);
  *v4 = 0;
  v8 = *(_DWORD *)(a1 + 364);
  *(_DWORD *)(a1 + 304) = v8;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  switch(v8)
  {
    case 0:
      v9 = (_DWORD *)(a1 + 412);
      goto LABEL_8;
    case 1:
      v9 = (_DWORD *)(a1 + 400);
      goto LABEL_8;
    case 2:
      v9 = (_DWORD *)(a1 + 388);
      goto LABEL_8;
    case 3:
      v9 = (_DWORD *)(a1 + 376);
LABEL_8:
      ++*v9;
      break;
    default:
      break;
  }
  *(_BYTE *)(a1 + 368) = 0;
  boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1 + 280);
  *v4 = 3;
  return 1;
}

void sub_212A7D35C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

void ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventEUICC>(uint64_t a1, uint64_t a2, char a3)
{
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  int v9;
  char v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void (*v18)(_QWORD *, _QWORD *, uint64_t);
  int v20;
  unint64_t v21;
  _QWORD v22[3];

  qword_253D368C8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::TerminateFlag>::flag_false;
  unk_253D368D0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::TerminateFlag>::flag_true;
  qword_253D368B8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::TerminateFlag>::flag_false;
  unk_253D368C0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::TerminateFlag>::flag_false;
  qword_253D368A8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::TerminateFlag>::flag_false;
  unk_253D368B0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36898 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::TerminateFlag>::flag_false;
  unk_253D368A0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36888[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::TerminateFlag>::flag_false;
  unk_253D36890 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::TerminateFlag>::flag_false;
  v5 = ((uint64_t (*)(void))qword_253D36888[*(int *)(a1 + 32)])();
  v6 = ((uint64_t (*)(uint64_t))qword_253D36888[*(int *)(a1 + 36)])(a1);
  v7 = 1;
  if ((v5 & 1) == 0 && (v6 & 1) == 0)
  {
    qword_253D36918 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36920 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D36908 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36910 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368F8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36900 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368E8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368F0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368D8[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368E0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::InterruptedFlag>::flag_false;
    v8 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 32)])(a1);
    v9 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 36)])(a1);
    if ((v8 & 1) != 0 || v9)
    {
      qword_253D36B98 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false;
      unk_253D36BA0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false;
      qword_253D36B88 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false;
      unk_253D36B90 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false;
      qword_253D36B78 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false;
      unk_253D36B80 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false;
      qword_253D36B68 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false;
      unk_253D36B70 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false;
      qword_253D36B58[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false;
      unk_253D36B60 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false;
      v10 = ((uint64_t (*)(uint64_t))qword_253D36B58[*(int *)(a1 + 32)])(a1);
      v11 = ((uint64_t (*)(uint64_t))qword_253D36B58[*(int *)(a1 + 36)])(a1);
      if ((v10 & 1) == 0 && !v11)
        return 1;
    }
    if (*(_BYTE *)(a1 + 100))
    {
      v12 = operator new(0x20uLL);
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(a1 + 48);
      v15 = 16 * (v13 - v14) - 1;
      *v12 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventEUICC>;
      v12[1] = 0;
      v12[2] = a1;
      *((_BYTE *)v12 + 25) = 5;
      v21 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventEUICC const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventEUICC>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventEUICC const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventEUICC>,boost::_bi::value<unsigned char>>>)::stored_vtable;
      v22[0] = v12;
      if (v13 == v14)
        v15 = 0;
      v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      if (v15 == v16)
      {
        std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 40));
        v14 = *(_QWORD *)(a1 + 48);
        v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      }
      v17 = (_QWORD *)(*(_QWORD *)(v14 + ((v16 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v16 & 0x7F));
      *v17 = 0;
      boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v17, (uint64_t *)&v21);
      ++*(_QWORD *)(a1 + 80);
      if (v21)
      {
        if ((v21 & 1) == 0)
        {
          v18 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v21 & 0xFFFFFFFFFFFFFFFELL);
          if (v18)
            v18(v22, v22, 2);
        }
      }
      return 1;
    }
    *(_BYTE *)(a1 + 100) = 1;
    v20 = (*((uint64_t (**)(uint64_t, _QWORD))&unk_253D36FF0 + *(_DWORD *)(a1 + 32) + 1))(a1, 0);
    v7 = (*((unsigned int (**)(uint64_t, uint64_t))&unk_253D36FF0 + *(_DWORD *)(a1 + 36) + 1))(a1, 1) | v20;
    if ((!*(_BYTE *)(a1 + 101) || (a3 & 1) != 0) && !(_DWORD)v7)
    {
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventEUICC>(a1, a1, *(_DWORD *)(a1 + 32));
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventEUICC>(a1, a1, *(_DWORD *)(a1 + 36));
    }
    *(_BYTE *)(a1 + 100) = 0;
    if ((a3 & 6) == 0)
      boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  }
  return v7;
}

void sub_212A7D724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventEUICC>>::flag_false()
{
  return 0;
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventEUICC const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventEUICC>,boost::_bi::value<unsigned char>>>>::manage(_OWORD **a1, uint64_t a2, int a3)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  const char *v8;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = operator new(0x20uLL);
      v7 = v5[1];
      *v6 = *v5;
      v6[1] = v7;
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      if (*(_QWORD *)a2)
        operator delete(*(void **)a2);
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x8000000212B51C67 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x8000000212B51C67 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_WORD *)(a2 + 8) = 0;
      break;
  }
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventEUICC const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventEUICC>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[25];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventEUICC>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B51C40 & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B51C40 & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A7DF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventEUICC>()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeBooted,BBUpdaterControllerFSM::eventEUICC,BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeEUICC,BBUpdaterControllerFSM::performAction<(BBUStage)32>,boost::msm::front::none>>::execute(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = a1 + 4 * a2;
  *(_DWORD *)(a1 + 108) = 0;
  *(_DWORD *)(v3 + 24) = 2;
  BBUpdaterController::personalize(*(_QWORD *)(a1 + 16), 32);
  *(_DWORD *)(v3 + 24) = 2;
  ++*(_DWORD *)(a1 + 96);
  *(_DWORD *)(v3 + 24) = 3;
  return 1;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventEUICC>()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::frow<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventEUICC>::execute(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v4 = a1 + 280;
  if (boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventEUICC,BBUpdaterControllerFSM::eventEUICC>(a1 + 280))
  {
    v5 = ((uint64_t (*)(uint64_t, _QWORD))_MergedGlobals_1[*(_DWORD *)(a1 + 304) + 48])(v4, 0);
    v6 = v5;
    if (*(_BYTE *)(a1 + 369))
      v7 = 0;
    else
      v7 = (_DWORD)v5 == 0;
    if (v7)
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventEUICC>(v4, v4, *(_DWORD *)(a1 + 304));
    *(_BYTE *)(a1 + 368) = 0;
    boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(v4);
  }
  else
  {
    v6 = 1;
  }
  *(_DWORD *)(a1 + 4 * a2 + 32) = 3;
  return v6;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventEUICC>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;

  if (!boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventEUICC,BBUpdaterControllerFSM::eventEUICC>())
    return 1;
  v5 = ((uint64_t (*)(uint64_t, _QWORD))_MergedGlobals_1[*(_DWORD *)(a1 + 24) + 48])(a1, 0);
  v6 = v5;
  if ((!*(_BYTE *)(a1 + 89) || (a3 & 1) != 0) && !(_DWORD)v5)
    BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventEUICC>(a1, a1, *(_DWORD *)(a1 + 24));
  *(_BYTE *)(a1 + 88) = 0;
  if ((a3 & 6) == 0)
    boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  return v6;
}

BOOL boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventEUICC,BBUpdaterControllerFSM::eventEUICC>(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  void (*v9)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v11;
  _QWORD v12[3];

  v2 = *(unsigned __int8 *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
  {
    v3 = operator new(0x20uLL);
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = 16 * (v4 - v5) - 1;
    *v3 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventEUICC>;
    v3[1] = 0;
    v3[2] = a1;
    *((_BYTE *)v3 + 25) = 5;
    v11 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventEUICC const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventEUICC>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventEUICC const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventEUICC>,boost::_bi::value<unsigned char>>>)::stored_vtable;
    v12[0] = v3;
    if (v4 == v5)
      v6 = 0;
    v7 = *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 64);
    if (v6 == v7)
    {
      std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 32));
      v5 = *(_QWORD *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 64);
    }
    v8 = (_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
    *v8 = 0;
    boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v8, (uint64_t *)&v11);
    ++*(_QWORD *)(a1 + 72);
    if (v11 && (v11 & 1) == 0)
    {
      v9 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 & 0xFFFFFFFFFFFFFFFELL);
      if (v9)
        v9(v12, v12, 2);
    }
    return v2 == 0;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    return v2 == 0;
  }
}

void sub_212A7E348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventEUICC const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventEUICC>,boost::_bi::value<unsigned char>>>>::manage(_OWORD **a1, uint64_t a2, int a3)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  const char *v8;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = operator new(0x20uLL);
      v7 = v5[1];
      *v6 = *v5;
      v6[1] = v7;
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      if (*(_QWORD *)a2)
        operator delete(*(void **)a2);
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x8000000212B51D4DLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x8000000212B51D4DLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_WORD *)(a2 + 8) = 0;
      break;
  }
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventEUICC const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventEUICC>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[25];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventEUICC>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B51C40 & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B51C40 & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A7EAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventFuse>(uint64_t a1, uint64_t a2, char a3)
{
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  int v9;
  char v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void (*v18)(_QWORD *, _QWORD *, uint64_t);
  int v20;
  unint64_t v21;
  _QWORD v22[3];

  qword_253D368C8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::TerminateFlag>::flag_false;
  unk_253D368D0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::TerminateFlag>::flag_true;
  qword_253D368B8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::TerminateFlag>::flag_false;
  unk_253D368C0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::TerminateFlag>::flag_false;
  qword_253D368A8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::TerminateFlag>::flag_false;
  unk_253D368B0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36898 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::TerminateFlag>::flag_false;
  unk_253D368A0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36888[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::TerminateFlag>::flag_false;
  unk_253D36890 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::TerminateFlag>::flag_false;
  v5 = ((uint64_t (*)(void))qword_253D36888[*(int *)(a1 + 32)])();
  v6 = ((uint64_t (*)(uint64_t))qword_253D36888[*(int *)(a1 + 36)])(a1);
  v7 = 1;
  if ((v5 & 1) == 0 && (v6 & 1) == 0)
  {
    qword_253D36918 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36920 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D36908 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36910 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368F8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36900 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368E8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368F0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368D8[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368E0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::InterruptedFlag>::flag_false;
    v8 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 32)])(a1);
    v9 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 36)])(a1);
    if ((v8 & 1) != 0 || v9)
    {
      qword_253D36BE8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false;
      unk_253D36BF0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false;
      qword_253D36BD8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false;
      unk_253D36BE0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false;
      qword_253D36BC8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false;
      unk_253D36BD0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false;
      qword_253D36BB8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false;
      unk_253D36BC0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false;
      qword_253D36BA8[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false;
      unk_253D36BB0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false;
      v10 = ((uint64_t (*)(uint64_t))qword_253D36BA8[*(int *)(a1 + 32)])(a1);
      v11 = ((uint64_t (*)(uint64_t))qword_253D36BA8[*(int *)(a1 + 36)])(a1);
      if ((v10 & 1) == 0 && !v11)
        return 1;
    }
    if (*(_BYTE *)(a1 + 100))
    {
      v12 = operator new(0x20uLL);
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(a1 + 48);
      v15 = 16 * (v13 - v14) - 1;
      *v12 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventFuse>;
      v12[1] = 0;
      v12[2] = a1;
      *((_BYTE *)v12 + 25) = 5;
      v21 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFuse const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventFuse>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFuse const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventFuse>,boost::_bi::value<unsigned char>>>)::stored_vtable;
      v22[0] = v12;
      if (v13 == v14)
        v15 = 0;
      v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      if (v15 == v16)
      {
        std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 40));
        v14 = *(_QWORD *)(a1 + 48);
        v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      }
      v17 = (_QWORD *)(*(_QWORD *)(v14 + ((v16 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v16 & 0x7F));
      *v17 = 0;
      boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v17, (uint64_t *)&v21);
      ++*(_QWORD *)(a1 + 80);
      if (v21)
      {
        if ((v21 & 1) == 0)
        {
          v18 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v21 & 0xFFFFFFFFFFFFFFFELL);
          if (v18)
            v18(v22, v22, 2);
        }
      }
      return 1;
    }
    *(_BYTE *)(a1 + 100) = 1;
    v20 = (*((uint64_t (**)(uint64_t, _QWORD))&unk_253D37048 + *(_DWORD *)(a1 + 32) + 1))(a1, 0);
    v7 = (*((unsigned int (**)(uint64_t, uint64_t))&unk_253D37048 + *(_DWORD *)(a1 + 36) + 1))(a1, 1) | v20;
    if ((!*(_BYTE *)(a1 + 101) || (a3 & 1) != 0) && !(_DWORD)v7)
    {
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFuse>(a1, a1, *(_DWORD *)(a1 + 32));
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFuse>(a1, a1, *(_DWORD *)(a1 + 36));
    }
    *(_BYTE *)(a1 + 100) = 0;
    if ((a3 & 6) == 0)
      boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  }
  return v7;
}

void sub_212A7EF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventFuse>>::flag_false()
{
  return 0;
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFuse const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventFuse>,boost::_bi::value<unsigned char>>>>::manage(_OWORD **a1, uint64_t a2, int a3)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  const char *v8;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = operator new(0x20uLL);
      v7 = v5[1];
      *v6 = *v5;
      v6[1] = v7;
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      if (*(_QWORD *)a2)
        operator delete(*(void **)a2);
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x8000000212B51E66 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x8000000212B51E66 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_WORD *)(a2 + 8) = 0;
      break;
  }
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFuse const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventFuse>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[25];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFuse>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B51E41 & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B51E41 & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A7F78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventFuse>()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFuse,BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,BBUpdaterControllerFSM::ControllerFSM_TOP::fuse,boost::msm::front::none>>::execute(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  capabilities::updater *v7;
  const __CFNumber *Value;
  CFNumberRef v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  BBUEUR10UpdateSource *FirmwareDataSource;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BBUEUR10UpdateSource *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  std::string::size_type size;
  std::string::value_type *v31;
  int v32;
  unsigned int v33;
  _DWORD *v34;
  BBUEUR10UpdateSource *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const void **v53;
  void *exception;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const void **v61;
  char *v62;
  CFNumberRef v63;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  std::string v78;
  _DWORD v79[3];
  unsigned int valuePtr;
  std::string v81;
  unint64_t v82;

  v3 = a1 + 4 * a2;
  *(_DWORD *)(v3 + 32) = 3;
  v4 = (_DWORD *)(v3 + 32);
  switch(*(_DWORD *)(a1 + 304))
  {
    case 0:
      v5 = (_DWORD *)(a1 + 412);
      goto LABEL_6;
    case 1:
      v5 = (_DWORD *)(a1 + 400);
      goto LABEL_6;
    case 2:
      v5 = (_DWORD *)(a1 + 388);
      goto LABEL_6;
    case 3:
      v5 = (_DWORD *)(a1 + 376);
LABEL_6:
      *v5 = 0;
      break;
    default:
      break;
  }
  *v4 = 3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = (capabilities::updater *)capabilities::updater::supportsBBFusing((capabilities::updater *)a1);
  if ((_DWORD)v7)
  {
    valuePtr = capabilities::updater::intermittentFailureRetryCount(v7);
    Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 32), CFSTR("fuseRetrial"));
    if (Value)
    {
      v9 = Value;
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      v10 = v6 + 152;
      v11 = BBUFusing::create(*(capabilities::updater **)(v6 + 56), v6 + 152);
      if (v11)
        goto LABEL_10;
    }
    else
    {
      v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v6 + 32), CFSTR("fuseRetrial"), v9);
      v10 = v6 + 152;
      v11 = BBUFusing::create(*(capabilities::updater **)(v6 + 56), v6 + 152);
      if (v11)
      {
LABEL_10:
        v12 = v11;
        FirmwareDataSource = BBUpdaterController::getFirmwareDataSource((BBUpdaterController *)v6, 0);
        v17 = FirmwareDataSource;
        if (FirmwareDataSource)
        {
          if ((*(uint64_t (**)(BBUEUR10UpdateSource *))(*(_QWORD *)FirmwareDataSource + 64))(FirmwareDataSource))
          {
            v24 = (*(uint64_t (**)(_DWORD *, BBUEUR10UpdateSource *, _QWORD))(*(_QWORD *)v12 + 16))(v12, v17, 0);
            if (v24)
            {
              if (gBBULogMaskGet(void)::once == -1)
              {
                if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
                  goto LABEL_18;
              }
              else
              {
                dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
                if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
                  goto LABEL_18;
              }
              if ((gBBULogVerbosity & 0x80000000) == 0)
                _BBULog(19, 0, "BBUpdaterController", "", "Failed performing fusing with %d trials\n", v21, v22, v23, valuePtr);
LABEL_18:
              if (valuePtr--)
              {
                (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 72) + 32))(*(_QWORD *)(v6 + 72), *(_QWORD *)(v6 + 48));
                if (gBBULogMaskGet(void)::once == -1)
                {
                  if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
                    goto LABEL_23;
                }
                else
                {
                  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
                  if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
                    goto LABEL_23;
                }
                if (gBBULogVerbosity >= 6)
                  _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v26, v27, v28, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_23:
                std::to_string(&v78, valuePtr);
                v29 = std::string::insert(&v78, 0, "Failed performing fusing. Retry: ", 0x21uLL);
                v31 = (std::string::value_type *)v29->__r_.__value_.__r.__words[0];
                size = v29->__r_.__value_.__l.__size_;
                v79[0] = v29->__r_.__value_.__r.__words[2];
                *(_DWORD *)((char *)v79 + 3) = *(_DWORD *)((char *)&v29->__r_.__value_.__r.__words[2] + 3);
                v32 = SHIBYTE(v29->__r_.__value_.__r.__words[2]);
                v29->__r_.__value_.__l.__size_ = 0;
                v29->__r_.__value_.__r.__words[2] = 0;
                v29->__r_.__value_.__r.__words[0] = 0;
                v33 = valuePtr;
                if (v32 < 0)
                {
                  std::string::__init_copy_ctor_external(&v81, v31, size);
                }
                else
                {
                  v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
                  v81.__r_.__value_.__l.__size_ = size;
                  LODWORD(v81.__r_.__value_.__r.__words[2]) = v79[0];
                  *(_DWORD *)((char *)&v81.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v79 + 3);
                  *((_BYTE *)&v81.__r_.__value_.__s + 23) = v32;
                }
                v82 = __PAIR64__(v33, v24);
                BBUpdaterController::process_event<BBUpdaterControllerFSM::eventRetry>(v6, (uint64_t)&v81);
                if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v81.__r_.__value_.__l.__data_);
                  if ((v32 & 0x80000000) == 0)
                  {
LABEL_54:
                    if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_55:
                      v61 = (const void **)MEMORY[0x24BDBD268];
                      goto LABEL_56;
                    }
LABEL_66:
                    operator delete(v78.__r_.__value_.__l.__data_);
                    goto LABEL_55;
                  }
                }
                else if ((v32 & 0x80000000) == 0)
                {
                  goto LABEL_54;
                }
                operator delete(v31);
                if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_55;
                goto LABEL_66;
              }
              if (gBBULogMaskGet(void)::once == -1)
              {
                if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
                  goto LABEL_46;
              }
              else
              {
                dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
                if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
                {
LABEL_46:
                  if (gBBULogVerbosity >= 6)
                    _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v21, v22, v23, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
                }
              }
              v62 = (char *)operator new(0x20uLL);
              strcpy(v62, "Failed performing fusing.");
              std::string::__init_copy_ctor_external(&v81, v62, 0x19uLL);
              v82 = v24;
              BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(v6, (uint64_t)&v81);
              if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v81.__r_.__value_.__l.__data_);
              operator delete(v62);
              goto LABEL_55;
            }
            if (gBBULogMaskGet(void)::once == -1)
            {
              if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
                goto LABEL_41;
            }
            else
            {
              dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
              if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
                goto LABEL_41;
            }
            if (gBBULogVerbosity >= 1)
              _BBULog(19, 1, "BBUpdaterController", "", "Succeeded to perform fusing with %d trials\n", v21, v22, v23, valuePtr);
LABEL_41:
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 64) + 40))(*(_QWORD *)(v6 + 64), v10);
            BBUFeedback::handleComment(*(BBUFeedback **)(v6 + 56), "Powercycle after fusing");
            if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 72) + 32))(*(_QWORD *)(v6 + 72), *(_QWORD *)(v6 + 48)) & 1) != 0)
            {
              BBUpdaterController::process_event<BBUpdaterControllerFSM::eventContinue>(*(int **)(v6 + 16), *(std::__shared_weak_count **)(v6 + 24), (uint64_t)&v81);
LABEL_43:
              v61 = (const void **)MEMORY[0x24BDBD270];
LABEL_56:
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v6 + 32), CFSTR("fuseAttemptSucceeded"), *v61);
LABEL_57:
              if (v9)
                CFRelease(v9);
              v63 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberIntType, &valuePtr);
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v6 + 32), CFSTR("fuseRetrial"), v63);
              if (v63)
                CFRelease(v63);
              goto LABEL_61;
            }
            if (gBBULogMaskGet(void)::once == -1)
            {
              if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
                goto LABEL_125;
            }
            else
            {
              dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
              if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
              {
LABEL_125:
                if (gBBULogVerbosity >= 6)
                  _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v58, v59, v60, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
              }
            }
            v73 = (char *)operator new(0x28uLL);
            strcpy(v73, "Fail to powercycle modem after fusing");
            std::string::__init_copy_ctor_external(&v81, v73, 0x25uLL);
            v82 = 39;
            BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(v6, (uint64_t)&v81);
            if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v81.__r_.__value_.__l.__data_);
            operator delete(v73);
            goto LABEL_43;
          }
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
              goto LABEL_79;
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
            {
LABEL_79:
              if (gBBULogVerbosity >= 6)
                _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v18, v19, v20, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
            }
          }
          v65 = (char *)operator new(0x40uLL);
          strcpy(v65, "Fusing is requested but no fusing program was given yet. ");
          std::string::__init_copy_ctor_external(&v81, v65, 0x39uLL);
          v82 = 24;
          BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(v6, (uint64_t)&v81);
          goto LABEL_82;
        }
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
            goto LABEL_69;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
          {
LABEL_69:
            if (gBBULogVerbosity >= 6)
              _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v14, v15, v16, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
          }
        }
        v65 = (char *)operator new(0x28uLL);
        strcpy(v65, "Fail to get update source for fuse");
        std::string::__init_copy_ctor_external(&v81, v65, 0x22uLL);
        v82 = 35;
        BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(v6, (uint64_t)&v81);
LABEL_82:
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v81.__r_.__value_.__l.__data_);
        operator delete(v65);
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v6 + 32), CFSTR("fuseAttemptSucceeded"));
        goto LABEL_57;
      }
    }
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 24, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x31Au, (ctu::LogMessageBuffer *)"Assertion failure(fuser && \"Error in creating fusing process.\")", v55, v56, v57, v77);
LABEL_133:
  }
  v34 = BBUFusing::create(*(capabilities::updater **)(v6 + 56), v6 + 152);
  if (!v34)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 24, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp", 0x367u, (ctu::LogMessageBuffer *)"Assertion failure(fuser && \"Error in creating fusing process.\")", v74, v75, v76, v77);
    goto LABEL_133;
  }
  v12 = v34;
  v35 = BBUpdaterController::getFirmwareDataSource((BBUpdaterController *)v6, 0);
  v17 = v35;
  if (v35)
  {
    if ((*(uint64_t (**)(BBUEUR10UpdateSource *))(*(_QWORD *)v35 + 64))(v35))
    {
      v45 = (*(uint64_t (**)(_DWORD *, BBUEUR10UpdateSource *, _QWORD))(*(_QWORD *)v12 + 16))(v12, v17, 0);
      if (!v45)
      {
        v49 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v6 + 72) + 72))(*(_QWORD *)(v6 + 72), v6 + 152, *(_QWORD *)(v6 + 96));
        if (!v49)
        {
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 64) + 40))(*(_QWORD *)(v6 + 64), v6 + 152);
          BBUFeedback::handleComment(*(BBUFeedback **)(v6 + 56), "Powercycle after fusing");
          if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 72) + 32))(*(_QWORD *)(v6 + 72), *(_QWORD *)(v6 + 48)) & 1) != 0)
          {
            BBUpdaterController::process_event<BBUpdaterControllerFSM::eventContinue>(*(int **)(v6 + 16), *(std::__shared_weak_count **)(v6 + 24), (uint64_t)&v81);
            goto LABEL_32;
          }
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
              goto LABEL_112;
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
            {
LABEL_112:
              if (gBBULogVerbosity >= 6)
                _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v50, v51, v52, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
            }
          }
          v72 = (char *)operator new(0x28uLL);
          strcpy(v72, "Fail to powercycle modem after fusing");
          std::string::__init_copy_ctor_external(&v81, v72, 0x25uLL);
          v82 = 39;
          BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(v6, (uint64_t)&v81);
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v81.__r_.__value_.__l.__data_);
          operator delete(v72);
          goto LABEL_32;
        }
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
            goto LABEL_102;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
          {
LABEL_102:
            if (gBBULogVerbosity >= 6)
              _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v46, v47, v48, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
          }
        }
        v68 = (char *)operator new(0x30uLL);
        strcpy(v68, "Failed gathering personalization parameters");
        std::string::__init_copy_ctor_external(&v81, v68, 0x2BuLL);
        v82 = v49;
        BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(v6, (uint64_t)&v81);
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v81.__r_.__value_.__l.__data_);
        operator delete(v68);
        if (gBBULogMaskGet(void)::once == -1)
        {
          v53 = (const void **)MEMORY[0x24BDBD270];
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
            goto LABEL_33;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          v53 = (const void **)MEMORY[0x24BDBD270];
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
            goto LABEL_33;
        }
        if (gBBULogVerbosity < 6)
          goto LABEL_33;
        _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v69, v70, v71, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
LABEL_32:
        v53 = (const void **)MEMORY[0x24BDBD270];
LABEL_33:
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v6 + 32), CFSTR("fuseAttemptSucceeded"), *v53);
LABEL_62:
        (*(void (**)(BBUEUR10UpdateSource *))(*(_QWORD *)v17 + 16))(v17);
        goto LABEL_63;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
          goto LABEL_95;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        {
LABEL_95:
          if (gBBULogVerbosity >= 6)
            _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v42, v43, v44, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
        }
      }
      v67 = (char *)operator new(0x20uLL);
      strcpy(v67, "Failed performing fusing.");
      std::string::__init_copy_ctor_external(&v81, v67, 0x19uLL);
      v82 = v45;
      BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(v6, (uint64_t)&v81);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      operator delete(v67);
      v53 = (const void **)MEMORY[0x24BDBD268];
      goto LABEL_33;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_87;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_87:
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v39, v40, v41, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
      }
    }
    v66 = (char *)operator new(0x40uLL);
    strcpy(v66, "Fusing is requested but no fusing program was given yet. ");
    std::string::__init_copy_ctor_external(&v81, v66, 0x39uLL);
    v82 = 24;
    BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(v6, (uint64_t)&v81);
    goto LABEL_90;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      goto LABEL_74;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
    {
LABEL_74:
      if (gBBULogVerbosity >= 6)
        _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v36, v37, v38, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
    }
  }
  v66 = (char *)operator new(0x28uLL);
  strcpy(v66, "Fail to get update source for fuse");
  std::string::__init_copy_ctor_external(&v81, v66, 0x22uLL);
  v82 = 35;
  BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(v6, (uint64_t)&v81);
LABEL_90:
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  operator delete(v66);
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v6 + 32), CFSTR("fuseAttemptSucceeded"));
LABEL_61:
  if (v17)
    goto LABEL_62;
LABEL_63:
  (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
  *v4 = 3;
  ++*(_DWORD *)(a1 + 268);
  *v4 = 4;
  return 1;
}

void sub_212A808B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  void *v27;

  if (a25 < 0)
    operator delete(__p);
  operator delete(v27);
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventProvision>(uint64_t a1, uint64_t a2, char a3)
{
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  int v9;
  char v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void (*v18)(_QWORD *, _QWORD *, uint64_t);
  int v20;
  unint64_t v21;
  _QWORD v22[3];

  qword_253D368C8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::TerminateFlag>::flag_false;
  unk_253D368D0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::TerminateFlag>::flag_true;
  qword_253D368B8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::TerminateFlag>::flag_false;
  unk_253D368C0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::TerminateFlag>::flag_false;
  qword_253D368A8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::TerminateFlag>::flag_false;
  unk_253D368B0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36898 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::TerminateFlag>::flag_false;
  unk_253D368A0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36888[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::TerminateFlag>::flag_false;
  unk_253D36890 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::TerminateFlag>::flag_false;
  v5 = ((uint64_t (*)(void))qword_253D36888[*(int *)(a1 + 32)])();
  v6 = ((uint64_t (*)(uint64_t))qword_253D36888[*(int *)(a1 + 36)])(a1);
  v7 = 1;
  if ((v5 & 1) == 0 && (v6 & 1) == 0)
  {
    qword_253D36918 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36920 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D36908 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36910 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368F8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36900 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368E8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368F0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368D8[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368E0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::InterruptedFlag>::flag_false;
    v8 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 32)])(a1);
    v9 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 36)])(a1);
    if ((v8 & 1) != 0 || v9)
    {
      qword_253D36C38 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false;
      unk_253D36C40 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false;
      qword_253D36C28 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false;
      unk_253D36C30 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false;
      qword_253D36C18 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false;
      unk_253D36C20 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false;
      qword_253D36C08 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false;
      unk_253D36C10 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false;
      qword_253D36BF8[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false;
      unk_253D36C00 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false;
      v10 = ((uint64_t (*)(uint64_t))qword_253D36BF8[*(int *)(a1 + 32)])(a1);
      v11 = ((uint64_t (*)(uint64_t))qword_253D36BF8[*(int *)(a1 + 36)])(a1);
      if ((v10 & 1) == 0 && !v11)
        return 1;
    }
    if (*(_BYTE *)(a1 + 100))
    {
      v12 = operator new(0x20uLL);
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(a1 + 48);
      v15 = 16 * (v13 - v14) - 1;
      *v12 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventProvision>;
      v12[1] = 0;
      v12[2] = a1;
      *((_BYTE *)v12 + 25) = 5;
      v21 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventProvision const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventProvision>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventProvision const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventProvision>,boost::_bi::value<unsigned char>>>)::stored_vtable;
      v22[0] = v12;
      if (v13 == v14)
        v15 = 0;
      v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      if (v15 == v16)
      {
        std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 40));
        v14 = *(_QWORD *)(a1 + 48);
        v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      }
      v17 = (_QWORD *)(*(_QWORD *)(v14 + ((v16 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v16 & 0x7F));
      *v17 = 0;
      boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v17, (uint64_t *)&v21);
      ++*(_QWORD *)(a1 + 80);
      if (v21)
      {
        if ((v21 & 1) == 0)
        {
          v18 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v21 & 0xFFFFFFFFFFFFFFFELL);
          if (v18)
            v18(v22, v22, 2);
        }
      }
      return 1;
    }
    *(_BYTE *)(a1 + 100) = 1;
    v20 = (*((uint64_t (**)(uint64_t, _QWORD))&unk_253D370A0 + *(_DWORD *)(a1 + 32) + 1))(a1, 0);
    v7 = (*((unsigned int (**)(uint64_t, uint64_t))&unk_253D370A0 + *(_DWORD *)(a1 + 36) + 1))(a1, 1) | v20;
    if ((!*(_BYTE *)(a1 + 101) || (a3 & 1) != 0) && !(_DWORD)v7)
    {
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventProvision>(a1, a1, *(_DWORD *)(a1 + 32));
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventProvision>(a1, a1, *(_DWORD *)(a1 + 36));
    }
    *(_BYTE *)(a1 + 100) = 0;
    if ((a3 & 6) == 0)
      boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  }
  return v7;
}

void sub_212A80E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventProvision>>::flag_false()
{
  return 0;
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventProvision const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventProvision>,boost::_bi::value<unsigned char>>>>::manage(_OWORD **a1, uint64_t a2, int a3)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  const char *v8;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = operator new(0x20uLL);
      v7 = v5[1];
      *v6 = *v5;
      v6[1] = v7;
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      if (*(_QWORD *)a2)
        operator delete(*(void **)a2);
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x8000000212B51F75 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x8000000212B51F75 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_WORD *)(a2 + 8) = 0;
      break;
  }
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventProvision const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventProvision>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[25];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventProvision>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B51F4ALL & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B51F4ALL & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A8164C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventProvision>()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::_row_<boost::msm::front::Row<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventProvision,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::front::none,boost::msm::front::none>>::execute(uint64_t a1, int a2)
{
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  _DWORD *v6;

  v2 = a1 + 4 * a2;
  *(_DWORD *)(v2 + 32) = 3;
  v3 = (_DWORD *)(v2 + 32);
  switch(*(_DWORD *)(a1 + 304))
  {
    case 0:
      v4 = (_DWORD *)(a1 + 412);
      goto LABEL_6;
    case 1:
      v4 = (_DWORD *)(a1 + 400);
      goto LABEL_6;
    case 2:
      v4 = (_DWORD *)(a1 + 388);
      goto LABEL_6;
    case 3:
      v4 = (_DWORD *)(a1 + 376);
LABEL_6:
      *v4 = 0;
      break;
    default:
      break;
  }
  *v3 = 3;
  v5 = *(_DWORD *)(a1 + 228);
  *(_DWORD *)(a1 + 168) = v5;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v6 = (_DWORD *)(a1 + 252);
    goto LABEL_11;
  }
  if (v5 == 1)
  {
    v6 = (_DWORD *)(a1 + 240);
LABEL_11:
    ++*v6;
  }
  *(_BYTE *)(a1 + 232) = 0;
  boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1 + 144);
  *v3 = 5;
  return 1;
}

uint64_t *std::__tree<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>,BBUpdaterController::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,BBUpdaterController::CmdInfo>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(CFStringRef *a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;

  v3 = qword_253D36780;
  if (!qword_253D36780)
  {
    v5 = &qword_253D36780;
    v6 = &qword_253D36780;
LABEL_9:
    v7 = (uint64_t *)operator new(0x38uLL);
    v7[4] = **a2;
    v7[5] = 0;
    v7[6] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = (uint64_t)v6;
    *v5 = (uint64_t)v7;
    v8 = v7;
    if (*(_QWORD *)qword_253D36778)
    {
      qword_253D36778 = *(_QWORD *)qword_253D36778;
      v8 = (uint64_t *)*v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_253D36780, v8);
    ++qword_253D36788;
    return v7;
  }
  v5 = &qword_253D36780;
  while (1)
  {
    while (1)
    {
      v6 = (uint64_t *)v3;
      if ((CFStringCompare(*a1, *(CFStringRef *)(v3 + 32), 0) & 0x8000000000000000) == 0)
        break;
      v3 = *v6;
      v5 = v6;
      if (!*v6)
        goto LABEL_9;
    }
    if ((CFStringCompare((CFStringRef)v6[4], *a1, 0) & 0x8000000000000000) == 0)
      break;
    v5 = v6 + 1;
    v3 = v6[1];
    if (!v3)
      goto LABEL_9;
  }
  v7 = (uint64_t *)*v5;
  if (!*v5)
    goto LABEL_9;
  return v7;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdPerformNextStage>(uint64_t a1, uint64_t a2, char a3)
{
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  std::string::size_type v11;
  char v12;
  int v13;
  int v14;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string::value_type v17;
  std::string *v18;
  std::string *v19;
  std::string::value_type v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  void (*v27)(uint64_t *, _WORD *, int);
  std::string v29;
  std::string::size_type v30;
  __int128 v31;
  std::string::size_type v32;
  __int128 v33;
  __int128 v34;
  std::string::value_type v35;
  unint64_t v36;
  uint64_t v37[3];
  __int128 v38;
  std::string::size_type v39;
  std::string v40;
  std::string::size_type v41;
  std::string::value_type v42;
  std::string v43;
  std::string v44;
  std::string::size_type v45;
  std::string::value_type v46;
  std::string v47;
  std::string __p;
  std::string::size_type v49;
  std::string::value_type v50;
  std::string v51;
  std::string v52;
  std::string::size_type v53;
  std::string::value_type v54;
  _BYTE v55[24];
  std::string v56;
  std::string::size_type v57;
  std::string::value_type v58;

  qword_253D368C8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::TerminateFlag>::flag_false;
  unk_253D368D0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::TerminateFlag>::flag_true;
  qword_253D368B8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::TerminateFlag>::flag_false;
  unk_253D368C0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::TerminateFlag>::flag_false;
  qword_253D368A8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::TerminateFlag>::flag_false;
  unk_253D368B0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36898 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::TerminateFlag>::flag_false;
  unk_253D368A0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36888[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::TerminateFlag>::flag_false;
  unk_253D36890 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::TerminateFlag>::flag_false;
  v6 = ((uint64_t (*)(void))qword_253D36888[*(int *)(a1 + 32)])();
  v7 = ((uint64_t (*)(uint64_t))qword_253D36888[*(int *)(a1 + 36)])(a1);
  v8 = 1;
  if ((v6 & 1) == 0 && (v7 & 1) == 0)
  {
    qword_253D36918 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36920 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D36908 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36910 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368F8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36900 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368E8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368F0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368D8[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368E0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::InterruptedFlag>::flag_false;
    v9 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 32)])(a1);
    v10 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 36)])(a1);
    if ((v9 & 1) != 0 || v10)
    {
      qword_253D36C88 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false;
      unk_253D36C90 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false;
      qword_253D36C78 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false;
      unk_253D36C80 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false;
      qword_253D36C68 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false;
      unk_253D36C70 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false;
      qword_253D36C58 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false;
      unk_253D36C60 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false;
      qword_253D36C48[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false;
      unk_253D36C50 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false;
      v12 = ((uint64_t (*)(uint64_t))qword_253D36C48[*(int *)(a1 + 32)])(a1);
      v13 = ((uint64_t (*)(uint64_t))qword_253D36C48[*(int *)(a1 + 36)])(a1);
      if ((v12 & 1) == 0 && !v13)
        return 1;
    }
    if (*(_BYTE *)(a1 + 100))
    {
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        v11 = *(_QWORD *)(a2 + 24);
        v30 = v11;
        if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_8:
          v43 = v29;
          v44.__r_.__value_.__r.__words[0] = v11;
          if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_23;
        }
      }
      else
      {
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v11 = *(_QWORD *)(a2 + 24);
        v29.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
        v30 = v11;
        if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_8;
      }
      std::string::__init_copy_ctor_external(&v43, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      v11 = v30;
      v44.__r_.__value_.__r.__words[0] = v30;
      if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_9:
        v47 = v43;
        __p.__r_.__value_.__r.__words[0] = v11;
        if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_10;
        goto LABEL_24;
      }
LABEL_23:
      std::string::__init_copy_ctor_external(&v47, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
      v11 = v44.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = v44.__r_.__value_.__r.__words[0];
      if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_10:
        v51 = v47;
        v52.__r_.__value_.__r.__words[0] = v11;
        *(_QWORD *)v55 = a1;
        if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_11:
          *(_OWORD *)&v55[8] = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
          v56.__r_.__value_.__r.__words[0] = v51.__r_.__value_.__r.__words[2];
          v56.__r_.__value_.__l.__size_ = v11;
          goto LABEL_27;
        }
LABEL_25:
        std::string::__init_copy_ctor_external((std::string *)&v55[8], v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
        v56.__r_.__value_.__l.__size_ = v52.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
LABEL_27:
        v56.__r_.__value_.__s.__data_[16] = 5;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        *(_QWORD *)&v31 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdPerformNextStage>;
        *((_QWORD *)&v31 + 1) = 0;
        v32 = *(_QWORD *)v55;
        if (v56.__r_.__value_.__s.__data_[7] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v33, *(const std::string::value_type **)&v55[8], *(std::string::size_type *)&v55[16]);
          *((_QWORD *)&v34 + 1) = v56.__r_.__value_.__l.__size_;
          v35 = v56.__r_.__value_.__s.__data_[16];
          if (v56.__r_.__value_.__s.__data_[7] < 0)
            operator delete(*(void **)&v55[8]);
        }
        else
        {
          v33 = *(_OWORD *)&v55[8];
          v34 = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
          v35 = v56.__r_.__value_.__s.__data_[16];
        }
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        v38 = v31;
        v15 = v32;
        v39 = v32;
        if (SBYTE7(v34) < 0)
        {
          std::string::__init_copy_ctor_external(&v40, (const std::string::value_type *)v33, *((std::string::size_type *)&v33 + 1));
          v15 = v39;
        }
        else
        {
          *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v33;
          v40.__r_.__value_.__r.__words[2] = v34;
        }
        v16 = *((_QWORD *)&v34 + 1);
        v41 = *((_QWORD *)&v34 + 1);
        v17 = v35;
        v42 = v35;
        v36 = 0;
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v38;
        v43.__r_.__value_.__r.__words[2] = v15;
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v44, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
          v16 = v41;
          v17 = v42;
          v15 = v43.__r_.__value_.__r.__words[2];
        }
        else
        {
          v44 = v40;
        }
        v45 = v16;
        v46 = v17;
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
        v47.__r_.__value_.__r.__words[2] = v15;
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
          v15 = v47.__r_.__value_.__r.__words[2];
          v16 = v45;
          v17 = v46;
        }
        else
        {
          __p = v44;
        }
        v49 = v16;
        v50 = v17;
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v15;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v52, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          v16 = v49;
          v17 = v50;
          v15 = v51.__r_.__value_.__r.__words[2];
        }
        else
        {
          v52 = __p;
        }
        v53 = v16;
        v54 = v17;
        *(_OWORD *)v55 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
        *(_QWORD *)&v55[16] = v15;
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v56, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
          v16 = v53;
          v17 = v54;
        }
        else
        {
          v56 = v52;
        }
        v57 = v16;
        v58 = v17;
        v18 = (std::string *)operator new(0x40uLL);
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)v55;
        v18->__r_.__value_.__r.__words[2] = *(_QWORD *)&v55[16];
        v19 = v18 + 1;
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v19, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
          v20 = v58;
          v21 = SHIBYTE(v56.__r_.__value_.__r.__words[2]);
          v18[2].__r_.__value_.__r.__words[0] = v57;
          v18[2].__r_.__value_.__s.__data_[8] = v20;
          v37[0] = (uint64_t)v18;
          if (v21 < 0)
            operator delete(v56.__r_.__value_.__l.__data_);
        }
        else
        {
          *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
          v18[1].__r_.__value_.__r.__words[2] = v56.__r_.__value_.__r.__words[2];
          v18[2].__r_.__value_.__r.__words[0] = v16;
          v18[2].__r_.__value_.__s.__data_[8] = v17;
          v37[0] = (uint64_t)v18;
        }
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v52.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_56:
            v36 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformNextStage>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformNextStage>,boost::_bi::value<unsigned char>>>)::stored_vtable;
            if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_57;
            goto LABEL_73;
          }
        }
        else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_56;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        v36 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformNextStage>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformNextStage>,boost::_bi::value<unsigned char>>>)::stored_vtable;
        if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_57:
          if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_58;
LABEL_74:
          operator delete(v40.__r_.__value_.__l.__data_);
LABEL_58:
          v22 = *(_QWORD *)(a1 + 56);
          v23 = *(_QWORD *)(a1 + 48);
          v24 = 16 * (v22 - v23) - 1;
          if (v22 == v23)
            v24 = 0;
          v25 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          if (v24 == v25)
          {
            std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 40));
            v23 = *(_QWORD *)(a1 + 48);
            v25 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          }
          v26 = (_QWORD *)(*(_QWORD *)(v23 + ((v25 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v25 & 0x7F));
          *v26 = 0;
          boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v26, (uint64_t *)&v36);
          ++*(_QWORD *)(a1 + 80);
          if (v36)
          {
            if ((v36 & 1) == 0)
            {
              v27 = *(void (**)(uint64_t *, _WORD *, int))(v36 & 0xFFFFFFFFFFFFFFFELL);
              if (v27)
                v27(v37, v37, 2);
            }
            v36 = 0;
          }
          if (SBYTE7(v34) < 0)
          {
            operator delete((void *)v33);
            if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              return 1;
          }
          else if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            return 1;
          }
          operator delete(v29.__r_.__value_.__l.__data_);
          return 1;
        }
LABEL_73:
        operator delete(v44.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_58;
        goto LABEL_74;
      }
LABEL_24:
      std::string::__init_copy_ctor_external(&v51, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
      v11 = __p.__r_.__value_.__r.__words[0];
      v52.__r_.__value_.__r.__words[0] = __p.__r_.__value_.__r.__words[0];
      *(_QWORD *)v55 = a1;
      if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_11;
      goto LABEL_25;
    }
    *(_BYTE *)(a1 + 100) = 1;
    v14 = (*((uint64_t (**)(uint64_t, _QWORD))&unk_253D370F8 + *(_DWORD *)(a1 + 32) + 1))(a1, 0);
    v8 = (*((unsigned int (**)(uint64_t, uint64_t))&unk_253D370F8 + *(_DWORD *)(a1 + 36) + 1))(a1, 1) | v14;
    if ((!*(_BYTE *)(a1 + 101) || (a3 & 1) != 0) && !(_DWORD)v8)
    {
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage>(a1, a1, *(_DWORD *)(a1 + 32));
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage>(a1, a1, *(_DWORD *)(a1 + 36));
    }
    *(_BYTE *)(a1 + 100) = 0;
    if ((a3 & 6) == 0)
      boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  }
  return v8;
}

void sub_212A82118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;
  uint64_t v62;

  operator delete(v61);
  if (*(char *)(v62 - 81) < 0)
  {
    operator delete(*(void **)(v62 - 104));
    if ((*(char *)(v62 - 145) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((*(char *)(v62 - 145) & 0x80000000) == 0)
  {
LABEL_3:
    if (a61 < 0)
      goto LABEL_4;
    goto LABEL_10;
  }
  operator delete(*(void **)(v62 - 168));
  if (a61 < 0)
  {
LABEL_4:
    operator delete(__p);
    if ((a50 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  if ((a50 & 0x80000000) == 0)
  {
LABEL_5:
    if (a39 < 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a45);
  if (a39 < 0)
  {
LABEL_6:
    operator delete(a34);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_14:
      if (a14 < 0)
        operator delete(a9);
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(a19);
    goto LABEL_14;
  }
LABEL_12:
  if ((a24 & 0x80000000) == 0)
    goto LABEL_14;
  goto LABEL_13;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformNextStage>>::flag_false()
{
  return 0;
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformNextStage>,boost::_bi::value<unsigned char>>>>::manage(uint64_t *a1, _WORD *a2, int a3)
{
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  const char *v10;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = (std::string *)operator new(0x40uLL);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
      v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
      v7 = v6 + 1;
      if (*(char *)(v5 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(v5 + 24), *(_QWORD *)(v5 + 32));
      }
      else
      {
        v8 = *(_OWORD *)(v5 + 24);
        v6[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 40);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      v6[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(v5 + 48);
      v6[2].__r_.__value_.__s.__data_[8] = *(_BYTE *)(v5 + 56);
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      v9 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        if (*(char *)(v9 + 47) < 0)
          operator delete(*(void **)(v9 + 24));
        operator delete((void *)v9);
      }
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v10 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v10 == (const char *)(0x8000000212B52094 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v10, (const char *)(0x8000000212B52094 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
}

void sub_212A82460(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformNextStage>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[56];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B5205FLL & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B5205FLL & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A82B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformNextStage>()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeEUICC,BBUpdaterControllerFSM::eventCmdPerformNextStage,boost::msm::front::none,BBUpdaterControllerFSM::performAction<(BBUStage)32>,BBUpdaterControllerFSM::ControllerFSM_TOP::allowRetry>>::execute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  NSObject *v22;
  std::__shared_weak_count_vtbl *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *size;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  NSObject *isa;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  char v40;
  dispatch_object_t object[5];
  dispatch_object_t *v42;
  std::string block;
  unint64_t v44;
  NSObject *v45;
  dispatch_object_t **v46;

  v10 = *(_DWORD *)(a1 + 100);
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v11 = -1;
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0 && (gBBULogVerbosity & 0x80000000) == 0)
  {
    _BBULog(21, 0, "allowRetry", "", "Retry limits are src.retryLimit:%u  evt.retryLimit:%u src.retryCounter:%u\n", a6, a7, a8, *(_DWORD *)(a1 + 100));
    v11 = gBBULogMaskGet(void)::once;
  }
  v12 = *(_DWORD *)(a4 + 28);
  v14 = *(_DWORD *)(a1 + 96);
  v13 = *(_DWORD *)(a1 + 100);
  if (v13 >= v12)
    v13 = *(_DWORD *)(a4 + 28);
  if (v12)
    v15 = v13;
  else
    v15 = v10;
  v16 = v14 + 1;
  *(_DWORD *)(a1 + 96) = v14 + 1;
  if (v11 == -1)
  {
    v17 = *(_QWORD *)gBBULogMaskGet(void)::sBBULogMask;
    v18 = gBBULogVerbosity;
    if (v16 > v15)
      goto LABEL_13;
LABEL_23:
    if ((v17 & 0x200000) != 0 && (v18 & 0x80000000) == 0)
      _BBULog(21, 0, "allowRetry", "", "Clearing error states since we are retrying.\n", a6, a7, a8, v40);
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    v22 = qword_253D31DC8;
    if (!qword_253D31DC8)
    {
      v23 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
      object[0] = 0;
      ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v23, "BBUError", QOS_CLASS_UTILITY, object);
      if (object[0])
        dispatch_release(object[0]);
      v23->__on_zero_shared_weak = 0;
      v23[1].~__shared_weak_count = 0;
      v23[1].~__shared_weak_count_0 = 0;
      std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&block, v23);
      v24 = *(_OWORD *)&block.__r_.__value_.__l.__data_;
      *(_OWORD *)&block.__r_.__value_.__l.__data_ = 0uLL;
      v25 = (std::__shared_weak_count *)off_253D31DD0;
      *(_OWORD *)&qword_253D31DC8 = v24;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      size = (std::__shared_weak_count *)block.__r_.__value_.__l.__size_;
      if (block.__r_.__value_.__l.__size_)
      {
        v29 = (unint64_t *)(block.__r_.__value_.__l.__size_ + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v22 = qword_253D31DC8;
    }
    v31 = (std::__shared_weak_count *)off_253D31DD0;
    if (off_253D31DD0)
    {
      v32 = (unint64_t *)((char *)off_253D31DD0 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    object[0] = (dispatch_object_t)MEMORY[0x24BDAC760];
    object[1] = (dispatch_object_t)0x40000000;
    object[2] = (dispatch_object_t)___ZN8BBUError11clearErrorsEv_block_invoke;
    object[3] = (dispatch_object_t)&__block_descriptor_tmp_7;
    object[4] = v22;
    v42 = object;
    block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
    block.__r_.__value_.__l.__size_ = 0x40000000;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    v44 = (unint64_t)&__block_descriptor_tmp_10;
    v45 = v22;
    v46 = &v42;
    isa = v22[2].isa;
    if (v22[3].isa)
    {
      dispatch_async_and_wait(isa, &block);
      if (!v31)
        goto LABEL_51;
    }
    else
    {
      dispatch_sync(isa, &block);
      if (!v31)
        goto LABEL_51;
    }
    v38 = (unint64_t *)&v31->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
LABEL_51:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
        goto LABEL_53;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x20) != 0)
      {
LABEL_53:
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(21, 0, "allowRetry", "", "attempting %u out of %u\n", v35, v36, v37, *(_DWORD *)(a1 + 96));
      }
    }
    BBUpdaterController::personalize(*(_QWORD *)(a1 + 16), 32);
    return 1;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v17 = *(_QWORD *)gBBULogMaskGet(void)::sBBULogMask;
  v18 = gBBULogVerbosity;
  if (v16 <= v15)
    goto LABEL_23;
LABEL_13:
  if ((v17 & 2) != 0 && (v18 & 0x80000000) == 0)
    _BBULog(1, 0, "allowRetry", "", "too many retries: %u\n", a6, a7, a8, v15);
  v19 = *(_QWORD *)(a1 + 16);
  v20 = *(_DWORD *)(a4 + 24);
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&block, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    block = *(std::string *)a4;
  v44 = v20;
  BBUpdaterController::process_event<BBUpdaterControllerFSM::eventError>(v19, (uint64_t)&block);
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
    operator delete(block.__r_.__value_.__l.__data_);
  return 2;
}

void sub_212A8304C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  if (object)
    dispatch_release(object);
  operator delete(v24);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeSecond,BBUpdaterControllerFSM::eventCmdPerformNextStage,BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeBooted,BBUpdaterControllerFSM::performAction<(BBUStage)4>,boost::msm::front::none>>::execute(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = a1 + 4 * a2;
  *(_DWORD *)(a1 + 120) = 0;
  *(_DWORD *)(v3 + 24) = 1;
  BBUpdaterController::personalize(*(_QWORD *)(a1 + 16), 4);
  *(_DWORD *)(v3 + 24) = 1;
  ++*(_DWORD *)(a1 + 108);
  *(_DWORD *)(v3 + 24) = 2;
  return 1;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeFirst,BBUpdaterControllerFSM::eventCmdPerformNextStage,BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeSecond,BBUpdaterControllerFSM::performAction<(BBUStage)2>,boost::msm::front::none>>::execute(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = a1 + 4 * a2;
  *(_DWORD *)(a1 + 132) = 0;
  *(_DWORD *)(v3 + 24) = 0;
  BBUpdaterController::personalize(*(_QWORD *)(a1 + 16), 2);
  *(_DWORD *)(v3 + 24) = 0;
  ++*(_DWORD *)(a1 + 120);
  *(_DWORD *)(v3 + 24) = 1;
  return 1;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_::stateProvisionFinish,BBUpdaterControllerFSM::eventCmdPerformNextStage,boost::msm::front::none,BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_::finishProvision,boost::msm::front::none>>::execute(uint64_t a1)
{
  BBUpdaterController::provision(*(_QWORD *)(a1 + 16), 2);
  return 1;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_::stateProvisionStart,BBUpdaterControllerFSM::eventCmdPerformNextStage,BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_::stateProvisionFinish,BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_::startProvision,boost::msm::front::none>>::execute(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = a1 + 4 * a2;
  *(_DWORD *)(a1 + 108) = 0;
  *(_DWORD *)(v3 + 24) = 0;
  BBUpdaterController::provision(*(_QWORD *)(a1 + 16), 1);
  *(_DWORD *)(v3 + 24) = 0;
  ++*(_DWORD *)(a1 + 96);
  *(_DWORD *)(v3 + 24) = 1;
  return 1;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformNextStage>()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::frow<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage>::execute(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v6 = a1 + 280;
  if (boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventCmdPerformNextStage,BBUpdaterControllerFSM::eventCmdPerformNextStage>(a1 + 280, a4))
  {
    v7 = ((uint64_t (*)(uint64_t, _QWORD))_MergedGlobals_1[*(_DWORD *)(a1 + 304) + 53])(v6, 0);
    v8 = v7;
    if (*(_BYTE *)(a1 + 369))
      v9 = 0;
    else
      v9 = (_DWORD)v7 == 0;
    if (v9)
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage>(v6, v6, *(_DWORD *)(a1 + 304));
    *(_BYTE *)(a1 + 368) = 0;
    boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(v6);
  }
  else
  {
    v8 = 1;
  }
  *(_DWORD *)(a1 + 4 * a2 + 32) = 3;
  return v8;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdPerformNextStage>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;

  if (!boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventCmdPerformNextStage,BBUpdaterControllerFSM::eventCmdPerformNextStage>())
    return 1;
  v5 = ((uint64_t (*)(uint64_t, _QWORD))_MergedGlobals_1[*(_DWORD *)(a1 + 24) + 53])(a1, 0);
  v6 = v5;
  if ((!*(_BYTE *)(a1 + 89) || (a3 & 1) != 0) && !(_DWORD)v5)
    BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage>(a1, a1, *(_DWORD *)(a1 + 24));
  *(_BYTE *)(a1 + 88) = 0;
  if ((a3 & 6) == 0)
    boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  return v6;
}

BOOL boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventCmdPerformNextStage,BBUpdaterControllerFSM::eventCmdPerformNextStage>(uint64_t a1, uint64_t a2)
{
  int v3;
  std::string::size_type v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::value_type v8;
  std::string *v9;
  std::string *v10;
  std::string::value_type v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void (*v18)(uint64_t *, _WORD *, int);
  std::string v20;
  std::string::size_type v21;
  __int128 v22;
  std::string::size_type v23;
  __int128 __p;
  __int128 v25;
  std::string::value_type v26;
  unint64_t v27;
  uint64_t v28[3];
  __int128 v29;
  std::string::size_type v30;
  std::string v31;
  std::string::size_type v32;
  std::string::value_type v33;
  std::string v34;
  std::string v35;
  std::string::size_type v36;
  std::string::value_type v37;
  std::string v38;
  std::string v39;
  std::string::size_type v40;
  std::string::value_type v41;
  std::string v42;
  std::string v43;
  std::string::size_type v44;
  std::string::value_type v45;
  _BYTE v46[24];
  std::string v47;
  std::string::size_type v48;
  std::string::value_type v49;

  v3 = *(unsigned __int8 *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      v5 = *(_QWORD *)(a2 + 24);
      v21 = v5;
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_4:
        v34 = v20;
        v35.__r_.__value_.__r.__words[0] = v5;
        if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_5;
        goto LABEL_12;
      }
    }
    else
    {
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v5 = *(_QWORD *)(a2 + 24);
      v20.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      v21 = v5;
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_4;
    }
    std::string::__init_copy_ctor_external(&v34, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
    v5 = v21;
    v35.__r_.__value_.__r.__words[0] = v21;
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_5:
      v38 = v34;
      v39.__r_.__value_.__r.__words[0] = v5;
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_13;
    }
LABEL_12:
    std::string::__init_copy_ctor_external(&v38, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
    v5 = v35.__r_.__value_.__r.__words[0];
    v39.__r_.__value_.__r.__words[0] = v35.__r_.__value_.__r.__words[0];
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_6:
      v42 = v38;
      v43.__r_.__value_.__r.__words[0] = v5;
      *(_QWORD *)v46 = a1;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
LABEL_13:
    std::string::__init_copy_ctor_external(&v42, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
    v5 = v39.__r_.__value_.__r.__words[0];
    v43.__r_.__value_.__r.__words[0] = v39.__r_.__value_.__r.__words[0];
    *(_QWORD *)v46 = a1;
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_7:
      *(_OWORD *)&v46[8] = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[0] = v42.__r_.__value_.__r.__words[2];
      v47.__r_.__value_.__l.__size_ = v5;
      v47.__r_.__value_.__s.__data_[16] = 5;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
LABEL_14:
    std::string::__init_copy_ctor_external((std::string *)&v46[8], v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
    v47.__r_.__value_.__l.__size_ = v43.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v42.__r_.__value_.__l.__data_);
      v47.__r_.__value_.__s.__data_[16] = 5;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_17:
        *(_QWORD *)&v22 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdPerformNextStage>;
        *((_QWORD *)&v22 + 1) = 0;
        v23 = *(_QWORD *)v46;
        if (v47.__r_.__value_.__s.__data_[7] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p, *(const std::string::value_type **)&v46[8], *(std::string::size_type *)&v46[16]);
          *((_QWORD *)&v25 + 1) = v47.__r_.__value_.__l.__size_;
          v26 = v47.__r_.__value_.__s.__data_[16];
          if (v47.__r_.__value_.__s.__data_[7] < 0)
          {
            operator delete(*(void **)&v46[8]);
            if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_23:
              v29 = v22;
              v6 = v23;
              v30 = v23;
              if (SBYTE7(v25) < 0)
              {
                std::string::__init_copy_ctor_external(&v31, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
                v6 = v30;
              }
              else
              {
                *(_OWORD *)&v31.__r_.__value_.__l.__data_ = __p;
                v31.__r_.__value_.__r.__words[2] = v25;
              }
              v7 = *((_QWORD *)&v25 + 1);
              v32 = *((_QWORD *)&v25 + 1);
              v8 = v26;
              v33 = v26;
              v27 = 0;
              *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v29;
              v34.__r_.__value_.__r.__words[2] = v6;
              if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v35, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
                v7 = v32;
                v8 = v33;
                v6 = v34.__r_.__value_.__r.__words[2];
              }
              else
              {
                v35 = v31;
              }
              v36 = v7;
              v37 = v8;
              *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
              v38.__r_.__value_.__r.__words[2] = v6;
              if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v39, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
                v6 = v38.__r_.__value_.__r.__words[2];
                v7 = v36;
                v8 = v37;
              }
              else
              {
                v39 = v35;
              }
              v40 = v7;
              v41 = v8;
              *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
              v42.__r_.__value_.__r.__words[2] = v6;
              if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v43, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
                v7 = v40;
                v8 = v41;
                v6 = v42.__r_.__value_.__r.__words[2];
              }
              else
              {
                v43 = v39;
              }
              v44 = v7;
              v45 = v8;
              *(_OWORD *)v46 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
              *(_QWORD *)&v46[16] = v6;
              if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v47, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
                v7 = v44;
                v8 = v45;
              }
              else
              {
                v47 = v43;
              }
              v48 = v7;
              v49 = v8;
              v9 = (std::string *)operator new(0x40uLL);
              *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)v46;
              v9->__r_.__value_.__r.__words[2] = *(_QWORD *)&v46[16];
              v10 = v9 + 1;
              if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v10, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
                v11 = v49;
                v12 = SHIBYTE(v47.__r_.__value_.__r.__words[2]);
                v9[2].__r_.__value_.__r.__words[0] = v48;
                v9[2].__r_.__value_.__s.__data_[8] = v11;
                v28[0] = (uint64_t)v9;
                if (v12 < 0)
                {
                  operator delete(v47.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_65;
                }
                else if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                {
                  goto LABEL_65;
                }
              }
              else
              {
                *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
                v9[1].__r_.__value_.__r.__words[2] = v47.__r_.__value_.__r.__words[2];
                v9[2].__r_.__value_.__r.__words[0] = v7;
                v9[2].__r_.__value_.__s.__data_[8] = v8;
                v28[0] = (uint64_t)v9;
                if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                {
LABEL_65:
                  operator delete(v43.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
                  {
LABEL_66:
                    operator delete(v39.__r_.__value_.__l.__data_);
                    v27 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformNextStage>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformNextStage>,boost::_bi::value<unsigned char>>>)::stored_vtable;
                    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
                    {
LABEL_67:
                      operator delete(v35.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_46;
                      goto LABEL_68;
                    }
LABEL_45:
                    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_46;
LABEL_68:
                    operator delete(v31.__r_.__value_.__l.__data_);
LABEL_46:
                    v13 = *(_QWORD *)(a1 + 48);
                    v14 = *(_QWORD *)(a1 + 40);
                    v15 = 16 * (v13 - v14) - 1;
                    if (v13 == v14)
                      v15 = 0;
                    v16 = *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 64);
                    if (v15 == v16)
                    {
                      std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 32));
                      v14 = *(_QWORD *)(a1 + 40);
                      v16 = *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 64);
                    }
                    v17 = (_QWORD *)(*(_QWORD *)(v14 + ((v16 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v16 & 0x7F));
                    *v17 = 0;
                    boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v17, (uint64_t *)&v27);
                    ++*(_QWORD *)(a1 + 72);
                    if (v27)
                    {
                      if ((v27 & 1) == 0)
                      {
                        v18 = *(void (**)(uint64_t *, _WORD *, int))(v27 & 0xFFFFFFFFFFFFFFFELL);
                        if (v18)
                          v18(v28, v28, 2);
                      }
                      v27 = 0;
                    }
                    if (SBYTE7(v25) < 0)
                    {
                      operator delete((void *)__p);
                      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        return v3 == 0;
                    }
                    else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      return v3 == 0;
                    }
                    operator delete(v20.__r_.__value_.__l.__data_);
                    return v3 == 0;
                  }
LABEL_44:
                  v27 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformNextStage>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformNextStage>,boost::_bi::value<unsigned char>>>)::stored_vtable;
                  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_67;
                  goto LABEL_45;
                }
              }
              if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_66;
              goto LABEL_44;
            }
          }
          else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_23;
          }
        }
        else
        {
          __p = *(_OWORD *)&v46[8];
          v25 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
          v26 = v47.__r_.__value_.__s.__data_[16];
          if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_23;
        }
        operator delete(v34.__r_.__value_.__l.__data_);
        goto LABEL_23;
      }
    }
    else
    {
      v47.__r_.__value_.__s.__data_[16] = 5;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
    }
LABEL_16:
    operator delete(v38.__r_.__value_.__l.__data_);
    goto LABEL_17;
  }
  *(_BYTE *)(a1 + 88) = 1;
  return v3 == 0;
}

void sub_212A838FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;
  uint64_t v62;

  operator delete(v61);
  if (*(char *)(v62 - 81) < 0)
  {
    operator delete(*(void **)(v62 - 104));
    if ((*(char *)(v62 - 145) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a61 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v62 - 145) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v62 - 168));
  if ((a61 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a50 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(__p);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a39 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a45);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a24 & 0x80000000) == 0)
    {
LABEL_14:
      if (a14 < 0)
        operator delete(a9);
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(a19);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a34);
  if ((a24 & 0x80000000) == 0)
    goto LABEL_14;
  goto LABEL_13;
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformNextStage>,boost::_bi::value<unsigned char>>>>::manage(uint64_t *a1, _WORD *a2, int a3)
{
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  const char *v10;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = (std::string *)operator new(0x40uLL);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
      v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
      v7 = v6 + 1;
      if (*(char *)(v5 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(v5 + 24), *(_QWORD *)(v5 + 32));
      }
      else
      {
        v8 = *(_OWORD *)(v5 + 24);
        v6[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 40);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      v6[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(v5 + 48);
      v6[2].__r_.__value_.__s.__data_[8] = *(_BYTE *)(v5 + 56);
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      v9 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        if (*(char *)(v9 + 47) < 0)
          operator delete(*(void **)(v9 + 24));
        operator delete((void *)v9);
      }
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v10 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v10 == (const char *)(0x8000000212B52188 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v10, (const char *)(0x8000000212B52188 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
}

void sub_212A83BF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformNextStage>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[56];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B5205FLL & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B5205FLL & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A84298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::frow<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage>::execute(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v6 = a1 + 144;
  if (boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventCmdPerformNextStage,BBUpdaterControllerFSM::eventCmdPerformNextStage>(a1 + 144, a4))
  {
    v7 = ((uint64_t (*)(uint64_t, _QWORD))_MergedGlobals_1[*(_DWORD *)(a1 + 168) + 30])(v6, 0);
    v8 = v7;
    if (*(_BYTE *)(a1 + 233))
      v9 = 0;
    else
      v9 = (_DWORD)v7 == 0;
    if (v9)
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage>(v6, v6, *(_DWORD *)(a1 + 168));
    *(_BYTE *)(a1 + 232) = 0;
    boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(v6);
  }
  else
  {
    v8 = 1;
  }
  *(_DWORD *)(a1 + 4 * a2 + 32) = 5;
  return v8;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdPerformNextStage>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;

  if (!boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventCmdPerformNextStage,BBUpdaterControllerFSM::eventCmdPerformNextStage>())
    return 1;
  v5 = ((uint64_t (*)(uint64_t, _QWORD))_MergedGlobals_1[*(_DWORD *)(a1 + 24) + 30])(a1, 0);
  v6 = v5;
  if ((!*(_BYTE *)(a1 + 89) || (a3 & 1) != 0) && !(_DWORD)v5)
    BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage>(a1, a1, *(_DWORD *)(a1 + 24));
  *(_BYTE *)(a1 + 88) = 0;
  if ((a3 & 6) == 0)
    boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  return v6;
}

BOOL boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::do_pre_msg_queue_helper<BBUpdaterControllerFSM::eventCmdPerformNextStage,BBUpdaterControllerFSM::eventCmdPerformNextStage>(uint64_t a1, uint64_t a2)
{
  int v3;
  std::string::size_type v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::value_type v8;
  std::string *v9;
  std::string *v10;
  std::string::value_type v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void (*v18)(uint64_t *, _WORD *, int);
  std::string v20;
  std::string::size_type v21;
  __int128 v22;
  std::string::size_type v23;
  __int128 __p;
  __int128 v25;
  std::string::value_type v26;
  unint64_t v27;
  uint64_t v28[3];
  __int128 v29;
  std::string::size_type v30;
  std::string v31;
  std::string::size_type v32;
  std::string::value_type v33;
  std::string v34;
  std::string v35;
  std::string::size_type v36;
  std::string::value_type v37;
  std::string v38;
  std::string v39;
  std::string::size_type v40;
  std::string::value_type v41;
  std::string v42;
  std::string v43;
  std::string::size_type v44;
  std::string::value_type v45;
  _BYTE v46[24];
  std::string v47;
  std::string::size_type v48;
  std::string::value_type v49;

  v3 = *(unsigned __int8 *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      v5 = *(_QWORD *)(a2 + 24);
      v21 = v5;
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_4:
        v34 = v20;
        v35.__r_.__value_.__r.__words[0] = v5;
        if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_5;
        goto LABEL_12;
      }
    }
    else
    {
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v5 = *(_QWORD *)(a2 + 24);
      v20.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      v21 = v5;
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_4;
    }
    std::string::__init_copy_ctor_external(&v34, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
    v5 = v21;
    v35.__r_.__value_.__r.__words[0] = v21;
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_5:
      v38 = v34;
      v39.__r_.__value_.__r.__words[0] = v5;
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_13;
    }
LABEL_12:
    std::string::__init_copy_ctor_external(&v38, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
    v5 = v35.__r_.__value_.__r.__words[0];
    v39.__r_.__value_.__r.__words[0] = v35.__r_.__value_.__r.__words[0];
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_6:
      v42 = v38;
      v43.__r_.__value_.__r.__words[0] = v5;
      *(_QWORD *)v46 = a1;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
LABEL_13:
    std::string::__init_copy_ctor_external(&v42, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
    v5 = v39.__r_.__value_.__r.__words[0];
    v43.__r_.__value_.__r.__words[0] = v39.__r_.__value_.__r.__words[0];
    *(_QWORD *)v46 = a1;
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_7:
      *(_OWORD *)&v46[8] = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[0] = v42.__r_.__value_.__r.__words[2];
      v47.__r_.__value_.__l.__size_ = v5;
      v47.__r_.__value_.__s.__data_[16] = 5;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
LABEL_14:
    std::string::__init_copy_ctor_external((std::string *)&v46[8], v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
    v47.__r_.__value_.__l.__size_ = v43.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v42.__r_.__value_.__l.__data_);
      v47.__r_.__value_.__s.__data_[16] = 5;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_17:
        *(_QWORD *)&v22 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdPerformNextStage>;
        *((_QWORD *)&v22 + 1) = 0;
        v23 = *(_QWORD *)v46;
        if (v47.__r_.__value_.__s.__data_[7] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p, *(const std::string::value_type **)&v46[8], *(std::string::size_type *)&v46[16]);
          *((_QWORD *)&v25 + 1) = v47.__r_.__value_.__l.__size_;
          v26 = v47.__r_.__value_.__s.__data_[16];
          if (v47.__r_.__value_.__s.__data_[7] < 0)
          {
            operator delete(*(void **)&v46[8]);
            if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_23:
              v29 = v22;
              v6 = v23;
              v30 = v23;
              if (SBYTE7(v25) < 0)
              {
                std::string::__init_copy_ctor_external(&v31, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
                v6 = v30;
              }
              else
              {
                *(_OWORD *)&v31.__r_.__value_.__l.__data_ = __p;
                v31.__r_.__value_.__r.__words[2] = v25;
              }
              v7 = *((_QWORD *)&v25 + 1);
              v32 = *((_QWORD *)&v25 + 1);
              v8 = v26;
              v33 = v26;
              v27 = 0;
              *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v29;
              v34.__r_.__value_.__r.__words[2] = v6;
              if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v35, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
                v7 = v32;
                v8 = v33;
                v6 = v34.__r_.__value_.__r.__words[2];
              }
              else
              {
                v35 = v31;
              }
              v36 = v7;
              v37 = v8;
              *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
              v38.__r_.__value_.__r.__words[2] = v6;
              if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v39, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
                v6 = v38.__r_.__value_.__r.__words[2];
                v7 = v36;
                v8 = v37;
              }
              else
              {
                v39 = v35;
              }
              v40 = v7;
              v41 = v8;
              *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
              v42.__r_.__value_.__r.__words[2] = v6;
              if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v43, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
                v7 = v40;
                v8 = v41;
                v6 = v42.__r_.__value_.__r.__words[2];
              }
              else
              {
                v43 = v39;
              }
              v44 = v7;
              v45 = v8;
              *(_OWORD *)v46 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
              *(_QWORD *)&v46[16] = v6;
              if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v47, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
                v7 = v44;
                v8 = v45;
              }
              else
              {
                v47 = v43;
              }
              v48 = v7;
              v49 = v8;
              v9 = (std::string *)operator new(0x40uLL);
              *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)v46;
              v9->__r_.__value_.__r.__words[2] = *(_QWORD *)&v46[16];
              v10 = v9 + 1;
              if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v10, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
                v11 = v49;
                v12 = SHIBYTE(v47.__r_.__value_.__r.__words[2]);
                v9[2].__r_.__value_.__r.__words[0] = v48;
                v9[2].__r_.__value_.__s.__data_[8] = v11;
                v28[0] = (uint64_t)v9;
                if (v12 < 0)
                {
                  operator delete(v47.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_65;
                }
                else if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                {
                  goto LABEL_65;
                }
              }
              else
              {
                *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
                v9[1].__r_.__value_.__r.__words[2] = v47.__r_.__value_.__r.__words[2];
                v9[2].__r_.__value_.__r.__words[0] = v7;
                v9[2].__r_.__value_.__s.__data_[8] = v8;
                v28[0] = (uint64_t)v9;
                if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                {
LABEL_65:
                  operator delete(v43.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
                  {
LABEL_66:
                    operator delete(v39.__r_.__value_.__l.__data_);
                    v27 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformNextStage>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformNextStage>,boost::_bi::value<unsigned char>>>)::stored_vtable;
                    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
                    {
LABEL_67:
                      operator delete(v35.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_46;
                      goto LABEL_68;
                    }
LABEL_45:
                    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_46;
LABEL_68:
                    operator delete(v31.__r_.__value_.__l.__data_);
LABEL_46:
                    v13 = *(_QWORD *)(a1 + 48);
                    v14 = *(_QWORD *)(a1 + 40);
                    v15 = 16 * (v13 - v14) - 1;
                    if (v13 == v14)
                      v15 = 0;
                    v16 = *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 64);
                    if (v15 == v16)
                    {
                      std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 32));
                      v14 = *(_QWORD *)(a1 + 40);
                      v16 = *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 64);
                    }
                    v17 = (_QWORD *)(*(_QWORD *)(v14 + ((v16 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v16 & 0x7F));
                    *v17 = 0;
                    boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v17, (uint64_t *)&v27);
                    ++*(_QWORD *)(a1 + 72);
                    if (v27)
                    {
                      if ((v27 & 1) == 0)
                      {
                        v18 = *(void (**)(uint64_t *, _WORD *, int))(v27 & 0xFFFFFFFFFFFFFFFELL);
                        if (v18)
                          v18(v28, v28, 2);
                      }
                      v27 = 0;
                    }
                    if (SBYTE7(v25) < 0)
                    {
                      operator delete((void *)__p);
                      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        return v3 == 0;
                    }
                    else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      return v3 == 0;
                    }
                    operator delete(v20.__r_.__value_.__l.__data_);
                    return v3 == 0;
                  }
LABEL_44:
                  v27 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformNextStage>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformNextStage>,boost::_bi::value<unsigned char>>>)::stored_vtable;
                  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_67;
                  goto LABEL_45;
                }
              }
              if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_66;
              goto LABEL_44;
            }
          }
          else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_23;
          }
        }
        else
        {
          __p = *(_OWORD *)&v46[8];
          v25 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
          v26 = v47.__r_.__value_.__s.__data_[16];
          if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_23;
        }
        operator delete(v34.__r_.__value_.__l.__data_);
        goto LABEL_23;
      }
    }
    else
    {
      v47.__r_.__value_.__s.__data_[16] = 5;
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
    }
LABEL_16:
    operator delete(v38.__r_.__value_.__l.__data_);
    goto LABEL_17;
  }
  *(_BYTE *)(a1 + 88) = 1;
  return v3 == 0;
}

void sub_212A84AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;
  uint64_t v62;

  operator delete(v61);
  if (*(char *)(v62 - 81) < 0)
  {
    operator delete(*(void **)(v62 - 104));
    if ((*(char *)(v62 - 145) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a61 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v62 - 145) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v62 - 168));
  if ((a61 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a50 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(__p);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a39 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a45);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a24 & 0x80000000) == 0)
    {
LABEL_14:
      if (a14 < 0)
        operator delete(a9);
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(a19);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a34);
  if ((a24 & 0x80000000) == 0)
    goto LABEL_14;
  goto LABEL_13;
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformNextStage>,boost::_bi::value<unsigned char>>>>::manage(uint64_t *a1, _WORD *a2, int a3)
{
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  const char *v10;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = (std::string *)operator new(0x40uLL);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
      v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
      v7 = v6 + 1;
      if (*(char *)(v5 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(v5 + 24), *(_QWORD *)(v5 + 32));
      }
      else
      {
        v8 = *(_OWORD *)(v5 + 24);
        v6[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 40);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      v6[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(v5 + 48);
      v6[2].__r_.__value_.__s.__data_[8] = *(_BYTE *)(v5 + 56);
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      v9 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        if (*(char *)(v9 + 47) < 0)
          operator delete(*(void **)(v9 + 24));
        operator delete((void *)v9);
      }
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v10 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v10 == (const char *)(0x8000000212B5228ALL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v10, (const char *)(0x8000000212B5228ALL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
}

void sub_212A84DF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformNextStage>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[56];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B5205FLL & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B5205FLL & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A85498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdPerformCoreDump>(uint64_t a1, uint64_t a2, char a3)
{
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  int v9;
  char v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void (*v18)(_QWORD *, _QWORD *, uint64_t);
  int v20;
  unint64_t v21;
  _QWORD v22[3];

  qword_253D368C8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::TerminateFlag>::flag_false;
  unk_253D368D0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::TerminateFlag>::flag_true;
  qword_253D368B8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::TerminateFlag>::flag_false;
  unk_253D368C0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::TerminateFlag>::flag_false;
  qword_253D368A8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::TerminateFlag>::flag_false;
  unk_253D368B0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36898 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::TerminateFlag>::flag_false;
  unk_253D368A0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36888[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::TerminateFlag>::flag_false;
  unk_253D36890 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::TerminateFlag>::flag_false;
  v5 = ((uint64_t (*)(void))qword_253D36888[*(int *)(a1 + 32)])();
  v6 = ((uint64_t (*)(uint64_t))qword_253D36888[*(int *)(a1 + 36)])(a1);
  v7 = 1;
  if ((v5 & 1) == 0 && (v6 & 1) == 0)
  {
    qword_253D36918 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36920 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D36908 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36910 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368F8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36900 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368E8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368F0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368D8[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368E0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::InterruptedFlag>::flag_false;
    v8 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 32)])(a1);
    v9 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 36)])(a1);
    if ((v8 & 1) != 0 || v9)
    {
      qword_253D36CD8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false;
      unk_253D36CE0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false;
      qword_253D36CC8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false;
      unk_253D36CD0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false;
      qword_253D36CB8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false;
      unk_253D36CC0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false;
      qword_253D36CA8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false;
      unk_253D36CB0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false;
      qword_253D36C98[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false;
      unk_253D36CA0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false;
      v10 = ((uint64_t (*)(uint64_t))qword_253D36C98[*(int *)(a1 + 32)])(a1);
      v11 = ((uint64_t (*)(uint64_t))qword_253D36C98[*(int *)(a1 + 36)])(a1);
      if ((v10 & 1) == 0 && !v11)
        return 1;
    }
    if (*(_BYTE *)(a1 + 100))
    {
      v12 = operator new(0x20uLL);
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(a1 + 48);
      v15 = 16 * (v13 - v14) - 1;
      *v12 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdPerformCoreDump>;
      v12[1] = 0;
      v12[2] = a1;
      *((_BYTE *)v12 + 25) = 5;
      v21 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformCoreDump const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformCoreDump>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformCoreDump const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformCoreDump>,boost::_bi::value<unsigned char>>>)::stored_vtable;
      v22[0] = v12;
      if (v13 == v14)
        v15 = 0;
      v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      if (v15 == v16)
      {
        std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 40));
        v14 = *(_QWORD *)(a1 + 48);
        v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      }
      v17 = (_QWORD *)(*(_QWORD *)(v14 + ((v16 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v16 & 0x7F));
      *v17 = 0;
      boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v17, (uint64_t *)&v21);
      ++*(_QWORD *)(a1 + 80);
      if (v21)
      {
        if ((v21 & 1) == 0)
        {
          v18 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v21 & 0xFFFFFFFFFFFFFFFELL);
          if (v18)
            v18(v22, v22, 2);
        }
      }
      return 1;
    }
    *(_BYTE *)(a1 + 100) = 1;
    v20 = (*((uint64_t (**)(uint64_t, _QWORD))&unk_253D37150 + *(_DWORD *)(a1 + 32) + 1))(a1, 0);
    v7 = (*((unsigned int (**)(uint64_t, uint64_t))&unk_253D37150 + *(_DWORD *)(a1 + 36) + 1))(a1, 1) | v20;
    if ((!*(_BYTE *)(a1 + 101) || (a3 & 1) != 0) && !(_DWORD)v7)
    {
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformCoreDump>(a1, a1, *(_DWORD *)(a1 + 32));
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformCoreDump>(a1, a1, *(_DWORD *)(a1 + 36));
    }
    *(_BYTE *)(a1 + 100) = 0;
    if ((a3 & 6) == 0)
      boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  }
  return v7;
}

void sub_212A85944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformCoreDump>>::flag_false()
{
  return 0;
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformCoreDump const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformCoreDump>,boost::_bi::value<unsigned char>>>>::manage(_OWORD **a1, uint64_t a2, int a3)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  const char *v8;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = operator new(0x20uLL);
      v7 = v5[1];
      *v6 = *v5;
      v6[1] = v7;
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      if (*(_QWORD *)a2)
        operator delete(*(void **)a2);
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x8000000212B523BELL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x8000000212B523BELL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_WORD *)(a2 + 8) = 0;
      break;
  }
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformCoreDump const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformCoreDump>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[25];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformCoreDump>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B5238ALL & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B5238ALL & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A86138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformCoreDump>()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,BBUpdaterControllerFSM::eventCmdPerformCoreDump,BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,BBUpdaterControllerFSM::ControllerFSM_TOP::collectDump,boost::msm::front::none>>::execute(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  CFMutableDictionaryRef *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1 + 4 * a2;
  *(_DWORD *)(a1 + 452) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  v4 = (_DWORD *)(v3 + 32);
  v5 = *(CFMutableDictionaryRef **)(a1 + 16);
  if (BBUpdaterController::collectCoredumpInternal((BBUpdaterController *)v5))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_3;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_3;
    }
    if (gBBULogVerbosity >= 6)
      _BBULog(1, 6, "BBUpdaterController", "", "check failed: %s, %d, assertion: %s\n", v6, v7, v8, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterController.cpp");
  }
  else
  {
    CFDictionarySetValue(v5[4], CFSTR("done"), (const void *)*MEMORY[0x24BDBD270]);
  }
LABEL_3:
  *v4 = 0;
  ++*(_DWORD *)(a1 + 112);
  *v4 = 8;
  return 1;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdPerformBootup>(uint64_t a1, uint64_t a2, char a3)
{
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  int v9;
  char v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void (*v18)(_QWORD *, _QWORD *, uint64_t);
  int v20;
  unint64_t v21;
  _QWORD v22[3];

  qword_253D368C8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::TerminateFlag>::flag_false;
  unk_253D368D0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::TerminateFlag>::flag_true;
  qword_253D368B8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::TerminateFlag>::flag_false;
  unk_253D368C0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::TerminateFlag>::flag_false;
  qword_253D368A8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::TerminateFlag>::flag_false;
  unk_253D368B0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36898 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::TerminateFlag>::flag_false;
  unk_253D368A0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36888[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::TerminateFlag>::flag_false;
  unk_253D36890 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::TerminateFlag>::flag_false;
  v5 = ((uint64_t (*)(void))qword_253D36888[*(int *)(a1 + 32)])();
  v6 = ((uint64_t (*)(uint64_t))qword_253D36888[*(int *)(a1 + 36)])(a1);
  v7 = 1;
  if ((v5 & 1) == 0 && (v6 & 1) == 0)
  {
    qword_253D36918 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36920 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D36908 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36910 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368F8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36900 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368E8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368F0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368D8[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368E0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::InterruptedFlag>::flag_false;
    v8 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 32)])(a1);
    v9 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 36)])(a1);
    if ((v8 & 1) != 0 || v9)
    {
      qword_253D36D28 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false;
      unk_253D36D30 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false;
      qword_253D36D18 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false;
      unk_253D36D20 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false;
      qword_253D36D08 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false;
      unk_253D36D10 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false;
      qword_253D36CF8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false;
      unk_253D36D00 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false;
      qword_253D36CE8[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false;
      unk_253D36CF0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false;
      v10 = ((uint64_t (*)(uint64_t))qword_253D36CE8[*(int *)(a1 + 32)])(a1);
      v11 = ((uint64_t (*)(uint64_t))qword_253D36CE8[*(int *)(a1 + 36)])(a1);
      if ((v10 & 1) == 0 && !v11)
        return 1;
    }
    if (*(_BYTE *)(a1 + 100))
    {
      v12 = operator new(0x20uLL);
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(a1 + 48);
      v15 = 16 * (v13 - v14) - 1;
      *v12 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdPerformBootup>;
      v12[1] = 0;
      v12[2] = a1;
      *((_BYTE *)v12 + 25) = 5;
      v21 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformBootup const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformBootup>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformBootup const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformBootup>,boost::_bi::value<unsigned char>>>)::stored_vtable;
      v22[0] = v12;
      if (v13 == v14)
        v15 = 0;
      v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      if (v15 == v16)
      {
        std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 40));
        v14 = *(_QWORD *)(a1 + 48);
        v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      }
      v17 = (_QWORD *)(*(_QWORD *)(v14 + ((v16 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v16 & 0x7F));
      *v17 = 0;
      boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v17, (uint64_t *)&v21);
      ++*(_QWORD *)(a1 + 80);
      if (v21)
      {
        if ((v21 & 1) == 0)
        {
          v18 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v21 & 0xFFFFFFFFFFFFFFFELL);
          if (v18)
            v18(v22, v22, 2);
        }
      }
      return 1;
    }
    *(_BYTE *)(a1 + 100) = 1;
    v20 = (*((uint64_t (**)(uint64_t, _QWORD))&unk_253D371A8 + *(_DWORD *)(a1 + 32) + 1))(a1, 0);
    v7 = (*((unsigned int (**)(uint64_t, uint64_t))&unk_253D371A8 + *(_DWORD *)(a1 + 36) + 1))(a1, 1) | v20;
    if ((!*(_BYTE *)(a1 + 101) || (a3 & 1) != 0) && !(_DWORD)v7)
    {
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformBootup>(a1, a1, *(_DWORD *)(a1 + 32));
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformBootup>(a1, a1, *(_DWORD *)(a1 + 36));
    }
    *(_BYTE *)(a1 + 100) = 0;
    if ((a3 & 6) == 0)
      boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  }
  return v7;
}

void sub_212A8670C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformBootup>>::flag_false()
{
  return 0;
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformBootup const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformBootup>,boost::_bi::value<unsigned char>>>>::manage(_OWORD **a1, uint64_t a2, int a3)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  const char *v8;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = operator new(0x20uLL);
      v7 = v5[1];
      *v6 = *v5;
      v6[1] = v7;
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      if (*(_QWORD *)a2)
        operator delete(*(void **)a2);
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x8000000212B524E3 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x8000000212B524E3 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_WORD *)(a2 + 8) = 0;
      break;
  }
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformBootup const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformBootup>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[25];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformBootup>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B524B1 & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B524B1 & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A86F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformBootup>()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,BBUpdaterControllerFSM::eventCmdPerformBootup,BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,BBUpdaterControllerFSM::ControllerFSM_TOP::bootup<false>,boost::msm::front::none>>::execute(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = a1 + 4 * a2;
  *(_DWORD *)(a1 + 452) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  BBUpdaterController::bootup(*(BBUpdaterController **)(a1 + 16));
  *(_DWORD *)(v3 + 32) = 0;
  ++*(_DWORD *)(a1 + 440);
  *(_DWORD *)(v3 + 32) = 1;
  return 1;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>(uint64_t a1, uint64_t a2, char a3)
{
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  int v9;
  char v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void (*v18)(_QWORD *, _QWORD *, uint64_t);
  int v20;
  unint64_t v21;
  _QWORD v22[3];

  qword_253D368C8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::TerminateFlag>::flag_false;
  unk_253D368D0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::TerminateFlag>::flag_true;
  qword_253D368B8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::TerminateFlag>::flag_false;
  unk_253D368C0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::TerminateFlag>::flag_false;
  qword_253D368A8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::TerminateFlag>::flag_false;
  unk_253D368B0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36898 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::TerminateFlag>::flag_false;
  unk_253D368A0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::TerminateFlag>::flag_false;
  qword_253D36888[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::TerminateFlag>::flag_false;
  unk_253D36890 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::TerminateFlag>::flag_false;
  v5 = ((uint64_t (*)(void))qword_253D36888[*(int *)(a1 + 32)])();
  v6 = ((uint64_t (*)(uint64_t))qword_253D36888[*(int *)(a1 + 36)])(a1);
  v7 = 1;
  if ((v5 & 1) == 0 && (v6 & 1) == 0)
  {
    qword_253D36918 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36920 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D36908 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36910 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368F8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::InterruptedFlag>::flag_false;
    unk_253D36900 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368E8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368F0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::InterruptedFlag>::flag_false;
    qword_253D368D8[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::InterruptedFlag>::flag_false;
    unk_253D368E0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::InterruptedFlag>::flag_false;
    v8 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 32)])(a1);
    v9 = ((uint64_t (*)(uint64_t))qword_253D368D8[*(int *)(a1 + 36)])(a1);
    if ((v8 & 1) != 0 || v9)
    {
      qword_253D36D78 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false;
      unk_253D36D80 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false;
      qword_253D36D68 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false;
      unk_253D36D70 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false;
      qword_253D36D58 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false;
      unk_253D36D60 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false;
      qword_253D36D48 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false;
      unk_253D36D50 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false;
      qword_253D36D38[0] = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false;
      unk_253D36D40 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false;
      v10 = ((uint64_t (*)(uint64_t))qword_253D36D38[*(int *)(a1 + 32)])(a1);
      v11 = ((uint64_t (*)(uint64_t))qword_253D36D38[*(int *)(a1 + 36)])(a1);
      if ((v10 & 1) == 0 && !v11)
        return 1;
    }
    if (*(_BYTE *)(a1 + 100))
    {
      v12 = operator new(0x20uLL);
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(a1 + 48);
      v15 = 16 * (v13 - v14) - 1;
      *v12 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_event_internal<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>;
      v12[1] = 0;
      v12[2] = a1;
      *((_BYTE *)v12 + 25) = 5;
      v21 = (unint64_t)boost::function0<boost::msm::back::HandledEnum>::assign_to<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformManifestCheck const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>,boost::_bi::value<unsigned char>>>>(boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformManifestCheck const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>,boost::_bi::value<unsigned char>>>)::stored_vtable;
      v22[0] = v12;
      if (v13 == v14)
        v15 = 0;
      v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      if (v15 == v16)
      {
        std::deque<boost::function<boost::msm::back::HandledEnum ()(void)>>::__add_back_capacity((_QWORD *)(a1 + 40));
        v14 = *(_QWORD *)(a1 + 48);
        v16 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      }
      v17 = (_QWORD *)(*(_QWORD *)(v14 + ((v16 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v16 & 0x7F));
      *v17 = 0;
      boost::function0<boost::msm::back::HandledEnum>::move_assign((uint64_t)v17, (uint64_t *)&v21);
      ++*(_QWORD *)(a1 + 80);
      if (v21)
      {
        if ((v21 & 1) == 0)
        {
          v18 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v21 & 0xFFFFFFFFFFFFFFFELL);
          if (v18)
            v18(v22, v22, 2);
        }
      }
      return 1;
    }
    *(_BYTE *)(a1 + 100) = 1;
    v20 = (*((uint64_t (**)(uint64_t, _QWORD))&unk_253D37200 + *(_DWORD *)(a1 + 32) + 1))(a1, 0);
    v7 = (*((unsigned int (**)(uint64_t, uint64_t))&unk_253D37200 + *(_DWORD *)(a1 + 36) + 1))(a1, 1) | v20;
    if ((!*(_BYTE *)(a1 + 101) || (a3 & 1) != 0) && !(_DWORD)v7)
    {
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformManifestCheck>(a1, a1, *(_DWORD *)(a1 + 32));
      BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformManifestCheck>(a1, a1, *(_DWORD *)(a1 + 36));
    }
    *(_BYTE *)(a1 + 100) = 0;
    if ((a3 & 6) == 0)
      boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::process_message_queue<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>(a1);
  }
  return v7;
}

void sub_212A87400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function<boost::msm::back::HandledEnum ()(void)>::~function(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::FlagHandler<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::EndInterruptFlag<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>>::flag_false()
{
  return 0;
}

void boost::detail::function::functor_manager<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformManifestCheck const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>,boost::_bi::value<unsigned char>>>>::manage(_OWORD **a1, uint64_t a2, int a3)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  const char *v8;

  switch(a3)
  {
    case 0:
      v5 = *a1;
      v6 = operator new(0x20uLL);
      v7 = v5[1];
      *v6 = *v5;
      v6[1] = v7;
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *a1;
      *a1 = 0;
      break;
    case 2:
      if (*(_QWORD *)a2)
        operator delete(*(void **)a2);
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x8000000212B5260DLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x8000000212B5260DLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = *a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_WORD *)(a2 + 8) = 0;
      break;
  }
}

uint64_t boost::detail::function::function_obj_invoker0<boost::_bi::bind_t<boost::msm::back::HandledEnum,boost::_mfi::mf2<boost::msm::back::HandledEnum,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformManifestCheck const&,unsigned char>,boost::_bi::list3<boost::_bi::value<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>*>,boost::_bi::value<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>,boost::_bi::value<unsigned char>>>,boost::msm::back::HandledEnum>::invoke(unsigned __int8 **a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v5;

  v1 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*a1;
  v2 = *((_QWORD *)*a1 + 1);
  v3 = (*a1)[25];
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))*a1;
  v5 = (_QWORD *)(*((_QWORD *)*a1 + 2) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v5 + v4);
  return v4(v5, v1 + 3, v3);
}

void BBUpdaterControllerFSM::FSMBase<BBUpdaterControllerFSM::ControllerFSM_TOP>::no_transition<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformManifestCheck>(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  std::string v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  void *__dst[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 __p;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[5];

  memset(v80, 170, 24);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3) <= a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/API/BBUpdaterControllerFSM.hpp", 0x87u, (ctu::LogMessageBuffer *)"Assertion failure(( state < stateNames.size()) && \"Unrecognized BBU Stage.\")", v53, v54, v55, v56);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v79 = v6;
  v78 = v6;
  v77 = v6;
  v76 = v6;
  v75 = v6;
  v74 = v6;
  v73 = v6;
  v72 = v6;
  v71 = v6;
  v68 = v6;
  __p = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v70 = MEMORY[0x24BEDB870] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB800];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v62 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v11, &v63);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v62 = v7 + 24;
  v70 = v8;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v63 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v68 = 0u;
  LODWORD(v69) = 16;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"no transition defined: ", 23);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in ", 4);
  v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" from ", 6);
  v19 = v80[0] + 24 * a3;
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = v80[0] + 24 * a3;
  else
    v21 = *(_QWORD *)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" on ", 4);
  v25 = strlen((const char *)(0x8000000212B525D4 & 0x7FFFFFFFFFFFFFFFLL));
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, 0x8000000212B525D4 & 0x7FFFFFFFFFFFFFFFLL, v25);
  v60[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v60, 1);
  memset(__dst, 170, sizeof(__dst));
  if ((v69 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v29 = v66;
    }
    v30 = (const void *)*((_QWORD *)&v65 + 1);
    v27 = v29 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v29 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(__dst[2]) = 0;
      v28 = __dst;
      goto LABEL_21;
    }
    v30 = (const void *)v64;
    v27 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_62:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v27 >= 0x17)
  {
    v31 = v9;
    v32 = v12;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v27;
    __dst[2] = (void *)(v34 | 0x8000000000000000);
    __dst[0] = v28;
    v12 = v32;
    v9 = v31;
    goto LABEL_20;
  }
  HIBYTE(__dst[2]) = v27;
  v28 = __dst;
  if (v27)
LABEL_20:
    memmove(v28, v30, v27);
LABEL_21:
  *((_BYTE *)v28 + v27) = 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_27;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v35 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v39 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      LOBYTE(v39) = __dst[0];
    _BBULog(1, 0, v35, "", "%s", v36, v37, v38, (char)v39);
  }
LABEL_27:
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v60 = v40;
  *(_OWORD *)&v60[16] = v40;
  if ((v69 & 0x10) != 0)
  {
    v41 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) < (unint64_t)v66)
    {
      *((_QWORD *)&v68 + 1) = v66;
      v41 = v66;
    }
    v42 = (const void *)*((_QWORD *)&v65 + 1);
    v43 = v41 - *((_QWORD *)&v65 + 1);
    if ((unint64_t)(v41 - *((_QWORD *)&v65 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v69 & 8) == 0)
    {
      HIBYTE(v59) = 0;
      LOBYTE(v58) = 0;
      goto LABEL_36;
    }
    v42 = (const void *)v64;
    v43 = v65 - v64;
    if ((_QWORD)v65 - (_QWORD)v64 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_64:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v44 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v58 + 1) = v43;
    v59 = v47 | 0x8000000000000000;
    *(_QWORD *)&v58 = v44;
  }
  else
  {
    HIBYTE(v59) = v43;
    v44 = &v58;
    if (!v43)
    {
      LOBYTE(v58) = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_42:
      v48 = (void *)v58;
      std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
      *(_QWORD *)&v60[24] = 44;
      operator delete(v48);
      v45 = *(_QWORD *)(a2 + 16);
      if ((v60[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_43;
    }
  }
  memmove(v44, v42, v43);
  *((_BYTE *)v44 + v43) = 0;
  if (SHIBYTE(v59) < 0)
    goto LABEL_42;
LABEL_36:
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  *(_QWORD *)&v60[24] = 44;
  v45 = *(_QWORD *)(a2 + 16);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_37:
    v57 = *(std::string *)v60;
    goto LABEL_44;
  }
LABEL_43:
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v60, *(std::string::size_type *)&v60[8]);
LABEL_44:
  BBUpdaterController::handleError(v45, &v57, *(int *)&v60[24]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v60[23] & 0x80000000) == 0)
      goto LABEL_46;
LABEL_59:
    operator delete(*(void **)v60);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_60;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v60[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_46:
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_60:
  operator delete(__dst[0]);
LABEL_47:
  v62 = *v9;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = v9[3];
  *(_QWORD *)&v63 = v12 + 16;
  if (SBYTE7(v68) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v70);
  v49 = v80[0];
  if (v80[0])
  {
    v50 = v80[1];
    v51 = (void *)v80[0];
    if (v80[1] != v80[0])
    {
      do
      {
        if (*(char *)(v50 - 1) < 0)
          operator delete(*(void **)(v50 - 24));
        v50 -= 24;
      }
      while (v50 != v49);
      v51 = (void *)v80[0];
    }
    v80[1] = v49;
    operator delete(v51);
  }
}

void sub_212A87BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>()
{
  return 0;
}

uint64_t boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,BBUpdaterControllerFSM::eventCmdPerformManifestCheck,BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,BBUpdaterControllerFSM::ControllerFSM_TOP::checkManifest,boost::msm::front::none>>::execute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = a1 + 4 * (int)a2;
  *(_DWORD *)(a1 + 452) = 0;
  *(_DWORD *)(v9 + 32) = 0;
  BBUpdaterController::checkManifest(*(BBUpdaterController **)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(v9 + 32) = 0;
  ++*(_DWORD *)(a1 + 428);
  *(_DWORD *)(v9 + 32) = 2;
  return 1;
}

uint64_t __cxx_global_var_init_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUPartitionManager>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance, &dword_212A4D000);
  }
  return result;
}

uint64_t __cxx_global_var_init_366()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUError>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance, &dword_212A4D000);
  }
  return result;
}

void __cxx_global_var_init_367()
{
  if ((byte_253D366D0 & 1) == 0)
  {
    byte_253D366D0 = 1;
    qword_253D36DD8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventError>;
    qword_253D36DD0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventError>;
    qword_253D36DC0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventError>;
    qword_253D36DB8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventError>;
    qword_253D36DB0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventError>;
    qword_253D36DA8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventError>;
    qword_253D36DA0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventError>;
    qword_253D36D98 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventError>;
    qword_253D36D90 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventError>;
    qword_253D36DC8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateRegularMode,BBUpdaterControllerFSM::eventError,BBUpdaterControllerFSM::ControllerFSM_TOP::stateDebugMode,BBUpdaterControllerFSM::ControllerFSM_TOP::handleError,boost::msm::front::none>>::execute;
  }
}

void __cxx_global_var_init_368()
{
  if ((byte_253D366D8 & 1) == 0)
  {
    byte_253D366D8 = 1;
    qword_253D367D8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventSkipPersonalize>;
    unk_253D367E0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventSkipPersonalize>;
    qword_253D367C8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventSkipPersonalize>;
    unk_253D367D0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeSecond,BBUpdaterControllerFSM::eventSkipPersonalize,BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeBooted,BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::skipPersonalize,boost::msm::front::none>>::execute;
  }
}

void __cxx_global_var_init_369()
{
  if ((byte_253D366E0 & 1) == 0)
  {
    byte_253D366E0 = 1;
    qword_253D36E30 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventSkipPersonalize>;
    qword_253D36E28 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventSkipPersonalize>;
    qword_253D36E20 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventSkipPersonalize>;
    qword_253D36E18 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventSkipPersonalize>;
    qword_253D36E10 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventSkipPersonalize>;
    qword_253D36E08 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventSkipPersonalize>;
    qword_253D36DF8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventSkipPersonalize>;
    qword_253D36DF0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventSkipPersonalize>;
    qword_253D36DE8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventSkipPersonalize>;
    qword_253D36E00 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::frow<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventSkipPersonalize>::execute;
  }
}

void __cxx_global_var_init_370()
{
  if ((byte_253D366E8 & 1) == 0)
  {
    byte_253D366E8 = 1;
    qword_253D36800 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeBooted,BBUpdaterControllerFSM::eventRetry,boost::msm::front::none,BBUpdaterControllerFSM::performAction<(BBUStage)8>,BBUpdaterControllerFSM::ControllerFSM_TOP::allowRetry>>::execute;
    unk_253D36808 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventRetry>;
    qword_253D367F0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeFirst,BBUpdaterControllerFSM::eventRetry,boost::msm::front::none,BBUpdaterControllerFSM::queryAction<(BBUStage)2>,BBUpdaterControllerFSM::ControllerFSM_TOP::allowRetry>>::execute;
    unk_253D367F8 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeSecond,BBUpdaterControllerFSM::eventRetry,boost::msm::front::none,BBUpdaterControllerFSM::performAction<(BBUStage)8>,BBUpdaterControllerFSM::ControllerFSM_TOP::allowRetry>>::execute;
  }
}

void __cxx_global_var_init_371()
{
  if ((byte_253D366F0 & 1) == 0)
  {
    byte_253D366F0 = 1;
    qword_253D36E88 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventRetry>;
    qword_253D36E80 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventRetry>;
    qword_253D36E78 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventRetry>;
    qword_253D36E70 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventRetry>;
    qword_253D36E68 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventRetry>;
    qword_253D36E40 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventRetry>;
    qword_253D36E58 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::frow<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventRetry>::execute;
    qword_253D36E60 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,BBUpdaterControllerFSM::eventRetry,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::queryAction<(BBUStage)2>,boost::msm::front::none>>::execute;
    qword_253D36E50 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,BBUpdaterControllerFSM::eventRetry,boost::msm::front::none,BBUpdaterControllerFSM::ControllerFSM_TOP::checkManifest,BBUpdaterControllerFSM::ControllerFSM_TOP::allowRetry>>::execute;
    qword_253D36E48 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,BBUpdaterControllerFSM::eventRetry,boost::msm::front::none,BBUpdaterControllerFSM::ControllerFSM_TOP::bootup<true>,BBUpdaterControllerFSM::ControllerFSM_TOP::allowRetry>>::execute;
  }
}

void __cxx_global_var_init_372()
{
  if ((byte_253D366F8 & 1) == 0)
  {
    byte_253D366F8 = 1;
    qword_253D36EE0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventContinue>;
    qword_253D36ED8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventContinue>;
    qword_253D36ED0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventContinue>;
    qword_253D36EC0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventContinue>;
    qword_253D36EB0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventContinue>;
    qword_253D36E98 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventContinue>;
    qword_253D36EC8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,BBUpdaterControllerFSM::eventContinue,BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::front::none,boost::msm::front::none>>::execute;
    qword_253D36EB8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,BBUpdaterControllerFSM::eventContinue,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::front::none,boost::msm::front::none>>::execute;
    qword_253D36EA8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,BBUpdaterControllerFSM::eventContinue,BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::front::none,boost::msm::front::none>>::execute;
    qword_253D36EA0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,BBUpdaterControllerFSM::eventContinue,BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,boost::msm::front::none,boost::msm::front::none>>::execute;
  }
}

void __cxx_global_var_init_373()
{
  if ((byte_253D36700 & 1) == 0)
  {
    byte_253D36700 = 1;
    qword_253D36F38 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventRepersonalize>;
    qword_253D36F30 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventRepersonalize>;
    qword_253D36F28 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventRepersonalize>;
    qword_253D36F18 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventRepersonalize>;
    qword_253D36F10 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventRepersonalize>;
    qword_253D36F08 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventRepersonalize>;
    qword_253D36F00 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventRepersonalize>;
    qword_253D36EF8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventRepersonalize>;
    qword_253D36EF0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventRepersonalize>;
    qword_253D36F20 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,BBUpdaterControllerFSM::eventRepersonalize,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::queryAction<(BBUStage)2>,BBUpdaterControllerFSM::ControllerFSM_TOP::allowRePerso>>::execute;
  }
}

void __cxx_global_var_init_374()
{
  if ((byte_253D36708 & 1) == 0)
  {
    byte_253D36708 = 1;
    qword_253D36F90 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventFinalize>;
    qword_253D36F88 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventFinalize>;
    qword_253D36F80 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventFinalize>;
    qword_253D36F78 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventFinalize>;
    qword_253D36F68 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventFinalize>;
    qword_253D36F58 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventFinalize>;
    qword_253D36F50 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventFinalize>;
    qword_253D36F48 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventFinalize>;
    qword_253D36F70 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFinalize,BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,BBUpdaterControllerFSM::ControllerFSM_TOP::finalize,boost::msm::front::none>>::execute;
    qword_253D36F60 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFinalize,BBUpdaterControllerFSM::ControllerFSM_TOP::stateFinalize,BBUpdaterControllerFSM::ControllerFSM_TOP::finalize,boost::msm::front::none>>::execute;
  }
}

void __cxx_global_var_init_375()
{
  if ((byte_253D36710 & 1) == 0)
  {
    byte_253D36710 = 1;
    qword_253D36828 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdQueryInfo>;
    unk_253D36830 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeEUICC,BBUpdaterControllerFSM::eventCmdQueryInfo,boost::msm::front::none,BBUpdaterControllerFSM::queryAction<(BBUStage)32>,boost::msm::front::none>>::execute;
    qword_253D36818 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeFirst,BBUpdaterControllerFSM::eventCmdQueryInfo,boost::msm::front::none,BBUpdaterControllerFSM::queryAction<(BBUStage)2>,boost::msm::front::none>>::execute;
    unk_253D36820 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeSecond,BBUpdaterControllerFSM::eventCmdQueryInfo,boost::msm::front::none,BBUpdaterControllerFSM::queryAction<(BBUStage)4>,boost::msm::front::none>>::execute;
  }
}

void __cxx_global_var_init_376()
{
  if ((byte_253D36718 & 1) == 0)
  {
    byte_253D36718 = 1;
    qword_253D36798 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_::stateProvisionStart,BBUpdaterControllerFSM::eventCmdQueryInfo,boost::msm::front::none,BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_::gatherParam,boost::msm::front::none>>::execute;
    unk_253D367A0 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::_irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_::stateProvisionFinish,BBUpdaterControllerFSM::eventCmdQueryInfo,boost::msm::front::none,boost::msm::front::none,boost::msm::front::none>>::execute;
  }
}

void __cxx_global_var_init_377()
{
  if ((byte_253D36720 & 1) == 0)
  {
    byte_253D36720 = 1;
    qword_253D36FE8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdQueryInfo>;
    qword_253D36FE0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdQueryInfo>;
    qword_253D36FD8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdQueryInfo>;
    qword_253D36FD0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdQueryInfo>;
    qword_253D36FC0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdQueryInfo>;
    qword_253D36FB0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdQueryInfo>;
    qword_253D36FA8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdQueryInfo>;
    qword_253D36FB8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::frow<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo>::execute;
    qword_253D36FC8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::frow<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdQueryInfo>::execute;
    qword_253D36FA0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,BBUpdaterControllerFSM::eventCmdQueryInfo,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::queryAction<(BBUStage)2>,boost::msm::front::none>>::execute;
  }
}

void __cxx_global_var_init_378()
{
  if ((byte_253D36728 & 1) == 0)
  {
    byte_253D36728 = 1;
    qword_253D36840 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventEUICC>;
    unk_253D36848 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventEUICC>;
    qword_253D36850 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeBooted,BBUpdaterControllerFSM::eventEUICC,BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeEUICC,BBUpdaterControllerFSM::performAction<(BBUStage)32>,boost::msm::front::none>>::execute;
    unk_253D36858 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventEUICC>;
  }
}

void __cxx_global_var_init_379()
{
  if ((byte_253D36730 & 1) == 0)
  {
    byte_253D36730 = 1;
    qword_253D37040 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventEUICC>;
    qword_253D37038 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventEUICC>;
    qword_253D37030 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventEUICC>;
    qword_253D37028 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventEUICC>;
    qword_253D37020 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventEUICC>;
    qword_253D37018 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventEUICC>;
    qword_253D37008 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventEUICC>;
    qword_253D37000 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventEUICC>;
    qword_253D36FF8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventEUICC>;
    qword_253D37010 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::frow<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventEUICC>::execute;
  }
}

void __cxx_global_var_init_380()
{
  if ((byte_253D36738 & 1) == 0)
  {
    byte_253D36738 = 1;
    qword_253D37098 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventFuse>;
    qword_253D37090 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventFuse>;
    qword_253D37088 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventFuse>;
    qword_253D37080 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventFuse>;
    qword_253D37078 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventFuse>;
    qword_253D37070 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventFuse>;
    qword_253D37060 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventFuse>;
    qword_253D37058 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventFuse>;
    qword_253D37050 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventFuse>;
    qword_253D37068 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventFuse,BBUpdaterControllerFSM::ControllerFSM_TOP::stateFusing,BBUpdaterControllerFSM::ControllerFSM_TOP::fuse,boost::msm::front::none>>::execute;
  }
}

void __cxx_global_var_init_381()
{
  if ((byte_253D36740 & 1) == 0)
  {
    byte_253D36740 = 1;
    qword_253D370F0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventProvision>;
    qword_253D370E8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventProvision>;
    qword_253D370E0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventProvision>;
    qword_253D370D8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventProvision>;
    qword_253D370D0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventProvision>;
    qword_253D370C8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventProvision>;
    qword_253D370B8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventProvision>;
    qword_253D370B0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventProvision>;
    qword_253D370A8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventProvision>;
    qword_253D370C0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::_row_<boost::msm::front::Row<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventProvision,boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,boost::msm::front::none,boost::msm::front::none>>::execute;
  }
}

void __cxx_global_var_init_382()
{
  if ((byte_253D36748 & 1) == 0)
  {
    byte_253D36748 = 1;
    qword_253D36878 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformNextStage>;
    unk_253D36880 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeEUICC,BBUpdaterControllerFSM::eventCmdPerformNextStage,boost::msm::front::none,BBUpdaterControllerFSM::performAction<(BBUStage)32>,BBUpdaterControllerFSM::ControllerFSM_TOP::allowRetry>>::execute;
    qword_253D36868 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeFirst,BBUpdaterControllerFSM::eventCmdPerformNextStage,BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeSecond,BBUpdaterControllerFSM::performAction<(BBUStage)2>,boost::msm::front::none>>::execute;
    unk_253D36870 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeSecond,BBUpdaterControllerFSM::eventCmdPerformNextStage,BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_::statePersonalizeBooted,BBUpdaterControllerFSM::performAction<(BBUStage)4>,boost::msm::front::none>>::execute;
  }
}

void __cxx_global_var_init_383()
{
  if ((byte_253D36750 & 1) == 0)
  {
    byte_253D36750 = 1;
    qword_253D367B0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_::stateProvisionStart,BBUpdaterControllerFSM::eventCmdPerformNextStage,BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_::stateProvisionFinish,BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_::startProvision,boost::msm::front::none>>::execute;
    unk_253D367B8 = boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_irow_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_::stateProvisionFinish,BBUpdaterControllerFSM::eventCmdPerformNextStage,boost::msm::front::none,BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_::finishProvision,boost::msm::front::none>>::execute;
  }
}

void __cxx_global_var_init_384()
{
  if ((byte_253D36758 & 1) == 0)
  {
    byte_253D36758 = 1;
    qword_253D37148 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformNextStage>;
    qword_253D37140 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformNextStage>;
    qword_253D37138 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformNextStage>;
    qword_253D37130 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformNextStage>;
    qword_253D37120 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformNextStage>;
    qword_253D37110 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformNextStage>;
    qword_253D37108 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformNextStage>;
    qword_253D37100 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformNextStage>;
    qword_253D37118 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::frow<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Personalize_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage>::execute;
    qword_253D37128 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::frow<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP::Provision_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>,BBUpdaterControllerFSM::eventCmdPerformNextStage>::execute;
  }
}

void __cxx_global_var_init_385()
{
  if ((byte_253D36760 & 1) == 0)
  {
    byte_253D36760 = 1;
    qword_253D371A0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformCoreDump>;
    qword_253D37198 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformCoreDump>;
    qword_253D37190 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformCoreDump>;
    qword_253D37188 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformCoreDump>;
    qword_253D37180 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformCoreDump>;
    qword_253D37178 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformCoreDump>;
    qword_253D37170 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformCoreDump>;
    qword_253D37168 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformCoreDump>;
    qword_253D37160 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformCoreDump>;
    qword_253D37158 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,BBUpdaterControllerFSM::eventCmdPerformCoreDump,BBUpdaterControllerFSM::ControllerFSM_TOP::stateCoredump,BBUpdaterControllerFSM::ControllerFSM_TOP::collectDump,boost::msm::front::none>>::execute;
  }
}

void __cxx_global_var_init_386()
{
  if ((byte_253D36768 & 1) == 0)
  {
    byte_253D36768 = 1;
    qword_253D371F8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformBootup>;
    qword_253D371F0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformBootup>;
    qword_253D371E8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformBootup>;
    qword_253D371E0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformBootup>;
    qword_253D371D8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformBootup>;
    qword_253D371D0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformBootup>;
    qword_253D371C8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformBootup>;
    qword_253D371C0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformBootup>;
    qword_253D371B8 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformBootup>;
    qword_253D371B0 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,BBUpdaterControllerFSM::eventCmdPerformBootup,BBUpdaterControllerFSM::ControllerFSM_TOP::stateBooting,BBUpdaterControllerFSM::ControllerFSM_TOP::bootup<false>,boost::msm::front::none>>::execute;
  }
}

void __cxx_global_var_init_387()
{
  if ((byte_253D36770 & 1) == 0)
  {
    byte_253D36770 = 1;
    qword_253D37250 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>;
    qword_253D37248 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>;
    qword_253D37240 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>;
    qword_253D37238 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>;
    qword_253D37230 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>;
    qword_253D37228 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>;
    qword_253D37220 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>;
    qword_253D37218 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>;
    qword_253D37210 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::call_no_transition<BBUpdaterControllerFSM::eventCmdPerformManifestCheck>;
    qword_253D37208 = (uint64_t)boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::a_row_<boost::msm::front::Row<BBUpdaterControllerFSM::ControllerFSM_TOP::stateInit,BBUpdaterControllerFSM::eventCmdPerformManifestCheck,BBUpdaterControllerFSM::ControllerFSM_TOP::stateManifestCheck,BBUpdaterControllerFSM::ControllerFSM_TOP::checkManifest,boost::msm::front::none>>::execute;
  }
}

uint64_t eUICC::detail::StateMachine::Run(int *a1, void *a2, uint64_t a3, const __CFDictionary **a4)
{
  __int128 v7;
  const __CFDictionary *v8;
  BOOL v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **p_p;
  capabilities::radio *v17;
  int v18;
  int v19;
  capabilities::radio *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  BOOL v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count_vtbl *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t (***v60)();
  uint64_t v61;
  _QWORD *v62;
  signed int v63;
  _QWORD **v64;
  _QWORD *v65;
  _QWORD **v66;
  signed int v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  BOOL v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  const char *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  void *exception;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  unint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  unint64_t v104;
  const __CFDictionary *v105;
  __int128 v106;
  void *v107[2];
  __int128 v108;
  _QWORD **v109;
  _QWORD *v110[2];
  int v111;
  void *__p;
  uint64_t (**v113)();
  uint64_t (*v114)(uint64_t, uint64_t, int *, uint64_t);
  uint64_t (***v115)();
  int v116;
  _QWORD v117[3];
  _QWORD *v118;
  int v119;
  _QWORD v120[3];
  _QWORD *v121;
  int v122;
  _QWORD v123[3];
  _QWORD *v124;
  int v125;
  _QWORD v126[3];
  _QWORD *v127;
  int v128;
  _QWORD v129[3];
  _QWORD *v130;
  int v131;
  _QWORD v132[3];
  _QWORD *v133;
  int v134;
  _QWORD v135[3];
  _QWORD *v136;
  int v137;
  _BYTE v138[24];
  _BYTE *v139;
  int v140;
  _BYTE v141[24];
  _BYTE *v142;
  uint64_t v143;

  v143 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v107 = v7;
  v108 = v7;
  v106 = v7;
  v8 = *a4;
  v105 = v8;
  if (v8)
    CFRetain(v8);
  eUICC::Options::Options((uint64_t)&v106, &v105);
  if (v8)
    CFRelease(v8);
  if (BYTE10(v108) | BYTE10(v106))
    v9 = 0;
  else
    v9 = BYTE11(v106) == 0;
  v103 = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  v104 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a3 + 184))(&v101, a3);
  eUICC::Source::CreateFromZip(&v101, &v103);
  v10 = v102;
  if (v102)
  {
    p_shared_owners = (unint64_t *)&v102->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  eUICC::Options::ToString((eUICC::Options *)&v106, &__p);
  if (SHIBYTE(v114) >= 0)
    p_p = &__p;
  else
    LOBYTE(p_p) = (_BYTE)__p;
  v17 = (capabilities::radio *)_BBULog(0, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Options:\n%s\n", v13, v14, v15, (char)p_p);
  if (SHIBYTE(v114) < 0)
    operator delete(__p);
  v100 = 0xAAAAAAAAAAAAAAAALL;
  v18 = v106;
  v19 = BYTE9(v108);
  v20 = (capabilities::radio *)capabilities::radio::maverick(v17);
  if ((_DWORD)v20)
  {
    v24 = operator new(0x138uLL);
    v24[289] = 0;
    *(_QWORD *)v24 = &unk_24CE866C8;
    *((_QWORD *)v24 + 37) = a2;
    *((_DWORD *)v24 + 73) = v18;
    v24[290] = v19;
    v24[304] = 15;
    goto LABEL_24;
  }
  if (!capabilities::radio::ice(v20))
  {
    v100 = 0;
    if (gBBULogMaskGet(void)::once == -1)
    {
      v31 = *a1;
      if (v31 <= 9)
      {
LABEL_29:
        v32 = off_24CE7F678[v31];
LABEL_139:
        _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Fatal Error: Error creating vinyl valve! Current State: %s\n", v25, v26, v27, (char)v32);
        *a1 = 8;
        v77 = 9;
LABEL_140:
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        _BBULog(0, 0xFFFFFFFFLL, "eUICCStateMachine", "", "ret = %d\n", v33, v34, v35, v77);
        v90 = v100;
        v100 = 0;
        if (!v90)
          goto LABEL_144;
LABEL_143:
        (*(void (**)(unint64_t))(*(_QWORD *)v90 + 96))(v90);
        goto LABEL_144;
      }
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v31 = *a1;
      if (v31 <= 9)
        goto LABEL_29;
    }
    v32 = "??????";
    goto LABEL_139;
  }
  v24 = operator new(0x140uLL);
  eUICC::eUICCVinylICEValve::eUICCVinylICEValve((eUICC::eUICCVinylICEValve *)v24, a2, v18, v19 != 0);
LABEL_24:
  v100 = (unint64_t)v24;
  v28 = *a1;
  *a1 = 0;
  if (gBBULogMaskGet(void)::once != -1)
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if (v28 <= 9)
      goto LABEL_26;
LABEL_31:
    v29 = "??????";
    v30 = v9;
    goto LABEL_32;
  }
  if (v28 > 9)
    goto LABEL_31;
LABEL_26:
  v29 = off_24CE7F678[v28];
  v30 = v9;
LABEL_32:
  _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Resetting state machine: %s --> %s\n", v21, v22, v23, (char)v29);
  while (1)
  {
    if (*a1 > 7)
    {
      v77 = 0;
      goto LABEL_140;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      v36 = *a1;
      v37 = "??????";
      if (v36 > 9)
        goto LABEL_38;
LABEL_37:
      v37 = off_24CE7F678[v36];
      goto LABEL_38;
    }
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v36 = *a1;
    v37 = "??????";
    if (v36 <= 9)
      goto LABEL_37;
LABEL_38:
    _BBULog(0, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Running at state %s\n", v33, v34, v35, (char)v37);
    v39 = v103;
    v38 = (std::__shared_weak_count *)v104;
    if (v104)
    {
      v40 = (unint64_t *)(v104 + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v111 = 8;
    LODWORD(__p) = 0;
    v113 = off_24CE7F598;
    v114 = eUICC::detail::StateMachine::Start;
    v115 = &v113;
    v116 = 3;
    v117[0] = off_24CE7F598;
    v117[1] = eUICC::detail::StateMachine::Perso;
    v118 = v117;
    v119 = 1;
    v120[0] = off_24CE7F598;
    v120[1] = eUICC::detail::StateMachine::Recovery;
    v121 = v120;
    v122 = 2;
    v123[0] = off_24CE7F598;
    v123[1] = eUICC::detail::StateMachine::VersionCheck;
    v124 = v123;
    v125 = 4;
    v126[0] = off_24CE7F598;
    v126[1] = eUICC::detail::StateMachine::UpdateGold;
    v127 = v126;
    v128 = 5;
    v129[0] = off_24CE7F598;
    v129[1] = eUICC::detail::StateMachine::UpdateMain;
    v130 = v129;
    v131 = 6;
    v132[0] = off_24CE7F598;
    v132[1] = eUICC::detail::StateMachine::PostProcess;
    v133 = v132;
    v134 = 7;
    v135[0] = off_24CE7F598;
    v135[1] = eUICC::detail::StateMachine::Retry;
    v136 = v135;
    v137 = 8;
    v139 = 0;
    v140 = 9;
    v142 = 0;
    v110[0] = 0;
    v110[1] = 0;
    v109 = v110;
    std::__tree<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::__map_value_compare<eUICC::detail::StateMachine::State,std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::less<eUICC::detail::StateMachine::State>,true>,std::allocator<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>>>::__emplace_hint_unique_key_args<eUICC::detail::StateMachine::State,std::pair<eUICC::detail::StateMachine::State const,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>> const&>((uint64_t *)&v109, (uint64_t *)v110, 0, (uint64_t)&__p);
    std::__tree<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::__map_value_compare<eUICC::detail::StateMachine::State,std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::less<eUICC::detail::StateMachine::State>,true>,std::allocator<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>>>::__emplace_hint_unique_key_args<eUICC::detail::StateMachine::State,std::pair<eUICC::detail::StateMachine::State const,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>> const&>((uint64_t *)&v109, (uint64_t *)v110, v116, (uint64_t)&v116);
    std::__tree<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::__map_value_compare<eUICC::detail::StateMachine::State,std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::less<eUICC::detail::StateMachine::State>,true>,std::allocator<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>>>::__emplace_hint_unique_key_args<eUICC::detail::StateMachine::State,std::pair<eUICC::detail::StateMachine::State const,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>> const&>((uint64_t *)&v109, (uint64_t *)v110, v119, (uint64_t)&v119);
    std::__tree<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::__map_value_compare<eUICC::detail::StateMachine::State,std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::less<eUICC::detail::StateMachine::State>,true>,std::allocator<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>>>::__emplace_hint_unique_key_args<eUICC::detail::StateMachine::State,std::pair<eUICC::detail::StateMachine::State const,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>> const&>((uint64_t *)&v109, (uint64_t *)v110, v122, (uint64_t)&v122);
    std::__tree<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::__map_value_compare<eUICC::detail::StateMachine::State,std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::less<eUICC::detail::StateMachine::State>,true>,std::allocator<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>>>::__emplace_hint_unique_key_args<eUICC::detail::StateMachine::State,std::pair<eUICC::detail::StateMachine::State const,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>> const&>((uint64_t *)&v109, (uint64_t *)v110, v125, (uint64_t)&v125);
    std::__tree<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::__map_value_compare<eUICC::detail::StateMachine::State,std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::less<eUICC::detail::StateMachine::State>,true>,std::allocator<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>>>::__emplace_hint_unique_key_args<eUICC::detail::StateMachine::State,std::pair<eUICC::detail::StateMachine::State const,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>> const&>((uint64_t *)&v109, (uint64_t *)v110, v128, (uint64_t)&v128);
    std::__tree<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::__map_value_compare<eUICC::detail::StateMachine::State,std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::less<eUICC::detail::StateMachine::State>,true>,std::allocator<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>>>::__emplace_hint_unique_key_args<eUICC::detail::StateMachine::State,std::pair<eUICC::detail::StateMachine::State const,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>> const&>((uint64_t *)&v109, (uint64_t *)v110, v131, (uint64_t)&v131);
    std::__tree<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::__map_value_compare<eUICC::detail::StateMachine::State,std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::less<eUICC::detail::StateMachine::State>,true>,std::allocator<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>>>::__emplace_hint_unique_key_args<eUICC::detail::StateMachine::State,std::pair<eUICC::detail::StateMachine::State const,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>> const&>((uint64_t *)&v109, (uint64_t *)v110, v134, (uint64_t)&v134);
    std::__tree<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::__map_value_compare<eUICC::detail::StateMachine::State,std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::less<eUICC::detail::StateMachine::State>,true>,std::allocator<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>>>::__emplace_hint_unique_key_args<eUICC::detail::StateMachine::State,std::pair<eUICC::detail::StateMachine::State const,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>> const&>((uint64_t *)&v109, (uint64_t *)v110, v137, (uint64_t)&v137);
    std::__tree<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::__map_value_compare<eUICC::detail::StateMachine::State,std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::less<eUICC::detail::StateMachine::State>,true>,std::allocator<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>>>::__emplace_hint_unique_key_args<eUICC::detail::StateMachine::State,std::pair<eUICC::detail::StateMachine::State const,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>> const&>((uint64_t *)&v109, (uint64_t *)v110, v140, (uint64_t)&v140);
    v42 = v142;
    if (v142 == v141)
    {
      v42 = v141;
      v43 = 4;
    }
    else
    {
      if (!v142)
        goto LABEL_46;
      v43 = 5;
    }
    (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_46:
    v44 = v139;
    if (v139 == v138)
    {
      v44 = v138;
      v45 = 4;
    }
    else
    {
      if (!v139)
        goto LABEL_51;
      v45 = 5;
    }
    (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_51:
    v46 = v136;
    if (v136 == v135)
    {
      v46 = v135;
      v47 = 4;
    }
    else
    {
      if (!v136)
        goto LABEL_56;
      v47 = 5;
    }
    (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_56:
    v48 = v133;
    if (v133 == v132)
    {
      v48 = v132;
      v49 = 4;
    }
    else
    {
      if (!v133)
        goto LABEL_61;
      v49 = 5;
    }
    (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_61:
    v50 = v130;
    if (v130 == v129)
    {
      v50 = v129;
      v51 = 4;
    }
    else
    {
      if (!v130)
        goto LABEL_66;
      v51 = 5;
    }
    (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_66:
    v52 = v127;
    if (v127 == v126)
    {
      v52 = v126;
      v53 = 4;
    }
    else
    {
      if (!v127)
        goto LABEL_71;
      v53 = 5;
    }
    (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_71:
    v54 = v124;
    if (v124 == v123)
    {
      v54 = v123;
      v55 = 4;
    }
    else
    {
      if (!v124)
        goto LABEL_76;
      v55 = 5;
    }
    (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_76:
    v56 = v121;
    if (v121 == v120)
    {
      v56 = v120;
      v57 = 4;
    }
    else
    {
      if (!v121)
        goto LABEL_81;
      v57 = 5;
    }
    (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_81:
    v58 = v118;
    if (v118 == v117)
    {
      v58 = v117;
      v59 = 4;
    }
    else
    {
      if (!v118)
        goto LABEL_86;
      v59 = 5;
    }
    (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_86:
    v60 = v115;
    if (v115 == &v113)
    {
      v60 = &v113;
      v61 = 4;
      goto LABEL_90;
    }
    if (v115)
    {
      v61 = 5;
LABEL_90:
      (*v60)[v61]();
    }
    v62 = v110[0];
    if (!v110[0])
      goto LABEL_157;
    v63 = *a1;
    v64 = v110;
    do
    {
      v65 = v62;
      v66 = v64;
      v67 = *((_DWORD *)v62 + 8);
      v68 = v62 + 1;
      if (v67 >= v63)
      {
        v68 = v65;
        v64 = (_QWORD **)v65;
      }
      v62 = (_QWORD *)*v68;
    }
    while (v62);
    if (v64 == v110
      || (v67 >= v63 ? (v69 = v65) : (v69 = v66),
          v63 < *((_DWORD *)v69 + 8) || (v67 >= v63 ? (v70 = v65) : (v70 = v66), (v71 = v70[8]) == 0)))
    {
LABEL_157:
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/eUICC/StateMachine/eUICCStateMachine.cpp", 0x8Eu, (ctu::LogMessageBuffer *)"Assertion failure(((stateMap.end() != def) && def->second) && \"StateMachine is corrupted.\")", v96, v97, v98, v99);
    }
    __p = v39;
    v113 = (uint64_t (**)())v38;
    if (v38)
    {
      v72 = (unint64_t *)&v38->__shared_owners_;
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
      v71 = v70[8];
      if (!v71)
        std::__throw_bad_function_call[abi:ne180100]();
    }
    v77 = (*(uint64_t (**)(uint64_t, void **, __int128 *, int *, unint64_t *))(*(_QWORD *)v71 + 48))(v71, &__p, &v106, &v111, &v100);
    v78 = (std::__shared_weak_count *)v113;
    if (v113)
    {
      v79 = (unint64_t *)(v113 + 1);
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Ret %d from state %s next %s\n", v74, v75, v76, v77);
    v81 = (_DWORD)v77 == 45 || (_DWORD)v77 == 0;
    v82 = v111;
    if (!v81)
      v82 = 8;
    *a1 = v82;
    std::__tree<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::__map_value_compare<eUICC::detail::StateMachine::State,std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::less<eUICC::detail::StateMachine::State>,true>,std::allocator<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>>>::destroy(v110[0]);
    if (v38)
    {
      v86 = (unint64_t *)&v38->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if ((_DWORD)v77 == 45)
      break;
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Result %d next state %s allowRetry %d\n", v83, v84, v85, v77);
    if ((_DWORD)v77 != 0 && v30)
    {
      v77 = 0;
      v30 = 0;
      *a1 = 7;
    }
    if ((_DWORD)v77)
      goto LABEL_140;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    v88 = *a1;
    if (v88 <= 9)
      goto LABEL_136;
LABEL_154:
    v89 = "??????";
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v88 = *a1;
    if (v88 > 9)
      goto LABEL_154;
LABEL_136:
    v89 = off_24CE7F678[v88];
  }
  _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "eUICC -- back to host to personalize in state %s\n", v83, v84, v85, (char)v89);
  v77 = 0;
  v90 = v100;
  v100 = 0;
  if (v90)
    goto LABEL_143;
LABEL_144:
  v91 = (std::__shared_weak_count *)v104;
  if (!v104)
    goto LABEL_148;
  v92 = (unint64_t *)(v104 + 8);
  do
    v93 = __ldaxr(v92);
  while (__stlxr(v93 - 1, v92));
  if (!v93)
  {
    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
    std::__shared_weak_count::__release_weak(v91);
    if (SBYTE7(v108) < 0)
LABEL_149:
      operator delete(v107[0]);
  }
  else
  {
LABEL_148:
    if (SBYTE7(v108) < 0)
      goto LABEL_149;
  }
  return v77;
}

void sub_212A8914C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;

  operator delete(v44);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  if (a44 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t eUICC::detail::StateMachine::Start(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t result;
  _OWORD v16[16];
  _OWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)v17 + 10) = v6;
  v16[15] = v6;
  v17[0] = v6;
  v16[13] = v6;
  v16[14] = v6;
  v16[11] = v6;
  v16[12] = v6;
  v16[9] = v6;
  v16[10] = v6;
  v16[7] = v6;
  v16[8] = v6;
  v16[5] = v6;
  v16[6] = v6;
  v16[3] = v6;
  v16[4] = v6;
  v16[1] = v6;
  v16[2] = v6;
  v16[0] = v6;
  (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)a4 + 8))(v16);
  v13 = eUICC::HowToProceed((unsigned __int8 *)v16, a2, v7, v8, v9, v10, v11, v12);
  switch(v13)
  {
    case 0:
      return 18;
    case 3:
      v14 = 9;
      break;
    case 2:
      v14 = 6;
      break;
    default:
      v14 = 3;
      break;
  }
  result = 0;
  *a3 = v14;
  return result;
}

uint64_t eUICC::detail::StateMachine::Perso(uint64_t a1, uint64_t a2, int *a3, _QWORD *a4)
{
  __int128 v7;
  uint64_t v8;
  _OWORD *v9;
  int v10;
  std::string __p;
  _OWORD v13[15];
  __int128 v14;
  _OWORD v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)v15 + 10) = v7;
  v14 = v7;
  v15[0] = v7;
  v13[13] = v7;
  v13[14] = v7;
  v13[11] = v7;
  v13[12] = v7;
  v13[9] = v7;
  v13[10] = v7;
  v13[7] = v7;
  v13[8] = v7;
  v13[5] = v7;
  v13[6] = v7;
  v13[3] = v7;
  v13[4] = v7;
  v13[1] = v7;
  v13[2] = v7;
  v13[0] = v7;
  (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)*a4 + 8))(v13);
  if (BYTE4(v13[0]) == 1 || *(_BYTE *)(a2 + 40))
  {
    memset(&__p, 170, sizeof(__p));
    eUICC::Firmware::BootloaderVersion((eUICC::Firmware *)v14, BYTE1(v14), &__p);
    v8 = eUICC::Perso::Perform(a2, (uint64_t)&__p, a4);
    v9 = (_OWORD *)*a4;
    *(_OWORD *)((char *)v9 + 8) = 0u;
    v9 = (_OWORD *)((char *)v9 + 8);
    v9[15] = 0u;
    v9[16] = 0u;
    v9[13] = 0u;
    v9[14] = 0u;
    v9[11] = 0u;
    v9[12] = 0u;
    v9[9] = 0u;
    v9[10] = 0u;
    v9[7] = 0u;
    v9[8] = 0u;
    v9[5] = 0u;
    v9[6] = 0u;
    v9[3] = 0u;
    v9[4] = 0u;
    v9[1] = 0u;
    v9[2] = 0u;
    *(_OWORD *)((char *)v9 + 266) = 0u;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = 0;
  }
  if (*(_BYTE *)(a2 + 9))
    v10 = 6;
  else
    v10 = 1;
  *a3 = v10;
  return v8;
}

void sub_212A89698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t eUICC::detail::StateMachine::Recovery(uint64_t *a1, uint64_t a2, _DWORD *a3, _QWORD *a4)
{
  __int128 v7;
  capabilities::updater *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  unsigned __int8 *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t v54;
  unint64_t v55;
  void *__p[3];
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD v68[6];
  __int128 v69;
  _BYTE v70[26];
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v70[10] = v7;
  v69 = v7;
  *(_OWORD *)v70 = v7;
  v68[4] = v7;
  v68[5] = v7;
  v68[2] = v7;
  v68[3] = v7;
  v68[0] = v7;
  v68[1] = v7;
  v66 = v7;
  v67 = v7;
  v64 = v7;
  v65 = v7;
  v63 = v7;
  v61 = v7;
  v62 = v7;
  v59 = v7;
  v60 = v7;
  v8 = (capabilities::updater *)(*(_QWORD *(**)(__int128 *__return_ptr))(*(_QWORD *)*a4 + 8))(&v59);
  v9 = capabilities::updater::EUICCVinylSuccessStatus(v8);
  if ((_DWORD)v59 != v9)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Condition <<%s>> failed %s %s/%d\n", v11, v12, v13, (char)"euiccData.Valid()");
    return 18;
  }
  if (!BYTE7(v60))
  {
    v15 = 0;
    goto LABEL_60;
  }
  v57 = 0xAAAAAAAAAAAAAAAALL;
  v58 = 0xAAAAAAAAAAAAAAAALL;
  v14 = *a1;
  if (v70[19] < 5u)
    memset(__p, 0, sizeof(__p));
  else
    eUICC::eUICCHashedFWDir((eUICC *)__p, (char *)&v69, (uint64_t)&v69 + 3, v10);
  eUICC::Source::GetMainFirmware(v14, (uint64_t)__p, &v57);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v19 = v57;
    if (v57)
    {
LABEL_12:
      v20 = (_QWORD *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v19 + 8))(v19);
      v24 = *((_QWORD *)&v63 + 1) != *v20;
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "SM::Recovery -- normal? %d\n", v21, v22, v23, !v24);
      v54 = 0xAAAAAAAAAAAAAAAALL;
      v55 = 0xAAAAAAAAAAAAAAAALL;
      if (v24)
      {
        v26 = *a1;
        if (v70[19] < 5u)
          memset(__p, 0, sizeof(__p));
        else
          eUICC::eUICCHashedFWDir((eUICC *)__p, (char *)&v69, (uint64_t)&v69 + 3, v25);
        eUICC::Source::GetRecoveryForMac((ctu *)((char *)v68 + 3), v26, (const char *)__p, &v54);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        v28 = v54;
        if (!v54)
          goto LABEL_40;
      }
      else
      {
        v28 = v57;
        v54 = v57;
        v55 = v58;
        if (v58)
        {
          v29 = (unint64_t *)(v58 + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        if (!v28)
        {
LABEL_40:
          memset(__p, 170, sizeof(__p));
          ctu::hex((ctu *)((char *)v68 + 3), (const void *)8);
          if (gBBULogMaskGet(void)::once != -1)
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          v44 = __p;
          if (SHIBYTE(__p[2]) < 0)
            LOBYTE(v44) = __p[0];
          _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "SM::Recovery Missing gold with hash %s\n", v41, v42, v43, (char)v44);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          v27 = 2;
          v15 = 15;
          v45 = (std::__shared_weak_count *)v55;
          if (!v55)
            goto LABEL_55;
LABEL_51:
          p_shared_owners = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(p_shared_owners);
          while (__stlxr(v47 - 1, p_shared_owners));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
          goto LABEL_55;
        }
      }
      v31 = *a4;
      v52 = v28;
      v53 = (std::__shared_weak_count *)v55;
      if (v55)
      {
        v32 = (unint64_t *)(v55 + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v15 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)v31 + 32))(v31, &v52);
      v37 = v53;
      if (v53)
      {
        v38 = (unint64_t *)&v53->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = (_OWORD *)*a4;
      *(_OWORD *)((char *)v40 + 8) = 0u;
      v40 = (_OWORD *)((char *)v40 + 8);
      v40[15] = 0u;
      v40[16] = 0u;
      v40[13] = 0u;
      v40[14] = 0u;
      v40[11] = 0u;
      v40[12] = 0u;
      v40[9] = 0u;
      v40[10] = 0u;
      v40[7] = 0u;
      v40[8] = 0u;
      v40[5] = 0u;
      v40[6] = 0u;
      v40[3] = 0u;
      v40[4] = 0u;
      v40[1] = 0u;
      v40[2] = 0u;
      *(_OWORD *)((char *)v40 + 266) = 0u;
      if ((_DWORD)v15)
      {
        if (gBBULogMaskGet(void)::once == -1)
          goto LABEL_50;
      }
      else
      {
        v15 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a4 + 16))(*a4, 0, 0);
        if (!(_DWORD)v15)
        {
          v27 = 0;
          v45 = (std::__shared_weak_count *)v55;
          if (!v55)
            goto LABEL_55;
          goto LABEL_51;
        }
        if (gBBULogMaskGet(void)::once == -1)
        {
LABEL_50:
          _BBULog(25, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Condition <<%s>> failed %s %s/%d\n", v34, v35, v36, (char)"kBBUReturnSuccess == ret");
          v27 = 2;
          v45 = (std::__shared_weak_count *)v55;
          if (!v55)
            goto LABEL_55;
          goto LABEL_51;
        }
      }
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      goto LABEL_50;
    }
  }
  else
  {
    v19 = v57;
    if (v57)
      goto LABEL_12;
  }
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(25, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Condition <<%s>> failed %s %s/%d\n", v16, v17, v18, (char)"mainFW != nullptr");
  v27 = 2;
  v15 = 15;
LABEL_55:
  v48 = (std::__shared_weak_count *)v58;
  if (v58)
  {
    v49 = (unint64_t *)(v58 + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      if (v27)
        return v15;
      goto LABEL_60;
    }
  }
  if (!v27)
LABEL_60:
    *a3 = 2;
  return v15;
}

void sub_212A89C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212A89CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
  {
    operator delete(__p);
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_212A89D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212A89D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t eUICC::detail::StateMachine::VersionCheck(uint64_t *a1, uint64_t a2, int *a3, uint64_t a4)
{
  __int128 v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  capabilities::updater *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  void **v37;
  void **v38;
  std::string::size_type size;
  std::string *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  std::string *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  char v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  void **v52;
  void **v53;
  std::string::size_type v54;
  std::string *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void **v65;
  void **v66;
  void *v67;
  void *exception;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  char v78;
  char v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t v82;
  unint64_t v83;
  std::string __p;
  unint64_t v85;
  unint64_t v86;
  void *v87;
  void **v88;
  uint64_t v89;
  std::string v90;
  _OWORD v91[15];
  eUICC::Firmware *v92[2];
  _BYTE v93[26];
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  memset(&v90, 0, sizeof(v90));
  v87 = 0;
  v88 = 0;
  v89 = 0;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v93[10] = v6;
  *(_OWORD *)v92 = v6;
  *(_OWORD *)v93 = v6;
  v91[13] = v6;
  v91[14] = v6;
  v91[11] = v6;
  v91[12] = v6;
  v91[9] = v6;
  v91[10] = v6;
  v91[7] = v6;
  v91[8] = v6;
  v91[5] = v6;
  v91[6] = v6;
  v91[3] = v6;
  v91[4] = v6;
  v91[1] = v6;
  v91[2] = v6;
  v91[0] = v6;
  (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)a4 + 8))(v91);
  v85 = 0xAAAAAAAAAAAAAAAALL;
  v86 = 0xAAAAAAAAAAAAAAAALL;
  v8 = *a1;
  if (v93[19] < 5u)
    memset(&__p, 0, sizeof(__p));
  else
    eUICC::eUICCHashedFWDir((eUICC *)&__p, (char *)v92, (uint64_t)v92 + 3, v7);
  eUICC::Source::GetMainFirmware(v8, (uint64_t)&__p, &v85);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v82 = 0xAAAAAAAAAAAAAAAALL;
    v83 = 0xAAAAAAAAAAAAAAAALL;
    v10 = *a1;
    if (v93[19] >= 5u)
      goto LABEL_6;
  }
  else
  {
    v82 = 0xAAAAAAAAAAAAAAAALL;
    v83 = 0xAAAAAAAAAAAAAAAALL;
    v10 = *a1;
    if (v93[19] >= 5u)
    {
LABEL_6:
      eUICC::eUICCHashedFWDir((eUICC *)&__p, (char *)v92, (uint64_t)v92 + 3, v9);
      goto LABEL_9;
    }
  }
  memset(&__p, 0, sizeof(__p));
LABEL_9:
  eUICC::Source::GetGoldFirmware(v10, (uint64_t)&__p, &v82);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v85)
      goto LABEL_11;
LABEL_22:
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "eUICC Source has no FW, ENG?\n", v12, v13, v14, v76);
    goto LABEL_103;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v85)
    goto LABEL_22;
LABEL_11:
  if (v82)
  {
    v15 = capabilities::updater::EUICCVinylSuccessStatus(v11);
    if (LODWORD(v91[0]) == v15)
    {
      eUICC::Firmware::BootloaderVersion((eUICC::Firmware *)LOBYTE(v92[0]), BYTE1(v92[0]), &__p);
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
      v90 = __p;
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v22 = &v90;
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        LOBYTE(v22) = v90.__r_.__value_.__s.__data_[0];
      _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Main FW supports %s?\n", v19, v20, v21, (char)v22);
      v24 = *a1;
      if (v93[19] < 5u)
        memset(&__p, 0, sizeof(__p));
      else
        eUICC::eUICCHashedFWDir((eUICC *)&__p, (char *)v92, (uint64_t)v92 + 3, v23);
      eUICC::Source::GetMainFirmware(v24, (uint64_t)&__p, &v80);
      v33 = eUICC::Firmware::BundleVersionsSupported(v80, (std::string **)&v87);
      v34 = v81;
      if (v81)
      {
        p_shared_owners = (unint64_t *)&v81->__shared_owners_;
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((v33 & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/eUICC/StateMachine/eUICCStateMachine.cpp", 0x105u, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Failed to get the main loader version from Main FW.\")", v70, v71, v72, v77);
        goto LABEL_127;
      }
      v38 = (void **)v87;
      v37 = v88;
      if (v87 != v88)
      {
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v90.__r_.__value_.__r.__words[2]);
        else
          size = v90.__r_.__value_.__l.__size_;
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v40 = &v90;
        else
          v40 = (std::string *)v90.__r_.__value_.__r.__words[0];
        do
        {
          v41 = *((unsigned __int8 *)v38 + 23);
          if ((v41 & 0x80u) == 0)
            v42 = (void *)*((unsigned __int8 *)v38 + 23);
          else
            v42 = v38[1];
          if (v42 == (void *)size)
          {
            if ((v41 & 0x80) != 0)
            {
              if (!memcmp(*v38, v40, (size_t)v38[1]))
                goto LABEL_60;
            }
            else
            {
              if (!*((_BYTE *)v38 + 23))
              {
LABEL_60:
                v44 = gBBULogMaskGet(void)::once;
                if (v37 != v38)
                {
                  if (gBBULogMaskGet(void)::once != -1)
                    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
                  v45 = &v90;
                  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    LOBYTE(v45) = v90.__r_.__value_.__s.__data_[0];
                  _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Gold FW supports %s?\n", v30, v31, v32, (char)v45);
                  v47 = *a1;
                  if (v93[19] < 5u)
                    memset(&__p, 0, sizeof(__p));
                  else
                    eUICC::eUICCHashedFWDir((eUICC *)&__p, (char *)v92, (uint64_t)v92 + 3, v46);
                  eUICC::Source::GetGoldFirmware(v47, (uint64_t)&__p, &v80);
                  v48 = eUICC::Firmware::BundleVersionsSupported(v80, (std::string **)&v87);
                  v49 = v81;
                  if (v81)
                  {
                    v50 = (unint64_t *)&v81->__shared_owners_;
                    do
                      v51 = __ldaxr(v50);
                    while (__stlxr(v51 - 1, v50));
                    if (!v51)
                    {
                      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                      std::__shared_weak_count::__release_weak(v49);
                    }
                  }
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  if ((v48 & 1) != 0)
                  {
                    v53 = (void **)v87;
                    v52 = v88;
                    if (v87 == v88)
                      goto LABEL_100;
                    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v54 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
                    else
                      v54 = v90.__r_.__value_.__l.__size_;
                    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v55 = &v90;
                    else
                      v55 = (std::string *)v90.__r_.__value_.__r.__words[0];
                    while (1)
                    {
                      v56 = *((unsigned __int8 *)v53 + 23);
                      if ((v56 & 0x80u) == 0)
                        v57 = (void *)*((unsigned __int8 *)v53 + 23);
                      else
                        v57 = v53[1];
                      if (v57 == (void *)v54)
                      {
                        if ((v56 & 0x80) != 0)
                        {
                          if (!memcmp(*v53, v55, (size_t)v53[1]))
                            goto LABEL_98;
                        }
                        else
                        {
                          if (!*((_BYTE *)v53 + 23))
                          {
LABEL_98:
                            if (v52 != v53)
                            {
                              v28 = 0;
                              v29 = 4;
                              goto LABEL_104;
                            }
LABEL_100:
                            if (gBBULogMaskGet(void)::once != -1)
                              dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
LABEL_102:
                            _BBULog(25, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Condition <<%s>> failed %s %s/%d\n", v30, v31, v32, (char)"std::end(bundleVersions) != std::find(bundleVersions.begin(), bundleVersions.end(), cardVersion)");
LABEL_103:
                            v28 = 0;
                            v29 = 6;
                            goto LABEL_104;
                          }
                          v58 = 0;
                          while (*((unsigned __int8 *)v53 + v58) == v55->__r_.__value_.__s.__data_[v58])
                          {
                            if (v56 == ++v58)
                              goto LABEL_98;
                          }
                        }
                      }
                      v53 += 3;
                      if (v53 == v52)
                        goto LABEL_100;
                    }
                  }
                  exception = __cxa_allocate_exception(0x210uLL);
                  _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/eUICC/StateMachine/eUICCStateMachine.cpp", 0x10Au, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Failed to get the gold loader version from Gold FW.\")", v73, v74, v75, v79);
LABEL_127:
                }
LABEL_68:
                if (v44 != -1)
                  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
                goto LABEL_102;
              }
              v43 = 0;
              while (*((unsigned __int8 *)v38 + v43) == v40->__r_.__value_.__s.__data_[v43])
              {
                if (v41 == ++v43)
                  goto LABEL_60;
              }
            }
          }
          v38 += 3;
        }
        while (v38 != v37);
      }
      v44 = gBBULogMaskGet(void)::once;
      goto LABEL_68;
    }
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Condition <<%s>> failed %s %s/%d\n", v16, v17, v18, (char)"euiccData.Valid()");
    v28 = 18;
    v29 = 4;
  }
  else
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Condition <<%s>> failed %s %s/%d\n", v12, v13, v14, (char)"goldFirmware");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Main & !Gold?\n", v25, v26, v27, v78);
    v28 = 15;
    v29 = 4;
  }
LABEL_104:
  *a3 = v29;
  v59 = (std::__shared_weak_count *)v83;
  if (v83)
  {
    v60 = (unint64_t *)(v83 + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = (std::__shared_weak_count *)v86;
  if (v86)
  {
    v63 = (unint64_t *)(v86 + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (void **)v87;
  if (v87)
  {
    v66 = v88;
    v67 = v87;
    if (v88 != v87)
    {
      do
      {
        if (*((char *)v66 - 1) < 0)
          operator delete(*(v66 - 3));
        v66 -= 3;
      }
      while (v66 != v65);
      v67 = v87;
    }
    v88 = v65;
    operator delete(v67);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  return v28;
}

void sub_212A8A60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;

  __cxa_free_exception(v33);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::vector<std::string>::~vector[abi:ne180100](&a25);
  if ((a33 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t eUICC::detail::StateMachine::UpdateGold(uint64_t *a1, uint64_t a2, _DWORD *a3, _QWORD *a4)
{
  __int128 v8;
  capabilities::updater *v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (***v20)(void **__return_ptr);
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _OWORD *v44;
  _OWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  capabilities::updater *v50;
  int v51;
  _OWORD *v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL4 v58;
  char v59;
  char v60;
  char v61;
  void *__p[3];
  void (***v63)(void **__return_ptr);
  std::__shared_weak_count *v64;
  CFTypeRef v65;
  void (***v66)(void **__return_ptr);
  std::__shared_weak_count *v67;
  CFTypeRef cf[36];
  _OWORD __dst[18];
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v66 = 0;
  v67 = 0;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)&__dst[16] + 10) = v8;
  __dst[15] = v8;
  __dst[16] = v8;
  __dst[13] = v8;
  __dst[14] = v8;
  __dst[11] = v8;
  __dst[12] = v8;
  __dst[9] = v8;
  __dst[10] = v8;
  __dst[7] = v8;
  __dst[8] = v8;
  __dst[5] = v8;
  __dst[6] = v8;
  __dst[3] = v8;
  __dst[4] = v8;
  __dst[1] = v8;
  __dst[2] = v8;
  __dst[0] = v8;
  v9 = (capabilities::updater *)(*(_QWORD *(**)(_OWORD *__return_ptr))(*(_QWORD *)*a4 + 8))(__dst);
  v10 = capabilities::updater::EUICCVinylSuccessStatus(v9);
  if (LODWORD(__dst[0]) != v10)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    goto LABEL_6;
  }
  v15 = *a1;
  if (BYTE3(__dst[17]) < 5u)
    memset(cf, 0, 24);
  else
    eUICC::eUICCHashedFWDir((eUICC *)cf, (char *)&__dst[15], (uint64_t)&__dst[15] + 3, v11);
  eUICC::Source::GetGoldFirmware(v15, (uint64_t)cf, __p);
  v20 = (void (***)(void **__return_ptr))__p[0];
  v21 = (std::__shared_weak_count *)__p[1];
  __p[0] = 0;
  __p[1] = 0;
  v66 = v20;
  v67 = v21;
  if ((SHIBYTE(cf[2]) & 0x80000000) == 0)
  {
    if (v20)
      goto LABEL_10;
LABEL_29:
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Condition <<%s>> failed %s %s/%d\n", v17, v18, v19, (char)"goldFW");
    v16 = 15;
    goto LABEL_59;
  }
  operator delete((void *)cf[0]);
  if (!v20)
    goto LABEL_29;
LABEL_10:
  v25 = (_QWORD *)((uint64_t (*)(void *))(*v20)[1])(v20);
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "In UpdateGold, fwMac.data = %p\n", v22, v23, v24, (char)v25);
  if (!*(_BYTE *)(a2 + 11) && *v25 == *(_QWORD *)((char *)&__dst[9] + 3))
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Gold FW Macs already matching (no forceGold)\n", v26, v27, v28, v59);
    v16 = 0;
    *a3 = 5;
  }
  else
  {
    ((void (*)(CFTypeRef *__return_ptr, void (***)(void **__return_ptr)))(*v20)[2])(cf, v20);
    if (cf[0])
      v32 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
    else
      v32 = 0;
    if (cf[0])
      CFRelease(cf[0]);
    if (v32)
    {
      if (*(_BYTE *)(a2 + 11) || *v25 != *(_QWORD *)((char *)&__dst[9] + 3))
      {
        v33 = *a4;
        ((void (*)(CFTypeRef *__return_ptr, void (***)(void **__return_ptr)))(*v20)[2])(&v65, v20);
        v16 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v33 + 24))(v33, &v65);
        if (v65)
          CFRelease(v65);
        v37 = (_OWORD *)*a4;
        *(_OWORD *)((char *)v37 + 8) = 0u;
        v37 = (_OWORD *)((char *)v37 + 8);
        v37[15] = 0u;
        v37[16] = 0u;
        v37[13] = 0u;
        v37[14] = 0u;
        v37[11] = 0u;
        v37[12] = 0u;
        v37[9] = 0u;
        v37[10] = 0u;
        v37[7] = 0u;
        v37[8] = 0u;
        v37[5] = 0u;
        v37[6] = 0u;
        v37[3] = 0u;
        v37[4] = 0u;
        v37[1] = 0u;
        v37[2] = 0u;
        *(_OWORD *)((char *)v37 + 266) = 0u;
        if ((_DWORD)v16)
        {
          if (gBBULogMaskGet(void)::once != -1)
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
LABEL_58:
          _BBULog(25, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Condition <<%s>> failed %s %s/%d\n", v34, v35, v36, (char)"kBBUReturnSuccess == ret");
          goto LABEL_59;
        }
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "successfully pushed Install Ticket\n", v34, v35, v36, v59);
      }
      v38 = *a4;
      v63 = v20;
      v64 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v40 = __ldxr(p_shared_owners);
        while (__stxr(v40 + 1, p_shared_owners));
      }
      v16 = (*(uint64_t (**)(uint64_t, void (****)(void **__return_ptr)))(*(_QWORD *)v38 + 32))(v38, &v63);
      v41 = v64;
      if (v64)
      {
        v42 = (unint64_t *)&v64->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = (_OWORD *)*a4;
      *(_OWORD *)((char *)v44 + 8) = 0u;
      v44 = (_OWORD *)((char *)v44 + 8);
      v44[15] = 0u;
      v44[16] = 0u;
      v44[13] = 0u;
      v44[14] = 0u;
      v44[11] = 0u;
      v44[12] = 0u;
      v44[9] = 0u;
      v44[10] = 0u;
      v44[7] = 0u;
      v44[8] = 0u;
      v44[5] = 0u;
      v44[6] = 0u;
      v44[3] = 0u;
      v44[4] = 0u;
      v44[1] = 0u;
      v44[2] = 0u;
      *(_OWORD *)((char *)v44 + 266) = 0u;
      if ((_DWORD)v16)
      {
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        goto LABEL_58;
      }
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "successfully streamed Firmware\n", v34, v35, v36, v59);
      v16 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a4 + 16))(*a4, 0, 0);
      v45 = (_OWORD *)*a4;
      *(_OWORD *)((char *)v45 + 8) = 0u;
      v45 = (_OWORD *)((char *)v45 + 8);
      v45[15] = 0u;
      v45[16] = 0u;
      v45[13] = 0u;
      v45[14] = 0u;
      v45[11] = 0u;
      v45[12] = 0u;
      v45[9] = 0u;
      v45[10] = 0u;
      v45[7] = 0u;
      v45[8] = 0u;
      v45[5] = 0u;
      v45[6] = 0u;
      v45[3] = 0u;
      v45[4] = 0u;
      v45[1] = 0u;
      v45[2] = 0u;
      *(_OWORD *)((char *)v45 + 266) = 0u;
      if ((_DWORD)v16)
      {
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        goto LABEL_58;
      }
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "successfully switched back to Normal\n", v34, v35, v36, v60);
      (*(void (**)(CFTypeRef *__return_ptr))(*(_QWORD *)*a4 + 8))(cf);
      v50 = (capabilities::updater *)memcpy(__dst, cf, 0x11AuLL);
      v51 = capabilities::updater::EUICCVinylSuccessStatus(v50);
      if (LODWORD(__dst[0]) == v51)
      {
        v52 = operator new(0x28uLL);
        v53 = (char)v52;
        cf[0] = v52;
        *(_OWORD *)&cf[1] = xmmword_212B52800;
        v54 = *(_OWORD *)((char *)&__dst[2] + 8);
        *v52 = *(_OWORD *)((char *)&__dst[1] + 8);
        v52[1] = v54;
        *((_BYTE *)v52 + 32) = 0;
        memset(__p, 170, sizeof(__p));
        (**v66)(__p);
        v58 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)cf, (unsigned __int8 *)__p);
        if (v58)
        {
          v16 = 0;
        }
        else
        {
          if (gBBULogMaskGet(void)::once != -1)
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          v16 = 22;
          _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Gold version strings mismatched: Card %s Bundle %s\n", v55, v56, v57, v53);
        }
        if (SHIBYTE(__p[2]) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(cf[2]) & 0x80000000) == 0)
          {
LABEL_77:
            if (!v58)
              goto LABEL_59;
            goto LABEL_81;
          }
        }
        else if ((SHIBYTE(cf[2]) & 0x80000000) == 0)
        {
          goto LABEL_77;
        }
        operator delete((void *)cf[0]);
        if (!v58)
          goto LABEL_59;
LABEL_81:
        *a3 = 5;
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Success!\n", v55, v56, v57, v61);
        goto LABEL_59;
      }
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
LABEL_6:
      _BBULog(25, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Condition <<%s>> failed %s %s/%d\n", v12, v13, v14, (char)"euiccData.Valid()");
      v16 = 18;
      goto LABEL_59;
    }
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Install gold but no ticket -- back to restored please\n", v29, v30, v31, v59);
    v16 = 45;
    *a3 = 4;
  }
LABEL_59:
  v46 = v67;
  if (v67)
  {
    v47 = (unint64_t *)&v67->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  return v16;
}

void sub_212A8AFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a18 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t eUICC::detail::StateMachine::UpdateMain(uint64_t *a1, uint64_t a2, _DWORD *a3, _QWORD *a4)
{
  __int128 v8;
  capabilities::updater *v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  _OWORD *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void **p_s1;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  void *v34;
  void **v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  uint64_t v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _OWORD *v55;
  const char *v56;
  _OWORD *v57;
  _OWORD *v58;
  char v59;
  __int128 v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  char v72;
  char v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  CFTypeRef v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  void *__s1;
  size_t __n[2];
  void *__p[2];
  CFTypeRef v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  CFTypeRef cf[36];
  _OWORD __dst[18];
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v83 = 0;
  v84 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v82 = 0;
  __s1 = 0;
  __n[0] = 0;
  __n[1] = 0;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)&__dst[16] + 10) = v8;
  __dst[15] = v8;
  __dst[16] = v8;
  __dst[13] = v8;
  __dst[14] = v8;
  __dst[11] = v8;
  __dst[12] = v8;
  __dst[9] = v8;
  __dst[10] = v8;
  __dst[7] = v8;
  __dst[8] = v8;
  __dst[5] = v8;
  __dst[6] = v8;
  __dst[3] = v8;
  __dst[4] = v8;
  __dst[1] = v8;
  __dst[2] = v8;
  __dst[0] = v8;
  v9 = (capabilities::updater *)(*(_QWORD *(**)(_OWORD *__return_ptr))(*(_QWORD *)*a4 + 8))(__dst);
  v10 = capabilities::updater::EUICCVinylSuccessStatus(v9);
  if (LODWORD(__dst[0]) != v10)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Condition <<%s>> failed %s %s/%d\n", v12, v13, v14, (char)"euiccData.Valid()");
    v16 = 18;
    goto LABEL_96;
  }
  v15 = *a1;
  if (BYTE3(__dst[17]) < 5u)
    memset(cf, 0, 24);
  else
    eUICC::eUICCHashedFWDir((eUICC *)cf, (char *)&__dst[15], (uint64_t)&__dst[15] + 3, v11);
  eUICC::Source::GetMainFirmware(v15, (uint64_t)cf, &v77);
  v20 = v77;
  v21 = v78;
  v77 = 0;
  v78 = 0;
  v83 = v20;
  v84 = v21;
  if ((SHIBYTE(cf[2]) & 0x80000000) == 0)
  {
    if (v20)
      goto LABEL_10;
LABEL_35:
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Condition <<%s>> failed %s %s/%d\n", v17, v18, v19, (char)"mainFW");
    v16 = 15;
    goto LABEL_96;
  }
  operator delete((void *)cf[0]);
  if (!v20)
    goto LABEL_35;
LABEL_10:
  (**(void (***)(CFTypeRef *__return_ptr, uint64_t))v20)(cf, v20);
  if (SHIBYTE(v82) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = *(_OWORD *)cf;
  v82 = cf[2];
  v22 = operator new(0x28uLL);
  v23 = *(_OWORD *)((char *)&__dst[2] + 8);
  *v22 = *(_OWORD *)((char *)&__dst[1] + 8);
  v22[1] = v23;
  *((_BYTE *)v22 + 32) = 0;
  if (SHIBYTE(__n[1]) < 0)
    operator delete(__s1);
  __s1 = v22;
  *(_OWORD *)__n = xmmword_212B52800;
  v27 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  p_s1 = &__s1;
  if ((__n[1] & 0x8000000000000000) != 0)
    LOBYTE(p_s1) = (_BYTE)__s1;
  _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Update Main:Card %s Bundle %s\n", v24, v25, v26, (char)p_s1);
  if (*(_BYTE *)(a2 + 10))
    goto LABEL_39;
  v32 = HIBYTE(__n[1]);
  if ((__n[1] & 0x8000000000000000) == 0)
    v33 = HIBYTE(__n[1]);
  else
    v33 = __n[0];
  v34 = (void *)HIBYTE(v82);
  if (SHIBYTE(v82) < 0)
    v34 = __p[1];
  if ((void *)v33 != v34)
    goto LABEL_39;
  if (SHIBYTE(v82) >= 0)
    v35 = __p;
  else
    v35 = (void **)__p[0];
  if ((__n[1] & 0x8000000000000000) != 0)
  {
    if (memcmp(__s1, v35, __n[0]))
      goto LABEL_39;
LABEL_71:
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v56 = "Main FW versions already matching (no forceMain)\n";
LABEL_74:
    _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", v56, v29, v30, v31, v72);
    v16 = 0;
    *a3 = 6;
    goto LABEL_96;
  }
  if (!HIBYTE(__n[1]))
    goto LABEL_71;
  v36 = &__s1;
  while (*(unsigned __int8 *)v36 == *(unsigned __int8 *)v35)
  {
    v36 = (void **)((char *)v36 + 1);
    v35 = (void **)((char *)v35 + 1);
    if (!--v32)
      goto LABEL_71;
  }
LABEL_39:
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(_QWORD *)v20 + 16))(cf, v20);
  if (cf[0])
    v40 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  else
    v40 = 0;
  if (cf[0])
    CFRelease(cf[0]);
  if (v40)
  {
    if (*(_BYTE *)(a2 + 10) || *((_QWORD *)&__dst[4] + 1) != *v27)
    {
      v41 = *a4;
      (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(_QWORD *)v20 + 16))(&v76, v20);
      v16 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v41 + 24))(v41, &v76);
      if (v76)
        CFRelease(v76);
      v45 = (_OWORD *)*a4;
      *(_OWORD *)((char *)v45 + 8) = 0u;
      v45 = (_OWORD *)((char *)v45 + 8);
      v45[15] = 0u;
      v45[16] = 0u;
      v45[13] = 0u;
      v45[14] = 0u;
      v45[11] = 0u;
      v45[12] = 0u;
      v45[9] = 0u;
      v45[10] = 0u;
      v45[7] = 0u;
      v45[8] = 0u;
      v45[5] = 0u;
      v45[6] = 0u;
      v45[3] = 0u;
      v45[4] = 0u;
      v45[1] = 0u;
      v45[2] = 0u;
      *(_OWORD *)((char *)v45 + 266) = 0u;
      if ((_DWORD)v16)
      {
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        _BBULog(25, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Condition <<%s>> failed %s %s/%d\n", v42, v43, v44, (char)"kBBUReturnSuccess == ret");
        goto LABEL_96;
      }
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "successfully pushed Install Ticket\n", v42, v43, v44, v72);
    }
    v46 = *a4;
    v74 = v20;
    v75 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v48 = __ldxr(p_shared_owners);
      while (__stxr(v48 + 1, p_shared_owners));
    }
    v16 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v46 + 32))(v46, &v74);
    v52 = v75;
    if (v75)
    {
      v53 = (unint64_t *)&v75->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = (_OWORD *)*a4;
    *(_OWORD *)((char *)v55 + 8) = 0u;
    v55 = (_OWORD *)((char *)v55 + 8);
    v55[15] = 0u;
    v55[16] = 0u;
    v55[13] = 0u;
    v55[14] = 0u;
    v55[11] = 0u;
    v55[12] = 0u;
    v55[9] = 0u;
    v55[10] = 0u;
    v55[7] = 0u;
    v55[8] = 0u;
    v55[5] = 0u;
    v55[6] = 0u;
    v55[3] = 0u;
    v55[4] = 0u;
    v55[1] = 0u;
    v55[2] = 0u;
    *(_OWORD *)((char *)v55 + 266) = 0u;
    if ((_DWORD)v16)
    {
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
LABEL_70:
      _BBULog(25, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Condition <<%s>> failed %s %s/%d\n", v49, v50, v51, (char)"kBBUReturnSuccess == ret");
      goto LABEL_96;
    }
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "successfully streamed Firmware\n", v49, v50, v51, v72);
    v16 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a4 + 16))(*a4, 0, 0);
    v57 = (_OWORD *)*a4;
    *(_OWORD *)((char *)v57 + 8) = 0u;
    v57 = (_OWORD *)((char *)v57 + 8);
    v57[15] = 0u;
    v57[16] = 0u;
    v57[13] = 0u;
    v57[14] = 0u;
    v57[11] = 0u;
    v57[12] = 0u;
    v57[9] = 0u;
    v57[10] = 0u;
    v57[7] = 0u;
    v57[8] = 0u;
    v57[5] = 0u;
    v57[6] = 0u;
    v57[3] = 0u;
    v57[4] = 0u;
    v57[1] = 0u;
    v57[2] = 0u;
    *(_OWORD *)((char *)v57 + 266) = 0u;
    if ((_DWORD)v16)
    {
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      goto LABEL_70;
    }
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "successfully switched back to Normal\n", v49, v50, v51, v73);
    (*(void (**)(CFTypeRef *__return_ptr))(*(_QWORD *)*a4 + 8))(cf);
    memcpy(__dst, cf, 0x11AuLL);
    v58 = operator new(0x28uLL);
    v59 = (char)v58;
    cf[0] = v58;
    *(_OWORD *)&cf[1] = xmmword_212B52800;
    v60 = *(_OWORD *)((char *)&__dst[2] + 8);
    *v58 = *(_OWORD *)((char *)&__dst[1] + 8);
    v58[1] = v60;
    *((_BYTE *)v58 + 32) = 0;
    v61 = capabilities::updater::EUICCVinylSuccessStatus((capabilities::updater *)v58);
    if (LODWORD(__dst[0]) == v61)
    {
      if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)cf, (unsigned __int8 *)__p))
      {
        operator delete((void *)cf[0]);
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        v56 = "Success!\n";
        goto LABEL_74;
      }
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Main version strings mismatched: Card %s Bundle %s", v65, v66, v67, v59);
      if (SHIBYTE(cf[2]) < 0)
        operator delete((void *)cf[0]);
      v16 = 22;
    }
    else
    {
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(25, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Condition <<%s>> failed %s %s/%d\n", v62, v63, v64, (char)"euiccData.Valid()");
      operator delete((void *)cf[0]);
      v16 = 18;
    }
  }
  else
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Install main but no ticket -- back to restored please\n", v37, v38, v39, v72);
    v16 = 45;
    *a3 = 5;
  }
LABEL_96:
  if ((SHIBYTE(__n[1]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v82) & 0x80000000) == 0)
      goto LABEL_98;
LABEL_101:
    operator delete(__p[0]);
    v68 = v84;
    if (!v84)
      return v16;
    goto LABEL_102;
  }
  operator delete(__s1);
  if (SHIBYTE(v82) < 0)
    goto LABEL_101;
LABEL_98:
  v68 = v84;
  if (!v84)
    return v16;
LABEL_102:
  v69 = (unint64_t *)&v68->__shared_owners_;
  do
    v70 = __ldaxr(v69);
  while (__stlxr(v70 - 1, v69));
  if (!v70)
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
  }
  return v16;
}

void sub_212A8BA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((a31 & 0x80000000) == 0)
    {
LABEL_7:
      std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
      _Unwind_Resume(a1);
    }
  }
  else if ((a31 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(a26);
  goto LABEL_7;
}

uint64_t eUICC::detail::StateMachine::PostProcess(uint64_t a1, uint64_t a2, _DWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  char v15;

  switch(*(_DWORD *)(a2 + 4))
  {
    case 1:
      v12 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 40))(*a4, 0);
      if (!(_DWORD)v12)
        goto LABEL_7;
      goto LABEL_3;
    case 2:
      v12 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a4 + 40))(*a4, 1);
      if ((_DWORD)v12)
      {
LABEL_3:
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "Failed to handle post processing request\n", v9, v10, v11, v15);
        *a3 = 9;
        return v12;
      }
      else
      {
LABEL_7:
        *a3 = 9;
        return v12;
      }
    case 3:
      v14 = 1;
      goto LABEL_10;
    case 4:
      v14 = 0;
LABEL_10:
      eUICC::ClearMetadata::Perform(v14, a4, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }
  *a3 = 9;
  return 0;
}

uint64_t eUICC::detail::StateMachine::Retry(uint64_t a1, uint64_t a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  std::chrono::nanoseconds __ns;

  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*a4 + 16))(*a4, 0, 1);
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(22, 0xFFFFFFFFLL, "eUICCStateMachine", "", "...waiting patiently for reset\n", v5, v6, v7, v9);
  __ns.__rep_ = 10000000000;
  std::this_thread::sleep_for (&__ns);
  *a3 = 0;
  return 0;
}

uint64_t eUICC::HowToProceed(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  uint64_t v9;
  capabilities::updater *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  void **v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void *v30[3];
  std::string __p;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 8))
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v8 = "eUICC Skip All\n";
LABEL_5:
    _BBULog(22, 0xFFFFFFFFLL, "eUICC", "", v8, a6, a7, a8, v29);
    return 3;
  }
  v12 = (capabilities::updater *)capabilities::updater::EUICCVinylSuccessStatus((capabilities::updater *)a1);
  if (*(_DWORD *)a1 == (_DWORD)v12)
  {
    memset(v30, 170, sizeof(v30));
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 3;
    LODWORD(__p.__r_.__value_.__l.__data_) = 3223088;
    std::vector<std::string>::vector[abi:ne180100](v30, (uint64_t)&__p, 1uLL);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    memset(&__p, 170, sizeof(__p));
    eUICC::Firmware::BootloaderVersion((eUICC::Firmware *)a1[240], a1[241], &__p);
    v16 = v30[0];
    v17 = v30[1];
    if (v30[0] != v30[1])
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      while (1)
      {
        v20 = *((unsigned __int8 *)v16 + 23);
        if ((v20 & 0x80u) == 0)
          v21 = *((unsigned __int8 *)v16 + 23);
        else
          v21 = v16[1];
        if (v21 == size)
        {
          if ((v20 & 0x80) != 0)
          {
            if (!memcmp((const void *)*v16, p_p, v16[1]))
              break;
          }
          else
          {
            if (!*((_BYTE *)v16 + 23))
              break;
            v22 = 0;
            while (*((unsigned __int8 *)v16 + v22) == p_p->__r_.__value_.__s.__data_[v22])
            {
              if (v20 == ++v22)
                goto LABEL_32;
            }
          }
        }
        v16 += 3;
        if (v16 == v17)
          goto LABEL_50;
      }
    }
LABEL_32:
    if (v16 == v17)
    {
LABEL_50:
      v9 = 1;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_37:
        v23 = (void **)v30[0];
        if (v30[0])
        {
          v24 = (void **)v30[1];
          v25 = v30[0];
          if (v30[1] != v30[0])
          {
            do
            {
              if (*((char *)v24 - 1) < 0)
                operator delete(*(v24 - 3));
              v24 -= 3;
            }
            while (v24 != v23);
            v25 = v30[0];
          }
          v30[1] = v23;
          operator delete(v25);
        }
        return v9;
      }
    }
    else
    {
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(22, 0xFFFFFFFFLL, "eUICC", "", "eUICC HW present is too old so we will skip updating it\n", v13, v14, v15, v29);
      v9 = 3;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_37;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_37;
  }
  if (a1[278])
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v8 = "eUICC not stuffed but that's ok!\n";
    goto LABEL_5;
  }
  if (!capabilities::updater::shouldBailOnEUICCError(v12))
    return 2;
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(22, 0xFFFFFFFFLL, "eUICC", "", "Bailing on eUICC error due to status %u\n", v26, v27, v28, *(_DWORD *)a1);
  return 0;
}

void sub_212A8C00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_212A8C038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void eUICC::eUICCHashedFWDir(eUICC *this, char *a2, uint64_t a3, unsigned __int8 *a4)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  char v11;
  char *v12;
  _BYTE *v13;
  void *v14;
  _BYTE *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  _BYTE *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  __int128 *v27;
  char *v28;
  unint64_t v29;
  __int128 v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const std::ios_base *v41;
  const std::locale::facet *v42;
  eUICC *v43;
  size_t v44;
  uint64_t v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  eUICC *v49;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  void *__p[2];
  __int128 v57;
  unint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char *v69;
  _BYTE *v70;
  unint64_t v71;
  std::locale v72;

  v69 = 0;
  v70 = 0;
  v71 = 0;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v58 = 0xAAAAAAAAAAAAAAAALL;
  v68 = v6;
  v67 = v6;
  v66 = v6;
  v65 = v6;
  v64 = v6;
  v63 = v6;
  v62 = v6;
  v61 = v6;
  v60 = v6;
  v57 = v6;
  *(_OWORD *)__p = v6;
  v55 = v6;
  v54 = v6;
  v53 = v6;
  v52 = v6;
  v7 = MEMORY[0x24BEDB870];
  v8 = MEMORY[0x24BEDB870] + 64;
  v59 = MEMORY[0x24BEDB870] + 64;
  v9 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v51 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v51 + *(_QWORD *)(v51 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v51 + *(_QWORD *)(v51 - 24));
  std::ios_base::init(v10, &v52);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v51 = v7 + 24;
  v59 = v8;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&v52 = MEMORY[0x24BEDB848] + 16;
  __p[0] = 0;
  BYTE7(v57) = 0;
  *((_QWORD *)&v57 + 1) = 0;
  LODWORD(v58) = 16;
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)&v52);
  v11 = *a2;
  if ((a2[1] | ((*a2 & 0x7F) << 8)) < 0x301u)
  {
    v17 = operator new(0x14uLL);
    *(_OWORD *)v17 = *(_OWORD *)a3;
    v17[4] = *(_DWORD *)(a3 + 16);
    v18 = (char *)(v17 + 5);
    goto LABEL_34;
  }
  v12 = (char *)operator new(0x14uLL);
  v70 = v12 + 20;
  v71 = (unint64_t)(v12 + 20);
  *(_OWORD *)v12 = *(_OWORD *)a3;
  *((_DWORD *)v12 + 4) = *(_DWORD *)(a3 + 16);
  v69 = v12;
  v13 = operator new(0x28uLL);
  v13[20] = v11;
  *(_OWORD *)(v13 + 4) = *(_OWORD *)(v12 + 4);
  *(_DWORD *)v13 = *(_DWORD *)v12;
  v14 = v69;
  v69 = v13;
  v71 = (unint64_t)(v13 + 40);
  if (v14)
  {
    v15 = v13 + 21;
    operator delete(v14);
    v70 = v13 + 21;
    if ((unint64_t)(v13 + 21) >= v71)
    {
      v19 = v69;
      v20 = v15 - v69;
      v21 = v15 - v69 + 1;
      if (v21 < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v22 = v71 - (_QWORD)v69;
      if (2 * (v71 - (unint64_t)v69) > v21)
        v21 = 2 * v22;
      if (v22 >= 0x3FFFFFFFFFFFFFFFLL)
        v23 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
        v24 = (char *)operator new(v23);
      else
        v24 = 0;
      v25 = &v24[v20];
      v24[v20] = a2[1];
      v16 = (uint64_t)&v24[v20 + 1];
      if (v15 == v19)
      {
        v69 = &v24[v20];
        v71 = (unint64_t)&v24[v23];
        goto LABEL_32;
      }
      if (v20 < 8)
        goto LABEL_29;
      if (v20 >= 0x20)
      {
        v26 = v20 & 0xFFFFFFFFFFFFFFE0;
        v27 = (__int128 *)(v13 + 5);
        v28 = &v24[v13 + 5 - v19];
        v29 = v20 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v30 = *v27;
          *((_OWORD *)v28 - 1) = *(v27 - 1);
          *(_OWORD *)v28 = v30;
          v28 -= 32;
          v27 -= 2;
          v29 -= 32;
        }
        while (v29);
        if (v20 == v26)
        {
LABEL_31:
          v15 = v69;
          v69 = v24;
          v71 = (unint64_t)&v24[v23];
          if (!v15)
            goto LABEL_33;
LABEL_32:
          operator delete(v15);
          goto LABEL_33;
        }
        if ((v20 & 0x18) == 0)
        {
          v25 -= v26;
          v15 -= v26;
          goto LABEL_29;
        }
      }
      else
      {
        v26 = 0;
      }
      v15 -= v20 & 0xFFFFFFFFFFFFFFF8;
      v25 -= v20 & 0xFFFFFFFFFFFFFFF8;
      v31 = &v13[-v26 + 13];
      v32 = &v24[v31 - v19];
      v33 = v26 - (v20 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v34 = *(_QWORD *)v31;
        v31 -= 8;
        *(_QWORD *)v32 = v34;
        v32 -= 8;
        v33 += 8;
      }
      while (v33);
      if (v20 == (v20 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_31;
LABEL_29:
      v35 = v25 - 1;
      do
      {
        v36 = *--v15;
        *v35-- = v36;
      }
      while (v15 != v19);
      goto LABEL_31;
    }
  }
  v13[21] = a2[1];
  v16 = (uint64_t)(v13 + 22);
LABEL_33:
  v70 = (_BYTE *)v16;
  v17 = operator new(0x20uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  CC_SHA256(v69, v16 - (_DWORD)v69, (unsigned __int8 *)v17);
  v18 = (char *)(v17 + 8);
LABEL_34:
  v37 = 0;
  v38 = v18 - (char *)v17;
  if (v38 <= 1)
    v39 = 1;
  else
    v39 = v38;
  do
  {
    v40 = v51;
    *(_DWORD *)((char *)&v52 + *(_QWORD *)(v51 - 24)) = *(_DWORD *)((_BYTE *)&v52 + *(_QWORD *)(v51 - 24)) & 0xFFFFFFB5 | 8;
    *(_QWORD *)((char *)&v53 + *(_QWORD *)(v40 - 24)) = 2;
    v41 = (const std::ios_base *)((char *)&v51 + *(_QWORD *)(v40 - 24));
    if (v41[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v41);
      v42 = std::locale::use_facet(&v72, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 32);
      std::locale::~locale(&v72);
    }
    v41[1].__fmtflags_ = 48;
    std::ostream::operator<<();
    ++v37;
  }
  while (v39 != v37);
  if ((v58 & 0x10) != 0)
  {
    v45 = *((_QWORD *)&v57 + 1);
    v43 = this;
    if (*((_QWORD *)&v57 + 1) < (unint64_t)v55)
    {
      *((_QWORD *)&v57 + 1) = v55;
      v45 = v55;
    }
    v46 = (const void *)*((_QWORD *)&v54 + 1);
    v44 = v45 - *((_QWORD *)&v54 + 1);
    if ((unint64_t)(v45 - *((_QWORD *)&v54 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_59;
  }
  else
  {
    v43 = this;
    if ((v58 & 8) == 0)
    {
      v44 = 0;
      *((_BYTE *)this + 23) = 0;
      goto LABEL_53;
    }
    v46 = (const void *)v53;
    v44 = v54 - v53;
    if ((_QWORD)v54 - (_QWORD)v53 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_59:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v49 = (eUICC *)operator new(v47 + 1);
    *((_QWORD *)v43 + 1) = v44;
    *((_QWORD *)v43 + 2) = v48 | 0x8000000000000000;
    *(_QWORD *)v43 = v49;
    v43 = v49;
    goto LABEL_52;
  }
  *((_BYTE *)v43 + 23) = v44;
  if (v44)
LABEL_52:
    memmove(v43, v46, v44);
LABEL_53:
  *((_BYTE *)v43 + v44) = 0;
  v51 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&v51 + *(_QWORD *)(v51 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *(_QWORD *)&v52 = MEMORY[0x24BEDB848] + 16;
  if (SBYTE7(v57) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v59);
  operator delete(v17);
  if (v69)
    operator delete(v69);
}

void sub_212A8C594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  uint64_t v26;
  void *v28;

  std::ostringstream::~ostringstream((uint64_t)&a11);
  operator delete(v25);
  v28 = *(void **)(v26 - 120);
  if (v28)
  {
    *(_QWORD *)(v26 - 112) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

_QWORD *std::__function::__func<BBUReturn (*)(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State &,std::unique_ptr<eUICC::eUICCVinylValve> &),std::allocator<BBUReturn (*)(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State &,std::unique_ptr<eUICC::eUICCVinylValve> &)>,BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State &,std::unique_ptr<eUICC::eUICCVinylValve> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_24CE7F598;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BBUReturn (*)(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State &,std::unique_ptr<eUICC::eUICCVinylValve> &),std::allocator<BBUReturn (*)(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State &,std::unique_ptr<eUICC::eUICCVinylValve> &)>,BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State &,std::unique_ptr<eUICC::eUICCVinylValve> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_24CE7F598;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BBUReturn (*)(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State &,std::unique_ptr<eUICC::eUICCVinylValve> &),std::allocator<BBUReturn (*)(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State &,std::unique_ptr<eUICC::eUICCVinylValve> &)>,BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State &,std::unique_ptr<eUICC::eUICCVinylValve> &)>::operator()(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v5)(__int128 *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v5 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t, uint64_t))(a1 + 8);
  v11 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  result = v5(&v11, a3, a4, a5);
  v7 = result;
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      return v7;
    }
  }
  return result;
}

void sub_212A8C7EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<BBUReturn (*)(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State &,std::unique_ptr<eUICC::eUICCVinylValve> &),std::allocator<BBUReturn (*)(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State &,std::unique_ptr<eUICC::eUICCVinylValve> &)>,BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State &,std::unique_ptr<eUICC::eUICCVinylValve> &)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B529A1)
    return a1 + 8;
  if (((v3 & 0x8000000212B529A1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B529A1))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B529A1 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<BBUReturn (*)(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State &,std::unique_ptr<eUICC::eUICCVinylValve> &),std::allocator<BBUReturn (*)(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State &,std::unique_ptr<eUICC::eUICCVinylValve> &)>,BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State &,std::unique_ptr<eUICC::eUICCVinylValve> &)>::target_type()
{
}

_QWORD *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  size_t v14;
  char *v15;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_22;
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0)
LABEL_22:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    result = operator new(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    v12 = a3 - __src;
    if (v12)
      result = memcpy(result, __src, v12);
LABEL_21:
    v7[1] = &v9[v12];
    return result;
  }
  v13 = (_BYTE *)result[1];
  v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    v12 = a3 - __src;
    if (v12)
      result = memmove((void *)*result, __src, v12);
    goto LABEL_21;
  }
  v15 = &__src[v14];
  if (v13 != v9)
  {
    result = memmove((void *)*result, __src, v14);
    v9 = (char *)v7[1];
  }
  if (a3 != v15)
    result = memmove(v9, v15, a3 - v15);
  v7[1] = &v9[a3 - v15];
  return result;
}

void std::vector<unsigned char>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

uint64_t ctu::PthreadMutexGuardPolicy<ICEARIContext>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t *std::__tree<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::__map_value_compare<eUICC::detail::StateMachine::State,std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::less<eUICC::detail::StateMachine::State>,true>,std::allocator<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>>>::__emplace_hint_unique_key_args<eUICC::detail::StateMachine::State,std::pair<eUICC::detail::StateMachine::State const,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>> const&>(uint64_t *result, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v5 = a2;
  v6 = result;
  v7 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (v8 = *((_DWORD *)a2 + 8), v8 > a3))
  {
    v9 = *a2;
    if ((uint64_t *)*result == a2)
    {
      v11 = a2;
LABEL_16:
      if (v9)
        v17 = v11;
      else
        v17 = a2;
      if (v9)
        v13 = v11 + 1;
      else
        v13 = a2;
      if (*v13)
        return result;
      v5 = v17;
LABEL_37:
      v22 = operator new(0x48uLL);
      v22[8] = *(_DWORD *)a4;
      v23 = *(_QWORD *)(a4 + 32);
      if (v23)
      {
        if (v23 == a4 + 8)
        {
          *((_QWORD *)v22 + 8) = v22 + 10;
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
          goto LABEL_47;
        }
        v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
      }
      *((_QWORD *)v22 + 8) = v23;
LABEL_47:
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = v5;
      *v13 = (uint64_t)v22;
      v25 = *(_QWORD *)*v6;
      if (v25)
      {
        *v6 = v25;
        v22 = (_DWORD *)*v13;
      }
      result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[1], (uint64_t *)v22);
      ++v6[2];
      return result;
    }
    if (v9)
    {
      v10 = (uint64_t *)*a2;
      do
      {
        v11 = v10;
        v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      v15 = a2;
      do
      {
        v11 = (uint64_t *)v15[2];
        v16 = *v11 == (_QWORD)v15;
        v15 = v11;
      }
      while (v16);
    }
    if (*((_DWORD *)v11 + 8) < a3)
      goto LABEL_16;
    v18 = *v7;
    v13 = result + 1;
    v5 = result + 1;
    if (!*v7)
      goto LABEL_37;
    while (1)
    {
      while (1)
      {
        v5 = v18;
        v19 = *((_DWORD *)v18 + 8);
        if (v19 <= a3)
          break;
        v18 = (uint64_t *)*v18;
        v13 = v5;
        if (!*v5)
          goto LABEL_37;
      }
      if (v19 >= a3)
        break;
      v18 = (uint64_t *)v18[1];
      if (!v18)
        goto LABEL_30;
    }
  }
  else
  {
    if (v8 >= a3)
      return result;
    v13 = a2 + 1;
    v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
        v5 = v13;
        v14 = v13;
      }
      while (v12);
    }
    else
    {
      v14 = a2;
      do
      {
        v20 = v14;
        v14 = (uint64_t *)v14[2];
      }
      while ((uint64_t *)*v14 != v20);
    }
    if (v14 == (uint64_t *)v7)
      goto LABEL_37;
    if (*((_DWORD *)v14 + 8) > a3)
      goto LABEL_37;
    v21 = *v7;
    v13 = result + 1;
    v5 = result + 1;
    if (!*v7)
      goto LABEL_37;
    while (1)
    {
      while (1)
      {
        v5 = v21;
        v24 = *((_DWORD *)v21 + 8);
        if (v24 <= a3)
          break;
        v21 = (uint64_t *)*v21;
        v13 = v5;
        if (!*v5)
          goto LABEL_37;
      }
      if (v24 >= a3)
        break;
      v21 = (uint64_t *)v21[1];
      if (!v21)
      {
LABEL_30:
        v13 = v5 + 1;
        goto LABEL_37;
      }
    }
  }
  return result;
}

void sub_212A8CCFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::__map_value_compare<eUICC::detail::StateMachine::State,std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::less<eUICC::detail::StateMachine::State>,true>,std::allocator<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>>>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  if (a1)
  {
    std::__tree<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::__map_value_compare<eUICC::detail::StateMachine::State,std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::less<eUICC::detail::StateMachine::State>,true>,std::allocator<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>>>::destroy(*a1);
    std::__tree<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::__map_value_compare<eUICC::detail::StateMachine::State,std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>,std::less<eUICC::detail::StateMachine::State>,true>,std::allocator<std::__value_type<eUICC::detail::StateMachine::State,std::function<BBUReturn ()(std::shared_ptr<eUICC::Source>,eUICC::Options const&,eUICC::detail::StateMachine::State&,std::unique_ptr<eUICC::eUICCVinylValve> &)>>>>::destroy(a1[1]);
    v2 = (_QWORD *)a1[8];
    if (v2 == a1 + 5)
    {
      v3 = 4;
      v2 = a1 + 5;
    }
    else
    {
      if (!v2)
      {
LABEL_8:
        operator delete(a1);
        return;
      }
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
    goto LABEL_8;
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  void *v1;

  std::exception::~exception(this);
  operator delete(v1);
}

uint64_t ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

std::string *std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *result;
  unint64_t v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;

  *(_QWORD *)(a1 + 88) = 0;
  result = (std::string *)(a1 + 64);
  v3 = *(unsigned __int8 *)(a1 + 87);
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    v4 = result;
    v5 = *(unsigned __int8 *)(a1 + 87);
    v6 = *(_DWORD *)(a1 + 96);
    if ((v6 & 8) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = *(std::string **)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
LABEL_3:
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
LABEL_4:
  if ((v6 & 0x10) == 0)
    return result;
  *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
  if ((v3 & 0x80) == 0)
  {
    v7 = 22;
    if (v3 > 0x15)
    {
      *(_BYTE *)(a1 + 87) = 22;
      goto LABEL_15;
    }
LABEL_11:
    result = std::string::append(result, v7 - v3, 0);
    v8 = *(char *)(a1 + 87);
    if (v8 < 0)
      goto LABEL_16;
    goto LABEL_12;
  }
  v3 = *(_QWORD *)(a1 + 72);
  v7 = (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v3 < v7)
    goto LABEL_11;
  result = *(std::string **)(a1 + 64);
  *(_QWORD *)(a1 + 72) = v7;
LABEL_15:
  result->__r_.__value_.__s.__data_[v7] = 0;
  v8 = *(char *)(a1 + 87);
  if (v8 < 0)
  {
LABEL_16:
    v9 = (char *)v4 + *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = v9;
    if ((*(_BYTE *)(a1 + 96) & 3) == 0)
      return result;
    goto LABEL_17;
  }
LABEL_12:
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
  if ((*(_BYTE *)(a1 + 96) & 3) == 0)
    return result;
LABEL_17:
  if (v5 >> 31)
  {
    v10 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
    v11 = 0x7FFFFFFF * ((v10 + ((v5 - 0x80000000 - v10) >> 1)) >> 30);
    v4 = (std::string *)((char *)v4 + v11 + 0x7FFFFFFF);
    v5 = v5 - v11 - 0x7FFFFFFF;
    *(_QWORD *)(a1 + 48) = v4;
  }
  if (v5)
    *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
  return result;
}

uint64_t __cxx_global_var_init_1()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ICEARIContext>::~PthreadMutexGuardPolicy, &ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance, &dword_212A4D000);
  }
  return result;
}

uint64_t BasebandProvisioning::sendServerReq(CFMutableDictionaryRef this, const __CFString *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  __CFDictionary *v6;
  uint64_t (*v7)(uint64_t);
  ACFULogging *v8;
  CFIndex Count;
  const void **v10;
  ACFULogging *v11;
  CFTypeRef *v12;
  ACFULogging *v13;
  const __CFString **v14;
  CFTypeRef *v15;
  CFTypeID v16;
  CFTypeID TypeID;
  const __CFString *v18;
  const __CFData *v19;
  const __CFString *Value;
  const __CFString *v21;
  CFTypeID v22;
  const __CFString *v23;
  const __CFString *v24;
  CFTypeID v25;
  const __CFDictionary *v26;
  const __CFData *v27;
  const __CFData *v28;
  CFTypeID v29;
  CFComparisonResult v30;
  const __CFDictionary *v31;
  __CFString *v32;
  uint64_t ReversedIMEIFromString;
  const void *v34;
  ACFULogging *v35;
  int v36;
  const __CFData *v37;
  const __CFData *v38;
  CFTypeID v39;
  const __CFData *v40;
  const __CFData *v41;
  CFTypeID v42;
  __CFString *v43;
  const void *v44;
  const __CFData *v45;
  const __CFData *v46;
  CFTypeID v47;
  ACFULogging *v48;
  support::cf *v49;
  const __CFData **v50;
  ACFULogging *v51;
  BOOL v52;
  char v53;
  ACFULogging *isa;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  char PostBodyFromDictionary;
  uint64_t v60;
  char *v61;
  unint64_t *v62;
  int v63;
  unint64_t v64;
  std::__shared_weak_count *size;
  unint64_t *v66;
  unint64_t v67;
  std::string::size_type v68;
  unint64_t v69;
  std::string::size_type v70;
  const void *v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t v74;
  ACFULogging *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  const void *v78;
  CFTypeRef v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  ACFULogging *v88;
  ACFULogging *v89;
  ACFULogging *v90;
  ACFULogging *v91;
  ACFULogging *v92;
  const __CFData *v93;
  const UInt8 *BytePtr;
  CFIndex Length;
  CFMutableDictionaryRef Mutable;
  __int128 v97;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v99;
  CFIndex v100;
  CFIndex v101;
  CFIndex v102;
  const __CFString *ValueAtIndex;
  CFIndex location;
  CFIndex v105;
  CFStringRef v106;
  __CFString *v107;
  const __CFString *v108;
  ACFULogging *v109;
  const __CFString *v110;
  ACFULogging *v111;
  const __CFString *v112;
  ACFULogging *v113;
  const __CFString *v114;
  ACFULogging *v115;
  const __CFString *v116;
  ACFULogging *v117;
  const __CFString *v118;
  ACFULogging *v119;
  const __CFString *v120;
  ACFULogging *v121;
  const __CFString *v122;
  ACFULogging *v123;
  const __CFString *v124;
  ACFULogging *v125;
  const __CFString *v126;
  ACFULogging *v127;
  const __CFString *v128;
  ACFULogging *v129;
  const __CFString *v130;
  ACFULogging *v131;
  const __CFString *v132;
  ACFULogging *v133;
  const UInt8 *v134;
  CFDataRef v135;
  ACFULogging *v136;
  std::string *v137;
  __int128 v138;
  std::string *v139;
  __int128 v140;
  const void *v141;
  char v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  CFTypeRef v147;
  std::__shared_weak_count *v150;
  const __CFString *theString;
  CFMutableDictionaryRef v152;
  const __CFAllocator *alloc;
  void *__p;
  void *__pa;
  char v156;
  char data_high;
  CFTypeRef v158;
  void *v159;
  void *v160;
  uint64_t v161;
  CFTypeRef v162;
  CFTypeRef v163;
  __int128 v164;
  CFTypeRef cf;
  unint64_t *v166;
  CFDataRef theData;
  std::string v168;
  std::string v169;
  std::string v170;
  __CFString buffer;
  __int128 v172;
  _BYTE v173[28];
  uint64_t v174;
  CFRange v175;
  CFRange v176;
  CFRange v177;

  v152 = this;
  v174 = *MEMORY[0x24BDAC8D0];
  v161 = 0;
  v162 = 0;
  v159 = 0;
  v160 = 0;
  v158 = 0;
  v156 = 0;
  __p = 0;
  if (!a2 || !a4)
    goto LABEL_200;
  alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  this = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v6 = this;
  v162 = this;
  v7 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  if (!this)
    v7 = 0;
  if (!v7)
  {
LABEL_200:
    ACFULogging::getLogInstance(this);
LABEL_210:
    ACFULogging::handleMessage();
    v150 = 0;
    goto LABEL_217;
  }
  buffer.isa = 0;
  v170.__r_.__value_.__r.__words[0] = 0;
  if (!this)
  {
    ACFULogging::getLogInstance(0);
LABEL_208:
    ACFULogging::handleMessage();
    v52 = 0;
    goto LABEL_65;
  }
  v8 = (ACFULogging *)setHttpUriEscapedValue(alloc, this, CFSTR("COMMAND_CODE"), a2);
  if ((_DWORD)v8
    || (v8 = (ACFULogging *)setHttpUriEscapedValue(alloc, v6, CFSTR("TICKET_VERSION"), CFSTR("2")), (_DWORD)v8)
    || (v8 = (ACFULogging *)setHttpUriEscapedValue(alloc, v6, CFSTR("VERSION"), CFSTR("2")), (_DWORD)v8))
  {
    ACFULogging::getLogInstance(v8);
    goto LABEL_208;
  }
  Count = CFDictionaryGetCount(*((CFDictionaryRef *)v152 + 10));
  v10 = (const void **)malloc(8 * Count);
  v11 = (ACFULogging *)malloc(8 * Count);
  v12 = (CFTypeRef *)v11;
  if (!v10)
  {
    ACFULogging::getLogInstance(v11);
    ACFULogging::handleMessage();
    v52 = 0;
    if (v12)
      goto LABEL_64;
    goto LABEL_65;
  }
  if (!v11)
  {
LABEL_196:
    ACFULogging::getLogInstance(0);
    goto LABEL_198;
  }
  CFDictionaryGetKeysAndValues(*((CFDictionaryRef *)v152 + 10), v10, (const void **)v11);
  if (Count >= 1)
  {
    v14 = (const __CFString **)v10;
    v15 = v12;
    while (*v14)
    {
      if (!*v15)
        goto LABEL_196;
      v16 = CFGetTypeID(*v15);
      TypeID = CFDataGetTypeID();
      v18 = *v14;
      v19 = (const __CFData *)*v15;
      v13 = (ACFULogging *)(v16 == TypeID
                          ? setHttpBase64EncodedValue(alloc, v6, v18, v19)
                          : setHttpUriEscapedValue(alloc, v6, v18, (CFStringRef)v19));
      if ((_DWORD)v13)
        break;
      ++v15;
      ++v14;
      if (!--Count)
        goto LABEL_21;
    }
    goto LABEL_197;
  }
LABEL_21:
  if (CFStringCompare(a2, CFSTR("100"), 0) == kCFCompareEqualTo)
  {
    Value = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("MarketingPartNumber"));
    v21 = Value;
    if (Value)
    {
      v22 = CFGetTypeID(Value);
      v13 = (ACFULogging *)CFStringGetTypeID();
      if ((ACFULogging *)v22 != v13)
        goto LABEL_197;
      v13 = (ACFULogging *)setHttpUriEscapedValue(alloc, v6, CFSTR("MPN"), v21);
      if ((_DWORD)v13)
        goto LABEL_197;
    }
    v23 = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("RegionCode"));
    v24 = v23;
    if (v23)
    {
      v25 = CFGetTypeID(v23);
      v13 = (ACFULogging *)CFStringGetTypeID();
      if ((ACFULogging *)v25 != v13)
        goto LABEL_197;
      v13 = (ACFULogging *)setHttpUriEscapedValue(alloc, v6, CFSTR("RGN"), v24);
      if ((_DWORD)v13)
        goto LABEL_197;
    }
  }
  v26 = (const __CFDictionary *)*((_QWORD *)v152 + 11);
  if (!v26)
    goto LABEL_60;
  v27 = (const __CFData *)CFDictionaryGetValue(v26, CFSTR("ChipSerialNo"));
  v28 = v27;
  if (v27)
  {
    v29 = CFGetTypeID(v27);
    v13 = (ACFULogging *)CFDataGetTypeID();
    if ((ACFULogging *)v29 != v13)
      goto LABEL_197;
    v13 = (ACFULogging *)setHttpBase64EncodedValue(alloc, v6, CFSTR("B64_BB_SNUM"), v28);
    if ((_DWORD)v13)
      goto LABEL_197;
  }
  v30 = CFStringCompare(a2, CFSTR("100"), 0);
  v31 = (const __CFDictionary *)*((_QWORD *)v152 + 11);
  if (v30 == kCFCompareEqualTo)
  {
    v37 = (const __CFData *)CFDictionaryGetValue(v31, CFSTR("EncryptedSessionKey"));
    v38 = v37;
    if (!v37
      || (v39 = CFGetTypeID(v37), v13 = (ACFULogging *)CFDataGetTypeID(), (ACFULogging *)v39 == v13)
      && (v13 = (ACFULogging *)setHttpBase64EncodedValue(alloc, v6, CFSTR("B64_SESS_KEY"), v38), !(_DWORD)v13))
    {
      v40 = (const __CFData *)CFDictionaryGetValue(*((CFDictionaryRef *)v152 + 11), CFSTR("SKeyHash"));
      v41 = v40;
      if (!v40
        || (v42 = CFGetTypeID(v40), v13 = (ACFULogging *)CFDataGetTypeID(), (ACFULogging *)v42 == v13)
        && (v13 = (ACFULogging *)setHttpBase64EncodedValue(alloc, v6, CFSTR("B64_SKEY_HASH"), v41), !(_DWORD)v13))
      {
        v36 = 0;
        goto LABEL_51;
      }
    }
LABEL_197:
    ACFULogging::getLogInstance(v13);
    goto LABEL_198;
  }
  v32 = (__CFString *)CFDictionaryGetValue(v31, CFSTR("IMEI"));
  if (v32)
  {
    ReversedIMEIFromString = createReversedIMEIFromString(v32, (CFTypeRef *)&v170.__r_.__value_.__l.__data_);
    if ((ReversedIMEIFromString & 1) == 0)
      goto LABEL_246;
    v34 = (const void *)v170.__r_.__value_.__r.__words[0];
    if (!v170.__r_.__value_.__r.__words[0])
      goto LABEL_246;
    v35 = (ACFULogging *)setHttpBase64EncodedValue(alloc, v6, CFSTR("B64_IMEI"), (CFDataRef)v170.__r_.__value_.__l.__data_);
    if ((_DWORD)v35)
      goto LABEL_250;
    CFRelease(v34);
    v170.__r_.__value_.__r.__words[0] = 0;
    v36 = 1;
  }
  else
  {
    v36 = 0;
  }
  v43 = (__CFString *)CFDictionaryGetValue(*((CFDictionaryRef *)v152 + 11), CFSTR("IMEI2"));
  if (!v43)
    goto LABEL_51;
  ReversedIMEIFromString = createReversedIMEIFromString(v43, (CFTypeRef *)&v170.__r_.__value_.__l.__data_);
  if ((ReversedIMEIFromString & 1) == 0 || (v44 = (const void *)v170.__r_.__value_.__r.__words[0]) == 0)
  {
LABEL_246:
    ACFULogging::getLogInstance((ACFULogging *)ReversedIMEIFromString);
LABEL_198:
    ACFULogging::handleMessage();
    v52 = 0;
    free(v10);
    if (!v12)
      goto LABEL_65;
LABEL_64:
    free(v12);
    goto LABEL_65;
  }
  v35 = (ACFULogging *)setHttpBase64EncodedValue(alloc, v6, CFSTR("B64_IMEI2"), (CFDataRef)v170.__r_.__value_.__l.__data_);
  if ((_DWORD)v35)
  {
LABEL_250:
    ACFULogging::getLogInstance(v35);
    ACFULogging::handleMessage();
LABEL_60:
    v52 = 1;
    free(v10);
    if (!v12)
      goto LABEL_65;
    goto LABEL_64;
  }
  CFRelease(v44);
  v36 = 1;
LABEL_51:
  v45 = (const __CFData *)CFDictionaryGetValue(*((CFDictionaryRef *)v152 + 11), CFSTR("ChipID"));
  v46 = v45;
  if (!v45
    || (v47 = CFGetTypeID(v45), v48 = (ACFULogging *)CFDataGetTypeID(), (ACFULogging *)v47 == v48)
    && (v48 = (ACFULogging *)setHttpBase64EncodedValue(alloc, v6, CFSTR("B64_BB_CHIPID"), v46), !(_DWORD)v48))
  {
    v49 = (support::cf *)CFDictionaryGetValue(*((CFDictionaryRef *)v152 + 11), CFSTR("EID"));
    if (v49)
    {
      v51 = (ACFULogging *)support::cf::copyDataFromHexString(v49, &buffer, v50);
      v52 = (char)v51;
      if (buffer.isa)
        v53 = (char)v51;
      else
        v53 = 0;
      if ((v53 & 1) != 0)
      {
        setHttpBase64EncodedValue(alloc, v6, CFSTR("B64_EID"), (CFDataRef)buffer.isa);
        goto LABEL_60;
      }
      ACFULogging::getLogInstance(v51);
      ACFULogging::handleMessage();
    }
    else
    {
      v52 = 1;
    }
    free(v10);
    if (!v12)
      goto LABEL_65;
    goto LABEL_64;
  }
  ACFULogging::getLogInstance(v48);
  ACFULogging::handleMessage();
  v52 = v36 != 0;
  free(v10);
  if (v12)
    goto LABEL_64;
LABEL_65:
  isa = (ACFULogging *)buffer.isa;
  if (buffer.isa)
    CFRelease(buffer.isa);
  if (!v52)
  {
    ACFULogging::getLogInstance(isa);
    goto LABEL_210;
  }
  ACFULogging::getLogInstance(isa);
  *((_BYTE *)&v169.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v169, "BasebandProvisioning");
  v55 = std::string::append(&v169, "::", 2uLL);
  v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v170.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  v57 = std::string::append(&v170, "sendServerReq", 0xDuLL);
  v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  buffer.data = (char *)v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buffer.isa = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  ACFULogging::handleMessageCFType();
  if ((SHIBYTE(buffer.data) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_70;
LABEL_75:
    operator delete(v170.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_76;
  }
  operator delete(buffer.isa);
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_75;
LABEL_70:
  if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_71;
LABEL_76:
  operator delete(v169.__r_.__value_.__l.__data_);
LABEL_71:
  buffer.isa = 0;
  buffer.info = (uint64_t)&v158;
  PostBodyFromDictionary = createPostBodyFromDictionary(alloc, v6, (const __CFData **)&buffer);
  v60 = *(_QWORD *)buffer.info;
  if (buffer.isa)
  {
    *(_QWORD *)buffer.info = buffer.isa;
    if (v60)
      goto LABEL_78;
  }
  else
  {
    *(_QWORD *)buffer.info = 0;
    if (v60)
LABEL_78:
      CFRelease((CFTypeRef)v60);
  }
  if ((PostBodyFromDictionary & 1) == 0
    || !v158
    || (ACFULogging::getLogInstance((ACFULogging *)v60),
        ACFULogging::handleMessage(),
        v60 = ctu::cf::assign(),
        (v60 & 1) == 0))
  {
    ACFULogging::getLogInstance((ACFULogging *)v60);
    goto LABEL_210;
  }
  ACFULogging::getLogInstance((ACFULogging *)v60);
  ACFULogging::handleMessage();
  v61 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v61 + 1) = 0;
  v62 = (unint64_t *)(v61 + 8);
  *((_QWORD *)v61 + 3) = 850045863;
  *((_QWORD *)v61 + 2) = 0;
  *((_OWORD *)v61 + 2) = 0u;
  *((_OWORD *)v61 + 3) = 0u;
  *((_OWORD *)v61 + 4) = 0u;
  *((_QWORD *)v61 + 10) = 0;
  *((_QWORD *)v61 + 11) = 1018212795;
  *((_OWORD *)v61 + 6) = 0u;
  *((_OWORD *)v61 + 7) = 0u;
  *(_OWORD *)(v61 + 124) = 0u;
  *(_QWORD *)v61 = off_24CE7F770;
  v166 = (unint64_t *)v61;
  theData = (CFDataRef)v61;
  std::mutex::lock((std::mutex *)(v61 + 24));
  v63 = *((_DWORD *)v61 + 34);
  if ((v63 & 2) != 0)
    std::__throw_future_error[abi:ne180100](1u);
  do
    v64 = __ldxr(v62);
  while (__stxr(v64 + 1, v62));
  *((_DWORD *)v61 + 34) = v63 | 2;
  std::mutex::unlock((std::mutex *)(v61 + 24));
  v169.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v169.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  buffer.info = 0;
  buffer.data = 0;
  buffer.isa = &buffer.info;
  *(_OWORD *)&v168.__r_.__value_.__l.__data_ = 0uLL;
  ctu::Http::HttpRequest::create();
  size = (std::__shared_weak_count *)v168.__r_.__value_.__l.__size_;
  if (v168.__r_.__value_.__l.__size_)
  {
    v66 = (unint64_t *)(v168.__r_.__value_.__l.__size_ + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&buffer, buffer.info);
  (*(void (**)(std::string::size_type, _QWORD))(*(_QWORD *)v169.__r_.__value_.__l.__data_ + 8))(v169.__r_.__value_.__r.__words[0], *((_QWORD *)v152 + 4));
  v68 = v169.__r_.__value_.__r.__words[0];
  dispatch::future_callback_impl<std::shared_ptr<ctu::Http::HttpResponse>,std::shared_ptr<ctu::Http::HttpResponse>>(&v166, &buffer.isa);
  (*(void (**)(std::string::size_type, void *))(*(_QWORD *)v68 + 16))(v68, buffer.isa);
  if (buffer.isa)
    _Block_release(buffer.isa);
  LODWORD(v69) = *((_DWORD *)v152 + 6);
  (*(void (**)(std::string::size_type, double))(*(_QWORD *)v169.__r_.__value_.__l.__data_ + 96))(v169.__r_.__value_.__r.__words[0], (double)v69);
  v70 = v169.__r_.__value_.__r.__words[0];
  v71 = (const void *)*((_QWORD *)v152 + 5);
  cf = v71;
  if (v71)
    CFRetain(v71);
  (*(void (**)(std::string::size_type, CFTypeRef *))(*(_QWORD *)v70 + 88))(v70, &cf);
  if (cf)
    CFRelease(cf);
  (*(void (**)(std::string::size_type, void **))(*(_QWORD *)v169.__r_.__value_.__l.__data_ + 56))(v169.__r_.__value_.__r.__words[0], &v159);
  memset(&buffer, 0, 24);
  (*(void (**)(std::string::size_type, __CFString *))(*(_QWORD *)v169.__r_.__value_.__l.__data_ + 40))(v169.__r_.__value_.__r.__words[0], &buffer);
  if (SHIBYTE(buffer.data) < 0)
    operator delete(buffer.isa);
  *(_QWORD *)&v164 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v164 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v72 = v166;
  v166 = 0;
  std::__assoc_state<std::shared_ptr<ctu::Http::HttpResponse>>::move((uint64_t)v72, &v164);
  if (v72)
  {
    v73 = v72 + 1;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
      (*(void (**)(unint64_t *))(*v72 + 16))(v72);
  }
  v75 = (ACFULogging *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v164 + 16))(v164);
  if ((_DWORD)v75 == 1)
  {
    v75 = (ACFULogging *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v164 + 24))(v164);
    if ((_DWORD)v75 == 200)
    {
      v150 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
      v76 = v164;
      v77 = (std::__shared_weak_count *)v169.__r_.__value_.__l.__size_;
      if (!v169.__r_.__value_.__l.__size_)
        goto LABEL_121;
      goto LABEL_117;
    }
  }
  ACFULogging::getLogInstance(v75);
  (*(void (**)(_QWORD))(*(_QWORD *)v164 + 16))(v164);
  (*(void (**)(_QWORD))(*(_QWORD *)v164 + 24))(v164);
  (*(void (**)(_QWORD))(*(_QWORD *)v164 + 32))(v164);
  (*(void (**)(CFTypeRef *__return_ptr))(*(_QWORD *)v164 + 72))(&v163);
  ctu::cf::show((ctu::cf *)v163, v78);
  ACFULogging::handleMessage();
  if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v79 = v163;
    if (!v163)
      goto LABEL_111;
    goto LABEL_110;
  }
  operator delete(v170.__r_.__value_.__l.__data_);
  v79 = v163;
  if (v163)
LABEL_110:
    CFRelease(v79);
LABEL_111:
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
  if (*((_QWORD *)&v164 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v76 = 0;
  v150 = 0;
  v77 = (std::__shared_weak_count *)v169.__r_.__value_.__l.__size_;
  if (v169.__r_.__value_.__l.__size_)
  {
LABEL_117:
    p_shared_owners = (unint64_t *)&v77->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
LABEL_121:
  v85 = v166;
  if (v166)
  {
    v86 = v166 + 1;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
      (*(void (**)(unint64_t *))(*v85 + 16))(v85);
  }
  v88 = (ACFULogging *)std::promise<std::shared_ptr<ctu::Http::HttpResponse>>::~promise((uint64_t *)&theData);
  if (v76)
  {
    ACFULogging::getLogInstance(v88);
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 24))(v76);
    ACFULogging::handleMessage();
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 16))(v76);
    v89 = (ACFULogging *)ctu::Http::asString();
    __pa = buffer.isa;
    data_high = HIBYTE(buffer.data);
    ACFULogging::getLogInstance(v89);
    ACFULogging::handleMessage();
    v90 = (ACFULogging *)(*(_QWORD *(**)(__CFString *__return_ptr, uint64_t))(*(_QWORD *)v76 + 48))(&buffer, v76);
    if (data_high < 0)
      operator delete(__pa);
    __p = buffer.isa;
    v156 = HIBYTE(buffer.data);
    ACFULogging::getLogInstance(v90);
    v91 = (ACFULogging *)ACFULogging::handleMessage();
    ACFULogging::getLogInstance(v91);
    ACFULogging::handleMessage();
    v92 = (ACFULogging *)(*(_QWORD *(**)(CFDataRef *__return_ptr, uint64_t))(*(_QWORD *)v76 + 40))(&theData, v76);
    v93 = theData;
    *(_QWORD *)&v164 = 0;
    if (theData)
    {
      BytePtr = CFDataGetBytePtr(theData);
      Length = CFDataGetLength(v93);
      theString = CFStringCreateWithBytes(alloc, BytePtr, Length, 0x8000100u, 0);
      if (theString)
      {
        Mutable = CFDictionaryCreateMutable(alloc, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (Mutable)
        {
          *(_QWORD *)&v97 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v97 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v173[12] = v97;
          v172 = v97;
          *(_OWORD *)v173 = v97;
          *(_OWORD *)&buffer.isa = v97;
          *(_OWORD *)&buffer.data = v97;
          ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(alloc, theString, CFSTR("&"));
          v99 = ArrayBySeparatingStrings;
          if (!ArrayBySeparatingStrings || (v100 = CFArrayGetCount(ArrayBySeparatingStrings), (v101 = v100) == 0))
          {
            ACFULogging::getLogInstance(0);
            ACFULogging::handleMessage();
            CFRelease(theString);
            v142 = 0;
LABEL_185:
            CFRelease(Mutable);
            if ((_QWORD)v164)
            {
              CFRelease((CFTypeRef)v164);
              *(_QWORD *)&v164 = 0;
            }
            if (v99)
              CFRelease(v99);
            v88 = theData;
            if (theData)
              goto LABEL_190;
            goto LABEL_191;
          }
          if (v100 >= 1)
          {
            v102 = 0;
            while (1)
            {
              ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v99, v102);
              location = CFStringFind(ValueAtIndex, CFSTR("="), 0).location;
              if (location != -1)
                break;
              ACFULogging::getLogInstance((ACFULogging *)0xFFFFFFFFFFFFFFFFLL);
              CFStringGetCStringPtr(ValueAtIndex, 0x8000100u);
              ACFULogging::handleMessage();
LABEL_136:
              if (v101 == ++v102)
                goto LABEL_146;
            }
            v105 = CFStringGetLength(ValueAtIndex);
            v176.location = 0;
            v176.length = location;
            v106 = CFStringCreateWithSubstring(alloc, ValueAtIndex, v176);
            v177.location = location + 1;
            v177.length = v105 + ~location;
            v107 = (__CFString *)CFStringCreateWithSubstring(alloc, ValueAtIndex, v177);
            v108 = v107;
            if (v106 && v107)
            {
              CFDictionarySetValue(Mutable, v106, v107);
            }
            else
            {
              ACFULogging::getLogInstance((ACFULogging *)v107);
              CFStringGetCStringPtr(v106, 0x8000100u);
              CFStringGetCStringPtr(v108, 0x8000100u);
              ACFULogging::handleMessage();
              if (!v106)
                goto LABEL_144;
            }
            CFRelease(v106);
LABEL_144:
            if (v108)
              CFRelease(v108);
            goto LABEL_136;
          }
LABEL_146:
          v109 = (ACFULogging *)CFDictionaryGetValue(Mutable, CFSTR("IMEI"));
          v110 = (const __CFString *)v109;
          if (v109)
          {
            ACFULogging::getLogInstance(v109);
            CFStringGetCStringPtr(v110, 0x8000100u);
            ACFULogging::handleMessage();
          }
          v111 = (ACFULogging *)CFDictionaryGetValue(Mutable, CFSTR("IMEI2"));
          v112 = (const __CFString *)v111;
          if (v111)
          {
            ACFULogging::getLogInstance(v111);
            CFStringGetCStringPtr(v112, 0x8000100u);
            ACFULogging::handleMessage();
          }
          v113 = (ACFULogging *)CFDictionaryGetValue(Mutable, CFSTR("EID"));
          v114 = (const __CFString *)v113;
          if (v113)
          {
            ACFULogging::getLogInstance(v113);
            CFStringGetCStringPtr(v114, 0x8000100u);
            ACFULogging::handleMessage();
          }
          v115 = (ACFULogging *)CFDictionaryGetValue(Mutable, CFSTR("WIFI_MAC"));
          v116 = (const __CFString *)v115;
          if (v115)
          {
            ACFULogging::getLogInstance(v115);
            CFStringGetCStringPtr(v116, 0x8000100u);
            ACFULogging::handleMessage();
          }
          v117 = (ACFULogging *)CFDictionaryGetValue(Mutable, CFSTR("BT_MAC"));
          v118 = (const __CFString *)v117;
          if (v117)
          {
            ACFULogging::getLogInstance(v117);
            CFStringGetCStringPtr(v118, 0x8000100u);
            ACFULogging::handleMessage();
          }
          v119 = (ACFULogging *)CFDictionaryGetValue(Mutable, CFSTR("USB_ETHER_MAC"));
          v120 = (const __CFString *)v119;
          if (v119)
          {
            ACFULogging::getLogInstance(v119);
            CFStringGetCStringPtr(v120, 0x8000100u);
            ACFULogging::handleMessage();
          }
          v121 = (ACFULogging *)CFDictionaryGetValue(Mutable, CFSTR("WIFI_MAC2"));
          v122 = (const __CFString *)v121;
          if (v121)
          {
            ACFULogging::getLogInstance(v121);
            CFStringGetCStringPtr(v122, 0x8000100u);
            ACFULogging::handleMessage();
          }
          v123 = (ACFULogging *)CFDictionaryGetValue(Mutable, CFSTR("BT_MAC2"));
          v124 = (const __CFString *)v123;
          if (v123)
          {
            ACFULogging::getLogInstance(v123);
            CFStringGetCStringPtr(v124, 0x8000100u);
            ACFULogging::handleMessage();
          }
          v125 = (ACFULogging *)CFDictionaryGetValue(Mutable, CFSTR("ETH_MAC"));
          v126 = (const __CFString *)v125;
          if (v125)
          {
            ACFULogging::getLogInstance(v125);
            CFStringGetCStringPtr(v126, 0x8000100u);
            ACFULogging::handleMessage();
          }
          v127 = (ACFULogging *)CFDictionaryGetValue(Mutable, CFSTR("ETHER_MAC2"));
          v128 = (const __CFString *)v127;
          if (v127)
          {
            ACFULogging::getLogInstance(v127);
            CFStringGetCStringPtr(v128, 0x8000100u);
            ACFULogging::handleMessage();
          }
          v129 = (ACFULogging *)CFDictionaryGetValue(Mutable, CFSTR("T_MAC"));
          v130 = (const __CFString *)v129;
          if (v129)
          {
            ACFULogging::getLogInstance(v129);
            CFStringGetCStringPtr(v130, 0x8000100u);
            ACFULogging::handleMessage();
          }
          v131 = (ACFULogging *)CFDictionaryGetValue(Mutable, CFSTR("B64_SECDATA"));
          v132 = (const __CFString *)v131;
          if (!v131)
            goto LABEL_183;
          ACFULogging::getLogInstance(v131);
          ACFULogging::handleMessage();
          v133 = (ACFULogging *)decodeBase64(alloc, v132, (CFTypeRef *)&v164);
          if (!(_DWORD)v133)
          {
            if (!(_QWORD)v164)
            {
LABEL_240:
              ACFULogging::getLogInstance(0);
              goto LABEL_241;
            }
            v133 = (ACFULogging *)CFDataGetLength((CFDataRef)v164);
            if ((unint64_t)v133 > 0x4B)
            {
              v175.location = 0;
              v175.length = 76;
              CFDataGetBytes((CFDataRef)v164, v175, (UInt8 *)&buffer);
              if (!*(_DWORD *)&v173[24])
                goto LABEL_183;
              v134 = CFDataGetBytePtr((CFDataRef)v164);
              v135 = CFDataCreate(alloc, v134 + 76, *(unsigned int *)&v173[24]);
              if (v135)
              {
                CFDictionarySetValue(Mutable, CFSTR("MANIFESTDATA"), v135);
                ACFULogging::getLogInstance(v136);
                *((_BYTE *)&v168.__r_.__value_.__s + 23) = 20;
                strcpy((char *)&v168, "BasebandProvisioning");
                v137 = std::string::append(&v168, "::", 2uLL);
                v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
                v169.__r_.__value_.__r.__words[2] = v137->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v138;
                v137->__r_.__value_.__l.__size_ = 0;
                v137->__r_.__value_.__r.__words[2] = 0;
                v137->__r_.__value_.__r.__words[0] = 0;
                v139 = std::string::append(&v169, "copyResponse", 0xCuLL);
                v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
                v170.__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v140;
                v139->__r_.__value_.__l.__size_ = 0;
                v139->__r_.__value_.__r.__words[2] = 0;
                v139->__r_.__value_.__r.__words[0] = 0;
                ACFULogging::handleMessageCFType();
                if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v170.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_176:
                    if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_177;
LABEL_181:
                    operator delete(v168.__r_.__value_.__l.__data_);
                    v141 = (const void *)*((_QWORD *)v152 + 9);
                    *((_QWORD *)v152 + 9) = v135;
                    if (v141)
LABEL_182:
                      CFRelease(v141);
LABEL_183:
                    *a4 = CFRetain(Mutable);
                    v142 = 1;
LABEL_184:
                    CFRelease(theString);
                    goto LABEL_185;
                  }
                }
                else if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  goto LABEL_176;
                }
                operator delete(v169.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_177:
                  v141 = (const void *)*((_QWORD *)v152 + 9);
                  *((_QWORD *)v152 + 9) = v135;
                  if (!v141)
                    goto LABEL_183;
                  goto LABEL_182;
                }
                goto LABEL_181;
              }
              goto LABEL_240;
            }
          }
          ACFULogging::getLogInstance(v133);
LABEL_241:
          ACFULogging::handleMessage();
          v142 = 0;
          goto LABEL_184;
        }
        ACFULogging::getLogInstance(0);
        ACFULogging::handleMessage();
        CFRelease(theString);
LABEL_234:
        v142 = 0;
        v88 = theData;
        if (theData)
LABEL_190:
          CFRelease(v88);
LABEL_191:
        if ((v142 & 1) != 0)
        {
          v143 = 1;
          if ((v156 & 0x80000000) == 0)
            goto LABEL_193;
LABEL_218:
          operator delete(__p);
          v144 = v150;
          if (!v150)
            goto LABEL_222;
          goto LABEL_219;
        }
        goto LABEL_216;
      }
      ACFULogging::getLogInstance(0);
    }
    else
    {
      ACFULogging::getLogInstance(v92);
    }
    ACFULogging::handleMessage();
    goto LABEL_234;
  }
LABEL_216:
  ACFULogging::getLogInstance(v88);
  ACFULogging::handleMessage();
LABEL_217:
  v143 = 0;
  if (v156 < 0)
    goto LABEL_218;
LABEL_193:
  v144 = v150;
  if (!v150)
    goto LABEL_222;
LABEL_219:
  v145 = (unint64_t *)&v144->__shared_owners_;
  do
    v146 = __ldaxr(v145);
  while (__stlxr(v146 - 1, v145));
  if (v146)
  {
LABEL_222:
    v147 = v158;
    if (!v158)
      goto LABEL_224;
    goto LABEL_223;
  }
  ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
  std::__shared_weak_count::__release_weak(v150);
  v147 = v158;
  if (v158)
LABEL_223:
    CFRelease(v147);
LABEL_224:
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v162)
    CFRelease(v162);
  return v143;
}

void sub_212A8E900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,char a31,void *a32,uint64_t a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45,uint64_t a46,char a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t createReversedIMEIFromString(__CFString *a1, CFTypeRef *a2)
{
  __CFString *v3;
  CFIndex Length;
  const __CFData **v5;
  CFAllocatorRef *v6;
  const __CFAllocator *v7;
  CFStringRef v8;
  ACFULogging *v9;
  const __CFData *v10;
  int v11;
  ACFULogging *isa;
  void *v13;
  const void *v14;
  CFTypeRef v15;
  ACFULogging *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  ACFULogging *v22;
  std::string v23;
  std::string v24;
  __CFString cf;
  CFRange v26;

  v3 = a1;
  cf.isa = 0;
  Length = CFStringGetLength(a1);
  v6 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (Length == 15)
  {
    v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v26.length = CFStringGetLength(v3) - 1;
    v26.location = 0;
    v8 = CFStringCreateWithSubstring(v7, v3, v26);
    v3 = (__CFString *)v8;
  }
  else
  {
    v8 = 0;
  }
  v9 = (ACFULogging *)support::cf::copyDataFromHexString((support::cf *)v3, &cf, v5);
  if ((v9 & 1) != 0)
  {
    if (cf.isa)
    {
      v10 = (const __CFData *)CFRetain(cf.isa);
      v11 = 1;
      if (!v8)
        goto LABEL_8;
      goto LABEL_7;
    }
    ACFULogging::getLogInstance(0);
  }
  else
  {
    ACFULogging::getLogInstance(v9);
  }
  ACFULogging::handleMessage();
  v10 = 0;
  v11 = 0;
  if (v8)
LABEL_7:
    CFRelease(v8);
LABEL_8:
  isa = (ACFULogging *)cf.isa;
  if (cf.isa)
    CFRelease(cf.isa);
  if (!v11)
  {
    ACFULogging::getLogInstance(isa);
    ACFULogging::handleMessage();
    if (!v10)
      return 0;
    goto LABEL_31;
  }
  if (v10)
  {
    v13 = (void *)CFDataGetLength(v10);
    if (v13 != (void *)7)
      goto LABEL_29;
    BYTE6(cf.isa) = *CFDataGetBytePtr(v10);
    BYTE5(cf.isa) = CFDataGetBytePtr(v10)[1];
    BYTE4(cf.isa) = CFDataGetBytePtr(v10)[2];
    BYTE3(cf.isa) = CFDataGetBytePtr(v10)[3];
    BYTE2(cf.isa) = CFDataGetBytePtr(v10)[4];
    BYTE1(cf.isa) = CFDataGetBytePtr(v10)[5];
    LOBYTE(cf.isa) = CFDataGetBytePtr(v10)[6];
    v13 = CFDataCreate(*v6, (const UInt8 *)&cf, 7);
    if (v13)
    {
      v14 = v13;
      v15 = CFRetain(v13);
      CFRelease(v14);
      ACFULogging::getLogInstance(v16);
      if (v15)
      {
        *((_BYTE *)&v23.__r_.__value_.__s + 23) = 20;
        strcpy((char *)&v23, "BasebandProvisioning");
        v17 = std::string::append(&v23, "::", 2uLL);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v24.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        v19 = std::string::append(&v24, "createReversedIMEIFromString", 0x1CuLL);
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        cf.data = (char *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&cf.isa = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        ACFULogging::handleMessageCFType();
        if (SHIBYTE(cf.data) < 0)
        {
          operator delete(cf.isa);
          if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_17:
            if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_18:
              *a2 = CFRetain(v15);
              CFRelease(v10);
              CFRelease(v15);
              return 1;
            }
LABEL_21:
            operator delete(v23.__r_.__value_.__l.__data_);
            goto LABEL_18;
          }
        }
        else if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_17;
        }
        operator delete(v24.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_18;
        goto LABEL_21;
      }
    }
    else
    {
LABEL_29:
      ACFULogging::getLogInstance((ACFULogging *)v13);
      v22 = (ACFULogging *)ACFULogging::handleMessage();
      ACFULogging::getLogInstance(v22);
    }
    ACFULogging::handleMessage();
LABEL_31:
    CFRelease(v10);
    return 0;
  }
  ACFULogging::getLogInstance(isa);
  ACFULogging::handleMessage();
  return 0;
}

void sub_212A8EFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a16 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a16 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a11);
  _Unwind_Resume(exception_object);
}

const void **ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void **std::vector<std::pair<std::string,std::vector<unsigned char>>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        if (*(v3 - 25) < 0)
          operator delete(*((void **)v3 - 6));
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

const void **ctu::cf::detail::TakeOwnershipProxy<__CFData const>::~TakeOwnershipProxy(const void **a1)
{
  const void **v2;
  const void *v3;
  const void *v4;

  v3 = *a1;
  v2 = (const void **)a1[1];
  v4 = *v2;
  if (v3)
  {
    *v2 = v3;
    if (v4)
      goto LABEL_5;
  }
  else
  {
    *v2 = 0;
    if (v4)
LABEL_5:
      CFRelease(v4);
  }
  return a1;
}

uint64_t createBasebandProvInfo(int a1, _QWORD *a2, ACFUFirmware **a3, __CFDictionary **a4)
{
  UInt8 *v8;
  UInt8 *v9;
  ACFULogging *v10;
  __int128 v11;
  const __CFAllocator *v12;
  __CFDictionary *Mutable;
  CFDataRef v14;
  const __CFData *v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  void *v18;
  ACFULogging *v20;
  const __CFData **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  const __CFData *v31;
  const UInt8 *BytePtr;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  CFDataRef v36;
  void *ByteSwappedData;
  uint64_t (*v38)(uint64_t);
  unint64_t *v39;
  unint64_t v40;
  char v41;
  unint64_t *v42;
  unint64_t v43;
  ACFULogging *v44;
  const __CFString *v45;
  std::__shared_weak_count *v46;
  ACFUFirmware *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  ACFULogging *Manifest;
  const __CFData *v52;
  const void *PersonalizedFirmwarePath;
  ACFUFirmware *v54;
  ACFULogging *v55;
  const UInt8 *v56;
  CFIndex v57;
  CFDataRef v58;
  char v59;
  _QWORD *size;
  void *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t (*v64)(uint64_t);
  void *v65;
  void *v66;
  void *v67;
  ACFULogging *v68;
  ACFULogging *v69;
  const __CFString *Copy;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  CFTypeID TypeID;
  ACFULogging *v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  __int128 v80;
  uint64_t (*v81)(uint64_t);
  ACFULogging *v82;
  void *v83;
  uint64_t v84;
  ACFULogging *v85;
  ACFULogging *v86;
  CFStringRef v87;
  uint64_t (*v88)(uint64_t);
  CFStringRef v89;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  CFTypeRef v94;
  std::__shared_weak_count *v96;
  CFStringRef v97;
  CFStringRef v98;
  const __CFString *v99;
  const __CFData **v100;
  std::__shared_weak_count *v101;
  int v102;
  CFTypeRef v103;
  CFTypeRef cf;
  int __dst;
  void *value;
  CFTypeRef v107;
  CFTypeRef v108;
  ACFUFirmware *v109;
  CFIndex length;
  std::string v111;
  std::string v112;
  CFDictionaryRef theDict;
  char cStr[16];
  _OWORD v115[4];
  unint64_t v116;
  UInt8 bytes[16];
  void *__p[2];
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  unint64_t v146;
  uint64_t v147;
  CFRange v148;

  v147 = *MEMORY[0x24BDAC8D0];
  strcpy((char *)bytes, "DeadBeef");
  v108 = 0;
  v8 = (UInt8 *)operator new(0xFA0uLL);
  bzero(v8, 0xFA0uLL);
  v9 = (UInt8 *)operator new(0x4C4uLL);
  bzero(v9, 0x4C4uLL);
  value = 0;
  v107 = 0;
  __dst = 0;
  v103 = 0;
  cf = 0;
  v101 = 0;
  v99 = 0;
  v116 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v115[2] = v11;
  v115[3] = v11;
  v115[0] = v11;
  v115[1] = v11;
  *(_OWORD *)cStr = v11;
  v97 = 0;
  v98 = 0;
  if (!*a2 || !*a3 || !a4)
  {
    ACFULogging::getLogInstance(v10);
    goto LABEL_184;
  }
  v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
  {
    ACFULogging::getLogInstance(0);
    goto LABEL_184;
  }
  if (a1)
  {
    v14 = CFDataCreate(v12, bytes, 9);
    v15 = v14;
    v108 = v14;
    if (v14)
      v16 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
    else
      v16 = 0;
    if (!v16)
      goto LABEL_172;
    *(_WORD *)v8 = CFDataGetLength(v14);
    v148.length = CFDataGetLength(v15);
    v148.location = 0;
    CFDataGetBytes(v15, v148, v8 + 2);
    __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
    support::transport::ARI::create((support::transport::ARI *)"BasebandProvisioning", (dispatch_queue_s *)0x2710, 0, 0, (char **)__p);
    v18 = __p[0];
    if (!__p[0] || (v17 = KTLStartProvision(), (v17 & 1) == 0))
    {
      ACFULogging::getLogInstance((ACFULogging *)v17);
      ACFULogging::handleMessage();
      if (v18)
      {
        (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
        goto LABEL_182;
      }
      goto LABEL_185;
    }
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
    v14 = CFDataCreate(v12, v9 + 48, *((unsigned __int16 *)v9 + 23));
    v107 = v14;
    if (!(v14
         ? ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get
         : 0))
    {
LABEL_172:
      ACFULogging::getLogInstance(v14);
      goto LABEL_184;
    }
    CFDictionaryAddValue(Mutable, CFSTR("EncryptedSessionKey"), v14);
  }
  v20 = (ACFULogging *)(**(_QWORD *(***)(void **__return_ptr, _QWORD, uint64_t, _QWORD))*a2)(__p, *a2, 1, 0);
  v21 = (const __CFData **)__p[0];
  v22 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v23 = (unint64_t *)((char *)__p[1] + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v25 = (std::__shared_weak_count *)__p[1];
    v100 = v21;
    v101 = v22;
    v26 = v119;
    v102 = v119;
    if (__p[1])
    {
      v27 = (unint64_t *)((char *)__p[1] + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      v26 = v102;
    }
  }
  else
  {
    v100 = (const __CFData **)__p[0];
    v101 = 0;
    v26 = v119;
  }
  if (!v26)
  {
    __p[0] = v100;
    __p[1] = v101;
    if (v101)
    {
      p_shared_owners = (unint64_t *)&v101->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
    }
    if (*((_BYTE *)v100 + 16))
    {
      v31 = v100[1];
      if (v31)
      {
        BytePtr = CFDataGetBytePtr(v31);
        v33 = CFDataGetLength(v100[1]);
        if (v33 <= 4)
        {
          __dst = 0;
          memcpy(&__dst, BytePtr, v33);
        }
      }
    }
    if (v101)
    {
      v34 = (unint64_t *)&v101->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v36 = CFDataCreate(v12, (const UInt8 *)&__dst, 4);
    ByteSwappedData = (void *)cf;
    cf = v36;
    if (ByteSwappedData)
      CFRelease(ByteSwappedData);
    if (v36)
      v38 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
    else
      v38 = 0;
    if (v38)
    {
      CFDictionaryAddValue(Mutable, CFSTR("ChipID"), v36);
      __p[0] = v100;
      __p[1] = v101;
      if (v101)
      {
        v39 = (unint64_t *)&v101->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      ByteSwappedData = (void *)support::cf::createByteSwappedData(v100[5], (CFDataRef *)&value);
      v41 = (char)ByteSwappedData;
      if (v101)
      {
        v42 = (unint64_t *)&v101->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      if ((v41 & 1) != 0)
      {
        CFDictionaryAddValue(Mutable, CFSTR("ChipSerialNo"), value);
        v47 = *a3;
        v46 = (std::__shared_weak_count *)a3[1];
        v96 = v46;
        if (v46)
        {
          v48 = (unint64_t *)&v46->__shared_owners_;
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }
        v111.__r_.__value_.__r.__words[0] = 0;
        v111.__r_.__value_.__l.__size_ = (std::string::size_type)&v103;
        v146 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v50 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v50 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v144 = v50;
        v145 = v50;
        v142 = v50;
        v143 = v50;
        v140 = v50;
        v141 = v50;
        v138 = v50;
        v139 = v50;
        v136 = v50;
        v137 = v50;
        v134 = v50;
        v135 = v50;
        v132 = v50;
        v133 = v50;
        v130 = v50;
        v131 = v50;
        v128 = v50;
        v129 = v50;
        v126 = v50;
        v127 = v50;
        v124 = v50;
        v125 = v50;
        v122 = v50;
        v123 = v50;
        v120 = v50;
        v121 = v50;
        *(_OWORD *)__p = v50;
        v119 = v50;
        theDict = 0;
        length = 0xAAAAAAAAAAAAAAAALL;
        if (!v47)
        {
          ACFULogging::getLogInstance(v44);
          goto LABEL_177;
        }
        if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
        {
          if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
            goto LABEL_61;
        }
        else
        {
          dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
          if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
          {
LABEL_61:
            if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)
            {
LABEL_62:
              Manifest = (ACFULogging *)ACFUFirmware::getManifest(v47);
              v52 = Manifest;
              PersonalizedFirmwarePath = 0;
              v54 = 0;
              goto LABEL_74;
            }
            goto LABEL_71;
          }
        }
        dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
        if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)
          goto LABEL_62;
LABEL_71:
        PersonalizedFirmwarePath = (const void *)ACFUDataAccess::createPersonalizedFirmwarePath((ACFUDataAccess *)CFSTR("Baseband"), v45);
        if (PersonalizedFirmwarePath)
        {
          GetBasebandTatsuTagToFileNameMap((uint64_t *)&v112);
          RTKitFirmware::create();
          v54 = v109;
          v109 = 0;
          std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)&v112, (char *)v112.__r_.__value_.__l.__size_);
          if (v54)
          {
            Manifest = (ACFULogging *)ACFUFirmware::getManifest(v54);
            v52 = Manifest;
LABEL_74:
            if (!v52
              || (v56 = CFDataGetBytePtr(v52),
                  v57 = CFDataGetLength(v52),
                  Manifest = (ACFULogging *)Img4DecodeInitManifest((uint64_t)v56, v57, (uint64_t)__p),
                  (_DWORD)Manifest)
              || (Img4DecodeGetObjectPropertyData((uint64_t)__p, 1296125520, 1886546793, &theDict, &length),
                  (_DWORD)Manifest))
            {
              ACFULogging::getLogInstance(Manifest);
            }
            else
            {
              v58 = CFDataCreate(v12, (const UInt8 *)theDict, length);
              v111.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
              if (v58)
              {
                v59 = 1;
                if (!v54)
                  goto LABEL_80;
                goto LABEL_79;
              }
              ACFULogging::getLogInstance(0);
            }
            ACFULogging::handleMessage();
            v58 = 0;
            v59 = 0;
            if (v54)
LABEL_79:
              (*(void (**)(ACFUFirmware *))(*(_QWORD *)v54 + 56))(v54);
LABEL_80:
            if (PersonalizedFirmwarePath)
            {
              CFRelease(PersonalizedFirmwarePath);
              size = (_QWORD *)v111.__r_.__value_.__l.__size_;
              v58 = (CFDataRef)v111.__r_.__value_.__r.__words[0];
              v61 = *(void **)v111.__r_.__value_.__l.__size_;
              if (v111.__r_.__value_.__r.__words[0])
                goto LABEL_82;
            }
            else
            {
              size = &v103;
              v61 = (void *)v103;
              if (v58)
              {
LABEL_82:
                *size = v58;
                if (v61)
                  goto LABEL_86;
                goto LABEL_87;
              }
            }
            *size = 0;
            if (v61)
LABEL_86:
              CFRelease(v61);
LABEL_87:
            if (v96)
            {
              v62 = (unint64_t *)&v96->__shared_owners_;
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v96);
              }
            }
            if ((v59 & 1) == 0
              || (v103
                ? (v64 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get)
                : (v64 = 0),
                  !v64))
            {
LABEL_183:
              ACFULogging::getLogInstance((ACFULogging *)v61);
              goto LABEL_184;
            }
            CFDictionaryAddValue(Mutable, CFSTR("SKeyHash"), v103);
            theDict = 0;
            v65 = dlopen("/usr/local/lib/libVinylNonUpdater.dylib", 1);
            v66 = v65;
            if (!v65)
              goto LABEL_119;
            v67 = dlsym(v65, "VinyleUICCPerformOperation");
            if (!v67)
            {
              Copy = 0;
              goto LABEL_117;
            }
            v68 = (ACFULogging *)((uint64_t (*)(_QWORD, CFDictionaryRef *, _QWORD, uint64_t))v67)(0, &theDict, 0, 1);
            ACFULogging::getLogInstance(v68);
            v69 = (ACFULogging *)ACFULogging::handleMessage();
            Copy = 0;
            if ((_DWORD)v68 || !theDict)
            {
LABEL_117:
              dlclose(v66);
              if (Copy)
              {
                v99 = Copy;
LABEL_120:
                if (v99)
                  v81 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
                else
                  v81 = 0;
                if (v81)
                  CFDictionaryAddValue(Mutable, CFSTR("EID"), v99);
                if ((a1 & 1) != 0)
                  goto LABEL_137;
                __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
                support::transport::ARI::create((support::transport::ARI *)"BasebandProvisioning", (dispatch_queue_s *)0x2710, 0, 0, (char **)__p);
                v83 = __p[0];
                if (!__p[0])
                {
                  ACFULogging::getLogInstance(v82);
                  ACFULogging::handleMessage();
                  goto LABEL_138;
                }
                v84 = KTLGetIMEI_V2();
                if ((v84 & 1) != 0)
                {
                  v85 = (ACFULogging *)(*(uint64_t (**)(void *))(*(_QWORD *)v83 + 8))(v83);
                  ACFULogging::getLogInstance(v85);
                  v86 = (ACFULogging *)ACFULogging::handleMessage();
                  ACFULogging::getLogInstance(v86);
                  ACFULogging::handleMessage();
                  v87 = CFStringCreateWithCString(v12, cStr, 0x8000100u);
                  v61 = 0;
                  v98 = v87;
                  if (v87)
                    v88 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
                  else
                    v88 = 0;
                  if (v88)
                  {
                    v89 = CFStringCreateWithCString(v12, (const char *)v115 + 4, 0x8000100u);
                    v61 = 0;
                    v97 = v89;
                    if (v89
                       ? ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get
                       : 0)
                    {
                      CFDictionaryAddValue(Mutable, CFSTR("IMEI"), v87);
                      CFDictionaryAddValue(Mutable, CFSTR("IMEI2"), v89);
LABEL_137:
                      *a4 = Mutable;
LABEL_138:
                      v91 = 1;
                      goto LABEL_139;
                    }
                  }
                  goto LABEL_183;
                }
                ACFULogging::getLogInstance((ACFULogging *)v84);
                ACFULogging::handleMessage();
                (*(void (**)(void *))(*(_QWORD *)v83 + 8))(v83);
LABEL_182:
                v91 = 0;
                goto LABEL_139;
              }
LABEL_119:
              v99 = 0;
              goto LABEL_120;
            }
            ACFULogging::getLogInstance(v69);
            *((_BYTE *)&v111.__r_.__value_.__s + 23) = 20;
            strcpy((char *)&v111, "BasebandProvisioning");
            v71 = std::string::append(&v111, "::", 2uLL);
            v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
            v112.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v72;
            v71->__r_.__value_.__l.__size_ = 0;
            v71->__r_.__value_.__r.__words[2] = 0;
            v71->__r_.__value_.__r.__words[0] = 0;
            v73 = std::string::append(&v112, "copyVinylEID", 0xCuLL);
            v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
            *(_QWORD *)&v119 = *((_QWORD *)&v73->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v74;
            v73->__r_.__value_.__l.__size_ = 0;
            v73->__r_.__value_.__r.__words[2] = 0;
            v73->__r_.__value_.__r.__words[0] = 0;
            ACFULogging::handleMessageCFType();
            if (SBYTE7(v119) < 0)
            {
              operator delete(__p[0]);
              if ((SHIBYTE(v112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_103:
                if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_104;
LABEL_114:
                operator delete(v111.__r_.__value_.__l.__data_);
LABEL_104:
                Copy = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("EID"));
                if (!Copy)
                {
LABEL_116:
                  CFRelease(theDict);
                  goto LABEL_117;
                }
                TypeID = CFStringGetTypeID();
                v76 = (ACFULogging *)CFGetTypeID(Copy);
                if ((ACFULogging *)TypeID != v76)
                {
                  Copy = 0;
                  goto LABEL_116;
                }
                ACFULogging::getLogInstance(v76);
                *((_BYTE *)&v111.__r_.__value_.__s + 23) = 20;
                strcpy((char *)&v111, "BasebandProvisioning");
                v77 = std::string::append(&v111, "::", 2uLL);
                v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
                v112.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v78;
                v77->__r_.__value_.__l.__size_ = 0;
                v77->__r_.__value_.__r.__words[2] = 0;
                v77->__r_.__value_.__r.__words[0] = 0;
                v79 = std::string::append(&v112, "copyVinylEID", 0xCuLL);
                v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
                *(_QWORD *)&v119 = *((_QWORD *)&v79->__r_.__value_.__l + 2);
                *(_OWORD *)__p = v80;
                v79->__r_.__value_.__l.__size_ = 0;
                v79->__r_.__value_.__r.__words[2] = 0;
                v79->__r_.__value_.__r.__words[0] = 0;
                ACFULogging::handleMessageCFType();
                if (SBYTE7(v119) < 0)
                {
                  operator delete(__p[0]);
                  if ((SHIBYTE(v112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_108:
                    if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_109:
                      Copy = CFStringCreateCopy(v12, Copy);
                      goto LABEL_116;
                    }
LABEL_164:
                    operator delete(v111.__r_.__value_.__l.__data_);
                    goto LABEL_109;
                  }
                }
                else if ((SHIBYTE(v112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  goto LABEL_108;
                }
                operator delete(v112.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_109;
                goto LABEL_164;
              }
            }
            else if ((SHIBYTE(v112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_103;
            }
            operator delete(v112.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_104;
            goto LABEL_114;
          }
          ACFULogging::getLogInstance(v55);
          ACFULogging::handleMessage();
LABEL_179:
          v58 = 0;
          v59 = 0;
          goto LABEL_80;
        }
        ACFULogging::getLogInstance(0);
LABEL_177:
        ACFULogging::handleMessage();
        PersonalizedFirmwarePath = 0;
        goto LABEL_179;
      }
    }
    ACFULogging::getLogInstance((ACFULogging *)ByteSwappedData);
LABEL_184:
    ACFULogging::handleMessage();
    goto LABEL_185;
  }
  ACFULogging::getLogInstance(v20);
  ACFULogging::handleMessage();
LABEL_185:
  v91 = 0;
LABEL_139:
  if (v97)
    CFRelease(v97);
  if (v98)
    CFRelease(v98);
  if (v99)
    CFRelease(v99);
  if (!v101)
    goto LABEL_149;
  v92 = (unint64_t *)&v101->__shared_owners_;
  do
    v93 = __ldaxr(v92);
  while (__stlxr(v93 - 1, v92));
  if (v93)
  {
LABEL_149:
    v94 = v103;
    if (!v103)
      goto LABEL_151;
    goto LABEL_150;
  }
  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
  std::__shared_weak_count::__release_weak(v101);
  v94 = v103;
  if (v103)
LABEL_150:
    CFRelease(v94);
LABEL_151:
  if (cf)
    CFRelease(cf);
  if (value)
    CFRelease(value);
  if (v107)
    CFRelease(v107);
  operator delete(v9);
  operator delete(v8);
  if (v108)
    CFRelease(v108);
  return v91;
}

void sub_212A8FF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,const void *a21,const void *a22,const void *a23,__int16 a24,uint64_t a25,uint64_t a26,const void *a27,const void *a28,uint64_t a29,const void *a30,const void *a31,const void *a32)
{
  void *v32;
  void *v33;

  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a21);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a22);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a23);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a27);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a28);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a30);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a31);
  operator delete(v33);
  operator delete(v32);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a32);
  _Unwind_Resume(a1);
}

const void **ctu::cf::detail::TakeOwnershipProxy<__CFString const>::~TakeOwnershipProxy(const void **a1)
{
  const void **v2;
  const void *v3;
  const void *v4;

  v3 = *a1;
  v2 = (const void **)a1[1];
  v4 = *v2;
  if (v3)
  {
    *v2 = v3;
    if (v4)
      goto LABEL_5;
  }
  else
  {
    *v2 = 0;
    if (v4)
LABEL_5:
      CFRelease(v4);
  }
  return a1;
}

uint64_t ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t configureProvisioner(std::string *a1, CFDictionaryRef theDict)
{
  const __CFString *Value;
  const __CFString *v4;
  CFTypeID v5;
  ACFULogging *TypeID;
  const char *CStringPtr;
  std::string *v8;
  std::string::size_type size;
  dispatch_queue_t v10;
  NSObject *v11;
  CFTypeRef *v12;
  CFTypeRef v13;
  void *v14;
  uint64_t (*v15)(uint64_t);
  CFTypeID v16;
  ACFULogging *v17;
  ACFULogging *v18;
  char v19;
  uint64_t v20;
  std::string v22;
  int v23;
  std::string v24;
  unint64_t v25;
  CFTypeRef v26;

  v25 = 0xAAAAAAAA0000003CLL;
  memset(&v24, 0, sizeof(v24));
  Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("AuthInstallProvisioningServerURL"));
  v4 = Value;
  if (!Value)
  {
    ACFULogging::getLogInstance(0);
    goto LABEL_39;
  }
  v5 = CFGetTypeID(Value);
  TypeID = (ACFULogging *)CFStringGetTypeID();
  if ((ACFULogging *)v5 != TypeID)
  {
    ACFULogging::getLogInstance(TypeID);
    goto LABEL_39;
  }
  CStringPtr = CFStringGetCStringPtr(v4, 0x8000100u);
  std::string::__assign_external(&v24, CStringPtr);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v22, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  else
    v22 = v24;
  v23 = v25;
  if (&v22 != a1)
  {
    if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
    {
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v22;
      else
        v8 = (std::string *)v22.__r_.__value_.__r.__words[0];
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      else
        size = v22.__r_.__value_.__l.__size_;
      std::string::__assign_no_alias<false>((void **)&a1->__r_.__value_.__l.__data_, v8, size);
    }
    else if ((*((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(a1, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    }
    else
    {
      *a1 = v22;
    }
  }
  LODWORD(a1[1].__r_.__value_.__l.__data_) = v23;
  v10 = dispatch_queue_create("BasebandProvisioning", 0);
  v11 = a1[1].__r_.__value_.__l.__size_;
  a1[1].__r_.__value_.__l.__size_ = (std::string::size_type)v10;
  if (v11)
  {
    dispatch_release(v11);
    v10 = (dispatch_queue_t)a1[1].__r_.__value_.__l.__size_;
  }
  if (!v10)
  {
    ACFULogging::getLogInstance(0);
    goto LABEL_42;
  }
  getReverseProxySettings((uint64_t)a1, (uint64_t *)&v26);
  v12 = (CFTypeRef *)&a1[1].__r_.__value_.__r.__words[2];
  if (v12 != &v26)
  {
    v13 = *v12;
    *v12 = v26;
    v26 = 0;
    if (!v13)
      goto LABEL_26;
    CFRelease(v13);
  }
  if (v26)
    CFRelease(v26);
LABEL_26:
  v14 = (void *)*v12;
  v15 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!*v12)
    v15 = 0;
  if (v15)
  {
    v16 = CFGetTypeID(v14);
    v17 = (ACFULogging *)CFDictionaryGetTypeID();
    ACFULogging::getLogInstance(v17);
    if ((ACFULogging *)v16 == v17)
    {
      v18 = (ACFULogging *)ACFULogging::handleMessage();
      v19 = 1;
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_31;
    }
  }
  else
  {
    ACFULogging::getLogInstance((ACFULogging *)v14);
  }
LABEL_42:
  v18 = (ACFULogging *)ACFULogging::handleMessage();
  v19 = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
LABEL_31:
    operator delete(v22.__r_.__value_.__l.__data_);
LABEL_32:
  if ((v19 & 1) == 0)
  {
    ACFULogging::getLogInstance(v18);
LABEL_39:
    ACFULogging::handleMessage();
    v20 = 0;
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v20;
    goto LABEL_40;
  }
  v20 = 1;
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v20;
LABEL_40:
  operator delete(v24.__r_.__value_.__l.__data_);
  return v20;
}

void sub_212A904F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t provisionBaseband(ACFULogging *a1, uint64_t *a2, ACFUFirmware **a3, __CFDictionary **a4)
{
  ACFULogging *v8;
  uint64_t v9;
  ACFULogging *APProvisioningInfo;
  CFTypeRef v11;
  const void *v12;
  ACFULogging *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  ACFUFirmware *v21;
  unint64_t *v22;
  unint64_t v23;
  ACFULogging *v24;
  char v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  CFTypeRef v31;
  const void *v32;
  ACFULogging *v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  ACFULogging *v38;
  ACFULogging *v39;
  int v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  ACFULogging *Value;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  ACFULogging *v50;
  UInt8 *v51;
  _OWORD *v52;
  uint64_t (*v53)(uint64_t);
  const __CFData *v54;
  ACFULogging *v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  ACFULogging *v61;
  ACFULogging *v62;
  uint64_t v63;
  uint64_t v64;
  ACFULogging *v65;
  ACFULogging *v66;
  char v67;
  __CFDictionary *Mutable;
  __CFDictionary *v69;
  ACFULogging *v70;
  uint64_t v71;
  CFDictionaryRef v72;
  ACFULogging *v74;
  ACFUFirmware *v75[2];
  uint64_t v76;
  std::__shared_weak_count *v77;
  CFDictionaryRef theDict;
  CFTypeRef v79;
  CFTypeRef cf;
  std::string v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  CFDataRef theData[2];
  __int128 v86;
  std::string v87;
  std::string v88;
  _OWORD v89[3];
  CFRange v90;

  v82 = 0xAAAAAAAAAAAAAAAALL;
  memset(&v81, 0, sizeof(v81));
  v83 = 0u;
  v84 = 0u;
  *(_OWORD *)theData = 0u;
  v86 = 0u;
  v79 = 0;
  cf = 0;
  theDict = 0;
  ACFULogging::getLogInstance(a1);
  v8 = (ACFULogging *)ACFULogging::handleMessage();
  if (!a1 || !*a2 || !*a3 || !a4)
  {
    ACFULogging::getLogInstance(v8);
    goto LABEL_96;
  }
  v9 = configureProvisioner(&v81, a1);
  if ((v9 & 1) == 0)
  {
    ACFULogging::getLogInstance((ACFULogging *)v9);
    goto LABEL_96;
  }
  ACFULogging::getLogInstance((ACFULogging *)v9);
  ACFULogging::handleMessage();
  APProvisioningInfo = (ACFULogging *)createAPProvisioningInfo((__CFDictionary **)&cf);
  if ((APProvisioningInfo & 1) == 0 || (v11 = cf) == 0)
  {
    ACFULogging::getLogInstance(APProvisioningInfo);
    goto LABEL_96;
  }
  CFRetain(cf);
  v12 = (const void *)v86;
  *(_QWORD *)&v86 = v11;
  if (v12)
    CFRelease(v12);
  CFRelease(v11);
  ACFULogging::getLogInstance(v13);
  *((_BYTE *)&v87.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v87, "BasebandProvisioning");
  v14 = std::string::append(&v87, "::", 2uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v88, "provisionBaseband", 0x11uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  *(_QWORD *)&v89[1] = *((_QWORD *)&v16->__r_.__value_.__l + 2);
  v89[0] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  ACFULogging::handleMessageCFType();
  if (SBYTE7(v89[1]) < 0)
  {
    operator delete(*(void **)&v89[0]);
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v88.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    v18 = (std::__shared_weak_count *)a2[1];
    v76 = *a2;
    v77 = v18;
    if (!v18)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v87.__r_.__value_.__l.__data_);
  v18 = (std::__shared_weak_count *)a2[1];
  v76 = *a2;
  v77 = v18;
  if (!v18)
    goto LABEL_20;
LABEL_18:
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
LABEL_20:
  v21 = a3[1];
  v75[0] = *a3;
  v75[1] = v21;
  if (v21)
  {
    v22 = (unint64_t *)((char *)v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = (ACFULogging *)createBasebandProvInfo(1, &v76, v75, (__CFDictionary **)&v79);
  v25 = (char)v24;
  if (v21)
  {
    v26 = (unint64_t *)((char *)v21 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      (*(void (**)(ACFUFirmware *))(*(_QWORD *)v21 + 16))(v21);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v21);
    }
  }
  v28 = v77;
  if (v77)
  {
    v29 = (unint64_t *)&v77->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if ((v25 & 1) == 0)
    goto LABEL_86;
  v31 = v79;
  if (!v79)
    goto LABEL_86;
  CFRetain(v79);
  v32 = (const void *)*((_QWORD *)&v86 + 1);
  *((_QWORD *)&v86 + 1) = v31;
  if (v32)
    CFRelease(v32);
  CFRelease(v31);
  ACFULogging::getLogInstance(v33);
  *((_BYTE *)&v87.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v87, "BasebandProvisioning");
  v34 = std::string::append(&v87, "::", 2uLL);
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = std::string::append(&v88, "provisionBaseband", 0x11uLL);
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  *(_QWORD *)&v89[1] = *((_QWORD *)&v36->__r_.__value_.__l + 2);
  v89[0] = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  v38 = (ACFULogging *)ACFULogging::handleMessageCFType();
  if ((SBYTE7(v89[1]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_39;
LABEL_72:
    operator delete(v88.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_73;
  }
  operator delete(*(void **)&v89[0]);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_72;
LABEL_39:
  if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_40;
LABEL_73:
  operator delete(v87.__r_.__value_.__l.__data_);
LABEL_40:
  ACFULogging::getLogInstance(v38);
  ACFULogging::handleMessage();
  v39 = (ACFULogging *)BasebandProvisioning::sendServerReq((CFMutableDictionaryRef)&v81, CFSTR("100"), a1, (CFTypeRef *)&theDict);
  v40 = (int)v39;
  ACFULogging::getLogInstance(v39);
  if (!v40)
    goto LABEL_90;
  *((_BYTE *)&v87.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v87, "BasebandProvisioning");
  v41 = std::string::append(&v87, "::", 2uLL);
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  v43 = std::string::append(&v88, "createProvisionedInfo", 0x15uLL);
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  *(_QWORD *)&v89[1] = *((_QWORD *)&v43->__r_.__value_.__l + 2);
  v89[0] = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  ACFULogging::handleMessageCFType();
  if ((SBYTE7(v89[1]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_43;
LABEL_75:
    operator delete(v88.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_76;
  }
  operator delete(*(void **)&v89[0]);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_75;
LABEL_43:
  if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_44;
LABEL_76:
  operator delete(v87.__r_.__value_.__l.__data_);
LABEL_44:
  Value = (ACFULogging *)CFDictionaryGetValue(theDict, CFSTR("STATUS"));
  ACFULogging::getLogInstance(Value);
  if (!Value)
    goto LABEL_90;
  *((_BYTE *)&v87.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v87, "BasebandProvisioning");
  v46 = std::string::append(&v87, "::", 2uLL);
  v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  v48 = std::string::append(&v88, "createProvisionedInfo", 0x15uLL);
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  *(_QWORD *)&v89[1] = *((_QWORD *)&v48->__r_.__value_.__l + 2);
  v89[0] = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  ACFULogging::handleMessageCFType();
  if ((SBYTE7(v89[1]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_47;
LABEL_78:
    operator delete(v88.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_79;
  }
  operator delete(*(void **)&v89[0]);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_78;
LABEL_47:
  if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_48;
LABEL_79:
  operator delete(v87.__r_.__value_.__l.__data_);
LABEL_48:
  v50 = (ACFULogging *)CFStringCompare((CFStringRef)Value, CFSTR("0"), 0);
  if (v50)
  {
    ACFULogging::getLogInstance(v50);
LABEL_90:
    v74 = (ACFULogging *)ACFULogging::handleMessage();
    ACFULogging::getLogInstance(v74);
    goto LABEL_96;
  }
  ACFULogging::getLogInstance(0);
  ACFULogging::handleMessage();
  v51 = (UInt8 *)operator new(0xC02uLL);
  v52 = operator new(0xACuLL);
  bzero(v51, 0xC02uLL);
  *(_OWORD *)((char *)v52 + 156) = 0u;
  v52[8] = 0u;
  v52[9] = 0u;
  v52[6] = 0u;
  v52[7] = 0u;
  v52[4] = 0u;
  v52[5] = 0u;
  v52[2] = 0u;
  v52[3] = 0u;
  *v52 = 0u;
  v52[1] = 0u;
  v53 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  if (!theData[1])
    v53 = 0;
  if (!v53)
  {
    ACFULogging::getLogInstance(theData[1]);
LABEL_94:
    v63 = 0;
    ACFULogging::handleMessage();
    goto LABEL_99;
  }
  *(_WORD *)v51 = CFDataGetLength(theData[1]);
  v54 = theData[1];
  v90.length = CFDataGetLength(theData[1]);
  v90.location = 0;
  CFDataGetBytes(v54, v90, v51 + 2);
  ACFULogging::getLogInstance(v55);
  ACFULogging::handleMessage();
  LODWORD(v56) = *(unsigned __int16 *)v51;
  if (*(_WORD *)v51)
  {
    v57 = 0;
    v58 = 0;
    do
    {
      v59 = v57 + v56;
      if (v59 >= 0x10)
        v60 = 16;
      else
        v60 = v59;
      memset(v89, 170, 24);
      v61 = (ACFULogging *)ctu::hex((ctu *)&v51[v58 + 2], (const void *)v60);
      ACFULogging::getLogInstance(v61);
      ACFULogging::handleMessage();
      if (SBYTE7(v89[1]) < 0)
        operator delete(*(void **)&v89[0]);
      v58 += 16;
      v56 = *(unsigned __int16 *)v51;
      v57 -= 16;
    }
    while (v58 < v56);
  }
  support::transport::ARI::create((support::transport::ARI *)"BasebandProvisioning", (dispatch_queue_s *)0x2710, 0, 0, (char **)v89);
  v63 = *(_QWORD *)&v89[0];
  if (!*(_QWORD *)&v89[0])
  {
    ACFULogging::getLogInstance(v62);
    goto LABEL_94;
  }
  v64 = KTLFinishProvision();
  if ((v64 & 1) != 0)
  {
    memset(v89, 170, 24);
    ctu::hex((ctu *)((char *)v52 + 44), (const void *)7);
    memset(&v88, 170, sizeof(v88));
    v65 = (ACFULogging *)ctu::hex((ctu *)((char *)v52 + 60), (const void *)7);
    ACFULogging::getLogInstance(v65);
    v66 = (ACFULogging *)ACFULogging::handleMessage();
    ACFULogging::getLogInstance(v66);
    ACFULogging::handleMessage();
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v88.__r_.__value_.__l.__data_);
      if ((SBYTE7(v89[1]) & 0x80000000) == 0)
        goto LABEL_64;
    }
    else if ((SBYTE7(v89[1]) & 0x80000000) == 0)
    {
      goto LABEL_64;
    }
    operator delete(*(void **)&v89[0]);
LABEL_64:
    v67 = 1;
    operator delete(v52);
    operator delete(v51);
    if (!v63)
      goto LABEL_66;
    goto LABEL_65;
  }
  ACFULogging::getLogInstance((ACFULogging *)v64);
  ACFULogging::handleMessage();
LABEL_99:
  v67 = 0;
  operator delete(v52);
  operator delete(v51);
  if (v63)
LABEL_65:
    v24 = (ACFULogging *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
LABEL_66:
  if ((v67 & 1) == 0)
  {
LABEL_86:
    ACFULogging::getLogInstance(v24);
    goto LABEL_96;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v69 = Mutable;
  if (!Mutable)
  {
    ACFULogging::getLogInstance(0);
LABEL_96:
    ACFULogging::handleMessage();
    v71 = 0;
    v72 = theDict;
    if (!theDict)
      goto LABEL_70;
    goto LABEL_69;
  }
  CFDictionaryAddValue(Mutable, CFSTR("ProvisionedInfo"), theDict);
  CFDictionaryAddValue(v69, CFSTR("BasebandProvInfo"), v79);
  *a4 = v69;
  ACFULogging::getLogInstance(v70);
  ACFULogging::handleMessage();
  v71 = 1;
  v72 = theDict;
  if (theDict)
LABEL_69:
    CFRelease(v72);
LABEL_70:
  BasebandProvisioning::~BasebandProvisioning((BasebandProvisioning *)&v81);
  return v71;
}

void sub_212A9105C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  if (*(char *)(v26 - 105) < 0)
  {
    operator delete(*(void **)(v26 - 128));
    operator delete(v24);
    operator delete(v23);
    if (!v25)
    {
LABEL_4:
      BasebandProvisioning::~BasebandProvisioning((BasebandProvisioning *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    operator delete(v24);
    operator delete(v23);
    if (!v25)
      goto LABEL_4;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  goto LABEL_4;
}

void sub_212A91238()
{
  void *v0;
  void *v1;
  uint64_t v2;

  operator delete(v1);
  operator delete(v0);
  if (!v2)
    JUMPOUT(0x212A91200);
  JUMPOUT(0x212A911F0);
}

void sub_212A91274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  BasebandProvisioning::~BasebandProvisioning((BasebandProvisioning *)va);
  _Unwind_Resume(a1);
}

void sub_212A91288()
{
  void *v0;
  void *v1;
  uint64_t v2;

  if (*(char *)(v2 - 105) < 0)
    operator delete(*(void **)(v2 - 128));
  operator delete(v1);
  operator delete(v0);
  JUMPOUT(0x212A91200);
}

uint64_t createAPProvisioningInfo(__CFDictionary **a1)
{
  const __CFAllocator *v2;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v4;
  uint64_t (*v5)(const __CFString *, _QWORD);
  const void *v6;
  const void *v7;
  uint64_t (*v8)(const __CFString *, _QWORD);
  const void *v9;
  const void *v10;
  uint64_t (*v11)(const __CFString *, _QWORD);
  const void *v12;
  const void *v13;
  uint64_t (*v14)(const __CFString *, _QWORD);
  const __CFNumber *v15;
  const __CFNumber *v16;
  CFStringRef v17;
  CFStringRef v18;
  __int128 v19;
  ACFULogging *v20;
  int *v21;
  const __CFString *v22;
  CFMutableStringRef MutableCopy;
  CFIndex Length;
  uint64_t v25;
  CFRange v26;
  uint64_t (*v27)(const __CFString *, _QWORD);
  const void *v28;
  const void *v29;
  const __CFString *v30;
  const __CFString *v31;
  const __CFString *v32;
  const __CFString *v33;
  const __CFString *v34;
  const __CFString *v35;
  const __CFString *v36;
  const __CFString *v37;
  const __CFString *v38;
  const __CFString *v39;
  const __CFString *v40;
  const __CFString *v41;
  const __CFString *v42;
  const __CFString *v43;
  const __CFString *v44;
  const __CFString *v45;
  const __CFString *v46;
  const __CFString *v47;
  uint64_t (*v48)(const __CFString *, _QWORD);
  const void *v49;
  const void *v50;
  uint64_t (*v51)(const __CFString *, _QWORD);
  const __CFNumber *v52;
  const __CFNumber *v53;
  CFStringRef v54;
  CFStringRef v55;
  size_t v57;
  _OWORD valuePtr[8];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  ACFULogging::getLogInstance((ACFULogging *)a1);
  if (!a1)
    goto LABEL_68;
  ACFULogging::handleMessage();
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
  {
    ACFULogging::getLogInstance(0);
    goto LABEL_68;
  }
  v4 = Mutable;
  if (BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken == -1)
  {
    v5 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken, &__block_literal_global_4);
    v5 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
      goto LABEL_8;
  }
  v6 = (const void *)v5(CFSTR("MLBSerialNumber"), 0);
  if (v6)
  {
    v7 = v6;
    CFDictionarySetValue(v4, CFSTR("MLB"), v6);
    CFRelease(v7);
  }
  if (BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken != -1)
  {
    dispatch_once(&BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken, &__block_literal_global_4);
    v8 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
      goto LABEL_12;
    goto LABEL_9;
  }
LABEL_8:
  v8 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
  if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
    goto LABEL_12;
LABEL_9:
  v9 = (const void *)v8(CFSTR("ModelNumber"), 0);
  if (v9)
  {
    v10 = v9;
    CFDictionarySetValue(v4, CFSTR("MPN"), v9);
    CFRelease(v10);
  }
  if (BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken != -1)
  {
    dispatch_once(&BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken, &__block_literal_global_4);
    v11 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
      goto LABEL_16;
    goto LABEL_13;
  }
LABEL_12:
  v11 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
  if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
    goto LABEL_16;
LABEL_13:
  v12 = (const void *)v11(CFSTR("RegionInfo"), 0);
  if (v12)
  {
    v13 = v12;
    CFDictionarySetValue(v4, CFSTR("RGN"), v12);
    CFRelease(v13);
  }
  if (BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken != -1)
  {
    dispatch_once(&BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken, &__block_literal_global_4);
    v14 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
      goto LABEL_22;
    goto LABEL_17;
  }
LABEL_16:
  v14 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
  if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
    goto LABEL_22;
LABEL_17:
  v15 = (const __CFNumber *)v14(CFSTR("UniqueChipID"), 0);
  if (v15)
  {
    v16 = v15;
    *(_QWORD *)&valuePtr[0] = 0;
    if (CFNumberGetValue(v15, kCFNumberSInt64Type, valuePtr))
    {
      v17 = CFStringCreateWithFormat(v2, 0, CFSTR("%qu"), *(_QWORD *)&valuePtr[0], "createAPProvisioningInfo");
      if (!v17)
      {
        ACFULogging::getLogInstance(0);
        goto LABEL_68;
      }
      v18 = v17;
      CFDictionarySetValue(v4, CFSTR("ECID"), v17);
      CFRelease(v18);
    }
    CFRelease(v16);
  }
LABEL_22:
  *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  valuePtr[6] = v19;
  valuePtr[7] = v19;
  valuePtr[4] = v19;
  valuePtr[5] = v19;
  valuePtr[2] = v19;
  valuePtr[3] = v19;
  valuePtr[0] = v19;
  valuePtr[1] = v19;
  v57 = 128;
  v20 = (ACFULogging *)sysctlbyname("hw.target", valuePtr, &v57, 0, 0);
  if ((_DWORD)v20)
  {
    ACFULogging::getLogInstance(v20);
    v21 = __error();
    strerror(*v21);
    ACFULogging::handleMessage();
    v22 = CFSTR("unknown");
  }
  else
  {
    v22 = CFStringCreateWithCString(v2, (const char *)valuePtr, 0x8000100u);
    if (!v22)
      goto LABEL_32;
  }
  MutableCopy = CFStringCreateMutableCopy(v2, 0, v22);
  CFStringLowercase(MutableCopy, 0);
  Length = CFStringGetLength(MutableCopy);
  if (CFStringHasSuffix(MutableCopy, CFSTR("ap")) == 1)
  {
    v25 = -2;
    v26.length = 2;
  }
  else
  {
    if (CFStringHasSuffix(MutableCopy, CFSTR("dev")) != 1)
      goto LABEL_30;
    v25 = -3;
    v26.length = 3;
  }
  v26.location = v25 + Length;
  CFStringDelete(MutableCopy, v26);
LABEL_30:
  CFRelease(v22);
  if (MutableCopy)
  {
    CFStringUppercase(MutableCopy, 0);
    CFDictionarySetValue(v4, CFSTR("PRODUCT"), MutableCopy);
    CFRelease(MutableCopy);
  }
LABEL_32:
  if (BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken == -1)
  {
    v27 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
      goto LABEL_36;
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken, &__block_literal_global_4);
    v27 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
      goto LABEL_36;
  }
  v28 = (const void *)v27(CFSTR("SerialNumber"), 0);
  if (v28)
  {
    v29 = v28;
    CFDictionarySetValue(v4, CFSTR("SN"), v28);
    CFRelease(v29);
  }
LABEL_36:
  v30 = copy_mac_address_existence(CFSTR("WifiAddress"));
  if (v30)
  {
    v31 = v30;
    CFDictionarySetValue(v4, CFSTR("WIFI_MAC"), v30);
    CFRelease(v31);
  }
  v32 = copy_mac_address_existence(CFSTR("BluetoothAddress"));
  if (v32)
  {
    v33 = v32;
    CFDictionarySetValue(v4, CFSTR("BT_MAC"), v32);
    CFRelease(v33);
  }
  v34 = copy_mac_address_existence(CFSTR("EthernetMacAddress"));
  if (v34)
  {
    v35 = v34;
    CFDictionarySetValue(v4, CFSTR("USB_ETHER_MAC"), v34);
    CFRelease(v35);
  }
  v36 = copy_mac_address_existence(CFSTR("SecondaryWifiMacAddress"));
  if (v36)
  {
    v37 = v36;
    CFDictionarySetValue(v4, CFSTR("WIFI_MAC2"), v36);
    CFRelease(v37);
  }
  v38 = copy_mac_address_existence(CFSTR("SecondaryBluetoothMacAddress"));
  if (v38)
  {
    v39 = v38;
    CFDictionarySetValue(v4, CFSTR("BT_MAC2"), v38);
    CFRelease(v39);
  }
  v40 = copy_mac_address_existence(CFSTR("SecondaryEthernetMacAddress"));
  if (v40)
  {
    v41 = v40;
    CFDictionarySetValue(v4, CFSTR("ETH_MAC"), v40);
    CFRelease(v41);
  }
  v42 = copy_mac_address_existence(CFSTR("ExtendedLOMMacAddress"));
  if (v42)
  {
    v43 = v42;
    CFDictionarySetValue(v4, CFSTR("ETHER_MAC2"), v42);
    CFRelease(v43);
  }
  v44 = copy_mac_address_existence(CFSTR("PintoMacAddress"));
  if (v44)
  {
    v45 = v44;
    CFDictionarySetValue(v4, CFSTR("PINTO_MAC"), v44);
    CFRelease(v45);
  }
  v46 = copy_mac_address_existence(CFSTR("ThreadRadioMacAddressForProvisioning"));
  if (v46)
  {
    v47 = v46;
    CFDictionarySetValue(v4, CFSTR("T_MAC"), v46);
    CFRelease(v47);
  }
  if (BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken == -1)
  {
    v48 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
      goto LABEL_59;
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken, &__block_literal_global_4);
    v48 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
      goto LABEL_59;
  }
  v49 = (const void *)v48(CFSTR("UniqueDeviceID"), 0);
  if (v49)
  {
    v50 = v49;
    CFDictionarySetValue(v4, CFSTR("UDID"), v49);
    CFRelease(v50);
  }
  if (BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken != -1)
  {
    dispatch_once(&BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken, &__block_literal_global_4);
    v51 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
      goto LABEL_65;
    goto LABEL_60;
  }
LABEL_59:
  v51 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
  if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
  {
LABEL_65:
    *a1 = v4;
    return 1;
  }
LABEL_60:
  v52 = (const __CFNumber *)v51(CFSTR("BoardId"), 0);
  if (!v52)
    goto LABEL_65;
  v53 = v52;
  *(_QWORD *)&valuePtr[0] = 0;
  if (!CFNumberGetValue(v52, kCFNumberSInt64Type, valuePtr))
  {
LABEL_64:
    CFRelease(v53);
    goto LABEL_65;
  }
  v54 = CFStringCreateWithFormat(v2, 0, CFSTR("%qx"), *(_QWORD *)&valuePtr[0]);
  if (v54)
  {
    v55 = v54;
    CFDictionarySetValue(v4, CFSTR("BoardId"), v54);
    CFRelease(v55);
    goto LABEL_64;
  }
  ACFULogging::getLogInstance(0);
LABEL_68:
  ACFULogging::handleMessage();
  return 0;
}

uint64_t sendProvisionPing(ACFULogging *a1, uint64_t *a2, ACFUFirmware **a3, BOOL *a4)
{
  ACFULogging *v8;
  uint64_t v9;
  ACFULogging *APProvisioningInfo;
  CFTypeRef v11;
  const void *v12;
  ACFULogging *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  ACFUFirmware *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  CFTypeRef v31;
  const void *v32;
  ACFULogging *v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  ACFULogging *Value;
  const __CFString *v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  uint64_t v44;
  CFDictionaryRef v45;
  ACFUFirmware *v47[2];
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::string v50;
  std::string v51;
  void *__p[2];
  std::string::size_type v53;
  CFDictionaryRef theDict;
  CFTypeRef v55;
  CFTypeRef cf;
  std::string v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;

  v58 = 0xAAAAAAAAAAAAAAAALL;
  memset(&v57, 0, sizeof(v57));
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v55 = 0;
  cf = 0;
  theDict = 0;
  ACFULogging::getLogInstance(a1);
  v8 = (ACFULogging *)ACFULogging::handleMessage();
  if (!a1 || !*a2 || !*a3)
  {
    ACFULogging::getLogInstance(v8);
    goto LABEL_61;
  }
  v9 = configureProvisioner(&v57, a1);
  if ((v9 & 1) == 0)
  {
    ACFULogging::getLogInstance((ACFULogging *)v9);
    goto LABEL_61;
  }
  ACFULogging::getLogInstance((ACFULogging *)v9);
  ACFULogging::handleMessage();
  APProvisioningInfo = (ACFULogging *)createAPProvisioningInfo((__CFDictionary **)&cf);
  if ((APProvisioningInfo & 1) == 0 || (v11 = cf) == 0)
  {
    ACFULogging::getLogInstance(APProvisioningInfo);
    goto LABEL_61;
  }
  CFRetain(cf);
  v12 = (const void *)v62;
  *(_QWORD *)&v62 = v11;
  if (v12)
    CFRelease(v12);
  CFRelease(v11);
  ACFULogging::getLogInstance(v13);
  *((_BYTE *)&v50.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v50, "BasebandProvisioning");
  v14 = std::string::append(&v50, "::", 2uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v51, "sendProvisionPing", 0x11uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v53 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  ACFULogging::handleMessageCFType();
  if (SHIBYTE(v53) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_16;
    }
  }
  else if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v51.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_12:
    v18 = (std::__shared_weak_count *)a2[1];
    v48 = *a2;
    v49 = v18;
    if (!v18)
      goto LABEL_19;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v50.__r_.__value_.__l.__data_);
  v18 = (std::__shared_weak_count *)a2[1];
  v48 = *a2;
  v49 = v18;
  if (!v18)
    goto LABEL_19;
LABEL_17:
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
LABEL_19:
  v21 = a3[1];
  v47[0] = *a3;
  v47[1] = v21;
  if (v21)
  {
    v22 = (unint64_t *)((char *)v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = createBasebandProvInfo(0, &v48, v47, (__CFDictionary **)&v55);
  v25 = v24;
  if (v21)
  {
    v26 = (unint64_t *)((char *)v21 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      (*(void (**)(ACFUFirmware *))(*(_QWORD *)v21 + 16))(v21);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v21);
    }
  }
  v28 = v49;
  if (v49)
  {
    v29 = (unint64_t *)&v49->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if ((v25 & 1) == 0)
    goto LABEL_58;
  v31 = v55;
  if (!v55)
    goto LABEL_58;
  CFRetain(v55);
  v32 = (const void *)*((_QWORD *)&v62 + 1);
  *((_QWORD *)&v62 + 1) = v31;
  if (v32)
    CFRelease(v32);
  CFRelease(v31);
  ACFULogging::getLogInstance(v33);
  *((_BYTE *)&v50.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v50, "BasebandProvisioning");
  v34 = std::string::append(&v50, "::", 2uLL);
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = std::string::append(&v51, "sendProvisionPing", 0x11uLL);
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v53 = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  ACFULogging::handleMessageCFType();
  if ((SHIBYTE(v53) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_38;
LABEL_49:
    operator delete(v51.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_50;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_49;
LABEL_38:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_39;
LABEL_50:
  operator delete(v50.__r_.__value_.__l.__data_);
LABEL_39:
  v24 = BasebandProvisioning::sendServerReq((CFMutableDictionaryRef)&v57, CFSTR("1"), a1, (CFTypeRef *)&theDict);
  if ((v24 & 1) == 0)
  {
LABEL_58:
    ACFULogging::getLogInstance((ACFULogging *)v24);
    goto LABEL_61;
  }
  if (!theDict
    || (Value = (ACFULogging *)CFDictionaryGetValue(theDict, CFSTR("STATUS")), (v39 = (const __CFString *)Value) == 0))
  {
    ACFULogging::getLogInstance(0);
LABEL_61:
    ACFULogging::handleMessage();
    v44 = 0;
    v45 = theDict;
    if (!theDict)
      goto LABEL_47;
    goto LABEL_46;
  }
  ACFULogging::getLogInstance(Value);
  *((_BYTE *)&v50.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v50, "BasebandProvisioning");
  v40 = std::string::append(&v50, "::", 2uLL);
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v42 = std::string::append(&v51, "sendProvisionPing", 0x11uLL);
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v53 = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  ACFULogging::handleMessageCFType();
  if ((SHIBYTE(v53) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_44;
LABEL_52:
    operator delete(v51.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_53;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_52;
LABEL_44:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_45;
LABEL_53:
  operator delete(v50.__r_.__value_.__l.__data_);
LABEL_45:
  *a4 = CFStringCompare(v39, CFSTR("0"), 0) == kCFCompareEqualTo;
  v44 = 1;
  v45 = theDict;
  if (theDict)
LABEL_46:
    CFRelease(v45);
LABEL_47:
  BasebandProvisioning::~BasebandProvisioning((BasebandProvisioning *)&v57);
  return v44;
}

void sub_212A92048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (a36 < 0)
  {
    operator delete(__p);
    if ((a29 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a22 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a29 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_4:
    BasebandProvisioning::~BasebandProvisioning((BasebandProvisioning *)(v36 - 160));
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a17);
  BasebandProvisioning::~BasebandProvisioning((BasebandProvisioning *)(v36 - 160));
  _Unwind_Resume(a1);
}

void sub_212A92148(_Unwind_Exception *a1)
{
  uint64_t v1;

  BasebandProvisioning::~BasebandProvisioning((BasebandProvisioning *)(v1 - 160));
  _Unwind_Resume(a1);
}

std::string *std::vector<std::pair<std::string,std::vector<unsigned char>>>::__emplace_back_slow_path<std::string&,std::vector<unsigned char>&>(std::string **a1, __int128 *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::pointer data;
  std::string *v18;
  std::string *v19;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<std::pair<std::string,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4) > v5)
    v5 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(48 * v8);
  }
  else
  {
    v9 = 0;
  }
  v18 = (std::string *)&v9[48 * v4];
  v19 = (std::string *)&v9[48 * v8];
  std::pair<std::string,std::vector<unsigned char>>::pair[abi:ne180100]<std::string&,std::vector<unsigned char>&,0>(v18, a2, a3);
  v10 = v18;
  v11 = v18 + 2;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v18;
    a1[1] = v11;
    a1[2] = v19;
  }
  else
  {
    do
    {
      v14 = *(_OWORD *)&v13[-2].__r_.__value_.__l.__data_;
      v10[-2].__r_.__value_.__r.__words[2] = v13[-2].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v10[-2].__r_.__value_.__l.__data_ = v14;
      v13[-2].__r_.__value_.__l.__size_ = 0;
      v13[-2].__r_.__value_.__r.__words[2] = 0;
      v13[-2].__r_.__value_.__r.__words[0] = 0;
      v10[-1].__r_.__value_.__r.__words[0] = 0;
      v10[-1].__r_.__value_.__l.__size_ = 0;
      v10[-1].__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = *(_OWORD *)&v13[-1].__r_.__value_.__l.__data_;
      v10[-1].__r_.__value_.__r.__words[2] = v13[-1].__r_.__value_.__r.__words[2];
      v10 -= 2;
      v13[-1].__r_.__value_.__r.__words[0] = 0;
      v13[-1].__r_.__value_.__l.__size_ = 0;
      v13[-1].__r_.__value_.__r.__words[2] = 0;
      v13 -= 2;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v10;
    a1[1] = v11;
    a1[2] = v19;
    while (v15 != v13)
    {
      data = v15[-1].__r_.__value_.__l.__data_;
      if (data)
      {
        v15[-1].__r_.__value_.__l.__size_ = (std::string::size_type)data;
        operator delete(data);
      }
      if (SHIBYTE(v15[-2].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15[-2].__r_.__value_.__l.__data_);
      v15 -= 2;
    }
  }
  if (v13)
    operator delete(v13);
  return v18 + 2;
}

void sub_212A92308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::vector<unsigned char>>::pair[abi:ne180100]<std::string&,std::vector<unsigned char>&,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  const void *v6;
  size_t v7;
  void *v9;
  std::string::size_type v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    v6 = *(const void **)a3;
    v7 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (!v7)
      return this;
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    v6 = *(const void **)a3;
    v7 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (!v7)
      return this;
  }
  if ((v7 & 0x8000000000000000) != 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v9 = operator new(v7);
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  v10 = (std::string::size_type)v9 + v7;
  this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v9 + v7;
  memcpy(v9, v6, v7);
  this[1].__r_.__value_.__l.__size_ = v10;
  return this;
}

void sub_212A923E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::pair<std::string,std::vector<unsigned char>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
    if (*(char *)(i - 25) < 0)
      operator delete(*(void **)(i - 48));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::pair<std::string,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

_QWORD *std::vector<std::pair<std::string,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::vector<unsigned char>>*,std::pair<std::string,std::vector<unsigned char>>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x555555555555556)
      std::vector<std::pair<std::string,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    result = operator new(48 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[6 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = std::pair<std::string,std::vector<unsigned char>>::pair[abi:ne180100]((std::string *)&v8[v9 / 8], (__int128 *)(a2 + v9));
        v9 += 48;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_212A9256C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::pair<std::string,std::vector<unsigned char>>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_212A92580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;

  for (; v11; v11 -= 48)
  {
    v13 = v10 + v11;
    v14 = *(void **)(v10 + v11 - 24);
    if (v14)
    {
      *(_QWORD *)(v13 - 16) = v14;
      operator delete(v14);
    }
    if (*(char *)(v13 - 25) < 0)
      operator delete(*(void **)(v13 - 48));
  }
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::pair<std::string,std::vector<unsigned char>>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::pair<std::string,std::vector<unsigned char>>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (void *)*((_QWORD *)v4 - 3);
          if (v6)
          {
            *((_QWORD *)v4 - 2) = v6;
            operator delete(v6);
          }
          if (*(v4 - 25) < 0)
            operator delete(*((void **)v4 - 6));
          v4 -= 48;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

std::string *std::pair<std::string,std::vector<unsigned char>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;
  _BYTE *v9;
  void *v10;
  std::string::size_type v11;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v9 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v9 - v6;
    if (v9 == v6)
      return this;
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v5 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v5 - v6;
    if (v5 == v6)
      return this;
  }
  if ((v7 & 0x8000000000000000) != 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v10 = operator new(v7);
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v10;
  v11 = (std::string::size_type)v10 + v7;
  this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v10 + v7;
  memcpy(v10, v6, v7);
  this[1].__r_.__value_.__l.__size_ = v11;
  return this;
}

void sub_212A92738(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::~basic_format(uint64_t a1)
{
  void *v2;
  std::locale *v3;
  std::locale *v4;
  std::locale *v5;

  if (*(_BYTE *)(a1 + 184))
  {
    std::locale::~locale((std::locale *)(a1 + 192));
    *(_BYTE *)(a1 + 184) = 0;
  }
  *(_QWORD *)(a1 + 96) = &unk_24CE7F6D8;
  if (*(_BYTE *)(a1 + 168))
    operator delete(*(void **)(a1 + 112));
  *(_OWORD *)(a1 + 153) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  std::streambuf::~streambuf();
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 24);
    if (!v2)
      goto LABEL_8;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 64));
  v2 = *(void **)(a1 + 24);
  if (v2)
LABEL_7:
    operator delete(v2);
LABEL_8:
  v3 = *(std::locale **)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(std::locale **)(a1 + 8);
    v5 = *(std::locale **)a1;
    if (v4 == v3)
    {
LABEL_22:
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v5);
      return a1;
    }
    while (1)
    {
      if (LOBYTE(v4[-4].__locale_))
      {
        std::locale::~locale(v4 - 3);
        LOBYTE(v4[-4].__locale_) = 0;
      }
      if (SHIBYTE(v4[-9].__locale_) < 0)
      {
        operator delete(v4[-11].__locale_);
        if (SHIBYTE(v4[-12].__locale_) < 0)
LABEL_18:
          operator delete(v4[-14].__locale_);
      }
      else if (SHIBYTE(v4[-12].__locale_) < 0)
      {
        goto LABEL_18;
      }
      v4 -= 15;
      if (v4 == v3)
      {
        v5 = *(std::locale **)a1;
        goto LABEL_22;
      }
    }
  }
  return a1;
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24CE7F6D8;
  if (*(_BYTE *)(a1 + 72))
    operator delete(*(void **)(a1 + 16));
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return std::streambuf::~streambuf();
}

void **std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::~vector[abi:ne180100](void **a1)
{
  std::locale *v2;
  std::locale *v3;
  void *v4;

  v2 = (std::locale *)*a1;
  if (*a1)
  {
    v3 = (std::locale *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_13:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (LOBYTE(v3[-4].__locale_))
      {
        std::locale::~locale(v3 - 3);
        LOBYTE(v3[-4].__locale_) = 0;
      }
      if (SHIBYTE(v3[-9].__locale_) < 0)
      {
        operator delete(v3[-11].__locale_);
        if (SHIBYTE(v3[-12].__locale_) < 0)
LABEL_11:
          operator delete(v3[-14].__locale_);
      }
      else if (SHIBYTE(v3[-12].__locale_) < 0)
      {
        goto LABEL_11;
      }
      v3 -= 15;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_13;
      }
    }
  }
  return a1;
}

void boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &unk_24CE7F6D8;
  if (*(_BYTE *)(a1 + 72))
    operator delete(*(void **)(a1 + 16));
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v2 = (void *)std::streambuf::~streambuf();
  operator delete(v2);
}

double boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double result;

  v5 = a1[6];
  if (v5 && a1[8] < v5)
    a1[8] = v5;
  if ((a4 & 8) != 0)
  {
    v6 = a1[3];
    if (v6)
    {
      if (a3)
      {
        if (a3 == 1)
        {
          if ((a4 & 0x10) != 0)
            goto LABEL_29;
          goto LABEL_21;
        }
        if (a3 != 2)
          goto LABEL_29;
        v7 = a1 + 8;
      }
      else
      {
        v7 = a1 + 2;
      }
      a2 = a2 - v6 + *v7;
LABEL_21:
      if (a1[2] <= (unint64_t)(v6 + a2) && (unint64_t)(v6 + a2) <= a1[8])
      {
        v9 = v6 + (int)a2;
        a1[3] = v9;
        if ((a4 & 0x10) == 0 || !v5)
          goto LABEL_27;
        LODWORD(v9) = v9 - v5;
LABEL_26:
        a1[6] = v5 + (int)v9;
LABEL_27:
        v8 = a2;
        goto LABEL_30;
      }
LABEL_29:
      v8 = -1;
      goto LABEL_30;
    }
  }
  v8 = -1;
  if ((a4 & 0x10) != 0 && v5)
  {
    if (!a3)
    {
      v11 = a1[5];
      v9 = v11 - v5 + a2;
      v10 = v11 + a2;
      if (v11 > v11 + a2)
        goto LABEL_29;
      goto LABEL_17;
    }
    if (a3 == 2)
    {
      v9 = a1[8] - v5 + a2;
      v10 = a1[8] + a2;
      if (a1[5] > v10)
        goto LABEL_29;
LABEL_17:
      a2 = v9;
      if (v10 <= a1[8])
        goto LABEL_26;
      goto LABEL_29;
    }
  }
LABEL_30:
  result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 128) = v8;
  return result;
}

double boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v4 = *(_QWORD *)(a2 + 128);
  v5 = a1[6];
  if (v5 && a1[8] < v5)
    a1[8] = v5;
  if (v4 == -1)
  {
LABEL_16:
    v10 = -1;
    goto LABEL_17;
  }
  if ((a3 & 8) != 0)
  {
    v6 = a1[3];
    if (v6)
    {
      if ((v4 & 0x8000000000000000) == 0)
      {
        v7 = a1[2];
        if (v4 <= a1[8] - v7)
        {
          v8 = v6 + (int)v4 - (int)v6 + (int)v7;
          a1[3] = v8;
          if ((a3 & 0x10) == 0 || !v5)
            goto LABEL_20;
          v9 = v8 - v5;
LABEL_19:
          a1[6] = v5 + v9;
LABEL_20:
          v10 = v4;
          goto LABEL_17;
        }
      }
      goto LABEL_16;
    }
  }
  v10 = -1;
  if ((a3 & 0x10) != 0 && v5 && (v4 & 0x8000000000000000) == 0)
  {
    v11 = a1[2];
    if (v4 <= a1[8] - v11)
    {
      v9 = v4 - v5 + v11;
      goto LABEL_19;
    }
    goto LABEL_16;
  }
LABEL_17:
  result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 128) = v10;
  return result;
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(uint64_t a1)
{
  unsigned __int8 *v1;
  unint64_t v3;
  unint64_t v4;

  v1 = *(unsigned __int8 **)(a1 + 24);
  if (!v1)
    return 0xFFFFFFFFLL;
  if ((unint64_t)v1 < *(_QWORD *)(a1 + 32))
    return *v1;
  if ((*(_BYTE *)(a1 + 76) & 8) == 0)
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    return 0xFFFFFFFFLL;
  v4 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)v1 >= v3 && (unint64_t)v1 >= v4)
    return 0xFFFFFFFFLL;
  if (v4 < v3)
  {
    *(_QWORD *)(a1 + 64) = v3;
    v4 = v3;
  }
  *(_QWORD *)(a1 + 32) = v4;
  return *v1;
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _BYTE *v3;
  int v4;
  _BYTE *v6;

  v2 = *(_QWORD *)(a1 + 24);
  if (!v2 || *(_QWORD *)(a1 + 16) >= v2)
    return 0xFFFFFFFFLL;
  if ((_DWORD)a2 != -1 && (*(_DWORD *)(a1 + 76) & 0x10) == 0)
  {
    v4 = *(unsigned __int8 *)(v2 - 1);
    v3 = (_BYTE *)(v2 - 1);
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = v3;
      *v3 = a2;
      return a2;
    }
    return 0xFFFFFFFFLL;
  }
  v6 = (_BYTE *)(v2 - 1);
  *(_QWORD *)(a1 + 24) = v6;
  if ((_DWORD)a2 == -1)
    return 0;
  *v6 = a2;
  return a2;
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  unint64_t v5;
  size_t v7;
  void *v8;
  unint64_t v9;
  BOOL v10;
  _BYTE *v11;
  size_t v12;
  int v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;

  if ((_DWORD)a2 == -1)
    return 0;
  v4 = *(_BYTE **)(a1 + 48);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v4 < v5)
    {
      *(_QWORD *)(a1 + 48) = v4 + 1;
      *v4 = a2;
      return a2;
    }
    if ((*(_BYTE *)(a1 + 76) & 0x10) == 0)
      return 0xFFFFFFFFLL;
    v8 = *(void **)(a1 + 16);
    v7 = v5 - (_QWORD)v8;
  }
  else
  {
    if ((*(_BYTE *)(a1 + 76) & 0x10) == 0)
      return 0xFFFFFFFFLL;
    v7 = 0;
    v8 = *(void **)(a1 + 16);
  }
  v9 = v7 >> 1;
  if (v7 >> 1 <= 0x100)
    v9 = 256;
  while (__CFADD__(v9, v7))
  {
    v10 = v9 >= 2;
    v9 >>= 1;
    if (!v10)
    {
      v11 = 0;
      v12 = v7;
LABEL_18:
      memmove(v11, v8, v7);
      v13 = 0;
      if (!*(_BYTE *)(a1 + 72))
        goto LABEL_20;
LABEL_19:
      operator delete(v8);
      goto LABEL_20;
    }
  }
  v12 = v9 + v7;
  v11 = operator new(v9 + v7);
  if (v7)
    goto LABEL_18;
  v13 = 1;
  if (*(_BYTE *)(a1 + 72))
    goto LABEL_19;
LABEL_20:
  *(_BYTE *)(a1 + 72) = 1;
  if (v13)
  {
    v14 = &v11[v12];
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = &v11[v12];
    *(_QWORD *)(a1 + 64) = v11;
    if ((*(_BYTE *)(a1 + 76) & 8) != 0)
    {
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = v11;
      *(_QWORD *)(a1 + 32) = v11 + 1;
      if (v11 == v14)
        goto LABEL_23;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = v11;
      if (v11 == v14)
      {
LABEL_23:
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(a1, a2);
        return a2;
      }
    }
  }
  else
  {
    v15 = &v11[*(_QWORD *)(a1 + 64) - (_QWORD)v8];
    v16 = *(_QWORD *)(a1 + 40);
    v17 = *(_DWORD *)(a1 + 48) - v16;
    v18 = v16 - (_QWORD)v8;
    v20 = *(_QWORD *)(a1 + 16);
    v19 = *(_QWORD *)(a1 + 24);
    v21 = &v11[v18];
    v22 = &v11[v12];
    *(_QWORD *)(a1 + 56) = &v11[v12];
    *(_QWORD *)(a1 + 64) = v15;
    v23 = &v21[v17];
    *(_QWORD *)(a1 + 40) = v21;
    *(_QWORD *)(a1 + 48) = v23;
    if ((*(_BYTE *)(a1 + 76) & 8) != 0)
    {
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = &v11[(int)v19 - (int)v20];
      v11 = &v21[v17];
      *(_QWORD *)(a1 + 32) = v23 + 1;
      if (v23 == v22)
        goto LABEL_23;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = 0;
      v24 = v11;
      v11 = &v21[v17];
      *(_QWORD *)(a1 + 32) = v24;
      if (v23 == v22)
        goto LABEL_23;
    }
  }
  *(_QWORD *)(a1 + 48) = v11 + 1;
  *v11 = a2;
  return a2;
}

uint64_t boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>::~format_item(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    std::locale::~locale((std::locale *)(a1 + 96));
    *(_BYTE *)(a1 + 88) = 0;
  }
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

const __CFString *copy_mac_address_existence(const __CFString *a1)
{
  uint64_t (*v2)(const __CFString *, _QWORD);
  const __CFString *v3;
  __int128 v4;
  ACFULogging *CString;
  ACFULogging *v6;
  char __s[16];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  char buffer[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage();
    return 0;
  }
  if (BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken == -1)
  {
    v2 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
      return 0;
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken, &__block_literal_global_4);
    v2 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
      return 0;
  }
  v3 = (const __CFString *)v2(a1, 0);
  if (v3)
  {
    v21 = -1431655766;
    *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v19 = v4;
    v20 = v4;
    v17 = v4;
    v18 = v4;
    v16 = v4;
    *(_OWORD *)buffer = v4;
    v14 = -1431655766;
    v12 = v4;
    v13 = v4;
    v10 = v4;
    v11 = v4;
    *(_OWORD *)__s = v4;
    v9 = v4;
    CFStringGetCString(a1, buffer, 100, 0x600u);
    CString = (ACFULogging *)CFStringGetCString(v3, __s, 100, 0x600u);
    ACFULogging::getLogInstance(CString);
    ACFULogging::handleMessage();
    v6 = (ACFULogging *)CFStringCompare(v3, CFSTR("00:00:00:00:00:00"), 1uLL);
    if (!v6)
      goto LABEL_17;
    v6 = (ACFULogging *)CFStringCompare(v3, CFSTR("BA:BA:BA:BA:BA:BA"), 1uLL);
    if (!v6)
      goto LABEL_17;
    v6 = (ACFULogging *)CFStringCompare(v3, CFSTR("DE:AD:BE:FF:00:00"), 1uLL);
    if (!v6
      || (v6 = (ACFULogging *)CFStringCompare(v3, CFSTR("DE:AD:BE:FF:00:01"), 1uLL)) == 0
      || (v6 = (ACFULogging *)CFStringCompare(v3, CFSTR("DF:AD:BE:FF:00:00"), 1uLL)) == 0
      || (v6 = (ACFULogging *)CFStringCompare(v3, CFSTR("88:88:88:88:88:88"), 1uLL)) == 0
      || (v6 = (ACFULogging *)CFStringCompare(v3, CFSTR("99:99:99:99:99:99"), 1uLL)) == 0
      || (v6 = (ACFULogging *)CFStringCompare(v3, CFSTR("02:88:88:88:88:88"), 1uLL)) == 0
      || (v6 = (ACFULogging *)CFStringCompare(v3, CFSTR("02:99:99:99:99:99"), 1uLL)) == 0
      || strlen(__s) > 2 && (v6 = (ACFULogging *)AMSupportHexAsciiToNumeric(), !(_DWORD)v6))
    {
LABEL_17:
      ACFULogging::getLogInstance(v6);
      ACFULogging::handleMessage();
      CFRelease(v3);
      return 0;
    }
  }
  return v3;
}

void BasebandProvisioning::~BasebandProvisioning(BasebandProvisioning *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  const void *v9;
  NSObject *v10;

  v2 = (const void *)*((_QWORD *)this + 11);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 10);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 9);
  if (v4)
    CFRelease(v4);
  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    v6 = *((_QWORD *)this + 7);
    v7 = (void *)*((_QWORD *)this + 6);
    if (v6 != v5)
    {
      do
      {
        v8 = *(void **)(v6 - 24);
        if (v8)
        {
          *(_QWORD *)(v6 - 16) = v8;
          operator delete(v8);
        }
        if (*(char *)(v6 - 25) < 0)
          operator delete(*(void **)(v6 - 48));
        v6 -= 48;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v5;
    operator delete(v7);
  }
  v9 = (const void *)*((_QWORD *)this + 5);
  if (v9)
    CFRelease(v9);
  v10 = *((_QWORD *)this + 4);
  if (v10)
    dispatch_release(v10);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::__assoc_state<std::shared_ptr<ctu::Http::HttpResponse>>::~__assoc_state(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;
  void *v3;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  operator delete(v3);
}

uint64_t std::__assoc_state<std::shared_ptr<ctu::Http::HttpResponse>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if ((*(_BYTE *)(a1 + 136) & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *std::promise<std::shared_ptr<ctu::Http::HttpResponse>>::~promise(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BFA148](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_212A9354C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x212BFA154](&a11);
  JUMPOUT(0x212A934A8);
}

void std::__throw_future_error[abi:ne180100](unsigned int a1)
{
  void *exception;
  const std::error_category *v3;

  exception = __cxa_allocate_exception(0x20uLL);
  v3 = std::future_category();
  MEMORY[0x212BFA148](exception, a1, v3);
  __cxa_throw(exception, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
}

void sub_212A935D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::future_callback_impl<std::shared_ptr<ctu::Http::HttpResponse>,std::shared_ptr<ctu::Http::HttpResponse>>@<X0>(unint64_t **a1@<X0>, void **a2@<X8>)
{
  char *v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[5];
  _QWORD v13[6];
  char *v14;

  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x3812000000;
  v13[3] = __Block_byref_object_copy_;
  v13[4] = __Block_byref_object_dispose_;
  v13[5] = "";
  v4 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 3) = 850045863;
  *((_QWORD *)v4 + 2) = 0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_QWORD *)v4 + 10) = 0;
  *((_QWORD *)v4 + 11) = 1018212795;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = off_24CE7F770;
  v14 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *((_DWORD *)v4 + 34);
  if ((v6 & 2) != 0)
    std::__throw_future_error[abi:ne180100](1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *((_DWORD *)v4 + 34) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = *a1;
  *a1 = (unint64_t *)v4;
  if (v8)
  {
    v9 = v8 + 1;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
      (*(void (**)(unint64_t *))(*v8 + 16))(v8);
  }
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3254779904;
  v12[2] = ___ZN8dispatch20future_callback_implINSt3__110shared_ptrIN3ctu4Http12HttpResponseEEES6_EENS_5blockIU13block_pointerFvT0_EEERNS1_6futureIT_EE_block_invoke;
  v12[3] = &__block_descriptor_40_e8_32r_e82_v24__0_shared_ptr_ctu::Http::HttpResponse____HttpResponse_____shared_weak_count__8l;
  v12[4] = v13;
  *a2 = _Block_copy(v12);
  _Block_object_dispose(v13, 8);
  return std::promise<std::shared_ptr<ctu::Http::HttpResponse>>::~promise((uint64_t *)&v14);
}

void sub_212A93770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t *v14;
  std::mutex *v15;

  std::mutex::unlock(v15);
  _Block_object_dispose(&a14, 8);
  std::promise<std::shared_ptr<ctu::Http::HttpResponse>>::~promise(v14);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t *__Block_byref_object_dispose_(uint64_t a1)
{
  return std::promise<std::shared_ptr<ctu::Http::HttpResponse>>::~promise((uint64_t *)(a1 + 48));
}

void ___ZN8dispatch20future_callback_implINSt3__110shared_ptrIN3ctu4Http12HttpResponseEEES6_EENS_5blockIU13block_pointerFvT0_EEERNS1_6futureIT_EE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  if (!v2)
    std::__throw_future_error[abi:ne180100](3u);
  std::__assoc_state<std::shared_ptr<ctu::Http::HttpResponse>>::set_value<std::shared_ptr<ctu::Http::HttpResponse>>(v2, a2);
}

void __copy_helper_block_e8_32r(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 8);
}

void __destroy_helper_block_e8_32r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 32), 8);
}

void std::__assoc_state<std::shared_ptr<ctu::Http::HttpResponse>>::set_value<std::shared_ptr<ctu::Http::HttpResponse>>(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  std::exception_ptr v6;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_212A9388C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__assoc_state<std::shared_ptr<ctu::Http::HttpResponse>>::move(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  *(_QWORD *)&__lk.__owns_ = 0xAAAAAAAAAAAAAA01;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *a2 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_212A9393C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format(uint64_t a1, const char *a2)
{
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *__dst[2];
  unint64_t v11;

  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 45) = 0u;
  *(_BYTE *)(a1 + 88) = -1;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 96) = &unk_24CE7F6D8;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 172) = 24;
  *(_BYTE *)(a1 + 184) = 0;
  if (!a2)
    return a1;
  v4 = strlen(a2);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v11 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_9;
  }
  HIBYTE(v11) = v4;
  v6 = __dst;
  if (v4)
LABEL_9:
    memcpy(v6, a2, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::parse(a1, (uint64_t)__dst);
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
  return a1;
}

void sub_212A93AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void *v19;

  if (a15 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v15 + 184))
  {
    std::locale::~locale((std::locale *)(v15 + 192));
    *(_BYTE *)(v15 + 184) = 0;
  }
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(v16);
  if (*(char *)(v15 + 87) < 0)
  {
    operator delete(*v17);
    v19 = *(void **)(v15 + 24);
    if (!v19)
    {
LABEL_7:
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::~vector[abi:ne180100]((void **)v15);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v19 = *(void **)(v15 + 24);
    if (!v19)
      goto LABEL_7;
  }
  operator delete(v19);
  std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::~vector[abi:ne180100]((void **)v15);
  _Unwind_Resume(a1);
}

uint64_t boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::parse(uint64_t a1, uint64_t a2)
{
  const std::locale::facet *v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int64_t v14;
  BOOL v15;
  unsigned __int8 *v16;
  int v17;
  std::string *v18;
  int64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  _DWORD *v26;
  unsigned int *v27;
  unsigned int v28;
  char *v29;
  unsigned int *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  _BYTE *v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  char *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  char v51;
  char v52;
  int v53;
  int v54;
  _QWORD *v55;
  int __c;
  unsigned __int8 *v57;
  std::locale v58;
  void *v59[2];
  void *__p[2];
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  int v66;
  char v67;
  std::locale v68[2];
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 184))
    std::locale::locale(&v58, (const std::locale *)(a1 + 192));
  else
    MEMORY[0x212BFA37C](&v58);
  v4 = std::locale::use_facet(&v58, MEMORY[0x24BEDB350]);
  std::locale::~locale(&v58);
  v55 = &v4->__vftable;
  __c = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 37);
  v5 = boost::io::detail::upper_bound_from_fstring<std::string,std::ctype<char>>(a2, __c, (uint64_t)v4, *(_BYTE *)(a1 + 88));
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::make_or_reuse_data((char **)a1, v5);
  v57 = 0;
  v6 = *(char *)(a2 + 23);
  v7 = *(unsigned __int8 *)(a2 + 23);
  v8 = v6 >> 31;
  v9 = *(_QWORD *)(a2 + 8);
  if (v6 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  if (!v10)
  {
    v16 = 0;
    v54 = 0;
    v51 = 0;
    v52 = 1;
    v53 = -1;
    goto LABEL_63;
  }
  v11 = *(_QWORD *)a2;
  if (v6 >= 0)
    v12 = a2;
  else
    v12 = *(_QWORD *)a2;
  v13 = memchr((void *)v12, __c, v10);
  v14 = (int64_t)&v13[-v12];
  if (v13)
    v15 = v14 == -1;
  else
    v15 = 1;
  if (v15)
  {
    v16 = 0;
    v54 = 0;
    v51 = 0;
    v52 = 1;
    v53 = -1;
    goto LABEL_63;
  }
  v16 = 0;
  v17 = 0;
  v54 = 0;
  v53 = -1;
  v51 = 0;
  v52 = 1;
  do
  {
    v18 = (std::string *)(a1 + 64);
    if (v17)
      v18 = (std::string *)(*(_QWORD *)a1 + 120 * v17 - 88);
    v19 = v14 + 1;
    if ((v8 & 1) != 0)
      v20 = v11;
    else
      v20 = a2;
    if (*(unsigned __int8 *)(v20 + v19) == *(unsigned __int8 *)(v20 + v14))
    {
      std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(v18, (unint64_t)&v16[v12], (char *)(v12 + v19));
      v16 = (unsigned __int8 *)(v14 + 2);
      v21 = (unsigned __int8 *)(v14 + 2);
      goto LABEL_52;
    }
    if ((unsigned __int8 *)v14 != v16)
    {
      std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(v18, (unint64_t)&v16[v12], (char *)(v12 + v14));
      v7 = *(unsigned __int8 *)(a2 + 23);
    }
    if ((v7 & 0x80) != 0)
    {
      v22 = *(_QWORD *)a2;
      v7 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      v22 = a2;
    }
    v57 = (unsigned __int8 *)(v22 + v19);
    v58.__locale_ = (std::locale::__imp *)(v22 + v7);
    v23 = boost::io::detail::parse_printf_directive<char,std::char_traits<char>,std::allocator<char>,std::__wrap_iter<char const*>,std::ctype<char>>(&v57, (char **)&v58, *(_QWORD *)a1 + 120 * v17, v55, (unsigned __int8 *)(v14 + 1), *(unsigned __int8 *)(a1 + 88));
    if (*(char *)(a2 + 23) >= 0)
      v24 = a2;
    else
      v24 = *(_QWORD *)a2;
    v21 = &v57[-v24];
    if (!v23)
    {
      v16 = (unsigned __int8 *)v14;
      goto LABEL_52;
    }
    v25 = *(char **)a1;
    v26 = (_DWORD *)(*(_QWORD *)a1 + 120 * v17);
    v27 = v26 + 28;
    v28 = v26[28];
    if ((v28 & 1) == 0)
      goto LABEL_37;
    v29 = &v25[120 * v17];
    v32 = *((_DWORD *)v29 + 19);
    v30 = (unsigned int *)(v29 + 76);
    v31 = v32;
    if ((v32 & 0x20) == 0)
    {
      v28 &= ~2u;
      *v27 = v28;
      v25[120 * v17 + 72] = 48;
      *v30 = v31 & 0xFFFFFF4F | 0x10;
LABEL_37:
      if ((v28 & 2) != 0)
        goto LABEL_38;
      goto LABEL_42;
    }
    v28 &= ~1u;
    *v27 = v28;
    if ((v28 & 2) != 0)
    {
LABEL_38:
      if ((v25[120 * v17 + 77] & 8) != 0)
        *v27 = v28 & 0xFFFFFFFD;
    }
LABEL_42:
    v33 = *v26;
    if (v33 != -3)
    {
      if (v33 == -1)
      {
        v52 = 0;
      }
      else if (v33 == -2)
      {
        v51 = 1;
      }
      else
      {
        v34 = v53;
        if (v33 > v53)
          v34 = v33;
        v53 = v34;
      }
      ++v54;
      ++v17;
    }
    v16 = v21;
LABEL_52:
    v35 = *(char *)(a2 + 23);
    v7 = *(unsigned __int8 *)(a2 + 23);
    v8 = v35 >> 31;
    v9 = *(_QWORD *)(a2 + 8);
    if (v35 >= 0)
      v36 = *(unsigned __int8 *)(a2 + 23);
    else
      v36 = *(_QWORD *)(a2 + 8);
    if (v36 <= (unint64_t)v21)
      break;
    v11 = *(_QWORD *)a2;
    v12 = v35 >= 0 ? a2 : *(_QWORD *)a2;
    v37 = memchr(&v21[v12], __c, v36 - (_QWORD)v21);
    if (!v37)
      break;
    v14 = (int64_t)&v37[-v12];
  }
  while (&v37[-v12] != (_BYTE *)-1);
  if (v17)
  {
    v38 = (std::string *)(*(_QWORD *)a1 + 120 * v17 - 88);
    goto LABEL_64;
  }
LABEL_63:
  v38 = (std::string *)(a1 + 64);
LABEL_64:
  if (v8)
    v39 = v9;
  else
    v39 = v7;
  v40 = *(_QWORD *)a2;
  if (!v8)
    v40 = a2;
  std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(v38, (unint64_t)&v16[v40], (char *)(v40 + v39));
  if ((v52 & 1) != 0)
  {
    v41 = v55;
  }
  else
  {
    if ((v53 & 0x80000000) == 0 && (*(_BYTE *)(a1 + 88) & 1) != 0)
    {
      v58.__locale_ = (std::locale::__imp *)&unk_24CE7F8D8;
      v59[0] = (void *)v53;
      v59[1] = 0;
      boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v58);
    }
    if (v54 < 1)
    {
      v42 = 0;
      v41 = v55;
    }
    else
    {
      v42 = 0;
      v43 = *(char **)a1;
      v44 = v54;
      v41 = v55;
      do
      {
        if (*(_DWORD *)v43 == -1)
          *(_DWORD *)v43 = v42++;
        v43 += 120;
        --v44;
      }
      while (v44);
    }
    v53 = v42 - 1;
  }
  v45 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v41 + 56))(v41, 32);
  LODWORD(v58.__locale_) = -1;
  v67 = 0;
  *(_OWORD *)v59 = 0u;
  *(_OWORD *)__p = 0u;
  v61 = 0u;
  v62 = 0;
  v63 = 6;
  v64 = v45;
  v66 = 0;
  v65 = 4098;
  v68[1].__locale_ = (std::locale::__imp *)0x7FFFFFFFFFFFFFFFLL;
  v69 = 0;
  v46 = *(_QWORD *)(a1 + 8);
  v47 = 0xEEEEEEEEEEEEEEEFLL * ((v46 - *(_QWORD *)a1) >> 3);
  if (v54 > v47)
  {
    std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__append((void **)a1, v54 - v47, (uint64_t)&v58);
    goto LABEL_93;
  }
  if (v54 < v47)
  {
    v48 = *(_QWORD *)a1 + 120 * v54;
    while (1)
    {
      if (v46 == v48)
      {
        *(_QWORD *)(a1 + 8) = v48;
        break;
      }
      if (*(_BYTE *)(v46 - 32))
      {
        std::locale::~locale((std::locale *)(v46 - 24));
        *(_BYTE *)(v46 - 32) = 0;
      }
      if (*(char *)(v46 - 65) < 0)
      {
        operator delete(*(void **)(v46 - 88));
        if ((*(char *)(v46 - 89) & 0x80000000) == 0)
          goto LABEL_85;
      }
      else if ((*(char *)(v46 - 89) & 0x80000000) == 0)
      {
        goto LABEL_85;
      }
      operator delete(*(void **)(v46 - 112));
LABEL_85:
      v46 -= 120;
    }
  }
LABEL_93:
  if (v67)
  {
    std::locale::~locale(v68);
    v67 = 0;
  }
  if ((SHIBYTE(v61) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
      goto LABEL_97;
LABEL_101:
    operator delete(v59[0]);
    v49 = *(_DWORD *)(a1 + 48);
    if ((v51 & 1) == 0)
      goto LABEL_99;
LABEL_98:
    v49 |= 4u;
    *(_DWORD *)(a1 + 48) = v49;
    goto LABEL_99;
  }
  operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    goto LABEL_101;
LABEL_97:
  v49 = *(_DWORD *)(a1 + 48);
  if ((v51 & 1) != 0)
    goto LABEL_98;
LABEL_99:
  *(_DWORD *)(a1 + 56) = v53 + 1;
  *(_DWORD *)(a1 + 48) = v49 & 0xFFFFFFFE | v52 & 1;
  return a1;
}

void sub_212A940E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::exception a18)
{
  std::exception::~exception(&a18);
  _Unwind_Resume(a1);
}

void sub_212A940F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>::~format_item((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212A94108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18)
{
  std::locale::~locale(&a18);
  _Unwind_Resume(a1);
}

uint64_t boost::io::detail::upper_bound_from_fstring<std::string,std::ctype<char>>(uint64_t a1, int __c, uint64_t a3, char a4)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  uint64_t v18;
  char *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  _QWORD v25[3];

  v4 = (char *)*(unsigned __int8 *)(a1 + 23);
  v5 = *(char **)(a1 + 8);
  if ((char)v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v9 = 0;
    v10 = 0;
    v11 = *(_QWORD *)a1;
    if ((char)v4 >= 0)
      v12 = a1;
    else
      v12 = *(_QWORD *)a1;
    v13 = *(_QWORD *)(a3 + 16);
    while (1)
    {
      v14 = (char *)memchr(&v9[v12], __c, v6 - (_QWORD)v9);
      if (!v14)
        return v10;
      v15 = &v14[-v12];
      if (&v14[-v12] == (char *)-1)
        return v10;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >= v6)
      {
        if ((a4 & 1) != 0)
        {
          v25[0] = &unk_24CE7F8D8;
          v25[1] = &v14[-v12];
          v25[2] = v6;
          boost::throw_exception<boost::io::bad_format_string>((uint64_t)v25);
        }
        return (v10 + 1);
      }
      v17 = v16[v12];
      if ((v4 & 0x80) != 0)
      {
        v18 = v11;
        v19 = v5;
        if (v17 == v15[v11])
          goto LABEL_9;
LABEL_17:
        v20 = (unsigned __int8 *)&v16[v18];
        if (v16 != v19)
        {
          v21 = (unsigned __int8 *)&v19[v18];
          v22 = &v19[v12 - 1] - v14;
          while (((char)*v20 & 0x80000000) == 0 && (*(_DWORD *)(v13 + 4 * *v20) & 0x400) != 0)
          {
            ++v20;
            if (!--v22)
            {
              v20 = v21;
              break;
            }
          }
        }
        v9 = (char *)&v20[-v12];
        if ((unint64_t)v9 < v6 && v9[v12] == __c)
          ++v9;
        v10 = (v10 + 1);
        if (v6 <= (unint64_t)v9)
          return v10;
      }
      else
      {
        v18 = a1;
        v19 = v4;
        if (v17 != v15[a1])
          goto LABEL_17;
LABEL_9:
        v9 = v15 + 2;
        if (v6 <= (unint64_t)v9)
          return v10;
      }
    }
  }
  return 0;
}

void sub_212A942B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

void boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::make_or_reuse_data(char **a1, unint64_t a2)
{
  const std::locale::facet *v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _BYTE **v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  std::locale v17;
  void *v18[2];
  void *__p[2];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  std::locale v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a1 + 184))
    std::locale::locale(&v17, (const std::locale *)a1 + 24);
  else
    MEMORY[0x212BFA37C](&v17);
  v4 = std::locale::use_facet(&v17, MEMORY[0x24BEDB350]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 32);
  std::locale::~locale(&v17);
  v6 = a1[1] - *a1;
  if (v6)
  {
    v7 = 0xEEEEEEEEEEEEEEEFLL * (v6 >> 3);
    if (a2 > v7)
    {
      LODWORD(v17.__locale_) = -1;
      v26 = 0;
      *(_OWORD *)v18 = 0u;
      *(_OWORD *)__p = 0u;
      v20 = 0u;
      v21 = 0;
      v22 = 6;
      v23 = v5;
      v25 = 0;
      v24 = 4098;
      v28 = 0x7FFFFFFFFFFFFFFFLL;
      v29 = 0;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__append((void **)a1, a2 - v7, (uint64_t)&v17);
      if (v26)
      {
        std::locale::~locale(&v27);
        v26 = 0;
      }
      if (SHIBYTE(v20) < 0)
      {
        operator delete(__p[1]);
        if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
          goto LABEL_10;
      }
      else if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
      {
LABEL_10:
        std::vector<BOOL>::resize((uint64_t)(a1 + 3), 0, 0);
LABEL_17:
        v8 = 56;
        while (1)
        {
          v10 = *a1;
          v11 = (uint64_t)&(*a1)[v8];
          *(_DWORD *)(v11 - 56) = -1;
          *(_QWORD *)(v11 + 48) = 0x7FFFFFFFFFFFFFFFLL;
          *(_DWORD *)(v11 + 56) = 0;
          v12 = (_BYTE **)(v11 - 48);
          if (*(char *)(v11 - 25) < 0)
          {
            v15 = *v12;
            *(_QWORD *)(v11 - 40) = 0;
            *v15 = 0;
            v13 = &v10[v8];
            v14 = &v10[v8 - 24];
            if (v10[v8 - 1] < 0)
            {
LABEL_24:
              v14 = *(char **)v14;
              *((_QWORD *)v13 - 2) = 0;
              goto LABEL_19;
            }
          }
          else
          {
            *(_BYTE *)(v11 - 25) = 0;
            *(_BYTE *)v12 = 0;
            v13 = &v10[v8];
            v14 = &v10[v8 - 24];
            if (v10[v8 - 1] < 0)
              goto LABEL_24;
          }
          *(v13 - 1) = 0;
LABEL_19:
          *v14 = 0;
          v9 = &v10[v8];
          *(_OWORD *)v9 = xmmword_212B52B30;
          v9[16] = v5;
          *((_DWORD *)v9 + 7) = 0;
          v8 += 120;
          *(_QWORD *)(v9 + 20) = 4098;
          if (!--a2)
            goto LABEL_27;
        }
      }
      operator delete(v18[0]);
      goto LABEL_10;
    }
    std::vector<BOOL>::resize((uint64_t)(a1 + 3), 0, 0);
    if (a2)
      goto LABEL_17;
  }
  else
  {
    LODWORD(v17.__locale_) = -1;
    v26 = 0;
    *(_OWORD *)v18 = 0u;
    *(_OWORD *)__p = 0u;
    v20 = 0u;
    v21 = 0;
    v22 = 6;
    v23 = v5;
    v25 = 0;
    v24 = 4098;
    v28 = 0x7FFFFFFFFFFFFFFFLL;
    v29 = 0;
    std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::assign((uint64_t *)a1, a2, (uint64_t)&v17);
    if (v26)
    {
      std::locale::~locale(&v27);
      v26 = 0;
    }
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[1]);
      if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
        goto LABEL_27;
    }
    else if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
    {
      goto LABEL_27;
    }
    operator delete(v18[0]);
  }
LABEL_27:
  if (*((char *)a1 + 87) < 0)
  {
    v16 = a1[8];
    a1[9] = 0;
  }
  else
  {
    v16 = (char *)(a1 + 8);
    *((_BYTE *)a1 + 87) = 0;
  }
  *v16 = 0;
}

void sub_212A945AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>::~format_item((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_212A945C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>::~format_item((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_212A945D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::io::detail::parse_printf_directive<char,std::char_traits<char>,std::allocator<char>,std::__wrap_iter<char const*>,std::ctype<char>>(unsigned __int8 **a1, char **a2, uint64_t a3, _QWORD *a4, unsigned __int8 *a5, uint64_t a6)
{
  unsigned __int8 *v8;
  unint64_t v9;
  int v14;
  unsigned __int8 v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  int v20;
  int v22;
  uint64_t v23;
  int v24;
  unsigned __int8 v25;
  unsigned __int8 *v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned __int8 v32;
  unsigned __int8 *v33;
  int v34;
  unsigned __int8 v35;
  int v36;
  int v37;
  _BOOL4 v39;
  int v41;
  unsigned __int8 v42;
  unsigned int v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned __int8 v49;
  int v50;
  unint64_t v51;
  unsigned __int8 v52;
  void *v53;
  unsigned __int8 *v54;
  unint64_t v55;

  *(_DWORD *)a3 = -1;
  v8 = *a1;
  v9 = (unint64_t)&a5[*a2 - (char *)*a1];
  if (*a2 <= (char *)*a1)
  {
    if ((a6 & 1) != 0)
    {
      v53 = &unk_24CE7F8D8;
      v54 = a5;
      v55 = v9;
      boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v53);
    }
    return 0;
  }
  v14 = *v8;
  v15 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 124);
  v16 = *a1;
  if (v14 == v15)
  {
    *a1 = ++v16;
    if (v16 >= (unsigned __int8 *)*a2)
    {
      if ((a6 & 1) != 0)
      {
        v53 = &unk_24CE7F8D8;
        v54 = &v16[a5 - v8];
        v55 = v9;
        boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v53);
      }
      return 0;
    }
  }
  v52 = v15;
  v51 = v9;
  v17 = *v16;
  v18 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 48);
  v19 = *a1;
  if (v17 == v18 || (char)*v19 < 0 || (*(_DWORD *)(a4[2] + 4 * *v19) & 0x400) == 0)
  {
    if (v19 != (unsigned __int8 *)*a2)
      goto LABEL_8;
    goto LABEL_41;
  }
  v50 = v14;
  if (*a2 == (char *)v19)
  {
    v22 = 0;
  }
  else
  {
    v22 = 0;
    do
    {
      if ((char)*v19 < 0)
        break;
      v23 = *v19;
      if ((*(_DWORD *)(a4[2] + 4 * v23) & 0x400) == 0)
        break;
      v22 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)v23, 0)
          + 10 * v22
          - 48;
      ++v19;
    }
    while (v19 != (unsigned __int8 *)*a2);
  }
  *a1 = v19;
  if (v19 >= (unsigned __int8 *)*a2)
  {
    if ((a6 & 1) != 0)
    {
      v53 = &unk_24CE7F8D8;
      v54 = &v19[a5 - v8];
      v55 = v51;
      boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v53);
    }
    return 0;
  }
  v27 = *v19;
  if (v27 == (*(unsigned __int8 (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 37))
  {
    *(_DWORD *)a3 = v22 - 1;
    v28 = *a1 + 1;
    *a1 = v28;
    if (v50 == v52)
LABEL_79:
      boost::io::detail::maybe_throw_exception(a6, (uint64_t)&v28[a5 - v8], v51);
    return 1;
  }
  v29 = **a1;
  if (v29 != (*(unsigned __int8 (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 36))
  {
    *(_QWORD *)(a3 + 56) = v22;
    *(_DWORD *)a3 = -1;
    v26 = *a1;
    goto LABEL_52;
  }
  *(_DWORD *)a3 = v22 - 1;
  v19 = *a1 + 1;
  *a1 = v19;
  v14 = v50;
  if (v19 != (unsigned __int8 *)*a2)
  {
LABEL_8:
    v50 = v14;
    while (2)
    {
      switch((*(unsigned int (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)*v19, 0))
      {
        case ' ':
          *(_DWORD *)(a3 + 112) |= 2u;
          goto LABEL_11;
        case '#':
          v20 = *(_DWORD *)(a3 + 76) | 0x600;
          goto LABEL_10;
        case '\'':
          goto LABEL_11;
        case '+':
          v20 = *(_DWORD *)(a3 + 76) | 0x800;
          goto LABEL_10;
        case '-':
          v20 = *(_DWORD *)(a3 + 76) | 0x20;
          goto LABEL_10;
        case '0':
          *(_DWORD *)(a3 + 112) |= 1u;
          goto LABEL_11;
        case '=':
          *(_DWORD *)(a3 + 112) |= 4u;
          goto LABEL_11;
        case '_':
          v20 = *(_DWORD *)(a3 + 76) | 0x10;
LABEL_10:
          *(_DWORD *)(a3 + 76) = v20;
LABEL_11:
          v19 = *a1 + 1;
          *a1 = v19;
          if (v19 != (unsigned __int8 *)*a2)
            continue;
          goto LABEL_41;
        default:
          v24 = **a1;
          v25 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 42);
          v26 = *a1;
          if (v24 == v25)
          {
            ++v26;
LABEL_31:
            *a1 = v26;
            goto LABEL_52;
          }
          if (v26 != (unsigned __int8 *)*a2
            && ((char)*v26 & 0x80000000) == 0
            && (*(_DWORD *)(a4[2] + 4 * *v26) & 0x400) != 0)
          {
            *(_QWORD *)(a3 + 56) = 0;
            do
            {
              if ((char)*v26 < 0)
                break;
              v30 = *v26;
              if ((*(_DWORD *)(a4[2] + 4 * v30) & 0x400) == 0)
                break;
              *(_QWORD *)(a3 + 56) = 10 * *(_QWORD *)(a3 + 56)
                                   + (*(int (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)v30, 0)- 48;
              ++v26;
            }
            while (v26 != (unsigned __int8 *)*a2);
            goto LABEL_31;
          }
          break;
      }
      break;
    }
LABEL_52:
    if (v26 >= (unsigned __int8 *)*a2)
    {
      if ((a6 & 1) != 0)
      {
        v53 = &unk_24CE7F8D8;
        v54 = &v26[a5 - v8];
        v55 = v51;
        boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v53);
      }
      return 1;
    }
    v31 = *v26;
    v32 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 46);
    v33 = *a1;
    if (v31 == v32)
    {
      *a1 = ++v33;
      if (v33 != (unsigned __int8 *)*a2)
      {
        v34 = *v33;
        v35 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 42);
        v33 = *a1;
        if (v34 == v35)
        {
          v36 = 0;
          *a1 = ++v33;
          if (v33 == (unsigned __int8 *)*a2)
            goto LABEL_95;
          goto LABEL_66;
        }
        if (v33 != (unsigned __int8 *)*a2
          && ((char)*v33 & 0x80000000) == 0
          && (*(_DWORD *)(a4[2] + 4 * *v33) & 0x400) != 0)
        {
          v33 = boost::io::detail::str2int<long,std::__wrap_iter<char const*>,std::ctype<char>>(a1, a2, (_QWORD *)(a3 + 64), a4);
          *a1 = v33;
          v36 = 1;
          if (v33 == (unsigned __int8 *)*a2)
            goto LABEL_95;
          goto LABEL_66;
        }
      }
      v36 = 0;
      *(_QWORD *)(a3 + 64) = 0;
      if (v33 == (unsigned __int8 *)*a2)
        goto LABEL_95;
      goto LABEL_66;
    }
    v36 = 0;
    if (v33 == (unsigned __int8 *)*a2)
    {
LABEL_95:
      if ((a6 & 1) != 0)
      {
        v53 = &unk_24CE7F8D8;
        v54 = &v33[a5 - v8];
        v55 = v51;
        boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v53);
      }
      return 1;
    }
LABEL_66:
    v37 = 0;
    while (1)
    {
      switch((*(unsigned int (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)*v33, 0))
      {
        case '2':
          if (v37 == 51)
            goto LABEL_73;
          goto LABEL_78;
        case '3':
          if (v37 != 73)
            goto LABEL_78;
          v37 = 51;
          goto LABEL_68;
        case '4':
          if (v37 != 54)
            goto LABEL_78;
LABEL_73:
          v37 = 0;
          goto LABEL_68;
        case '6':
          if (v37 != 73)
          {
LABEL_78:
            v28 = *a1;
            goto LABEL_79;
          }
          v37 = 54;
LABEL_68:
          v33 = *a1 + 1;
          *a1 = v33;
          if (v33 == (unsigned __int8 *)*a2)
            goto LABEL_95;
          break;
        case 'I':
          v37 = 73;
          goto LABEL_68;
        case 'L':
        case 'h':
        case 'j':
        case 'l':
        case 'w':
        case 'z':
          goto LABEL_68;
        default:
          v33 = *a1;
          v39 = v37 != 73 && v37 != 0;
          if (v33 >= (unsigned __int8 *)*a2 || v39)
            goto LABEL_95;
          if (v50 == v52)
          {
            v41 = *v33;
            v42 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 124);
            v33 = *a1;
            if (v41 == v42)
            {
              *a1 = v33 + 1;
              return 1;
            }
          }
          switch((*(unsigned int (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)*v33, 0))
          {
            case 'A':
              v46 = *(_DWORD *)(a3 + 76) | 0x4000;
              *(_DWORD *)(a3 + 76) = v46;
              goto LABEL_118;
            case 'C':
            case 'c':
              *(_QWORD *)(a3 + 104) = 1;
              goto LABEL_123;
            case 'E':
              v47 = *(_DWORD *)(a3 + 76) | 0x4000;
              *(_DWORD *)(a3 + 76) = v47;
              goto LABEL_121;
            case 'F':
              v45 = *(_DWORD *)(a3 + 76) | 0x4000;
              *(_DWORD *)(a3 + 76) = v45;
              goto LABEL_115;
            case 'G':
              v43 = *(_DWORD *)(a3 + 76) | 0x4000;
              goto LABEL_122;
            case 'S':
            case 's':
              if (v36)
                *(_QWORD *)(a3 + 104) = *(_QWORD *)(a3 + 64);
              *(_QWORD *)(a3 + 64) = 6;
              goto LABEL_123;
            case 'T':
              v44 = *a1 + 1;
              *a1 = v44;
              if (v44 >= (unsigned __int8 *)*a2)
              {
                boost::io::detail::maybe_throw_exception(a6, (uint64_t)&v44[a5 - v8], v51);
                return 0;
              }
              *(_BYTE *)(a3 + 72) = *v44;
LABEL_106:
              *(_DWORD *)(a3 + 112) |= 8u;
              *(_DWORD *)a3 = -2;
LABEL_123:
              v28 = *a1 + 1;
              *a1 = v28;
              if (v50 != v52)
                return 1;
              if (v28 != (unsigned __int8 *)*a2)
              {
                v48 = *v28;
                v49 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 124);
                v28 = *a1;
                if (v48 == v49)
                {
                  *a1 = v28 + 1;
                  return 1;
                }
              }
              break;
            case 'X':
              *(_DWORD *)(a3 + 76) |= 0x4000u;
              goto LABEL_109;
            case 'a':
              v46 = *(_DWORD *)(a3 + 76);
LABEL_118:
              v43 = v46 & 0xFFFFFEB1 | 0x104;
              goto LABEL_122;
            case 'b':
              v43 = *(_DWORD *)(a3 + 76) | 1;
              goto LABEL_122;
            case 'd':
            case 'g':
            case 'i':
            case 'u':
              goto LABEL_123;
            case 'e':
              v47 = *(_DWORD *)(a3 + 76);
LABEL_121:
              v43 = v47 | 0x100;
              goto LABEL_122;
            case 'f':
              v45 = *(_DWORD *)(a3 + 76);
LABEL_115:
              v43 = v45 | 4;
              goto LABEL_122;
            case 'n':
              *(_DWORD *)a3 = -3;
              goto LABEL_123;
            case 'o':
              v43 = *(_DWORD *)(a3 + 76) & 0xFFFFFFB5 | 0x40;
              goto LABEL_122;
            case 'p':
            case 'x':
LABEL_109:
              v43 = *(_DWORD *)(a3 + 76) & 0xFFFFFFB5 | 8;
LABEL_122:
              *(_DWORD *)(a3 + 76) = v43;
              goto LABEL_123;
            case 't':
              *(_BYTE *)(a3 + 72) = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 32);
              goto LABEL_106;
            default:
              boost::io::detail::maybe_throw_exception(a6, (uint64_t)&(*a1)[a5 - v8], v51);
              goto LABEL_123;
          }
          goto LABEL_79;
      }
    }
  }
LABEL_41:
  if ((a6 & 1) != 0)
  {
    v53 = &unk_24CE7F8D8;
    v54 = &v19[a5 - v8];
    v55 = v51;
    boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v53);
  }
  return 1;
}

void sub_212A94EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_212A94EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_212A94ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_212A94EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_212A94EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_212A94F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::io::bad_format_string>(uint64_t a1)
{
  __n128 *exception;

  exception = (__n128 *)__cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::bad_format_string>::wrapexcept(exception, a1);
}

void sub_212A94F60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::assign(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;

  v6 = a1[2];
  v7 = *a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((v6 - *a1) >> 3) >= a2)
  {
    v10 = (a1[1] - v7) / 120;
    if (v10 >= a2)
      v11 = a2;
    else
      v11 = (a1[1] - v7) / 120;
    for (; v11; --v11)
    {
      boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>::operator=(v7, a3);
      v7 += 120;
    }
    if (a2 > v10)
    {
      v12 = a1[1];
      v13 = v12 + 120 * (a2 - v10);
      v14 = -120 * v10 + 120 * a2;
      do
      {
        std::construct_at[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>(v12, a3);
        v12 += 120;
        v14 -= 120;
      }
      while (v14);
      a1[1] = v13;
      return;
    }
    v15 = a1[1];
    v16 = *a1 + 120 * a2;
    while (1)
    {
      if (v15 == v16)
      {
        a1[1] = v16;
        return;
      }
      if (*(_BYTE *)(v15 - 32))
      {
        std::locale::~locale((std::locale *)(v15 - 24));
        *(_BYTE *)(v15 - 32) = 0;
      }
      if (*(char *)(v15 - 65) < 0)
      {
        operator delete(*(void **)(v15 - 88));
        if ((*(char *)(v15 - 89) & 0x80000000) == 0)
          goto LABEL_23;
      }
      else if ((*(char *)(v15 - 89) & 0x80000000) == 0)
      {
        goto LABEL_23;
      }
      operator delete(*(void **)(v15 - 112));
LABEL_23:
      v15 -= 120;
    }
  }
  if (!v7)
    goto LABEL_35;
  v8 = a1[1];
  v9 = (void *)*a1;
  if (v8 != v7)
  {
    while (1)
    {
      if (*(_BYTE *)(v8 - 32))
      {
        std::locale::~locale((std::locale *)(v8 - 24));
        *(_BYTE *)(v8 - 32) = 0;
      }
      if (*(char *)(v8 - 65) < 0)
      {
        operator delete(*(void **)(v8 - 88));
        if (*(char *)(v8 - 89) < 0)
LABEL_12:
          operator delete(*(void **)(v8 - 112));
      }
      else if (*(char *)(v8 - 89) < 0)
      {
        goto LABEL_12;
      }
      v8 -= 120;
      if (v8 == v7)
      {
        v9 = (void *)*a1;
        break;
      }
    }
  }
  a1[1] = v7;
  operator delete(v9);
  v6 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
LABEL_35:
  if (a2 > 0x222222222222222)
    goto LABEL_45;
  v17 = 0xEEEEEEEEEEEEEEEFLL * (v6 >> 3);
  v18 = 2 * v17;
  if (2 * v17 <= a2)
    v18 = a2;
  v19 = v17 >= 0x111111111111111 ? 0x222222222222222 : v18;
  if (v19 > 0x222222222222222)
LABEL_45:
    std::vector<std::pair<std::string,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v20 = 120 * v19;
  v21 = (char *)operator new(120 * v19);
  *a1 = (uint64_t)v21;
  a1[1] = (uint64_t)v21;
  a1[2] = (uint64_t)&v21[v20];
  v22 = 120 * a2;
  v23 = &v21[120 * a2];
  do
  {
    std::construct_at[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>((uint64_t)v21, a3);
    v21 += 120;
    v22 -= 120;
  }
  while (v22);
  a1[1] = (uint64_t)v23;
}

void sub_212A951F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_212A951F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, size_t __len)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *__dst;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 - v4;
  if (a2 <= v4)
  {
    *(_QWORD *)(a1 + 8) = a2;
    return;
  }
  v6 = __len;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = v7 << 6;
  if (v7 << 6 < v5 || v4 > (v7 << 6) - v5)
  {
    __dst = 0;
    v24 = 0;
    v25 = 0;
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<std::pair<std::string,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v10 = v7 << 7;
    if (v10 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
      v10 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (v8 <= 0x3FFFFFFFFFFFFFFELL)
      v11 = v10;
    else
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((uint64_t)&__dst, v11);
    v12 = *(void **)a1;
    v13 = *(_QWORD *)(a1 + 8);
    v14 = v13 + v5;
    v24 = v13 + v5;
    v15 = (char *)__dst;
    if (v13 < 1)
    {
      LODWORD(v17) = 0;
      v16 = (char *)__dst;
    }
    else
    {
      v17 = (unint64_t)v13 >> 6;
      if ((unint64_t)v13 >= 0x40)
        memmove(__dst, v12, 8 * v17);
      v16 = &v15[8 * v17];
      if ((v13 & 0x3F) != 0)
      {
        *(_QWORD *)v16 = *(_QWORD *)v16 & ~(0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F)) | *((_QWORD *)v12 + v17) & (0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F));
        LODWORD(v17) = v13 & 0x3F;
      }
      else
      {
        LODWORD(v17) = 0;
      }
      v12 = *(void **)a1;
      v13 = *(_QWORD *)(a1 + 8);
      v15 = (char *)__dst;
      v14 = v24;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v14;
    __dst = v12;
    v24 = v13;
    v18 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    v25 = v18;
    if (v12)
      operator delete(v12);
  }
  else
  {
    v16 = (char *)(*(_QWORD *)a1 + 8 * (v4 >> 6));
    v17 = *(_QWORD *)(a1 + 8) & 0x3FLL;
    *(_QWORD *)(a1 + 8) = a2;
  }
  if (v5)
  {
    if (v6)
    {
      if ((_DWORD)v17)
      {
        if ((64 - v17) >= v5)
          v19 = v5;
        else
          v19 = (64 - v17);
        *(_QWORD *)v16 |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v17 - v19)) & (-1 << v17);
        v16 += 8;
        v5 -= v19;
      }
      v20 = 8 * (v5 >> 6);
      if (v5 >= 0x40)
        memset(v16, 255, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v21 = *(_QWORD *)&v16[v20] | (0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
LABEL_44:
        *(_QWORD *)&v16[v20] = v21;
      }
    }
    else
    {
      if ((_DWORD)v17)
      {
        if ((64 - v17) >= v5)
          v22 = v5;
        else
          v22 = (64 - v17);
        *(_QWORD *)v16 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v17 - v22)) & (-1 << v17));
        v16 += 8;
        v5 -= v22;
      }
      v20 = 8 * (v5 >> 6);
      if (v5 >= 0x40)
        bzero(v16, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v21 = *(_QWORD *)&v16[v20] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
        goto LABEL_44;
      }
    }
  }
}

void sub_212A95460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  void *v10;
  size_t v11;
  __int128 v12;
  void *v13;
  size_t v14;
  __int128 v15;
  uint64_t v16;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = a1 + 8;
  if (a1 != a2)
  {
    v5 = *(_BYTE *)(a2 + 31);
    if (*(char *)(a1 + 31) < 0)
    {
      if (v5 >= 0)
        v10 = (void *)(a2 + 8);
      else
        v10 = *(void **)(a2 + 8);
      if (v5 >= 0)
        v11 = *(unsigned __int8 *)(a2 + 31);
      else
        v11 = *(_QWORD *)(a2 + 16);
      std::string::__assign_no_alias<false>((void **)v4, v10, v11);
      v7 = a1 + 32;
      v8 = (_QWORD *)(a2 + 32);
      v9 = *(unsigned __int8 *)(a2 + 55);
      if (*(char *)(a1 + 55) < 0)
        goto LABEL_16;
    }
    else if ((*(_BYTE *)(a2 + 31) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>((_QWORD *)v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
      v7 = a1 + 32;
      v8 = (_QWORD *)(a2 + 32);
      v9 = *(unsigned __int8 *)(a2 + 55);
      if (*(char *)(a1 + 55) < 0)
      {
LABEL_16:
        if ((v9 & 0x80u) == 0)
          v13 = v8;
        else
          v13 = *(void **)(a2 + 32);
        if ((v9 & 0x80u) == 0)
          v14 = v9;
        else
          v14 = *(_QWORD *)(a2 + 40);
        std::string::__assign_no_alias<false>((void **)v7, v13, v14);
        goto LABEL_24;
      }
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
      *(_OWORD *)v4 = v6;
      v7 = a1 + 32;
      v8 = (_QWORD *)(a2 + 32);
      v9 = *(unsigned __int8 *)(a2 + 55);
      if (*(char *)(a1 + 55) < 0)
        goto LABEL_16;
    }
    if ((v9 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>((_QWORD *)v7, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
    }
    else
    {
      v12 = *(_OWORD *)v8;
      *(_QWORD *)(v7 + 16) = v8[2];
      *(_OWORD *)v7 = v12;
    }
  }
LABEL_24:
  v15 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v15;
  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a2 + 88))
    {
      std::locale::operator=((std::locale *)(a1 + 96), (const std::locale *)(a2 + 96));
    }
    else
    {
      std::locale::~locale((std::locale *)(a1 + 96));
      *(_BYTE *)(a1 + 88) = 0;
    }
  }
  else if (*(_BYTE *)(a2 + 88))
  {
    std::locale::locale((std::locale *)(a1 + 96), (const std::locale *)(a2 + 96));
    *(_BYTE *)(a1 + 88) = 1;
  }
  v16 = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v16;
  return a1;
}

uint64_t std::construct_at[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v5 = (std::string *)(a1 + 32);
    if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    v5 = (std::string *)(a1 + 32);
    if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(a2 + 32);
      v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
LABEL_6:
  v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 88) = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    std::locale::locale((std::locale *)(a1 + 96), (const std::locale *)(a2 + 96));
    *(_BYTE *)(a1 + 88) = 1;
  }
  v8 = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v8;
  return a1;
}

void sub_212A956AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(std::string *this, unint64_t a2, char *a3)
{
  int v6;
  unint64_t v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;
  std::string *v11;
  unint64_t v12;
  _OWORD *v13;
  _BYTE *v14;
  char *v15;
  __int128 *v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 v19;
  size_t v20;
  std::string *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  char *v28;
  unint64_t v29;
  __int128 v30;
  char v31;
  std::string::size_type v32;
  char v33;
  void **v34;
  std::string::size_type v35;
  unint64_t v37;
  uint64_t v38;
  void *__p[3];

  v6 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = (unint64_t)&a3[-a2];
  if (v6 < 0)
  {
    if (a3 == (char *)a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v12 = this->__r_.__value_.__r.__words[2];
    v9 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v11 = (std::string *)this->__r_.__value_.__r.__words[0];
    v10 = HIBYTE(v12);
    if (this->__r_.__value_.__r.__words[0] > a2)
      goto LABEL_17;
  }
  else
  {
    if (a3 == (char *)a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    LOBYTE(v10) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    v11 = this;
    if ((unint64_t)this > a2)
    {
LABEL_17:
      if (v9 - size >= v7)
      {
        v22 = (char *)this;
        if ((v10 & 0x80) != 0)
          v22 = (char *)this->__r_.__value_.__r.__words[0];
LABEL_28:
        v23 = &v22[size];
        if ((char *)a2 != a3)
        {
          if (v7 >= 0x20)
          {
            v24 = (char *)a2;
            if ((unint64_t)&v22[size - a2] >= 0x20)
            {
              v23 += v7 & 0xFFFFFFFFFFFFFFE0;
              v24 = (char *)(a2 + (v7 & 0xFFFFFFFFFFFFFFE0));
              v27 = (__int128 *)(a2 + 16);
              v28 = &v22[size + 16];
              v29 = v7 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v30 = *v27;
                *((_OWORD *)v28 - 1) = *(v27 - 1);
                *(_OWORD *)v28 = v30;
                v27 += 2;
                v28 += 32;
                v29 -= 32;
              }
              while (v29);
              if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0))
                goto LABEL_40;
            }
          }
          else
          {
            v24 = (char *)a2;
          }
          do
          {
            v31 = *v24++;
            *v23++ = v31;
          }
          while (v24 != a3);
        }
LABEL_40:
        *v23 = 0;
        v32 = size + v7;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
          this->__r_.__value_.__l.__size_ = v32;
        else
          *((_BYTE *)&this->__r_.__value_.__s + 23) = v32 & 0x7F;
        return this;
      }
      v20 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - v9 < size + v7 - v9)
        std::string::__throw_length_error[abi:ne180100]();
      v21 = this;
      if (v6 < 0)
      {
        v21 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v9 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_21:
          v22 = (char *)operator new(0x7FFFFFFFFFFFFFF7uLL);
          if (!size)
          {
LABEL_23:
            if (v9 != 22)
              operator delete(v21);
            this->__r_.__value_.__l.__size_ = size;
            this->__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
            this->__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
            goto LABEL_28;
          }
LABEL_22:
          memmove(v22, v21, size);
          goto LABEL_23;
        }
      }
      else if (v9 > 0x3FFFFFFFFFFFFFF2)
      {
        goto LABEL_21;
      }
      v37 = 2 * v9;
      if (size + v7 > 2 * v9)
        v37 = size + v7;
      v38 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v37 | 7) != 0x17)
        v38 = v37 | 7;
      if (v37 >= 0x17)
        v20 = v38 + 1;
      else
        v20 = 23;
      v22 = (char *)operator new(v20);
      if (!size)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  if ((unint64_t)v11->__r_.__value_.__r.__words + size + 1 <= a2)
    goto LABEL_17;
  memset(__p, 170, sizeof(__p));
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 > 0x16)
  {
    v25 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v25 = v7 | 7;
    v26 = v25 + 1;
    v13 = operator new(v25 + 1);
    __p[1] = (void *)v7;
    __p[2] = (void *)(v26 | 0x8000000000000000);
    __p[0] = v13;
    if ((char *)a2 != a3)
      goto LABEL_11;
LABEL_34:
    v14 = v13;
    goto LABEL_45;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v13 = __p;
  if ((char *)a2 == a3)
    goto LABEL_34;
LABEL_11:
  if (v7 < 0x20 || (unint64_t)v13 - a2 < 0x20)
  {
    v14 = v13;
    v15 = (char *)a2;
  }
  else
  {
    v14 = (char *)v13 + (v7 & 0xFFFFFFFFFFFFFFE0);
    v15 = (char *)(a2 + (v7 & 0xFFFFFFFFFFFFFFE0));
    v16 = (__int128 *)(a2 + 16);
    v17 = v13 + 1;
    v18 = v7 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v19 = *v16;
      *(v17 - 1) = *(v16 - 1);
      *v17 = v19;
      v16 += 2;
      v17 += 2;
      v18 -= 32;
    }
    while (v18);
    if (v7 == (v7 & 0x7FFFFFFFFFFFFFE0))
      goto LABEL_45;
  }
  do
  {
    v33 = *v15++;
    *v14++ = v33;
  }
  while (v15 != a3);
LABEL_45:
  *v14 = 0;
  if (SHIBYTE(__p[2]) >= 0)
    v34 = __p;
  else
    v34 = (void **)__p[0];
  if (SHIBYTE(__p[2]) >= 0)
    v35 = HIBYTE(__p[2]);
  else
    v35 = (std::string::size_type)__p[1];
  std::string::append(this, (const std::string::value_type *)v34, v35);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return this;
}

void sub_212A95A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::io::detail::maybe_throw_exception(uint64_t this, uint64_t a2, uint64_t a3)
{
  _QWORD v3[3];

  if ((this & 1) != 0)
  {
    v3[0] = &unk_24CE7F8D8;
    v3[1] = a2;
    v3[2] = a3;
    boost::throw_exception<boost::io::bad_format_string>((uint64_t)v3);
  }
  return this;
}

void sub_212A95A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

unsigned __int8 *boost::io::detail::str2int<long,std::__wrap_iter<char const*>,std::ctype<char>>(unsigned __int8 **a1, char **a2, _QWORD *a3, _QWORD *a4)
{
  unsigned __int8 *i;
  uint64_t v8;

  *a3 = 0;
  for (i = *a1; i != (unsigned __int8 *)*a2; ++i)
  {
    if ((char)*i < 0)
      break;
    v8 = *i;
    if ((*(_DWORD *)(a4[2] + 4 * v8) & 0x400) == 0)
      break;
    *a3 = 10 * *a3
        + (*(int (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)v8, 0)
        - 48;
  }
  return i;
}

__n128 boost::wrapexcept<boost::io::bad_format_string>::wrapexcept(__n128 *a1, uint64_t a2)
{
  __n128 result;

  a1->n128_u64[0] = (unint64_t)&unk_24CE7F250;
  a1->n128_u64[1] = (unint64_t)&unk_24CE7F8D8;
  result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&unk_24CE7F860;
  a1->n128_u64[1] = (unint64_t)&unk_24CE7F890;
  a1[2].n128_u64[0] = (unint64_t)&unk_24CE7F8B8;
  a1[2].n128_u64[1] = 0;
  return result;
}

std::exception *boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[4].__vftable = (std::exception_vtbl *)&unk_24CE7F2A8;
  v2 = a1[5].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[5].__vftable = 0;
  std::exception::~exception(a1 + 1);
  return a1;
}

_QWORD *boost::wrapexcept<boost::io::bad_format_string>::clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x48uLL);
  *v2 = &unk_24CE7F250;
  v2[1] = &unk_24CE7F8D8;
  *((_OWORD *)v2 + 1) = *(_OWORD *)(a1 + 16);
  v2[4] = &unk_24CE7F2A8;
  v3 = *(_QWORD *)(a1 + 40);
  v2[5] = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  *((_DWORD *)v2 + 16) = *(_DWORD *)(a1 + 64);
  *v2 = &unk_24CE7F860;
  v2[1] = &unk_24CE7F890;
  v2[4] = &unk_24CE7F8B8;
  boost::exception_detail::copy_boost_exception((uint64_t)(v2 + 4), a1 + 32);
  return v2;
}

void sub_212A95C94(_Unwind_Exception *a1)
{
  void *v1;
  std::exception *v2;

  std::exception::~exception(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A95CB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::bad_format_string>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::bad_format_string>::wrapexcept((uint64_t)exception, a1);
}

void sub_212A95D08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[4].__vftable = (std::exception_vtbl *)&unk_24CE7F2A8;
  v2 = a1[5].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[5].__vftable = 0;
  std::exception::~exception(a1 + 1);
  operator delete(a1);
}

void `non-virtual thunk to'boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(std::exception *this)
{
  std::exception_vtbl *v2;

  this[3].__vftable = (std::exception_vtbl *)&unk_24CE7F2A8;
  v2 = this[4].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[4].__vftable = 0;
  std::exception::~exception(this);
}

{
  std::exception_vtbl *v2;

  this[3].__vftable = (std::exception_vtbl *)&unk_24CE7F2A8;
  v2 = this[4].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[4].__vftable = 0;
  std::exception::~exception(this);
  operator delete(&this[-1]);
}

const char *boost::io::bad_format_string::what(boost::io::bad_format_string *this)
{
  return "boost::bad_format_string: format-string is ill-formed";
}

void `non-virtual thunk to'boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24CE7F2A8;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 3);
}

{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24CE7F2A8;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 3);
  operator delete(&a1[-4]);
}

void boost::io::bad_format_string::~bad_format_string(std::exception *this)
{
  void *v1;

  std::exception::~exception(this);
  operator delete(v1);
}

uint64_t boost::wrapexcept<boost::io::bad_format_string>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24CE7F250;
  *(_QWORD *)(a1 + 8) = &unk_24CE7F8D8;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &unk_24CE7F2A8;
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &unk_24CE7F860;
  *(_QWORD *)(a1 + 8) = &unk_24CE7F890;
  *(_QWORD *)(a1 + 32) = &unk_24CE7F8B8;
  return a1;
}

void sub_212A95F94(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__append(void **a1, unint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::locale *v18;
  char *v19;
  uint64_t v20;
  std::locale::__imp *locale;
  uint64_t v22;
  const std::locale *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  std::locale *v27;
  uint64_t v28;
  char *v29;

  v6 = a1[2];
  v7 = (uint64_t)a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v6[-v7] >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 120 * a2;
      v14 = 120 * a2;
      do
      {
        std::construct_at[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>(v7, a3);
        v7 += 120;
        v14 -= 120;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (void *)v7;
  }
  else
  {
    v8 = 0xEEEEEEEEEEEEEEEFLL * ((v7 - (uint64_t)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x222222222222222)
      std::vector<std::pair<std::string,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v10 = 0xEEEEEEEEEEEEEEEFLL * ((v6 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x111111111111111)
      v11 = 0x222222222222222;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x222222222222222)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(120 * v11);
    }
    else
    {
      v12 = 0;
    }
    v15 = (uint64_t)&v12[120 * v8];
    v28 = v15;
    v29 = &v12[120 * v11];
    v16 = 120 * a2;
    v17 = v15 + 120 * a2;
    do
    {
      std::construct_at[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>(v15, a3);
      v15 += 120;
      v16 -= 120;
    }
    while (v16);
    v19 = (char *)*a1;
    v18 = (std::locale *)a1[1];
    if (v18 != *a1)
    {
      v20 = 0;
      do
      {
        v22 = v28 + v20 * 8;
        v23 = &v18[v20];
        *(_DWORD *)(v22 - 120) = v18[v20 - 15].__locale_;
        v24 = *(_OWORD *)&v18[v20 - 14].__locale_;
        *(std::locale *)(v22 - 96) = v18[v20 - 12];
        *(_OWORD *)(v22 - 112) = v24;
        v23[-13].__locale_ = 0;
        v23[-12].__locale_ = 0;
        v23[-14].__locale_ = 0;
        v25 = *(_OWORD *)&v18[v20 - 11].__locale_;
        *(std::locale *)(v22 - 72) = v18[v20 - 9];
        *(_OWORD *)(v22 - 88) = v25;
        v23[-10].__locale_ = 0;
        v23[-9].__locale_ = 0;
        v23[-11].__locale_ = 0;
        v26 = *(_OWORD *)&v18[v20 - 6].__locale_;
        *(_OWORD *)(v22 - 64) = *(_OWORD *)&v18[v20 - 8].__locale_;
        *(_OWORD *)(v22 - 48) = v26;
        *(_BYTE *)(v22 - 32) = 0;
        if (LOBYTE(v18[v20 - 4].__locale_))
        {
          std::locale::locale((std::locale *)(v22 - 24), v23 - 3);
          *(_BYTE *)(v22 - 32) = 1;
        }
        locale = v23[-2].__locale_;
        *(_DWORD *)(v22 - 8) = v23[-1].__locale_;
        *(_QWORD *)(v22 - 16) = locale;
        v20 -= 15;
      }
      while (&v18[v20] != (std::locale *)v19);
      v18 = (std::locale *)*a1;
      v27 = (std::locale *)a1[1];
      *a1 = (void *)(v28 + v20 * 8);
      a1[1] = (void *)v17;
      a1[2] = v29;
      while (1)
      {
        if (v27 == v18)
          goto LABEL_35;
        if (LOBYTE(v27[-4].__locale_))
        {
          std::locale::~locale(v27 - 3);
          LOBYTE(v27[-4].__locale_) = 0;
        }
        if (SHIBYTE(v27[-9].__locale_) < 0)
        {
          operator delete(v27[-11].__locale_);
          if ((SHIBYTE(v27[-12].__locale_) & 0x80000000) == 0)
            goto LABEL_25;
        }
        else if ((SHIBYTE(v27[-12].__locale_) & 0x80000000) == 0)
        {
          goto LABEL_25;
        }
        operator delete(v27[-14].__locale_);
LABEL_25:
        v27 -= 15;
      }
    }
    *a1 = (void *)v28;
    a1[1] = (void *)v17;
    a1[2] = v29;
LABEL_35:
    if (v18)
      operator delete(v18);
  }
}

void sub_212A96234(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_212A9623C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 120;
    if (*(_BYTE *)(i - 32))
    {
      std::locale::~locale((std::locale *)(i - 24));
      *(_BYTE *)(i - 32) = 0;
    }
    if (*(char *)(i - 65) < 0)
    {
      operator delete(*(void **)(i - 88));
      if ((*(char *)(i - 89) & 0x80000000) == 0)
        continue;
    }
    else if ((*(char *)(i - 89) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(*(void **)(i - 112));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (*(_BYTE *)(a1 + 60))
  {
    v4 = *(_QWORD *)a1;
    v3 = *(_QWORD *)(a1 + 8);
    if (v3 != *(_QWORD *)a1)
    {
      v5 = 0;
      v6 = 0;
      do
      {
        if (!*(_QWORD *)(a1 + 32)
          || (v8 = *(unsigned int *)(v4 + v5), (v8 & 0x80000000) != 0)
          || ((*(_QWORD *)(*(_QWORD *)(a1 + 24) + ((v8 >> 3) & 0x1FFFFFF8)) >> v8) & 1) == 0)
        {
          v9 = v4 + v5;
          v7 = (_QWORD *)(v9 + 8);
          if (*(char *)(v9 + 31) < 0)
          {
            v7 = (_QWORD *)*v7;
            *(_QWORD *)(v9 + 16) = 0;
          }
          else
          {
            *(_BYTE *)(v9 + 31) = 0;
          }
          *(_BYTE *)v7 = 0;
          v4 = *(_QWORD *)a1;
          v3 = *(_QWORD *)(a1 + 8);
        }
        ++v6;
        v5 += 120;
      }
      while (v6 < 0xEEEEEEEEEEEEEEEFLL * ((v3 - v4) >> 3));
    }
    *(_DWORD *)(a1 + 52) = 0;
    *(_BYTE *)(a1 + 60) = 0;
    if (*(_QWORD *)(a1 + 32))
    {
      v10 = *(unsigned int *)(a1 + 56);
      if ((int)v10 >= 1)
      {
        v11 = 0;
        v12 = *(_QWORD *)(a1 + 24);
        do
        {
          if (((*(_QWORD *)(v12 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
            break;
          *(_DWORD *)(a1 + 52) = ++v11;
        }
        while (v10 != v11);
      }
    }
  }
  boost::io::detail::distribute<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(a1, a2);
  v13 = *(int *)(a1 + 52);
  v14 = v13 + 1;
  *(_DWORD *)(a1 + 52) = v13 + 1;
  if (*(_QWORD *)(a1 + 32))
  {
    v15 = *(int *)(a1 + 56);
    if ((int)v14 < (int)v15)
    {
      v16 = *(_QWORD *)(a1 + 24);
      v17 = v13 + 2;
      do
      {
        if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        ++v14;
        *(_DWORD *)(a1 + 52) = v17++;
      }
      while (v15 != v14);
    }
  }
  return a1;
}

uint64_t boost::io::detail::distribute<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  const std::locale *v10;
  _QWORD v11[3];

  v2 = result;
  v3 = *(int *)(result + 52);
  v4 = *(int *)(result + 56);
  if ((int)v3 >= (int)v4)
  {
    if ((*(_BYTE *)(result + 88) & 4) != 0)
    {
      v11[0] = &unk_24CE7F9D8;
      v11[1] = v3;
      v11[2] = v4;
      boost::throw_exception<boost::io::too_many_args>((uint64_t)v11);
    }
  }
  else
  {
    v6 = *(_QWORD *)result;
    v5 = *(_QWORD *)(result + 8);
    if (v5 != *(_QWORD *)result)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        if (*(_DWORD *)(v6 + v8) == *(_DWORD *)(v2 + 52))
        {
          if (*(_BYTE *)(v2 + 184))
            v10 = (const std::locale *)(v2 + 192);
          else
            v10 = 0;
          result = boost::io::detail::put<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(a2, v6 + v8, (std::string *)(v6 + v8 + 8), (_QWORD *)(v2 + 96), v10);
          v6 = *(_QWORD *)v2;
          v5 = *(_QWORD *)(v2 + 8);
        }
        ++v9;
        v8 += 120;
      }
      while (v9 < 0xEEEEEEEEEEEEEEEFLL * ((v5 - v6) >> 3));
    }
  }
  return result;
}

void sub_212A9652C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::io::too_many_args>(uint64_t a1)
{
  __n128 *exception;

  exception = (__n128 *)__cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::too_many_args>::wrapexcept(exception, a1);
}

void sub_212A9657C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::io::detail::put<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(_QWORD *a1, uint64_t a2, std::string *a3, _QWORD *a4, const std::locale *a5)
{
  __int128 v10;
  std::ios_base *v11;
  std::locale *rdbuf;
  std::locale *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  const std::string::value_type *v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  int v23;
  const std::locale::facet *v24;
  unsigned __int8 v25;
  int v26;
  const std::locale::facet *v27;
  unsigned __int8 v28;
  unsigned int v29;
  std::string::size_type *v30;
  const std::string::value_type *v31;
  int v32;
  const std::locale::facet *v33;
  unsigned __int8 v34;
  int v35;
  const std::locale::facet *v36;
  unsigned __int8 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  const std::string::value_type *v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string::size_type v46;
  unint64_t v47;
  std::string::size_type v48;
  std::string *v49;
  int v50;
  std::string::size_type v51;
  const std::ios_base *v52;
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  const std::locale::facet *v62;
  uint64_t v63;
  std::string::size_type v64;
  uint64_t v65;
  char *v66;
  int v67;
  const std::locale::facet *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  std::string::size_type v79;
  uint64_t v80;
  uint64_t __n;
  std::locale v82;
  __int128 v83;
  _OWORD v84[10];
  std::locale v85[2];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _QWORD v96[17];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v84[8] = v10;
  v84[9] = v10;
  v84[7] = v10;
  v84[5] = v10;
  v84[6] = v10;
  v84[3] = v10;
  v84[4] = v10;
  v84[1] = v10;
  v84[2] = v10;
  v83 = v10;
  v84[0] = v10;
  boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::basic_oaltstringstream((uint64_t)&v83, a4);
  if (a5)
  {
    v11 = (std::ios_base *)((char *)&v84[-1] + *(_QWORD *)(v83 - 24));
    v82.__locale_ = (std::locale::__imp *)0xAAAAAAAAAAAAAAAALL;
    std::ios_base::getloc(v11);
    std::ios_base::imbue(v11, a5);
    std::locale::~locale(v85);
    rdbuf = (std::locale *)v11->__rdbuf_;
    if (rdbuf)
    {
      (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, a5);
      *(_QWORD *)&v97 = 0xAAAAAAAAAAAAAAAALL;
      v13 = rdbuf + 1;
      std::locale::locale((std::locale *)&v97, v13);
      std::locale::operator=(v13, a5);
      std::locale::~locale((std::locale *)&v97);
    }
    std::locale::~locale(&v82);
  }
  v14 = a2 + 56;
  boost::io::detail::stream_format_state<char,std::char_traits<char>>::apply_on(a2 + 56, (std::ios_base *)((char *)&v84[-1] + *(_QWORD *)(v83 - 24)), a5);
  ((void (*)(__int128 *, _QWORD))a1[1])(&v83, *a1);
  v15 = v83;
  v16 = (char *)&v84[-1] + *(_QWORD *)(v83 - 24);
  v17 = *((_DWORD *)v16 + 2);
  __n = *((_QWORD *)v16 + 3);
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
  {
    v18 = (_BYTE *)a3->__r_.__value_.__r.__words[0];
    a3->__r_.__value_.__l.__size_ = 0;
    *v18 = 0;
    if ((v17 & 0x10) == 0)
    {
LABEL_17:
      if (__n >= 1)
        *(_QWORD *)((char *)v84 + *(_QWORD *)(v15 - 24) + 8) = 0;
      ((void (*)(__int128 *, _QWORD))a1[2])(&v83, *a1);
      v31 = (const std::string::value_type *)a4[5];
      if ((*(_BYTE *)(a2 + 112) & 2) == 0)
        goto LABEL_23;
      if ((const std::string::value_type *)a4[6] == v31)
        goto LABEL_66;
      v32 = *(unsigned __int8 *)v31;
      std::ios_base::getloc((const std::ios_base *)((char *)&v84[-1] + *(_QWORD *)(v83 - 24)));
      v33 = std::locale::use_facet(v85, MEMORY[0x24BEDB350]);
      v34 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 43);
      std::locale::~locale(v85);
      if (v32 == v34)
        goto LABEL_23;
      v35 = *(unsigned __int8 *)v31;
      std::ios_base::getloc((const std::ios_base *)((char *)&v84[-1] + *(_QWORD *)(v83 - 24)));
      v36 = std::locale::use_facet(v85, MEMORY[0x24BEDB350]);
      v37 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 45);
      std::locale::~locale(v85);
      if (v35 != v37)
      {
LABEL_66:
        std::ios_base::getloc((const std::ios_base *)((char *)&v84[-1] + *(_QWORD *)(v83 - 24)));
        v62 = std::locale::use_facet(v85, MEMORY[0x24BEDB350]);
        v38 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 32);
        std::locale::~locale(v85);
      }
      else
      {
LABEL_23:
        v38 = 0;
      }
      v63 = a4[5];
      if (a4[6] - v63 >= *(_QWORD *)(a2 + 104) - (unint64_t)(v38 != 0))
        v64 = *(_QWORD *)(a2 + 104) - (v38 != 0);
      else
        v64 = a4[6] - v63;
      v65 = a2;
      v66 = (char *)&v84[-1] + *(_QWORD *)(v83 - 24);
      v67 = *((_DWORD *)v66 + 36);
      if (v67 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)&v84[-1] + *(_QWORD *)(v83 - 24)));
        v68 = std::locale::use_facet(v85, MEMORY[0x24BEDB350]);
        v67 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v68->__vftable[2].~facet_0)(v68, 32);
        std::locale::~locale(v85);
        *((_DWORD *)v66 + 36) = v67;
      }
      boost::io::detail::mk_str<char,std::char_traits<char>,std::allocator<char>>(a3, v31, v64, __n, v67, v17, v38, (*(_DWORD *)(v65 + 112) >> 2) & 1);
      goto LABEL_73;
    }
  }
  else
  {
    *((_BYTE *)&a3->__r_.__value_.__s + 23) = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
    if ((v17 & 0x10) == 0)
      goto LABEL_17;
  }
  if (!__n)
    goto LABEL_17;
  ((void (*)(__int128 *, _QWORD))a1[2])(&v83, *a1);
  v19 = a2;
  v21 = (const std::string::value_type *)a4[5];
  v20 = (const std::string::value_type *)a4[6];
  v22 = v20 - v21;
  v79 = v20 - v21;
  v80 = v19;
  if ((*(_BYTE *)(v19 + 112) & 2) == 0)
    goto LABEL_14;
  if (v20 == v21)
    goto LABEL_24;
  v23 = *(unsigned __int8 *)v21;
  std::ios_base::getloc((const std::ios_base *)((char *)&v84[-1] + *(_QWORD *)(v83 - 24)));
  v24 = std::locale::use_facet(v85, MEMORY[0x24BEDB350]);
  v25 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 43);
  std::locale::~locale(v85);
  v22 = v79;
  if (v23 == v25)
    goto LABEL_14;
  v26 = *(unsigned __int8 *)v21;
  std::ios_base::getloc((const std::ios_base *)((char *)&v84[-1] + *(_QWORD *)(v83 - 24)));
  v27 = std::locale::use_facet(v85, MEMORY[0x24BEDB350]);
  v28 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 45);
  std::locale::~locale(v85);
  v22 = v79;
  if (v26 != v28)
  {
LABEL_24:
    v30 = (std::string::size_type *)(v80 + 104);
    v29 = 1;
  }
  else
  {
LABEL_14:
    v29 = 0;
    v30 = (std::string::size_type *)(v80 + 104);
    if (v22 == __n && __n <= *(_QWORD *)(v80 + 104))
    {
      std::string::__assign_external(a3, v21, __n);
      goto LABEL_73;
    }
  }
  std::string::__assign_external(a3, v21, v22);
  v39 = a4[6];
  if (v39 && v39 != a4[5])
  {
    *(_QWORD *)&v93 = 0;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    *(_OWORD *)&v85[0].__locale_ = 0u;
    v86 = 0u;
    (*(void (**)(__int128 *__return_ptr, _QWORD *, std::locale *, uint64_t))(*a4 + 40))(&v97, a4, v85, 16);
  }
  v40 = a4[3];
  if (v40 && v40 != a4[2])
  {
    v105 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    (*(void (**)(_QWORD *__return_ptr, _QWORD *, __int128 *, uint64_t))(*a4 + 40))(v96, a4, &v97, 8);
  }
  *(_QWORD *)&v41 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v94 = v41;
  v95 = v41;
  v92 = v41;
  v93 = v41;
  v90 = v41;
  v91 = v41;
  v88 = v41;
  v89 = v41;
  v86 = v41;
  v87 = v41;
  *(_OWORD *)&v85[0].__locale_ = v41;
  boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::basic_oaltstringstream((uint64_t)v85, a4);
  boost::io::detail::stream_format_state<char,std::char_traits<char>>::apply_on(v14, (std::ios_base *)((char *)v85 + *((_QWORD *)v85[0].__locale_ - 3)), a5);
  ((void (*)(std::locale *, _QWORD))a1[1])(v85, *a1);
  *(_QWORD *)((char *)&v86 + *((_QWORD *)v85[0].__locale_ - 3) + 8) = 0;
  if (v29)
  {
    LOBYTE(v97) = 32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)&v97, 1);
  }
  ((void (*)(std::locale *, _QWORD))a1[2])(v85, *a1);
  v43 = (const std::string::value_type *)a4[5];
  v42 = (const std::string::value_type *)a4[6];
  if (v42 != v43)
    goto LABEL_36;
  v43 = (const std::string::value_type *)a4[6];
  v44 = v79;
  if ((*(_BYTE *)(v80 + 112) & 2) != 0)
  {
    LOBYTE(v97) = 32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)&v97, 1);
    v43 = (const std::string::value_type *)a4[5];
    v42 = (const std::string::value_type *)a4[6];
    v29 = 1;
LABEL_36:
    v44 = v79;
  }
  v45 = v42 - v43;
  if (v45 >= *v30)
    v46 = *v30;
  else
    v46 = v45;
  if (__n <= v46)
  {
    std::string::__assign_external(a3, v43, v46);
  }
  else
  {
    v47 = v44 + v29;
    if (v46 < v47)
      v47 = v46;
    v48 = v29;
    if (v47 > v29)
    {
      v49 = (std::string *)a3->__r_.__value_.__r.__words[0];
      if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = a3;
      v48 = v29;
      while (1)
      {
        v50 = v49->__r_.__value_.__s.__data_[0];
        v49 = (std::string *)((char *)v49 + 1);
        if (v43[v48] != v50)
          break;
        if (v47 == ++v48)
        {
          v48 = v47;
          break;
        }
      }
    }
    if (v48 >= v46)
      v51 = v29;
    else
      v51 = v48;
    std::string::__assign_external(a3, v43, v51);
    v52 = (const std::ios_base *)((char *)v85 + *((_QWORD *)v85[0].__locale_ - 3));
    fmtflags = v52[1].__fmtflags_;
    if (fmtflags == -1)
    {
      std::ios_base::getloc(v52);
      v54 = std::locale::use_facet((const std::locale *)&v97, MEMORY[0x24BEDB350]);
      fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 32);
      std::locale::~locale((std::locale *)&v97);
      v52[1].__fmtflags_ = fmtflags;
    }
    std::string::append(a3, __n - v46, fmtflags);
    std::string::append(a3, &v43[v51], v46 - v51);
  }
  std::ostream::~ostream();
  v55 = (unsigned int *)v86;
  if ((_QWORD)v86)
  {
    v56 = (unsigned int *)(v86 + 8);
    do
    {
      v57 = __ldaxr(v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v56));
    if (!v58)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v55 + 16))(v55);
      v59 = v55 + 3;
      do
      {
        v60 = __ldaxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (!v61)
        (*(void (**)(unsigned int *))(*(_QWORD *)v55 + 24))(v55);
    }
  }
  MEMORY[0x212BFA3D0]((char *)&v86 + 8);
LABEL_73:
  v69 = a4[6];
  if (v69 && v69 != a4[5])
  {
    *(_QWORD *)&v93 = 0;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    *(_OWORD *)&v85[0].__locale_ = 0u;
    v86 = 0u;
    (*(void (**)(__int128 *__return_ptr, _QWORD *, std::locale *, uint64_t))(*a4 + 40))(&v97, a4, v85, 16);
  }
  v70 = a4[3];
  if (v70 && v70 != a4[2])
  {
    v105 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    (*(void (**)(_QWORD *__return_ptr, _QWORD *, __int128 *, uint64_t))(*a4 + 40))(v96, a4, &v97, 8);
  }
  std::ostream::~ostream();
  v71 = *(unsigned int **)&v84[0];
  if (*(_QWORD *)&v84[0])
  {
    v72 = (unsigned int *)(*(_QWORD *)&v84[0] + 8);
    do
    {
      v73 = __ldaxr(v72);
      v74 = v73 - 1;
    }
    while (__stlxr(v74, v72));
    if (!v74)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v71 + 16))(v71);
      v75 = v71 + 3;
      do
      {
        v76 = __ldaxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      if (!v77)
        (*(void (**)(unsigned int *))(*(_QWORD *)v71 + 24))(v71);
    }
  }
  return MEMORY[0x212BFA3D0]((char *)v84 + 8);
}

void sub_212A96E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  std::locale::~locale((std::locale *)(v35 - 240));
  boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream((uint64_t)&a35);
  boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_212A96E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::locale a35)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_212A96EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, char a13)
{
  std::locale::~locale(&a12);
  boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_212A96F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212A96F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212A96F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 boost::wrapexcept<boost::io::too_many_args>::wrapexcept(__n128 *a1, uint64_t a2)
{
  __n128 result;

  a1->n128_u64[0] = (unint64_t)&unk_24CE7F250;
  a1->n128_u64[1] = (unint64_t)&unk_24CE7F9D8;
  result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&unk_24CE7F960;
  a1->n128_u64[1] = (unint64_t)&unk_24CE7F990;
  a1[2].n128_u64[0] = (unint64_t)&unk_24CE7F9B8;
  a1[2].n128_u64[1] = 0;
  return result;
}

std::exception *boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[4].__vftable = (std::exception_vtbl *)&unk_24CE7F2A8;
  v2 = a1[5].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[5].__vftable = 0;
  std::exception::~exception(a1 + 1);
  return a1;
}

_QWORD *boost::wrapexcept<boost::io::too_many_args>::clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x48uLL);
  *v2 = &unk_24CE7F250;
  v2[1] = &unk_24CE7F9D8;
  *((_OWORD *)v2 + 1) = *(_OWORD *)(a1 + 16);
  v2[4] = &unk_24CE7F2A8;
  v3 = *(_QWORD *)(a1 + 40);
  v2[5] = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  *((_DWORD *)v2 + 16) = *(_DWORD *)(a1 + 64);
  *v2 = &unk_24CE7F960;
  v2[1] = &unk_24CE7F990;
  v2[4] = &unk_24CE7F9B8;
  boost::exception_detail::copy_boost_exception((uint64_t)(v2 + 4), a1 + 32);
  return v2;
}

void sub_212A970CC(_Unwind_Exception *a1)
{
  void *v1;
  std::exception *v2;

  std::exception::~exception(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A970E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::too_many_args>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::too_many_args>::wrapexcept((uint64_t)exception, a1);
}

void sub_212A97140(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[4].__vftable = (std::exception_vtbl *)&unk_24CE7F2A8;
  v2 = a1[5].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[5].__vftable = 0;
  std::exception::~exception(a1 + 1);
  operator delete(a1);
}

void `non-virtual thunk to'boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(std::exception *this)
{
  std::exception_vtbl *v2;

  this[3].__vftable = (std::exception_vtbl *)&unk_24CE7F2A8;
  v2 = this[4].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[4].__vftable = 0;
  std::exception::~exception(this);
}

{
  std::exception_vtbl *v2;

  this[3].__vftable = (std::exception_vtbl *)&unk_24CE7F2A8;
  v2 = this[4].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[4].__vftable = 0;
  std::exception::~exception(this);
  operator delete(&this[-1]);
}

const char *boost::io::too_many_args::what(boost::io::too_many_args *this)
{
  return "boost::too_many_args: format-string referred to fewer arguments than were passed";
}

void `non-virtual thunk to'boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24CE7F2A8;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 3);
}

{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24CE7F2A8;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 3);
  operator delete(&a1[-4]);
}

void boost::io::too_many_args::~too_many_args(std::exception *this)
{
  void *v1;

  std::exception::~exception(this);
  operator delete(v1);
}

uint64_t boost::wrapexcept<boost::io::too_many_args>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24CE7F250;
  *(_QWORD *)(a1 + 8) = &unk_24CE7F9D8;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &unk_24CE7F2A8;
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &unk_24CE7F960;
  *(_QWORD *)(a1 + 8) = &unk_24CE7F990;
  *(_QWORD *)(a1 + 32) = &unk_24CE7F9B8;
  return a1;
}

void sub_212A973CC(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::basic_oaltstringstream(uint64_t a1, void *a2)
{
  std::ios_base *v4;
  _QWORD *v5;

  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB898] + 16;
  v4 = (std::ios_base *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = operator new(0x20uLL);
  v5[1] = 0x100000001;
  *v5 = &unk_24CE7FB08;
  v5[2] = a2;
  *(_QWORD *)a1 = &unk_24CE7FA78;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = &unk_24CE7FAA0;
  std::ios_base::init(v4, a2);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  *(_QWORD *)a1 = &unk_24CE7FA08;
  *(_QWORD *)(a1 + 24) = &unk_24CE7FA30;
  return a1;
}

void sub_212A97498(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  boost::base_from_member<boost::shared_ptr<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>>,0>::~base_from_member(v2);
  MEMORY[0x212BFA3D0](v1);
  _Unwind_Resume(a1);
}

void sub_212A974B4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_212A974C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_end_catch();
  MEMORY[0x212BFA3D0](v1);
  _Unwind_Resume(a1);
}

void boost::io::detail::stream_format_state<char,std::char_traits<char>>::apply_on(uint64_t a1, std::ios_base *this, const std::locale *a3)
{
  std::locale *rdbuf;
  std::locale *v6;
  unint64_t *v7;
  std::locale *v9;
  std::locale *v10;
  std::streamsize v11;
  std::ios_base::fmtflags v12;
  const std::locale::facet *v13;
  std::ios_base::fmtflags v14;
  unint64_t v15;
  unint64_t v16;
  std::locale v17;
  std::locale v18;

  if (*(_BYTE *)(a1 + 32))
  {
    v16 = 0xAAAAAAAAAAAAAAAALL;
    std::ios_base::getloc(this);
    std::ios_base::imbue(this, (const std::locale *)(a1 + 40));
    std::locale::~locale(&v18);
    rdbuf = (std::locale *)this->__rdbuf_;
    if (rdbuf)
    {
      (*((void (**)(void *, uint64_t))rdbuf->__locale_ + 2))(this->__rdbuf_, a1 + 40);
      v17.__locale_ = (std::locale::__imp *)0xAAAAAAAAAAAAAAAALL;
      v6 = rdbuf + 1;
      std::locale::locale(&v17, v6);
      std::locale::operator=(v6, (const std::locale *)(a1 + 40));
      std::locale::~locale(&v17);
    }
    v7 = &v16;
  }
  else
  {
    if (!a3)
      goto LABEL_10;
    v15 = 0xAAAAAAAAAAAAAAAALL;
    std::ios_base::getloc(this);
    std::ios_base::imbue(this, a3);
    std::locale::~locale(&v18);
    v9 = (std::locale *)this->__rdbuf_;
    if (v9)
    {
      (*((void (**)(void *, const std::locale *))v9->__locale_ + 2))(this->__rdbuf_, a3);
      v17.__locale_ = (std::locale::__imp *)0xAAAAAAAAAAAAAAAALL;
      v10 = v9 + 1;
      std::locale::locale(&v17, v10);
      std::locale::operator=(v10, a3);
      std::locale::~locale(&v17);
    }
    v7 = &v15;
  }
  std::locale::~locale((std::locale *)v7);
LABEL_10:
  if (*(_QWORD *)a1 != -1)
    this->__width_ = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11 != -1)
    this->__precision_ = v11;
  v12 = *(char *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (this[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(this);
      v13 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
      v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 32);
      std::locale::~locale(&v18);
      this[1].__fmtflags_ = v14;
    }
    this[1].__fmtflags_ = v12;
  }
  this->__fmtflags_ = *(_DWORD *)(a1 + 20);
  std::ios_base::clear(this, *(_DWORD *)(a1 + 24));
  this->__exceptions_ = *(_DWORD *)(a1 + 28);
  std::ios_base::clear(this, this->__rdstate_);
}

void sub_212A976B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void sub_212A976C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  _Unwind_Resume(a1);
}

void sub_212A976DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void boost::io::detail::mk_str<char,std::char_traits<char>,std::allocator<char>>(std::string *this, const std::string::value_type *a2, std::string::size_type a3, int64_t __requested_capacity, std::string::value_type a5, char a6, int a7, int a8)
{
  _BYTE *v15;
  int64_t v16;
  uint64_t v17;
  std::string::size_type v18;
  std::string::size_type v19;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v15 = (_BYTE *)this->__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = 0;
    *v15 = 0;
    if (__requested_capacity < 1)
    {
LABEL_12:
      if (a7)
        v19 = a3 + 1;
      else
        v19 = a3;
      std::string::reserve(this, v19);
      if (a7)
        std::string::append(this, 1uLL, a7);
      if (a3)
        std::string::append(this, a2, a3);
      return;
    }
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
    this->__r_.__value_.__s.__data_[0] = 0;
    if (__requested_capacity < 1)
      goto LABEL_12;
  }
  if (__requested_capacity <= a3)
    goto LABEL_12;
  v16 = __requested_capacity - a3 - (a7 != 0);
  std::string::reserve(this, __requested_capacity);
  if (a8)
  {
    if (v16 >= 0)
      v17 = v16;
    else
      v17 = v16 + 1;
    v18 = v17 >> 1;
    v16 -= v17 >> 1;
    if (!v16)
      goto LABEL_22;
LABEL_21:
    std::string::append(this, v16, a5);
    goto LABEL_22;
  }
  if ((a6 & 0x20) != 0)
  {
    v18 = v16;
    if (!a7)
      goto LABEL_24;
    goto LABEL_23;
  }
  v18 = 0;
  if (v16)
    goto LABEL_21;
LABEL_22:
  if (a7)
LABEL_23:
    std::string::append(this, 1uLL, a7);
LABEL_24:
  if (a3)
    std::string::append(this, a2, a3);
  if (v18)
    std::string::append(this, v18, a5);
}

uint64_t boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(std::ostream::~ostream() + 16);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  MEMORY[0x212BFA3D0](a1 + 24);
  return a1;
}

uint64_t boost::base_from_member<boost::shared_ptr<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>>,0>::~base_from_member(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream(char *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(std::ostream::~ostream() + 16);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  MEMORY[0x212BFA3D0](a1 + 24);
  operator delete(a1);
}

void `virtual thunk to'boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream(_QWORD *a1)
{
  char *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  v2 = (unsigned int *)*((_QWORD *)v1 + 2);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  JUMPOUT(0x212BFA3D0);
}

{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ostream::~ostream();
  v2 = (unsigned int *)v1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  MEMORY[0x212BFA3D0](v1 + 3);
  operator delete(v1);
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>::get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B52ECDLL)
    return a1 + 24;
  if (((v3 & 0x8000000212B52ECDLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B52ECDLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B52ECDLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>::get_untyped_deleter(uint64_t a1)
{
  return a1 + 24;
}

uint64_t boost::io::detail::call_put_last<char,std::char_traits<char>,int const>()
{
  return std::ostream::operator<<();
}

_QWORD *boost::io::detail::call_put_last<char,std::char_traits<char>,std::string const>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, v3);
}

void boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::string::size_type v10;
  std::string::size_type *v11;
  std::string::size_type v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  _QWORD v27[3];

  v5 = *a1;
  v4 = a1[1];
  v6 = v4 - *a1;
  if (v4 == *a1)
  {
    if (*((char *)a1 + 87) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a2, (const std::string::value_type *)a1[8], a1[9]);
    }
    else
    {
      *(_OWORD *)a2 = *((_OWORD *)a1 + 4);
      *(_QWORD *)(a2 + 16) = a1[10];
    }
    return;
  }
  v7 = *((int *)a1 + 13);
  v8 = *((int *)a1 + 14);
  if ((int)v7 < (int)v8 && (a1[11] & 2) != 0)
  {
    v27[0] = &unk_24CE7FC50;
    v27[1] = v7;
    v27[2] = v8;
    boost::throw_exception<boost::io::too_few_args>((uint64_t)v27);
  }
  v9 = 0xEEEEEEEEEEEEEEEFLL * (v6 >> 3);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (*((char *)a1 + 87) < 0)
    v10 = a1[9];
  else
    v10 = *((unsigned __int8 *)a1 + 87);
  if (v9 <= 1)
    v9 = 1;
  v11 = (std::string::size_type *)(v5 + 56);
  do
  {
    while (1)
    {
      if (*((char *)v11 - 25) < 0)
      {
        v12 = *(v11 - 5) + v10;
        if (*((_DWORD *)v11 - 14) != -2)
          goto LABEL_12;
      }
      else
      {
        v12 = *((unsigned __int8 *)v11 - 25) + v10;
        if (*((_DWORD *)v11 - 14) != -2)
          goto LABEL_12;
      }
      if (v12 <= *v11)
        v12 = *v11;
LABEL_12:
      if (*((char *)v11 - 1) < 0)
        break;
      v10 = *((unsigned __int8 *)v11 - 1) + v12;
      v11 += 15;
      if (!--v9)
        goto LABEL_23;
    }
    v10 = *(v11 - 2) + v12;
    v11 += 15;
    --v9;
  }
  while (v9);
LABEL_23:
  std::string::reserve((std::string *)a2, v10);
  v13 = *((char *)a1 + 87);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)(a1 + 8);
  else
    v14 = (const std::string::value_type *)a1[8];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a1 + 87);
  else
    v15 = a1[9];
  std::string::append((std::string *)a2, v14, v15);
  v16 = *a1;
  if (a1[1] != *a1)
  {
    v17 = 0;
    v18 = 40;
    while (1)
    {
      v19 = *(char *)(v16 + v18 - 9);
      if (v19 >= 0)
        v20 = (const std::string::value_type *)(v16 + v18 - 32);
      else
        v20 = *(const std::string::value_type **)(v16 + v18 - 32);
      if (v19 >= 0)
        v21 = *(unsigned __int8 *)(v16 + v18 - 9);
      else
        v21 = *(_QWORD *)(v16 + v18 - 24);
      std::string::append((std::string *)a2, v20, v21);
      if (*(_DWORD *)(v16 + v18 - 40) != -2)
        goto LABEL_43;
      v22 = *(_QWORD *)(v16 + v18 + 16);
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        break;
      v23 = *(_QWORD *)(a2 + 8);
      if (v22 > v23)
        goto LABEL_42;
LABEL_43:
      v24 = *(char *)(v16 + v18 + 15);
      if (v24 >= 0)
        v25 = (const std::string::value_type *)(v16 + v18 - 8);
      else
        v25 = *(const std::string::value_type **)(v16 + v18 - 8);
      if (v24 >= 0)
        v26 = *(unsigned __int8 *)(v16 + v18 + 15);
      else
        v26 = *(_QWORD *)(v16 + v18);
      std::string::append((std::string *)a2, v25, v26);
      ++v17;
      v16 = *a1;
      v18 += 120;
      if (v17 >= 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3))
        goto LABEL_50;
    }
    v23 = *(unsigned __int8 *)(a2 + 23);
    if (v22 <= v23)
      goto LABEL_43;
LABEL_42:
    std::string::append((std::string *)a2, v22 - v23, *(_BYTE *)(v16 + v18 + 32));
    goto LABEL_43;
  }
LABEL_50:
  *((_BYTE *)a1 + 60) = 1;
}

void sub_212A97EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

void sub_212A97EC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void boost::throw_exception<boost::io::too_few_args>(uint64_t a1)
{
  __n128 *exception;

  exception = (__n128 *)__cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::too_few_args>::wrapexcept(exception, a1);
}

void sub_212A97F20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 boost::wrapexcept<boost::io::too_few_args>::wrapexcept(__n128 *a1, uint64_t a2)
{
  __n128 result;

  a1->n128_u64[0] = (unint64_t)&unk_24CE7F250;
  a1->n128_u64[1] = (unint64_t)&unk_24CE7FC50;
  result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&unk_24CE7FBD8;
  a1->n128_u64[1] = (unint64_t)&unk_24CE7FC08;
  a1[2].n128_u64[0] = (unint64_t)&unk_24CE7FC30;
  a1[2].n128_u64[1] = 0;
  return result;
}

std::exception *boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[4].__vftable = (std::exception_vtbl *)&unk_24CE7F2A8;
  v2 = a1[5].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[5].__vftable = 0;
  std::exception::~exception(a1 + 1);
  return a1;
}

_QWORD *boost::wrapexcept<boost::io::too_few_args>::clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x48uLL);
  *v2 = &unk_24CE7F250;
  v2[1] = &unk_24CE7FC50;
  *((_OWORD *)v2 + 1) = *(_OWORD *)(a1 + 16);
  v2[4] = &unk_24CE7F2A8;
  v3 = *(_QWORD *)(a1 + 40);
  v2[5] = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  *((_DWORD *)v2 + 16) = *(_DWORD *)(a1 + 64);
  *v2 = &unk_24CE7FBD8;
  v2[1] = &unk_24CE7FC08;
  v2[4] = &unk_24CE7FC30;
  boost::exception_detail::copy_boost_exception((uint64_t)(v2 + 4), a1 + 32);
  return v2;
}

void sub_212A980A4(_Unwind_Exception *a1)
{
  void *v1;
  std::exception *v2;

  std::exception::~exception(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A980C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::too_few_args>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::too_few_args>::wrapexcept((uint64_t)exception, a1);
}

void sub_212A98118(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[4].__vftable = (std::exception_vtbl *)&unk_24CE7F2A8;
  v2 = a1[5].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[5].__vftable = 0;
  std::exception::~exception(a1 + 1);
  operator delete(a1);
}

void `non-virtual thunk to'boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(std::exception *this)
{
  std::exception_vtbl *v2;

  this[3].__vftable = (std::exception_vtbl *)&unk_24CE7F2A8;
  v2 = this[4].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[4].__vftable = 0;
  std::exception::~exception(this);
}

{
  std::exception_vtbl *v2;

  this[3].__vftable = (std::exception_vtbl *)&unk_24CE7F2A8;
  v2 = this[4].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[4].__vftable = 0;
  std::exception::~exception(this);
  operator delete(&this[-1]);
}

const char *boost::io::too_few_args::what(boost::io::too_few_args *this)
{
  return "boost::too_few_args: format-string referred to more arguments than were passed";
}

void `non-virtual thunk to'boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24CE7F2A8;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 3);
}

{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24CE7F2A8;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 3);
  operator delete(&a1[-4]);
}

void boost::io::too_few_args::~too_few_args(std::exception *this)
{
  void *v1;

  std::exception::~exception(this);
  operator delete(v1);
}

uint64_t boost::wrapexcept<boost::io::too_few_args>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24CE7F250;
  *(_QWORD *)(a1 + 8) = &unk_24CE7FC50;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &unk_24CE7F2A8;
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &unk_24CE7FBD8;
  *(_QWORD *)(a1 + 8) = &unk_24CE7FC08;
  *(_QWORD *)(a1 + 32) = &unk_24CE7FC30;
  return a1;
}

void sub_212A983A4(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_243()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_212A4D000);
  }
  return result;
}

uint64_t __cxx_global_var_init_244()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ICEARIContext>::~PthreadMutexGuardPolicy, &ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance, &dword_212A4D000);
  }
  return result;
}

void BBUFileDataSource::~BBUFileDataSource(BBUFileDataSource *this)
{
  FILE *v2;

  *(_QWORD *)this = off_24CE7FC78;
  v2 = (FILE *)*((_QWORD *)this + 4);
  if (v2)
    fclose(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  FILE *v2;

  *(_QWORD *)this = off_24CE7FC78;
  v2 = (FILE *)*((_QWORD *)this + 4);
  if (v2)
    fclose(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  operator delete(this);
}

uint64_t BBUFileDataSource::init(uint64_t a1, const char *a2, int a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  FILE *v11;
  int v12;
  uint64_t result;
  const char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  char v32;
  __int128 v33;
  char *v34;
  size_t v35;

  *(_DWORD *)(a1 + 44) = a3;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      goto LABEL_8;
  }
  if (gBBULogVerbosity >= 7)
  {
    v5 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    if (a2[23] >= 0)
      LOBYTE(v9) = (_BYTE)a2;
    else
      v9 = *(const char **)a2;
    _BBULog(15, 7, v5, "", "Opening %s\n", v6, v7, v8, (char)v9);
  }
LABEL_8:
  if (a2[23] >= 0)
    v10 = a2;
  else
    v10 = *(const char **)a2;
  v11 = fopen(v10, "r");
  *(_QWORD *)(a1 + 32) = v11;
  if (!v11)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      result = 35;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
        return result;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      result = 35;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
        return result;
    }
    if (gBBULogVerbosity < 0)
      return result;
    v20 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    if (a2[23] >= 0)
      LOBYTE(v24) = (_BYTE)a2;
    else
      v24 = *(const char **)a2;
    _BBULog(15, 0, v20, "", "Failed to open file %s\n", v21, v22, v23, (char)v24);
    return 35;
  }
  if (fseek(v11, 0, 2))
  {
    v12 = *__error();
    if (gBBULogMaskGet(void)::once == -1)
    {
      result = 35;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
        return result;
      goto LABEL_15;
    }
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    result = 35;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
    {
LABEL_15:
      if (gBBULogVerbosity < 0)
        return result;
      v14 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      v15 = strerror(v12);
      v19 = "Failed to seek, err = %s (%u)\n";
      goto LABEL_17;
    }
    return result;
  }
  v25 = MEMORY[0x212BFA730](*(_QWORD *)(a1 + 32));
  if ((v25 & 0x8000000000000000) == 0)
  {
    *(_DWORD *)(a1 + 40) = v25;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
        goto LABEL_30;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
      {
LABEL_30:
        if (gBBULogVerbosity >= 7)
        {
          v26 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
          _BBULog(15, 7, v26, "", "File size is %u\n", v27, v28, v29, *(_DWORD *)(a1 + 40));
        }
      }
    }
    if (!fseek(*(FILE **)(a1 + 32), 0, 0))
    {
      if ((const char *)(a1 + 8) != a2)
      {
        v32 = a2[23];
        if (*(char *)(a1 + 31) < 0)
        {
          if (v32 >= 0)
            v34 = (char *)a2;
          else
            v34 = *(char **)a2;
          if (v32 >= 0)
            v35 = *((unsigned __int8 *)a2 + 23);
          else
            v35 = *((_QWORD *)a2 + 1);
          std::string::__assign_no_alias<false>((void **)(a1 + 8), v34, v35);
        }
        else
        {
          if ((a2[23] & 0x80) == 0)
          {
            result = 0;
            v33 = *(_OWORD *)a2;
            *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
            *(_OWORD *)(a1 + 8) = v33;
            return result;
          }
          std::string::__assign_no_alias<true>((_QWORD *)(a1 + 8), *(void **)a2, *((_QWORD *)a2 + 1));
        }
      }
      return 0;
    }
    v30 = *__error();
    if (gBBULogMaskGet(void)::once == -1)
    {
      result = 35;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
        return result;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      result = 35;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
        return result;
    }
    if (gBBULogVerbosity < 0)
      return result;
    v14 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v15 = strerror(v30);
    v19 = "Failed to re-seek, err = %s (%u)\n";
LABEL_17:
    _BBULog(15, 0, v14, "", v19, v16, v17, v18, v15);
    return 35;
  }
  v31 = *__error();
  if (gBBULogMaskGet(void)::once == -1)
  {
    result = 35;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      return result;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    result = 35;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      return result;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v14 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v15 = strerror(v31);
    v19 = "Failed to tell, err = %s (%u)\n";
    goto LABEL_17;
  }
  return result;
}

uint64_t BBUFileDataSource::copyData(FILE **this, unsigned __int8 *a2, int a3, unsigned int *a4, unsigned int a5)
{
  size_t v7;
  uint64_t result;
  unsigned int v11;
  int v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  LODWORD(v7) = a3;
  if (((unsigned int (*)(FILE **))(*this)->_bf._base)(this) < a5)
  {
    result = 0;
    *a4 = 0;
    return result;
  }
  v11 = ((uint64_t (*)(FILE **))(*this)->_bf._base)(this) - a5;
  if (v11 >= v7)
    v7 = v7;
  else
    v7 = v11;
  if (fseek(this[4], a5, 0))
  {
    v12 = *__error();
    if (gBBULogMaskGet(void)::once == -1)
    {
      result = 35;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
        return result;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      result = 35;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
        return result;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      v13 = (const char *)((uint64_t (*)(FILE **))(*this)->_close)(this);
      strerror(v12);
      _BBULog(15, 0, v13, "", "Failed to seek to %u, err = %s (%u)\n", v14, v15, v16, a5);
      return 35;
    }
  }
  else
  {
    v17 = fread(a2, 1uLL, v7, this[4]);
    *a4 = v17;
    if (v7 <= v17)
      return 0;
    if (gBBULogMaskGet(void)::once == -1)
    {
      result = 35;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
        return result;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      result = 35;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
        return result;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      v18 = (const char *)((uint64_t (*)(FILE **))(*this)->_close)(this);
      _BBULog(15, 0, v18, "", "Read only %u of %u bytes\n", v19, v20, v21, *a4);
      return 35;
    }
  }
  return result;
}

uint64_t BBUFileDataSource::getSize(BBUFileDataSource *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t BBUFileDataSource::getBaseAddress(BBUFileDataSource *this)
{
  return *((unsigned int *)this + 11);
}

_QWORD *BBUFileDataSource::getNameAsString@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  size_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v3 = *((char *)this + 31);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)this + 31);
  else
    v4 = this[2];
  v5 = v4 + 5;
  memset(a2, 170, 24);
  if (v4 + 5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (uint64_t)this;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v10 = (char *)operator new(v8 + 1);
    a2[1] = v5;
    a2[2] = v9 | 0x8000000000000000;
    *a2 = v10;
    *(_DWORD *)v10 = 1701603654;
    v7 = v10 + 5;
    v10[4] = 32;
  }
  else
  {
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    *((_BYTE *)a2 + 23) = v5;
    *((_BYTE *)a2 + 4) = 32;
    v7 = (char *)a2 + 5;
    *(_DWORD *)a2 = 1701603654;
    if (!v4)
    {
      *v7 = 0;
      return this;
    }
  }
  if (v3 >= 0)
    v11 = (const void *)(v6 + 8);
  else
    v11 = *(const void **)(v6 + 8);
  this = memmove(v7, v11, v4);
  v7[v4] = 0;
  return this;
}

const char *BBUFileDataSource::getDebugName(BBUFileDataSource *this)
{
  return "BBUFileDataSource";
}

BOOL BBUEUR20HashData::compare(BBUEUR20HashData *this, BBUFeedback *a2, const BBUHashData *lpsrc)
{
  unsigned __int8 *v5;
  const unsigned __int8 *v6;
  _BOOL4 v7;
  _BOOL8 v9;

  if (lpsrc)
  {
    v6 = v5;
    if (v5
      && (v5 = (unsigned __int8 *)BBUHashData::compareHash(this, a2, (const unsigned __int8 *)this + 8, v5 + 8, "SBL1"),
          (_DWORD)v5))
    {
      v9 = BBUHashData::compareHash(this, a2, (const unsigned __int8 *)this + 56, v6 + 56, "ACDB");
      v7 = v9;
      if (capabilities::updater::supportsBbcfgImage((capabilities::updater *)v9))
        goto LABEL_5;
    }
    else
    {
      v7 = 0;
      if (capabilities::updater::supportsBbcfgImage((capabilities::updater *)v5))
      {
LABEL_5:
        if (!v7 || !BBUHashData::compareHash(this, a2, (const unsigned __int8 *)this + 104, v6 + 104, "BBCFG"))
          return 0;
        return BBUHashData::compareHash(this, a2, (const unsigned __int8 *)this + 152, v6 + 152, "OEMMisc");
      }
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
    if (capabilities::updater::supportsBbcfgImage(this))
      goto LABEL_5;
  }
  if (!v7)
    return 0;
  return BBUHashData::compareHash(this, a2, (const unsigned __int8 *)this + 152, v6 + 152, "OEMMisc");
}

void BBUEUR20HashData::showHashes(BBUEUR20HashData *this, BBUFeedback *a2)
{
  const char *p_p;
  const char *v5;
  const char *v6;
  void *__p;
  uint64_t v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  (*(void (**)(BBUEUR20HashData *))(*(_QWORD *)this + 32))(this);
  ctu::assign();
  BBUFeedback::handleComment(a2, "\t %s:  %s", "SBL1_HASH", (const char *)&__p);
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
  __p = 0;
  v8 = 0;
  v9 = 0;
  (*(void (**)(BBUEUR20HashData *))(*(_QWORD *)this + 32))(this);
  ctu::assign();
  if (v9 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  BBUFeedback::handleComment(a2, "\t %s:  %s", "ACDB_HASH", p_p);
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
  __p = 0;
  v8 = 0;
  v9 = 0;
  (*(void (**)(BBUEUR20HashData *))(*(_QWORD *)this + 32))(this);
  ctu::assign();
  if (v9 >= 0)
    v5 = (const char *)&__p;
  else
    v5 = (const char *)__p;
  BBUFeedback::handleComment(a2, "\t %s:  %s", "BBCFG_HASH", v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
  __p = 0;
  v8 = 0;
  v9 = 0;
  (*(void (**)(BBUEUR20HashData *))(*(_QWORD *)this + 32))(this);
  ctu::assign();
  if (v9 >= 0)
    v6 = (const char *)&__p;
  else
    v6 = (const char *)__p;
  BBUFeedback::handleComment(a2, "\t %s:  %s", "OEMMisc_HASH", v6);
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
}

void sub_212A98FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BasebandUpdater::BasebandUpdater(BasebandUpdater *this, const void *a2, const __CFDictionary *a3)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  *(_QWORD *)this = off_24CE7FD30;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  capabilities::radio::vendor(this);
  BasebandRestore::create(a3, (ACFULogging **)&v12);
  v5 = v12;
  v12 = 0uLL;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  *((_OWORD *)this + 1) = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_212A990E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_212A990F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BasebandUpdater::~BasebandUpdater(BasebandUpdater *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = off_24CE7FD30;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = off_24CE7FD30;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (!v2)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v5)
    goto LABEL_10;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(this);
  }
  else
  {
LABEL_10:
    operator delete(this);
  }
}

uint64_t BBUpdaterExtremePrivate::setOptions()
{
  return 0;
}

uint64_t BBUpdaterExtremePrivate::execCommand()
{
  return 0;
}

void BBUEUR20UpdateSource::~BBUEUR20UpdateSource(BBUEUR20UpdateSource *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24CE7FD88;
  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  BBUEUR10UpdateSource::~BBUEUR10UpdateSource(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_24CE7FD88;
  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  BBUEUR10UpdateSource::~BBUEUR10UpdateSource(this);
  operator delete(v3);
}

void BBUEUR20UpdateSource::init(BBUEUR20UpdateSource *this)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  CFIndex v16;
  UInt8 *v17;
  const __CFAllocator *v18;
  const __CFData *v19;
  const __CFDictionary *v20;
  const __CFDictionary *v21;
  const __CFArray *Value;
  const __CFArray *v23;
  CFTypeID v24;
  const void *ValueAtIndex;
  const void *v26;
  CFTypeID v27;
  _DWORD *v28;
  _OWORD *v29;
  __int128 v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *DataSource;
  _QWORD *v47;
  BBUELF32Header *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *exception;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  CFPropertyListFormat format;
  int v88;
  void *__p[2];
  char v90;
  void *v91;
  void *v92;
  _OWORD *v93;
  void *v94[2];
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v2 = (*(uint64_t (**)(BBUEUR20UpdateSource *))(*(_QWORD *)this + 64))(this);
  if (v2)
  {
    if (!*((_BYTE *)this + 424))
    {
      v3 = v2;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
          goto LABEL_7;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
          goto LABEL_7;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        v4 = (const char *)(**(uint64_t (***)(BBUEUR20UpdateSource *))this)(this);
        _BBULog(3, 0, v4, "", "Detected it is unfused and there is fusing source. So, fetching sec.elf from fusing source.\n", v5, v6, v7, v86);
      }
LABEL_7:
      v95 = 0u;
      v96 = 0u;
      *(_OWORD *)v94 = 0u;
      BBUDataSource::generateHash(v3, (unsigned __int8 *)v94, 1);
      v8 = operator new(0x30uLL);
      v91 = v8;
      v93 = v8 + 3;
      v9 = v95;
      *v8 = *(_OWORD *)v94;
      v8[1] = v9;
      v8[2] = v96;
      v92 = v8 + 3;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
          goto LABEL_15;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
          goto LABEL_15;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        v10 = (const char *)(**(uint64_t (***)(BBUEUR20UpdateSource *))this)(this);
        ctu::hex();
        if (v90 >= 0)
          v14 = __p;
        else
          LOBYTE(v14) = __p[0];
        _BBULog(3, 0, v10, "", "Fusing Source SHA-384: %s\n", v11, v12, v13, (char)v14);
        if (v90 < 0)
          operator delete(__p[0]);
      }
LABEL_15:
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
      v16 = v15;
      v17 = (UInt8 *)operator new[](v15);
      v88 = -1431655766;
      if ((*(unsigned int (**)(uint64_t, UInt8 *, uint64_t, int *, _QWORD))(*(_QWORD *)v3 + 16))(v3, v17, v15, &v88, 0))
      {
        exception = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 122, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR20UpdateSource.cpp", 0x5Bu, (ctu::LogMessageBuffer *)"Failed to copy data from fusing source", v58, v59, v60, v86);
      }
      else
      {
        if (v88 == (_DWORD)v15)
        {
          v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          v19 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v17, v16);
          if (!v19)
          {
            v64 = __cxa_allocate_exception(0x210uLL);
            _BBUException::_BBUException((uint64_t)v64, 121, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR20UpdateSource.cpp", 0x5Fu, (ctu::LogMessageBuffer *)"Failed to create CFDataRef from the buffer", v65, v66, v67, v86);
          }
          format = kCFPropertyListXMLFormat_v1_0;
          v20 = (const __CFDictionary *)CFPropertyListCreateWithData(v18, v19, 2uLL, &format, 0);
          v21 = v20;
          if (!v20)
          {
            v68 = __cxa_allocate_exception(0x210uLL);
            _BBUException::_BBUException((uint64_t)v68, 121, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR20UpdateSource.cpp", 0x64u, (ctu::LogMessageBuffer *)"Failed to create fusing dictionary from plist", v69, v70, v71, v86);
          }
          Value = (const __CFArray *)CFDictionaryGetValue(v20, CFSTR("Instructions"));
          v23 = Value;
          if (Value)
          {
            v24 = CFGetTypeID(Value);
            if (v24 == CFArrayGetTypeID())
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v23, 0);
              v26 = ValueAtIndex;
              if (ValueAtIndex)
              {
                v27 = CFGetTypeID(ValueAtIndex);
                if (v27 == CFDataGetTypeID())
                {
                  v28 = operator new(0x18uLL);
                  v28[4] = 0;
                  *(_QWORD *)v28 = off_24CE84890;
                  *((_QWORD *)v28 + 1) = v26;
                  CFRetain(v26);
                  v95 = 0u;
                  v96 = 0u;
                  *(_OWORD *)v94 = 0u;
                  BBUDataSource::generateHash((uint64_t)v28, (unsigned __int8 *)v94, 1);
                  v29 = operator new(0x30uLL);
                  v30 = v95;
                  *v29 = *(_OWORD *)v94;
                  v29[1] = v30;
                  v29[2] = v96;
                  if (v91)
                  {
                    v92 = v91;
                    operator delete(v91);
                  }
                  v91 = v29;
                  v92 = v29 + 3;
                  v93 = v29 + 3;
                  if (gBBULogMaskGet(void)::once == -1)
                  {
                    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
                    {
LABEL_27:
                      if ((gBBULogVerbosity & 0x80000000) == 0)
                      {
                        v31 = (const char *)(**(uint64_t (***)(BBUEUR20UpdateSource *))this)(this);
                        ctu::hex();
                        if (v90 >= 0)
                          v35 = __p;
                        else
                          LOBYTE(v35) = __p[0];
                        _BBULog(3, 0, v31, "", "sec.elf SHA-384: %s\n", v32, v33, v34, (char)v35);
                        if (v90 < 0)
                          operator delete(__p[0]);
                      }
                    }
                  }
                  else
                  {
                    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
                    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
                      goto LABEL_27;
                  }
                  CFRelease(v21);
                  CFRelease(v19);
                  operator delete[](v17);
                  if (v91)
                  {
                    v92 = v91;
                    operator delete(v91);
                  }
                  goto LABEL_49;
                }
                v79 = __cxa_allocate_exception(0x210uLL);
                _BBUException::_BBUException((uint64_t)v79, 124, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR20UpdateSource.cpp", 0x6Fu, (ctu::LogMessageBuffer *)"Failed to get sec.elf in CFDataRef type", v83, v84, v85, v86);
              }
              else
              {
                v79 = __cxa_allocate_exception(0x210uLL);
                _BBUException::_BBUException((uint64_t)v79, 124, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR20UpdateSource.cpp", 0x6Eu, (ctu::LogMessageBuffer *)"Failed to get sec.elf in Instructions array", v80, v81, v82, v86);
              }
            }
            v72 = __cxa_allocate_exception(0x210uLL);
            _BBUException::_BBUException((uint64_t)v72, 123, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR20UpdateSource.cpp", 0x68u, (ctu::LogMessageBuffer *)"Failed to get Instructions as CFArrayRef type", v76, v77, v78, v86);
          }
          else
          {
            v72 = __cxa_allocate_exception(0x210uLL);
            _BBUException::_BBUException((uint64_t)v72, 123, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR20UpdateSource.cpp", 0x67u, (ctu::LogMessageBuffer *)"Failed to get Instructions in fusingprogram.plist", v73, v74, v75, v86);
          }
        }
        exception = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 122, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR20UpdateSource.cpp", 0x5Cu, (ctu::LogMessageBuffer *)"Failed due to copied size (%d) and original length (%d) is different.", v61, v62, v63, v88);
      }
    }
  }
  else
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_39;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_39;
    }
    if (gBBULogVerbosity >= 1)
    {
      v36 = (const char *)(**(uint64_t (***)(BBUEUR20UpdateSource *))this)(this);
      _BBULog(3, 1, v36, "", "Fusing source is not found.\n", v37, v38, v39, v86);
    }
  }
LABEL_39:
  BYTE7(v95) = 7;
  strcpy((char *)v94, "sec.elf");
  v40 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)v94);
  v41 = v40;
  if (SBYTE7(v95) < 0)
  {
    operator delete(v94[0]);
    if (!v41)
      goto LABEL_54;
  }
  else if (!v40)
  {
    goto LABEL_54;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_47;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_47;
  }
  if (gBBULogVerbosity >= 1)
  {
    v42 = (const char *)(**(uint64_t (***)(BBUEUR20UpdateSource *))this)(this);
    _BBULog(3, 1, v42, "", "Detected it is fused or fusing source is not found. Use the dummy sec.elf\n", v43, v44, v45, v86);
  }
LABEL_47:
  BYTE7(v95) = 7;
  strcpy((char *)v94, "sec.elf");
  DataSource = BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)v94, 0);
  v28 = DataSource;
  if (SBYTE7(v95) < 0)
  {
    operator delete(v94[0]);
    if (v28)
      goto LABEL_49;
LABEL_54:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        return;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        return;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      v53 = (const char *)(**(uint64_t (***)(BBUEUR20UpdateSource *))this)(this);
      _BBULog(3, 0, v53, "", "File not present: %s\n", v54, v55, v56, (char)"sec.elf");
    }
    return;
  }
  if (!DataSource)
    goto LABEL_54;
LABEL_49:
  v47 = operator new(0x20uLL);
  *v47 = off_24CE80058;
  v47[1] = v28;
  v47[2] = 0;
  *((_DWORD *)v47 + 6) = 0;
  v48 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v48, (BBUDataSource *)v28, 0);
  v47[2] = v48;
  *v47 = off_24CE7FEB8;
  *((_QWORD *)this + 52) = v47;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      return;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      return;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v49 = (const char *)(**(uint64_t (***)(BBUEUR20UpdateSource *))this)(this);
    _BBULog(3, 0, v49, "", "Loaded SEC\n", v50, v51, v52, v86);
  }
}

void sub_212A99C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a18 < 0)
    operator delete(__p);
  if (a19)
  {
    operator delete(a19);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *BBUEUR20UpdateSource::copyHashData(BBUEUR20UpdateSource *this, int a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  capabilities::updater *v7;
  uint64_t v8;
  char *v9;
  size_t HashSize;
  size_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  void *exception;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[3];
  _OWORD v36[3];
  _OWORD v37[3];
  _OWORD __src[3];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __src[1] = v3;
    __src[2] = v3;
    __src[0] = v3;
    v37[1] = v3;
    v37[2] = v3;
    v36[2] = v3;
    v37[0] = v3;
    v36[0] = v3;
    v36[1] = v3;
    v35[1] = v3;
    v35[2] = v3;
    v35[0] = v3;
    v4 = *((_QWORD *)this + 28);
    if (!v4)
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 89, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR20UpdateSource.cpp", 0x9Au, (ctu::LogMessageBuffer *)"Assertion failure(fSBLImage && \"Failed loading SBL image for creating hash.\")", v20, v21, v22, v35[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v4 + 56))(v4, __src, 1);
    v5 = *((_QWORD *)this + 40);
    if (!v5)
    {
      v23 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v23, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR20UpdateSource.cpp", 0x9Du, (ctu::LogMessageBuffer *)"Assertion failure(fAcdbImage && \"Failed loading ACDB image for creating hash.\")", v24, v25, v26, v35[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v5 + 56))(v5, v37, 1);
    v6 = *((_QWORD *)this + 47);
    if (!v6)
    {
      v27 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v27, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR20UpdateSource.cpp", 0xA0u, (ctu::LogMessageBuffer *)"Assertion failure(fOEMMiscImage && \"Failed loading OEMMisc image for creating hash.\")", v28, v29, v30, v35[0]);
    }
    v7 = (capabilities::updater *)(*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v6 + 56))(v6, v35, 1);
    if (capabilities::updater::supportsBbcfgImage(v7))
    {
      v8 = *((_QWORD *)this + 41);
      if (!v8)
      {
        v31 = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)v31, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR20UpdateSource.cpp", 0xA5u, (ctu::LogMessageBuffer *)"Assertion failure(fBbcfgImage && \"Failed loading BBCFG image for creating hash.\")", v32, v33, v34, v35[0]);
      }
      (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v8 + 56))(v8, v36, 1);
    }
    v9 = (char *)operator new(0xC8uLL);
    *(_QWORD *)v9 = &unk_24CE7FCE0;
    HashSize = BBUEURHashData::getHashSize((BBUEURHashData *)v9);
    memcpy(v9 + 8, __src, HashSize);
    v11 = (*(uint64_t (**)(char *))(*(_QWORD *)v9 + 32))(v9);
    memcpy(v9 + 56, v37, v11);
    v12 = (*(uint64_t (**)(char *))(*(_QWORD *)v9 + 32))(v9);
    memcpy(v9 + 104, v36, v12);
    v13 = (*(uint64_t (**)(char *))(*(_QWORD *)v9 + 32))(v9);
    memcpy(v9 + 152, v35, v13);
  }
  else
  {
    v9 = (char *)operator new(0xC8uLL);
    *(_QWORD *)v9 = &unk_24CE7FCE0;
    v14 = BBUEURHashData::getHashSize((BBUEURHashData *)v9);
    bzero(v9 + 8, v14);
    v15 = (*(uint64_t (**)(char *))(*(_QWORD *)v9 + 32))(v9);
    bzero(v9 + 56, v15);
    v16 = (*(uint64_t (**)(char *))(*(_QWORD *)v9 + 32))(v9);
    bzero(v9 + 104, v16);
    v17 = (*(uint64_t (**)(char *))(*(_QWORD *)v9 + 32))(v9);
    bzero(v9 + 152, v17);
  }
  return v9;
}

void sub_212A9A070(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9A084(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9A098(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9A0AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9A0C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9A0D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

capabilities::updater *BBUEUR20UpdateSource::getItems(BBUEUR20UpdateSource *this)
{
  capabilities::updater *v2;
  void *v3;
  capabilities::updater *SBLType;
  void *v5;
  uint64_t v6;
  void *v7;
  capabilities::updater *APDPType;
  void *v9;
  uint64_t v10;
  void *v11;
  capabilities::updater *DEVCFGType;
  void *v13;
  uint64_t v14;
  void *v15;
  capabilities::updater *SECType;
  void *v17;
  uint64_t v18;
  void *v19;
  capabilities::updater *HYPType;
  void *v21;
  uint64_t v22;
  void *v23;
  capabilities::updater *AOPType;
  void *v25;
  uint64_t v26;
  void *v27;
  capabilities::updater *APPSType;
  void *v29;
  uint64_t v30;
  void *v31;
  capabilities::updater *QDSP6SWType;
  void *v33;
  uint64_t v34;
  void *v35;
  capabilities::updater *TZType;
  void *v37;
  uint64_t v38;
  void *v39;
  capabilities::updater *EFS1Type;
  void *v41;
  uint64_t v42;
  void *v43;
  capabilities::updater *EFS2Type;
  void *v45;
  uint64_t v46;
  void *v47;
  capabilities::updater *EFS3Type;
  void *v49;
  uint64_t v50;
  void *v51;
  capabilities::updater *ACDBType;
  void *v53;
  uint64_t v54;
  void *v55;
  capabilities::updater *CalType;
  void *v57;
  uint64_t v58;
  void *v59;
  capabilities::updater *ProvType;
  void *v61;
  uint64_t v62;
  void *v63;
  capabilities::updater *PacType;
  void *v65;
  uint64_t v66;
  void *v67;
  capabilities::updater *BBCFGType;
  void *v69;
  uint64_t v70;
  void *v71;
  capabilities::updater *MDMDDRType;
  void *v73;
  uint64_t v74;
  void *v75;
  capabilities::updater *OEMMiscType;
  void *v77;
  uint64_t v78;
  void *v79;
  capabilities::updater *QTIMiscType;
  void *v81;
  uint64_t v82;
  capabilities::updater *XblCfgType;
  void *v84;
  void *v85;
  uint64_t v86;
  capabilities::updater *UEFIType;
  void *v88;
  void *v89;
  uint64_t v90;
  capabilities::updater *v91;
  void *v92;
  void *v93;
  _QWORD *v94;
  uint64_t v95;
  void *exception;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;

  v2 = (capabilities::updater *)operator new(0x18uLL);
  *(_QWORD *)v2 = v2;
  *((_QWORD *)v2 + 1) = v2;
  *((_QWORD *)v2 + 2) = 0;
  v3 = (void *)*((_QWORD *)this + 28);
  SBLType = (capabilities::updater *)capabilities::updater::getSBLType(v2);
  if ((_DWORD)SBLType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x19u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a SBL1 file.\")", v98, v99, v100, v167);
    goto LABEL_97;
  }
  if (v3)
  {
    v5 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v5, 16391, v3);
    SBLType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)SBLType + 1) = v2;
    *((_QWORD *)SBLType + 2) = v5;
    v6 = *(_QWORD *)v2;
    *(_QWORD *)SBLType = *(_QWORD *)v2;
    *(_QWORD *)(v6 + 8) = SBLType;
    *(_QWORD *)v2 = SBLType;
    ++*((_QWORD *)v2 + 2);
  }
  v7 = (void *)*((_QWORD *)this + 42);
  APDPType = (capabilities::updater *)capabilities::updater::getAPDPType(SBLType);
  if ((_DWORD)APDPType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xEDu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a APDP file.\")", v101, v102, v103, v167);
    goto LABEL_97;
  }
  if (v7)
  {
    v9 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v9, 16408, v7);
    APDPType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)APDPType + 1) = v2;
    *((_QWORD *)APDPType + 2) = v9;
    v10 = *(_QWORD *)v2;
    *(_QWORD *)APDPType = *(_QWORD *)v2;
    *(_QWORD *)(v10 + 8) = APDPType;
    *(_QWORD *)v2 = APDPType;
    ++*((_QWORD *)v2 + 2);
  }
  v11 = (void *)*((_QWORD *)this + 43);
  DEVCFGType = (capabilities::updater *)capabilities::updater::getDEVCFGType(APDPType);
  if ((_DWORD)DEVCFGType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xF8u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a DEVCFG file.\")", v104, v105, v106, v167);
    goto LABEL_97;
  }
  if (v11)
  {
    v13 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v13, 16409, v11);
    DEVCFGType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)DEVCFGType + 1) = v2;
    *((_QWORD *)DEVCFGType + 2) = v13;
    v14 = *(_QWORD *)v2;
    *(_QWORD *)DEVCFGType = *(_QWORD *)v2;
    *(_QWORD *)(v14 + 8) = DEVCFGType;
    *(_QWORD *)v2 = DEVCFGType;
    ++*((_QWORD *)v2 + 2);
  }
  v15 = (void *)*((_QWORD *)this + 52);
  SECType = (capabilities::updater *)capabilities::updater::getSECType(DEVCFGType);
  if ((_DWORD)SECType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x103u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a SEC file.\")", v107, v108, v109, v167);
    goto LABEL_97;
  }
  if (v15)
  {
    v17 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v17, 16410, v15);
    SECType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)SECType + 1) = v2;
    *((_QWORD *)SECType + 2) = v17;
    v18 = *(_QWORD *)v2;
    *(_QWORD *)SECType = *(_QWORD *)v2;
    *(_QWORD *)(v18 + 8) = SECType;
    *(_QWORD *)v2 = SECType;
    ++*((_QWORD *)v2 + 2);
  }
  v19 = (void *)*((_QWORD *)this + 44);
  HYPType = (capabilities::updater *)capabilities::updater::getHYPType(SECType);
  if ((_DWORD)HYPType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x10Eu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a HYP file.\")", v110, v111, v112, v167);
    goto LABEL_97;
  }
  if (v19)
  {
    v21 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v21, 16411, v19);
    HYPType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)HYPType + 1) = v2;
    *((_QWORD *)HYPType + 2) = v21;
    v22 = *(_QWORD *)v2;
    *(_QWORD *)HYPType = *(_QWORD *)v2;
    *(_QWORD *)(v22 + 8) = HYPType;
    *(_QWORD *)v2 = HYPType;
    ++*((_QWORD *)v2 + 2);
  }
  v23 = (void *)*((_QWORD *)this + 45);
  AOPType = (capabilities::updater *)capabilities::updater::getAOPType(HYPType);
  if ((_DWORD)AOPType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x119u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a AOP file.\")", v113, v114, v115, v167);
    goto LABEL_97;
  }
  if (v23)
  {
    v25 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v25, 16412, v23);
    AOPType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)AOPType + 1) = v2;
    *((_QWORD *)AOPType + 2) = v25;
    v26 = *(_QWORD *)v2;
    *(_QWORD *)AOPType = *(_QWORD *)v2;
    *(_QWORD *)(v26 + 8) = AOPType;
    *(_QWORD *)v2 = AOPType;
    ++*((_QWORD *)v2 + 2);
  }
  v27 = (void *)*((_QWORD *)this + 30);
  APPSType = (capabilities::updater *)capabilities::updater::getAPPSType(AOPType);
  if ((_DWORD)APPSType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x31u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have an APPS file.\")", v116, v117, v118, v167);
    goto LABEL_97;
  }
  if (v27)
  {
    v29 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v29, 16393, v27);
    APPSType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)APPSType + 1) = v2;
    *((_QWORD *)APPSType + 2) = v29;
    v30 = *(_QWORD *)v2;
    *(_QWORD *)APPSType = *(_QWORD *)v2;
    *(_QWORD *)(v30 + 8) = APPSType;
    *(_QWORD *)v2 = APPSType;
    ++*((_QWORD *)v2 + 2);
  }
  v31 = (void *)*((_QWORD *)this + 33);
  QDSP6SWType = (capabilities::updater *)capabilities::updater::getQDSP6SWType(APPSType);
  if ((_DWORD)QDSP6SWType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x5Du, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a QDSP6SW file.\")", v119, v120, v121, v167);
    goto LABEL_97;
  }
  if (v31)
  {
    v33 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v33, 16396, v31);
    QDSP6SWType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)QDSP6SWType + 1) = v2;
    *((_QWORD *)QDSP6SWType + 2) = v33;
    v34 = *(_QWORD *)v2;
    *(_QWORD *)QDSP6SWType = *(_QWORD *)v2;
    *(_QWORD *)(v34 + 8) = QDSP6SWType;
    *(_QWORD *)v2 = QDSP6SWType;
    ++*((_QWORD *)v2 + 2);
  }
  v35 = (void *)*((_QWORD *)this + 34);
  TZType = (capabilities::updater *)capabilities::updater::getTZType(QDSP6SWType);
  if ((_DWORD)TZType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x68u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a TZ file.\")", v122, v123, v124, v167);
    goto LABEL_97;
  }
  if (v35)
  {
    v37 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v37, 16397, v35);
    TZType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)TZType + 1) = v2;
    *((_QWORD *)TZType + 2) = v37;
    v38 = *(_QWORD *)v2;
    *(_QWORD *)TZType = *(_QWORD *)v2;
    *(_QWORD *)(v38 + 8) = TZType;
    *(_QWORD *)v2 = TZType;
    ++*((_QWORD *)v2 + 2);
  }
  v39 = (void *)**((_QWORD **)this + 36);
  EFS1Type = (capabilities::updater *)capabilities::updater::getEFS1Type(TZType);
  if ((_DWORD)EFS1Type == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x8Au, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have an EFS1 file.\")", v125, v126, v127, v167);
    goto LABEL_97;
  }
  if (v39)
  {
    v41 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v41, 16400, v39);
    EFS1Type = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)EFS1Type + 1) = v2;
    *((_QWORD *)EFS1Type + 2) = v41;
    v42 = *(_QWORD *)v2;
    *(_QWORD *)EFS1Type = *(_QWORD *)v2;
    *(_QWORD *)(v42 + 8) = EFS1Type;
    *(_QWORD *)v2 = EFS1Type;
    ++*((_QWORD *)v2 + 2);
  }
  v43 = *(void **)(*((_QWORD *)this + 36) + 8);
  EFS2Type = (capabilities::updater *)capabilities::updater::getEFS2Type(EFS1Type);
  if ((_DWORD)EFS2Type == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x95u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have an EFS2 file.\")", v128, v129, v130, v167);
    goto LABEL_97;
  }
  if (v43)
  {
    v45 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v45, 16401, v43);
    EFS2Type = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)EFS2Type + 1) = v2;
    *((_QWORD *)EFS2Type + 2) = v45;
    v46 = *(_QWORD *)v2;
    *(_QWORD *)EFS2Type = *(_QWORD *)v2;
    *(_QWORD *)(v46 + 8) = EFS2Type;
    *(_QWORD *)v2 = EFS2Type;
    ++*((_QWORD *)v2 + 2);
  }
  v47 = *(void **)(*((_QWORD *)this + 36) + 16);
  EFS3Type = (capabilities::updater *)capabilities::updater::getEFS3Type(EFS2Type);
  if ((_DWORD)EFS3Type == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xA0u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have an EFS3 file.\")", v131, v132, v133, v167);
    goto LABEL_97;
  }
  if (v47)
  {
    v49 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v49, 16402, v47);
    EFS3Type = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)EFS3Type + 1) = v2;
    *((_QWORD *)EFS3Type + 2) = v49;
    v50 = *(_QWORD *)v2;
    *(_QWORD *)EFS3Type = *(_QWORD *)v2;
    *(_QWORD *)(v50 + 8) = EFS3Type;
    *(_QWORD *)v2 = EFS3Type;
    ++*((_QWORD *)v2 + 2);
  }
  v51 = (void *)*((_QWORD *)this + 40);
  ACDBType = (capabilities::updater *)capabilities::updater::getACDBType(EFS3Type);
  if ((_DWORD)ACDBType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x7Fu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have an ACDBT file.\")", v134, v135, v136, v167);
    goto LABEL_97;
  }
  if (v51)
  {
    v53 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v53, 16399, v51);
    ACDBType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)ACDBType + 1) = v2;
    *((_QWORD *)ACDBType + 2) = v53;
    v54 = *(_QWORD *)v2;
    *(_QWORD *)ACDBType = *(_QWORD *)v2;
    *(_QWORD *)(v54 + 8) = ACDBType;
    *(_QWORD *)v2 = ACDBType;
    ++*((_QWORD *)v2 + 2);
  }
  v55 = (void *)*((_QWORD *)this + 5);
  CalType = (capabilities::updater *)capabilities::updater::getCalType(ACDBType);
  if ((_DWORD)CalType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xABu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a Cal file.\")", v137, v138, v139, v167);
    goto LABEL_97;
  }
  if (v55)
  {
    v57 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v57, 16403, v55);
    CalType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)CalType + 1) = v2;
    *((_QWORD *)CalType + 2) = v57;
    v58 = *(_QWORD *)v2;
    *(_QWORD *)CalType = *(_QWORD *)v2;
    *(_QWORD *)(v58 + 8) = CalType;
    *(_QWORD *)v2 = CalType;
    ++*((_QWORD *)v2 + 2);
  }
  v59 = (void *)*((_QWORD *)this + 6);
  ProvType = (capabilities::updater *)capabilities::updater::getProvType(CalType);
  if ((_DWORD)ProvType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xB6u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a Prov file.\")", v140, v141, v142, v167);
    goto LABEL_97;
  }
  if (v59)
  {
    v61 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v61, 16404, v59);
    ProvType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)ProvType + 1) = v2;
    *((_QWORD *)ProvType + 2) = v61;
    v62 = *(_QWORD *)v2;
    *(_QWORD *)ProvType = *(_QWORD *)v2;
    *(_QWORD *)(v62 + 8) = ProvType;
    *(_QWORD *)v2 = ProvType;
    ++*((_QWORD *)v2 + 2);
  }
  v63 = (void *)*((_QWORD *)this + 7);
  PacType = (capabilities::updater *)capabilities::updater::getPacType(ProvType);
  if ((_DWORD)PacType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xC1u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a Pac file.\")", v143, v144, v145, v167);
    goto LABEL_97;
  }
  if (v63)
  {
    v65 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v65, 16405, v63);
    PacType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)PacType + 1) = v2;
    *((_QWORD *)PacType + 2) = v65;
    v66 = *(_QWORD *)v2;
    *(_QWORD *)PacType = *(_QWORD *)v2;
    *(_QWORD *)(v66 + 8) = PacType;
    *(_QWORD *)v2 = PacType;
    ++*((_QWORD *)v2 + 2);
  }
  v67 = (void *)*((_QWORD *)this + 41);
  BBCFGType = (capabilities::updater *)capabilities::updater::getBBCFGType(PacType);
  if ((_DWORD)BBCFGType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xD7u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a BBCFG file.\")", v146, v147, v148, v167);
    goto LABEL_97;
  }
  if (v67)
  {
    v69 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v69, 16407, v67);
    BBCFGType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)BBCFGType + 1) = v2;
    *((_QWORD *)BBCFGType + 2) = v69;
    v70 = *(_QWORD *)v2;
    *(_QWORD *)BBCFGType = *(_QWORD *)v2;
    *(_QWORD *)(v70 + 8) = BBCFGType;
    *(_QWORD *)v2 = BBCFGType;
    ++*((_QWORD *)v2 + 2);
  }
  v71 = (void *)*((_QWORD *)this + 46);
  MDMDDRType = (capabilities::updater *)capabilities::updater::getMDMDDRType(BBCFGType);
  if ((_DWORD)MDMDDRType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xE2u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a MDMDDR file.\")", v149, v150, v151, v167);
    goto LABEL_97;
  }
  if (v71)
  {
    v73 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v73, 16413, v71);
    MDMDDRType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)MDMDDRType + 1) = v2;
    *((_QWORD *)MDMDDRType + 2) = v73;
    v74 = *(_QWORD *)v2;
    *(_QWORD *)MDMDDRType = *(_QWORD *)v2;
    *(_QWORD *)(v74 + 8) = MDMDDRType;
    *(_QWORD *)v2 = MDMDDRType;
    ++*((_QWORD *)v2 + 2);
  }
  v75 = (void *)*((_QWORD *)this + 47);
  OEMMiscType = (capabilities::updater *)capabilities::updater::getOEMMiscType(MDMDDRType);
  if ((_DWORD)OEMMiscType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x124u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a OEMMisc file.\")", v152, v153, v154, v167);
    goto LABEL_97;
  }
  if (v75)
  {
    v77 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v77, 16414, v75);
    OEMMiscType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)OEMMiscType + 1) = v2;
    *((_QWORD *)OEMMiscType + 2) = v77;
    v78 = *(_QWORD *)v2;
    *(_QWORD *)OEMMiscType = *(_QWORD *)v2;
    *(_QWORD *)(v78 + 8) = OEMMiscType;
    *(_QWORD *)v2 = OEMMiscType;
    ++*((_QWORD *)v2 + 2);
  }
  v79 = (void *)*((_QWORD *)this + 48);
  QTIMiscType = (capabilities::updater *)capabilities::updater::getQTIMiscType(OEMMiscType);
  if ((_DWORD)QTIMiscType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x12Fu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a QTIMisc file.\")", v155, v156, v157, v167);
    goto LABEL_97;
  }
  if (v79)
  {
    v81 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v81, 16415, v79);
    QTIMiscType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)QTIMiscType + 1) = v2;
    *((_QWORD *)QTIMiscType + 2) = v81;
    v82 = *(_QWORD *)v2;
    *(_QWORD *)QTIMiscType = *(_QWORD *)v2;
    *(_QWORD *)(v82 + 8) = QTIMiscType;
    *(_QWORD *)v2 = QTIMiscType;
    ++*((_QWORD *)v2 + 2);
  }
  XblCfgType = (capabilities::updater *)capabilities::updater::supportsXblCfgImage(QTIMiscType);
  if ((_DWORD)XblCfgType)
  {
    v84 = (void *)*((_QWORD *)this + 49);
    XblCfgType = (capabilities::updater *)capabilities::updater::getXblCfgType(XblCfgType);
    if ((_DWORD)XblCfgType == 1)
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x13Au, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a XBL Config file.\")", v158, v159, v160, v167);
      goto LABEL_97;
    }
    if (v84)
    {
      v85 = operator new(0x20uLL);
      BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v85, 16416, v84);
      XblCfgType = (capabilities::updater *)operator new(0x18uLL);
      *((_QWORD *)XblCfgType + 1) = v2;
      *((_QWORD *)XblCfgType + 2) = v85;
      v86 = *(_QWORD *)v2;
      *(_QWORD *)XblCfgType = *(_QWORD *)v2;
      *(_QWORD *)(v86 + 8) = XblCfgType;
      *(_QWORD *)v2 = XblCfgType;
      ++*((_QWORD *)v2 + 2);
    }
  }
  UEFIType = (capabilities::updater *)capabilities::updater::supportsUEFIImage(XblCfgType);
  if ((_DWORD)UEFIType)
  {
    v88 = (void *)*((_QWORD *)this + 50);
    UEFIType = (capabilities::updater *)capabilities::updater::getUEFIType(UEFIType);
    if ((_DWORD)UEFIType == 1)
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x145u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a UEFI file.\")", v161, v162, v163, v167);
      goto LABEL_97;
    }
    if (v88)
    {
      v89 = operator new(0x20uLL);
      BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v89, 16417, v88);
      UEFIType = (capabilities::updater *)operator new(0x18uLL);
      *((_QWORD *)UEFIType + 1) = v2;
      *((_QWORD *)UEFIType + 2) = v89;
      v90 = *(_QWORD *)v2;
      *(_QWORD *)UEFIType = *(_QWORD *)v2;
      *(_QWORD *)(v90 + 8) = UEFIType;
      *(_QWORD *)v2 = UEFIType;
      ++*((_QWORD *)v2 + 2);
    }
  }
  v91 = (capabilities::updater *)capabilities::updater::supportsXblSupportImage(UEFIType);
  if (!(_DWORD)v91)
    return v2;
  v92 = (void *)*((_QWORD *)this + 51);
  if (capabilities::updater::getXblSupportType(v91) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x150u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a XBL Support file.\")", v164, v165, v166, v167);
LABEL_97:
  }
  if (v92)
  {
    v93 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v93, 16418, v92);
    v94 = operator new(0x18uLL);
    v94[1] = v2;
    v94[2] = v93;
    v95 = *(_QWORD *)v2;
    *v94 = *(_QWORD *)v2;
    *(_QWORD *)(v95 + 8) = v94;
    *(_QWORD *)v2 = v94;
    ++*((_QWORD *)v2 + 2);
  }
  return v2;
}

void sub_212A9ACE0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9ACF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AD08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AD1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AD30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AD44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AD58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AD6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AD80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AD94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9ADA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9ADBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9ADD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9ADE4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9ADF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AE0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AE20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AE34(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AE48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AE5C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AE70(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AE84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AE98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AEAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AEC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AED4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AEE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AEFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AF10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AF24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AF38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AF4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AF60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AF74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AF88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AF9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AFB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AFC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AFD8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9AFEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9B000(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9B014(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9B028(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9B03C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9B050(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212A9B064(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR20UpdateSource::validateBootupItems(BBUEUR20UpdateSource *this)
{
  uint64_t v2;
  capabilities::updater *v3;
  capabilities::updater *v4;
  capabilities::updater *v5;
  capabilities::updater *v6;
  uint64_t result;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v2 = *((_QWORD *)this + 28);
  if (!v2)
    return 35;
  v3 = (capabilities::updater *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  if (!v3)
    return 35;
  if (*((_QWORD *)this + 42))
  {
    if (*((_QWORD *)this + 43))
    {
      if (*((_QWORD *)this + 52))
      {
        if (*((_QWORD *)this + 44))
        {
          if (*((_QWORD *)this + 45))
          {
            if (*((_QWORD *)this + 30))
            {
              if (*((_QWORD *)this + 33))
              {
                if (*((_QWORD *)this + 34))
                {
                  if (**((_QWORD **)this + 36))
                  {
                    if (*((_QWORD *)this + 40))
                    {
                      if (*((_QWORD *)this + 47))
                      {
                        if (*((_QWORD *)this + 48))
                        {
                          v4 = (capabilities::updater *)capabilities::updater::supportsBbcfgImage(v3);
                          if (!(_DWORD)v4 || *((_QWORD *)this + 41))
                          {
                            v5 = (capabilities::updater *)capabilities::updater::supportsXblCfgImage(v4);
                            if (!(_DWORD)v5 || *((_QWORD *)this + 49))
                            {
                              v6 = (capabilities::updater *)capabilities::updater::supportsUEFIImage(v5);
                              if (!(_DWORD)v6 || *((_QWORD *)this + 50))
                              {
                                result = capabilities::updater::supportsXblSupportImage(v6);
                                if (!(_DWORD)result)
                                  return result;
                                if (*((_QWORD *)this + 51))
                                  return 0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    result = 35;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      return result;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    result = 35;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      return result;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v8 = (const char *)(**(uint64_t (***)(BBUEUR20UpdateSource *))this)(this);
    _BBULog(3, 0, v8, "", "Baseband FW isn't complete. You are missing some images!\n", v9, v10, v11, v12);
    return 35;
  }
  return result;
}

uint64_t BBUEUR20UpdateSource::validateCoredumpItems(BBUEUR20UpdateSource *this)
{
  uint64_t v2;
  capabilities::updater *v3;
  uint64_t result;

  v2 = *((_QWORD *)this + 28);
  if (!v2)
    return 35;
  v3 = (capabilities::updater *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  if (!v3 || !*((_QWORD *)this + 42) || !*((_QWORD *)this + 47))
    return 35;
  result = capabilities::updater::supportsXblCfgImage(v3);
  if (!(_DWORD)result)
    return result;
  if (!*((_QWORD *)this + 49))
    return 35;
  return 0;
}

uint64_t BBUEUR20UpdateSource::saveImages(BBUEUR20UpdateSource *this)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  capabilities::radio *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  capabilities::updater *v11;
  uint64_t v12;
  capabilities::updater *v13;
  uint64_t v14;
  capabilities::updater *v15;
  uint64_t v16;
  capabilities::updater *v17;
  uint64_t v18;
  uint64_t v19;
  void *exception;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char __p[20];
  char v30;
  void *v31[3];

  if (!*((_QWORD *)this + 8))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR20UpdateSource.cpp", 0x118u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Firmware data source error!\")", v22, v23, v24, __p[0]);
  }
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v2 = (const char *)(**(uint64_t (***)(BBUEUR20UpdateSource *))this)(this);
  v6 = (capabilities::radio *)_BBULog(19, 0xFFFFFFFFLL, v2, "", "BBUEUR20UpdateSource::saveImages\n", v3, v4, v5, __p[0]);
  memset(v31, 170, sizeof(v31));
  capabilities::radio::personalizedFirmwarePath(v6);
  v7 = (void *)HIBYTE(v31[2]);
  if (SHIBYTE(v31[2]) < 0)
    v7 = v31[1];
  if (!v7)
  {
    v25 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v25, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR20UpdateSource.cpp", 0x11Du, (ctu::LogMessageBuffer *)"Assertion failure(folder.empty() != true && \"Failed finding the bbfw path.\")", v26, v27, v28, __p[0]);
  }
  v8 = BBUEURUpdateSource::saveImages(this);
  if (!(_DWORD)v8)
  {
    v30 = 15;
    strcpy(__p, "restoresbl1.mbn");
    v9 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v31);
    v8 = v9;
    if (v30 < 0)
    {
      operator delete(*(void **)__p);
      if ((_DWORD)v8)
        goto LABEL_74;
    }
    else if ((_DWORD)v9)
    {
      goto LABEL_74;
    }
    v30 = 8;
    strcpy(__p, "sbl1.mbn");
    v10 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v31);
    v8 = v10;
    if (v30 < 0)
    {
      operator delete(*(void **)__p);
      if ((_DWORD)v8)
        goto LABEL_74;
    }
    else if ((_DWORD)v10)
    {
      goto LABEL_74;
    }
    v30 = 8;
    strcpy(__p, "acdb.mbn");
    v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v31);
    if (v30 < 0)
      operator delete(*(void **)__p);
    if (!(_DWORD)v8)
    {
      v30 = 7;
      strcpy(__p, "aop.mbn");
      v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v31);
      if (v30 < 0)
        operator delete(*(void **)__p);
      if (!(_DWORD)v8)
      {
        v30 = 8;
        strcpy(__p, "apdp.mbn");
        v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v31);
        if (v30 < 0)
          operator delete(*(void **)__p);
        if (!(_DWORD)v8)
        {
          v30 = 8;
          strcpy(__p, "apps.mbn");
          v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v31);
          if (v30 < 0)
            operator delete(*(void **)__p);
          if (!(_DWORD)v8)
          {
            v30 = 10;
            strcpy(__p, "devcfg.mbn");
            v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v31);
            if (v30 < 0)
              operator delete(*(void **)__p);
            if (!(_DWORD)v8)
            {
              v30 = 7;
              strcpy(__p, "hyp.mbn");
              v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v31);
              if (v30 < 0)
                operator delete(*(void **)__p);
              if (!(_DWORD)v8)
              {
                v30 = 11;
                strcpy(__p, "qdsp6sw.mbn");
                v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v31);
                if (v30 < 0)
                  operator delete(*(void **)__p);
                if (!(_DWORD)v8)
                {
                  v30 = 7;
                  strcpy(__p, "sec.elf");
                  v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v31);
                  if (v30 < 0)
                    operator delete(*(void **)__p);
                  if (!(_DWORD)v8)
                  {
                    v30 = 6;
                    strcpy(__p, "tz.mbn");
                    v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v31);
                    if (v30 < 0)
                      operator delete(*(void **)__p);
                    if (!(_DWORD)v8)
                    {
                      v30 = 15;
                      strcpy(__p, "multi_image.mbn");
                      v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v31);
                      if (v30 < 0)
                        operator delete(*(void **)__p);
                      if (!(_DWORD)v8)
                      {
                        v30 = 19;
                        strcpy(__p, "multi_image_qti.mbn");
                        v11 = (capabilities::updater *)BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v31);
                        v8 = (uint64_t)v11;
                        if (v30 < 0)
                          operator delete(*(void **)__p);
                        if (!(_DWORD)v8)
                        {
                          if ((capabilities::updater::supportsBbcfgImage(v11) & 1) == 0)
                          {
                            v12 = *((_QWORD *)this + 8);
                            v30 = 9;
                            strcpy(__p, "bbcfg.mbn");
                            v13 = (capabilities::updater *)BBUZipFile::containsFile(v12, __p);
                            if (!(_DWORD)v13)
                              goto LABEL_58;
                          }
                          v30 = 9;
                          strcpy(__p, "bbcfg.mbn");
                          v13 = (capabilities::updater *)BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v31);
                          v8 = (uint64_t)v13;
                          if (v30 < 0)
                            operator delete(*(void **)__p);
                          if (!(_DWORD)v8)
                          {
LABEL_58:
                            if ((capabilities::updater::supportsXblCfgImage(v13) & 1) == 0)
                            {
                              v14 = *((_QWORD *)this + 8);
                              v30 = 11;
                              strcpy(__p, "xbl_cfg.elf");
                              v15 = (capabilities::updater *)BBUZipFile::containsFile(v14, __p);
                              if (!(_DWORD)v15)
                                goto LABEL_63;
                            }
                            v30 = 11;
                            strcpy(__p, "xbl_cfg.elf");
                            v15 = (capabilities::updater *)BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v31);
                            v8 = (uint64_t)v15;
                            if (v30 < 0)
                              operator delete(*(void **)__p);
                            if (!(_DWORD)v8)
                            {
LABEL_63:
                              if ((capabilities::updater::supportsUEFIImage(v15) & 1) == 0)
                              {
                                v16 = *((_QWORD *)this + 8);
                                v30 = 8;
                                strcpy(__p, "uefi.elf");
                                v17 = (capabilities::updater *)BBUZipFile::containsFile(v16, __p);
                                if (!(_DWORD)v17)
                                  goto LABEL_68;
                              }
                              v30 = 8;
                              strcpy(__p, "uefi.elf");
                              v17 = (capabilities::updater *)BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v31);
                              v8 = (uint64_t)v17;
                              if (v30 < 0)
                                operator delete(*(void **)__p);
                              if (!(_DWORD)v8)
                              {
LABEL_68:
                                if ((capabilities::updater::supportsXblSupportImage(v17) & 1) == 0)
                                {
                                  v18 = *((_QWORD *)this + 8);
                                  v30 = 15;
                                  strcpy(__p, "xbl_support.elf");
                                  if (!BBUZipFile::containsFile(v18, __p))
                                    goto LABEL_69;
                                }
                                v30 = 15;
                                strcpy(__p, "xbl_support.elf");
                                v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v31);
                                if (v30 < 0)
                                  operator delete(*(void **)__p);
                                if (!(_DWORD)v8)
                                {
LABEL_69:
                                  v19 = *((_QWORD *)this + 8);
                                  (*(void (**)(char *__return_ptr, BBUEUR20UpdateSource *))(*(_QWORD *)this + 56))(__p, this);
                                  v8 = BBUZipFile::containsFile(v19, __p);
                                  if (v30 < 0)
                                    operator delete(*(void **)__p);
                                  if ((_DWORD)v8)
                                  {
                                    (*(void (**)(char *__return_ptr, BBUEUR20UpdateSource *))(*(_QWORD *)this + 56))(__p, this);
                                    v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v31);
                                    if (v30 < 0)
                                      operator delete(*(void **)__p);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_74:
  if (SHIBYTE(v31[2]) < 0)
    operator delete(v31[0]);
  return v8;
}

void sub_212A9BA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

const char *BBUEUR20UpdateSource::getDebugName(BBUEUR20UpdateSource *this)
{
  return "BBUEUR20UpdateSource";
}

uint64_t BBUUpdateSource::getFirmwareVersion(BBUUpdateSource *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t BBUEURUpdateSource::getShouldProgram(BBUEURUpdateSource *this)
{
  return 1;
}

uint64_t BBUEURUpdateSource::getCanProvision(BBUEURUpdateSource *this)
{
  return *((unsigned __int8 *)this + 120);
}

uint64_t BBUEURUpdateSource::getZipFile@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 72);
  *a2 = *(_QWORD *)(this + 64);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void BBUEURSecImage::~BBUEURSecImage(BBUEURSecImage *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  operator delete(this);
}

const char *BBUEURSecImage::getName(BBUEURSecImage *this)
{
  return "SEC";
}

uint64_t BBUEURELFImage::getWritePayloadLength(BBUEURELFImage *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t BBUEURELFImage::getOpenPayloadData(BBUEURELFImage *this)
{
  return 0;
}

uint64_t BBUEURELFImage::getOpenPayloadLength(BBUEURELFImage *this)
{
  return 0;
}

void BBUEURELFImage::generateHash(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v3;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
      BBUDataSource::generateHash(v3, a2, a3);
  }
}

void BBUConsoleFeedback::~BBUConsoleFeedback(BBUConsoleFeedback *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_24CE7FF20;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::deque<std::string>::~deque[abi:ne180100]((uint64_t)this + 192);
    BBUFeedback::~BBUFeedback((CFTypeRef *)this);
  }
  else
  {
LABEL_5:
    std::deque<std::string>::~deque[abi:ne180100]((uint64_t)this + 192);
    BBUFeedback::~BBUFeedback((CFTypeRef *)this);
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = off_24CE7FF20;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::deque<std::string>::~deque[abi:ne180100]((uint64_t)this + 192);
  BBUFeedback::~BBUFeedback((CFTypeRef *)this);
  operator delete(v5);
}

void BBUConsoleFeedback::addBracketedReturn(std::string *a1, int a2)
{
  const char *v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  void *__p;
  char v9;
  std::string v10;
  std::string v11;

  *((_BYTE *)&v10.__r_.__value_.__s + 23) = 1;
  LOWORD(v10.__r_.__value_.__l.__data_) = 40;
  v3 = BBUReturnAsString::BBUReturnStrings[a2];
  v4 = strlen(v3);
  v5 = std::string::append(&v10, v3, v4);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v9 = 1;
  LOWORD(__p) = 41;
  v7 = std::string::append(&v11, (const std::string::value_type *)&__p, 1uLL);
  *a1 = *v7;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (v9 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(v10.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_7;
}

void sub_212A9BE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t BBUConsoleFeedback::writeToStream(BBUConsoleFeedback *this, const char *a2, ...)
{
  va_list va;

  va_start(va, a2);
  return (*(uint64_t (**)(BBUConsoleFeedback *, const char *, uint64_t *))(*(_QWORD *)this + 104))(this, a2, (uint64_t *)va);
}

uint64_t BBUConsoleFeedback::writeToStreamInternal(BBUConsoleFeedback *this, const char *a2, va_list a3)
{
  FILE **v6;

  v6 = (FILE **)MEMORY[0x24BDAC8E8];
  vfprintf((FILE *)*MEMORY[0x24BDAC8E8], a2, a3);
  (*(void (**)(BBUConsoleFeedback *, const char *, va_list))(*(_QWORD *)this + 112))(this, a2, a3);
  return fflush(*v6);
}

void BBUConsoleFeedback::registerLogBuffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 288);
  *(_QWORD *)(a1 + 280) = v3;
  *(_QWORD *)(a1 + 288) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t BBUConsoleFeedback::writeToBuffInternal(uint64_t this, const char *a2, va_list a3)
{
  uint64_t v5;
  char __str[1025];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(this + 280))
  {
    v5 = this;
    bzero(__str, 0x401uLL);
    this = vsnprintf(__str, 0x400uLL, a2, a3);
    if ((int)this >= 1)
    {
      if (this >= 0x400)
      {
        __str[1023] = 10;
        LODWORD(this) = 1024;
      }
      return (*(uint64_t (**)(_QWORD, char *, _QWORD))(**(_QWORD **)(v5 + 280) + 24))(*(_QWORD *)(v5 + 280), __str, this);
    }
  }
  return this;
}

void BBUConsoleFeedback::handleBeginPhaseInternal(uint64_t a1, uint64_t a2)
{
  size_t v3;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  char *v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  void *v32;
  char *v33;
  char *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  BOOL v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  __int128 *v78;
  _OWORD *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  size_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  __int128 *v97;
  _OWORD *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  std::string *v103;
  __int128 v104;
  const char *v105;
  const char *v106;
  unint64_t v107;
  char *v108;
  char *v109;
  int64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  __int128 *v117;
  _OWORD *v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  void *exception;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  void *__b[3];

  if (*(_BYTE *)(a1 + 240))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUConsoleFeedback.cpp", 0x4Eu, (ctu::LogMessageBuffer *)"Assertion failure(!fQuickStepInProgress)", v123, v124, v125, v129);
    goto LABEL_138;
  }
  if (*(_BYTE *)(a1 + 241))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUConsoleFeedback.cpp", 0x4Fu, (ctu::LogMessageBuffer *)"Assertion failure(!fLongStepInProgress)", v126, v127, v128, v129);
LABEL_138:
  }
  memset(__b, 170, sizeof(__b));
  v3 = *(_QWORD *)(a1 + 232);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (void **)operator new(v6 + 1);
    __b[1] = (void *)v3;
    __b[2] = (void *)(v7 | 0x8000000000000000);
    __b[0] = v5;
    goto LABEL_10;
  }
  HIBYTE(__b[2]) = *(_QWORD *)(a1 + 232);
  v5 = __b;
  if (v3)
LABEL_10:
    memset(v5, 9, v3);
  *((_BYTE *)v5 + v3) = 0;
  v8 = *(char **)(a1 + 200);
  v9 = *(char **)(a1 + 208);
  v10 = (v9 - v8) >> 3;
  v11 = v9 - v8;
  if (v9 == v8)
    v12 = 0;
  else
    v12 = 170 * v10 - 1;
  v13 = *(_QWORD *)(a1 + 224);
  if (v12 == *(_QWORD *)(a1 + 232) + v13)
  {
    v14 = v13 >= 0xAA;
    v15 = v13 - 170;
    if (!v14)
    {
      v26 = *(char **)(a1 + 216);
      v27 = *(char **)(a1 + 192);
      if (v10 >= (unint64_t)((v26 - v27) >> 3))
      {
        if (v26 == v27)
          v30 = 1;
        else
          v30 = (v26 - v27) >> 2;
        if (!(v30 >> 61))
        {
          v31 = (char *)operator new(8 * v30);
          v32 = operator new(0xFF0uLL);
          v33 = &v31[8 * v10];
          v34 = &v31[8 * v30];
          if (v10 == v30)
          {
            v35 = v32;
            if (v11 < 1)
            {
              if (v9 == v8)
                v45 = 1;
              else
                v45 = v11 >> 2;
              if (v45 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v33 = (char *)operator new(8 * v45);
              v34 = &v33[8 * v45];
              operator delete(v31);
              v8 = *(char **)(a1 + 200);
              v9 = *(char **)(a1 + 208);
              v31 = v33;
            }
            else
            {
              v36 = v10 + 2;
              if (v10 >= -1)
                v36 = v10 + 1;
              v33 -= 8 * (v36 >> 1);
            }
            v32 = v35;
          }
          *(_QWORD *)v33 = v32;
          v46 = v33 + 8;
          if (v9 != v8)
          {
            do
            {
              if (v33 == v31)
              {
                if (v46 >= v34)
                {
                  if (v34 == v31)
                    v53 = 1;
                  else
                    v53 = (v34 - v31) >> 2;
                  if (v53 >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v54 = (char *)operator new(8 * v53);
                  v55 = v54;
                  v56 = (v53 + 3) >> 2;
                  v33 = &v54[8 * v56];
                  v57 = v46 - v31;
                  v40 = v46 == v31;
                  v46 = v33;
                  if (!v40)
                  {
                    v46 = &v33[v57 & 0xFFFFFFFFFFFFFFF8];
                    v58 = v57 - 8;
                    v59 = &v54[8 * v56];
                    v60 = v31;
                    if (v58 < 0x38)
                      goto LABEL_145;
                    v61 = 8 * v56;
                    v59 = &v54[8 * v56];
                    v60 = v31;
                    if ((unint64_t)(v59 - v31) < 0x20)
                      goto LABEL_145;
                    v62 = (v58 >> 3) + 1;
                    v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
                    v59 = &v33[v63];
                    v60 = &v31[v63];
                    v64 = (__int128 *)(v31 + 16);
                    v65 = &v54[v61 + 16];
                    v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v67 = *v64;
                      *((_OWORD *)v65 - 1) = *(v64 - 1);
                      *(_OWORD *)v65 = v67;
                      v64 += 2;
                      v65 += 32;
                      v66 -= 4;
                    }
                    while (v66);
                    if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_145:
                      do
                      {
                        v68 = *(_QWORD *)v60;
                        v60 += 8;
                        *(_QWORD *)v59 = v68;
                        v59 += 8;
                      }
                      while (v59 != v46);
                    }
                  }
                  v34 = &v54[8 * v53];
                  operator delete(v31);
                  v31 = v55;
                }
                else
                {
                  v49 = (v34 - v46) >> 3;
                  if (v49 >= -1)
                    v50 = v49 + 1;
                  else
                    v50 = v49 + 2;
                  v51 = v50 >> 1;
                  v33 = &v31[8 * (v50 >> 1)];
                  v52 = v31;
                  if (v46 != v31)
                  {
                    memmove(v33, v31, v46 - v31);
                    v52 = v46;
                  }
                  v46 = (char *)v52 + 8 * v51;
                }
              }
              v48 = *((_QWORD *)v9 - 1);
              v9 -= 8;
              *((_QWORD *)v33 - 1) = v48;
              v33 -= 8;
            }
            while (v9 != *(char **)(a1 + 200));
          }
          v47 = *(void **)(a1 + 192);
          *(_QWORD *)(a1 + 192) = v31;
          *(_QWORD *)(a1 + 200) = v33;
          v9 = v46;
          *(_QWORD *)(a1 + 208) = v46;
          *(_QWORD *)(a1 + 216) = v34;
          if (v47)
          {
            operator delete(v47);
            v9 = *(char **)(a1 + 208);
          }
          goto LABEL_108;
        }
      }
      else
      {
        v28 = operator new(0xFF0uLL);
        v29 = v28;
        if (v26 != v9)
        {
          *(_QWORD *)v9 = v28;
LABEL_107:
          v9 = (char *)(*(_QWORD *)(a1 + 208) + 8);
          *(_QWORD *)(a1 + 208) = v9;
LABEL_108:
          v8 = *(char **)(a1 + 200);
          goto LABEL_109;
        }
        if (v8 == v27)
        {
          if (v9 == v8)
            v69 = 1;
          else
            v69 = (v26 - v8) >> 2;
          if (v69 >> 61)
            goto LABEL_141;
          v70 = (char *)operator new(8 * v69);
          v71 = (v69 + 3) >> 2;
          v44 = &v70[8 * v71];
          v72 = v44;
          if (v9 != v8)
          {
            v72 = &v44[8 * v10];
            v73 = &v70[8 * v71];
            v74 = v8;
            if ((unint64_t)(v11 - 8) < 0x38)
              goto LABEL_146;
            v75 = &v70[8 * v71];
            v73 = v75;
            v74 = v8;
            if ((unint64_t)(v75 - v8) < 0x20)
              goto LABEL_146;
            v76 = ((unint64_t)(v11 - 8) >> 3) + 1;
            v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
            v73 = &v44[v77];
            v74 = &v8[v77];
            v78 = (__int128 *)(v8 + 16);
            v79 = v75 + 16;
            v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v81 = *v78;
              *(v79 - 1) = *(v78 - 1);
              *v79 = v81;
              v78 += 2;
              v79 += 2;
              v80 -= 4;
            }
            while (v80);
            if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_146:
              do
              {
                v82 = *(_QWORD *)v74;
                v74 += 8;
                *(_QWORD *)v73 = v82;
                v73 += 8;
              }
              while (v73 != v72);
            }
          }
          *(_QWORD *)(a1 + 192) = v70;
          *(_QWORD *)(a1 + 200) = v44;
          *(_QWORD *)(a1 + 208) = v72;
          *(_QWORD *)(a1 + 216) = &v70[8 * v69];
          if (v8)
          {
            operator delete(v8);
            v44 = *(char **)(a1 + 200);
          }
        }
        else
        {
          v44 = v8;
        }
        *((_QWORD *)v44 - 1) = v29;
        v83 = *(char **)(a1 + 200);
        v84 = *(char **)(a1 + 208);
        *(_QWORD *)(a1 + 200) = v83 - 8;
        v85 = *((_QWORD *)v83 - 1);
        *(_QWORD *)(a1 + 200) = v83;
        if (v84 != *(char **)(a1 + 216))
        {
LABEL_91:
          *(_QWORD *)v84 = v85;
          goto LABEL_107;
        }
        v86 = *(char **)(a1 + 192);
        if (v83 > v86)
        {
          v87 = (v83 - v86) >> 3;
          if (v87 >= -1)
            v88 = v87 + 1;
          else
            v88 = v87 + 2;
          v89 = v88 >> 1;
          v90 = -v89;
          v91 = &v83[-8 * v89];
          v92 = v84 - v83;
          if (v92)
          {
            memmove(&v83[-8 * v89], v83, v92);
            v83 = *(char **)(a1 + 200);
          }
          v93 = &v91[v92];
          *(_QWORD *)(a1 + 200) = &v83[8 * v90];
          *(_QWORD *)(a1 + 208) = v93;
          *(_QWORD *)v93 = v85;
          goto LABEL_107;
        }
        if (v84 == v86)
          v107 = 1;
        else
          v107 = (v84 - v86) >> 2;
        if (!(v107 >> 61))
        {
          v108 = (char *)operator new(8 * v107);
          v109 = &v108[8 * (v107 >> 2)];
          v110 = v84 - v83;
          v40 = v84 == v83;
          v84 = v109;
          if (v40)
            goto LABEL_134;
          v84 = &v109[v110 & 0xFFFFFFFFFFFFFFF8];
          v111 = v110 - 8;
          if (v111 >= 0x38)
          {
            v113 = &v108[8 * (v107 >> 2)];
            v112 = v113;
            if ((unint64_t)(v113 - v83) >= 0x20)
            {
              v114 = (v111 >> 3) + 1;
              v115 = 8 * (v114 & 0x3FFFFFFFFFFFFFFCLL);
              v112 = &v109[v115];
              v116 = &v83[v115];
              v117 = (__int128 *)(v83 + 16);
              v118 = v113 + 16;
              v119 = v114 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v120 = *v117;
                *(v118 - 1) = *(v117 - 1);
                *v118 = v120;
                v117 += 2;
                v118 += 2;
                v119 -= 4;
              }
              while (v119);
              v83 = v116;
              if (v114 == (v114 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_134:
                *(_QWORD *)(a1 + 192) = v108;
                *(_QWORD *)(a1 + 200) = v109;
                *(_QWORD *)(a1 + 208) = v84;
                *(_QWORD *)(a1 + 216) = &v108[8 * v107];
                if (v86)
                {
                  operator delete(v86);
                  v84 = *(char **)(a1 + 208);
                }
                goto LABEL_91;
              }
            }
          }
          else
          {
            v112 = &v108[8 * (v107 >> 2)];
          }
          do
          {
            v121 = *(_QWORD *)v83;
            v83 += 8;
            *(_QWORD *)v112 = v121;
            v112 += 8;
          }
          while (v112 != v84);
          goto LABEL_134;
        }
      }
LABEL_141:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    *(_QWORD *)(a1 + 224) = v15;
    v16 = v8 + 8;
    v17 = *(_QWORD *)v8;
    *(_QWORD *)(a1 + 200) = v8 + 8;
    if (v9 != *(char **)(a1 + 216))
    {
LABEL_106:
      *(_QWORD *)v9 = v17;
      goto LABEL_107;
    }
    v18 = *(char **)(a1 + 192);
    if (v16 > v18)
    {
      v19 = (v16 - v18) >> 3;
      if (v19 >= -1)
        v20 = v19 + 1;
      else
        v20 = v19 + 2;
      v21 = v20 >> 1;
      v22 = -v21;
      v23 = &v16[-8 * v21];
      v24 = v9 - v16;
      if (v9 != v16)
      {
        memmove(&v16[-8 * v21], v16, v9 - v16);
        v9 = *(char **)(a1 + 200);
      }
      v25 = &v9[8 * v22];
      v9 = &v23[v24];
      *(_QWORD *)(a1 + 200) = v25;
      *(_QWORD *)(a1 + 208) = &v23[v24];
      goto LABEL_106;
    }
    if (v9 == v18)
      v37 = 1;
    else
      v37 = (v9 - v18) >> 2;
    if (v37 >> 61)
      goto LABEL_141;
    v38 = (char *)operator new(8 * v37);
    v39 = &v38[8 * (v37 >> 2)];
    v41 = v9 - v16;
    v40 = v9 == v16;
    v9 = v39;
    if (!v40)
    {
      v9 = &v39[v41 & 0xFFFFFFFFFFFFFFF8];
      v42 = v41 - 8;
      if (v42 < 0x38)
      {
        v43 = &v38[8 * (v37 >> 2)];
        do
        {
LABEL_103:
          v101 = *(_QWORD *)v16;
          v16 += 8;
          *(_QWORD *)v43 = v101;
          v43 += 8;
        }
        while (v43 != v9);
        goto LABEL_104;
      }
      v94 = &v38[8 * (v37 >> 2)];
      v43 = v94;
      if ((unint64_t)(v94 - v16) < 0x20)
        goto LABEL_103;
      v95 = (v42 >> 3) + 1;
      v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
      v43 = &v39[v96];
      v16 += v96;
      v97 = (__int128 *)(v8 + 24);
      v98 = v94 + 16;
      v99 = v95 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v100 = *v97;
        *(v98 - 1) = *(v97 - 1);
        *v98 = v100;
        v97 += 2;
        v98 += 2;
        v99 -= 4;
      }
      while (v99);
      if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_103;
    }
LABEL_104:
    *(_QWORD *)(a1 + 192) = v38;
    *(_QWORD *)(a1 + 200) = v39;
    *(_QWORD *)(a1 + 208) = v9;
    *(_QWORD *)(a1 + 216) = &v38[8 * v37];
    if (v18)
    {
      operator delete(v18);
      v9 = *(char **)(a1 + 208);
    }
    goto LABEL_106;
  }
LABEL_109:
  if (v9 == v8)
  {
    v103 = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_111;
  }
  else
  {
    v102 = *(_QWORD *)(a1 + 232) + *(_QWORD *)(a1 + 224);
    v103 = (std::string *)(*(_QWORD *)&v8[8 * (v102 / 0xAA)] + 24 * (v102 % 0xAA));
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_111:
      v104 = *(_OWORD *)a2;
      v103->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      *(_OWORD *)&v103->__r_.__value_.__l.__data_ = v104;
      goto LABEL_114;
    }
  }
  std::string::__init_copy_ctor_external(v103, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
LABEL_114:
  ++*(_QWORD *)(a1 + 232);
  BBUProfiler::startStage((_QWORD *)(a1 + 80), a2);
  v105 = (const char *)__b;
  if (SHIBYTE(__b[2]) < 0)
    v105 = (const char *)__b[0];
  if (*(char *)(a2 + 23) >= 0)
    v106 = (const char *)a2;
  else
    v106 = *(const char **)a2;
  BBUConsoleFeedback::writeToStream((BBUConsoleFeedback *)a1, "%sBEGIN: %s\n", v105, v106);
  if (SHIBYTE(__b[2]) < 0)
    operator delete(__b[0]);
}

void sub_212A9C8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  operator delete(v18);
  operator delete(v17);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void BBUConsoleFeedback::handleEndPhase(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  void **v18;
  std::string *p_p;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  std::string *v23;
  void *exception;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  std::string v35;
  std::string __p;
  void *__b[3];
  std::string v38;

  if (*(_BYTE *)(a1 + 240))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUConsoleFeedback.cpp", 0x5Au, (ctu::LogMessageBuffer *)"Assertion failure(!fQuickStepInProgress)", v25, v26, v27, v34);
    goto LABEL_40;
  }
  if (*(_BYTE *)(a1 + 241))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUConsoleFeedback.cpp", 0x5Bu, (ctu::LogMessageBuffer *)"Assertion failure(!fLongStepInProgress)", v28, v29, v30, v34);
    goto LABEL_40;
  }
  v3 = *(_QWORD *)(a1 + 232);
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUConsoleFeedback.cpp", 0x5Du, (ctu::LogMessageBuffer *)"Assertion failure(fPhases.size())", v31, v32, v33, v34);
LABEL_40:
  }
  memset(&v38, 170, sizeof(v38));
  v5 = *(_QWORD *)(a1 + 224);
  v6 = v3 - 1;
  v7 = v5 + v3 - 1;
  v8 = *(_QWORD *)(a1 + 200);
  v9 = v7 / 0xAA;
  v10 = *(_QWORD *)(v8 + 8 * (v7 / 0xAA));
  v11 = v7 % 0xAA;
  v12 = (__int128 *)(v10 + 24 * v11);
  if ((*((char *)v12 + 23) & 0x80000000) == 0)
  {
    v13 = *v12;
    v38.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v13;
    v14 = *(_QWORD *)(v8 + 8 * v9) + 24 * v11;
    if ((*(char *)(v14 + 23) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
  v5 = *(_QWORD *)(a1 + 224);
  v3 = *(_QWORD *)(a1 + 232);
  v8 = *(_QWORD *)(a1 + 200);
  v6 = v3 - 1;
  v14 = *(_QWORD *)(v8 + 8 * ((v3 - 1 + v5) / 0xAAuLL)) + 24 * ((v3 - 1 + v5) % 0xAAuLL);
  if (*(char *)(v14 + 23) < 0)
  {
LABEL_6:
    operator delete(*(void **)v14);
    v8 = *(_QWORD *)(a1 + 200);
    v5 = *(_QWORD *)(a1 + 224);
    v3 = *(_QWORD *)(a1 + 232);
    v6 = v3 - 1;
  }
LABEL_7:
  v15 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 232) = v6;
  if (v15 == v8)
    v16 = 0;
  else
    v16 = 170 * ((v15 - v8) >> 3) - 1;
  if ((unint64_t)(v16 - (v5 + v3) + 1) >= 0x154)
  {
    operator delete(*(void **)(v15 - 8));
    *(_QWORD *)(a1 + 208) -= 8;
  }
  BBUProfiler::endStage((BBUProfiler *)(a1 + 80));
  memset(__b, 170, sizeof(__b));
  v17 = *(_QWORD *)(a1 + 232);
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    v18 = (void **)operator new(v20 + 1);
    __b[1] = (void *)v17;
    __b[2] = (void *)(v21 | 0x8000000000000000);
    __b[0] = v18;
  }
  else
  {
    HIBYTE(__b[2]) = *(_QWORD *)(a1 + 232);
    v18 = __b;
    if (!v17)
    {
      LOBYTE(__b[0]) = 0;
      memset(&__p, 0, sizeof(__p));
      if (a2)
        goto LABEL_16;
LABEL_23:
      p_p = &__p;
      goto LABEL_24;
    }
  }
  memset(v18, 9, v17);
  *((_BYTE *)v18 + v17) = 0;
  memset(&__p, 0, sizeof(__p));
  if (!a2)
    goto LABEL_23;
LABEL_16:
  BBUConsoleFeedback::addBracketedReturn(&v35, a2);
  __p = v35;
  p_p = &__p;
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)v35.__r_.__value_.__r.__words[0];
LABEL_24:
  v22 = (const char *)__b;
  if (SHIBYTE(__b[2]) < 0)
    v22 = (const char *)__b[0];
  v23 = &v38;
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v23 = (std::string *)v38.__r_.__value_.__r.__words[0];
  BBUConsoleFeedback::writeToStream((BBUConsoleFeedback *)a1, "%sEND%s: %s\n", v22, (const char *)p_p, (const char *)v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__b[2]) & 0x80000000) == 0)
    {
LABEL_30:
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_36:
      operator delete(v38.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(__b[2]) & 0x80000000) == 0)
  {
    goto LABEL_30;
  }
  operator delete(__b[0]);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_36;
}

void sub_212A9CCDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9CCF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9CD04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9CD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v26 - 57) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v26 - 57) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v26 - 80));
  _Unwind_Resume(exception_object);
}

void BBUConsoleFeedback::handleBeginQuickStepInternal(uint64_t a1, uint64_t a2)
{
  size_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  void *exception;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void *__b[2];
  int64_t v19;

  if (*(_BYTE *)(a1 + 240))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUConsoleFeedback.cpp", 0x70u, (ctu::LogMessageBuffer *)"Assertion failure(!fQuickStepInProgress)", v11, v12, v13, v17);
    goto LABEL_21;
  }
  if (*(_BYTE *)(a1 + 241))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUConsoleFeedback.cpp", 0x71u, (ctu::LogMessageBuffer *)"Assertion failure(!fLongStepInProgress)", v14, v15, v16, v17);
LABEL_21:
  }
  BBUProfiler::startStage((_QWORD *)(a1 + 80), a2);
  v4 = *(_QWORD *)(a1 + 232);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    v5 = (void **)operator new(v6 + 1);
    __b[1] = (void *)v4;
    v19 = v7 | 0x8000000000000000;
    __b[0] = v5;
    goto LABEL_10;
  }
  HIBYTE(v19) = *(_QWORD *)(a1 + 232);
  v5 = __b;
  if (v4)
LABEL_10:
    memset(v5, 9, v4);
  *((_BYTE *)v5 + v4) = 0;
  v8 = (const char *)__b;
  if (v19 < 0)
    v8 = (const char *)__b[0];
  if (*(char *)(a2 + 23) >= 0)
    v9 = (const char *)a2;
  else
    v9 = *(const char **)a2;
  BBUConsoleFeedback::writeToStream((BBUConsoleFeedback *)a1, "%s%s...\n", v8, v9);
  if (SHIBYTE(v19) < 0)
    operator delete(__b[0]);
  *(_BYTE *)(a1 + 240) = 1;
}

void sub_212A9CF1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9CF30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9CF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BBUConsoleFeedback::handleEndQuickStep(BBUConsoleFeedback *this, int a2)
{
  std::string *p_p;
  std::string::size_type size;
  std::string::size_type v5;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  void *exception;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  std::string __p;
  std::string v20;

  if (!*((_BYTE *)this + 240))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUConsoleFeedback.cpp", 0x7Bu, (ctu::LogMessageBuffer *)"Assertion failure(fQuickStepInProgress)", v12, v13, v14, v18);
    goto LABEL_32;
  }
  if (*((_BYTE *)this + 241))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUConsoleFeedback.cpp", 0x7Cu, (ctu::LogMessageBuffer *)"Assertion failure(!fLongStepInProgress)", v15, v16, v17, v18);
LABEL_32:
  }
  memset(&v20, 0, sizeof(v20));
  if (a2 != 14 && a2)
  {
    *((_BYTE *)&v20.__r_.__value_.__s + 23) = 6;
    qmemcpy(&v20, "FAILED", 6);
    BBUConsoleFeedback::addBracketedReturn(&__p, a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::string::append(&v20, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *((_BYTE *)&v20.__r_.__value_.__s + 23) = 2;
    LOWORD(v20.__r_.__value_.__l.__data_) = 19279;
  }
  v5 = *((_QWORD *)this + 29);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    v6 = (std::string *)operator new(v7 + 1);
    __p.__r_.__value_.__l.__size_ = v5;
    __p.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    goto LABEL_21;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = *((_QWORD *)this + 29);
  v6 = &__p;
  if (v5)
LABEL_21:
    memset(v6, 9, v5);
  v6->__r_.__value_.__s.__data_[v5] = 0;
  v9 = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v10 = &v20;
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = (std::string *)v20.__r_.__value_.__r.__words[0];
  BBUConsoleFeedback::writeToStream(this, "%s%s\n", (const char *)v9, (const char *)v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  BBUProfiler::endStage((BBUConsoleFeedback *)((char *)this + 80));
  *((_BYTE *)this + 240) = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_212A9D17C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t BBUConsoleFeedback::handleBeginLongStep(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8;
  size_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  void *exception;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void *__b[2];
  int64_t v25;

  if (*(_BYTE *)(a1 + 240))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUConsoleFeedback.cpp", 0x93u, (ctu::LogMessageBuffer *)"Assertion failure(!fQuickStepInProgress)", v17, v18, v19, v23);
    goto LABEL_24;
  }
  if (*(_BYTE *)(a1 + 241))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUConsoleFeedback.cpp", 0x94u, (ctu::LogMessageBuffer *)"Assertion failure(!fLongStepInProgress)", v20, v21, v22, v23);
LABEL_24:
  }
  if (*(_DWORD *)(a1 + 184))
    v8 = 10;
  else
    v8 = 32;
  BBUProfiler::startStage((_QWORD *)(a1 + 80), a2);
  v9 = *(_QWORD *)(a1 + 232);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v9 >= 0x17)
  {
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v11 = v9 | 7;
    v12 = v11 + 1;
    v10 = (void **)operator new(v11 + 1);
    __b[1] = (void *)v9;
    v25 = v12 | 0x8000000000000000;
    __b[0] = v10;
    goto LABEL_13;
  }
  HIBYTE(v25) = *(_QWORD *)(a1 + 232);
  v10 = __b;
  if (v9)
LABEL_13:
    memset(v10, 9, v9);
  *((_BYTE *)v10 + v9) = 0;
  v13 = (const char *)__b;
  if (v25 < 0)
    v13 = (const char *)__b[0];
  if (*(char *)(a2 + 23) >= 0)
    v14 = (const char *)a2;
  else
    v14 = *(const char **)a2;
  BBUConsoleFeedback::writeToStream((BBUConsoleFeedback *)a1, "%s%s...%c", v13, v14, v8);
  if (SHIBYTE(v25) < 0)
    operator delete(__b[0]);
  *(_BYTE *)(a1 + 241) = 1;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 248) = a3;
  *(_QWORD *)(a1 + 256) = a4;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

void sub_212A9D3DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9D3F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9D404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BBUConsoleFeedback::handleLongStepProgress(BBUConsoleFeedback *this, unint64_t a2)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  __int128 *p_b;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void **v15;
  void *exception;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void *v30[2];
  uint64_t v31;
  void *__p[2];
  uint64_t v33;
  __int128 __b;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 240))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUConsoleFeedback.cpp", 0xB2u, (ctu::LogMessageBuffer *)"Assertion failure(!fQuickStepInProgress)", v17, v18, v19, v29);
    goto LABEL_31;
  }
  if (!*((_BYTE *)this + 241))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUConsoleFeedback.cpp", 0xB3u, (ctu::LogMessageBuffer *)"Assertion failure(fLongStepInProgress)", v20, v21, v22, v29);
    goto LABEL_31;
  }
  v3 = a2;
  v4 = *((_QWORD *)this + 31);
  v5 = a2 - v4;
  if (a2 < v4)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUConsoleFeedback.cpp", 0xB5u, (ctu::LogMessageBuffer *)"Assertion failure(current >= fLongStepStart)", v23, v24, v25, v29);
    goto LABEL_31;
  }
  v6 = *((_QWORD *)this + 32);
  if (v6 < a2)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUConsoleFeedback.cpp", 0xB6u, (ctu::LogMessageBuffer *)"Assertion failure(current <= fLongStepEnd)", v26, v27, v28, v29);
LABEL_31:
  }
  __p[0] = 0;
  __p[1] = 0;
  v33 = 0;
  v30[0] = 0;
  v30[1] = 0;
  v31 = 0;
  if (*((_DWORD *)this + 46))
  {
    HIBYTE(v33) = 1;
    LOWORD(__p[0]) = 9;
    HIBYTE(v31) = 1;
    LOBYTE(v30[0]) = 10;
  }
  else
  {
    v7 = *((_QWORD *)this + 34);
    if (v7)
    {
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v7 >= 0x17)
      {
        v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17)
          v9 = v7 | 7;
        v10 = v9 + 1;
        p_b = (__int128 *)operator new(v9 + 1);
        *((_QWORD *)&__b + 1) = v7;
        *(_QWORD *)&v35 = v10 | 0x8000000000000000;
        *(_QWORD *)&__b = p_b;
      }
      else
      {
        BYTE7(v35) = *((_QWORD *)this + 34);
        p_b = &__b;
      }
      memset(p_b, 8, v7);
      *((_BYTE *)p_b + v7) = 0;
      *(_OWORD *)__p = __b;
      v33 = v35;
    }
  }
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40 = v11;
  v41 = v11;
  v39 = v11;
  v37 = v11;
  v38 = v11;
  v35 = v11;
  v36 = v11;
  __b = v11;
  v12 = 100 * v5 / (v6 - v4);
  if (v12 == *((_QWORD *)this + 33))
    goto LABEL_22;
  *((_QWORD *)this + 33) = v12;
  v13 = snprintf((char *)&__b, 0x80uLL, "0x%x of 0x%x (%u percent)", v3, v6, 100 * v5 / (v6 - v4));
  v14 = v13 >= 0x80 ? 128 : v13;
  *((_QWORD *)this + 34) = v14;
  v15 = __p;
  if (v33 < 0)
    v15 = (void **)__p[0];
  BBUConsoleFeedback::writeToStream(this, "%s%s%s", (const char *)v15, (const char *)&__b, (const char *)v30);
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v33) & 0x80000000) == 0)
      return;
    goto LABEL_23;
  }
  operator delete(v30[0]);
  if (SHIBYTE(v33) < 0)
LABEL_23:
    operator delete(__p[0]);
}

void sub_212A9D708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a23 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_212A9D754(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9D768(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9D77C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9D790(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUConsoleFeedback::handleEndLongStep(BBUConsoleFeedback *a1, int a2)
{
  void *exception;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (*((_BYTE *)a1 + 240))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUConsoleFeedback.cpp", 0xE1u, (ctu::LogMessageBuffer *)"Assertion failure(!fQuickStepInProgress)", v5, v6, v7, v11);
    goto LABEL_8;
  }
  if (!*((_BYTE *)a1 + 241))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUConsoleFeedback.cpp", 0xE2u, (ctu::LogMessageBuffer *)"Assertion failure(fLongStepInProgress)", v8, v9, v10, v11);
LABEL_8:
  }
  if (!a2)
    (*(void (**)(BBUConsoleFeedback *, _QWORD))(*(_QWORD *)a1 + 40))(a1, *((_QWORD *)a1 + 32));
  BBUProfiler::endStage((BBUConsoleFeedback *)((char *)a1 + 80));
  *((_BYTE *)a1 + 241) = 0;
  return BBUConsoleFeedback::writeToStream(a1, "\n");
}

void sub_212A9D86C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212A9D880(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void BBUConsoleFeedback::handleCommentInternal(BBUConsoleFeedback *this, uint64_t a2)
{
  size_t v2;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  void *__b[2];
  int64_t v11;

  v2 = *((_QWORD *)this + 29);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v2 >= 0x17)
  {
    v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v6 = v2 | 7;
    v7 = v6 + 1;
    v5 = (void **)operator new(v6 + 1);
    __b[1] = (void *)v2;
    v11 = v7 | 0x8000000000000000;
    __b[0] = v5;
    goto LABEL_8;
  }
  HIBYTE(v11) = *((_QWORD *)this + 29);
  v5 = __b;
  if (v2)
LABEL_8:
    memset(v5, 9, v2);
  *((_BYTE *)v5 + v2) = 0;
  v8 = (const char *)__b;
  if (v11 < 0)
    v8 = (const char *)__b[0];
  if (*(char *)(a2 + 23) >= 0)
    v9 = (const char *)a2;
  else
    v9 = *(const char **)a2;
  BBUConsoleFeedback::writeToStream(this, "%s%s\n", v8, v9);
  if (SHIBYTE(v11) < 0)
    operator delete(__b[0]);
}

void sub_212A9D9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BBUConsoleFeedback::handleLongStepCommentInternal(BBUConsoleFeedback *a1, uint64_t a2)
{
  const char *v2;

  if (*(char *)(a2 + 23) >= 0)
    v2 = (const char *)a2;
  else
    v2 = *(const char **)a2;
  return BBUConsoleFeedback::writeToStream(a1, "\n%s\n", v2);
}

const char *BBUFeedback::getDebugName(BBUFeedback *this)
{
  return "BBUFeedback";
}

uint64_t std::deque<std::string>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v11 = 0;
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = &v2[v4 / 0xAA];
  v6 = (unint64_t)*v5;
  v7 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
  v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v4) % 0xAA);
  if (v7 == v8)
    goto LABEL_11;
  do
  {
    if (*(char *)(v7 + 23) < 0)
    {
      v9 = *(void **)v7;
      v7 += 24;
      operator delete(v9);
      v6 = (unint64_t)*v5;
      if (v7 - (_QWORD)*v5 != 4080)
        continue;
    }
    else
    {
      v7 += 24;
      if (v7 - v6 != 4080)
        continue;
    }
    v10 = (unint64_t)v5[1];
    ++v5;
    v6 = v10;
    v7 = v10;
  }
  while (v7 != v8);
  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
LABEL_11:
  *(_QWORD *)(a1 + 40) = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
LABEL_13:
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
LABEL_18:
    *(_QWORD *)(a1 + 32) = v13;
  }
  else if (v12 == 2)
  {
    v13 = 170;
    goto LABEL_18;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void GetBasebandTatsuTagToFileNameMap(uint64_t *a1@<X8>)
{
  uint64_t *v2;
  const __CFString *v3;
  void *v4[2];
  char v5;
  const __CFString *v6;
  void *v7[2];
  char v8;
  const __CFString *v9;
  void *v10[2];
  char v11;
  const __CFString *v12;
  void *v13[2];
  char v14;
  const __CFString *v15;
  void *v16[2];
  char v17;
  const __CFString *v18;
  void *v19[2];
  char v20;
  const __CFString *v21;
  void *v22[2];
  char v23;
  const __CFString *v24;
  void *v25[2];
  char v26;
  const __CFString *v27;
  void *v28[2];
  char v29;
  const __CFString *v30;
  void *v31[2];
  char v32;
  const __CFString *v33;
  void *v34[2];
  char v35;
  const __CFString *v36;
  void *__p[2];
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = CFSTR("Cellular1,LLB");
  v5 = 4;
  strcpy((char *)v4, "illb");
  v6 = CFSTR("Cellular1,iBootData");
  v8 = 4;
  strcpy((char *)v7, "ibdt");
  v9 = CFSTR("Cellular1,iBSS");
  v11 = 4;
  strcpy((char *)v10, "ibss");
  v12 = CFSTR("Cellular1,PMUFW");
  v14 = 4;
  strcpy((char *)v13, "apmu");
  v15 = CFSTR("Cellular1,PMUFW2");
  v17 = 4;
  strcpy((char *)v16, "pmfw");
  v18 = CFSTR("Cellular1,RTKitOS");
  v20 = 4;
  strcpy((char *)v19, "rkos");
  v21 = CFSTR("Cellular1,CdpAscDl");
  v23 = 4;
  strcpy((char *)v22, "cdpd");
  v24 = CFSTR("Cellular1,CdpAscUl");
  v26 = 4;
  strcpy((char *)v25, "cdpu");
  v27 = CFSTR("Cellular1,CdpHost");
  v29 = 4;
  strcpy((char *)v28, "cdph");
  v30 = CFSTR("Cellular1,L1CL1S");
  v32 = 4;
  strcpy((char *)v31, "l1cs");
  v33 = CFSTR("Cellular1,ProvisioningFirmware");
  v35 = 4;
  a1[1] = 0;
  v2 = a1 + 1;
  strcpy((char *)v34, "prfw");
  v36 = CFSTR("Cellular1,Recipe");
  v38 = 4;
  strcpy((char *)__p, "rcpi");
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__emplace_hint_unique_key_args<__CFString const*,std::pair<__CFString const* const,std::string> const&>(a1, a1 + 1, (unint64_t)CFSTR("Cellular1,LLB"), (uint64_t)&v3);
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__emplace_hint_unique_key_args<__CFString const*,std::pair<__CFString const* const,std::string> const&>(a1, v2, (unint64_t)v6, (uint64_t)&v6);
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__emplace_hint_unique_key_args<__CFString const*,std::pair<__CFString const* const,std::string> const&>(a1, v2, (unint64_t)v9, (uint64_t)&v9);
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__emplace_hint_unique_key_args<__CFString const*,std::pair<__CFString const* const,std::string> const&>(a1, v2, (unint64_t)v12, (uint64_t)&v12);
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__emplace_hint_unique_key_args<__CFString const*,std::pair<__CFString const* const,std::string> const&>(a1, v2, (unint64_t)v15, (uint64_t)&v15);
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__emplace_hint_unique_key_args<__CFString const*,std::pair<__CFString const* const,std::string> const&>(a1, v2, (unint64_t)v18, (uint64_t)&v18);
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__emplace_hint_unique_key_args<__CFString const*,std::pair<__CFString const* const,std::string> const&>(a1, v2, (unint64_t)v21, (uint64_t)&v21);
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__emplace_hint_unique_key_args<__CFString const*,std::pair<__CFString const* const,std::string> const&>(a1, v2, (unint64_t)v24, (uint64_t)&v24);
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__emplace_hint_unique_key_args<__CFString const*,std::pair<__CFString const* const,std::string> const&>(a1, v2, (unint64_t)v27, (uint64_t)&v27);
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__emplace_hint_unique_key_args<__CFString const*,std::pair<__CFString const* const,std::string> const&>(a1, v2, (unint64_t)v30, (uint64_t)&v30);
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__emplace_hint_unique_key_args<__CFString const*,std::pair<__CFString const* const,std::string> const&>(a1, v2, (unint64_t)v33, (uint64_t)&v33);
  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__emplace_hint_unique_key_args<__CFString const*,std::pair<__CFString const* const,std::string> const&>(a1, v2, (unint64_t)v36, (uint64_t)&v36);
  if (v38 < 0)
  {
    operator delete(__p[0]);
    if ((v35 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v32 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v35 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v34[0]);
  if ((v32 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v29 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v31[0]);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v26 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v28[0]);
  if ((v26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v23 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v25[0]);
  if ((v23 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v20 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v22[0]);
  if ((v20 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v17 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v19[0]);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v14 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v16[0]);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v11 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v13[0]);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v10[0]);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000000) == 0)
      return;
LABEL_25:
    operator delete(v4[0]);
    return;
  }
LABEL_24:
  operator delete(v7[0]);
  if (v5 < 0)
    goto LABEL_25;
}

void sub_212A9DFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *__p;
  char a78;
  uint64_t v78;

  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy(v78, *(char **)(v78 + 8));
  if (a78 < 0)
  {
    operator delete(__p);
    if ((a76 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a74 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((a76 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a72 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a65 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a67);
  if ((a65 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a58 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a60);
  if ((a58 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a51 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a53);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a44 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a46);
  if ((a44 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a37 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a39);
  if ((a37 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a30 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a32);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a23 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a25);
  if ((a23 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a16 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a18);
  if ((a16 & 0x80000000) == 0)
LABEL_13:
    _Unwind_Resume(a1);
LABEL_25:
  operator delete(a11);
  _Unwind_Resume(a1);
}

void GetBasebandNVM4ccToFileNameMap(void *a1@<X8>)
{
  void *v2[2];
  char v3;
  void *v4;
  char v5;
  void *v6;
  char v7;
  void *__p;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  memset(a1, 170, 24);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*&,char const(&)[11],0>((uint64_t)v2, (const char **)kBasebandNVMStaticFile, "static.nvm");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*&,char const(&)[12],0>((uint64_t)&v6, (const char **)kBasebandNVMDynamicFile, "dynamic.nvm");
  std::map<std::string,std::string>::map[abi:ne180100]((_QWORD **)a1, (const void **)v2, 2);
  if (v9 < 0)
  {
    operator delete(__p);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v6);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v3 & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(v2[0]);
    return;
  }
LABEL_8:
  operator delete(v4);
  if (v3 < 0)
    goto LABEL_9;
}

void sub_212A9E200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::pair<std::string const,std::string>::~pair(v2);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212A9E21C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void GetBasebandFDR4ccToFileNameMap(void *a1@<X8>)
{
  void *v2[2];
  char v3;
  void *v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  void *__p;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  memset(a1, 170, 24);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*&,char const(&)[10],0>((uint64_t)v2, (const char **)kBasebandCalibrationFile, "calib.nvm");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*&,char const(&)[10],0>((uint64_t)&v6, (const char **)kBasebandFATPCalibrationFile, "bbpac.der");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*&,char const(&)[9],0>((uint64_t)&v10, (const char **)kBasebandProvisioningFile, "prov.nvm");
  std::map<std::string,std::string>::map[abi:ne180100]((_QWORD **)a1, (const void **)v2, 3);
  if (v13 < 0)
  {
    operator delete(__p);
    if ((v11 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v10);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v8);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v6);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v3 & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(v2[0]);
    return;
  }
LABEL_12:
  operator delete(v4);
  if (v3 < 0)
    goto LABEL_13;
}

void sub_212A9E400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::pair<std::string const,std::string>::~pair(v2);
  std::pair<std::string const,std::string>::~pair(v3);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212A9E428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  char *v10;

  do
  {
    v10 -= 48;
    std::pair<std::string const,std::string>::~pair((uint64_t)v10);
  }
  while (v10 != &a10);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*&,char const(&)[11],0>(uint64_t a1, const char **a2, const char *a3)
{
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, v5, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = (void *)(a1 + 24);
  v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    v15 = v14 + 1;
    v11 = operator new(v14 + 1);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v15 | 0x8000000000000000;
    *(_QWORD *)(a1 + 24) = v11;
  }
  else
  {
    *(_BYTE *)(a1 + 47) = v12;
    if (!v12)
      goto LABEL_17;
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((_BYTE *)v11 + v13) = 0;
  return a1;
}

void sub_212A9E588(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*&,char const(&)[12],0>(uint64_t a1, const char **a2, const char *a3)
{
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, v5, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = (void *)(a1 + 24);
  v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    v15 = v14 + 1;
    v11 = operator new(v14 + 1);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v15 | 0x8000000000000000;
    *(_QWORD *)(a1 + 24) = v11;
  }
  else
  {
    *(_BYTE *)(a1 + 47) = v12;
    if (!v12)
      goto LABEL_17;
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((_BYTE *)v11 + v13) = 0;
  return a1;
}

void sub_212A9E6E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*&,char const(&)[10],0>(uint64_t a1, const char **a2, const char *a3)
{
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, v5, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = (void *)(a1 + 24);
  v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    v15 = v14 + 1;
    v11 = operator new(v14 + 1);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v15 | 0x8000000000000000;
    *(_QWORD *)(a1 + 24) = v11;
  }
  else
  {
    *(_BYTE *)(a1 + 47) = v12;
    if (!v12)
      goto LABEL_17;
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((_BYTE *)v11 + v13) = 0;
  return a1;
}

void sub_212A9E838(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*&,char const(&)[9],0>(uint64_t a1, const char **a2, const char *a3)
{
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, v5, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = (void *)(a1 + 24);
  v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    v15 = v14 + 1;
    v11 = operator new(v14 + 1);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v15 | 0x8000000000000000;
    *(_QWORD *)(a1 + 24) = v11;
  }
  else
  {
    *(_BYTE *)(a1 + 47) = v12;
    if (!v12)
      goto LABEL_17;
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((_BYTE *)v11 + v13) = 0;
  return a1;
}

void sub_212A9E990(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::__emplace_hint_unique_key_args<__CFString const*,std::pair<__CFString const* const,std::string> const&>(uint64_t *result, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  std::string *v23;
  unint64_t v24;
  uint64_t v25;

  v5 = (uint64_t **)a2;
  v6 = result;
  v7 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (v8 = a2[4], v8 > a3))
  {
    v9 = *a2;
    if ((uint64_t *)*result == a2)
    {
      v11 = a2;
LABEL_16:
      if (v9)
        v17 = v11;
      else
        v17 = a2;
      if (v9)
        v13 = (uint64_t **)(v11 + 1);
      else
        v13 = (uint64_t **)a2;
      if (*v13)
        return result;
      v5 = (uint64_t **)v17;
LABEL_37:
      v22 = (uint64_t *)operator new(0x40uLL);
      v22[4] = *(_QWORD *)a4;
      v23 = (std::string *)(v22 + 5);
      if (*(char *)(a4 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
      }
      else
      {
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)(a4 + 8);
        v22[7] = *(_QWORD *)(a4 + 24);
      }
      *v22 = 0;
      v22[1] = 0;
      v22[2] = (uint64_t)v5;
      *v13 = v22;
      v25 = *(_QWORD *)*v6;
      if (v25)
      {
        *v6 = v25;
        v22 = *v13;
      }
      result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[1], v22);
      ++v6[2];
      return result;
    }
    if (v9)
    {
      v10 = (uint64_t *)*a2;
      do
      {
        v11 = v10;
        v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      v15 = a2;
      do
      {
        v11 = (uint64_t *)v15[2];
        v16 = *v11 == (_QWORD)v15;
        v15 = v11;
      }
      while (v16);
    }
    if (v11[4] < a3)
      goto LABEL_16;
    v18 = *v7;
    v13 = (uint64_t **)(result + 1);
    v5 = (uint64_t **)(result + 1);
    if (!*v7)
      goto LABEL_37;
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t **)v18;
        v19 = v18[4];
        if (v19 <= a3)
          break;
        v18 = (uint64_t *)*v18;
        v13 = v5;
        if (!*v5)
          goto LABEL_37;
      }
      if (v19 >= a3)
        break;
      v18 = (uint64_t *)v18[1];
      if (!v18)
        goto LABEL_30;
    }
  }
  else
  {
    if (v8 >= a3)
      return result;
    v13 = (uint64_t **)(a2 + 1);
    v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        v13 = (uint64_t **)v12;
        v12 = (uint64_t *)*v12;
        v5 = v13;
        v14 = v13;
      }
      while (v12);
    }
    else
    {
      v14 = (uint64_t **)a2;
      do
      {
        v20 = (uint64_t *)v14;
        v14 = (uint64_t **)v14[2];
      }
      while (*v14 != v20);
    }
    if (v14 == v7)
      goto LABEL_37;
    if ((unint64_t)v14[4] > a3)
      goto LABEL_37;
    v21 = *v7;
    v13 = (uint64_t **)(result + 1);
    v5 = (uint64_t **)(result + 1);
    if (!*v7)
      goto LABEL_37;
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t **)v21;
        v24 = v21[4];
        if (v24 <= a3)
          break;
        v21 = (uint64_t *)*v21;
        v13 = v5;
        if (!*v5)
          goto LABEL_37;
      }
      if (v24 >= a3)
        break;
      v21 = (uint64_t *)v21[1];
      if (!v21)
      {
LABEL_30:
        v13 = v5 + 1;
        goto LABEL_37;
      }
    }
  }
  return result;
}

void sub_212A9EBCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD **std::map<std::string,std::string>::map[abi:ne180100](_QWORD **a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD v12[3];
  uint64_t *v13;
  uint64_t *v14;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      v13 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      v14 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, v4, &v14, &v13, a2);
      if (!*v7)
      {
        memset(v12, 170, sizeof(v12));
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, (uint64_t)a2, v12);
        v8 = v14;
        v9 = (uint64_t *)v12[0];
        *(_QWORD *)v12[0] = 0;
        v9[1] = 0;
        v9[2] = (uint64_t)v8;
        *v7 = (uint64_t)v9;
        v10 = (_QWORD *)**a1;
        if (v10)
        {
          *a1 = v10;
          v9 = (uint64_t *)*v7;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v9);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
      }
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_212A9ECCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t **v8;
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  BOOL v23;
  int v24;
  const void *v25;
  size_t v26;
  int v27;
  const void *v28;
  size_t v29;
  size_t v30;
  int v31;
  uint64_t *v32;
  uint64_t **v33;
  _QWORD *v34;
  const void *v35;
  const void *v36;
  int v37;
  const void *v38;
  size_t v39;
  size_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  int v46;
  uint64_t *v47;
  size_t v48;
  size_t v49;
  int v50;
  uint64_t *v51;
  uint64_t **v52;
  uint64_t **v53;
  _QWORD *v54;
  const void *v55;
  const void *v56;
  int v57;
  const void *v58;
  size_t v59;
  size_t v60;
  int v61;
  int v62;

  v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_23;
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *((char *)a2 + 55);
  if (v13 >= 0)
    v14 = a2 + 4;
  else
    v14 = (const void *)a2[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a2 + 55);
  else
    v15 = a2[5];
  if (v15 >= v12)
    v16 = v12;
  else
    v16 = v15;
  v17 = memcmp(v11, v14, v16);
  if (!v17)
  {
    if (v12 >= v15)
      goto LABEL_19;
LABEL_23:
    v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v21 = a2;
    }
    else
    {
      if (v19)
      {
        v20 = (uint64_t *)*a2;
        do
        {
          v21 = v20;
          v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        v22 = a2;
        do
        {
          v21 = (uint64_t *)v22[2];
          v23 = *v21 == (_QWORD)v22;
          v22 = v21;
        }
        while (v23);
      }
      v24 = *((char *)v21 + 55);
      if (v24 >= 0)
        v25 = v21 + 4;
      else
        v25 = (const void *)v21[4];
      if (v24 >= 0)
        v26 = *((unsigned __int8 *)v21 + 55);
      else
        v26 = v21[5];
      v27 = *((char *)a5 + 23);
      if (v27 >= 0)
        v28 = a5;
      else
        v28 = *a5;
      if (v27 >= 0)
        v29 = *((unsigned __int8 *)a5 + 23);
      else
        v29 = (size_t)a5[1];
      if (v29 >= v26)
        v30 = v26;
      else
        v30 = v29;
      v31 = memcmp(v25, v28, v30);
      if (v31)
      {
        if ((v31 & 0x80000000) == 0)
          goto LABEL_48;
      }
      else if (v26 >= v29)
      {
LABEL_48:
        v32 = *v8;
        if (!*v8)
        {
          v33 = v8;
LABEL_69:
          *a3 = (uint64_t *)v33;
          return (uint64_t *)v8;
        }
        while (1)
        {
          v33 = (uint64_t **)v32;
          v36 = (const void *)v32[4];
          v34 = v32 + 4;
          v35 = v36;
          v37 = *((char *)v34 + 23);
          if (v37 >= 0)
            v38 = v34;
          else
            v38 = v35;
          if (v37 >= 0)
            v39 = *((unsigned __int8 *)v34 + 23);
          else
            v39 = v34[1];
          if (v39 >= v29)
            v40 = v29;
          else
            v40 = v39;
          v41 = memcmp(v28, v38, v40);
          if (v41)
          {
            if (v41 < 0)
              goto LABEL_50;
LABEL_64:
            v42 = memcmp(v38, v28, v40);
            if (v42)
            {
              if ((v42 & 0x80000000) == 0)
                goto LABEL_69;
            }
            else if (v39 >= v29)
            {
              goto LABEL_69;
            }
            v8 = v33 + 1;
            v32 = v33[1];
            if (!v32)
              goto LABEL_69;
          }
          else
          {
            if (v29 >= v39)
              goto LABEL_64;
LABEL_50:
            v32 = *v33;
            v8 = v33;
            if (!*v33)
              goto LABEL_69;
          }
        }
      }
    }
    if (v19)
    {
      *a3 = v21;
      return v21 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v17 < 0)
    goto LABEL_23;
LABEL_19:
  v18 = memcmp(v14, v11, v16);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
    {
LABEL_21:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
  }
  else if (v15 >= v12)
  {
    goto LABEL_21;
  }
  v43 = a2[1];
  if (v43)
  {
    v44 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v44;
      v44 = (uint64_t *)*v44;
    }
    while (v44);
  }
  else
  {
    v45 = a2;
    do
    {
      a4 = (uint64_t **)v45[2];
      v23 = *a4 == v45;
      v45 = (uint64_t *)a4;
    }
    while (!v23);
  }
  if (a4 != v8)
  {
    v46 = *((char *)a4 + 55);
    if (v46 >= 0)
      v47 = (uint64_t *)(a4 + 4);
    else
      v47 = a4[4];
    if (v46 >= 0)
      v48 = *((unsigned __int8 *)a4 + 55);
    else
      v48 = (size_t)a4[5];
    if (v48 >= v12)
      v49 = v12;
    else
      v49 = v48;
    v50 = memcmp(v11, v47, v49);
    if (v50)
    {
      if ((v50 & 0x80000000) == 0)
      {
LABEL_95:
        v51 = *v8;
        if (*v8)
        {
          v52 = a3;
          while (1)
          {
            v53 = (uint64_t **)v51;
            v56 = (const void *)v51[4];
            v54 = v51 + 4;
            v55 = v56;
            v57 = *((char *)v54 + 23);
            if (v57 >= 0)
              v58 = v54;
            else
              v58 = v55;
            if (v57 >= 0)
              v59 = *((unsigned __int8 *)v54 + 23);
            else
              v59 = v54[1];
            if (v59 >= v12)
              v60 = v12;
            else
              v60 = v59;
            v61 = memcmp(v11, v58, v60);
            if (v61)
            {
              if (v61 < 0)
                goto LABEL_97;
LABEL_111:
              v62 = memcmp(v58, v11, v60);
              if (v62)
              {
                if ((v62 & 0x80000000) == 0)
                  goto LABEL_123;
              }
              else if (v59 >= v12)
              {
                goto LABEL_123;
              }
              v8 = v53 + 1;
              v51 = v53[1];
              if (!v51)
                goto LABEL_123;
            }
            else
            {
              if (v12 >= v59)
                goto LABEL_111;
LABEL_97:
              v51 = *v53;
              v8 = v53;
              if (!*v53)
                goto LABEL_123;
            }
          }
        }
        v53 = v8;
        v52 = a3;
LABEL_123:
        *v52 = (uint64_t *)v53;
        return (uint64_t *)v8;
      }
    }
    else if (v12 >= v48)
    {
      goto LABEL_95;
    }
  }
  if (v43)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *v7;
  std::string *v8;

  v5 = a1 + 8;
  memset(a3, 170, 24);
  v6 = (char *)operator new(0x50uLL);
  v7 = v6;
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 32), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  v8 = (std::string *)(v7 + 56);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 24);
    *((_QWORD *)v7 + 9) = *(_QWORD *)(a2 + 40);
  }
  *((_BYTE *)a3 + 16) = 1;
}

void sub_212A9F14C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 55) < 0)
  {
    operator delete(*v3);
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](v1);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(char *)(v2 + 79) < 0)
      {
        operator delete(*(void **)(v2 + 56));
        if ((*(char *)(v2 + 55) & 0x80000000) == 0)
          goto LABEL_5;
      }
      else if ((*(char *)(v2 + 55) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 32));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t __cxx_global_var_init_2()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_212A4D000);
  }
  return result;
}

uint64_t eUICC::Perso::Perform(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;

  pthread_mutex_lock(&ctu::Singleton<eUICC::Perso::PersoImplementation,eUICC::Perso::PersoImplementation,ctu::PthreadMutexGuardPolicy<eUICC::Perso::PersoImplementation>>::sInstance);
  if (qword_253D31E18)
    goto LABEL_2;
  v7 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
  v7->__on_zero_shared_weak = 0;
  v7[1].~__shared_weak_count = 0;
  v7[1].~__shared_weak_count_0 = 0;
  v7->~__shared_weak_count_0 = 0;
  v7->__on_zero_shared = 0;
  v7->~__shared_weak_count = 0;
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_24CE80008;
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = v7;
  v8 = (std::__shared_weak_count *)off_253D31E20;
  qword_253D31E18 = (uint64_t)v7;
  off_253D31E20 = v6;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
LABEL_2:
    v7 = (std::__shared_weak_count_vtbl *)qword_253D31E18;
    v6 = (std::__shared_weak_count *)off_253D31E20;
    v21 = (std::__shared_weak_count *)off_253D31E20;
    if (!off_253D31E20)
      goto LABEL_12;
    goto LABEL_10;
  }
  v21 = v6;
LABEL_10:
  v11 = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<eUICC::Perso::PersoImplementation,eUICC::Perso::PersoImplementation,ctu::PthreadMutexGuardPolicy<eUICC::Perso::PersoImplementation>>::sInstance);
  v17 = eUICC::Perso::PersoImplementation::Perform((uint64_t)v7, a1, a2, a3, v13, v14, v15, v16);
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return v17;
}

void sub_212A9F428(_Unwind_Exception *a1)
{
  eUICC::Perso::PersoImplementation *v1;
  void *v3;

  eUICC::Perso::PersoImplementation::~PersoImplementation(v1);
  operator delete(v3);
  pthread_mutex_unlock(&ctu::Singleton<eUICC::Perso::PersoImplementation,eUICC::Perso::PersoImplementation,ctu::PthreadMutexGuardPolicy<eUICC::Perso::PersoImplementation>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_212A9F458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t eUICC::Perso::PersoImplementation::Perform(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  dispatch_queue_t v12;
  NSObject *v13;
  uint64_t v14;
  const void **v15;
  const void *v16;
  uint64_t (*v17)(uint64_t);
  __int128 v18;
  capabilities::updater *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BYTE *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  const void *v49;
  NSObject *v50;
  const void *v52;
  size_t v53;
  char *v54;
  void *v55;
  std::string::size_type v56;
  const void *v57;
  const void *v58;
  size_t v59;
  char *v60;
  std::string *v61;
  std::string *v62;
  void *v63;
  __int128 v64;
  capabilities::updater *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const __CFString *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const void *v88;
  size_t v89;
  std::string::size_type v90;
  std::string *v91;
  std::string *v92;
  void *v93;
  size_t v94;
  char *v95;
  std::string *v96;
  std::string *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  std::string::size_type v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(uint64_t);
  const __CFString *Value;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const __CFString *v116;
  CFTypeID v117;
  capabilities::updater *v118;
  int v119;
  const void *v120;
  uint64_t (*v121)(uint64_t);
  ctu::cf *v122;
  const void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t (*v127)(uint64_t);
  __int128 v128;
  std::string::size_type v129;
  const void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  std::string *v134;
  const void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  std::string *v139;
  uint64_t v140;
  uint64_t i;
  void *v142;
  char v143;
  char v144;
  char v145;
  __int128 v146;
  void *v147[2];
  std::string::size_type v148;
  CFTypeRef v149;
  CFTypeRef v150;
  void *v151;
  __int128 v152;
  void *v153;
  void *v154;
  char *v155;
  std::string v156;
  CFTypeRef v157;
  void *v158;
  __int128 v159;
  CFTypeRef v160;
  void *__p;
  _BYTE *v162;
  char *v163;
  CFTypeRef v164;
  __int128 v165;
  CFTypeRef v166;
  std::string __src[12];
  void *values;
  __int128 v169;
  const __CFString *v170;
  std::string cf[12];
  uint64_t v172;

  v172 = *MEMORY[0x24BDAC8D0];
  v147[0] = 0;
  v147[1] = 0;
  v148 = 0;
  if (!*a4)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v26 = "vinylValve";
    goto LABEL_32;
  }
  *(_QWORD *)(a1 + 24) = a2;
  v12 = dispatch_queue_create("PersoImpl", 0);
  v13 = *(NSObject **)a1;
  *(_QWORD *)a1 = v12;
  if (v13)
    dispatch_release(v13);
  v14 = *(unsigned __int8 *)(a2 + 39);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a2 + 24);
  if (!v14)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v26 = "!performOptions.alderHostname.empty()";
    goto LABEL_32;
  }
  ReverseProxyGetSettings(a2 + 16, (uint64_t *)cf);
  v15 = (const void **)(a1 + 8);
  if ((std::string *)(a1 + 8) != cf)
  {
    v16 = *v15;
    *v15 = (const void *)cf[0].__r_.__value_.__r.__words[0];
    cf[0].__r_.__value_.__r.__words[0] = 0;
    if (!v16)
      goto LABEL_12;
    CFRelease(v16);
  }
  if (cf[0].__r_.__value_.__r.__words[0])
    CFRelease(cf[0].__r_.__value_.__l.__data_);
LABEL_12:
  if (*v15)
    v17 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  else
    v17 = 0;
  if (!v17)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v26 = "this->reverseProxySettings";
LABEL_32:
    _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", a6, a7, a8, (char)v26);
    v30 = 10;
    goto LABEL_73;
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 24) + 40))
    goto LABEL_50;
  if (BBUpdaterCommon::getECID(void)::sOnce != -1)
    dispatch_once(&BBUpdaterCommon::getECID(void)::sOnce, &__block_literal_global_15);
  v158 = (void *)BBUpdaterCommon::getECID(void)::ecid;
  v169 = 0uLL;
  values = 0;
  __p = 0;
  v162 = 0;
  v163 = 0;
  *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&cf[11].__r_.__value_.__s.__data_[2] = v18;
  *(_OWORD *)&cf[10].__r_.__value_.__l.__data_ = v18;
  *(_OWORD *)&cf[10].__r_.__value_.__r.__words[2] = v18;
  *(_OWORD *)&cf[8].__r_.__value_.__r.__words[2] = v18;
  *(_OWORD *)&cf[9].__r_.__value_.__r.__words[1] = v18;
  *(_OWORD *)&cf[7].__r_.__value_.__r.__words[1] = v18;
  *(_OWORD *)&cf[8].__r_.__value_.__l.__data_ = v18;
  *(_OWORD *)&cf[6].__r_.__value_.__l.__data_ = v18;
  *(_OWORD *)&cf[6].__r_.__value_.__r.__words[2] = v18;
  *(_OWORD *)&cf[4].__r_.__value_.__r.__words[2] = v18;
  *(_OWORD *)&cf[5].__r_.__value_.__r.__words[1] = v18;
  *(_OWORD *)&cf[3].__r_.__value_.__r.__words[1] = v18;
  *(_OWORD *)&cf[4].__r_.__value_.__l.__data_ = v18;
  *(_OWORD *)&cf[2].__r_.__value_.__l.__data_ = v18;
  *(_OWORD *)&cf[2].__r_.__value_.__r.__words[2] = v18;
  *(_OWORD *)&cf[0].__r_.__value_.__r.__words[2] = v18;
  *(_OWORD *)&cf[1].__r_.__value_.__r.__words[1] = v18;
  *(_OWORD *)&cf[0].__r_.__value_.__l.__data_ = v18;
  v19 = (capabilities::updater *)(*(_QWORD *(**)(std::string *__return_ptr))(*(_QWORD *)*a4 + 8))(cf);
  v20 = capabilities::updater::EUICCVinylSuccessStatus(v19);
  if (LODWORD(cf[0].__r_.__value_.__l.__data_) != v20)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    goto LABEL_35;
  }
  if (cf[0].__r_.__value_.__s.__data_[4])
    goto LABEL_21;
  if (DEREncodeItemIntoVector(4uLL, 8uLL, &v158, (uint64_t)&values))
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_41;
    goto LABEL_271;
  }
  if (DEREncodeItemIntoVector(0x2000000000000010uLL, v169 - (_QWORD)values, values, (uint64_t)&__p))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
LABEL_41:
      _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v31, v32, v33, (char)"DR_Success == derRet");
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v37 = "Failed to encode ECID\n";
LABEL_44:
      _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", v37, v34, v35, v36, v143);
LABEL_45:
      v24 = 0;
      v25 = __p;
      if (!__p)
        goto LABEL_47;
      goto LABEL_46;
    }
LABEL_271:
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    goto LABEL_41;
  }
  if ((*(unsigned int (**)(_QWORD, void **, void **))(*(_QWORD *)*a4 + 56))(*a4, &__p, v147))
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v98, v99, v100, (char)"kBBUReturnSuccess == ret");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v37 = "Failed to complete InitPerso command\n";
    goto LABEL_44;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*a4 + 16))(*a4, 0, 1);
  __src[0].__r_.__value_.__r.__words[0] = 10000000000;
  std::this_thread::sleep_for ((const std::chrono::nanoseconds *)__src);
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a4 + 8))(__src);
  v118 = (capabilities::updater *)memcpy(cf, __src, 0x11AuLL);
  v119 = capabilities::updater::EUICCVinylSuccessStatus(v118);
  if (LODWORD(cf[0].__r_.__value_.__l.__data_) != v119)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
LABEL_35:
    _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v21, v22, v23, (char)"cardData.Valid()");
    goto LABEL_45;
  }
  if (!cf[0].__r_.__value_.__s.__data_[4])
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v21, v22, v23, (char)"cardData.contents.perso");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v37 = "Still persod after force?\n";
    goto LABEL_44;
  }
LABEL_21:
  v24 = 1;
  v25 = __p;
  if (__p)
  {
LABEL_46:
    v162 = v25;
    operator delete(v25);
  }
LABEL_47:
  if (values)
  {
    *(_QWORD *)&v169 = values;
    operator delete(values);
  }
  if ((v24 & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v41 = "kBBUReturnSuccess == ret";
    goto LABEL_72;
  }
LABEL_50:
  if (BBUpdaterCommon::getECID(void)::sOnce != -1)
    dispatch_once(&BBUpdaterCommon::getECID(void)::sOnce, &__block_literal_global_15);
  v153 = (void *)BBUpdaterCommon::getECID(void)::ecid;
  v151 = 0;
  memset(cf, 0, 24);
  memset(__src, 0, 24);
  if (DEREncodeItemIntoVector(4uLL, 8uLL, &v153, (uint64_t)cf))
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_60;
    goto LABEL_264;
  }
  if (DEREncodeItemIntoVector(0x2000000000000010uLL, cf[0].__r_.__value_.__l.__size_ - cf[0].__r_.__value_.__r.__words[0], cf[0].__r_.__value_.__l.__data_, (uint64_t)__src))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
LABEL_60:
      _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v38, v39, v40, (char)"DR_Success == derRet");
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "Failed to encode ECID\n", v42, v43, v44, v144);
      v48 = 10;
      goto LABEL_63;
    }
LABEL_264:
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    goto LABEL_60;
  }
  values = operator new(0x19uLL);
  v169 = xmmword_212B50730;
  strcpy((char *)values, "InitPersoDeviceBlob.bin");
  v162 = 0;
  v163 = 0;
  __p = 0;
  v58 = (const void *)__src[0].__r_.__value_.__r.__words[0];
  v59 = __src[0].__r_.__value_.__l.__size_ - __src[0].__r_.__value_.__r.__words[0];
  if (__src[0].__r_.__value_.__l.__size_ != __src[0].__r_.__value_.__r.__words[0])
  {
    if ((v59 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    __p = operator new(__src[0].__r_.__value_.__l.__size_ - __src[0].__r_.__value_.__r.__words[0]);
    v162 = __p;
    v60 = (char *)__p + v59;
    v163 = (char *)__p + v59;
    memcpy(__p, v58, v59);
    v162 = v60;
  }
  v61 = *(std::string **)(a1 + 40);
  if ((unint64_t)v61 >= *(_QWORD *)(a1 + 48))
  {
    v62 = std::vector<std::pair<std::string,std::vector<unsigned char>>>::__emplace_back_slow_path<std::string&,std::vector<unsigned char>&>((std::string **)(a1 + 32), (__int128 *)&values, (uint64_t)&__p);
  }
  else
  {
    std::pair<std::string,std::vector<unsigned char>>::pair[abi:ne180100]<std::string&,std::vector<unsigned char>&,0>(*(std::string **)(a1 + 40), (__int128 *)&values, (uint64_t)&__p);
    v62 = v61 + 2;
    *(_QWORD *)(a1 + 40) = v61 + 2;
  }
  *(_QWORD *)(a1 + 40) = v62;
  if (__p)
  {
    v162 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v169) < 0)
    operator delete(values);
  v48 = (*(uint64_t (**)(_QWORD, std::string *, void **))(*(_QWORD *)*a4 + 56))(*a4, __src, v147);
  if (v48)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v82, v83, v84, (char)"kBBUReturnSuccess == ret");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "Failed to complete InitPerso command\n", v85, v86, v87, v145);
  }
  else
  {
    v158 = operator new(0x20uLL);
    v159 = xmmword_212B52FE0;
    strcpy((char *)v158, "InitPersoDeviceResponse.bin");
    memset(&v156, 0, sizeof(v156));
    v88 = v147[0];
    v89 = (char *)v147[1] - (char *)v147[0];
    if (v147[1] != v147[0])
    {
      if ((v89 & 0x8000000000000000) != 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v156.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new((char *)v147[1] - (char *)v147[0]);
      v156.__r_.__value_.__l.__size_ = v156.__r_.__value_.__r.__words[0];
      v90 = v156.__r_.__value_.__r.__words[0] + v89;
      v156.__r_.__value_.__r.__words[2] = v156.__r_.__value_.__r.__words[0] + v89;
      memcpy(v156.__r_.__value_.__l.__data_, v88, v89);
      v156.__r_.__value_.__l.__size_ = v90;
    }
    v91 = *(std::string **)(a1 + 40);
    if ((unint64_t)v91 >= *(_QWORD *)(a1 + 48))
    {
      v92 = std::vector<std::pair<std::string,std::vector<unsigned char>>>::__emplace_back_slow_path<std::string&,std::vector<unsigned char>&>((std::string **)(a1 + 32), (__int128 *)&v158, (uint64_t)&v156);
    }
    else
    {
      std::pair<std::string,std::vector<unsigned char>>::pair[abi:ne180100]<std::string&,std::vector<unsigned char>&,0>(*(std::string **)(a1 + 40), (__int128 *)&v158, (uint64_t)&v156);
      v92 = v91 + 2;
      *(_QWORD *)(a1 + 40) = v91 + 2;
    }
    *(_QWORD *)(a1 + 40) = v92;
    if (v156.__r_.__value_.__r.__words[0])
    {
      v156.__r_.__value_.__l.__size_ = v156.__r_.__value_.__r.__words[0];
      operator delete(v156.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v159) < 0)
      operator delete(v158);
    v48 = 0;
  }
LABEL_63:
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "InitPersoDevice %d\n", v45, v46, v47, v48);
  if (__src[0].__r_.__value_.__r.__words[0])
  {
    __src[0].__r_.__value_.__l.__size_ = __src[0].__r_.__value_.__r.__words[0];
    operator delete(__src[0].__r_.__value_.__l.__data_);
  }
  if (cf[0].__r_.__value_.__r.__words[0])
  {
    cf[0].__r_.__value_.__l.__size_ = cf[0].__r_.__value_.__r.__words[0];
    operator delete(cf[0].__r_.__value_.__l.__data_);
  }
  if (v48 || (v52 = v147[0], v147[0] == v147[1]))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
LABEL_71:
      v41 = "kBBUReturnSuccess == ret && !dataBuffer.empty()";
LABEL_72:
      _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v21, v22, v23, (char)v41);
      v30 = 18;
      goto LABEL_73;
    }
LABEL_263:
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    goto LABEL_71;
  }
  v166 = 0;
  v165 = 0uLL;
  v163 = 0;
  v164 = 0;
  __p = 0;
  v162 = 0;
  v158 = 0;
  v159 = 0uLL;
  v53 = (char *)v147[1] - (char *)v147[0];
  if ((char *)v147[1] - (char *)v147[0] < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v54 = (char *)operator new((char *)v147[1] - (char *)v147[0]);
  v158 = v54;
  *((_QWORD *)&v159 + 1) = &v54[v53];
  memcpy(v54, v52, v53);
  values = 0;
  memset(cf, 0, 24);
  v55 = operator new(v53);
  v56 = (std::string::size_type)v55 + v53;
  cf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
  cf[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v55 + v53;
  memcpy(v55, v54, v53);
  cf[0].__r_.__value_.__l.__size_ = v56;
  __src[0].__r_.__value_.__r.__words[0] = 0;
  if (ctu::cf::convert_copy())
  {
    v57 = (const void *)__src[0].__r_.__value_.__r.__words[0];
    values = (void *)__src[0].__r_.__value_.__r.__words[0];
  }
  else
  {
    v57 = 0;
  }
  if (cf[0].__r_.__value_.__r.__words[0])
  {
    cf[0].__r_.__value_.__l.__size_ = cf[0].__r_.__value_.__r.__words[0];
    operator delete(cf[0].__r_.__value_.__l.__data_);
  }
  v160 = v57;
  *(_QWORD *)&v159 = v54;
  operator delete(v54);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v156 = *(std::string *)a3;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(__src, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  else
    __src[0] = v156;
  v153 = 0;
  if (SHIBYTE(__src[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(cf, __src[0].__r_.__value_.__l.__data_, __src[0].__r_.__value_.__l.__size_);
  else
    cf[0] = __src[0];
  values = 0;
  if (ctu::cf::convert_copy())
    v63 = values;
  else
    v63 = 0;
  if ((SHIBYTE(cf[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v157 = v63;
    if ((SHIBYTE(__src[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_108;
LABEL_140:
    operator delete(__src[0].__r_.__value_.__l.__data_);
    if ((SHIBYTE(v156.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_109;
    goto LABEL_141;
  }
  operator delete(cf[0].__r_.__value_.__l.__data_);
  v157 = v63;
  if (SHIBYTE(__src[0].__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_140;
LABEL_108:
  if ((SHIBYTE(v156.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_109;
LABEL_141:
  operator delete(v156.__r_.__value_.__l.__data_);
LABEL_109:
  *(_QWORD *)&v64 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v64 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&cf[11].__r_.__value_.__s.__data_[2] = v64;
  *(_OWORD *)&cf[10].__r_.__value_.__l.__data_ = v64;
  *(_OWORD *)&cf[10].__r_.__value_.__r.__words[2] = v64;
  *(_OWORD *)&cf[8].__r_.__value_.__r.__words[2] = v64;
  *(_OWORD *)&cf[9].__r_.__value_.__r.__words[1] = v64;
  *(_OWORD *)&cf[7].__r_.__value_.__r.__words[1] = v64;
  *(_OWORD *)&cf[8].__r_.__value_.__l.__data_ = v64;
  *(_OWORD *)&cf[6].__r_.__value_.__l.__data_ = v64;
  *(_OWORD *)&cf[6].__r_.__value_.__r.__words[2] = v64;
  *(_OWORD *)&cf[4].__r_.__value_.__r.__words[2] = v64;
  *(_OWORD *)&cf[5].__r_.__value_.__r.__words[1] = v64;
  *(_OWORD *)&cf[3].__r_.__value_.__r.__words[1] = v64;
  *(_OWORD *)&cf[4].__r_.__value_.__l.__data_ = v64;
  *(_OWORD *)&cf[2].__r_.__value_.__l.__data_ = v64;
  *(_OWORD *)&cf[2].__r_.__value_.__r.__words[2] = v64;
  *(_OWORD *)&cf[0].__r_.__value_.__r.__words[2] = v64;
  *(_OWORD *)&cf[1].__r_.__value_.__r.__words[1] = v64;
  *(_OWORD *)&cf[0].__r_.__value_.__l.__data_ = v64;
  v65 = (capabilities::updater *)(**(_QWORD *(***)(std::string *__return_ptr))*a4)(cf);
  v66 = capabilities::updater::EUICCVinylSuccessStatus(v65);
  if (LODWORD(cf[0].__r_.__value_.__l.__data_) != v66)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v75 = "hwType.Valid()";
    goto LABEL_118;
  }
  *(_OWORD *)&__src[0].__r_.__value_.__l.__data_ = xmmword_24CE7FFB0;
  *(_OWORD *)&__src[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&off_24CE7FFC0;
  values = CFSTR("StartSession");
  *(_QWORD *)&v169 = v57;
  v70 = CFSTR("0");
  if (cf[11].__r_.__value_.__s.__data_[15])
    v70 = CFSTR("2");
  *((_QWORD *)&v169 + 1) = v63;
  v170 = v70;
  v71 = eUICC::Perso::PersoImplementation::SerializeKeyValuePairsIntoPlistData((const void **)&__src[0].__r_.__value_.__l.__data_, (const void **)&values, 4);
  if (v71)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
LABEL_114:
      _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v67, v68, v69, (char)"kBBUReturnSuccess == ret");
      goto LABEL_119;
    }
LABEL_272:
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    goto LABEL_114;
  }
  values = operator new(0x20uLL);
  v169 = xmmword_212B52FF0;
  strcpy((char *)values, "InitPersoServerRequest.plist");
  v154 = 0;
  v155 = 0;
  v153 = 0;
  v93 = __p;
  v94 = v162 - (_BYTE *)__p;
  if (v162 != __p)
  {
    if ((v94 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v153 = operator new(v162 - (_BYTE *)__p);
    v154 = v153;
    v95 = (char *)v153 + v94;
    v155 = (char *)v153 + v94;
    memcpy(v153, v93, v94);
    v154 = v95;
  }
  v96 = *(std::string **)(a1 + 40);
  if ((unint64_t)v96 >= *(_QWORD *)(a1 + 48))
  {
    v97 = std::vector<std::pair<std::string,std::vector<unsigned char>>>::__emplace_back_slow_path<std::string&,std::vector<unsigned char>&>((std::string **)(a1 + 32), (__int128 *)&values, (uint64_t)&v153);
  }
  else
  {
    std::pair<std::string,std::vector<unsigned char>>::pair[abi:ne180100]<std::string&,std::vector<unsigned char>&,0>(*(std::string **)(a1 + 40), (__int128 *)&values, (uint64_t)&v153);
    v97 = v96 + 2;
    *(_QWORD *)(a1 + 40) = v96 + 2;
  }
  *(_QWORD *)(a1 + 40) = v97;
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  if (SHIBYTE(v169) < 0)
    operator delete(values);
  eUICC::Perso::PersoImplementation::PostDataSync((uint64_t)__src, (_QWORD *)a1, (uint64_t)&__p);
  v165 = *(_OWORD *)&__src[0].__r_.__value_.__l.__data_;
  v104 = __src[0].__r_.__value_.__r.__words[0];
  if (!__src[0].__r_.__value_.__r.__words[0])
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v101, v102, v103, (char)"response");
    goto LABEL_201;
  }
  v151 = operator new(0x20uLL);
  v152 = xmmword_212B50740;
  strcpy((char *)v151, "InitPersoServerResponse.plist");
  (*(void (**)(CFTypeRef *__return_ptr, std::string::size_type))(*(_QWORD *)v104 + 40))(&v150, v104);
  eUICC::Perso::PersoImplementation::logTransactionCFData(a1, (__int128 *)&v151, (CFDataRef *)&v150);
  if (v150)
    CFRelease(v150);
  if (SHIBYTE(v152) < 0)
    operator delete(v151);
  (*(void (**)(CFTypeRef *__return_ptr, std::string::size_type))(*(_QWORD *)v104 + 40))(&v149, v104);
  v71 = eUICC::Perso::PersoImplementation::CreateDictionaryFromPlistData((uint64_t *)&v149, &v166, v105, v106, v107, v108, v109, v110);
  if (v149)
    CFRelease(v149);
  if (v71)
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_114;
    goto LABEL_272;
  }
  if (v166)
    v111 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  else
    v111 = 0;
  if (!v111)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v75 = "respDict";
LABEL_118:
    _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v67, v68, v69, (char)v75);
    v71 = 18;
    goto LABEL_119;
  }
  Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v166, CFSTR("SessionId"));
  v116 = Value;
  if (Value)
  {
    v117 = CFGetTypeID(Value);
    if (v117 == CFStringGetTypeID())
      CFRetain(v116);
    else
      v116 = 0;
  }
  v120 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v116;
  if (v120)
  {
    CFRelease(v120);
    v116 = *(const __CFString **)(a1 + 16);
  }
  v121 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  if (!v116)
    v121 = 0;
  if (!v121 || !CFStringGetLength(v116))
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v113, v114, v115, (char)"this->serverSessionID && CFStringGetLength( this->serverSessionID.get()) != 0");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    ctu::cf::show((ctu::cf *)v166, v130);
    if ((__src[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v134 = __src;
    else
      LOBYTE(v134) = __src[0].__r_.__value_.__s.__data_[0];
    _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "Missing or empty server sssion?! %s\n", v131, v132, v133, (char)v134);
    goto LABEL_246;
  }
  v122 = (ctu::cf *)v166;
  v123 = CFDictionaryGetValue((CFDictionaryRef)v166, CFSTR("DATA"));
  ctu::cf::CFSharedRef<__CFData const>::operator=<void const,void>(&v164, v123);
  v127 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  if (!v164)
    v127 = 0;
  if (!v127)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v124, v125, v126, (char)"respDataPayload");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    ctu::cf::show(v122, v135);
    if ((__src[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v139 = __src;
    else
      LOBYTE(v139) = __src[0].__r_.__value_.__s.__data_[0];
    _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "Couldn't get response payload %s\n", v136, v137, v138, (char)v139);
LABEL_246:
    if (SHIBYTE(__src[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__src[0].__r_.__value_.__l.__data_);
LABEL_201:
    v71 = 53;
    goto LABEL_119;
  }
  memset(__src, 0, 24);
  ctu::cf::assign();
  v128 = *(_OWORD *)&__src[0].__r_.__value_.__l.__data_;
  v129 = __src[0].__r_.__value_.__r.__words[2];
  if (v147[0])
  {
    v147[1] = v147[0];
    v146 = *(_OWORD *)&__src[0].__r_.__value_.__l.__data_;
    operator delete(v147[0]);
    v128 = v146;
  }
  v71 = 0;
  *(_OWORD *)v147 = v128;
  v148 = v129;
LABEL_119:
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "InitPersoServer %d\n", v72, v73, v74, v71);
  if (v157)
    CFRelease(v157);
  if (v160)
    CFRelease(v160);
  if (__p)
  {
    v162 = __p;
    operator delete(__p);
  }
  if (v164)
    CFRelease(v164);
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (v166)
    CFRelease(v166);
  if (v71 || v147[0] == v147[1])
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
LABEL_138:
      _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v76, v77, v78, (char)"kBBUReturnSuccess == ret && !dataBuffer.empty()");
      v30 = 53;
      goto LABEL_73;
    }
LABEL_297:
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    goto LABEL_138;
  }
  if (eUICC::Perso::PersoImplementation::AuthenticatePersoDevice(a1, (uint64_t)v147, a4)
    || v147[0] == v147[1])
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_71;
    goto LABEL_263;
  }
  if (eUICC::Perso::PersoImplementation::GetWrapKeyServer(a1, (uint64_t)v147) || v147[0] == v147[1])
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_138;
    goto LABEL_297;
  }
  v30 = eUICC::Perso::PersoImplementation::FinalizePersoDevice(a1, (uint64_t)v147, a4);
  if ((_DWORD)v30)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
LABEL_219:
      _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v27, v28, v29, (char)"kBBUReturnSuccess == ret");
      goto LABEL_73;
    }
LABEL_290:
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    goto LABEL_219;
  }
  ctu::cf::CFSharedRef<__CFString const>::reset((const void **)(a1 + 16));
  if (eUICC::Perso::PersoImplementation::GetNonceServer(a1, (uint64_t)v147, (_QWORD *(***)(_OWORD *__return_ptr, _QWORD))*a4)|| v147[0] == v147[1])
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_138;
    goto LABEL_297;
  }
  if (eUICC::Perso::PersoImplementation::CreateValidationBlob(v147) || v147[0] == v147[1])
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_138;
    goto LABEL_297;
  }
  if (eUICC::Perso::PersoImplementation::ValidatePersoDevice(a1, (uint64_t)v147, a4) || v147[0] == v147[1])
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_138;
    goto LABEL_297;
  }
  v30 = eUICC::Perso::PersoImplementation::SendReceiptServer(a1, (uint64_t)v147);
  if ((_DWORD)v30)
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_219;
    goto LABEL_290;
  }
  v140 = *(_QWORD *)(a1 + 32);
  for (i = *(_QWORD *)(a1 + 40); i != v140; i -= 48)
  {
    v142 = *(void **)(i - 24);
    if (v142)
    {
      *(_QWORD *)(i - 16) = v142;
      operator delete(v142);
    }
    if (*(char *)(i - 25) < 0)
      operator delete(*(void **)(i - 48));
  }
  v30 = 0;
  *(_QWORD *)(a1 + 40) = v140;
LABEL_73:
  v49 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v49)
    CFRelease(v49);
  *(_QWORD *)(a1 + 24) = 0;
  v50 = *(NSObject **)a1;
  *(_QWORD *)a1 = 0;
  if (v50)
    dispatch_release(v50);
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "ret %d records %zu\n", v27, v28, v29, v30);
  if (v147[0])
  {
    v147[1] = v147[0];
    operator delete(v147[0]);
  }
  return v30;
}

void sub_212AA0C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,const void *a30,void *a31,uint64_t a32,uint64_t a33,const void *a34,void *a35,uint64_t a36,uint64_t a37,const void *a38,__int16 a39,uint64_t a40,uint64_t a41,const void *a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0)
    operator delete(__p);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a30);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a34);
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a38);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a42);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void eUICC::Perso::DumpTransactions(_QWORD *a1@<X8>)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;

  pthread_mutex_lock(&ctu::Singleton<eUICC::Perso::PersoImplementation,eUICC::Perso::PersoImplementation,ctu::PthreadMutexGuardPolicy<eUICC::Perso::PersoImplementation>>::sInstance);
  if (qword_253D31E18)
    goto LABEL_2;
  v4 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
  v4->__on_zero_shared_weak = 0;
  v4[1].~__shared_weak_count = 0;
  v4[1].~__shared_weak_count_0 = 0;
  v4->~__shared_weak_count_0 = 0;
  v4->__on_zero_shared = 0;
  v4->~__shared_weak_count = 0;
  v3 = (std::__shared_weak_count *)operator new(0x20uLL);
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_24CE80008;
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3[1].__vftable = v4;
  v5 = (std::__shared_weak_count *)off_253D31E20;
  qword_253D31E18 = (uint64_t)v4;
  off_253D31E20 = v3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
LABEL_2:
    v4 = (std::__shared_weak_count_vtbl *)qword_253D31E18;
    v3 = (std::__shared_weak_count *)off_253D31E20;
    v12 = (std::__shared_weak_count *)off_253D31E20;
    if (!off_253D31E20)
      goto LABEL_12;
    goto LABEL_10;
  }
  v12 = v3;
LABEL_10:
  v8 = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<eUICC::Perso::PersoImplementation,eUICC::Perso::PersoImplementation,ctu::PthreadMutexGuardPolicy<eUICC::Perso::PersoImplementation>>::sInstance);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::pair<std::string,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::vector<unsigned char>>*,std::pair<std::string,std::vector<unsigned char>>*>(a1, (uint64_t)v4->__on_zero_shared_weak, (uint64_t)v4[1].~__shared_weak_count, 0xAAAAAAAAAAAAAAABLL * (((char *)v4[1].~__shared_weak_count - (char *)v4->__on_zero_shared_weak) >> 4));
  if (v12)
  {
    v10 = (unint64_t *)&v12->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_212AA10C8(_Unwind_Exception *a1)
{
  eUICC::Perso::PersoImplementation *v1;
  void *v3;

  eUICC::Perso::PersoImplementation::~PersoImplementation(v1);
  operator delete(v3);
  pthread_mutex_unlock(&ctu::Singleton<eUICC::Perso::PersoImplementation,eUICC::Perso::PersoImplementation,ctu::PthreadMutexGuardPolicy<eUICC::Perso::PersoImplementation>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_212AA10F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t eUICC::Perso::PersoImplementation::AuthenticatePersoDevice(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  const void *v7;
  size_t v8;
  char *v9;
  char *v10;
  std::string *v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  size_t v24;
  char *v25;
  char *v26;
  std::string *v27;
  std::string *v28;
  char v30;
  void *v31;
  void *v32;
  char *v33;
  void *v34;
  __int128 v35;
  void *__p;
  void *v37;
  char *v38;
  char *v39;
  __int128 v40;

  v39 = (char *)operator new(0x28uLL);
  v40 = xmmword_212B53000;
  strcpy(v39, "AuthenticatePersoDeviceRequest.bin");
  v37 = 0;
  v38 = 0;
  __p = 0;
  v7 = *(const void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = v6 - *(_QWORD *)a2;
  if (v6 != *(_QWORD *)a2)
  {
    if ((v8 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v6 - *(_QWORD *)a2);
    v10 = &v9[v8];
    __p = v9;
    v38 = &v9[v8];
    memcpy(v9, v7, v8);
    v37 = v10;
  }
  v11 = *(std::string **)(a1 + 40);
  if ((unint64_t)v11 >= *(_QWORD *)(a1 + 48))
  {
    v12 = std::vector<std::pair<std::string,std::vector<unsigned char>>>::__emplace_back_slow_path<std::string&,std::vector<unsigned char>&>((std::string **)(a1 + 32), (__int128 *)&v39, (uint64_t)&__p);
  }
  else
  {
    std::pair<std::string,std::vector<unsigned char>>::pair[abi:ne180100]<std::string&,std::vector<unsigned char>&,0>(*(std::string **)(a1 + 40), (__int128 *)&v39, (uint64_t)&__p);
    v12 = v11 + 2;
    *(_QWORD *)(a1 + 40) = v11 + 2;
  }
  *(_QWORD *)(a1 + 40) = v12;
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v40) < 0)
    operator delete(v39);
  v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 64))(*a3, a2, a2);
  if ((_DWORD)v16)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v13, v14, v15, (char)"kBBUReturnSuccess == ret");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "Failed to complete AuthPerso command\n", v17, v18, v19, v30);
  }
  else
  {
    v33 = 0;
    v34 = operator new(0x28uLL);
    v35 = xmmword_212B50720;
    strcpy((char *)v34, "AuthenticatePersoDeviceResponse.bin");
    v31 = 0;
    v32 = 0;
    v23 = *(const void **)a2;
    v24 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    if (v24)
    {
      if ((v24 & 0x8000000000000000) != 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v25 = (char *)operator new(v24);
      v26 = &v25[v24];
      v31 = v25;
      v33 = &v25[v24];
      memcpy(v25, v23, v24);
      v32 = v26;
    }
    v27 = *(std::string **)(a1 + 40);
    if ((unint64_t)v27 >= *(_QWORD *)(a1 + 48))
    {
      v28 = std::vector<std::pair<std::string,std::vector<unsigned char>>>::__emplace_back_slow_path<std::string&,std::vector<unsigned char>&>((std::string **)(a1 + 32), (__int128 *)&v34, (uint64_t)&v31);
    }
    else
    {
      std::pair<std::string,std::vector<unsigned char>>::pair[abi:ne180100]<std::string&,std::vector<unsigned char>&,0>(*(std::string **)(a1 + 40), (__int128 *)&v34, (uint64_t)&v31);
      v28 = v27 + 2;
      *(_QWORD *)(a1 + 40) = v27 + 2;
    }
    *(_QWORD *)(a1 + 40) = v28;
    if (v31)
    {
      v32 = v31;
      operator delete(v31);
    }
    if (SHIBYTE(v35) < 0)
      operator delete(v34);
  }
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "AuthenticatePersoDevice %d\n", v20, v21, v22, v16);
  return v16;
}

void sub_212AA1418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t eUICC::Perso::PersoImplementation::GetWrapKeyServer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  size_t v6;
  char *v7;
  void *v8;
  char *v9;
  char *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t DictionaryFromPlistData;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  const void *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  const __CFDictionary *v24;
  std::string *v26;
  std::string *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ctu::cf *v41;
  const void *Value;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  CFTypeID v46;
  uint64_t (*v47)(uint64_t);
  __int128 v48;
  char *v49;
  void *v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 *v55;
  __int128 v56;
  CFTypeRef v57;
  CFTypeRef cf;
  void *v59;
  __int128 v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  __int128 v65;
  char *v66;
  char *v67;
  char *v68;
  unint64_t v69;
  void *__p;
  void *v71;
  uint64_t v72;
  const void *v73;
  __int128 v74;
  const __CFDictionary *v75;
  __int128 v76;
  char *v77;
  void *values[3];
  void *keys[2];
  const __CFString *v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v75 = 0;
  v73 = 0;
  v74 = 0uLL;
  __p = 0;
  v71 = 0;
  v72 = 0;
  v68 = 0;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v66 = 0;
  v67 = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 == *(_QWORD *)a2)
  {
    v8 = 0;
    v7 = 0;
    v77 = 0;
    values[0] = 0;
    v76 = 0uLL;
  }
  else
  {
    if ((v6 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    v66 = v7;
    v68 = &v7[v6];
    memcpy(v7, v5, v6);
    v67 = &v7[v6];
    v8 = operator new(v6);
    memcpy(v8, v7, v6);
    values[0] = 0;
    v9 = (char *)operator new(v6);
    v10 = &v9[v6];
    *(_QWORD *)&v76 = v9;
    v77 = &v9[v6];
    memcpy(v9, v7, v6);
    *((_QWORD *)&v76 + 1) = v10;
  }
  keys[0] = 0;
  if (!ctu::cf::convert_copy())
  {
    v11 = 0;
    v12 = (void *)v76;
    if (!(_QWORD)v76)
      goto LABEL_10;
    goto LABEL_9;
  }
  v11 = keys[0];
  values[0] = keys[0];
  v12 = (void *)v76;
  if ((_QWORD)v76)
  {
LABEL_9:
    *((_QWORD *)&v76 + 1) = v12;
    operator delete(v12);
  }
LABEL_10:
  v69 = (unint64_t)v11;
  values[0] = 0;
  if (v8)
    operator delete(v8);
  if (v7)
  {
    v67 = v7;
    operator delete(v7);
  }
  *(_OWORD *)keys = xmmword_24CE7FFE0;
  v80 = CFSTR("SessionId");
  values[0] = CFSTR("GetWrapKey");
  values[1] = v11;
  values[2] = *(void **)(a1 + 16);
  DictionaryFromPlistData = eUICC::Perso::PersoImplementation::SerializeKeyValuePairsIntoPlistData((const void **)keys, (const void **)values, 3);
  if ((_DWORD)DictionaryFromPlistData)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v13, v14, v15, (char)"kBBUReturnSuccess == ret");
    v20 = 0;
LABEL_18:
    v21 = 0;
    goto LABEL_19;
  }
  v63 = 0;
  v64 = operator new(0x20uLL);
  v65 = xmmword_212B50740;
  strcpy((char *)v64, "GetWrapKeyServerRequest.plist");
  v61 = 0;
  v62 = 0;
  v26 = *(std::string **)(a1 + 40);
  if ((unint64_t)v26 >= *(_QWORD *)(a1 + 48))
  {
    v27 = std::vector<std::pair<std::string,std::vector<unsigned char>>>::__emplace_back_slow_path<std::string&,std::vector<unsigned char>&>((std::string **)(a1 + 32), (__int128 *)&v64, (uint64_t)&v61);
  }
  else
  {
    std::pair<std::string,std::vector<unsigned char>>::pair[abi:ne180100]<std::string&,std::vector<unsigned char>&,0>(*(std::string **)(a1 + 40), (__int128 *)&v64, (uint64_t)&v61);
    v27 = v26 + 2;
    *(_QWORD *)(a1 + 40) = v26 + 2;
  }
  *(_QWORD *)(a1 + 40) = v27;
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  if (SHIBYTE(v65) < 0)
    operator delete(v64);
  eUICC::Perso::PersoImplementation::PostDataSync((uint64_t)&v76, (_QWORD *)a1, (uint64_t)&__p);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  v31 = v76;
  v74 = v76;
  if ((_QWORD)v76)
  {
    v59 = operator new(0x20uLL);
    v60 = xmmword_212B53010;
    strcpy((char *)v59, "GetWrapKeyServerResponse.plist");
    (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(_QWORD *)v31 + 40))(&cf, v31);
    eUICC::Perso::PersoImplementation::logTransactionCFData(a1, (__int128 *)&v59, (CFDataRef *)&cf);
    if (cf)
      CFRelease(cf);
    if (SHIBYTE(v60) < 0)
      operator delete(v59);
    (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(_QWORD *)v31 + 40))(&v57, v31);
    DictionaryFromPlistData = eUICC::Perso::PersoImplementation::CreateDictionaryFromPlistData((uint64_t *)&v57, (const void **)&v75, v32, v33, v34, v35, v36, v37);
    if (v57)
      CFRelease(v57);
    if ((_DWORD)DictionaryFromPlistData)
    {
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v38, v39, v40, (char)"kBBUReturnSuccess == ret");
      goto LABEL_18;
    }
    v41 = v75;
    Value = CFDictionaryGetValue(v75, CFSTR("DATA"));
    v21 = Value;
    if (Value)
    {
      v46 = CFGetTypeID(Value);
      if (v46 != CFDataGetTypeID())
      {
        v21 = 0;
        v73 = 0;
LABEL_65:
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v43, v44, v45, (char)"respDataPayload");
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        ctu::cf::show(v41, v51);
        if (SHIBYTE(v77) >= 0)
          v55 = &v76;
        else
          LOBYTE(v55) = v76;
        _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "Couldn't get response payload %s\n", v52, v53, v54, (char)v55);
        if (SHIBYTE(v77) < 0)
          operator delete((void *)v76);
        DictionaryFromPlistData = 53;
        goto LABEL_19;
      }
      CFRetain(v21);
    }
    v73 = v21;
    v47 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
    if (!v21)
      v47 = 0;
    if (v47)
    {
      v76 = 0uLL;
      v77 = 0;
      ctu::cf::assign();
      v48 = v76;
      v49 = v77;
      v50 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v50;
        v56 = v48;
        operator delete(v50);
        v48 = v56;
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
      }
      DictionaryFromPlistData = 0;
      *(_OWORD *)a2 = v48;
      *(_QWORD *)(a2 + 16) = v49;
      goto LABEL_19;
    }
    goto LABEL_65;
  }
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v28, v29, v30, (char)"response");
  v21 = 0;
  DictionaryFromPlistData = 53;
LABEL_19:
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "GetWrapKeyServer %d\n", v17, v18, v19, DictionaryFromPlistData);
  if (__p)
  {
    v71 = __p;
    operator delete(__p);
  }
  if (v21)
  {
    CFRelease(v21);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
  }
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v24 = v75;
      if (!v75)
        return DictionaryFromPlistData;
      goto LABEL_30;
    }
  }
  v24 = v75;
  if (v75)
LABEL_30:
    CFRelease(v24);
  return DictionaryFromPlistData;
}

void sub_212AA1B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,uint64_t a37,char a38,void *__p,uint64_t a40)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t eUICC::Perso::PersoImplementation::FinalizePersoDevice(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  const void *v7;
  size_t v8;
  char *v9;
  char *v10;
  std::string *v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  void *__p;
  void *v23;
  char *v24;
  void *v25;
  __int128 v26;

  v24 = 0;
  v25 = operator new(0x20uLL);
  v26 = xmmword_212B53010;
  strcpy((char *)v25, "FinalizePersoDeviceRequest.bin");
  __p = 0;
  v23 = 0;
  v7 = *(const void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = v6 - *(_QWORD *)a2;
  if (v6 != *(_QWORD *)a2)
  {
    if ((v8 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v6 - *(_QWORD *)a2);
    v10 = &v9[v8];
    __p = v9;
    v24 = &v9[v8];
    memcpy(v9, v7, v8);
    v23 = v10;
  }
  v11 = *(std::string **)(a1 + 40);
  if ((unint64_t)v11 >= *(_QWORD *)(a1 + 48))
  {
    v12 = std::vector<std::pair<std::string,std::vector<unsigned char>>>::__emplace_back_slow_path<std::string&,std::vector<unsigned char>&>((std::string **)(a1 + 32), (__int128 *)&v25, (uint64_t)&__p);
  }
  else
  {
    std::pair<std::string,std::vector<unsigned char>>::pair[abi:ne180100]<std::string&,std::vector<unsigned char>&,0>(*(std::string **)(a1 + 40), (__int128 *)&v25, (uint64_t)&__p);
    v12 = v11 + 2;
    *(_QWORD *)(a1 + 40) = v11 + 2;
  }
  *(_QWORD *)(a1 + 40) = v12;
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v26) < 0)
    operator delete(v25);
  v16 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 72))(*a3, a2);
  if ((_DWORD)v16)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v13, v14, v15, (char)"kBBUReturnSuccess == ret");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "Failed to complete FinalizePerso command\n", v17, v18, v19, v21);
  }
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "FinalizePersoDevice %d\n", v13, v14, v15, v16);
  return v16;
}

void sub_212AA1F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void ctu::cf::CFSharedRef<__CFString const>::reset(const void **a1)
{
  const void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t eUICC::Perso::PersoImplementation::GetNonceServer(uint64_t a1, uint64_t a2, _QWORD *(***a3)(_OWORD *__return_ptr, _QWORD))
{
  __int128 v5;
  capabilities::updater *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  CFTypeRef v22;
  std::string *v24;
  std::string *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const __CFString *Value;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const __CFString *v43;
  CFTypeID v44;
  const void *v45;
  uint64_t (*v46)(uint64_t);
  ctu::cf *v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  __int128 v53;
  uint64_t v54;
  void *v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *p_keys;
  __int128 v66;
  CFTypeRef v67;
  CFTypeRef v68;
  void *v69;
  __int128 v70;
  void *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  __int128 v75;
  void *__p;
  void *v77;
  uint64_t v78;
  CFTypeRef cf;
  __int128 v80;
  CFTypeRef v81;
  void *values[2];
  _OWORD v83[16];
  _BYTE v84[26];
  __int128 keys;
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v81 = 0;
  v80 = 0uLL;
  v78 = 0;
  cf = 0;
  __p = 0;
  v77 = 0;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v84[10] = v5;
  v83[15] = v5;
  *(_OWORD *)v84 = v5;
  v83[13] = v5;
  v83[14] = v5;
  v83[11] = v5;
  v83[12] = v5;
  v83[9] = v5;
  v83[10] = v5;
  v83[7] = v5;
  v83[8] = v5;
  v83[5] = v5;
  v83[6] = v5;
  v83[3] = v5;
  v83[4] = v5;
  v83[1] = v5;
  v83[2] = v5;
  v83[0] = v5;
  v6 = (capabilities::updater *)(**a3)(v83, a3);
  v7 = capabilities::updater::EUICCVinylSuccessStatus(v6);
  if (LODWORD(v83[0]) == v7)
  {
    keys = xmmword_24CE7FFD0;
    if (v84[23])
      v11 = CFSTR("2");
    else
      v11 = CFSTR("0");
    values[0] = CFSTR("GetNonce");
    values[1] = (void *)v11;
    v15 = eUICC::Perso::PersoImplementation::SerializeKeyValuePairsIntoPlistData((const void **)&keys, (const void **)values, 2);
    if ((_DWORD)v15)
    {
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v12, v13, v14, (char)"kBBUReturnSuccess == ret");
      goto LABEL_12;
    }
    v73 = 0;
    v74 = operator new(0x20uLL);
    v75 = xmmword_212B52FE0;
    strcpy((char *)v74, "GetNonceServerRequest.plist");
    v71 = 0;
    v72 = 0;
    v24 = *(std::string **)(a1 + 40);
    if ((unint64_t)v24 >= *(_QWORD *)(a1 + 48))
    {
      v25 = std::vector<std::pair<std::string,std::vector<unsigned char>>>::__emplace_back_slow_path<std::string&,std::vector<unsigned char>&>((std::string **)(a1 + 32), (__int128 *)&v74, (uint64_t)&v71);
    }
    else
    {
      std::pair<std::string,std::vector<unsigned char>>::pair[abi:ne180100]<std::string&,std::vector<unsigned char>&,0>(*(std::string **)(a1 + 40), (__int128 *)&v74, (uint64_t)&v71);
      v25 = v24 + 2;
      *(_QWORD *)(a1 + 40) = v24 + 2;
    }
    *(_QWORD *)(a1 + 40) = v25;
    if (v71)
    {
      v72 = v71;
      operator delete(v71);
    }
    if (SHIBYTE(v75) < 0)
      operator delete(v74);
    eUICC::Perso::PersoImplementation::PostDataSync((uint64_t)&keys, (_QWORD *)a1, (uint64_t)&__p);
    v80 = keys;
    v29 = keys;
    if ((_QWORD)keys)
    {
      v69 = operator new(0x20uLL);
      v70 = xmmword_212B52FF0;
      strcpy((char *)v69, "GetNonceServerResponse.plist");
      (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(_QWORD *)v29 + 40))(&v68, v29);
      eUICC::Perso::PersoImplementation::logTransactionCFData(a1, (__int128 *)&v69, (CFDataRef *)&v68);
      if (v68)
        CFRelease(v68);
      if (SHIBYTE(v70) < 0)
        operator delete(v69);
      (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(_QWORD *)v29 + 40))(&v67, v29);
      v15 = eUICC::Perso::PersoImplementation::CreateDictionaryFromPlistData((uint64_t *)&v67, &v81, v30, v31, v32, v33, v34, v35);
      if (v67)
        CFRelease(v67);
      if ((_DWORD)v15)
      {
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v36, v37, v38, (char)"kBBUReturnSuccess == ret");
        goto LABEL_12;
      }
      Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v81, CFSTR("SessionId"));
      v43 = Value;
      if (Value)
      {
        v44 = CFGetTypeID(Value);
        if (v44 == CFStringGetTypeID())
          CFRetain(v43);
        else
          v43 = 0;
      }
      v45 = *(const void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v43;
      if (v45)
      {
        CFRelease(v45);
        v43 = *(const __CFString **)(a1 + 16);
      }
      v46 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
      if (!v43)
        v46 = 0;
      if (v46 && CFStringGetLength(v43))
      {
        v47 = (ctu::cf *)v81;
        v48 = CFDictionaryGetValue((CFDictionaryRef)v81, CFSTR("DATA"));
        ctu::cf::CFSharedRef<__CFData const>::operator=<void const,void>(&cf, v48);
        v52 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
        if (!cf)
          v52 = 0;
        if (v52)
        {
          keys = 0uLL;
          v86 = 0;
          ctu::cf::assign();
          v53 = keys;
          v54 = v86;
          v55 = *(void **)a2;
          if (*(_QWORD *)a2)
          {
            *(_QWORD *)(a2 + 8) = v55;
            v66 = v53;
            operator delete(v55);
            v53 = v66;
            *(_QWORD *)a2 = 0;
            *(_QWORD *)(a2 + 8) = 0;
            *(_QWORD *)(a2 + 16) = 0;
          }
          v15 = 0;
          *(_OWORD *)a2 = v53;
          *(_QWORD *)(a2 + 16) = v54;
          goto LABEL_12;
        }
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v49, v50, v51, (char)"respDataPayload");
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        ctu::cf::show(v47, v61);
        if (v86 >= 0)
          p_keys = &keys;
        else
          LOBYTE(p_keys) = keys;
        _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "Couldn't get response payload %s\n", v62, v63, v64, (char)p_keys);
      }
      else
      {
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v40, v41, v42, (char)"this->serverSessionID && CFStringGetLength( this->serverSessionID.get()) != 0");
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        ctu::cf::show((ctu::cf *)v81, v56);
        if (v86 >= 0)
          v60 = &keys;
        else
          LOBYTE(v60) = keys;
        _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "Missing or empty server sssion?! %s\n", v57, v58, v59, (char)v60);
      }
      if (SHIBYTE(v86) < 0)
        operator delete((void *)keys);
    }
    else
    {
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v26, v27, v28, (char)"response");
    }
    v15 = 53;
    goto LABEL_12;
  }
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v8, v9, v10, (char)"hwType.Valid()");
  v15 = 18;
LABEL_12:
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "GetNonceServer %d\n", v16, v17, v18, v15);
  if (__p)
  {
    v77 = __p;
    operator delete(__p);
  }
  if (cf)
    CFRelease(cf);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      v22 = v81;
      if (!v81)
        return v15;
      goto LABEL_23;
    }
  }
  v22 = v81;
  if (v81)
LABEL_23:
    CFRelease(v22);
  return v15;
}

void sub_212AA2740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,uint64_t a38,const void *a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,const void *a45)
{
  uint64_t v45;

  if (*(char *)(v45 - 73) < 0)
    operator delete(*(void **)(v45 - 96));
  if (__p)
    operator delete(__p);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a39);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a45);
  _Unwind_Resume(a1);
}

uint64_t eUICC::Perso::PersoImplementation::CreateValidationBlob(_QWORD *a1)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD v9[2];
  unint64_t v10[3];
  void *__p;
  _BYTE *v12;
  uint64_t v13;
  void *v14;
  _BYTE *v15;
  uint64_t v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  void *v20;
  _BYTE *v21;
  uint64_t v22;
  void *v23;
  _BYTE *v24;
  uint64_t v25;
  void *v26;
  _BYTE *v27;
  uint64_t v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[2];
  int v41;
  char v42;
  uint64_t v43;
  _QWORD v44[3];
  _BYTE v45[24];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (BBUpdaterCommon::getECID(void)::sOnce != -1)
    dispatch_once(&BBUpdaterCommon::getECID(void)::sOnce, &__block_literal_global_15);
  v43 = BBUpdaterCommon::getECID(void)::ecid;
  v42 = 4;
  v41 = 17433507;
  v44[0] = 0;
  v44[2] = 512;
  *(_OWORD *)&v45[8] = 0u;
  v44[1] = 12;
  *(_OWORD *)v45 = xmmword_212B53020;
  *(_WORD *)&v45[16] = 512;
  v40[0] = v44;
  v40[1] = 0xAAAAAAAAAAAA0002;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v38 = v2;
  v39 = v2;
  v36 = v2;
  v37 = v2;
  v34 = v2;
  v35 = v2;
  v32 = v2;
  v33 = v2;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  __p = 0;
  v12 = 0;
  v13 = 0;
  v3 = a1[1] - *a1;
  v9[0] = *a1;
  v9[1] = v3;
  memset(v10, 170, sizeof(v10));
  v7 = DERDecodeItem((uint64_t)v9, v10);
  if (v7)
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_29;
    goto LABEL_49;
  }
  v7 = DEREncodeItemIntoVector(0xCuLL, 6uLL, "kNonce", (uint64_t)&v20);
  if (v7)
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_29;
    goto LABEL_49;
  }
  *(_QWORD *)&v36 = v20;
  *((_QWORD *)&v36 + 1) = v21 - (_BYTE *)v20;
  v37 = *(_OWORD *)&v10[1];
  v7 = DEREncodeSequenceIntoVector(0x2000000000000010, (unint64_t)&v36, (uint64_t)v40, (uint64_t)&v26);
  if (v7)
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_29;
    goto LABEL_49;
  }
  v7 = DEREncodeItemIntoVector(0xCuLL, 0x11uLL, "kDeviceIdentifier", (uint64_t)&v29);
  if (v7)
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_29;
    goto LABEL_49;
  }
  v7 = DEREncodeItemIntoVector(4uLL, 8uLL, &v43, (uint64_t)&v23);
  if (v7)
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_29;
    goto LABEL_49;
  }
  *(_QWORD *)&v38 = v29;
  *((_QWORD *)&v38 + 1) = v30 - (_BYTE *)v29;
  *(_QWORD *)&v39 = v23;
  *((_QWORD *)&v39 + 1) = v24 - (_BYTE *)v23;
  v7 = DEREncodeSequenceIntoVector(0x2000000000000010, (unint64_t)&v38, (uint64_t)v40, (uint64_t)&v17);
  if (v7)
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_29;
    goto LABEL_49;
  }
  *(_QWORD *)&v34 = v17;
  *((_QWORD *)&v34 + 1) = v18 - (_BYTE *)v17;
  *(_QWORD *)&v35 = v26;
  *((_QWORD *)&v35 + 1) = v27 - (_BYTE *)v26;
  v7 = DEREncodeSequenceIntoVector(0x2000000000000010, (unint64_t)&v34, (uint64_t)v40, (uint64_t)&v14);
  if (v7)
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_29;
    goto LABEL_49;
  }
  v7 = DEREncodeItemIntoVector(0xA000000000000005, v15 - (_BYTE *)v14, v14, (uint64_t)&__p);
  if (v7)
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_29;
    goto LABEL_49;
  }
  *(_QWORD *)&v32 = &v41;
  *((_QWORD *)&v32 + 1) = 5;
  *(_QWORD *)&v33 = __p;
  *((_QWORD *)&v33 + 1) = v12 - (_BYTE *)__p;
  v7 = DEREncodeSequenceIntoVector(0x2000000000000010, (unint64_t)&v32, (uint64_t)v40, (uint64_t)a1);
  if (!v7)
    goto LABEL_30;
  if (gBBULogMaskGet(void)::once != -1)
LABEL_49:
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
LABEL_29:
  _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v4, v5, v6, (char)"DR_Success == ret");
LABEL_30:
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "CreateValidationBlob DR %d\n", v4, v5, v6, v7);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v7)
    return 11;
  else
    return 0;
}

void sub_212AA2F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;

  if (__p)
  {
    operator delete(__p);
    v38 = a21;
    if (!a21)
    {
LABEL_3:
      v39 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v38 = a21;
    if (!a21)
      goto LABEL_3;
  }
  operator delete(v38);
  v39 = a24;
  if (!a24)
  {
LABEL_4:
    v40 = a27;
    if (!a27)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v39);
  v40 = a27;
  if (!a27)
  {
LABEL_5:
    v41 = a30;
    if (!a30)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v40);
  v41 = a30;
  if (!a30)
  {
LABEL_6:
    v42 = a33;
    if (!a33)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v41);
  v42 = a33;
  if (!a33)
  {
LABEL_7:
    v43 = a36;
    if (!a36)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(v42);
  v43 = a36;
  if (!a36)
LABEL_8:
    _Unwind_Resume(exception_object);
LABEL_15:
  operator delete(v43);
  _Unwind_Resume(exception_object);
}

uint64_t eUICC::Perso::PersoImplementation::ValidatePersoDevice(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  const void *v7;
  size_t v8;
  char *v9;
  char *v10;
  std::string *v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  void *__p;
  void *v23;
  char *v24;
  void *v25;
  __int128 v26;

  v24 = 0;
  v25 = operator new(0x20uLL);
  v26 = xmmword_212B53010;
  strcpy((char *)v25, "ValidatePersoDeviceRequest.bin");
  __p = 0;
  v23 = 0;
  v7 = *(const void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = v6 - *(_QWORD *)a2;
  if (v6 != *(_QWORD *)a2)
  {
    if ((v8 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v6 - *(_QWORD *)a2);
    v10 = &v9[v8];
    __p = v9;
    v24 = &v9[v8];
    memcpy(v9, v7, v8);
    v23 = v10;
  }
  v11 = *(std::string **)(a1 + 40);
  if ((unint64_t)v11 >= *(_QWORD *)(a1 + 48))
  {
    v12 = std::vector<std::pair<std::string,std::vector<unsigned char>>>::__emplace_back_slow_path<std::string&,std::vector<unsigned char>&>((std::string **)(a1 + 32), (__int128 *)&v25, (uint64_t)&__p);
  }
  else
  {
    std::pair<std::string,std::vector<unsigned char>>::pair[abi:ne180100]<std::string&,std::vector<unsigned char>&,0>(*(std::string **)(a1 + 40), (__int128 *)&v25, (uint64_t)&__p);
    v12 = v11 + 2;
    *(_QWORD *)(a1 + 40) = v11 + 2;
  }
  *(_QWORD *)(a1 + 40) = v12;
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v26) < 0)
    operator delete(v25);
  v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 80))(*a3, a2, a2);
  if ((_DWORD)v16)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v13, v14, v15, (char)"kBBUReturnSuccess == ret");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "Failed to complete ValidatePerso command\n", v17, v18, v19, v21);
  }
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "ValidatePersoDevice %d\n", v13, v14, v15, v16);
  return v16;
}

void sub_212AA3204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t eUICC::Perso::PersoImplementation::SendReceiptServer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  size_t v6;
  char *v7;
  void *v8;
  char *v9;
  char *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::string *v21;
  std::string *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  CFTypeRef cf;
  void *v31;
  __int128 v32;
  void *v33;
  std::__shared_weak_count *v34;
  void *__p;
  void *v36;
  uint64_t v37;
  void *v38;
  __int128 v39;
  char *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  std::__shared_weak_count *v48;
  void *values[3];
  void *keys[2];
  const __CFString *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v47 = 0;
  v48 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v42 = 0;
  v43 = 0xAAAAAAAAAAAAAAAALL;
  v40 = 0;
  v41 = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 == *(_QWORD *)a2)
  {
    v8 = 0;
    v7 = 0;
    v33 = 0;
    keys[0] = 0;
    keys[1] = 0;
    v51 = 0;
  }
  else
  {
    if ((v6 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    v40 = v7;
    v42 = &v7[v6];
    memcpy(v7, v5, v6);
    v41 = &v7[v6];
    v8 = operator new(v6);
    memcpy(v8, v7, v6);
    v33 = 0;
    v9 = (char *)operator new(v6);
    v10 = &v9[v6];
    keys[0] = v9;
    v51 = (const __CFString *)&v9[v6];
    memcpy(v9, v7, v6);
    keys[1] = v10;
  }
  values[0] = 0;
  if (!ctu::cf::convert_copy())
  {
    v11 = 0;
    v12 = keys[0];
    if (!keys[0])
      goto LABEL_10;
    goto LABEL_9;
  }
  v11 = values[0];
  v33 = values[0];
  v12 = keys[0];
  if (keys[0])
  {
LABEL_9:
    keys[1] = v12;
    operator delete(v12);
  }
LABEL_10:
  v43 = (unint64_t)v11;
  v33 = 0;
  if (v8)
    operator delete(v8);
  if (v7)
  {
    v41 = v7;
    operator delete(v7);
  }
  *(_OWORD *)keys = xmmword_24CE7FFE0;
  v51 = CFSTR("SessionId");
  values[0] = CFSTR("SendReceipt");
  values[1] = v11;
  values[2] = *(void **)(a1 + 16);
  v16 = eUICC::Perso::PersoImplementation::SerializeKeyValuePairsIntoPlistData((const void **)keys, (const void **)values, 3);
  if ((_DWORD)v16)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v13, v14, v15, (char)"kBBUReturnSuccess == ret");
    v20 = 0;
    if (gBBULogMaskGet(void)::once != -1)
LABEL_43:
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  }
  else
  {
    v37 = 0;
    v38 = operator new(0x20uLL);
    v39 = xmmword_212B53010;
    strcpy((char *)v38, "SendReceiptServerRequest.plist");
    __p = 0;
    v36 = 0;
    v21 = *(std::string **)(a1 + 40);
    if ((unint64_t)v21 >= *(_QWORD *)(a1 + 48))
    {
      v22 = std::vector<std::pair<std::string,std::vector<unsigned char>>>::__emplace_back_slow_path<std::string&,std::vector<unsigned char>&>((std::string **)(a1 + 32), (__int128 *)&v38, (uint64_t)&__p);
    }
    else
    {
      std::pair<std::string,std::vector<unsigned char>>::pair[abi:ne180100]<std::string&,std::vector<unsigned char>&,0>(*(std::string **)(a1 + 40), (__int128 *)&v38, (uint64_t)&__p);
      v22 = v21 + 2;
      *(_QWORD *)(a1 + 40) = v21 + 2;
    }
    *(_QWORD *)(a1 + 40) = v22;
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v39) < 0)
      operator delete(v38);
    eUICC::Perso::PersoImplementation::PostDataSync((uint64_t)&v33, (_QWORD *)a1, (uint64_t)&v44);
    v26 = v33;
    v20 = v34;
    v47 = v33;
    v48 = v34;
    if (v33)
    {
      v31 = operator new(0x20uLL);
      v32 = xmmword_212B53030;
      strcpy((char *)v31, "SendReceiptServerResponse.plist");
      (*(void (**)(CFTypeRef *__return_ptr, void *))(*(_QWORD *)v26 + 40))(&cf, v26);
      eUICC::Perso::PersoImplementation::logTransactionCFData(a1, (__int128 *)&v31, (CFDataRef *)&cf);
      if (cf)
        CFRelease(cf);
      if (SHIBYTE(v32) < 0)
        operator delete(v31);
      v16 = 0;
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
      if (gBBULogMaskGet(void)::once != -1)
        goto LABEL_43;
    }
    else
    {
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v23, v24, v25, (char)"response");
      v16 = 53;
      if (gBBULogMaskGet(void)::once != -1)
        goto LABEL_43;
    }
  }
  _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "SendReceiptServer %d\n", v17, v18, v19, v16);
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return v16;
}

void sub_212AA3714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,char a34,void *a35,uint64_t a36)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

const void **ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t eUICC::Perso::PersoImplementation::SerializeKeyValuePairsIntoPlistData(const void **keys, const void **values, CFIndex numValues)
{
  const __CFAllocator *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFDictionaryRef v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFDataRef v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  int v23;
  char v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CFErrorRef *p_error;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  char v35;
  void *__p;
  char v37;
  CFErrorRef error;
  const void **v39;
  char v40;
  CFDictionaryRef v41;
  CFDataRef v42;
  CFTypeRef v43;

  v42 = 0;
  v43 = 0;
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v7 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], keys, values, numValues, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v41 = v7;
  v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!v7)
    v8 = 0;
  if (!v8)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v4, v5, v6, (char)"inDict");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "Failed to create dictionary\n", v14, v15, v16, v34);
    v12 = 0;
    goto LABEL_36;
  }
  error = 0;
  v39 = &v43;
  v12 = CFPropertyListCreateData(v3, v7, kCFPropertyListXMLFormat_v1_0, 0, &error);
  v42 = v12;
  v13 = *v39;
  if (error)
  {
    *v39 = error;
    if (!v13)
      goto LABEL_14;
  }
  else
  {
    *v39 = 0;
    if (!v13)
      goto LABEL_14;
  }
  CFRelease(v13);
LABEL_14:
  v17 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  if (!v12)
    v17 = 0;
  if (!v17)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v9, v10, v11, (char)"outData");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    ctu::cf::show((ctu::cf *)1, (uint64_t)v7, v22);
    v23 = v40;
    v24 = (char)error;
    ctu::cf::show((ctu::cf *)1, (uint64_t)v43, v25);
    p_error = &error;
    if (v23 < 0)
      LOBYTE(p_error) = v24;
    _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "Failed to serialize dictionary %s error %s\n", v26, v27, v28, (char)p_error);
    if (v37 < 0)
    {
      operator delete(__p);
      if ((v40 & 0x80000000) == 0)
        goto LABEL_36;
    }
    else if ((v40 & 0x80000000) == 0)
    {
      goto LABEL_36;
    }
    operator delete(error);
LABEL_36:
    v21 = 11;
    if (!v7)
      goto LABEL_38;
    goto LABEL_37;
  }
  if ((ctu::cf::assign() & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v18, v19, v20, (char)"success");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "Failed to assign output data\n", v30, v31, v32, v35);
    goto LABEL_36;
  }
  v21 = 0;
  if (v7)
LABEL_37:
    CFRelease(v7);
LABEL_38:
  if (v12)
    CFRelease(v12);
  if (v43)
    CFRelease(v43);
  return v21;
}

void sub_212AA3C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v25 - 72));
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)(v25 - 64));
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v25 - 56));
  _Unwind_Resume(a1);
}

uint64_t *eUICC::Perso::PersoImplementation::PostDataSync(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  CFTypeRef v32;
  __int128 v33;
  void *__p[2];
  uint64_t v35;
  CFTypeRef cf[3];
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  char *v43;

  v6 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v6 + 1) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *((_QWORD *)v6 + 3) = 850045863;
  *((_QWORD *)v6 + 2) = 0;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_QWORD *)v6 + 10) = 0;
  *((_QWORD *)v6 + 11) = 1018212795;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = off_24CE7F770;
  v42 = (unint64_t *)v6;
  v43 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *((_DWORD *)v6 + 34);
  if ((v8 & 2) != 0)
    std::__throw_future_error[abi:ne180100](1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *((_DWORD *)v6 + 34) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v40 = 0xAAAAAAAAAAAAAAAALL;
  v41 = 0xAAAAAAAAAAAAAAAALL;
  v38 = 0;
  v39 = 0;
  v37 = &v38;
  cf[1] = 0;
  cf[2] = 0;
  ctu::Http::HttpRequest::create();
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v37, v38);
  (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v40 + 8))(v40, *a2);
  v10 = v40;
  dispatch::future_callback_impl<std::shared_ptr<ctu::Http::HttpResponse>,std::shared_ptr<ctu::Http::HttpResponse>>(&v42, (void **)&v37);
  (*(void (**)(unint64_t, uint64_t *))(*(_QWORD *)v10 + 16))(v10, v37);
  if (v37)
    _Block_release(v37);
  (*(void (**)(unint64_t, double))(*(_QWORD *)v40 + 96))(v40, 60.0);
  v11 = v40;
  v12 = (const void *)a2[1];
  cf[0] = v12;
  if (v12)
    CFRetain(v12);
  (*(void (**)(unint64_t, CFTypeRef *))(*(_QWORD *)v11 + 88))(v11, cf);
  if (cf[0])
    CFRelease(cf[0]);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v40 + 56))(v40, a3);
  __p[1] = 0;
  v35 = 0;
  __p[0] = 0;
  (*(void (**)(unint64_t, void **))(*(_QWORD *)v40 + 40))(v40, __p);
  if (SHIBYTE(v35) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v33 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13 = v42;
  v42 = 0;
  std::__assoc_state<std::shared_ptr<ctu::Http::HttpResponse>>::move((uint64_t)v13, &v33);
  if (v13)
  {
    v14 = v13 + 1;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
      (*(void (**)(unint64_t *))(*v13 + 16))(v13);
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v33 + 16))(v33) == 1
    && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v33 + 24))(v33) == 200)
  {
    *(_OWORD *)a1 = v33;
    goto LABEL_31;
  }
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v16 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v33 + 16))(v33);
  (*(void (**)(_QWORD))(*(_QWORD *)v33 + 24))(v33);
  (*(void (**)(_QWORD))(*(_QWORD *)v33 + 32))(v33);
  (*(void (**)(CFTypeRef *__return_ptr))(*(_QWORD *)v33 + 72))(&v32);
  ctu::cf::show((ctu::cf *)v32, v17);
  _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "result %d code %d raw_error %ld error %s\n", v18, v19, v20, v16);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
    v21 = v32;
    if (!v32)
      goto LABEL_26;
    goto LABEL_25;
  }
  operator delete(v37);
  v21 = v32;
  if (v32)
LABEL_25:
    CFRelease(v21);
LABEL_26:
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_31:
  v25 = (std::__shared_weak_count *)v41;
  if (v41)
  {
    v26 = (unint64_t *)(v41 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v42;
  if (v42)
  {
    v29 = v42 + 1;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
      (*(void (**)(unint64_t *))(*v28 + 16))(v28);
  }
  return std::promise<std::shared_ptr<ctu::Http::HttpResponse>>::~promise((uint64_t *)&v43);
}

void sub_212AA40E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;

  if (*(char *)(v30 - 81) < 0)
    operator delete(*(void **)(v30 - 104));
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v30 - 80);
  v32 = *(unint64_t **)(v30 - 64);
  if (v32)
  {
    v33 = v32 + 1;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
      (*(void (**)(unint64_t *))(*v32 + 16))(v32);
  }
  std::promise<std::shared_ptr<ctu::Http::HttpResponse>>::~promise((uint64_t *)(v30 - 56));
  _Unwind_Resume(a1);
}

void eUICC::Perso::PersoImplementation::logTransactionCFData(uint64_t a1, __int128 *a2, CFDataRef *a3)
{
  uint64_t (*v4)(uint64_t);
  const UInt8 *BytePtr;
  CFIndex Length;
  size_t v9;
  char *v10;
  char *v11;
  std::string *v12;
  std::string *v13;
  void *__p;
  void *v15;
  char *v16;

  v4 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  if (!*a3)
    v4 = 0;
  if (v4)
  {
    BytePtr = CFDataGetBytePtr(*a3);
    Length = CFDataGetLength(*a3);
    v15 = 0;
    v16 = 0;
    __p = 0;
    if (Length)
    {
      v9 = Length;
      if (Length < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v10 = (char *)operator new(Length);
      v11 = &v10[v9];
      __p = v10;
      v16 = &v10[v9];
      memcpy(v10, BytePtr, v9);
      v15 = v11;
    }
    v12 = *(std::string **)(a1 + 40);
    if ((unint64_t)v12 >= *(_QWORD *)(a1 + 48))
    {
      v13 = std::vector<std::pair<std::string,std::vector<unsigned char>>>::__emplace_back_slow_path<std::string&,std::vector<unsigned char>&>((std::string **)(a1 + 32), a2, (uint64_t)&__p);
    }
    else
    {
      std::pair<std::string,std::vector<unsigned char>>::pair[abi:ne180100]<std::string&,std::vector<unsigned char>&,0>(*(std::string **)(a1 + 40), a2, (uint64_t)&__p);
      v13 = v12 + 2;
      *(_QWORD *)(a1 + 40) = v12 + 2;
    }
    *(_QWORD *)(a1 + 40) = v13;
    if (__p)
    {
      v15 = __p;
      operator delete(__p);
    }
  }
}

void sub_212AA4328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t eUICC::Perso::PersoImplementation::CreateDictionaryFromPlistData(uint64_t *a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFData *v9;
  uint64_t (*v10)(uint64_t);
  const __CFAllocator *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  CFTypeID v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFTypeID v27;
  const void *v28;
  const void *v29;
  int v30;
  char v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CFErrorRef *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CFErrorRef *p_error;
  char v43;
  void *__p;
  char v45;
  CFErrorRef error;
  const void **v47;
  char v48;
  void *v49;
  ctu::cf *v50;

  v49 = 0;
  v50 = 0;
  v9 = (const __CFData *)*a1;
  v10 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  if (!*a1)
    v10 = 0;
  if (!v10)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", a6, a7, a8, (char)"inData");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "Failed to create data\n", v18, v19, v20, v43);
    v21 = 11;
    goto LABEL_50;
  }
  v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  error = 0;
  v47 = (const void **)&v50;
  v16 = (void *)CFPropertyListCreateWithData(v12, v9, 0, 0, &error);
  v49 = v16;
  v17 = *v47;
  if (error)
  {
    *v47 = error;
    if (!v17)
      goto LABEL_14;
  }
  else
  {
    *v47 = 0;
    if (!v17)
      goto LABEL_14;
  }
  CFRelease(v17);
LABEL_14:
  v22 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  if (!v16)
    v22 = 0;
  if (v22)
  {
    v23 = CFGetTypeID(v16);
    if (v23 == CFDictionaryGetTypeID())
    {
      if (v16)
      {
        v27 = CFGetTypeID(v16);
        if (v27 == CFDictionaryGetTypeID())
        {
          CFRetain(v16);
          v28 = *a2;
          *a2 = v16;
          if (!v28)
            goto LABEL_48;
        }
        else
        {
          v28 = *a2;
          *a2 = 0;
          if (!v28)
            goto LABEL_48;
        }
      }
      else
      {
        v28 = *a2;
        *a2 = 0;
        if (!v28)
        {
LABEL_48:
          v21 = 0;
          if (!v16)
            goto LABEL_50;
          goto LABEL_49;
        }
      }
      CFRelease(v28);
      goto LABEL_48;
    }
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v24, v25, v26, (char)"CFGetTypeID(outPlist.get()) == CFDictionaryGetTypeID()");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    ctu::cf::show((ctu::cf *)v16, v37);
    if (v48 >= 0)
      p_error = &error;
    else
      LOBYTE(p_error) = (_BYTE)error;
    _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "Deserialized plist data is not a dictionary: %s\n", v38, v39, v40, (char)p_error);
    if ((v48 & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(25, 0xFFFFFFFFLL, "PersoImpl", "", "Condition <<%s>> failed %s %s/%d\n", v13, v14, v15, (char)"outPlist");
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  ctu::cf::show((ctu::cf *)1, *a1, v29);
  v30 = v48;
  v31 = (char)error;
  ctu::cf::show(v50, v32);
  v36 = &error;
  if (v30 < 0)
    LOBYTE(v36) = v31;
  _BBULog(22, 0xFFFFFFFFLL, "PersoImpl", "", "Failed to deserialize dictionary %s error %s\n", v33, v34, v35, (char)v36);
  if ((v45 & 0x80000000) == 0)
  {
    if ((v48 & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
  operator delete(__p);
  if (v48 < 0)
LABEL_30:
    operator delete(error);
LABEL_31:
  v21 = 11;
  if (v16)
LABEL_49:
    CFRelease(v16);
LABEL_50:
  if (v50)
    CFRelease(v50);
  return v21;
}

void sub_212AA475C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v24 - 48));
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v24 - 40));
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v24 - 48));
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v24 - 40));
  _Unwind_Resume(a1);
}

void sub_212AA47F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  ctu::cf::detail::TakeOwnershipProxy<__CFError>::~TakeOwnershipProxy((const void **)va);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v8 - 48));
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v8 - 40));
  _Unwind_Resume(a1);
}

void sub_212AA4814(_Unwind_Exception *a1)
{
  uint64_t v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v1 - 48));
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v1 - 40));
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFData const>::operator=<void const,void>(const void **a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;

  if (!cf)
  {
LABEL_4:
    v5 = *a1;
    *a1 = cf;
    if (!v5)
      return a1;
    goto LABEL_7;
  }
  v4 = CFGetTypeID(cf);
  if (v4 == CFDataGetTypeID())
  {
    CFRetain(cf);
    goto LABEL_4;
  }
  v5 = *a1;
  *a1 = 0;
  if (v5)
LABEL_7:
    CFRelease(v5);
  return a1;
}

const void **ctu::cf::detail::TakeOwnershipProxy<__CFError>::~TakeOwnershipProxy(const void **a1)
{
  const void **v2;
  const void *v3;
  const void *v4;

  v3 = *a1;
  v2 = (const void **)a1[1];
  v4 = *v2;
  if (v3)
  {
    *v2 = v3;
    if (v4)
      goto LABEL_5;
  }
  else
  {
    *v2 = 0;
    if (v4)
LABEL_5:
      CFRelease(v4);
  }
  return a1;
}

uint64_t ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<eUICC::Perso::PersoImplementation>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__shared_ptr_pointer<eUICC::Perso::PersoImplementation *,std::shared_ptr<eUICC::Perso::PersoImplementation>::__shared_ptr_default_delete<eUICC::Perso::PersoImplementation,eUICC::Perso::PersoImplementation>,std::allocator<eUICC::Perso::PersoImplementation>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<eUICC::Perso::PersoImplementation *,std::shared_ptr<eUICC::Perso::PersoImplementation>::__shared_ptr_default_delete<eUICC::Perso::PersoImplementation,eUICC::Perso::PersoImplementation>,std::allocator<eUICC::Perso::PersoImplementation>>::__on_zero_shared(uint64_t a1)
{
  eUICC::Perso::PersoImplementation *v1;
  void *v2;

  v1 = *(eUICC::Perso::PersoImplementation **)(a1 + 24);
  if (v1)
  {
    eUICC::Perso::PersoImplementation::~PersoImplementation(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<eUICC::Perso::PersoImplementation *,std::shared_ptr<eUICC::Perso::PersoImplementation>::__shared_ptr_default_delete<eUICC::Perso::PersoImplementation,eUICC::Perso::PersoImplementation>,std::allocator<eUICC::Perso::PersoImplementation>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B530D2)
    return a1 + 24;
  if (((v3 & 0x8000000212B530D2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B530D2))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B530D2 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void eUICC::Perso::PersoImplementation::~PersoImplementation(eUICC::Perso::PersoImplementation *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  const void *v6;
  const void *v7;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        if (*(char *)(v3 - 25) < 0)
          operator delete(*(void **)(v3 - 48));
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  v6 = (const void *)*((_QWORD *)this + 2);
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 1);
  if (v7)
    CFRelease(v7);
  if (*(_QWORD *)this)
    dispatch_release(*(dispatch_object_t *)this);
}

uint64_t __cxx_global_var_init_3()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ICEARIContext>::~PthreadMutexGuardPolicy, &ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance, &dword_212A4D000);
  }
  return result;
}

uint64_t __cxx_global_var_init_84()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<eUICC::Perso::PersoImplementation>::~PthreadMutexGuardPolicy, &ctu::Singleton<eUICC::Perso::PersoImplementation,eUICC::Perso::PersoImplementation,ctu::PthreadMutexGuardPolicy<eUICC::Perso::PersoImplementation>>::sInstance, &dword_212A4D000);
  }
  return result;
}

void BBUEURELFImage::~BBUEURELFImage(BBUEURELFImage *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  operator delete(this);
}

uint64_t BBUEURELFImage::getWritePayloadData(BBUEURELFImage *this, unsigned __int8 *a2, uint64_t a3, unsigned int a4)
{
  uint64_t result;
  void *exception;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;

  if ((*(unsigned int (**)(BBUEURELFImage *))(*(_QWORD *)this + 32))(this) <= a4)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 77, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Eureka/ELF/BBUEURELFImage.cpp", 0x16u, (ctu::LogMessageBuffer *)"Assertion failure(( offset < getWritePayloadLength()) && \"Error: Chunk size is not sufficient to write payload data of the ELF image.\")", v10, v11, v12, v19);
    goto LABEL_8;
  }
  v20 = -1431655766;
  result = (*(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t, int *, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2, a3, &v20, *((_DWORD *)this + 6) + a4);
  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 78, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Eureka/ELF/BBUEURELFImage.cpp", 0x19u, (ctu::LogMessageBuffer *)"Assertion failure(( ret == kBBUReturnSuccess) && \"Failed to copy from ELF image!\")", v13, v14, v15, v19);
    goto LABEL_8;
  }
  if (v20 != (_DWORD)a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 78, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Eureka/ELF/BBUEURELFImage.cpp", 0x1Au, (ctu::LogMessageBuffer *)"Assertion failure(( amountCopied == amount) && \"Copied data size mismatch: Failed to copy from ELF image!\")", v16, v17, v18, v19);
LABEL_8:
  }
  return result;
}

void sub_212AA4D68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AA4D7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AA4D90(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const char *BBUEURELFImage::getName(BBUEURELFImage *this)
{
  return "ELF";
}

uint64_t BBUFSServerParametersInit(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  if (a1 && __s1)
  {
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 320) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    v10 = strnlen(__s1, 0x100uLL);
    v11 = TelephonyUtilStrlcpy();
    v18 = v11 != v10 || (unint64_t)(v11 + 1) >= 0x101;
    v19 = !v18;
    if (v18)
      _BBUFSDebugPrint("BBUFSServerParametersInit", "required path length = %zu, copied = %zu, max length = %zu\n", v12, v13, v14, v15, v16, v17, v10 + 1);
    *(_QWORD *)(a1 + 360) = a3;
  }
  else
  {
    _BBUFSDebugPrint("BBUFSServerParametersInit", "invalid parameters specified: parameters = %p, destination = %s\n", a3, a4, a5, a6, a7, a8, a1);
    return 0;
  }
  return v19;
}

uint64_t BBUFSServerPrepare(bbufs *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  if (a1)
  {
    if ((bbufs::prepareDestination(a1, a2) & 1) != 0)
    {
      return 1;
    }
    else
    {
      _BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v8, v9, v10, v11, v12, v13, v15);
      return 0;
    }
  }
  else
  {
    _BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", a3, a4, a5, a6, a7, a8, 0);
    return 0;
  }
}

uint64_t BBUFSServerCreate(_QWORD *a1, uint64_t (**a2)(const char *, const char *, char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  capabilities::radio *v10;
  int v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  uint64_t (*v15)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  BOOL (*v16)(uint64_t);
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char v21;

  if (!a1)
  {
    v12 = 0;
    v13 = "bad parameters for file server creation\n";
    goto LABEL_16;
  }
  a1[50] = 0;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  v10 = (capabilities::radio *)memcpy(a1, a2, 0x170uLL);
  v11 = capabilities::radio::vendor(v10);
  if (v11 == 3)
  {
    v14 = INTStateMachineSetConfigDefaults;
    v15 = INTStateMachineSetConfig;
    v16 = INTStateMachineSnapshotInProgress;
    v17 = INTStateMachinePerformSnapshot;
    v18 = INTStateMachineStop;
    v19 = INTStateMachineStart;
LABEL_9:
    sBBUFSServerStart = v19;
    sBBUFSServerStop = v18;
    sBBUFSServerFlush = v17;
    sBBUFSServerFlushInProgress = v16;
    sBBUFSServerSetConfig = v15;
    sBBUFSServerSetConfigDefaults = v14;
LABEL_11:
    if (((unsigned int (*)(_QWORD *))v14)(a1))
      goto LABEL_12;
LABEL_15:
    v12 = 0;
    v13 = "BBUFSServer create failed\n";
    goto LABEL_16;
  }
  if (v11 == 2)
  {
    v14 = ICEStateMachineSetConfigDefaults;
    v15 = ICEStateMachineSetConfig;
    v16 = ICEStateMachineSnapshotInProgress;
    v17 = ICEStateMachinePerformSnapshot;
    v18 = ICEStateMachineStop;
    v19 = ICEStateMachineStart;
    goto LABEL_9;
  }
  if (v11 != 1)
  {
    _BBUFSDebugPrint("BBUFSServerCreate", "invalid state machine type %u\n", a3, a4, a5, a6, a7, a8, v11);
    v14 = sBBUFSServerSetConfigDefaults;
    if (!sBBUFSServerSetConfigDefaults)
      goto LABEL_15;
    goto LABEL_11;
  }
  sBBUFSServerStart = EURStateMachineStart;
  sBBUFSServerStop = EURStateMachineStop;
  sBBUFSServerFlush = EURStateMachinePerformFlush;
  sBBUFSServerFlushInProgress = EURStateMachineFlushInProgress;
  sBBUFSServerSetConfig = EURStateMachineSetConfig;
  sBBUFSServerSetConfigDefaults = 0;
LABEL_12:
  if (*a2)
    sDelegate = *a2;
  v12 = 1;
  v13 = "BBUFSServer created successfully\n";
LABEL_16:
  _BBUFSDebugPrint("BBUFSServerCreate", v13, a3, a4, a5, a6, a7, a8, v21);
  return v12;
}

BOOL BBUFSServerRelease(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  std::__shared_weak_count *v10;
  const char *v11;
  char v13;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 360))
    {
      _BBUFSDebugPrint("BBUFSServerRelease", "BBUFSServer releasing registry\n", a3, a4, a5, a6, a7, a8, v13);
      v9 = *(_QWORD **)(a1 + 360);
      if (v9)
      {
        v10 = (std::__shared_weak_count *)v9[1];
        if (v10)
          std::__shared_weak_count::__release_weak(v10);
        operator delete(v9);
      }
      *(_QWORD *)(a1 + 360) = 0;
    }
    sBBUFSServerStart = 0;
    sBBUFSServerStop = 0;
    sBBUFSServerFlush = 0;
    sBBUFSServerFlushInProgress = 0;
    sBBUFSServerSetConfig = 0;
    v11 = "BBUFSServer destroyed\n";
    sBBUFSServerSetConfigDefaults = 0;
  }
  else
  {
    v11 = "trying to release invalid file server\n";
  }
  _BBUFSDebugPrint("BBUFSServerRelease", v11, a3, a4, a5, a6, a7, a8, v13);
  return a1 != 0;
}

uint64_t BBUFSServerStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (a1)
  {
    if (sBBUFSServerStart)
      return sBBUFSServerStart();
    _BBUFSDebugPrint("BBUFSServerStart", "sBBUFSServerStart function not initialized\n", a3, a4, a5, a6, a7, a8, vars0);
  }
  return 0;
}

uint64_t BBUFSServerFlush(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (a1)
  {
    if (sBBUFSServerFlush)
      return sBBUFSServerFlush();
    _BBUFSDebugPrint("BBUFSServerFlush", "sBBUFSServerFlush function not initialized\n", a3, a4, a5, a6, a7, a8, vars0);
  }
  return 0;
}

uint64_t BBUFSServerFlushInProgress(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (a1)
  {
    if (sBBUFSServerFlushInProgress)
      return sBBUFSServerFlushInProgress();
    _BBUFSDebugPrint("BBUFSServerFlushInProgress", "sBBUFSServerFlushInProgress function not initialized\n", a3, a4, a5, a6, a7, a8, vars0);
  }
  return 0;
}

uint64_t BBUFSServerSetConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (a1)
  {
    if (sBBUFSServerSetConfig)
      return sBBUFSServerSetConfig();
    _BBUFSDebugPrint("BBUFSServerSetConfig", "sBBUFSServerSetConfig function not initialized\n", a3, 0, a5, a6, a7, a8, vars0);
  }
  return 0;
}

uint64_t BBUFSServerSetConfigDefaults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (a1)
  {
    if (sBBUFSServerSetConfigDefaults)
      return sBBUFSServerSetConfigDefaults();
    _BBUFSDebugPrint("BBUFSServerSetConfigDefaults", "sBBUFSServerSetConfigDefaults function not initialized\n", a3, a4, a5, a6, a7, a8, vars0);
  }
  return 0;
}

uint64_t BBUFSServerStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (a1)
  {
    if (sBBUFSServerStop)
      return sBBUFSServerStop();
    _BBUFSDebugPrint("BBUFSServerStop", "sBBUFSServerStop function not initialized\n", a3, a4, a5, a6, a7, a8, vars0);
  }
  return 0;
}

uint64_t BBUEUR10HashData::compare(BBUEUR10HashData *this, BBUFeedback *a2, const BBUHashData *lpsrc)
{
  unsigned __int8 *v4;
  const unsigned __int8 *v5;
  unsigned int v6;
  int v7;

  v4 = (unsigned __int8 *)this;
  if (!lpsrc)
  {
    v5 = 0;
LABEL_13:
    v6 = 0;
    goto LABEL_14;
  }
  v5 = (const unsigned __int8 *)this;
  if (!this)
    goto LABEL_13;
  this = (BBUEUR10HashData *)BBUHashData::compareHash((BBUHashData *)v4, a2, v4 + 8, (const unsigned __int8 *)this + 8, "SBL1");
  if (!(_DWORD)this)
    goto LABEL_13;
  this = (BBUEUR10HashData *)BBUHashData::compareHash((BBUHashData *)v4, a2, v4 + 40, v5 + 40, "RPM");
  if (!(_DWORD)this)
    goto LABEL_13;
  this = (BBUEUR10HashData *)BBUHashData::compareHash((BBUHashData *)v4, a2, v4 + 264, v5 + 264, "ACDB");
  if (!(_DWORD)this)
    goto LABEL_13;
  this = (BBUEUR10HashData *)BBUHashData::compareHash((BBUHashData *)v4, a2, v4 + 72, v5 + 72, "APPS");
  if (!(_DWORD)this)
    goto LABEL_13;
  this = (BBUEUR10HashData *)BBUHashData::compareHash((BBUHashData *)v4, a2, v4 + 104, v5 + 104, "DSP3");
  if (!(_DWORD)this)
    goto LABEL_13;
  this = (BBUEUR10HashData *)BBUHashData::compareHash((BBUHashData *)v4, a2, v4 + 136, v5 + 136, "MBA");
  if (!(_DWORD)this)
    goto LABEL_13;
  this = (BBUEUR10HashData *)BBUHashData::compareHash((BBUHashData *)v4, a2, v4 + 168, v5 + 168, "QDSP6SW");
  if (!(_DWORD)this)
    goto LABEL_13;
  this = (BBUEUR10HashData *)BBUHashData::compareHash((BBUHashData *)v4, a2, v4 + 200, v5 + 200, "TZ");
  if (!(_DWORD)this)
    goto LABEL_13;
  this = (BBUEUR10HashData *)BBUHashData::compareHash((BBUHashData *)v4, a2, v4 + 232, v5 + 232, "WDT");
  v6 = this;
LABEL_14:
  v7 = capabilities::updater::supportsBbcfgImage(this) ^ 1;
  if ((v7 & 1) != 0 || !v6)
    return v7 & v6;
  else
    return BBUHashData::compareHash((BBUHashData *)v4, a2, v4 + 296, v5 + 296, "BBCFG");
}

void BBUEUR10HashData::showHashes(BBUEUR10HashData *this, BBUFeedback *a2)
{
  const char *p_p;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  void *__p;
  uint64_t v14;
  uint64_t v15;

  __p = 0;
  v14 = 0;
  v15 = 0;
  (*(void (**)(BBUEUR10HashData *))(*(_QWORD *)this + 32))(this);
  ctu::assign();
  BBUFeedback::handleComment(a2, "\t %s:  %s", "SBL1_HASH", (const char *)&__p);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  __p = 0;
  v14 = 0;
  v15 = 0;
  (*(void (**)(BBUEUR10HashData *))(*(_QWORD *)this + 32))(this);
  ctu::assign();
  if (v15 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  BBUFeedback::handleComment(a2, "\t %s:  %s", "RPM_HASH", p_p);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  __p = 0;
  v14 = 0;
  v15 = 0;
  (*(void (**)(BBUEUR10HashData *))(*(_QWORD *)this + 32))(this);
  ctu::assign();
  if (v15 >= 0)
    v5 = (const char *)&__p;
  else
    v5 = (const char *)__p;
  BBUFeedback::handleComment(a2, "\t %s:  %s", "APPS_HASH", v5);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  __p = 0;
  v14 = 0;
  v15 = 0;
  (*(void (**)(BBUEUR10HashData *))(*(_QWORD *)this + 32))(this);
  ctu::assign();
  if (v15 >= 0)
    v6 = (const char *)&__p;
  else
    v6 = (const char *)__p;
  BBUFeedback::handleComment(a2, "\t %s:  %s", "DSP3_HASH", v6);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  __p = 0;
  v14 = 0;
  v15 = 0;
  (*(void (**)(BBUEUR10HashData *))(*(_QWORD *)this + 32))(this);
  ctu::assign();
  if (v15 >= 0)
    v7 = (const char *)&__p;
  else
    v7 = (const char *)__p;
  BBUFeedback::handleComment(a2, "\t %s:  %s", "MBA_HASH", v7);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  __p = 0;
  v14 = 0;
  v15 = 0;
  (*(void (**)(BBUEUR10HashData *))(*(_QWORD *)this + 32))(this);
  ctu::assign();
  if (v15 >= 0)
    v8 = (const char *)&__p;
  else
    v8 = (const char *)__p;
  BBUFeedback::handleComment(a2, "\t %s:  %s", "QDSP6SW_HASH", v8);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  __p = 0;
  v14 = 0;
  v15 = 0;
  (*(void (**)(BBUEUR10HashData *))(*(_QWORD *)this + 32))(this);
  ctu::assign();
  if (v15 >= 0)
    v9 = (const char *)&__p;
  else
    v9 = (const char *)__p;
  BBUFeedback::handleComment(a2, "\t %s:  %s", "TZ_HASH", v9);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  __p = 0;
  v14 = 0;
  v15 = 0;
  (*(void (**)(BBUEUR10HashData *))(*(_QWORD *)this + 32))(this);
  ctu::assign();
  if (v15 >= 0)
    v10 = (const char *)&__p;
  else
    v10 = (const char *)__p;
  BBUFeedback::handleComment(a2, "\t %s:  %s", "WDT_HASH", v10);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  __p = 0;
  v14 = 0;
  v15 = 0;
  (*(void (**)(BBUEUR10HashData *))(*(_QWORD *)this + 32))(this);
  ctu::assign();
  if (v15 >= 0)
    v11 = (const char *)&__p;
  else
    v11 = (const char *)__p;
  BBUFeedback::handleComment(a2, "\t %s:  %s", "ACDB_HASH", v11);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  __p = 0;
  v14 = 0;
  v15 = 0;
  (*(void (**)(BBUEUR10HashData *))(*(_QWORD *)this + 32))(this);
  ctu::assign();
  if (v15 >= 0)
    v12 = (const char *)&__p;
  else
    v12 = (const char *)__p;
  BBUFeedback::handleComment(a2, "\t %s:  %s", "BBCFG_HASH", v12);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
}

void sub_212AA59BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _BBUException::constructCommon(uint64_t a1, int a2, char *a3, unsigned int a4, ctu::LogMessageBuffer *this, char *a6)
{
  uint64_t v10;
  __int128 v11;
  const char *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  uint64_t v30;
  std::string *v31;
  std::string v32;
  void *__p[2];
  unsigned __int8 v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  __int128 v40;
  int64_t v41;
  std::string v42;

  memset(&v42, 170, sizeof(v42));
  ctu::LogMessageBuffer::vCreateWithFormat(this, a6, a3);
  v10 = MEMORY[0x212BF99EC](&v40);
  v11 = *(_OWORD *)v10;
  v42.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v11;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)v10 = 0;
  MEMORY[0x212BF9A10](&v40);
  *((_BYTE *)&v35.__r_.__value_.__s + 23) = 1;
  LOWORD(v35.__r_.__value_.__l.__data_) = 32;
  v12 = BBUReturnAsString::BBUReturnStrings[a2];
  v13 = strlen(v12);
  v14 = std::string::append(&v35, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v36, "@", 1uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  strlen(a3);
  ctu::basename();
  if ((v34 & 0x80u) == 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if ((v34 & 0x80u) == 0)
    v19 = v34;
  else
    v19 = (std::string::size_type)__p[1];
  v20 = std::string::append(&v37, (const std::string::value_type *)v18, v19);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v38, ":", 1uLL);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v32, a4);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v32;
  else
    v24 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    size = v32.__r_.__value_.__l.__size_;
  v26 = std::string::append(&v39, (const std::string::value_type *)v24, size);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v41 = v26->__r_.__value_.__r.__words[2];
  v40 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v41 >= 0)
    v28 = (const std::string::value_type *)&v40;
  else
    v28 = (const std::string::value_type *)v40;
  if (v41 >= 0)
    v29 = HIBYTE(v41);
  else
    v29 = *((_QWORD *)&v40 + 1);
  std::string::append(&v42, v28, v29);
  if (SHIBYTE(v41) < 0)
  {
    operator delete((void *)v40);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_33;
    }
  }
  else if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v32.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v39.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_23:
    if (((char)v34 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v38.__r_.__value_.__l.__data_);
  if (((char)v34 & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(__p[0]);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_25:
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
LABEL_37:
    operator delete(v36.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_38;
  }
LABEL_36:
  operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_37;
LABEL_26:
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_27;
LABEL_38:
  operator delete(v35.__r_.__value_.__l.__data_);
LABEL_27:
  *(_OWORD *)(a1 + 8) = 0u;
  v30 = a1 + 8;
  *(_OWORD *)(v30 + 480) = 0u;
  *(_OWORD *)(v30 + 496) = 0u;
  *(_OWORD *)(v30 + 448) = 0u;
  *(_OWORD *)(v30 + 464) = 0u;
  *(_OWORD *)(v30 + 416) = 0u;
  *(_OWORD *)(v30 + 432) = 0u;
  *(_OWORD *)(v30 + 384) = 0u;
  *(_OWORD *)(v30 + 400) = 0u;
  *(_OWORD *)(v30 + 352) = 0u;
  *(_OWORD *)(v30 + 368) = 0u;
  *(_OWORD *)(v30 + 320) = 0u;
  *(_OWORD *)(v30 + 336) = 0u;
  *(_OWORD *)(v30 + 288) = 0u;
  *(_OWORD *)(v30 + 304) = 0u;
  *(_OWORD *)(v30 + 256) = 0u;
  *(_OWORD *)(v30 + 272) = 0u;
  *(_OWORD *)(v30 + 224) = 0u;
  *(_OWORD *)(v30 + 240) = 0u;
  *(_OWORD *)(v30 + 192) = 0u;
  *(_OWORD *)(v30 + 208) = 0u;
  *(_OWORD *)(v30 + 160) = 0u;
  *(_OWORD *)(v30 + 176) = 0u;
  *(_OWORD *)(v30 + 128) = 0u;
  *(_OWORD *)(v30 + 144) = 0u;
  *(_OWORD *)(v30 + 96) = 0u;
  *(_OWORD *)(v30 + 112) = 0u;
  *(_OWORD *)(v30 + 64) = 0u;
  *(_OWORD *)(v30 + 80) = 0u;
  *(_OWORD *)(v30 + 32) = 0u;
  *(_OWORD *)(v30 + 48) = 0u;
  v31 = &v42;
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v31 = (std::string *)v42.__r_.__value_.__r.__words[0];
  *(_OWORD *)(v30 + 16) = 0uLL;
  snprintf((char *)v30, 0x200uLL, "%s\n", (const char *)v31);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
}

void sub_212AA5D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (*(char *)(v54 - 121) < 0)
  {
    operator delete(*(void **)(v54 - 144));
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a54 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a47 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a21 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a33 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_9:
    if ((*(char *)(v54 - 57) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a22);
  if ((*(char *)(v54 - 57) & 0x80000000) == 0)
LABEL_10:
    _Unwind_Resume(exception_object);
LABEL_19:
  operator delete(*(void **)(v54 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t _BBUException::_BBUException(uint64_t a1, int a2, char *a3, unsigned int a4, ctu::LogMessageBuffer *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  *(_DWORD *)(a1 + 520) = a2;
  *(_QWORD *)a1 = off_24CE80110;
  _BBUException::constructCommon(a1, a2, a3, a4, a5, &a9);
  return a1;
}

void sub_212AA5EF0(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void _BBUException::~_BBUException(std::exception *this)
{
  void *v1;

  std::exception::~exception(this);
  operator delete(v1);
}

uint64_t _BBUException::what(_BBUException *this)
{
  return (uint64_t)this + 8;
}

void (__cdecl ***std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this)))(std::fstream *__hidden this)
{
  _QWORD *v2;

  v2 = a1 + 54;
  MEMORY[0x212BFA184](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x212BFA3D0](v2);
  return a1;
}

void `non-virtual thunk to'std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  MEMORY[0x212BFA184](a1 + 1);
  std::iostream::~basic_iostream();
  JUMPOUT(0x212BFA3D0);
}

{
  _QWORD *v1;
  void (__cdecl ***v2)(std::fstream *__hidden);

  v1 = a1 + 52;
  v2 = a1 - 2;
  MEMORY[0x212BFA184](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x212BFA3D0](v1);
  operator delete(v2);
}

void `virtual thunk to'std::fstream::~fstream(_QWORD *a1)
{
  void (__cdecl ***v1)(std::fstream *__hidden);

  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  MEMORY[0x212BFA184](v1 + 3);
  std::iostream::~basic_iostream();
  JUMPOUT(0x212BFA3D0);
}

{
  void (__cdecl ***v1)(std::fstream *__hidden);

  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  MEMORY[0x212BFA184](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x212BFA3D0](v1 + 54);
  operator delete(v1);
}

void std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  _QWORD *v2;

  v2 = a1 + 54;
  MEMORY[0x212BFA184](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x212BFA3D0](v2);
  operator delete(a1);
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB808] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB6D8], MEMORY[0x24BEDAC00]);
}

uint64_t __cxx_global_var_init_4()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_212A4D000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance, &dword_212A4D000);
  }
  return result;
}

eUICC::eUICCVinylICEValve *eUICC::eUICCVinylICEValve::eUICCVinylICEValve(eUICC::eUICCVinylICEValve *this, void *a2, int a3, char a4)
{
  eUICC::VinylCommandDriver **v5;
  int v6;
  eUICC::VinylCommandDriver *v7;
  eUICC::VinylCommandDriver *v8;
  void *v9;

  *((_BYTE *)this + 289) = 0;
  *((_BYTE *)this + 304) = 0;
  *(_QWORD *)this = &off_24CE80348;
  v5 = (eUICC::VinylCommandDriver **)((char *)this + 312);
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 37) = a2;
  v6 = a3 != 1;
  if (a3 == 255)
    v6 = 255;
  *((_DWORD *)this + 73) = v6;
  *((_BYTE *)this + 290) = a4;
  IceAriGetContext();
  v7 = (eUICC::VinylCommandDriver *)operator new(8uLL);
  eUICC::VinylCommandDriver::VinylCommandDriver();
  v8 = *v5;
  *v5 = v7;
  if (v8)
  {
    eUICC::VinylCommandDriver::~VinylCommandDriver(v8);
    operator delete(v9);
  }
  *((_BYTE *)this + 304) = 15;
  return this;
}

void sub_212AA6290(_Unwind_Exception *a1)
{
  eUICC::VinylCommandDriver **v1;
  void *v2;

  operator delete(v2);
  std::unique_ptr<eUICC::VinylCommandDriver>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_212AA62AC(_Unwind_Exception *a1)
{
  eUICC::VinylCommandDriver **v1;

  std::unique_ptr<eUICC::VinylCommandDriver>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl *IceAriGetContext(void)
{
  std::__shared_weak_count_vtbl *v0;
  std::__shared_weak_count *v1;
  char v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  pthread_mutex_lock(&ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance);
  if (!qword_253D31EB8)
  {
    v0 = (std::__shared_weak_count_vtbl *)operator new(0x28uLL);
    LOBYTE(v0->__on_zero_shared_weak) = 0;
    v1 = (std::__shared_weak_count *)operator new(0x20uLL);
    v1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24CE803E8;
    v1->__shared_owners_ = 0;
    v1->__shared_weak_owners_ = 0;
    v1[1].__vftable = v0;
    v3 = (std::__shared_weak_count *)off_253D31EC0;
    qword_253D31EB8 = (uint64_t)v0;
    off_253D31EC0 = v1;
    if (!v3)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v0 = (std::__shared_weak_count_vtbl *)qword_253D31EB8;
  v1 = (std::__shared_weak_count *)off_253D31EC0;
  if (!off_253D31EC0)
  {
    v2 = 1;
    goto LABEL_12;
  }
LABEL_9:
  v6 = (unint64_t *)&v1->__shared_owners_;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v2 = 0;
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance);
  if ((v2 & 1) != 0)
    return v0;
  v8 = (unint64_t *)&v1->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v0;
  ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
  std::__shared_weak_count::__release_weak(v1);
  return v0;
}

void sub_212AA63E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance);
  _Unwind_Resume(a1);
}

eUICC::VinylCommandDriver **std::unique_ptr<eUICC::VinylCommandDriver>::~unique_ptr[abi:ne180100](eUICC::VinylCommandDriver **a1)
{
  eUICC::VinylCommandDriver *v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    eUICC::VinylCommandDriver::~VinylCommandDriver(v2);
    operator delete(v3);
  }
  return a1;
}

void *eUICC::eUICCVinylICEValve::GetVinylType@<X0>(eUICC::eUICCVinylICEValve *this@<X0>, void *a2@<X8>)
{
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 287) = 1;
  return memcpy(a2, (char *)this + 8, 0x11AuLL);
}

uint64_t eUICC::eUICCVinylICEValve::GetData@<X0>(eUICC::eUICCVinylICEValve *this@<X0>, void *a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _DWORD *v10;
  void *v11;
  _BYTE *v12;
  void *v13;
  __int128 v14;
  _DWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  __int128 v44;
  _OWORD *v45;
  _OWORD *v46;
  _OWORD *v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  char v55;
  char v56;
  _OWORD v57[4];
  void *__p[2];
  _DWORD **v59;
  _OWORD v60[4];
  unint64_t v61;
  std::chrono::nanoseconds __ns;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v57[3] = v4;
  *(_OWORD *)__p = v4;
  v57[1] = v4;
  v57[2] = v4;
  v57[0] = v4;
  AriSdk::ARI_IBIVinylGetDataReq_SDK::ARI_IBIVinylGetDataReq_SDK((AriSdk::ARI_IBIVinylGetDataReq_SDK *)v57);
  v8 = (_OWORD *)((char *)this + 8);
  if (*((_BYTE *)this + 289))
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "eUICCVinylData cache is valid. Using cached data!\n", v5, v6, v7, v55);
    eUICC::logEUICCData((int *)this + 2);
    goto LABEL_5;
  }
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *v8 = 0u;
  *(_OWORD *)((char *)this + 274) = 0u;
  v10 = operator new(4uLL);
  *v10 = *((_DWORD *)this + 73);
  v11 = __p[0];
  __p[0] = v10;
  if (v11)
    operator delete(v11);
  v12 = operator new(1uLL);
  *v12 = 0;
  v13 = __p[1];
  __p[1] = v12;
  if (v13)
    operator delete(v13);
  v61 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v60[2] = v14;
  v60[3] = v14;
  v60[0] = v14;
  v60[1] = v14;
  AriSdk::ARI_IBISimAccessGetSimDataReq_SDK::ARI_IBISimAccessGetSimDataReq_SDK((AriSdk::ARI_IBISimAccessGetSimDataReq_SDK *)v60);
  v59 = 0;
  v15 = operator new(4uLL);
  *v15 = *((_DWORD *)this + 73);
  v16 = (void *)v61;
  v61 = (unint64_t)v15;
  if (v16)
    operator delete(v16);
  if ((eUICC::VinylCommandDriver::GetVinylType() & 1) == 0)
    goto LABEL_76;
  v20 = v59;
  v21 = *v59[16];
  if ((v21 & 1) != 0)
    goto LABEL_84;
  v22 = *v59[9];
  if (v22 != 1 && v22 != 254 && v22 != 4)
    goto LABEL_113;
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "SIM still initializing, trying again... sim_state 0x%x (retryCount: %d, retryLimit: %d)\n", v17, v18, v19, *v59[9]);
  if (v59)
    (*((void (**)(_DWORD **))*v59 + 2))(v59);
  v59 = 0;
  __ns.__rep_ = 2000000000;
  std::this_thread::sleep_for (&__ns);
  if (!eUICC::VinylCommandDriver::GetVinylType())
  {
LABEL_76:
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Error: failed to get slot info from BB\n", v17, v18, v19, v55);
    goto LABEL_79;
  }
  v20 = v59;
  v21 = *v59[16];
  if ((v21 & 1) != 0)
  {
LABEL_84:
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v17, v18, v19, (char)"!(GET_RSP_FIELD(rsp, sim_error_cause_t28) & sim_error_cause_mask)");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "sim_state 0x%x, sim_error_cause 0x%x\n", v35, v36, v37, *v59[9]);
    goto LABEL_89;
  }
  v23 = *v59[9];
  if (v23 != 1 && v23 != 254 && v23 != 4)
    goto LABEL_113;
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "SIM still initializing, trying again... sim_state 0x%x (retryCount: %d, retryLimit: %d)\n", v17, v18, v19, *v59[9]);
  if (v59)
    (*((void (**)(_DWORD **))*v59 + 2))(v59);
  v59 = 0;
  __ns.__rep_ = 2000000000;
  std::this_thread::sleep_for (&__ns);
  if (!eUICC::VinylCommandDriver::GetVinylType())
    goto LABEL_76;
  v20 = v59;
  v21 = *v59[16];
  if ((v21 & 1) != 0)
    goto LABEL_84;
  v24 = *v59[9];
  if (v24 != 1 && v24 != 254 && v24 != 4)
    goto LABEL_113;
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "SIM still initializing, trying again... sim_state 0x%x (retryCount: %d, retryLimit: %d)\n", v17, v18, v19, *v59[9]);
  if (v59)
    (*((void (**)(_DWORD **))*v59 + 2))(v59);
  v59 = 0;
  __ns.__rep_ = 2000000000;
  std::this_thread::sleep_for (&__ns);
  if (!eUICC::VinylCommandDriver::GetVinylType())
    goto LABEL_76;
  v20 = v59;
  v21 = *v59[16];
  if ((v21 & 1) != 0)
    goto LABEL_84;
  v25 = *v59[9];
  if (v25 != 1 && v25 != 254 && v25 != 4)
    goto LABEL_113;
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "SIM still initializing, trying again... sim_state 0x%x (retryCount: %d, retryLimit: %d)\n", v17, v18, v19, *v59[9]);
  if (v59)
    (*((void (**)(_DWORD **))*v59 + 2))(v59);
  v59 = 0;
  __ns.__rep_ = 2000000000;
  std::this_thread::sleep_for (&__ns);
  if (!eUICC::VinylCommandDriver::GetVinylType())
    goto LABEL_76;
  v20 = v59;
  v21 = *v59[16];
  if ((v21 & 1) != 0)
    goto LABEL_84;
  v26 = *v59[9];
  if (v26 != 1 && v26 != 254 && v26 != 4)
    goto LABEL_113;
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "SIM still initializing, trying again... sim_state 0x%x (retryCount: %d, retryLimit: %d)\n", v17, v18, v19, *v59[9]);
  if (v59)
    (*((void (**)(_DWORD **))*v59 + 2))(v59);
  v59 = 0;
  __ns.__rep_ = 2000000000;
  std::this_thread::sleep_for (&__ns);
  if (!eUICC::VinylCommandDriver::GetVinylType())
    goto LABEL_76;
  v20 = v59;
  v21 = *v59[16];
  if ((v21 & 1) != 0)
    goto LABEL_84;
  v27 = *v59[9];
  if (v27 != 1 && v27 != 254 && v27 != 4)
    goto LABEL_113;
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "SIM still initializing, trying again... sim_state 0x%x (retryCount: %d, retryLimit: %d)\n", v17, v18, v19, *v59[9]);
  if (v59)
    (*((void (**)(_DWORD **))*v59 + 2))(v59);
  v59 = 0;
  __ns.__rep_ = 2000000000;
  std::this_thread::sleep_for (&__ns);
  if (!eUICC::VinylCommandDriver::GetVinylType())
    goto LABEL_76;
  v20 = v59;
  v21 = *v59[16];
  if ((v21 & 1) != 0)
    goto LABEL_84;
  v28 = *v59[9];
  if (v28 == 1 || v28 == 254 || v28 == 4)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "SIM still initializing, trying again... sim_state 0x%x (retryCount: %d, retryLimit: %d)\n", v17, v18, v19, *v59[9]);
    if (v59)
      (*((void (**)(_DWORD **))*v59 + 2))(v59);
    v59 = 0;
    __ns.__rep_ = 2000000000;
    std::this_thread::sleep_for (&__ns);
LABEL_79:
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v29, v30, v31, (char)"ret");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Failed to get data from UIM\n", v32, v33, v34, v56);
LABEL_89:
    v38 = 0;
    goto LABEL_90;
  }
LABEL_113:
  if (v21 != 2)
  {
    v54 = (_BYTE *)v20[17];
    if (v54)
      v38 = (*v54 & 3) == 0;
    else
      v38 = 1;
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "sim_state 0x%x sim_error_cause: 0x%x sim_ext_capabilities 0x%x isAbsentOk: %s\n", v17, v18, v19, *v59[9]);
LABEL_90:
    v20 = v59;
    if (!v59)
      goto LABEL_92;
    goto LABEL_91;
  }
  v38 = 1;
LABEL_91:
  (*(void (**)(_QWORD *))(*v20 + 16))(v20);
LABEL_92:
  MEMORY[0x212BF9ECC](v60);
  *((_BYTE *)this + 286) = v38;
  *((_BYTE *)this + 288) = 0;
  if (v38)
  {
LABEL_112:
    *(_DWORD *)v8 = 255;
    goto LABEL_5;
  }
  if ((eUICC::VinylCommandDriver::GetData() & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Invalid GetData response from the BB\n", v39, v40, v41, v55);
    goto LABEL_112;
  }
  *((_DWORD *)this + 2) = *MEMORY[0x48];
  *(_WORD *)((char *)this + 13) = *MEMORY[0x58];
  v42 = (_OWORD *)MEMORY[0x60];
  if (MEMORY[0x60] == MEMORY[0x68])
    v42 = 0;
  *(_OWORD *)((char *)this + 15) = *v42;
  *((_BYTE *)this + 31) = *MEMORY[0x78];
  v43 = (_OWORD *)MEMORY[0x80];
  if (MEMORY[0x80] == MEMORY[0x88])
    v43 = 0;
  v44 = v43[1];
  *((_OWORD *)this + 2) = *v43;
  *((_OWORD *)this + 3) = v44;
  *((_QWORD *)this + 8) = *MEMORY[0x98];
  *((_QWORD *)this + 9) = *MEMORY[0xB0];
  v45 = (_OWORD *)MEMORY[0xC8];
  if (MEMORY[0xC8] == MEMORY[0xD0])
    v45 = 0;
  *((_OWORD *)this + 5) = *v45;
  v46 = (_OWORD *)MEMORY[0x128];
  if (MEMORY[0x128] == MEMORY[0x130])
    v46 = 0;
  *(_OWORD *)((char *)this + 155) = *v46;
  v47 = (_OWORD *)MEMORY[0x1C0];
  if (MEMORY[0x1C0] == MEMORY[0x1C8])
    v47 = 0;
  v48 = v47[1];
  *(_OWORD *)((char *)this + 251) = *v47;
  *(_OWORD *)((char *)this + 267) = v48;
  *((_WORD *)this + 115) = *MEMORY[0x188];
  v49 = MEMORY[0x1A8];
  if (MEMORY[0x1A8] == MEMORY[0x1B0])
    v49 = 0;
  v50 = *(_BYTE *)(v49 + 2);
  *((_WORD *)this + 124) = *(_WORD *)v49;
  *((_BYTE *)this + 250) = v50;
  *((_BYTE *)this + 12) = *MEMORY[0x50];
  *((_BYTE *)this + 283) = *MEMORY[0x1E8];
  *((_BYTE *)this + 289) = 1;
  eUICC::logEUICCData((int *)this + 2);
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "result  0x%x \n", v51, v52, v53, *MEMORY[0x48]);
LABEL_5:
  memcpy(a2, (char *)this + 8, 0x11AuLL);
  return MEMORY[0x212BF9DC4](v57);
}

void sub_212AA702C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x212BF9ECC](v7 - 128);
  MEMORY[0x212BF9DC4](va);
  _Unwind_Resume(a1);
}

uint64_t eUICC::eUICCVinylICEValve::SetCardMode(uint64_t a1)
{
  __int128 v2;
  _DWORD *v3;
  void *v4;
  _BYTE *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  _OWORD v13[4];
  void *__p[2];

  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[3] = v2;
  *(_OWORD *)__p = v2;
  v13[1] = v2;
  v13[2] = v2;
  v13[0] = v2;
  AriSdk::ARI_IBIVinylSwitchModeReq_SDK::ARI_IBIVinylSwitchModeReq_SDK((AriSdk::ARI_IBIVinylSwitchModeReq_SDK *)v13);
  v3 = operator new(4uLL);
  *v3 = *(_DWORD *)(a1 + 292);
  v4 = __p[0];
  __p[0] = v3;
  if (v4)
    operator delete(v4);
  v5 = operator new(1uLL);
  *v5 = 0;
  v6 = __p[1];
  __p[1] = v5;
  if (v6)
    operator delete(v6);
  if ((eUICC::VinylCommandDriver::SwitchCardMode() & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Error: failed to SwitchCardMode\n", v7, v8, v9, v12);
    v10 = 18;
  }
  MEMORY[0x212BF9E54](v13);
  return v10;
}

uint64_t eUICC::eUICCVinylICEValve::InstallTicket(_DWORD *a1, CFDataRef *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  capabilities::updater *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  void *v18;
  _WORD *v19;
  void *v20;
  _WORD *v21;
  void *v22;
  const UInt8 *BytePtr;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t Length;
  _WORD *v29;
  const char *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _OWORD v42[4];
  void *__p[2];
  void *v44[2];
  __int128 v45;
  unint64_t v46;
  uint64_t __src[37];

  __src[36] = *MEMORY[0x24BDAC8D0];
  v46 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v44 = v4;
  v45 = v4;
  v42[3] = v4;
  *(_OWORD *)__p = v4;
  v42[1] = v4;
  v42[2] = v4;
  v42[0] = v4;
  AriSdk::ARI_IBIVinylInstallVadReq_SDK::ARI_IBIVinylInstallVadReq_SDK((AriSdk::ARI_IBIVinylInstallVadReq_SDK *)v42);
  if (*a2)
    v8 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  else
    v8 = 0;
  if (!v8)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v5, v6, v7, (char)"installTicket");
    goto LABEL_27;
  }
  (*(void (**)(uint64_t *__return_ptr, _DWORD *))(*(_QWORD *)a1 + 8))(__src, a1);
  v9 = (capabilities::updater *)memcpy(a1 + 2, __src, 0x11AuLL);
  if (a1[2] == capabilities::updater::EUICCVinylSuccessStatus(v9))
  {
    if (*((_BYTE *)a1 + 31))
    {
      v16 = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, 0, 0);
      if ((_DWORD)v16)
      {
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v13, v14, v15, (char)"kBBUReturnSuccess == ret");
        goto LABEL_28;
      }
    }
    v17 = operator new(4uLL);
    *v17 = a1[73];
    v18 = __p[0];
    __p[0] = v17;
    if (v18)
      operator delete(v18);
    v19 = operator new(2uLL);
    *v19 = 1;
    v20 = __p[1];
    __p[1] = v19;
    if (v20)
      operator delete(v20);
    v21 = operator new(2uLL);
    *v21 = 0;
    v22 = v44[0];
    v44[0] = v21;
    if (v22)
      operator delete(v22);
    BytePtr = CFDataGetBytePtr(*a2);
    Length = CFDataGetLength(*a2);
    if (Length >= 0xE01)
    {
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Ticket provided is larger than spec. [ %lu (lenth) > %lu (spec max) ] \n", v24, v25, v26, Length);
LABEL_27:
      v16 = 2;
      goto LABEL_28;
    }
    v29 = operator new(2uLL);
    *v29 = Length;
    v31 = v44[1];
    v44[1] = v29;
    if (v31)
      operator delete(v31);
    if (Length)
    {
      v32 = operator new(Length);
      memcpy(v32, BytePtr, Length);
      v33 = operator new(Length);
      v34 = (uint64_t)v33 + Length;
      __src[0] = (uint64_t)v33;
      __src[2] = (uint64_t)v33 + Length;
      memcpy(v33, v32, Length);
      __src[1] = v34;
    }
    else
    {
      v32 = 0;
      memset(__src, 0, 24);
    }
    AriSdk::TlvArray<unsigned char,3584ul>::operator=((uint64_t)&v45, __src, v30);
    if (__src[0])
    {
      __src[1] = __src[0];
      operator delete((void *)__src[0]);
    }
    if ((eUICC::VinylCommandDriver::InstallVad() & 1) != 0)
    {
      if (*MEMORY[0x48])
      {
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "InstallTicket result 0x%x sw1_sw2 0x%hx\n", v35, v36, v37, *MEMORY[0x48]);
        v16 = 16;
        if (!v32)
          goto LABEL_28;
      }
      else
      {
        v16 = 0;
        if (!v32)
          goto LABEL_28;
      }
LABEL_47:
      operator delete(v32);
      goto LABEL_28;
    }
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v35, v36, v37, (char)"status");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "InstallTicket failed to get desired response\n", v38, v39, v40, v41);
    v16 = 11;
    if (v32)
      goto LABEL_47;
  }
  else
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v10, v11, v12, (char)"outData.Valid()");
    v16 = 18;
  }
LABEL_28:
  MEMORY[0x212BF9E3C](v42);
  return v16;
}

void sub_212AA76E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  void *v31;

  if (v31)
  {
    operator delete(v31);
    MEMORY[0x212BF9E3C](&a15);
    _Unwind_Resume(a1);
  }
  MEMORY[0x212BF9E3C](&a15);
  _Unwind_Resume(a1);
}

uint64_t AriSdk::TlvArray<unsigned char,3584ul>::operator=(uint64_t a1, uint64_t *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void *p_p;
  void *v10;
  void *__p;
  char v12;

  v6 = *a2;
  v5 = a2[1];
  if ((unint64_t)(v5 - *a2) < 0xE01)
  {
    v10 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v10);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v6 = *a2;
      v5 = a2[1];
    }
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return a1;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "operator=", a3);
    if (v12 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v7, p_p, 360, a1, a2[1] - *a2, 3584);
    if (v12 < 0)
      operator delete(__p);
    return a1;
  }
}

void sub_212AA78D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t eUICC::eUICCVinylICEValve::StreamFirmware(_DWORD *a1, uint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  capabilities::updater *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _DWORD **v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  size_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  size_t *v31;
  unint64_t v32;
  char *v33;
  const void *v34;
  char *v35;
  size_t v36;
  uint64_t v37;
  _WORD *v38;
  void *v39;
  _WORD *v40;
  void *v41;
  _WORD *v42;
  const char *v43;
  void *v44;
  const char *v45;
  void **v46;
  _BYTE *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62[12];
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  void *v69[3];
  _DWORD **v70;
  void **v71;
  char v72;
  _OWORD v73[18];
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v70 = 0;
  memset(v69, 170, sizeof(v69));
  (*(void (**)(void **__return_ptr))(**(_QWORD **)a2 + 24))(v69);
  v3 = v69[1];
  v4 = v69[0];
  (*(void (**)(_OWORD *__return_ptr, _DWORD *))(*(_QWORD *)a1 + 8))(v73, a1);
  v5 = (capabilities::updater *)memcpy(a1 + 2, v73, 0x11AuLL);
  if (a1[2] != capabilities::updater::EUICCVinylSuccessStatus(v5))
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v6, v7, v8, (char)"outData.Valid()");
    v10 = 18;
    v11 = v70;
    if (!v70)
      goto LABEL_58;
LABEL_57:
    (*((void (**)(_DWORD **))*v11 + 2))(v11);
    goto LABEL_58;
  }
  if (*((_BYTE *)a1 + 31) == 1)
  {
    v9 = 18;
  }
  else
  {
    v10 = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, 0, 0);
    if ((_DWORD)v10)
    {
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v6, v7, v8, (char)"kBBUReturnSuccess == ret");
      goto LABEL_56;
    }
    v9 = 0;
  }
  v12 = (v3 - v4) >> 5;
  v13 = *((unsigned __int8 *)a1 + 304);
  v67 = v12;
  if (v12 % v13)
    v14 = v12 / v13 + 1;
  else
    v14 = v12 / v13;
  if (v14)
  {
    v63 = v9;
    v68 = 0;
    v15 = 0;
    v64 = (_QWORD *)&v73[6] + 1;
    v65 = v14;
    *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    while (1)
    {
      v73[6] = v16;
      v73[7] = v16;
      v73[5] = v16;
      v73[3] = v16;
      v73[4] = v16;
      v73[1] = v16;
      v73[2] = v16;
      v73[0] = v16;
      v17 = AriSdk::ARI_IBIVinylInstallFwReq_SDK::ARI_IBIVinylInstallFwReq_SDK((AriSdk::ARI_IBIVinylInstallFwReq_SDK *)v73);
      v66 = v62;
      v18 = *((unsigned __int8 *)a1 + 304);
      if (v67 - (v15 * v18) >= v18)
        v19 = *((unsigned __int8 *)a1 + 304);
      else
        v19 = v67 - (v15 * v18);
      MEMORY[0x24BDAC7A8](v17);
      v21 = &v62[-v20];
      bzero(&v62[-v20], v22);
      v23 = operator new(4uLL);
      *v23 = a1[73];
      v27 = *(void **)&v73[4];
      *(_QWORD *)&v73[4] = v23;
      if (v27)
        operator delete(v27);
      v28 = v21;
      if (v19)
        break;
LABEL_30:
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v37 = v65;
      _BBULog(0, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "StreamFirmware set %d/%zu adpusThisSet %zu\n", v24, v25, v26, v15);
      v38 = operator new(2uLL);
      *v38 = v37;
      v39 = (void *)*((_QWORD *)&v73[4] + 1);
      *((_QWORD *)&v73[4] + 1) = v38;
      if (v39)
        operator delete(v39);
      v40 = operator new(2uLL);
      *v40 = v15;
      v41 = *(void **)&v73[5];
      *(_QWORD *)&v73[5] = v40;
      if (v41)
        operator delete(v41);
      v42 = operator new(2uLL);
      *v42 = (_WORD)v28 - (_WORD)v21;
      v44 = *(void **)&v73[6];
      *(_QWORD *)&v73[6] = v42;
      if (v44)
        operator delete(v44);
      if ((unint64_t)(v28 - v21) >= 0xF5B)
      {
        AriOsa::LogSrcInfo((AriOsa *)"/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "assign", v43);
        v46 = (void **)&v71;
        if (v72 < 0)
          v46 = v71;
        Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Range assignment too large(%p), got(%ld) max(%ld)", v45, v46, 385, v64, v28 - v21, 3930);
        if (v72 < 0)
          operator delete(v71);
      }
      else
      {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v64, v21, v28, v28 - v21);
      }
      v47 = operator new(1uLL);
      *v47 = v19;
      v48 = (void *)*((_QWORD *)&v73[5] + 1);
      *((_QWORD *)&v73[5] + 1) = v47;
      if (v48)
        operator delete(v48);
      if ((eUICC::VinylCommandDriver::StreamFW() & 1) == 0)
      {
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v49, v50, v51, (char)"status");
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "StreamFirmware failed\n", v56, v57, v58, v62[0]);
        v10 = 11;
        goto LABEL_55;
      }
      if (*v70[9])
      {
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v49, v50, v51, (char)"!GET_RSP_FIELD(rsp, result_t3)");
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Failed StreamAPDU set %d/%zu, status %d sw1_sw2 0x%x \n", v59, v60, v61, v15);
        v10 = 16;
        goto LABEL_55;
      }
      (*((void (**)(_DWORD **))*v70 + 2))(v70);
      v70 = 0;
      MEMORY[0x212BF9E0C](v73);
      v10 = 0;
      ++v15;
      v68 += 32;
      *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
      if (v15 == v37)
        goto LABEL_56;
    }
    v29 = v67 - (v15 * v18);
    if (v29 >= v18)
      v29 = v18;
    v30 = 32 * v29;
    v31 = (size_t *)((char *)v69[0] + v68 * *((unsigned __int8 *)a1 + 304) + 24);
    v28 = v21;
    while (1)
    {
      v32 = *(v31 - 2);
      if (v32 > 5 || *v31 >= 0x100)
        break;
      v33 = &v28[v32 + *v31];
      *v28 = v32;
      memcpy(v28 + 1, (const void *)*(v31 - 3), *(v31 - 2));
      v28[*(v31 - 2) + 1] = *(_BYTE *)v31;
      v34 = (const void *)*(v31 - 1);
      v35 = &v28[*(v31 - 2) + 2];
      v36 = *v31;
      v31 += 4;
      memcpy(v35, v34, v36);
      v28 = v33 + 2;
      v30 -= 32;
      if (!v30)
        goto LABEL_30;
    }
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v10 = v63;
    _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v24, v25, v26, (char)"f.header.length <= 5 && f.data.length <= 255");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Firmware APDU not within expected bounds : received (header - 5 : %zu data- 255 : %zu\n", v52, v53, v54, *(v31 - 2));
LABEL_55:
    MEMORY[0x212BF9E0C](v73);
LABEL_56:
    v11 = v70;
    if (!v70)
      goto LABEL_58;
    goto LABEL_57;
  }
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v6, v7, v8, (char)"apduSetCount");
  v10 = 15;
  v11 = v70;
  if (v70)
    goto LABEL_57;
LABEL_58:
  v70 = 0;
  if (v69[0])
  {
    v69[1] = v69[0];
    operator delete(v69[0]);
  }
  return v10;
}

void sub_212AA8158(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  MEMORY[0x212BF9E0C](v1 + 112);
  v3 = *(void **)(v1 + 56);
  if (!v3)
    _Unwind_Resume(a1);
  *(_QWORD *)(v1 + 64) = v3;
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t eUICC::eUICCVinylICEValve::DeleteProfile(eUICC::eUICCVinylICEValve *this, unsigned int a2)
{
  __int128 v4;
  _DWORD *v5;
  void *v6;
  _DWORD *v7;
  void *v8;
  _DWORD *v9;
  void *v10;
  _WORD *v11;
  void *v12;
  _WORD *v13;
  void *v14;
  _WORD *v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  _OWORD v29[4];
  void *__p[2];
  void *v31[2];
  void *v32[2];
  __int128 v33;
  unint64_t v34;

  v34 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v32 = v4;
  v33 = v4;
  *(_OWORD *)__p = v4;
  *(_OWORD *)v31 = v4;
  v29[2] = v4;
  v29[3] = v4;
  v29[0] = v4;
  v29[1] = v4;
  AriSdk::ARI_IBIVinylTapeReq_SDK::ARI_IBIVinylTapeReq_SDK((AriSdk::ARI_IBIVinylTapeReq_SDK *)v29);
  v28 = 0;
  v27[0] = 0xBFD00602820434BFLL;
  *(_QWORD *)((char *)v27 + 6) = 0xD80602820434BFD0;
  v5 = operator new(4uLL);
  *v5 = *((_DWORD *)this + 73);
  v6 = __p[0];
  __p[0] = v5;
  if (v6)
    operator delete(v6);
  v7 = operator new(4uLL);
  *v7 = 16;
  v8 = __p[1];
  __p[1] = v7;
  if (v8)
    operator delete(v8);
  v9 = operator new(4uLL);
  *v9 = 1;
  v10 = v31[0];
  v31[0] = v9;
  if (v10)
    operator delete(v10);
  v11 = operator new(2uLL);
  *v11 = 1;
  v12 = v31[1];
  v31[1] = v11;
  if (v12)
    operator delete(v12);
  v13 = operator new(2uLL);
  *v13 = 0;
  v14 = v32[0];
  v32[0] = v13;
  if (v14)
    operator delete(v14);
  v15 = operator new(2uLL);
  *v15 = 7;
  v16 = v32[1];
  v32[1] = v15;
  if (v16)
    operator delete(v16);
  v17 = (char *)&v27[a2] - a2;
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v33, v17, v17 + 7, 7uLL);
  if ((eUICC::VinylCommandDriver::DeleteProfile() & 1) != 0)
  {
    v21 = v28;
    if (**(_DWORD **)(v28 + 80))
    {
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v18, v19, v20, (char)"!GET_RSP_FIELD(rsp, result_t4)");
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Failed to DeleteProfile status %d SW1_SW2 0x%x\n", v22, v23, v24, **(_DWORD **)(v28 + 80));
      v25 = 18;
      v21 = v28;
      if (!v28)
        goto LABEL_27;
    }
    else
    {
      v25 = 0;
    }
LABEL_26:
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    goto LABEL_27;
  }
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v18, v19, v20, (char)"status");
  v25 = 11;
  v21 = v28;
  if (v28)
    goto LABEL_26;
LABEL_27:
  MEMORY[0x212BF9D64](v29);
  return v25;
}

uint64_t eUICC::eUICCVinylICEValve::StoreData(uint64_t a1, char **a2, _QWORD *a3, _WORD *a4)
{
  __int128 v8;
  _DWORD *v9;
  void *v10;
  _DWORD *v11;
  void *v12;
  _DWORD *v13;
  void *v14;
  _WORD *v15;
  void *v16;
  _WORD *v17;
  void *v18;
  char *v19;
  char *v20;
  _WORD *v21;
  const char *v22;
  size_t v23;
  void *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  const char *v32;
  void **v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v45[4];
  void *__p[2];
  void *v47[2];
  void *v48[2];
  void *__dst[2];
  unint64_t v50;
  void **v51;
  char v52;

  v50 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v48 = v8;
  *(_OWORD *)__dst = v8;
  *(_OWORD *)__p = v8;
  *(_OWORD *)v47 = v8;
  v45[2] = v8;
  v45[3] = v8;
  v45[0] = v8;
  v45[1] = v8;
  AriSdk::ARI_IBIVinylTapeReq_SDK::ARI_IBIVinylTapeReq_SDK((AriSdk::ARI_IBIVinylTapeReq_SDK *)v45);
  v9 = operator new(4uLL);
  *v9 = *(_DWORD *)(a1 + 292);
  v10 = __p[0];
  __p[0] = v9;
  if (v10)
    operator delete(v10);
  v11 = operator new(4uLL);
  *v11 = 5;
  v12 = __p[1];
  __p[1] = v11;
  if (v12)
    operator delete(v12);
  v13 = operator new(4uLL);
  *v13 = 1;
  v14 = v47[0];
  v47[0] = v13;
  if (v14)
    operator delete(v14);
  v15 = operator new(2uLL);
  *v15 = 1;
  v16 = v47[1];
  v47[1] = v15;
  if (v16)
    operator delete(v16);
  v17 = operator new(2uLL);
  *v17 = 0;
  v18 = v48[0];
  v48[0] = v17;
  if (v18)
    operator delete(v18);
  v19 = *a2;
  v20 = a2[1];
  v21 = operator new(2uLL);
  v23 = v20 - v19;
  *v21 = (_WORD)v20 - (_WORD)v19;
  v24 = v48[1];
  v48[1] = v21;
  if (v24)
  {
    operator delete(v24);
    v19 = *a2;
    v20 = a2[1];
    v23 = v20 - *a2;
  }
  if (v23 < 0xE01)
  {
    v25 = v50;
    v26 = (char *)__dst[0];
    if (v50 - (unint64_t)__dst[0] < v23)
    {
      if (__dst[0])
      {
        __dst[1] = __dst[0];
        operator delete(__dst[0]);
        v25 = 0;
        __dst[0] = 0;
        __dst[1] = 0;
        v50 = 0;
      }
      v27 = 2 * v25;
      if (2 * v25 <= v23)
        v27 = v23;
      if (v25 >= 0x3FFFFFFFFFFFFFFFLL)
        v28 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if ((v28 & 0x8000000000000000) != 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v29 = (char *)operator new(v28);
      v30 = v29;
      __dst[0] = v29;
      __dst[1] = v29;
      v50 = (unint64_t)&v29[v28];
      if (v20 != v19)
        memmove(v29, v19, v23);
      v31 = &v30[v23];
      goto LABEL_40;
    }
    if ((char *)__dst[1] - (char *)__dst[0] >= v23)
    {
      if (v20 == v19)
      {
LABEL_39:
        v31 = &v26[v23];
LABEL_40:
        __dst[1] = v31;
        goto LABEL_41;
      }
      v35 = __dst[0];
      v36 = v19;
    }
    else
    {
      v34 = &v19[(char *)__dst[1] - (char *)__dst[0]];
      if (__dst[1] != __dst[0])
      {
        memmove(__dst[0], v19, (char *)__dst[1] - (char *)__dst[0]);
        v26 = (char *)__dst[1];
      }
      v23 = v20 - v34;
      if (v20 == v34)
        goto LABEL_39;
      v35 = v26;
      v36 = v34;
    }
    memmove(v35, v36, v23);
    goto LABEL_39;
  }
  AriOsa::LogSrcInfo((AriOsa *)"/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "assign", v22);
  if (v52 >= 0)
    v33 = (void **)&v51;
  else
    v33 = v51;
  Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Range assignment too large(%p), got(%ld) max(%ld)", v32, v33, 385, __dst, v23, 3584);
  if (v52 < 0)
    operator delete(v51);
LABEL_41:
  if ((eUICC::VinylCommandDriver::DeleteProfile() & 1) != 0)
  {
    if (*MEMORY[0x50])
    {
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v37, v38, v39, (char)"!GET_RSP_FIELD(rsp, result_t4)");
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Failed to store data status %d SW1_SW2 0x%x\n", v40, v41, v42, *MEMORY[0x50]);
      v43 = 18;
    }
    else
    {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(a3, MEMORY[0x78], (char *)(MEMORY[0x78] + (unsigned __int16)*MEMORY[0x70]), (unsigned __int16)*MEMORY[0x70]);
      v43 = 0;
      *a4 = *MEMORY[0x58];
      (*(void (**)(_QWORD))(MEMORY[0] + 16))(0);
    }
  }
  else
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v37, v38, v39, (char)"status");
    v43 = 11;
  }
  MEMORY[0x212BF9D64](v45);
  return v43;
}

void sub_212AA8978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  MEMORY[0x212BF9D64](va);
  _Unwind_Resume(a1);
}

uint64_t eUICC::eUICCVinylICEValve::InitPerso(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  _DWORD *v13;
  void *v14;
  _BYTE *v15;
  void *v16;
  _BYTE *v17;
  void *v18;
  _WORD *v19;
  const char *v20;
  void *v21;
  const void *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _OWORD v39[4];
  void *__p[2];
  void *v41[2];
  __int128 v42;
  unint64_t v43;

  v43 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v41 = v6;
  v42 = v6;
  v39[3] = v6;
  *(_OWORD *)__p = v6;
  v39[1] = v6;
  v39[2] = v6;
  v39[0] = v6;
  AriSdk::ARI_IBIVinylInitPsoReq_SDK::ARI_IBIVinylInitPsoReq_SDK((AriSdk::ARI_IBIVinylInitPsoReq_SDK *)v39);
  v38 = 0;
  v10 = a2[1];
  v11 = v10 - *a2;
  v12 = (unsigned __int16)(v10 - *(_WORD *)a2);
  if (v12 < 0xE01)
  {
    v13 = operator new(4uLL);
    *v13 = *(_DWORD *)(a1 + 292);
    v14 = __p[0];
    __p[0] = v13;
    if (v14)
      operator delete(v14);
    v15 = operator new(1uLL);
    *v15 = 0;
    v16 = __p[1];
    __p[1] = v15;
    if (v16)
      operator delete(v16);
    v17 = operator new(1uLL);
    *v17 = 0;
    v18 = v41[0];
    v41[0] = v17;
    if (v18)
      operator delete(v18);
    v19 = operator new(2uLL);
    *v19 = v11;
    v21 = v41[1];
    v41[1] = v19;
    if (v21)
      operator delete(v21);
    v22 = (const void *)*a2;
    v36 = 0;
    v37 = 0;
    v35 = 0;
    if (v12)
    {
      v23 = (char *)operator new(v12);
      v24 = &v23[v12];
      v35 = v23;
      v37 = &v23[v12];
      memcpy(v23, v22, v12);
      v36 = v24;
    }
    AriSdk::TlvArray<unsigned char,3584ul>::operator=((uint64_t)&v42, (uint64_t *)&v35, v20);
    if (v35)
      operator delete(v35);
    if ((eUICC::VinylCommandDriver::InitPerso() & 1) == 0)
    {
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v25, v26, v27, (char)"status");
      v31 = 11;
      v32 = v38;
      if (v38)
        goto LABEL_25;
      goto LABEL_26;
    }
    if (!**(_DWORD **)(v38 + 72))
    {
      v34 = *(_WORD **)(v38 + 88);
      if (*v34)
      {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(a3, *(char **)(v38 + 96), (char *)(*(_QWORD *)(v38 + 96) + (unsigned __int16)*v34), (unsigned __int16)*v34);
        v31 = 0;
        v32 = v38;
        if (!v38)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v25, v26, v27, (char)"!GET_RSP_FIELD(rsp, result_t3) && GET_RSP_FIELD(rsp, sim_rsp_len_t5)");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Failed to InitPerso status %d SW1_SW2 0x%x rsp_len %u\n", v28, v29, v30, **(_DWORD **)(v38 + 72));
  }
  else
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Payload too large -- payload_size: %d  max allowed: %lu)\n", v7, v8, v9, v11);
  }
  v31 = 18;
  v32 = v38;
  if (v38)
LABEL_25:
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
LABEL_26:
  MEMORY[0x212BF9DDC](v39);
  return v31;
}

void sub_212AA8D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  MEMORY[0x212BF9DDC](&a17);
  _Unwind_Resume(a1);
}

uint64_t eUICC::eUICCVinylICEValve::AuthPerso(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  _DWORD *v13;
  void *v14;
  _BYTE *v15;
  void *v16;
  _BYTE *v17;
  void *v18;
  _WORD *v19;
  const char *v20;
  void *v21;
  const void *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _OWORD v39[4];
  void *__p[2];
  void *v41[2];
  __int128 v42;
  unint64_t v43;

  v43 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v41 = v6;
  v42 = v6;
  v39[3] = v6;
  *(_OWORD *)__p = v6;
  v39[1] = v6;
  v39[2] = v6;
  v39[0] = v6;
  AriSdk::ARI_IBIVinylAuthPsoReq_SDK::ARI_IBIVinylAuthPsoReq_SDK((AriSdk::ARI_IBIVinylAuthPsoReq_SDK *)v39);
  v38 = 0;
  v10 = a2[1];
  v11 = v10 - *a2;
  v12 = (unsigned __int16)(v10 - *(_WORD *)a2);
  if (v12 < 0xE01)
  {
    v13 = operator new(4uLL);
    *v13 = *(_DWORD *)(a1 + 292);
    v14 = __p[0];
    __p[0] = v13;
    if (v14)
      operator delete(v14);
    v15 = operator new(1uLL);
    *v15 = 0;
    v16 = __p[1];
    __p[1] = v15;
    if (v16)
      operator delete(v16);
    v17 = operator new(1uLL);
    *v17 = 0;
    v18 = v41[0];
    v41[0] = v17;
    if (v18)
      operator delete(v18);
    v19 = operator new(2uLL);
    *v19 = v11;
    v21 = v41[1];
    v41[1] = v19;
    if (v21)
      operator delete(v21);
    v22 = (const void *)*a2;
    v36 = 0;
    v37 = 0;
    v35 = 0;
    if (v12)
    {
      v23 = (char *)operator new(v12);
      v24 = &v23[v12];
      v35 = v23;
      v37 = &v23[v12];
      memcpy(v23, v22, v12);
      v36 = v24;
    }
    AriSdk::TlvArray<unsigned char,3584ul>::operator=((uint64_t)&v42, (uint64_t *)&v35, v20);
    if (v35)
      operator delete(v35);
    if ((eUICC::VinylCommandDriver::AuthPerso() & 1) == 0)
    {
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v25, v26, v27, (char)"status");
      v31 = 11;
      v32 = v38;
      if (v38)
        goto LABEL_25;
      goto LABEL_26;
    }
    if (!**(_DWORD **)(v38 + 72))
    {
      v34 = *(_WORD **)(v38 + 88);
      if (*v34)
      {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(a3, *(char **)(v38 + 96), (char *)(*(_QWORD *)(v38 + 96) + (unsigned __int16)*v34), (unsigned __int16)*v34);
        v31 = 0;
        v32 = v38;
        if (!v38)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v25, v26, v27, (char)"!GET_RSP_FIELD(rsp, result_t3) && GET_RSP_FIELD(rsp, sim_rsp_len_t5)");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Failed to AuthPerso status %d SW1_SW2 0x%x rsp_len %u\n", v28, v29, v30, **(_DWORD **)(v38 + 72));
  }
  else
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Payload too large -- payload_size: %d  max allowed: %lu)\n", v7, v8, v9, v11);
  }
  v31 = 18;
  v32 = v38;
  if (v38)
LABEL_25:
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
LABEL_26:
  MEMORY[0x212BF9DAC](v39);
  return v31;
}

void sub_212AA90C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  MEMORY[0x212BF9DAC](&a17);
  _Unwind_Resume(a1);
}

uint64_t eUICC::eUICCVinylICEValve::FinalizePerso(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _DWORD *v11;
  void *v12;
  _BYTE *v13;
  void *v14;
  _BYTE *v15;
  void *v16;
  _WORD *v17;
  const char *v18;
  void *v19;
  const void *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _OWORD v36[4];
  void *__p[2];
  void *v38[2];
  __int128 v39;
  unint64_t v40;

  v40 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v38 = v4;
  v39 = v4;
  v36[3] = v4;
  *(_OWORD *)__p = v4;
  v36[1] = v4;
  v36[2] = v4;
  v36[0] = v4;
  AriSdk::ARI_IBIVinylFinalizePsoReq_SDK::ARI_IBIVinylFinalizePsoReq_SDK((AriSdk::ARI_IBIVinylFinalizePsoReq_SDK *)v36);
  v35 = 0;
  v8 = a2[1];
  v9 = v8 - *a2;
  v10 = (unsigned __int16)(v8 - *(_WORD *)a2);
  if (v10 >= 0xE01)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Payload too large -- payload_size: %d  max allowed: %lu)\n", v5, v6, v7, v9);
    goto LABEL_24;
  }
  v11 = operator new(4uLL);
  *v11 = *(_DWORD *)(a1 + 292);
  v12 = __p[0];
  __p[0] = v11;
  if (v12)
    operator delete(v12);
  v13 = operator new(1uLL);
  *v13 = 0;
  v14 = __p[1];
  __p[1] = v13;
  if (v14)
    operator delete(v14);
  v15 = operator new(1uLL);
  *v15 = 0;
  v16 = v38[0];
  v38[0] = v15;
  if (v16)
    operator delete(v16);
  v17 = operator new(2uLL);
  *v17 = v9;
  v19 = v38[1];
  v38[1] = v17;
  if (v19)
    operator delete(v19);
  v20 = (const void *)*a2;
  v33 = 0;
  v34 = 0;
  v32 = 0;
  if (v10)
  {
    v21 = (char *)operator new(v10);
    v22 = &v21[v10];
    v32 = v21;
    v34 = &v21[v10];
    memcpy(v21, v20, v10);
    v33 = v22;
  }
  AriSdk::TlvArray<unsigned char,3584ul>::operator=((uint64_t)&v39, (uint64_t *)&v32, v18);
  if (v32)
    operator delete(v32);
  if ((eUICC::VinylCommandDriver::FinalizePerso() & 1) != 0)
  {
    v26 = v35;
    if (**(_DWORD **)(v35 + 72))
    {
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v23, v24, v25, (char)"!GET_RSP_FIELD(rsp, result_t3)");
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Failed to FinalizePerso status %d SW1_SW2 0x%x\n", v27, v28, v29, **(_DWORD **)(v35 + 72));
LABEL_24:
      v30 = 18;
      v26 = v35;
      if (!v35)
        goto LABEL_32;
      goto LABEL_31;
    }
    v30 = 0;
LABEL_31:
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
    goto LABEL_32;
  }
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v23, v24, v25, (char)"status");
  v30 = 11;
  v26 = v35;
  if (v35)
    goto LABEL_31;
LABEL_32:
  MEMORY[0x212BF9E6C](v36);
  return v30;
}

void sub_212AA9428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  MEMORY[0x212BF9E6C](&a17);
  _Unwind_Resume(a1);
}

uint64_t eUICC::eUICCVinylICEValve::ValidatePerso(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  _DWORD *v13;
  void *v14;
  _WORD *v15;
  void *v16;
  _WORD *v17;
  void *v18;
  _WORD *v19;
  const char *v20;
  void *v21;
  const void *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _OWORD v39[4];
  void *__p[2];
  void *v41[2];
  __int128 v42;
  unint64_t v43;

  v43 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v41 = v6;
  v42 = v6;
  v39[3] = v6;
  *(_OWORD *)__p = v6;
  v39[1] = v6;
  v39[2] = v6;
  v39[0] = v6;
  AriSdk::ARI_IBIVinylValidatePsoReq_SDK::ARI_IBIVinylValidatePsoReq_SDK((AriSdk::ARI_IBIVinylValidatePsoReq_SDK *)v39);
  v38 = 0;
  v10 = a2[1];
  v11 = v10 - *a2;
  v12 = (unsigned __int16)(v10 - *(_WORD *)a2);
  if (v12 < 0xE01)
  {
    v13 = operator new(4uLL);
    *v13 = *(_DWORD *)(a1 + 292);
    v14 = __p[0];
    __p[0] = v13;
    if (v14)
      operator delete(v14);
    v15 = operator new(2uLL);
    *v15 = 1;
    v16 = __p[1];
    __p[1] = v15;
    if (v16)
      operator delete(v16);
    v17 = operator new(2uLL);
    *v17 = 0;
    v18 = v41[0];
    v41[0] = v17;
    if (v18)
      operator delete(v18);
    v19 = operator new(2uLL);
    *v19 = v11;
    v21 = v41[1];
    v41[1] = v19;
    if (v21)
      operator delete(v21);
    v22 = (const void *)*a2;
    v36 = 0;
    v37 = 0;
    v35 = 0;
    if (v12)
    {
      v23 = (char *)operator new(v12);
      v24 = &v23[v12];
      v35 = v23;
      v37 = &v23[v12];
      memcpy(v23, v22, v12);
      v36 = v24;
    }
    AriSdk::TlvArray<unsigned char,3584ul>::operator=((uint64_t)&v42, (uint64_t *)&v35, v20);
    if (v35)
      operator delete(v35);
    if ((eUICC::VinylCommandDriver::ValidatePerso() & 1) == 0)
    {
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v25, v26, v27, (char)"status");
      v31 = 11;
      v32 = v38;
      if (v38)
        goto LABEL_25;
      goto LABEL_26;
    }
    if (!**(_DWORD **)(v38 + 72))
    {
      v34 = *(_WORD **)(v38 + 88);
      if (*v34)
      {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(a3, *(char **)(v38 + 96), (char *)(*(_QWORD *)(v38 + 96) + (unsigned __int16)*v34), (unsigned __int16)*v34);
        v31 = 0;
        v32 = v38;
        if (!v38)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Condition <<%s>> failed %s %s/%d\n", v25, v26, v27, (char)"!GET_RSP_FIELD(rsp, result_t3) && GET_RSP_FIELD(rsp, sim_rsp_len_t5)");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Failed to AuthPerso status %d SW1_SW2 0x%x rsp_len %u\n", v28, v29, v30, **(_DWORD **)(v38 + 72));
  }
  else
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylICEValve", "", "Payload too large -- payload_size: %d  max allowed: %lu)\n", v7, v8, v9, v11);
  }
  v31 = 18;
  v32 = v38;
  if (v38)
LABEL_25:
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
LABEL_26:
  MEMORY[0x212BF9E84](v39);
  return v31;
}

void sub_212AA97C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  MEMORY[0x212BF9E84](&a17);
  _Unwind_Resume(a1);
}

void eUICC::eUICCVinylICEValve::~eUICCVinylICEValve(eUICC::eUICCVinylICEValve *this)
{
  eUICC::VinylCommandDriver *v2;
  void *v3;

  *(_QWORD *)this = &off_24CE80348;
  v2 = (eUICC::VinylCommandDriver *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v2)
  {
    eUICC::VinylCommandDriver::~VinylCommandDriver(v2);
    operator delete(v3);
  }
}

{
  eUICC::VinylCommandDriver *v2;
  void *v3;

  *(_QWORD *)this = &off_24CE80348;
  v2 = (eUICC::VinylCommandDriver *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v2)
  {
    eUICC::VinylCommandDriver::~VinylCommandDriver(v2);
    operator delete(v3);
  }
  operator delete(this);
}

void std::__shared_ptr_pointer<ICEARIContext *,std::shared_ptr<ICEARIContext>::__shared_ptr_default_delete<ICEARIContext,ICEARIContext>,std::allocator<ICEARIContext>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ICEARIContext *,std::shared_ptr<ICEARIContext>::__shared_ptr_default_delete<ICEARIContext,ICEARIContext>,std::allocator<ICEARIContext>>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
    operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ICEARIContext *,std::shared_ptr<ICEARIContext>::__shared_ptr_default_delete<ICEARIContext,ICEARIContext>,std::allocator<ICEARIContext>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B53257)
    return a1 + 24;
  if (((v3 & 0x8000000212B53257 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B53257))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B53257 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

_QWORD *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  size_t v14;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_21;
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0)
LABEL_21:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    result = operator new(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    goto LABEL_18;
  }
  v12 = (_BYTE *)result[1];
  if (v12 - v9 >= a4)
  {
LABEL_18:
    v14 = a3 - __src;
    if (v14)
      result = memmove(v9, __src, v14);
    v7[1] = &v9[v14];
    return result;
  }
  v13 = &__src[v12 - v9];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v12 - v9);
    v9 = (char *)v7[1];
  }
  if (a3 != v13)
    result = memmove(v9, v13, a3 - v13);
  v7[1] = &v9[a3 - v13];
  return result;
}

uint64_t __cxx_global_var_init_5()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ICEARIContext>::~PthreadMutexGuardPolicy, &ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance, &dword_212A4D000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy, &stru_253D32648, &dword_212A4D000);
  }
  return result;
}

uint64_t support::cf::createNum64Num32FromData(ACFULogging *Length, const void **a2)
{
  const __CFData *v3;
  const UInt8 *BytePtr;
  ACFULogging *v5;
  const void *v6;
  uint64_t (*v7)(uint64_t);
  const void *v9;
  uint64_t (*v10)(uint64_t);
  int valuePtr;
  uint64_t __dst;

  if (Length)
  {
    if (a2
      && (v3 = Length,
          BytePtr = CFDataGetBytePtr(Length),
          Length = (ACFULogging *)CFDataGetLength(v3),
          (unint64_t)Length - 9 > 0xFFFFFFFFFFFFFFF7))
    {
      if ((unint64_t)Length < 5)
      {
        valuePtr = 0;
        memcpy(&valuePtr, BytePtr, (size_t)Length);
        v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
        v9 = *a2;
        *a2 = v5;
        if (v9)
        {
          CFRelease(v9);
          v5 = (ACFULogging *)*a2;
        }
        v10 = ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get;
        if (!v5)
          v10 = 0;
        if (v10)
          return 1;
      }
      else
      {
        __dst = 0;
        memcpy(&__dst, BytePtr, (size_t)Length);
        v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt64Type, &__dst);
        v6 = *a2;
        *a2 = v5;
        if (v6)
        {
          CFRelease(v6);
          v5 = (ACFULogging *)*a2;
        }
        v7 = ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get;
        if (!v5)
          v7 = 0;
        if (v7)
          return 1;
      }
      ACFULogging::getLogInstance(v5);
    }
    else
    {
      ACFULogging::getLogInstance(Length);
    }
  }
  else
  {
    ACFULogging::getLogInstance(0);
  }
  ACFULogging::handleMessage();
  return 0;
}

uint64_t support::cf::createByteSwappedData(CFDataRef theData, CFDataRef *a2)
{
  const __CFData *v2;
  CFDataRef v4;
  UInt8 *v5;
  UInt8 *v6;
  UInt8 *v7;
  UInt8 v8;
  CFDataRef v10;
  uint64_t (*v11)(uint64_t);
  CFRange v13;

  if (a2)
  {
    v2 = theData;
    if (theData)
    {
      theData = (CFDataRef)CFDataGetLength(theData);
      if (theData)
      {
        v4 = theData;
        v5 = (UInt8 *)malloc((size_t)theData);
        v13.location = 0;
        v13.length = (CFIndex)v4;
        CFDataGetBytes(v2, v13, v5);
        v6 = (UInt8 *)v4 + (_QWORD)v5 - 1;
        if (v6 > v5)
        {
          v7 = v5 + 1;
          do
          {
            v8 = *(v7 - 1);
            *(v7 - 1) = *v6;
            *v6-- = v8;
          }
          while (v7++ < v6);
        }
        theData = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v5, (CFIndex)v4, (CFAllocatorRef)*MEMORY[0x24BDBD248]);
        v10 = *a2;
        *a2 = theData;
        if (v10)
        {
          CFRelease(v10);
          theData = *a2;
        }
        v11 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
        if (!theData)
          v11 = 0;
        if (v11)
          return 1;
      }
    }
  }
  ACFULogging::getLogInstance(theData);
  ACFULogging::handleMessage();
  return 0;
}

uint64_t support::cf::createNum32FromString(support::cf *this, const __CFString *a2, const __CFNumber **a3)
{
  uint64_t v3;
  std::string __p;
  int valuePtr;

  v3 = 0;
  valuePtr = 0;
  memset(&__p, 0, sizeof(__p));
  if (this && a2)
  {
    if ((ctu::cf::assign() & 1) == 0)
    {
      v3 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v3;
      goto LABEL_8;
    }
    valuePtr = std::stoi(&__p, 0, 10);
    a2->isa = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
    v3 = 1;
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v3;
LABEL_8:
  operator delete(__p.__r_.__value_.__l.__data_);
  return v3;
}

uint64_t support::cf::copyDataFromHexString(support::cf *this, const __CFString *a2, const __CFData **a3)
{
  __int128 v4;
  ACFULogging *CString;
  void *v6;
  char buffer[16];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (!this)
  {
    ACFULogging::getLogInstance(0);
LABEL_11:
    ACFULogging::handleMessage();
    return 0;
  }
  if (!a2)
  {
    ACFULogging::getLogInstance(this);
    goto LABEL_11;
  }
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v38 = v4;
  v39 = v4;
  v36 = v4;
  v37 = v4;
  v34 = v4;
  v35 = v4;
  v32 = v4;
  v33 = v4;
  v30 = v4;
  v31 = v4;
  v28 = v4;
  v29 = v4;
  v26 = v4;
  v27 = v4;
  v24 = v4;
  v25 = v4;
  v22 = v4;
  v23 = v4;
  v20 = v4;
  v21 = v4;
  v18 = v4;
  v19 = v4;
  v16 = v4;
  v17 = v4;
  v14 = v4;
  v15 = v4;
  v12 = v4;
  v13 = v4;
  v10 = v4;
  v11 = v4;
  *(_OWORD *)buffer = v4;
  v9 = v4;
  CString = (ACFULogging *)CFStringGetCString((CFStringRef)this, buffer, 512, 0x8000100u);
  if (!(_DWORD)CString)
  {
    ACFULogging::getLogInstance(CString);
    goto LABEL_11;
  }
  v6 = (void *)AMSupportCopyDataFromAsciiEncodedHex();
  a2->isa = v6;
  if (!v6)
  {
    ACFULogging::getLogInstance(0);
    goto LABEL_11;
  }
  return 1;
}

uint64_t BBUPersonalizedConsoleFeedback::writeToStreamInternal(BBUPersonalizedConsoleFeedback *this, const char *__format, va_list a3)
{
  __int128 v6;
  _OWORD v8[16];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[14] = v6;
  v8[15] = v6;
  v8[12] = v6;
  v8[13] = v6;
  v8[10] = v6;
  v8[11] = v6;
  v8[8] = v6;
  v8[9] = v6;
  v8[6] = v6;
  v8[7] = v6;
  v8[4] = v6;
  v8[5] = v6;
  v8[2] = v6;
  v8[3] = v6;
  v8[0] = v6;
  v8[1] = v6;
  if (gBBULogSinkFunc)
  {
    vsnprintf((char *)v8, 0x100uLL, __format, a3);
    gBBULogSinkFunc(gBBULogSinkContext, 3, v8);
  }
  else
  {
    vprintf(__format, a3);
  }
  return (*(uint64_t (**)(BBUPersonalizedConsoleFeedback *, const char *, va_list))(*(_QWORD *)this + 112))(this, __format, a3);
}

void BBUPersonalizedConsoleFeedback::~BBUPersonalizedConsoleFeedback(BBUPersonalizedConsoleFeedback *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_24CE7FF20;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::deque<std::string>::~deque[abi:ne180100]((uint64_t)this + 192);
    BBUFeedback::~BBUFeedback((CFTypeRef *)this);
  }
  else
  {
LABEL_5:
    std::deque<std::string>::~deque[abi:ne180100]((uint64_t)this + 192);
    BBUFeedback::~BBUFeedback((CFTypeRef *)this);
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = off_24CE7FF20;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::deque<std::string>::~deque[abi:ne180100]((uint64_t)this + 192);
  BBUFeedback::~BBUFeedback((CFTypeRef *)this);
  operator delete(v5);
}

uint64_t DEREncodeItemIntoVector(unint64_t a1, unint64_t a2, const void *a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  __int128 v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  size_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  __int128 v52;
  char *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  char v58;
  char *v59;
  const void *v60;
  unint64_t v61;

  v8 = DERLengthOfItem(a1, a2);
  v9 = v8;
  v61 = v8;
  v11 = *(_QWORD *)a4;
  v10 = *(char **)(a4 + 8);
  v12 = (unint64_t)&v10[-*(_QWORD *)a4];
  v13 = v8 - v12;
  if (v8 <= v12)
  {
    if (v8 < v12)
      *(_QWORD *)(a4 + 8) = v11 + v8;
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 16);
    if (v14 - (uint64_t)v10 >= v13)
    {
      bzero(*(void **)(a4 + 8), v13);
      *(_QWORD *)(a4 + 8) = &v10[v13];
      goto LABEL_32;
    }
    v60 = a3;
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_66;
    v15 = v14 - v11;
    v16 = 2 * v15;
    if (2 * v15 <= v8)
      v16 = v8;
    if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v18 = operator new(v17);
    v59 = (char *)v18 + v17;
    v19 = (char *)v18 + v9;
    v20 = (char *)v18 + v12;
    bzero((char *)v18 + v12, v13);
    if (v10 != (char *)v11)
    {
      if (v12 < 8 || v11 - (unint64_t)v18 < 0x20)
        goto LABEL_28;
      if (v12 >= 0x20)
      {
        v21 = v12 & 0xFFFFFFFFFFFFFFE0;
        v22 = v10 - 16;
        v23 = &v10[(_QWORD)v18 - 16 - v11];
        v24 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v25 = *(_OWORD *)v22;
          *((_OWORD *)v23 - 1) = *((_OWORD *)v22 - 1);
          *(_OWORD *)v23 = v25;
          v23 -= 32;
          v22 -= 32;
          v24 -= 32;
        }
        while (v24);
        if (v12 == v21)
        {
LABEL_30:
          v10 = (char *)v11;
          *(_QWORD *)a4 = v18;
          *(_QWORD *)(a4 + 8) = v19;
          *(_QWORD *)(a4 + 16) = v59;
          a3 = v60;
          if (!v11)
            goto LABEL_32;
          goto LABEL_31;
        }
        if ((v12 & 0x18) == 0)
        {
          v20 -= v21;
          v10 -= v21;
          goto LABEL_28;
        }
      }
      else
      {
        v21 = 0;
      }
      v20 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v26 = &v10[-v21 - 8];
      v27 = &v26[-v11];
      v28 = v21 - (v12 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v29 = *(_QWORD *)v26;
        v26 -= 8;
        *(_QWORD *)&v27[(_QWORD)v18] = v29;
        v27 -= 8;
        v28 += 8;
      }
      while (v28);
      v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_30;
LABEL_28:
      v30 = v20 - 1;
      do
      {
        v31 = *--v10;
        *v30-- = v31;
      }
      while (v10 != (char *)v11);
      goto LABEL_30;
    }
    *(_QWORD *)a4 = v20;
    *(_QWORD *)(a4 + 8) = v19;
    *(_QWORD *)(a4 + 16) = v59;
    a3 = v60;
    if (v10)
LABEL_31:
      operator delete(v10);
  }
LABEL_32:
  v32 = DEREncodeItem(a1, a2, a3, *(_QWORD *)a4, &v61);
  if ((_DWORD)v32)
  {
    v33 = *(_QWORD *)a4;
LABEL_34:
    *(_QWORD *)(a4 + 8) = v33;
    return v32;
  }
  v35 = v61;
  v37 = *(_QWORD *)a4;
  v36 = *(char **)(a4 + 8);
  v38 = (unint64_t)&v36[-*(_QWORD *)a4];
  v39 = v61 - v38;
  if (v61 <= v38)
  {
    if (v61 >= v38)
      return v32;
    v33 = v37 + v61;
    goto LABEL_34;
  }
  v40 = *(_QWORD *)(a4 + 16);
  if (v40 - (uint64_t)v36 >= v39)
  {
    bzero(*(void **)(a4 + 8), v61 - v38);
    *(_QWORD *)(a4 + 8) = &v36[v39];
    return v32;
  }
  if ((v61 & 0x8000000000000000) != 0)
LABEL_66:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v41 = v40 - v37;
  v42 = 2 * v41;
  if (2 * v41 <= v61)
    v42 = v61;
  if (v41 >= 0x3FFFFFFFFFFFFFFFLL)
    v43 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v43 = v42;
  v44 = (char *)operator new(v43);
  v45 = &v44[v38];
  v46 = &v44[v43];
  v47 = &v44[v35];
  bzero(&v44[v38], v39);
  if (v36 == (char *)v37)
    goto LABEL_64;
  if (v38 >= 8 && v37 - (unint64_t)v44 >= 0x20)
  {
    if (v38 < 0x20)
    {
      v48 = 0;
      goto LABEL_56;
    }
    v48 = v38 & 0xFFFFFFFFFFFFFFE0;
    v49 = v36 - 16;
    v50 = &v36[(_QWORD)v44 - 16 - v37];
    v51 = v38 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v52 = *(_OWORD *)v49;
      *((_OWORD *)v50 - 1) = *((_OWORD *)v49 - 1);
      *(_OWORD *)v50 = v52;
      v50 -= 32;
      v49 -= 32;
      v51 -= 32;
    }
    while (v51);
    if (v38 == v48)
      goto LABEL_63;
    if ((v38 & 0x18) != 0)
    {
LABEL_56:
      v45 -= v38 & 0xFFFFFFFFFFFFFFF8;
      v53 = &v36[-v48 - 8];
      v54 = &v53[-v37];
      v55 = v48 - (v38 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v56 = *(_QWORD *)v53;
        v53 -= 8;
        *(_QWORD *)&v54[(_QWORD)v44] = v56;
        v54 -= 8;
        v55 += 8;
      }
      while (v55);
      v36 -= v38 & 0xFFFFFFFFFFFFFFF8;
      if (v38 == (v38 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_63;
      goto LABEL_61;
    }
    v45 -= v48;
    v36 -= v48;
  }
LABEL_61:
  v57 = v45 - 1;
  do
  {
    v58 = *--v36;
    *v57-- = v58;
  }
  while (v36 != (char *)v37);
LABEL_63:
  v36 = (char *)v37;
  v45 = v44;
LABEL_64:
  *(_QWORD *)a4 = v45;
  *(_QWORD *)(a4 + 8) = v47;
  *(_QWORD *)(a4 + 16) = v46;
  if (v36)
    operator delete(v36);
  return v32;
}

uint64_t DEREncodeSequenceIntoVector(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  __int128 v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  size_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  __int128 v52;
  char *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  char v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;

  v6 = a2;
  v8 = DERLengthOfEncodedSequence(a1, a2, *(unsigned __int16 *)(a3 + 8), *(_QWORD *)a3);
  v9 = v8;
  v61 = v8;
  v11 = *(_QWORD *)a4;
  v10 = *(char **)(a4 + 8);
  v12 = (unint64_t)&v10[-*(_QWORD *)a4];
  v13 = v8 - v12;
  if (v8 <= v12)
  {
    if (v8 < v12)
      *(_QWORD *)(a4 + 8) = v11 + v8;
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 16);
    if (v14 - (uint64_t)v10 >= v13)
    {
      bzero(*(void **)(a4 + 8), v13);
      *(_QWORD *)(a4 + 8) = &v10[v13];
      goto LABEL_32;
    }
    v60 = v6;
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_66;
    v15 = v14 - v11;
    v16 = 2 * v15;
    if (2 * v15 <= v8)
      v16 = v8;
    if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v18 = operator new(v17);
    v59 = (char *)v18 + v17;
    v19 = (char *)v18 + v9;
    v20 = (char *)v18 + v12;
    bzero((char *)v18 + v12, v13);
    if (v10 != (char *)v11)
    {
      if (v12 < 8 || v11 - (unint64_t)v18 < 0x20)
        goto LABEL_28;
      if (v12 >= 0x20)
      {
        v21 = v12 & 0xFFFFFFFFFFFFFFE0;
        v22 = v10 - 16;
        v23 = &v10[(_QWORD)v18 - 16 - v11];
        v24 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v25 = *(_OWORD *)v22;
          *((_OWORD *)v23 - 1) = *((_OWORD *)v22 - 1);
          *(_OWORD *)v23 = v25;
          v23 -= 32;
          v22 -= 32;
          v24 -= 32;
        }
        while (v24);
        if (v12 == v21)
        {
LABEL_30:
          v10 = (char *)v11;
          *(_QWORD *)a4 = v18;
          *(_QWORD *)(a4 + 8) = v19;
          *(_QWORD *)(a4 + 16) = v59;
          v6 = v60;
          if (!v11)
            goto LABEL_32;
          goto LABEL_31;
        }
        if ((v12 & 0x18) == 0)
        {
          v20 -= v21;
          v10 -= v21;
          goto LABEL_28;
        }
      }
      else
      {
        v21 = 0;
      }
      v20 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v26 = &v10[-v21 - 8];
      v27 = &v26[-v11];
      v28 = v21 - (v12 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v29 = *(_QWORD *)v26;
        v26 -= 8;
        *(_QWORD *)&v27[(_QWORD)v18] = v29;
        v27 -= 8;
        v28 += 8;
      }
      while (v28);
      v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_30;
LABEL_28:
      v30 = v20 - 1;
      do
      {
        v31 = *--v10;
        *v30-- = v31;
      }
      while (v10 != (char *)v11);
      goto LABEL_30;
    }
    *(_QWORD *)a4 = v20;
    *(_QWORD *)(a4 + 8) = v19;
    *(_QWORD *)(a4 + 16) = v59;
    v6 = v60;
    if (v10)
LABEL_31:
      operator delete(v10);
  }
LABEL_32:
  v32 = DEREncodeSequence(a1, v6, *(unsigned __int16 *)(a3 + 8), *(_QWORD *)a3, *(_QWORD *)a4, &v61);
  if ((_DWORD)v32)
  {
    v33 = *(_QWORD *)a4;
LABEL_34:
    *(_QWORD *)(a4 + 8) = v33;
    return v32;
  }
  v35 = v61;
  v37 = *(_QWORD *)a4;
  v36 = *(char **)(a4 + 8);
  v38 = (unint64_t)&v36[-*(_QWORD *)a4];
  v39 = v61 - v38;
  if (v61 <= v38)
  {
    if (v61 >= v38)
      return v32;
    v33 = v37 + v61;
    goto LABEL_34;
  }
  v40 = *(_QWORD *)(a4 + 16);
  if (v40 - (uint64_t)v36 >= v39)
  {
    bzero(*(void **)(a4 + 8), v61 - v38);
    *(_QWORD *)(a4 + 8) = &v36[v39];
    return v32;
  }
  if ((v61 & 0x8000000000000000) != 0)
LABEL_66:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v41 = v40 - v37;
  v42 = 2 * v41;
  if (2 * v41 <= v61)
    v42 = v61;
  if (v41 >= 0x3FFFFFFFFFFFFFFFLL)
    v43 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v43 = v42;
  v44 = (char *)operator new(v43);
  v45 = &v44[v38];
  v46 = &v44[v43];
  v47 = &v44[v35];
  bzero(&v44[v38], v39);
  if (v36 == (char *)v37)
    goto LABEL_64;
  if (v38 >= 8 && v37 - (unint64_t)v44 >= 0x20)
  {
    if (v38 < 0x20)
    {
      v48 = 0;
      goto LABEL_56;
    }
    v48 = v38 & 0xFFFFFFFFFFFFFFE0;
    v49 = v36 - 16;
    v50 = &v36[(_QWORD)v44 - 16 - v37];
    v51 = v38 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v52 = *(_OWORD *)v49;
      *((_OWORD *)v50 - 1) = *((_OWORD *)v49 - 1);
      *(_OWORD *)v50 = v52;
      v50 -= 32;
      v49 -= 32;
      v51 -= 32;
    }
    while (v51);
    if (v38 == v48)
      goto LABEL_63;
    if ((v38 & 0x18) != 0)
    {
LABEL_56:
      v45 -= v38 & 0xFFFFFFFFFFFFFFF8;
      v53 = &v36[-v48 - 8];
      v54 = &v53[-v37];
      v55 = v48 - (v38 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v56 = *(_QWORD *)v53;
        v53 -= 8;
        *(_QWORD *)&v54[(_QWORD)v44] = v56;
        v54 -= 8;
        v55 += 8;
      }
      while (v55);
      v36 -= v38 & 0xFFFFFFFFFFFFFFF8;
      if (v38 == (v38 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_63;
      goto LABEL_61;
    }
    v45 -= v48;
    v36 -= v48;
  }
LABEL_61:
  v57 = v45 - 1;
  do
  {
    v58 = *--v36;
    *v57-- = v58;
  }
  while (v36 != (char *)v37);
LABEL_63:
  v36 = (char *)v37;
  v45 = v44;
LABEL_64:
  *(_QWORD *)a4 = v45;
  *(_QWORD *)(a4 + 8) = v47;
  *(_QWORD *)(a4 + 16) = v46;
  if (v36)
    operator delete(v36);
  return v32;
}

uint64_t DERDecodeBBTicket(uint64_t a1, unsigned int a2, unint64_t a3)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  _QWORD v9[2];
  unint64_t v10[3];
  _OWORD v11[10];
  uint64_t v12;
  _OWORD v13[9];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  memset(v10, 170, sizeof(v10));
  v13[6] = xmmword_212B53340;
  v13[7] = unk_212B53350;
  v13[8] = xmmword_212B53360;
  v13[2] = xmmword_212B53300;
  v13[3] = unk_212B53310;
  v13[4] = xmmword_212B53320;
  v13[5] = unk_212B53330;
  v13[0] = __const__Z17DERDecodeBBTicketPhjP11DERBbTicket_DERBbTicketItemSpecs;
  v13[1] = unk_212B532F0;
  v11[6] = xmmword_212B533D0;
  v11[7] = unk_212B533E0;
  v11[8] = xmmword_212B533F0;
  v11[9] = unk_212B53400;
  v11[2] = xmmword_212B53390;
  v11[3] = unk_212B533A0;
  v11[4] = xmmword_212B533B0;
  v11[5] = unk_212B533C0;
  v11[0] = __const__Z17DERDecodeBBTicketPhjP11DERBbTicket_DERBbTicketItemSpecs_MAV;
  v11[1] = unk_212B53380;
  v12 = 1;
  v9[0] = a1;
  v9[1] = a2;
  result = DERDecodeItem((uint64_t)v9, v10);
  if (!(_DWORD)result)
  {
    if (v10[0] != 0x2000000000000010)
      return 2;
    if (capabilities::radio::maverick((capabilities::radio *)result))
    {
      result = (uint64_t)DERParseSequenceContent(&v10[1], 7u, (uint64_t)v11, a3, 0);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      result = (uint64_t)DERParseSequenceContent(&v10[1], 6u, (uint64_t)v13, a3, 0);
      if ((_DWORD)result)
        return result;
    }
    v5 = *(uint64_t **)(a3 + 16);
    v6 = *v5;
    v7 = *((unsigned __int16 *)v5 + 4);
    v8 = v6 == 0x43DCE48862A0806 && v7 == 771;
    result = 3;
    if (v8)
    {
      if (*(_QWORD *)(a3 + 24) == 10)
        return 0;
      else
        return 3;
    }
  }
  return result;
}

const char *BBUBootModeAsString(unsigned int a1)
{
  if (a1 > 2)
    return "Unknown";
  else
    return off_24CE804C8[a1];
}

const char *BBUNVRestoreSettingAsString(unsigned int a1)
{
  if (a1 > 6)
    return "Invalid";
  else
    return off_24CE804E0[a1];
}

uint64_t EURStateMachineStart(uint64_t a1)
{
  *(_DWORD *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 368) = 1;
  return 1;
}

uint64_t EURStateMachineStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v9)(uint64_t);
  char v11;

  *(_BYTE *)(a1 + 368) = 0;
  _BBUFSDebugPrint("EURStateMachineStop", "aborting pending reads\n", a3, a4, a5, a6, a7, a8, v11);
  v9 = *(void (**)(uint64_t))(a1 + 24);
  if (v9)
    v9(a1 + 8);
  return 1;
}

uint64_t EURStateMachinePerformFlush(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  char v34;
  int v35;
  int v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  void **v59;
  void **v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  int v74;
  const char *v75;
  void **v76;
  unsigned int v77;
  const char *v78;
  int v80;
  void *v81;
  int v82;
  void *v83;
  void *v84;
  _OWORD v85[2];
  _DWORD v86[5];
  uint64_t v87[2];

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v9 = *(int *)(a1 + 376);
        v10 = "Unknown";
        if (v9 <= 2)
          v10 = off_24CE80558[v9];
        _BBUFSDebugPrint("EURStateMachinePerformFlush", "---------------------%s---------------------\n", a3, a4, a5, a6, a7, a8, (char)v10);
        v17 = *(_DWORD *)(a1 + 376);
        if (v17)
          break;
        v84 = 0;
        v86[0] = 0;
        v87[0] = 0;
        v18 = createETLStructures(v87, &v84, v86, v12, v13, v14, v15, v16);
        v25 = "failed creating ETL header and ring buffer structures\n";
        if (!v18)
        {
LABEL_17:
          _BBUFSDebugPrint("sListen", v25, v19, v20, v21, v22, v23, v24, v80);
          v36 = 0;
          *(_QWORD *)&v37 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v85[0] = v37;
          v85[1] = v37;
          goto LABEL_35;
        }
        while (1)
        {
          _BBUFSDebugPrint("sListen", "waiting for hello with timeout of %u sec\n", v19, v20, v21, v22, v23, v24, gHelloWaitTimeoutMilliSec / 0x3E8u);
          if (!ETLSAHCommandReceive())
          {
            v25 = "failed receiving hello packet\n";
            goto LABEL_17;
          }
          if (*(_DWORD *)v84 != 8)
            break;
          _BBUFSDebugPrint("sListen", "received reset response (dropping)\n", v19, v20, v21, v22, v23, v24, v80);
        }
        *(_QWORD *)&v38 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v38 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v85[0] = v38;
        v85[1] = v38;
        if ((ETLSAHCommandParseHello() & 1) != 0)
        {
          _BBUFSDebugPrint("sPrintHelloParameters", "version number:  %u\n", a3, a4, a5, a6, a7, a8, v85[0]);
          _BBUFSDebugPrint("sPrintHelloParameters", "version compatible:  %u\n", v39, v40, v41, v42, v43, v44, SBYTE4(v85[0]));
          _BBUFSDebugPrint("sPrintHelloParameters", "command packet Length:  %u\n", v45, v46, v47, v48, v49, v50, SBYTE8(v85[0]));
          v51 = ETLSAHModeAsString();
          _BBUFSDebugPrint("sPrintHelloParameters", "mode:  %s\n", v52, v53, v54, v55, v56, v57, v51);
          if ((ETLSAHCommandCreateHelloResponse() & 1) != 0)
          {
            if ((ETLSAHCommandSend() & 1) != 0)
            {
              v36 = 1;
              goto LABEL_35;
            }
            v58 = "failed to respond to hello packet\n";
          }
          else
          {
            v58 = "Failed to create hello response\n";
          }
        }
        else
        {
          v58 = "failed parsing hello packet\n";
        }
        _BBUFSDebugPrint("sListen", v58, a3, a4, a5, a6, a7, a8, v80);
        v36 = 0;
LABEL_35:
        v60 = (void **)v87[0];
        if ((unint64_t)v84 | v87[0])
        {
          if (v84)
          {
            free(v84);
            v84 = 0;
            v60 = (void **)v87[0];
          }
          if (v60)
          {
            if (*v60)
            {
              free(*v60);
              v60 = (void **)v87[0];
            }
            free(v60);
          }
        }
        if (!v36)
          goto LABEL_68;
        *(_DWORD *)(a1 + 376) = 1;
      }
      if (v17 != 1)
        break;
      v83 = 0;
      v82 = 0;
      v81 = 0;
      v26 = createETLStructures((uint64_t *)&v81, &v83, &v82, v12, v13, v14, v15, v16);
      v33 = "failed creating ETL header and ring buffer structures\n";
      if (v26 && (v34 = ETLSAHGetDebugRecordCount(), v33 = "failed receiving debug table location\n", (v34 & 1) != 0))
      {
        v35 = 1;
      }
      else
      {
        _BBUFSDebugPrint("sGetRecords", v33, v27, v28, v29, v30, v31, v32, v80);
        v35 = 0;
      }
      _BBUFSDebugPrint("sGetRecords", "%i records requested\n", v27, v28, v29, v30, v31, v32, 0);
      v59 = (void **)v81;
      if ((unint64_t)v83 | (unint64_t)v81)
      {
        if (v83)
        {
          free(v83);
          v83 = 0;
          v59 = (void **)v81;
        }
        if (v59)
        {
          if (*v59)
          {
            free(*v59);
            v59 = (void **)v81;
          }
          free(v59);
        }
      }
      if (!v35)
        goto LABEL_68;
      *(_DWORD *)(a1 + 376) = 2;
    }
    if (v17 == 2)
      break;
    _BBUFSDebugPrint("EURStateMachinePerformFlush", "unknown state\n", v11, v12, v13, v14, v15, v16, v80);
  }
  *(_QWORD *)&v85[0] = 0;
  LODWORD(v87[0]) = 0;
  v84 = 0;
  if (!createETLStructures((uint64_t *)&v84, (void **)v85, v87, v12, v13, v14, v15, v16))
  {
    v75 = "failed creating ETL header and ring buffer structures\n";
    goto LABEL_53;
  }
  if (!ETLSAHCommandCreateReset())
  {
    v75 = "failed to create reset command\n";
    goto LABEL_53;
  }
  if ((ETLSAHCommandSend() & 1) == 0)
  {
    v75 = "failed sending reset command\n";
LABEL_53:
    _BBUFSDebugPrint("sCompleteTransfer", v75, v61, v62, v63, v64, v65, v66, v80);
    *(_DWORD *)(a1 + 376) = 0;
    v73 = *(void **)&v85[0];
    v76 = (void **)v84;
    if (!(*(_QWORD *)&v85[0] | (unint64_t)v84))
      goto LABEL_68;
LABEL_54:
    if (v73)
    {
      v74 = 0;
LABEL_56:
      free(v73);
      *(_QWORD *)&v85[0] = 0;
      v76 = (void **)v84;
      if (!v84)
      {
        if (!v74)
          goto LABEL_68;
LABEL_64:
        *(_DWORD *)(a1 + 376) = 0;
        v77 = 1;
        goto LABEL_69;
      }
    }
    else
    {
      if (!v76)
        goto LABEL_68;
      LOBYTE(v74) = 0;
    }
    if (*v76)
    {
      free(*v76);
      v76 = (void **)v84;
    }
    free(v76);
    if ((v74 & 1) == 0)
      goto LABEL_68;
    goto LABEL_64;
  }
  *(_DWORD *)(a1 + 376) = 0;
  if ((ETLSAHCommandReceive() & 1) != 0)
  {
    v73 = *(void **)&v85[0];
    if (**(_DWORD **)&v85[0] == 8)
    {
      v74 = 1;
      goto LABEL_56;
    }
    v80 = **(_DWORD **)&v85[0];
    v78 = "expect reset response but receive type %d\n";
  }
  else
  {
    v78 = "failed to receive reset response\n";
  }
  _BBUFSDebugPrint("sCompleteTransfer", v78, v67, v68, v69, v70, v71, v72, v80);
  v73 = *(void **)&v85[0];
  v76 = (void **)v84;
  if (*(_QWORD *)&v85[0] | (unint64_t)v84)
    goto LABEL_54;
LABEL_68:
  v77 = 0;
LABEL_69:
  if (*(_BYTE *)(a1 + 368))
    return v77;
  else
    return 1;
}

void sub_212AAB980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void **v36;
  uint64_t v37;

  if (*(char *)(v37 - 169) < 0)
    operator delete(v36[18]);
  if (*(char *)(v37 - 137) < 0)
    operator delete(v36[22]);
  if (*(char *)(v37 - 105) < 0)
    operator delete(v36[26]);
  _Unwind_Resume(exception_object);
}

uint64_t EURStateMachineSetConfig(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  if (a1 && (v8 = (char)a2, a2))
  {
    v9 = a3;
    if (!strcasecmp("HelloWaitTimeoutSec", a2))
    {
      if (v9 < 1)
      {
        if (v9)
        {
          _BBUFSDebugPrint("EURStateMachineSetConfig", "failed to set config '%s', invalid config value '%d'\n", v10, v11, v12, v13, v14, v15, v8);
          return 0;
        }
        else
        {
          gHelloWaitTimeoutMilliSec = -1;
          _BBUFSDebugPrint("EURStateMachineSetConfig", "Set config '%s' to 'infinite'\n", v10, v11, v12, v13, v14, v15, v8);
          return 1;
        }
      }
      else
      {
        gHelloWaitTimeoutMilliSec = 1000 * v9;
        _BBUFSDebugPrint("EURStateMachineSetConfig", "Set config '%s' to '%d' millisec\n", v10, v11, v12, v13, v14, v15, v8);
        return 1;
      }
    }
    else
    {
      _BBUFSDebugPrint("EURStateMachineSetConfig", "failed to set config, unrecognized config name '%s'\n", v10, v11, v12, v13, v14, v15, v8);
      return 0;
    }
  }
  else
  {
    _BBUFSDebugPrint("EURStateMachineSetConfig", "failed to set config as one of the args is NULL\n", a3, a4, a5, a6, a7, a8, v17);
    return 0;
  }
}

BOOL EURStateMachineFlushInProgress(uint64_t a1)
{
  return *(_DWORD *)(a1 + 376) > 0;
}

void BBUEUREFSImage::BBUEUREFSImage(BBUEUREFSImage *this, BBUDataSource *a2, unsigned int a3, uint64_t a4)
{
  _QWORD *v5;
  void **v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  size_t v14;
  __int128 *p_dst;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 __dst;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *__p[2];
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  BBUEURMIImage::BBUEURMIImage(this, a2, a4);
  *v5 = off_24CE80580;
  v5[8] = 0;
  v6 = (void **)(v5 + 8);
  v5[9] = 0;
  v5[10] = 0;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29 = 0xAAAAAAAAAAAAAAAALL;
  v39 = v7;
  v38 = v7;
  v37 = v7;
  v36 = v7;
  v35 = v7;
  v34 = v7;
  v33 = v7;
  v32 = v7;
  v31 = v7;
  v28 = v7;
  *(_OWORD *)__p = v7;
  v26 = v7;
  v25 = v7;
  v24 = v7;
  v23 = v7;
  v8 = MEMORY[0x24BEDB870];
  v9 = MEMORY[0x24BEDB870] + 64;
  v30 = MEMORY[0x24BEDB870] + 64;
  v10 = (uint64_t *)MEMORY[0x24BEDB800];
  v11 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v22 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = v11;
  v12 = (std::ios_base *)((char *)&v22 + *(_QWORD *)(v22 - 24));
  std::ios_base::init(v12, &v23);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v22 = v8 + 24;
  v30 = v9;
  std::streambuf::basic_streambuf();
  v13 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v23 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v28 = 0u;
  LODWORD(v29) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"EFS", 3);
  std::ostream::operator<<();
  if ((v29 & 0x10) != 0)
  {
    v16 = *((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1) < (unint64_t)v26)
    {
      *((_QWORD *)&v28 + 1) = v26;
      v16 = v26;
    }
    v17 = (const void *)*((_QWORD *)&v25 + 1);
    v14 = v16 - *((_QWORD *)&v25 + 1);
    if ((unint64_t)(v16 - *((_QWORD *)&v25 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_20;
  }
  else
  {
    if ((v29 & 8) == 0)
    {
      v14 = 0;
      HIBYTE(v21) = 0;
      p_dst = &__dst;
      goto LABEL_14;
    }
    v17 = (const void *)v24;
    v14 = v25 - v24;
    if ((_QWORD)v25 - (_QWORD)v24 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_20:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v14 >= 0x17)
  {
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    p_dst = (__int128 *)operator new(v18 + 1);
    *((_QWORD *)&__dst + 1) = v14;
    v21 = v19 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v21) = v14;
  p_dst = &__dst;
  if (v14)
LABEL_13:
    memmove(p_dst, v17, v14);
LABEL_14:
  *((_BYTE *)p_dst + v14) = 0;
  if (*((char *)this + 87) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = __dst;
  v6[2] = (void *)v21;
  v22 = *v10;
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = v10[3];
  *(_QWORD *)&v23 = v13 + 16;
  if (SBYTE7(v28) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v30);
}

void sub_212AABE80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v5;

  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](v2);
  if (*(char *)(v1 + 87) < 0)
  {
    operator delete(*v3);
    *(_QWORD *)v1 = off_24CE84BF8;
    v5 = *(_QWORD *)(v1 + 8);
    if (!v5)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    *(_QWORD *)v1 = off_24CE84BF8;
    v5 = *(_QWORD *)(v1 + 8);
    if (!v5)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

void BBUEUREFSImage::~BBUEUREFSImage(void **this)
{
  void *v2;

  *this = off_24CE80580;
  if (*((char *)this + 87) < 0)
  {
    operator delete(this[8]);
    *this = off_24CE84BF8;
    v2 = this[1];
    if (!v2)
      return;
  }
  else
  {
    *this = off_24CE84BF8;
    v2 = this[1];
    if (!v2)
      return;
  }
  (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
}

{
  void *v2;

  *this = off_24CE80580;
  if (*((char *)this + 87) < 0)
  {
    operator delete(this[8]);
    *this = off_24CE84BF8;
    v2 = this[1];
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  *this = off_24CE84BF8;
  v2 = this[1];
  if (v2)
LABEL_3:
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
LABEL_4:
  operator delete(this);
}

uint64_t BBUEUREFSImage::getName(BBUEUREFSImage *this)
{
  uint64_t result;

  result = (uint64_t)this + 64;
  if (*((char *)this + 87) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t BBUEURMIImage::getWritePayloadLength(BBUEURMIImage *this)
{
  return (*((_DWORD *)this + 8) + 40);
}

uint64_t BBUEURMIImage::getOpenPayloadData(BBUEURMIImage *this)
{
  return 0;
}

uint64_t BBUEURMIImage::getOpenPayloadLength(BBUEURMIImage *this)
{
  return 0;
}

void BBUEURMIImage::generateHash(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v3;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
      BBUDataSource::generateHash(v3, a2, a3);
  }
}

uint64_t BBUEURMIImage::getDataSource(BBUEURMIImage *this)
{
  return *((_QWORD *)this + 1);
}

BOOL BBUEURMIImage::verifyMIHeaderSize(BBUEURMIImage *this, int a2)
{
  return *((unsigned int *)this + 6) + (unint64_t)*((unsigned int *)this + 9) + 40 == a2;
}

void BBUFeedback::BBUFeedback(BBUFeedback *this, const void *a2)
{
  _QWORD *v3;
  _DWORD *v4;
  CFNotificationCenterRef LocalCenter;
  const __CFAllocator *v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  int valuePtr;

  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_24CE805F8;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 44) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = a2;
  *((_QWORD *)this + 8) = 0;
  BBUProfiler::BBUProfiler((BBUFeedback *)((char *)this + 80));
  v3 = operator new(8uLL);
  v4 = operator new(0x1000uLL);
  *v3 = v4;
  *v4 = 0;
  *((_QWORD *)this + 17) = v3;
  *((_QWORD *)this + 18) = v3;
  *((_QWORD *)this + 19) = v3 + 1;
  *((_QWORD *)this + 20) = v3 + 1;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 1;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  *((_QWORD *)this + 9) = LocalCenter;
  CFRetain(LocalCenter);
  v6 = CFGetAllocator(*((CFTypeRef *)this + 7));
  *((_QWORD *)this + 8) = CFDictionaryCreateMutable(v6, 2, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  valuePtr = 0;
  v7 = CFGetAllocator(*((CFTypeRef *)this + 7));
  v8 = CFNumberCreate(v7, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(*((CFMutableDictionaryRef *)this + 8), CFSTR("percentage"), v8);
  CFRelease(v8);
}

void sub_212AAC184(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_212AAC194(_Unwind_Exception *a1)
{
  uint64_t v1;
  CFTypeRef *v2;
  void *v3;
  _QWORD **v4;

  __cxa_end_catch();
  operator delete(v3);
  BBUProfiler::~BBUProfiler(v2);
  std::__tree<std::__value_type<BBUFeedback::ProgressBarStages,double>,std::__map_value_compare<BBUFeedback::ProgressBarStages,std::__value_type<BBUFeedback::ProgressBarStages,double>,std::less<BBUFeedback::ProgressBarStages>,true>,std::allocator<std::__value_type<BBUFeedback::ProgressBarStages,double>>>::destroy(v1, *v4);
  _Unwind_Resume(a1);
}

void BBUProfiler::~BBUProfiler(CFTypeRef *this)
{
  std::deque<ctu::cf::CFSharedRef<__CFDictionary>>::~deque[abi:ne180100]((uint64_t)(this + 1));
  if (*this)
    CFRelease(*this);
}

void BBUFeedback::~BBUFeedback(CFTypeRef *this)
{
  CFTypeRef v2;

  *this = off_24CE805F8;
  CFRelease(this[9]);
  CFRelease(this[8]);
  std::deque<BBUpdaterCommon::StageContext>::~deque[abi:ne180100]((uint64_t)(this + 17));
  std::deque<ctu::cf::CFSharedRef<__CFDictionary>>::~deque[abi:ne180100]((uint64_t)(this + 11));
  v2 = this[10];
  if (v2)
    CFRelease(v2);
  std::__tree<std::__value_type<BBUFeedback::ProgressBarStages,double>,std::__map_value_compare<BBUFeedback::ProgressBarStages,std::__value_type<BBUFeedback::ProgressBarStages,double>,std::less<BBUFeedback::ProgressBarStages>,true>,std::allocator<std::__value_type<BBUFeedback::ProgressBarStages,double>>>::destroy((uint64_t)(this + 1), this[2]);
}

void BBUFeedback::updateProgressBarItem(BBUFeedback *this, double a2)
{
  char *v4;
  uint64_t **v5;
  int v6;
  uint64_t **v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  const __CFAllocator *v12;
  CFNumberRef v13;
  unsigned int valuePtr;

  if (*((_BYTE *)this + 44))
  {
    v5 = (uint64_t **)((char *)this + 16);
    v4 = (char *)*((_QWORD *)this + 2);
    v6 = *((_DWORD *)this + 10);
    if (v4)
    {
      while (1)
      {
        while (1)
        {
          v7 = (uint64_t **)v4;
          v8 = *((_DWORD *)v4 + 8);
          if (v6 >= v8)
            break;
          v4 = (char *)*v7;
          v5 = v7;
          if (!*v7)
            goto LABEL_9;
        }
        if (v8 >= v6)
          break;
        v4 = (char *)v7[1];
        if (!v4)
        {
          v5 = v7 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
      v7 = (uint64_t **)((char *)this + 16);
LABEL_9:
      v9 = (char *)v7;
      v7 = (uint64_t **)operator new(0x30uLL);
      *((_DWORD *)v7 + 8) = v6;
      v7[5] = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = (uint64_t *)v9;
      *v5 = (uint64_t *)v7;
      v10 = **((_QWORD **)this + 1);
      v11 = (uint64_t *)v7;
      if (v10)
      {
        *((_QWORD *)this + 1) = v10;
        v11 = *v5;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 2), v11);
      ++*((_QWORD *)this + 3);
    }
    valuePtr = ((*((double *)this + 6) + *((double *)v7 + 5) * a2 / *((double *)this + 4)) * 100.0);
    v12 = CFGetAllocator(*((CFTypeRef *)this + 7));
    v13 = CFNumberCreate(v12, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 8), CFSTR("percentage"), v13);
    CFRelease(v13);
    CFNotificationCenterPostNotification(*((CFNotificationCenterRef *)this + 9), CFSTR("BBUpdateProgress"), *((const void **)this + 7), *((CFDictionaryRef *)this + 8), 0);
  }
}

void BBUFeedback::endProgressBarItem(BBUFeedback *this)
{
  char *v2;
  uint64_t **v3;
  int v4;
  uint64_t **v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  double v10;
  const __CFAllocator *v11;
  CFNumberRef v12;
  unsigned int valuePtr;

  if (*((_BYTE *)this + 44))
  {
    v3 = (uint64_t **)((char *)this + 16);
    v2 = (char *)*((_QWORD *)this + 2);
    v4 = *((_DWORD *)this + 10);
    if (v2)
    {
      while (1)
      {
        while (1)
        {
          v5 = (uint64_t **)v2;
          v6 = *((_DWORD *)v2 + 8);
          if (v4 >= v6)
            break;
          v2 = (char *)*v5;
          v3 = v5;
          if (!*v5)
            goto LABEL_9;
        }
        if (v6 >= v4)
          break;
        v2 = (char *)v5[1];
        if (!v2)
        {
          v3 = v5 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
      v5 = (uint64_t **)((char *)this + 16);
LABEL_9:
      v7 = (char *)v5;
      v5 = (uint64_t **)operator new(0x30uLL);
      *((_DWORD *)v5 + 8) = v4;
      v5[5] = 0;
      *v5 = 0;
      v5[1] = 0;
      v5[2] = (uint64_t *)v7;
      *v3 = (uint64_t *)v5;
      v8 = **((_QWORD **)this + 1);
      v9 = (uint64_t *)v5;
      if (v8)
      {
        *((_QWORD *)this + 1) = v8;
        v9 = *v3;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 2), v9);
      ++*((_QWORD *)this + 3);
    }
    v10 = *((double *)this + 6) + *((double *)v5 + 5) / *((double *)this + 4);
    *((double *)this + 6) = v10;
    valuePtr = (v10 * 100.0);
    v11 = CFGetAllocator(*((CFTypeRef *)this + 7));
    v12 = CFNumberCreate(v11, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 8), CFSTR("percentage"), v12);
    CFRelease(v12);
    CFNotificationCenterPostNotification(*((CFNotificationCenterRef *)this + 9), CFSTR("BBUpdateProgress"), *((const void **)this + 7), *((CFDictionaryRef *)this + 8), 0);
  }
}

void BBUFeedback::handleBeginQuickStep(BBUFeedback *this, const char *a2, ...)
{
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *__dst[2];
  unint64_t v10;
  va_list v11;
  char __b[1024];
  uint64_t v13;
  va_list va;

  va_start(va, a2);
  v13 = *MEMORY[0x24BDAC8D0];
  memset(__b, 170, sizeof(__b));
  va_copy(v11, va);
  vsnprintf(__b, 0x400uLL, a2, va);
  v4 = strlen(__b);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v10 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v10) = v4;
  v6 = __dst;
  if (v4)
LABEL_8:
    memcpy(v6, __b, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  (*(void (**)(BBUFeedback *, void **))(*(_QWORD *)this + 56))(this, __dst);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
}

void sub_212AAC67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void BBUFeedback::handleBeginPhase(BBUFeedback *this, const char *a2, ...)
{
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *__dst[2];
  unint64_t v10;
  va_list v11;
  char __b[1024];
  uint64_t v13;
  va_list va;

  va_start(va, a2);
  v13 = *MEMORY[0x24BDAC8D0];
  memset(__b, 170, sizeof(__b));
  va_copy(v11, va);
  vsnprintf(__b, 0x400uLL, a2, va);
  v4 = strlen(__b);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v10 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v10) = v4;
  v6 = __dst;
  if (v4)
LABEL_8:
    memcpy(v6, __b, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  (*(void (**)(BBUFeedback *, void **))(*(_QWORD *)this + 64))(this, __dst);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
}

void sub_212AAC7D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void BBUFeedback::handleComment(BBUFeedback *this, const char *a2, ...)
{
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *__dst[2];
  unint64_t v10;
  va_list v11;
  char __b[1024];
  uint64_t v13;
  va_list va;

  va_start(va, a2);
  v13 = *MEMORY[0x24BDAC8D0];
  memset(__b, 170, sizeof(__b));
  va_copy(v11, va);
  vsnprintf(__b, 0x400uLL, a2, va);
  v4 = strlen(__b);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v10 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v10) = v4;
  v6 = __dst;
  if (v4)
LABEL_8:
    memcpy(v6, __b, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  (*(void (**)(BBUFeedback *, void **))(*(_QWORD *)this + 72))(this, __dst);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
}

void sub_212AAC934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void BBUFeedback::exitStageContext(BBUFeedback *this)
{
  uint64_t v1;
  unsigned int v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  const char *v12;
  void *exception;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v1 = *((_QWORD *)this + 22);
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUFeedback.cpp", 0xC9u, (ctu::LogMessageBuffer *)"Assertion failure(!fStageContext.empty())", v14, v15, v16, v20);
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 18)
                             + (((unint64_t)(v1 + *((_QWORD *)this + 21) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((v1 + *((_QWORD *)this + 21) - 1) & 0x3FF))
     - 1;
  if (v3 > 7)
    v4 = "StageContext::None";
  else
    v4 = off_24CE80668[v3];
  BBUFeedback::handleComment(this, "exiting %s", v4);
  v6 = *((_QWORD *)this + 18);
  v5 = *((_QWORD *)this + 19);
  v7 = ((v5 - v6) << 7) - 1;
  v9 = *((_QWORD *)this + 21);
  v8 = *((_QWORD *)this + 22);
  if (v5 == v6)
    v7 = 0;
  v10 = v8 - 1;
  *((_QWORD *)this + 22) = v8 - 1;
  if ((unint64_t)(v7 - (v8 + v9) + 1) >= 0x800)
  {
    operator delete(*(void **)(v5 - 8));
    *((_QWORD *)this + 19) -= 8;
    v10 = *((_QWORD *)this + 22);
  }
  if (!v10)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUFeedback.cpp", 0xCEu, (ctu::LogMessageBuffer *)"Assertion failure(!fStageContext.empty())", v17, v18, v19, v21);
LABEL_16:
  }
  v11 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 18)
                              + (((unint64_t)(v10 + *((_QWORD *)this + 21) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                  + 4 * ((v10 + *((_QWORD *)this + 21) - 1) & 0x3FF))
      - 1;
  if (v11 > 7)
    v12 = "StageContext::None";
  else
    v12 = off_24CE80668[v11];
  BBUFeedback::handleComment(this, "now in %s", v12);
}

void sub_212AACB00(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AACB14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<ctu::cf::CFSharedRef<__CFDictionary>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  _BYTE *v6;
  CFTypeRef *v7;
  uint64_t v8;
  CFTypeRef *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v10 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 >> 9];
    v6 = *v5;
    v7 = (CFTypeRef *)((char *)*v5 + 8 * (v4 & 0x1FF));
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v4) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*(_QWORD *)(a1 + 40) + v4) & 0x1FF);
    if (v7 != (CFTypeRef *)v8)
    {
      do
      {
        if (*v7)
        {
          CFRelease(*v7);
          v6 = *v5;
        }
        if ((char *)++v7 - v6 == 4096)
        {
          v9 = (CFTypeRef *)v5[1];
          ++v5;
          v6 = v9;
          v7 = v9;
        }
      }
      while (v7 != (CFTypeRef *)v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v10 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(a1 + 16);
        v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v2;
        v10 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 256;
    goto LABEL_17;
  }
  if (v11 == 2)
  {
    v12 = 512;
LABEL_17:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::deque<BBUpdaterCommon::StageContext>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__tree<std::__value_type<BBUFeedback::ProgressBarStages,double>,std::__map_value_compare<BBUFeedback::ProgressBarStages,std::__value_type<BBUFeedback::ProgressBarStages,double>,std::less<BBUFeedback::ProgressBarStages>,true>,std::allocator<std::__value_type<BBUFeedback::ProgressBarStages,double>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<BBUFeedback::ProgressBarStages,double>,std::__map_value_compare<BBUFeedback::ProgressBarStages,std::__value_type<BBUFeedback::ProgressBarStages,double>,std::less<BBUFeedback::ProgressBarStages>,true>,std::allocator<std::__value_type<BBUFeedback::ProgressBarStages,double>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<BBUFeedback::ProgressBarStages,double>,std::__map_value_compare<BBUFeedback::ProgressBarStages,std::__value_type<BBUFeedback::ProgressBarStages,double>,std::less<BBUFeedback::ProgressBarStages>,true>,std::allocator<std::__value_type<BBUFeedback::ProgressBarStages,double>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::deque<BBUpdaterCommon::StageContext>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  char *v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  BOOL v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v35 = (v5 - v9) >> 2;
    if (v5 == v9)
      v35 = 1;
    if (v35 >> 61)
      goto LABEL_109;
    v36 = v35 >> 2;
    v37 = 8 * v35;
    v38 = (char *)operator new(8 * v35);
    v39 = &v38[8 * v36];
    v41 = v5 - v7;
    v40 = v5 == v7;
    v5 = v39;
    if (!v40)
    {
      v5 = &v39[v41 & 0xFFFFFFFFFFFFFFF8];
      v42 = v41 - 8;
      if ((unint64_t)(v41 - 8) >= 0x38)
      {
        v92 = &v38[8 * v36];
        v43 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v42 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v43 = &v39[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v43 = &v38[8 * v36];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v43 = v99;
        v43 += 8;
      }
      while (v43 != v5);
    }
LABEL_89:
    *a1 = v38;
    a1[1] = v39;
    a1[2] = v5;
    a1[3] = &v38[v37];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v44 = &v72[8 * v70];
      v73 = v44;
      if (v18 != v19)
      {
        v73 = &v44[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v44[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v44;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v44 = (char *)a1[1];
      }
    }
    else
    {
      v44 = v19;
    }
    *((_QWORD *)v44 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v40 = v5 == v84;
      v5 = v105;
      if (!v40)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = &v28[8 * v22];
  v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    v33 = v29;
    if (v21 < 1)
    {
      if (v18 == v19)
        v45 = 1;
      else
        v45 = v21 >> 2;
      if (v45 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v30 = (char *)operator new(8 * v45);
      v31 = &v30[8 * v45];
      operator delete(v28);
      v46 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v30;
      *(_QWORD *)v30 = v33;
      v32 = v30 + 8;
      if (v18 == v46)
        goto LABEL_40;
    }
    else
    {
      v34 = v22 + 2;
      if (v22 >= -1)
        v34 = v22 + 1;
      v30 -= 8 * (v34 >> 1);
      *(_QWORD *)v30 = v29;
      v32 = v30 + 8;
      if (v18 == v19)
        goto LABEL_40;
    }
    goto LABEL_44;
  }
  *(_QWORD *)v30 = v29;
  v32 = v30 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_44:
      if (v30 == v28)
      {
        if (v32 >= v31)
        {
          if (v31 == v28)
            v53 = 1;
          else
            v53 = (v31 - v28) >> 2;
          if (v53 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v54 = (char *)operator new(8 * v53);
          v55 = v54;
          v56 = (v53 + 3) >> 2;
          v30 = &v54[8 * v56];
          v57 = v32 - v28;
          v40 = v32 == v28;
          v32 = v30;
          if (!v40)
          {
            v32 = &v30[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = v57 - 8;
            v59 = &v54[8 * v56];
            v60 = v28;
            if (v58 < 0x38)
              goto LABEL_114;
            v61 = 8 * v56;
            v59 = &v54[8 * v56];
            v60 = v28;
            if ((unint64_t)(v59 - v28) < 0x20)
              goto LABEL_114;
            v62 = (v58 >> 3) + 1;
            v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
            v59 = &v30[v63];
            v60 = &v28[v63];
            v64 = (__int128 *)(v28 + 16);
            v65 = &v54[v61 + 16];
            v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v67 = *v64;
              *((_OWORD *)v65 - 1) = *(v64 - 1);
              *(_OWORD *)v65 = v67;
              v64 += 2;
              v65 += 32;
              v66 -= 4;
            }
            while (v66);
            if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_114:
              do
              {
                v68 = *(_QWORD *)v60;
                v60 += 8;
                *(_QWORD *)v59 = v68;
                v59 += 8;
              }
              while (v59 != v32);
            }
          }
          v31 = &v54[8 * v53];
          operator delete(v28);
          v28 = v55;
        }
        else
        {
          v49 = (v31 - v32) >> 3;
          if (v49 >= -1)
            v50 = v49 + 1;
          else
            v50 = v49 + 2;
          v51 = v50 >> 1;
          v30 = &v28[8 * (v50 >> 1)];
          v52 = v28;
          if (v32 != v28)
          {
            memmove(v30, v28, v32 - v28);
            v52 = v32;
          }
          v32 = (char *)v52 + 8 * v51;
        }
      }
      v48 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v30 - 1) = v48;
      v30 -= 8;
    }
    while (v18 != (char *)a1[1]);
  }
LABEL_40:
  v47 = (char *)*a1;
  *a1 = v28;
  a1[1] = v30;
  a1[2] = v32;
  a1[3] = v31;
  if (v47)
    operator delete(v47);
}

void sub_212AAD414(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *BBUCommunication::create(capabilities::updater *a1)
{
  void *v1;
  void *v3;
  void *result;
  void *exception;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  switch(capabilities::updater::getCommunicationType(a1))
  {
    case 0u:
    case 3u:
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Communication/Common/BBUCommunication.cpp", 0x1Bu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized radio type.\")", v12, v13, v14, v15);
    case 1u:
      v3 = operator new(0x60uLL);
      *(_QWORD *)v3 = &unk_24CE819F0;
      *((_QWORD *)v3 + 1) = a1;
      __asm { FMOV            V0.2D, #5.0 }
      *((_OWORD *)v3 + 1) = _Q0;
      *((_BYTE *)v3 + 55) = 13;
      strcpy((char *)v3 + 32, "/dev/cu.debug");
      *((_DWORD *)v3 + 14) = -1;
      *((double *)v3 + 3) = (double)(capabilities::updater::bootupTimeMaxValue((capabilities::updater *)v3) / 1000)
                          + 5.0;
      *(_QWORD *)v3 = off_24CE81520;
      goto LABEL_4;
    case 2u:
      v3 = operator new(0x60uLL);
      *(_QWORD *)v3 = &unk_24CE84620;
      *((_QWORD *)v3 + 1) = a1;
      __asm { FMOV            V0.2D, #5.0 }
      *((_OWORD *)v3 + 1) = _Q0;
      *((_BYTE *)v3 + 55) = 13;
      strcpy((char *)v3 + 32, "/dev/cu.debug");
      *((_DWORD *)v3 + 14) = -1;
      *((double *)v3 + 3) = (double)(capabilities::updater::bootupTimeMaxValue((capabilities::updater *)v3) / 1000)
                          + 5.0;
      *(_QWORD *)v3 = off_24CE84EC8;
      *((_BYTE *)v3 + 60) = 0;
LABEL_4:
      *((_QWORD *)v3 + 8) = dispatch_queue_create("com.apple.BBUCommunication", 0);
      *((_QWORD *)v3 + 9) = dispatch_queue_create("com.apple.BBUStatuscallback", 0);
      *((_QWORD *)v3 + 10) = 0;
      *((_DWORD *)v3 + 22) = 34;
      result = v3;
      break;
    default:
      result = v1;
      break;
  }
  return result;
}

void sub_212AAD638(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AAD64C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212AAD660(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void BBUCommunication::getIPCLogBuffer(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t ICEStateMachineStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)(a1 + 368) = 1;
  _BBUFSDebugPrint("sRegister", "Registering for NVM updates: opt=%p, ari=%u\n", a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 96));
  v8 = KTLNVMSendRegister();
  _BBUFSDebugPrint("sRegister", "Register call returns %d\n", v9, v10, v11, v12, v13, v14, v8);
  return v8;
}

uint64_t ICEStateMachineStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;

  *(_BYTE *)(a1 + 368) = 0;
  if (*(_BYTE *)(a1 + 393))
    return 1;
  _BBUFSDebugPrint("sDeRegister", "De-registering for NVM updates\n", a3, a4, a5, a6, a7, a8, v9);
  return KTLNVMSendDeregister();
}

uint64_t ICEStateMachinePerformSnapshot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const char *v10;
  capabilities::updater *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  size_t v38;
  std::string::size_type v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int updated;
  int v48;
  const void *v49;
  size_t v50;
  __darwin_ino64_t v51;
  stat *p_dst;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  size_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  std::string::size_type v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  const char *v76;
  size_t v77;
  void *v78;
  void **v79;
  uint64_t v80;
  uint64_t v81;
  size_t v82;
  void *v83;
  void **v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  timespec v93;
  const char *v94;
  int v95;
  const char *v96;
  int v97;
  passwd *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  timespec v114;
  std::string *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  std::string *v122;
  std::string *v123;
  int v124;
  char v125;
  int *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void **v133;
  int *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void **v147;
  std::string *v148;
  std::error_code *v149;
  const std::__fs::filesystem::path *v150;
  const std::__fs::filesystem::path *v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  void **v167;
  int *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  char v176;
  int *v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  std::error_code *v185;
  const std::__fs::filesystem::path *v186;
  const std::__fs::filesystem::path *v187;
  int v188;
  int *v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v205;
  char v206;
  char v207;
  char v208;
  std::string *v209;
  uint64_t v210;
  char *__s;
  stat __dst;
  std::string v213;
  void *v214[3];
  void *v215[3];
  std::string v216;
  std::string v217;
  _BYTE v218[32];
  __int128 v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;

  __s = (char *)(a1 + 104);
  v222 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 400) = 0;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v9 = *(int *)(a1 + 376);
        v10 = "Unknown";
        if (v9 <= 2)
          v10 = off_24CE806D8[v9];
        v11 = (capabilities::updater *)_BBUFSDebugPrint("ICEStateMachinePerformSnapshot", "---------------------%s---------------------\n", a3, a4, a5, a6, a7, a8, (char)v10);
        v18 = *(_DWORD *)(a1 + 376);
        if (v18 == 2)
          break;
        if (v18 == 1)
        {
          *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v220 = v27;
          v221 = v27;
          *(_OWORD *)&v218[16] = v27;
          v219 = v27;
          *(_OWORD *)v218 = v27;
          if (!KTLNVMReadUpdateHeader())
          {
            v197 = "failed reading update header\n";
LABEL_184:
            _BBUFSDebugPrint("sProcessUpdate", v197, a3, a4, a5, a6, a7, a8, v205);
            goto LABEL_185;
          }
          v28 = DWORD1(v221);
          _BBUFSDebugPrint("sProcessUpdate", "Expecting %d bytes from device\n", a3, a4, a5, a6, a7, a8, SBYTE4(v221));
          v29 = DWORD1(v219);
          v30 = v221;
          *(_DWORD *)(a1 + 396) = DWORD1(v219);
          v210 = v30;
          v209 = (std::string *)__s;
          _BBUFSDebugPrint("sSaveRecord", "saving file %u to %s, offset %u, size %u\n", v31, v32, v33, v34, v35, v36, v29);
          memset(&v217, 170, sizeof(v217));
          v37 = (const void *)kBBUFSServerBackupName;
          v38 = strlen((const char *)kBBUFSServerBackupName);
          if (v38 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v39 = v38;
          if (v38 >= 0x17)
          {
            v62 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v38 | 7) != 0x17)
              v62 = v38 | 7;
            v63 = v62 + 1;
            v40 = operator new(v62 + 1);
            v217.__r_.__value_.__l.__size_ = v39;
            v217.__r_.__value_.__r.__words[2] = v63 | 0x8000000000000000;
            v217.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
LABEL_52:
            memmove(v40, v37, v39);
            goto LABEL_53;
          }
          *((_BYTE *)&v217.__r_.__value_.__s + 23) = v38;
          v40 = &v217;
          if (v38)
            goto LABEL_52;
LABEL_53:
          *((_BYTE *)v40 + v39) = 0;
          memset(&v216, 170, sizeof(v216));
          v64 = strlen(__s);
          if (v64 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v65 = v64;
          if (v64 >= 0x17)
          {
            v67 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v64 | 7) != 0x17)
              v67 = v64 | 7;
            v68 = v67 + 1;
            v66 = operator new(v67 + 1);
            v216.__r_.__value_.__l.__size_ = v65;
            v216.__r_.__value_.__r.__words[2] = v68 | 0x8000000000000000;
            v216.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
LABEL_60:
            memcpy(v66, __s, v65);
            goto LABEL_61;
          }
          *((_BYTE *)&v216.__r_.__value_.__s + 23) = v64;
          v66 = &v216;
          if (v64)
            goto LABEL_60;
LABEL_61:
          *((_BYTE *)v66 + v65) = 0;
          ctu::path_join_impl();
          v75 = 1;
          v76 = "calib.nvm";
          switch(v29)
          {
            case 0:
              break;
            case 1:
              v76 = "static.nvm";
              break;
            case 2:
              v76 = "dynamic.nvm";
              break;
            case 3:
              v76 = "bbpac.der";
              break;
            default:
              _BBUFSDebugPrint("sSaveRecord", "failed obtaining true file name\n", v69, v70, v71, v72, v73, v74, v206);
              v75 = 0;
              v76 = 0;
              break;
          }
          memset(v215, 170, sizeof(v215));
          v77 = strlen(v76);
          if (v77 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v78 = (void *)v77;
          if (v77 >= 0x17)
          {
            v80 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v77 | 7) != 0x17)
              v80 = v77 | 7;
            v81 = v80 + 1;
            v79 = (void **)operator new(v80 + 1);
            v215[1] = v78;
            v215[2] = (void *)(v81 | 0x8000000000000000);
            v215[0] = v79;
LABEL_73:
            memcpy(v79, v76, (size_t)v78);
            goto LABEL_74;
          }
          HIBYTE(v215[2]) = v77;
          v79 = v215;
          if (v77)
            goto LABEL_73;
LABEL_74:
          *((_BYTE *)v78 + (_QWORD)v79) = 0;
          memset(v214, 170, sizeof(v214));
          v82 = strlen(__s);
          if (v82 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v83 = (void *)v82;
          if (v82 >= 0x17)
          {
            v85 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v82 | 7) != 0x17)
              v85 = v82 | 7;
            v86 = v85 + 1;
            v84 = (void **)operator new(v85 + 1);
            v214[1] = v83;
            v214[2] = (void *)(v86 | 0x8000000000000000);
            v214[0] = v84;
LABEL_81:
            memcpy(v84, __s, (size_t)v83);
            goto LABEL_82;
          }
          HIBYTE(v214[2]) = v82;
          v84 = v214;
          if (v82)
            goto LABEL_81;
LABEL_82:
          *((_BYTE *)v83 + (_QWORD)v84) = 0;
          ctu::path_join_impl();
          memset(&v213, 170, sizeof(v213));
          if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v213, v216.__r_.__value_.__l.__data_, v216.__r_.__value_.__l.__size_);
          else
            v213 = v216;
          ctu::path_join_impl();
          if (!v75)
            goto LABEL_90;
          v93.tv_sec = 0xAAAAAAAAAAAAAAAALL;
          v93.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
          *(timespec *)&__dst.st_blksize = v93;
          *(timespec *)__dst.st_qspare = v93;
          *(timespec *)&__dst.st_size = v93;
          __dst.st_ctimespec = v93;
          __dst.st_birthtimespec = v93;
          __dst.st_atimespec = v93;
          __dst.st_mtimespec = v93;
          *(timespec *)&__dst.st_dev = v93;
          *(timespec *)&__dst.st_uid = v93;
          v94 = SHIBYTE(v214[2]) >= 0 ? (const char *)v214 : (const char *)v214[0];
          if (!stat(v94, &__dst))
          {
            v114.tv_sec = 0xAAAAAAAAAAAAAAAALL;
            v114.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
            *(timespec *)&__dst.st_blksize = v114;
            *(timespec *)__dst.st_qspare = v114;
            *(timespec *)&__dst.st_size = v114;
            __dst.st_ctimespec = v114;
            __dst.st_birthtimespec = v114;
            __dst.st_atimespec = v114;
            __dst.st_mtimespec = v114;
            *(timespec *)&__dst.st_dev = v114;
            *(timespec *)&__dst.st_uid = v114;
            if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v115 = &v216;
            else
              v115 = (std::string *)v216.__r_.__value_.__r.__words[0];
            if (stat((const char *)v115, &__dst))
            {
              v122 = &v216;
              if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                LOBYTE(v122) = v216.__r_.__value_.__s.__data_[0];
              _BBUFSDebugPrint("sSaveRecord", "creating backup directory at %s\n", v116, v117, v118, v119, v120, v121, (char)v122);
              if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v123 = &v216;
              else
                v123 = (std::string *)v216.__r_.__value_.__r.__words[0];
              v124 = mkdir((const char *)v123, 0x1C0u);
              if (v124)
              {
                v125 = v124;
                __error();
                v126 = __error();
                strerror(*v126);
                _BBUFSDebugPrint("sSaveRecord", "failed creating backup directory: %d, %d (%s)\n", v127, v128, v129, v130, v131, v132, v125);
LABEL_144:
                v95 = 0;
LABEL_145:
                v97 = -1;
                goto LABEL_146;
              }
            }
            else if ((__dst.st_mode & 0xF000) != 0x4000)
            {
              _BBUFSDebugPrint("sSaveRecord", "backup dir path exists but is not a directory\n", v116, v117, v118, v119, v120, v121, v206);
              goto LABEL_144;
            }
            if (SHIBYTE(v214[2]) >= 0)
              v147 = v214;
            else
              LOBYTE(v147) = v214[0];
            v148 = &v213;
            if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v148 = (std::string *)v213.__r_.__value_.__r.__words[0];
            v209 = v148;
            _BBUFSDebugPrint("sSaveRecord", "backing up file from %s to %s\n", v116, v117, v118, v119, v120, v121, (char)v147);
            if (SHIBYTE(v214[2]) >= 0)
              v150 = (const std::__fs::filesystem::path *)v214;
            else
              v150 = (const std::__fs::filesystem::path *)v214[0];
            if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v151 = (const std::__fs::filesystem::path *)&v213;
            else
              v151 = (const std::__fs::filesystem::path *)v213.__r_.__value_.__r.__words[0];
            rename(v150, v151, v149);
            if (v152 < 0)
            {
              if (SHIBYTE(v214[2]) >= 0)
                v167 = v214;
              else
                LOBYTE(v167) = v214[0];
              v168 = __error();
              strerror(*v168);
              _BBUFSDebugPrint("sSaveRecord", "failed backing up file %s to %s:  %s\n", v169, v170, v171, v172, v173, v174, (char)v167);
              goto LABEL_144;
            }
            v95 = 0;
          }
          else
          {
LABEL_90:
            _BBUFSDebugPrint("sSaveRecord", "nothing to back up\n", v87, v88, v89, v90, v91, v92, v206);
            v95 = 1;
            if (!v75)
              goto LABEL_145;
          }
          if (SHIBYTE(v214[2]) >= 0)
            v96 = (const char *)v214;
          else
            v96 = (const char *)v214[0];
          v97 = open(v96, 1537, 384, v209, v210, v28);
          if (v97 < 0)
          {
            if (SHIBYTE(v214[2]) >= 0)
              v133 = v214;
            else
              LOBYTE(v133) = v214[0];
            v134 = __error();
            strerror(*v134);
            _BBUFSDebugPrint("sSaveRecord", "failed opening %s:  %s\n", v135, v136, v137, v138, v139, v140, (char)v133);
            goto LABEL_146;
          }
          v98 = getpwnam("_wireless");
          if (!v98)
          {
            _BBUFSDebugPrint("getWirelessID", "failed to get uid and gid information for _wireless\n", v99, v100, v101, v102, v103, v104, v205);
            _BBUFSDebugPrint("sSaveRecord", "failed to get uid and gid information for _wireless\n", v141, v142, v143, v144, v145, v146, v207);
LABEL_146:
            memset(&__dst, 0, 88);
LABEL_147:
            v166 = 0;
            v175 = 0;
            if (v97 < 0)
              goto LABEL_154;
            goto LABEL_148;
          }
          if (fchown(v97, v98->pw_uid, v98->pw_gid))
          {
            v105 = __error();
            v106 = strerror(*v105);
            _BBUFSDebugPrint("sSaveRecord", "failed changing file owner:  %s", v107, v108, v109, v110, v111, v112, v106);
            goto LABEL_146;
          }
          memset(&__dst, 0, 88);
          if ((TelephonyUtilTransportCreateWithFD() & 1) == 0)
          {
            _BBUFSDebugPrint("sSaveRecord", "failed creating telephony util transport\n", v153, v154, v155, v156, v157, v158, v205);
            goto LABEL_147;
          }
          v159 = ICE_FILER_read();
          if (v159 == (_DWORD)v28)
          {
            v166 = 1;
          }
          else
          {
            if (v159 < 0)
              _BBUFSDebugPrint("sSaveRecord", "failed reading file: return code = %d\n", v160, v161, v162, v163, v164, v165, v159);
            else
              _BBUFSDebugPrint("sSaveRecord", "Unexpected data size received.  Got %u, expected %u\n", v160, v161, v162, v163, v164, v165, v159);
            v166 = 0;
          }
LABEL_148:
          if (close(v97))
            v176 = 0;
          else
            v176 = v166;
          if ((v176 & 1) != 0)
          {
            v175 = 1;
          }
          else
          {
            v177 = __error();
            v178 = strerror(*v177);
            _BBUFSDebugPrint("sSaveRecord", "failed closing saved record:  %s\n", v179, v180, v181, v182, v183, v184, v178);
            v175 = 0;
          }
LABEL_154:
          TelephonyUtilTransportFree();
          if (((v95 | v175) & 1) == 0)
          {
            _BBUFSDebugPrint("sSaveRecord", "restoring backup file\n", a3, a4, a5, a6, a7, a8, v205);
            v186 = (v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? (const std::__fs::filesystem::path *)&v213
                 : (const std::__fs::filesystem::path *)v213.__r_.__value_.__r.__words[0];
            v187 = SHIBYTE(v214[2]) >= 0
                 ? (const std::__fs::filesystem::path *)v214
                 : (const std::__fs::filesystem::path *)v214[0];
            rename(v186, v187, v185);
            if (v188 < 0)
            {
              v189 = __error();
              v190 = strerror(*v189);
              _BBUFSDebugPrint("sSaveRecord", "failed restoring backup file %s\n", v191, v192, v193, v194, v195, v196, v190);
            }
          }
          if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v213.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v214[2]) & 0x80000000) == 0)
            {
LABEL_165:
              if ((SHIBYTE(v215[2]) & 0x80000000) == 0)
                goto LABEL_166;
              goto LABEL_172;
            }
          }
          else if ((SHIBYTE(v214[2]) & 0x80000000) == 0)
          {
            goto LABEL_165;
          }
          operator delete(v214[0]);
          if ((SHIBYTE(v215[2]) & 0x80000000) == 0)
          {
LABEL_166:
            if ((SHIBYTE(v216.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_167;
            goto LABEL_173;
          }
LABEL_172:
          operator delete(v215[0]);
          if ((SHIBYTE(v216.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_167:
            if ((SHIBYTE(v217.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_168;
            goto LABEL_174;
          }
LABEL_173:
          operator delete(v216.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v217.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_168:
            if ((v175 & 1) == 0)
              goto LABEL_183;
            goto LABEL_175;
          }
LABEL_174:
          operator delete(v217.__r_.__value_.__l.__data_);
          if ((v175 & 1) == 0)
          {
LABEL_183:
            v197 = "failed saving update\n";
            goto LABEL_184;
          }
LABEL_175:
          *(_DWORD *)(a1 + 376) = 2;
        }
        else if (v18)
        {
          _BBUFSDebugPrint("ICEStateMachinePerformSnapshot", "unknown state\n", v12, v13, v14, v15, v16, v17, v205);
        }
        else
        {
          LOBYTE(__dst.st_dev) = 0;
          v19 = *(_DWORD *)(a1 + 388);
          v20 = *(_BYTE *)(a1 + 393) != 0;
          if ((v20 & capabilities::updater::shouldOnlySyncDynamicOnShutdown(v11)) == 1 && v19 == 40)
            _BBUFSDebugPrint("sSnapshot", "Only sync dynamic.nvm when shutdown sync is triggered\n", v21, v22, v23, v24, v25, v26, v205);
          if ((KTLNVMSendSnapshot() & 1) == 0)
          {
            _BBUFSDebugPrint("sSnapshot", "failed sending snapshot command\n", a3, a4, a5, a6, a7, a8, v205);
LABEL_185:
            updated = 0;
            goto LABEL_186;
          }
          if (!LOBYTE(__dst.st_dev))
          {
            _BBUFSDebugPrint("sSnapshot", "No update pending, finished with sync\n", a3, a4, a5, a6, a7, a8, v205);
            *(_DWORD *)(a1 + 376) = 0;
            _BBUFSDebugPrint("ICEStateMachinePerformSnapshot", "device has no further updates\n", v198, v199, v200, v201, v202, v203, v208);
            updated = 1;
            goto LABEL_186;
          }
          *(_DWORD *)(a1 + 376) = 1;
          *(_BYTE *)(a1 + 400) = 1;
        }
      }
      LOBYTE(v215[0]) = 0;
      updated = KTLNVMSendUpdateAck();
      if ((updated & 1) == 0)
        _BBUFSDebugPrint("sUpdateAck", "failed acknowledging update\n", v41, v42, v43, v44, v45, v46, v205);
      v48 = LOBYTE(v215[0]);
      memset(&__dst, 170, 24);
      v49 = (const void *)kBBUFSServerBackupName;
      v50 = strlen((const char *)kBBUFSServerBackupName);
      if (v50 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v51 = v50;
      if (v50 >= 0x17)
      {
        v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v50 | 7) != 0x17)
          v53 = v50 | 7;
        v54 = v53 + 1;
        p_dst = (stat *)operator new(v53 + 1);
        __dst.st_ino = v51;
        *(_QWORD *)&__dst.st_uid = v54 | 0x8000000000000000;
        *(_QWORD *)&__dst.st_dev = p_dst;
LABEL_28:
        memmove(p_dst, v49, v51);
        goto LABEL_29;
      }
      HIBYTE(__dst.st_gid) = v50;
      p_dst = &__dst;
      if (v50)
        goto LABEL_28;
LABEL_29:
      *((_BYTE *)&p_dst->st_dev + v51) = 0;
      memset(v218, 170, 24);
      v55 = strlen(__s);
      if (v55 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v56 = v55;
      if (v55 >= 0x17)
      {
        v58 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v55 | 7) != 0x17)
          v58 = v55 | 7;
        v59 = v58 + 1;
        v57 = operator new(v58 + 1);
        *(_QWORD *)&v218[8] = v56;
        *(_QWORD *)&v218[16] = v59 | 0x8000000000000000;
        *(_QWORD *)v218 = v57;
LABEL_36:
        memcpy(v57, __s, v56);
        goto LABEL_37;
      }
      v218[23] = v55;
      v57 = v218;
      if (v55)
        goto LABEL_36;
LABEL_37:
      v57[v56] = 0;
      ctu::path_join_impl();
      v60 = v48 ^ 1;
      if (!updated)
        goto LABEL_99;
      if (v60)
        break;
      updated = 1;
LABEL_99:
      if ((v218[23] & 0x80000000) != 0)
        goto LABEL_42;
LABEL_100:
      if ((SHIBYTE(__dst.st_gid) & 0x80000000) == 0)
        goto LABEL_101;
LABEL_43:
      operator delete(*(void **)&__dst.st_dev);
      v61 = updated ^ 1;
      if (v60)
        v61 = 1;
      if ((v61 & 1) != 0)
        goto LABEL_46;
LABEL_104:
      *(_DWORD *)(a1 + 376) = 1;
    }
    if (!ctu::fs::read_folder())
      _BBUFSDebugPrint("sUpdateAck", "did not find any backup\n", a3, a4, a5, a6, a7, a8, v205);
    updated = 1;
    if ((v218[23] & 0x80000000) == 0)
      goto LABEL_100;
LABEL_42:
    operator delete(*(void **)v218);
    if (SHIBYTE(__dst.st_gid) < 0)
      goto LABEL_43;
LABEL_101:
    v113 = updated ^ 1;
    if (v60)
      v113 = 1;
    if ((v113 & 1) == 0)
      goto LABEL_104;
LABEL_46:
    if (v60)
      break;
    if ((updated & 1) == 0)
      goto LABEL_185;
  }
  *(_DWORD *)(a1 + 376) = 0;
  _BBUFSDebugPrint("ICEStateMachinePerformSnapshot", "device has no further updates\n", a3, a4, a5, a6, a7, a8, v205);
LABEL_186:
  if (*(_BYTE *)(a1 + 368))
    return updated;
  else
    return 1;
}

void sub_212AAE670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void **v65;
  uint64_t v66;

  if (a46 < 0)
  {
    operator delete(v65[18]);
    if ((a53 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a53 & 0x80000000) == 0)
  {
LABEL_3:
    if (a59 < 0)
      goto LABEL_4;
    goto LABEL_9;
  }
  operator delete(v65[22]);
  if (a59 < 0)
  {
LABEL_4:
    operator delete(v65[25]);
    if ((a65 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  if ((a65 & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v66 - 217) & 0x80000000) == 0)
LABEL_12:
      _Unwind_Resume(a1);
LABEL_11:
    operator delete(v65[32]);
    _Unwind_Resume(a1);
  }
LABEL_10:
  operator delete(v65[28]);
  if ((*(char *)(v66 - 217) & 0x80000000) == 0)
    goto LABEL_12;
  goto LABEL_11;
}

uint64_t ICEStateMachineSetConfig(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v42;
  const char *v43;
  const char *v44;
  char v45;

  if (!a1 || !a2)
  {
    _BBUFSDebugPrint("ICEStateMachineSetConfig", "failed to set config as one of the args is NULL\n", a3, a4, a5, a6, a7, a8, v45);
    return 0;
  }
  v9 = a3;
  if (!strcasecmp("ForceSync", a2))
  {
    *(_BYTE *)(a1 + 392) = v9 != 0;
    v42 = "false";
    if (v9)
      v42 = "true";
    _BBUFSDebugPrint("ICEStateMachineSetConfig", "Set forceSync config to %s\n", v11, v12, v13, v14, v15, v16, (char)v42);
  }
  else if (!strcasecmp("ShutdownSync", a2))
  {
    *(_BYTE *)(a1 + 393) = v9 != 0;
    v43 = "false";
    if (v9)
      v43 = "true";
    _BBUFSDebugPrint("ICEStateMachineSetConfig", "Set shutdownSync config to %s\n", v17, v18, v19, v20, v21, v22, (char)v43);
  }
  else if (!strcasecmp("ARICtxId", a2))
  {
    *(_DWORD *)(a1 + 380) = v9;
    _BBUFSDebugPrint("ICEStateMachineSetConfig", "Set ARI context ID to %d\n", v23, v24, v25, v26, v27, v28, v9);
  }
  else
  {
    if (!strcasecmp("SyncStatic", a2))
    {
      *(_DWORD *)(a1 + 388) = 1;
      _BBUFSDebugPrint("ICEStateMachineSetConfig", "Requested to sync static\n", v29, v30, v31, v32, v33, v34, v45);
      return 1;
    }
    if (!strcasecmp("SyncDynamic", a2))
    {
      *(_DWORD *)(a1 + 388) = 2;
      v44 = "Requested to sync dynamic\n";
    }
    else if (!strcasecmp("SyncCalibration", a2))
    {
      *(_DWORD *)(a1 + 388) = 0;
      v44 = "Requested to sync calibration\n";
    }
    else if (!strcasecmp("SyncFATPCalibration", a2))
    {
      *(_DWORD *)(a1 + 388) = 3;
      v44 = "Requested to sync FATP-calibration\n";
    }
    else if (!strcasecmp("SyncStaticDynamicCalibration", a2))
    {
      *(_DWORD *)(a1 + 388) = 30;
      v44 = "Requested to sync static + dynamic + calibration\n";
    }
    else
    {
      if (strcasecmp("SyncStaticDynamic", a2))
      {
        _BBUFSDebugPrint("ICEStateMachineSetConfig", "failed to set config, unrecognized config name '%s'\n", v35, v36, v37, v38, v39, v40, (char)a2);
        return 0;
      }
      *(_DWORD *)(a1 + 388) = 40;
      v44 = "Requested to sync static + dynamic\n";
    }
    _BBUFSDebugPrint("ICEStateMachineSetConfig", v44, v35, v36, v37, v38, v39, v40, v45);
  }
  return 1;
}

uint64_t ICEStateMachineSetConfigDefaults(uint64_t a1)
{
  *(_DWORD *)(a1 + 388) = 40;
  *(_WORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 396) = 40;
  *(_BYTE *)(a1 + 400) = 0;
  return 1;
}

BOOL ICEStateMachineSnapshotInProgress(uint64_t a1)
{
  return *(_DWORD *)(a1 + 376) > 0;
}

uint64_t eUICC::getEID(capabilities::euicc *a1, uint64_t a2, BBUFeedback *a3)
{
  capabilities::radio *v6;
  capabilities::radio *v7;
  char *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  const __CFString *Value;
  CFTypeID TypeID;
  const char *CStringPtr;
  size_t v16;
  size_t v17;
  __int128 *v18;
  __int128 v19;
  capabilities::updater *v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  std::locale::id *v24;
  uint64_t v25;
  const std::ios_base *v26;
  const std::locale::facet *v27;
  size_t v28;
  __int128 *p_dst;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  std::string *v39;
  std::string *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  __int128 __dst;
  unint64_t v46;
  void *v47[2];
  unint64_t v48;
  CFDictionaryRef theDict[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD v57[9];
  unint64_t v58;
  std::locale v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[26];
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v47[0] = 0;
  v47[1] = 0;
  v48 = 0;
  v6 = (capabilities::radio *)capabilities::euicc::supportsLegacyUpdater(a1);
  if ((_DWORD)v6)
  {
    v7 = (capabilities::radio *)capabilities::radio::maverick(v6);
    if ((_DWORD)v7)
    {
      v8 = (char *)operator new(0x138uLL);
      *(_WORD *)(v8 + 289) = 0;
      *(_QWORD *)v8 = &unk_24CE866C8;
      *((_QWORD *)v8 + 37) = a1;
      *((_DWORD *)v8 + 73) = 255;
      v8[304] = 15;
    }
    else if (capabilities::radio::ice(v7))
    {
      v8 = (char *)operator new(0x140uLL);
      eUICC::eUICCVinylICEValve::eUICCVinylICEValve((eUICC::eUICCVinylICEValve *)v8, a1, 255, 0);
    }
    else
    {
      v8 = 0;
    }
    *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v76[10] = v19;
    v75 = v19;
    *(_OWORD *)v76 = v19;
    v73 = v19;
    v74 = v19;
    v71 = v19;
    v72 = v19;
    v69 = v19;
    v70 = v19;
    v67 = v19;
    v68 = v19;
    v65 = v19;
    v66 = v19;
    v63 = v19;
    v64 = v19;
    v61 = v19;
    v62 = v19;
    v60 = v19;
    v20 = (capabilities::updater *)(*(_QWORD *(**)(__int128 *__return_ptr, char *))(*(_QWORD *)v8 + 8))(&v60, v8);
    v21 = capabilities::updater::EUICCVinylSuccessStatus(v20);
    if ((_DWORD)v60 != v21)
    {
      if (v76[24])
      {
        BBUFeedback::handleComment(a3, "Failed to get EID - Adc config mismatch");
        v30 = 126;
      }
      else
      {
        BBUFeedback::handleComment(a3, "Failed to get EID.");
        v30 = 107;
      }
      (*(void (**)(char *))(*(_QWORD *)v8 + 96))(v8);
      return v30;
    }
    v44 = a2;
    v58 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v57[7] = v22;
    v57[8] = v22;
    v57[5] = v22;
    v57[6] = v22;
    v57[3] = v22;
    v57[4] = v22;
    v57[1] = v22;
    v57[2] = v22;
    v56 = v22;
    v57[0] = v22;
    v54 = v22;
    v55 = v22;
    v52 = v22;
    v53 = v22;
    v50 = v22;
    v51 = v22;
    *(_OWORD *)theDict = v22;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)theDict);
    v23 = 7;
    v24 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v25 = v50;
      *(_DWORD *)((char *)&v50 + *(_QWORD *)(v50 - 24) + 8) = *(_DWORD *)((_BYTE *)&v50 + *(_QWORD *)(v50 - 24) + 8) & 0xFFFFFFB5 | 8;
      v26 = (const std::ios_base *)((char *)&v50 + *(_QWORD *)(v25 - 24));
      if (v26[1].__fmtflags_ == -1)
      {
        std::ios_base::getloc(v26);
        v27 = std::locale::use_facet(&v59, v24);
        ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 32);
        std::locale::~locale(&v59);
        v25 = v50;
      }
      v26[1].__fmtflags_ = 48;
      *(_QWORD *)((char *)&v51 + *(_QWORD *)(v25 - 24) + 8) = 2;
      std::ostream::operator<<();
      ++v23;
    }
    while (v23 != 23);
    if ((BYTE8(v56) & 0x10) != 0)
    {
      v31 = v56;
      a2 = v44;
      if ((unint64_t)v56 < *((_QWORD *)&v53 + 1))
      {
        *(_QWORD *)&v56 = *((_QWORD *)&v53 + 1);
        v31 = *((_QWORD *)&v53 + 1);
      }
      v32 = (const void *)v53;
      v28 = v31 - v53;
      if ((unint64_t)(v31 - v53) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_47;
    }
    else
    {
      a2 = v44;
      if ((BYTE8(v56) & 8) == 0)
      {
        v28 = 0;
        HIBYTE(v46) = 0;
        p_dst = &__dst;
        goto LABEL_41;
      }
      v32 = (const void *)*((_QWORD *)&v51 + 1);
      v28 = *((_QWORD *)&v52 + 1) - *((_QWORD *)&v51 + 1);
      if (*((_QWORD *)&v52 + 1) - *((_QWORD *)&v51 + 1) > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_47:
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v28 >= 0x17)
    {
      v33 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17)
        v33 = v28 | 7;
      v34 = v33 + 1;
      p_dst = (__int128 *)operator new(v33 + 1);
      *((_QWORD *)&__dst + 1) = v28;
      v46 = v34 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v46) = v28;
      p_dst = &__dst;
      if (!v28)
        goto LABEL_41;
    }
    memmove(p_dst, v32, v28);
LABEL_41:
    *((_BYTE *)p_dst + v28) = 0;
    theDict[0] = *(CFDictionaryRef *)MEMORY[0x24BEDB7F0];
    v35 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(CFDictionaryRef *)((char *)theDict + *((_QWORD *)theDict[0] - 3)) = *(CFDictionaryRef *)(MEMORY[0x24BEDB7F0] + 64);
    *(_QWORD *)&v50 = v35;
    *((_QWORD *)&v50 + 1) = MEMORY[0x24BEDB848] + 16;
    if (SHIBYTE(v55) < 0)
      operator delete(*((void **)&v54 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BFA3D0](v57);
    if (SHIBYTE(v48) < 0)
      operator delete(v47[0]);
    *(_OWORD *)v47 = __dst;
    v48 = v46;
    (*(void (**)(char *))(*(_QWORD *)v8 + 96))(v8);
    goto LABEL_57;
  }
  BBUFeedback::handleComment(a3, "Querying vinyl library for EID");
  v9 = dlopen("/usr/local/lib/libVinylNonUpdater.dylib", 1);
  v10 = v9;
  if (!v9)
    goto LABEL_57;
  v11 = dlsym(v9, "VinyleUICCPerformOperationWithTransport");
  if (!v11)
  {
LABEL_56:
    dlclose(v10);
    goto LABEL_57;
  }
  theDict[0] = 0;
  v12 = ((uint64_t (*)(_QWORD, CFDictionaryRef *, _QWORD, uint64_t, capabilities::euicc *))v11)(0, theDict, 0, 1, a1);
  BBUFeedback::handleComment(a3, "VinyleUICCPerformOperationWithTransport returned %d", v12);
  if (!v12 && theDict[0])
  {
    Value = (const __CFString *)CFDictionaryGetValue(theDict[0], CFSTR("EID"));
    if (!Value || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(Value)))
    {
LABEL_55:
      CFRelease(theDict[0]);
      goto LABEL_56;
    }
    CStringPtr = CFStringGetCStringPtr(Value, 0x8000100u);
    v16 = strlen(CStringPtr);
    if (v16 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v17 = v16;
    if (v16 >= 0x17)
    {
      v36 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v36 = v16 | 7;
      v37 = v36 + 1;
      v18 = (__int128 *)operator new(v36 + 1);
      *((_QWORD *)&v60 + 1) = v17;
      *(_QWORD *)&v61 = v37 | 0x8000000000000000;
      *(_QWORD *)&v60 = v18;
    }
    else
    {
      BYTE7(v61) = v16;
      v18 = &v60;
      if (!v16)
        goto LABEL_52;
    }
    memmove(v18, CStringPtr, v17);
LABEL_52:
    *((_BYTE *)v18 + v17) = 0;
    if (SHIBYTE(v48) < 0)
      operator delete(v47[0]);
    *(_OWORD *)v47 = v60;
    v48 = v61;
    goto LABEL_55;
  }
  dlclose(v10);
  if (v12)
  {
    BBUFeedback::handleComment(a3, "Failed to get EID.");
    return 107;
  }
LABEL_57:
  if (SHIBYTE(v48) < 0)
  {
    if (!v47[1])
    {
      v42 = 107;
LABEL_73:
      operator delete(v47[0]);
      return v42;
    }
    v38 = (void **)v47[0];
    goto LABEL_62;
  }
  if (!HIBYTE(v48))
    return 107;
  v38 = v47;
LABEL_62:
  BBUFeedback::handleComment(a3, "EID: %s", (const char *)v38);
  v39 = (std::string *)operator new(0x18uLL);
  v40 = v39;
  if (SHIBYTE(v48) < 0)
  {
    std::string::__init_copy_ctor_external(v39, (const std::string::value_type *)v47[0], (std::string::size_type)v47[1]);
  }
  else
  {
    *(_OWORD *)&v39->__r_.__value_.__l.__data_ = *(_OWORD *)v47;
    v39->__r_.__value_.__r.__words[2] = v48;
  }
  v41 = *(_QWORD *)(a2 + 24);
  if (v41)
  {
    if (*(char *)(v41 + 23) < 0)
      operator delete(*(void **)v41);
    operator delete((void *)v41);
  }
  v42 = 0;
  v30 = 0;
  *(_QWORD *)(a2 + 24) = v40;
  if (SHIBYTE(v48) < 0)
    goto LABEL_73;
  return v30;
}

void sub_212AAF244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::locale a59)
{
  void *v59;

  operator delete(v59);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_6()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ICEARIContext>::~PthreadMutexGuardPolicy, &ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance, &dword_212A4D000);
  }
  return result;
}

uint64_t BBUICE16UpdateSource::getMRCFilePath@<X0>(uint64_t a1@<X8>)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  BBUPartitionManager *v10;
  BBUPartitionManager *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  char v24;
  std::string::size_type v25;
  std::string *v26;
  const void **v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  std::string __p;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39[2];
  __int128 v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41 = 0xAAAAAAAAAAAAAAAALL;
  v51 = v3;
  v50 = v3;
  v49 = v3;
  v48 = v3;
  v47 = v3;
  v46 = v3;
  v45 = v3;
  v44 = v3;
  v43 = v3;
  v40 = v3;
  v38 = v3;
  *(_OWORD *)v39 = v3;
  v36 = v3;
  v37 = v3;
  v35 = v3;
  v4 = MEMORY[0x24BEDB870];
  v5 = MEMORY[0x24BEDB870] + 64;
  v42 = MEMORY[0x24BEDB870] + 64;
  v6 = (uint64_t *)MEMORY[0x24BEDB800];
  v7 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v34 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v34 + *(_QWORD *)(v34 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v34 + *(_QWORD *)(v34 - 24));
  std::ios_base::init(v8, &v35);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v34 = v4 + 24;
  v42 = v5;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v35 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)v39 = 0u;
  v40 = 0u;
  LODWORD(v41) = 16;
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v10 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v11 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v11);
    v12 = operator new(0x20uLL);
    *v12 = &unk_24CE85728;
    v12[1] = 0;
    v12[2] = 0;
    v12[3] = v11;
    v13 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v11;
    off_253D31E70 = v12;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v10 = (BBUPartitionManager *)off_253D31E68;
  }
  v16 = (std::__shared_weak_count *)off_253D31E70;
  if (off_253D31E70)
  {
    v17 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v10, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"mrc.dat", 7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v16)
  {
    v22 = (unint64_t *)&v16->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      v24 = v41;
      if ((v41 & 0x10) == 0)
        goto LABEL_24;
LABEL_28:
      v28 = *((_QWORD *)&v40 + 1);
      if (*((_QWORD *)&v40 + 1) < (unint64_t)v38)
      {
        *((_QWORD *)&v40 + 1) = v38;
        v28 = v38;
      }
      v27 = (const void **)&v37 + 1;
      goto LABEL_31;
    }
  }
  v24 = v41;
  if ((v41 & 0x10) != 0)
    goto LABEL_28;
LABEL_24:
  if ((v24 & 8) == 0)
  {
    v25 = 0;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    v26 = &__p;
    goto LABEL_39;
  }
  v27 = (const void **)&v36;
  v28 = v37;
LABEL_31:
  v29 = *v27;
  v25 = v28 - (_QWORD)*v27;
  if (v25 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v25 >= 0x17)
  {
    v30 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v30 = v25 | 7;
    v31 = v30 + 1;
    v26 = (std::string *)operator new(v30 + 1);
    __p.__r_.__value_.__l.__size_ = v25;
    __p.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    goto LABEL_38;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v28 - *(_BYTE *)v27;
  v26 = &__p;
  if (v25)
LABEL_38:
    memmove(v26, v29, v25);
LABEL_39:
  v26->__r_.__value_.__s.__data_[v25] = 0;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = __p;
  v34 = *v6;
  *(uint64_t *)((char *)&v34 + *(_QWORD *)(v34 - 24)) = v6[3];
  *(_QWORD *)&v35 = v9 + 16;
  if (SBYTE7(v40) < 0)
    operator delete(v39[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212BFA3D0](&v42);
}

void sub_212AAF680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;
  char **v18;

  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v18, v18[1]);
  operator delete(v18);
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  std::ostringstream::~ostringstream((uint64_t)&a17);
  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16UpdateSource::getMRCFileName@<X0>(uint64_t a1@<X8>)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  size_t v10;
  __int128 *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *__p[2];
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26 = 0xAAAAAAAAAAAAAAAALL;
  v36 = v3;
  v35 = v3;
  v34 = v3;
  v33 = v3;
  v32 = v3;
  v31 = v3;
  v30 = v3;
  v29 = v3;
  v28 = v3;
  *(_OWORD *)__p = v3;
  v25 = v3;
  v22 = v3;
  v23 = v3;
  v20 = v3;
  v21 = v3;
  v4 = MEMORY[0x24BEDB870];
  v5 = MEMORY[0x24BEDB870] + 64;
  v27 = MEMORY[0x24BEDB870] + 64;
  v6 = (uint64_t *)MEMORY[0x24BEDB800];
  v7 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v19 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v19 + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v8, &v20);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v19 = v4 + 24;
  v27 = v5;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v20 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  LODWORD(v26) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"mrc.dat", 7);
  if ((v26 & 0x10) != 0)
  {
    v12 = *((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1) < (unint64_t)v23)
    {
      *((_QWORD *)&v25 + 1) = v23;
      v12 = v23;
    }
    v13 = (const void *)*((_QWORD *)&v22 + 1);
    v10 = v12 - *((_QWORD *)&v22 + 1);
    if ((unint64_t)(v12 - *((_QWORD *)&v22 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_20;
  }
  else
  {
    if ((v26 & 8) == 0)
    {
      v10 = 0;
      HIBYTE(v18) = 0;
      v11 = &v17;
      goto LABEL_14;
    }
    v13 = (const void *)v21;
    v10 = v22 - v21;
    if ((_QWORD)v22 - (_QWORD)v21 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_20:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v10 >= 0x17)
  {
    v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v14 = v10 | 7;
    v15 = v14 + 1;
    v11 = (__int128 *)operator new(v14 + 1);
    *((_QWORD *)&v17 + 1) = v10;
    v18 = v15 | 0x8000000000000000;
    *(_QWORD *)&v17 = v11;
    goto LABEL_13;
  }
  HIBYTE(v18) = v10;
  v11 = &v17;
  if (v10)
LABEL_13:
    memmove(v11, v13, v10);
LABEL_14:
  *((_BYTE *)v11 + v10) = 0;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = v17;
  *(_QWORD *)(a1 + 16) = v18;
  v19 = *v6;
  *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = v6[3];
  *(_QWORD *)&v20 = v9 + 16;
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212BFA3D0](&v27);
}

void sub_212AAF9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212AAF9BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](v1);
  _Unwind_Resume(a1);
}

void BBUICE16UpdateSource::BBUICE16UpdateSource(BBUICE16UpdateSource *this, BBUZipFile *a2, unsigned int a3, BBUFeedback *a4)
{
  _QWORD *v6;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)this = &unk_24CE812E8;
  *((_QWORD *)this + 1) = a4;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = a2;
  v6 = operator new(0x20uLL);
  *v6 = &unk_24CE80890;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = a2;
  *((_QWORD *)this + 9) = v6;
  *((_BYTE *)this + 103) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *(_QWORD *)this = &off_24CE80710;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 25) = 0;
  *((_BYTE *)this + 208) = 1;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 41) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  BBUICE16UpdateSource::init(this);
}

void sub_212AAFAD8(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  std::vector<std::string>::~vector[abi:ne180100](v1 + 39);
  std::vector<std::shared_ptr<BBUICEMRCImage>>::~vector[abi:ne180100](v1 + 36);
  std::vector<std::shared_ptr<BBUICEMRCImage>>::~vector[abi:ne180100](v1 + 33);
  std::vector<std::shared_ptr<BBUICEMRCImage>>::~vector[abi:ne180100](v1 + 30);
  std::vector<std::shared_ptr<BBUICEMRCImage>>::~vector[abi:ne180100](v2);
  BBUICEUpdateSource::~BBUICEUpdateSource((BBUICEUpdateSource *)v1);
  _Unwind_Resume(a1);
}

void sub_212AAFB20(_Unwind_Exception *a1)
{
  BBUUpdateSource *v1;
  BBUZipFile *v2;
  BBUZipFile *v3;
  void *v5;

  v3 = v2;
  if (v3)
  {
    BBUZipFile::~BBUZipFile(v3);
    operator delete(v5);
  }
  BBUUpdateSource::~BBUUpdateSource(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<BBUICEMRCImage>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void BBUICEUpdateSource::~BBUICEUpdateSource(BBUICEUpdateSource *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;

  *(_QWORD *)this = &unk_24CE812E8;
  v2 = *((_QWORD *)this + 14);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 16);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 17);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 18);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 19);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)this = &unk_24CE85578;
  v10 = *((_QWORD *)this + 3);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 5);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 6);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 7);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (const void *)*((_QWORD *)this + 2);
  if (v14)
    CFRelease(v14);
}

void BBUICE16UpdateSource::BBUICE16UpdateSource(BBUICE16UpdateSource *this, __int128 *a2, uint64_t a3, uint64_t a4)
{
  std::string *v5;
  __int128 v6;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)this = &unk_24CE812E8;
  *((_QWORD *)this + 1) = a4;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v5 = (std::string *)((char *)this + 80);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *(_QWORD *)this = &off_24CE80710;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 25) = 0;
  *((_BYTE *)this + 208) = 1;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 41) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  BBUICE16UpdateSource::init(this);
}

void sub_212AAFE0C(_Unwind_Exception *a1)
{
  BBUUpdateSource *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v3);
  BBUUpdateSource::~BBUUpdateSource(v1);
  _Unwind_Resume(a1);
}

void sub_212AAFE2C(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  std::vector<std::string>::~vector[abi:ne180100](v1 + 39);
  std::vector<std::shared_ptr<BBUICEMRCImage>>::~vector[abi:ne180100](v1 + 36);
  std::vector<std::shared_ptr<BBUICEMRCImage>>::~vector[abi:ne180100](v1 + 33);
  std::vector<std::shared_ptr<BBUICEMRCImage>>::~vector[abi:ne180100](v1 + 30);
  std::vector<std::shared_ptr<BBUICEMRCImage>>::~vector[abi:ne180100](v2);
  BBUICEUpdateSource::~BBUICEUpdateSource((BBUICEUpdateSource *)v1);
  _Unwind_Resume(a1);
}

void BBUICE16UpdateSource::~BBUICE16UpdateSource(BBUICE16UpdateSource *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;

  *(_QWORD *)this = &off_24CE80710;
  v2 = *((_QWORD *)this + 25);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 21);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 22);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 23);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 24);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 39);
  if (v7)
  {
    v8 = *((_QWORD *)this + 40);
    v9 = (void *)*((_QWORD *)this + 39);
    if (v8 != v7)
    {
      do
      {
        if (*(char *)(v8 - 1) < 0)
          operator delete(*(void **)(v8 - 24));
        v8 -= 24;
      }
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 39);
    }
    *((_QWORD *)this + 40) = v7;
    operator delete(v9);
  }
  v10 = *((_QWORD *)this + 36);
  if (v10)
  {
    v11 = *((_QWORD *)this + 37);
    v12 = (void *)*((_QWORD *)this + 36);
    if (v11 != v10)
    {
      do
      {
        v13 = *(std::__shared_weak_count **)(v11 - 8);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 16;
      }
      while (v11 != v10);
      v12 = (void *)*((_QWORD *)this + 36);
    }
    *((_QWORD *)this + 37) = v10;
    operator delete(v12);
  }
  v16 = *((_QWORD *)this + 33);
  if (v16)
  {
    v17 = *((_QWORD *)this + 34);
    v18 = (void *)*((_QWORD *)this + 33);
    if (v17 != v16)
    {
      do
      {
        v19 = *(std::__shared_weak_count **)(v17 - 8);
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v17 -= 16;
      }
      while (v17 != v16);
      v18 = (void *)*((_QWORD *)this + 33);
    }
    *((_QWORD *)this + 34) = v16;
    operator delete(v18);
  }
  v22 = *((_QWORD *)this + 30);
  if (v22)
  {
    v23 = *((_QWORD *)this + 31);
    v24 = (void *)*((_QWORD *)this + 30);
    if (v23 != v22)
    {
      do
      {
        v25 = *(std::__shared_weak_count **)(v23 - 8);
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v23 -= 16;
      }
      while (v23 != v22);
      v24 = (void *)*((_QWORD *)this + 30);
    }
    *((_QWORD *)this + 31) = v22;
    operator delete(v24);
  }
  v28 = *((_QWORD *)this + 27);
  if (v28)
  {
    v29 = *((_QWORD *)this + 28);
    v30 = (void *)*((_QWORD *)this + 27);
    if (v29 != v28)
    {
      do
      {
        v31 = *(std::__shared_weak_count **)(v29 - 8);
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v29 -= 16;
      }
      while (v29 != v28);
      v30 = (void *)*((_QWORD *)this + 27);
    }
    *((_QWORD *)this + 28) = v28;
    operator delete(v30);
  }
  BBUICEUpdateSource::~BBUICEUpdateSource(this);
}

{
  void *v1;

  BBUICE16UpdateSource::~BBUICE16UpdateSource(this);
  operator delete(v1);
}

void BBUICE16UpdateSource::init(BBUICE16UpdateSource *this)
{
  BBUPartitionManager *v2;
  BBUPartitionManager *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  bbufs *p_p;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t i;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *exception;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  std::string __p;

  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v2 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v3 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v3);
    v4 = operator new(0x20uLL);
    *v4 = &unk_24CE85728;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v3;
    v5 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v3;
    off_253D31E70 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v2 = (BBUPartitionManager *)off_253D31E68;
  }
  v8 = (std::__shared_weak_count *)off_253D31E70;
  if (off_253D31E70)
  {
    v9 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = (bbufs *)&__p;
  else
    p_p = (bbufs *)__p.__r_.__value_.__r.__words[0];
  if (p_p)
  {
    if ((bbufs::prepareDestination(p_p, v11) & 1) == 0)
      _BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v19, v20, v21, v22, v23, v24, v53);
  }
  else
  {
    _BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v12, v13, v14, v15, v16, v17, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8)
  {
    v25 = (unint64_t *)&v8->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v27 = *((_QWORD *)this + 39);
  for (i = *((_QWORD *)this + 40); i != v27; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  *((_QWORD *)this + 40) = v27;
  memset(&ff_buffer, 255, 0x4000uLL);
  if (((*(uint64_t (**)(BBUICE16UpdateSource *))(*(_QWORD *)this + 296))(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 82, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0x9Eu, (ctu::LogMessageBuffer *)"Assertion failure(loadPSIImages() && \"Error: Failed to load the PSI images!\")", v38, v39, v40, v53);
    goto LABEL_55;
  }
  if (((*(uint64_t (**)(BBUICE16UpdateSource *))(*(_QWORD *)this + 288))(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 82, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0xA1u, (ctu::LogMessageBuffer *)"Assertion failure(loadEBLImage() && \"Error: Failed to load the EBL image!\")", v41, v42, v43, v53);
    goto LABEL_55;
  }
  if (((*(uint64_t (**)(BBUICE16UpdateSource *))(*(_QWORD *)this + 320))(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 83, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0xA4u, (ctu::LogMessageBuffer *)"Assertion failure(loadNVMFiles() && \"Error: Failed to load the NVM image!\")", v44, v45, v46, v53);
    goto LABEL_55;
  }
  if (((*(uint64_t (**)(BBUICE16UpdateSource *))(*(_QWORD *)this + 312))(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 80, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0xA7u, (ctu::LogMessageBuffer *)"Assertion failure(loadBINFiles() && \"Error: Failed to load the BIN image!\")", v47, v48, v49, v53);
    goto LABEL_55;
  }
  if (((*(uint64_t (**)(BBUICE16UpdateSource *))(*(_QWORD *)this + 304))(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 78, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0xAAu, (ctu::LogMessageBuffer *)"Assertion failure(loadELFFiles() && \"Error: Failed to load the ELF image!\")", v50, v51, v52, v53);
LABEL_55:
  }
  if (!MEMORY[0x212BF9644]())
    return;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_40;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_40;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v29 = (const char *)(**(uint64_t (***)(BBUICE16UpdateSource *))this)(this);
    _BBULog(3, 0, v29, "", "trying to find MRC file\n", v30, v31, v32, v53);
  }
LABEL_40:
  if (((*(uint64_t (**)(BBUICE16UpdateSource *))(*(_QWORD *)this + 264))(this) & 1) != 0)
    return;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      return;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      return;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v33 = (const char *)(**(uint64_t (***)(BBUICE16UpdateSource *))this)(this);
    _BBULog(3, 0, v33, "", "Error: Failed to load or create new MRC data!\n", v34, v35, v36, v53);
  }
}

void sub_212AB055C(_Unwind_Exception *a1)
{
  char **v1;

  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v1, v1[1]);
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_212AB0598(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AB05AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AB05C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AB05D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AB05E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AB0600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212AB0618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void BBUICE16UpdateSource::setSaveImageFilter(_QWORD *a1, void ***a2)
{
  uint64_t *v4;
  unint64_t v5;
  __int128 *v6;
  void **v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  __int128 v21;
  std::string *v22;
  void **v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  std::string *v31;
  void **v32;
  __int128 *v33;
  __int128 *v34;
  char *v35;
  __int128 v36;
  __int128 *v37;
  __int128 v38;
  __int128 *v39;
  uint64_t v40;
  __int128 *v41;
  unint64_t v42;
  __int128 v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  __int128 v47;
  void *v48;
  size_t v49;
  char v50;
  __int128 v51;

  v4 = a1 + 39;
  v5 = a1[39];
  v6 = (__int128 *)a1[40];
  if (v6 == (__int128 *)v5)
  {
    a1[40] = v5;
    v7 = *a2;
    v8 = a2[1];
    v9 = (char *)v8 - (char *)*a2;
    if (v9 < 1)
      return;
  }
  else
  {
    do
    {
      if (*((char *)v6 - 1) < 0)
        operator delete(*((void **)v6 - 3));
      v6 = (__int128 *)((char *)v6 - 24);
    }
    while (v6 != (__int128 *)v5);
    v6 = (__int128 *)*v4;
    a1[40] = v5;
    v7 = *a2;
    v8 = a2[1];
    v9 = (char *)v8 - (char *)*a2;
    if (v9 < 1)
      return;
  }
  v10 = v9 / 24;
  v11 = (uint64_t)(v5 - (_QWORD)v6) / 24;
  v12 = (__int128 *)((char *)v6 + 24 * v11);
  v13 = a1[41];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v5) >> 3)) < v9 / 24)
  {
    v14 = v11 + v10;
    if ((unint64_t)(v11 + v10) > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (uint64_t)v6) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x555555555555555)
      v16 = 0xAAAAAAAAAAAAAAALL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = (char *)operator new(24 * v16);
    }
    else
    {
      v17 = 0;
    }
    v25 = 0;
    v26 = &v17[24 * v11];
    v27 = &v17[24 * v16];
    v28 = 24 * v10;
    v29 = &v26[24 * v10];
    do
    {
      v31 = (std::string *)&v26[v25];
      v32 = &v7[v25 / 8];
      if (SHIBYTE(v7[v25 / 8 + 2]) < 0)
      {
        std::string::__init_copy_ctor_external(v31, (const std::string::value_type *)*v32, (std::string::size_type)v32[1]);
      }
      else
      {
        v30 = *(_OWORD *)v32;
        v31->__r_.__value_.__r.__words[2] = (std::string::size_type)v32[2];
        *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v30;
      }
      v25 += 24;
    }
    while (v28 != v25);
    v33 = (__int128 *)*v4;
    if ((__int128 *)*v4 == v12)
    {
      v35 = v26;
      v37 = (__int128 *)a1[40];
      if (v37 == v12)
        goto LABEL_40;
    }
    else
    {
      v34 = v12;
      do
      {
        v35 = v26 - 24;
        v36 = *(__int128 *)((char *)v34 - 24);
        *((_QWORD *)v26 - 1) = *((_QWORD *)v34 - 1);
        *(_OWORD *)(v26 - 24) = v36;
        *((_QWORD *)v34 - 2) = 0;
        *((_QWORD *)v34 - 1) = 0;
        *((_QWORD *)v34 - 3) = 0;
        v26 -= 24;
        v34 = (__int128 *)((char *)v34 - 24);
      }
      while (v34 != v33);
      v37 = (__int128 *)a1[40];
      if (v37 == v12)
        goto LABEL_40;
    }
    do
    {
      v38 = *v12;
      *((_QWORD *)v29 + 2) = *((_QWORD *)v12 + 2);
      *(_OWORD *)v29 = v38;
      v29 += 24;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = 0;
      *(_QWORD *)v12 = 0;
      v12 = (__int128 *)((char *)v12 + 24);
    }
    while (v12 != v37);
    v12 = (__int128 *)a1[40];
LABEL_40:
    v39 = (__int128 *)a1[39];
    a1[39] = v35;
    a1[40] = v29;
    a1[41] = v27;
    while (v12 != v39)
    {
      if (*((char *)v12 - 1) < 0)
        operator delete(*((void **)v12 - 3));
      v12 = (__int128 *)((char *)v12 - 24);
    }
    if (v39)
      operator delete(v39);
    return;
  }
  v18 = v5 - (_QWORD)v12;
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v12) >> 3)) >= v10)
  {
    v19 = &v7[3 * v10];
    v24 = v5;
  }
  else
  {
    v19 = &v7[(uint64_t)(v5 - (_QWORD)v12) >> 3];
    if (v19 == v8)
    {
      v24 = v5;
      a1[40] = v5;
      if (v18 < 1)
        return;
    }
    else
    {
      v20 = 0;
      do
      {
        v22 = (std::string *)(v5 + v20 * 8);
        v23 = &v19[v20];
        if (SHIBYTE(v19[v20 + 2]) < 0)
        {
          std::string::__init_copy_ctor_external(v22, (const std::string::value_type *)*v23, (std::string::size_type)v23[1]);
        }
        else
        {
          v21 = *(_OWORD *)v23;
          v22->__r_.__value_.__r.__words[2] = (std::string::size_type)v23[2];
          *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v21;
        }
        v20 += 3;
      }
      while (&v19[v20] != v8);
      v24 = v5 + v20 * 8;
      a1[40] = v5 + v20 * 8;
      if (v18 < 1)
        return;
    }
  }
  v40 = (uint64_t)v12 + 24 * v10;
  v41 = (__int128 *)(v24 - 24 * v10);
  v42 = v24;
  if ((unint64_t)v41 < v5)
  {
    v42 = v24;
    do
    {
      v43 = *v41;
      *(_QWORD *)(v42 + 16) = *((_QWORD *)v41 + 2);
      *(_OWORD *)v42 = v43;
      v42 += 24;
      *((_QWORD *)v41 + 1) = 0;
      *((_QWORD *)v41 + 2) = 0;
      *(_QWORD *)v41 = 0;
      v41 = (__int128 *)((char *)v41 + 24);
    }
    while ((unint64_t)v41 < v5);
  }
  a1[40] = v42;
  if (v24 != v40)
  {
    v44 = v24 - 24;
    v45 = 8 * ((uint64_t)(v24 - v40) >> 3);
    do
    {
      if (*(char *)(v44 + 23) < 0)
        operator delete(*(void **)v44);
      v46 = (__int128 *)((char *)v12 + v45 - 24);
      v47 = *v46;
      *(_QWORD *)(v44 + 16) = *(_QWORD *)((char *)v12 + v45 - 8);
      *(_OWORD *)v44 = v47;
      v44 -= 24;
      *((_BYTE *)v12 + v45 - 1) = 0;
      *(_BYTE *)v46 = 0;
      v45 -= 24;
    }
    while (v45);
  }
  for (; v7 != v19; v12 = (__int128 *)((char *)v12 + 24))
  {
    if (v7 != (void **)v12)
    {
      v50 = *((_BYTE *)v7 + 23);
      if (*((char *)v12 + 23) < 0)
      {
        if (v50 >= 0)
          v48 = v7;
        else
          v48 = *v7;
        if (v50 >= 0)
          v49 = *((unsigned __int8 *)v7 + 23);
        else
          v49 = (size_t)v7[1];
        std::string::__assign_no_alias<false>((void **)v12, v48, v49);
      }
      else if ((*((_BYTE *)v7 + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v12, *v7, (size_t)v7[1]);
      }
      else
      {
        v51 = *(_OWORD *)v7;
        *((_QWORD *)v12 + 2) = v7[2];
        *v12 = v51;
      }
    }
    v7 += 3;
  }
}

void sub_212AB0ABC(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  for (; v3; v3 -= 24)
  {
    if (*(char *)(v2 + v3 - 1) < 0)
      operator delete(*(void **)(v2 + v3 - 24));
  }
  if (!v1)
    _Unwind_Resume(exception_object);
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t BBUICE16UpdateSource::setChipID(uint64_t this, int a2)
{
  *(_DWORD *)(this + 160) = a2;
  return this;
}

uint64_t BBUICE16UpdateSource::setCertID(uint64_t this, int a2)
{
  *(_DWORD *)(this + 164) = a2;
  return this;
}

BOOL BBUICE16UpdateSource::isDeviceECDSAFused(BBUICE16UpdateSource *this)
{
  int v1;

  v1 = *((_DWORD *)this + 41);
  return v1 == -2087094182 || v1 == 653523660 || v1 == 1559424078;
}

uint64_t BBUICE16UpdateSource::getProgrammerSource(BBUICE16UpdateSource *this, int a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v10;

  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_5;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v4 = (const char *)(**(uint64_t (***)(BBUICE16UpdateSource *))this)(this);
    _BBULog(3, 0, v4, "", "chipID:0x%X certID:0x%X\n", v5, v6, v7, *((_DWORD *)this + 40));
  }
LABEL_5:
  if (*((_DWORD *)this + 40) == 104)
  {
    v8 = (*(uint64_t (**)(BBUICE16UpdateSource *))(*(_QWORD *)this + 336))(this);
    if (a2)
    {
      if (v8)
        return *((_QWORD *)this + 21);
      else
        return *((_QWORD *)this + 23);
    }
    else if (v8)
    {
      return *((_QWORD *)this + 22);
    }
    else
    {
      return *((_QWORD *)this + 24);
    }
  }
  else
  {
    v10 = (char *)this + 176;
    if (a2)
      v10 = (char *)this + 168;
    return *(_QWORD *)v10;
  }
}

uint64_t BBUICE16UpdateSource::loadPSIImages(BBUICE16UpdateSource *this)
{
  int v2;
  int v3;
  _QWORD *DataSource;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  _QWORD *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *exception;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  void *__p[2];
  char v70;

  if (*((_QWORD *)this + 21))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0xF1u, (ctu::LogMessageBuffer *)"Assertion failure(fPSIRamSource == __null)", v32, v33, v34, v68);
    goto LABEL_73;
  }
  if (*((_QWORD *)this + 22))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0xF2u, (ctu::LogMessageBuffer *)"Assertion failure(fRestorePSIRamSource == __null)", v35, v36, v37, v68);
    goto LABEL_73;
  }
  if (*((_QWORD *)this + 23))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0xF3u, (ctu::LogMessageBuffer *)"Assertion failure(fPSIRam2Source == __null)", v38, v39, v40, v68);
    goto LABEL_73;
  }
  if (*((_QWORD *)this + 24))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0xF4u, (ctu::LogMessageBuffer *)"Assertion failure(fRestorePSIRam2Source == __null)", v41, v42, v43, v68);
    goto LABEL_73;
  }
  v70 = 11;
  strcpy((char *)__p, "psi_ram.bin");
  v2 = BBUICEUpdateSource::containsFile((uint64_t)this, (uint64_t)__p);
  v3 = v2;
  if (v70 < 0)
  {
    operator delete(__p[0]);
    if (!v3)
      goto LABEL_17;
  }
  else if (!v2)
  {
    goto LABEL_17;
  }
  if (*((_QWORD *)this + 21))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0xF8u, (ctu::LogMessageBuffer *)"Assertion failure(fPSIRamSource == __null)", v44, v45, v46, v68);
    goto LABEL_73;
  }
  v70 = 11;
  strcpy((char *)__p, "psi_ram.bin");
  DataSource = BBUICEUpdateSource::createDataSource((uint64_t)this, (uint64_t)__p, 0);
  *((_QWORD *)this + 21) = DataSource;
  if (v70 < 0)
  {
    operator delete(__p[0]);
    DataSource = (_QWORD *)*((_QWORD *)this + 21);
  }
  if (!DataSource)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 82, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0xFAu, (ctu::LogMessageBuffer *)"Assertion failure(fPSIRamSource && \"Failed to load PSI.\")", v47, v48, v49, v68);
    goto LABEL_73;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_17;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_17;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v5 = (const char *)(**(uint64_t (***)(BBUICE16UpdateSource *))this)(this);
    _BBULog(3, 0, v5, "", "Loaded PSI\n", v6, v7, v8, v68);
  }
LABEL_17:
  v70 = 12;
  strcpy((char *)__p, "psi_ram2.bin");
  v9 = BBUICEUpdateSource::containsFile((uint64_t)this, (uint64_t)__p);
  v10 = v9;
  if (v70 < 0)
  {
    operator delete(__p[0]);
    if (!v10)
      goto LABEL_29;
  }
  else if (!v9)
  {
    goto LABEL_29;
  }
  if (*((_QWORD *)this + 23))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0x100u, (ctu::LogMessageBuffer *)"Assertion failure(fPSIRam2Source == __null)", v50, v51, v52, v68);
    goto LABEL_73;
  }
  v70 = 12;
  strcpy((char *)__p, "psi_ram2.bin");
  v11 = BBUICEUpdateSource::createDataSource((uint64_t)this, (uint64_t)__p, 0);
  *((_QWORD *)this + 23) = v11;
  if (v70 < 0)
  {
    operator delete(__p[0]);
    v11 = (_QWORD *)*((_QWORD *)this + 23);
  }
  if (!v11)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 82, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0x102u, (ctu::LogMessageBuffer *)"Assertion failure(fPSIRam2Source && \"Failed to load PSI2.\")", v53, v54, v55, v68);
    goto LABEL_73;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_29;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_29;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v12 = (const char *)(**(uint64_t (***)(BBUICE16UpdateSource *))this)(this);
    _BBULog(3, 0, v12, "", "Loaded PSI2\n", v13, v14, v15, v68);
  }
LABEL_29:
  v70 = 14;
  strcpy((char *)__p, "restorepsi.bin");
  v16 = BBUICEUpdateSource::containsFile((uint64_t)this, (uint64_t)__p);
  v17 = v16;
  if (v70 < 0)
  {
    operator delete(__p[0]);
    if (!v17)
      goto LABEL_41;
  }
  else if (!v16)
  {
    goto LABEL_41;
  }
  if (*((_QWORD *)this + 22))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0x108u, (ctu::LogMessageBuffer *)"Assertion failure(fRestorePSIRamSource == __null)", v56, v57, v58, v68);
    goto LABEL_73;
  }
  v70 = 14;
  strcpy((char *)__p, "restorepsi.bin");
  v18 = BBUICEUpdateSource::createDataSource((uint64_t)this, (uint64_t)__p, 0);
  *((_QWORD *)this + 22) = v18;
  if (v70 < 0)
  {
    operator delete(__p[0]);
    v18 = (_QWORD *)*((_QWORD *)this + 22);
  }
  if (!v18)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 82, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0x10Au, (ctu::LogMessageBuffer *)"Assertion failure(fRestorePSIRamSource && \"Failed to load RestorePSI.\")", v59, v60, v61, v68);
    goto LABEL_73;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_41;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_41;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v19 = (const char *)(**(uint64_t (***)(BBUICE16UpdateSource *))this)(this);
    _BBULog(3, 0, v19, "", "Loaded RestorePSI\n", v20, v21, v22, v68);
  }
LABEL_41:
  v70 = 15;
  strcpy((char *)__p, "restorepsi2.bin");
  v23 = BBUICEUpdateSource::containsFile((uint64_t)this, (uint64_t)__p);
  v24 = v23;
  if (v70 < 0)
  {
    operator delete(__p[0]);
    if (!v24)
      return 1;
  }
  else if (!v23)
  {
    return 1;
  }
  if (*((_QWORD *)this + 24))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0x110u, (ctu::LogMessageBuffer *)"Assertion failure(fRestorePSIRam2Source == __null)", v62, v63, v64, v68);
    goto LABEL_73;
  }
  v70 = 15;
  strcpy((char *)__p, "restorepsi2.bin");
  v25 = BBUICEUpdateSource::createDataSource((uint64_t)this, (uint64_t)__p, 0);
  *((_QWORD *)this + 24) = v25;
  if (v70 < 0)
  {
    operator delete(__p[0]);
    v25 = (_QWORD *)*((_QWORD *)this + 24);
  }
  if (!v25)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 82, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0x112u, (ctu::LogMessageBuffer *)"Assertion failure(fRestorePSIRam2Source && \"Failed to load RestorePSI2.\")", v65, v66, v67, v68);
LABEL_73:
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      return 1;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      return 1;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v26 = (const char *)(**(uint64_t (***)(BBUICE16UpdateSource *))this)(this);
    _BBULog(3, 0, v26, "", "Loaded RestorePSI2\n", v27, v28, v29, v68);
    return 1;
  }
  return 1;
}

void sub_212AB13B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AB13F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL BBUICE16UpdateSource::loadEBLImage(BBUICE16UpdateSource *this)
{
  char v2;
  char v3;
  _QWORD *DataSource;
  _DWORD *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *exception;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *__p[2];
  char v21;

  if (*((_QWORD *)this + 25))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0x11Bu, (ctu::LogMessageBuffer *)"Assertion failure(fEBLImage == __null)", v16, v17, v18, v19);
  }
  v21 = 7;
  strcpy((char *)__p, "ebl.bin");
  v2 = BBUICEUpdateSource::containsFile((uint64_t)this, (uint64_t)__p);
  v3 = v2;
  if (v21 < 0)
  {
    operator delete(__p[0]);
    if ((v3 & 1) != 0)
    {
LABEL_4:
      v21 = 7;
      strcpy((char *)__p, "ebl.bin");
      DataSource = BBUICEUpdateSource::createDataSource((uint64_t)this, (uint64_t)__p, 0);
      if (v21 < 0)
        operator delete(__p[0]);
      v5 = operator new(0x18uLL);
      *(_QWORD *)v5 = off_24CE85510;
      v5[2] = 0;
      *((_QWORD *)v5 + 2) = DataSource;
      *((_QWORD *)this + 25) = v5;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
          goto LABEL_8;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
        {
LABEL_8:
          if ((gBBULogVerbosity & 0x80000000) == 0)
          {
            v6 = (const char *)(**(uint64_t (***)(BBUICE16UpdateSource *))this)(this);
            _BBULog(3, 0, v6, "", "Loaded EBL file\n", v7, v8, v9, v19);
          }
        }
      }
      return *((_QWORD *)this + 25) != 0;
    }
  }
  else if ((v2 & 1) != 0)
  {
    goto LABEL_4;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    result = 1;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      return result;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    result = 1;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      return result;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v11 = (const char *)(**(uint64_t (***)(BBUICE16UpdateSource *))this)(this);
    _BBULog(3, 0, v11, "", "EBL file '%s' not found.\n", v12, v13, v14, (char)"ebl.bin");
    return 1;
  }
  return result;
}

void sub_212AB16A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AB16B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BBUICE16UpdateSource::loadNVMFiles(BBUFeedback **this)
{
  timespec v2;
  std::string *p_p;
  std::string *v4;
  unsigned int v5;
  std::string *v6;
  int v7;
  unsigned int v8;
  BBUDataSource *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  BBUICENVMImage *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  BBUFeedback *v19;
  unint64_t v20;
  BBUFeedback *v21;
  unint64_t v22;
  timespec v23;
  std::string *v24;
  std::string *v25;
  unsigned int v26;
  std::string *v27;
  int v28;
  unsigned int v29;
  BBUDataSource *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  BBUICENVMImage *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  BBUFeedback *v40;
  unint64_t v41;
  BBUFeedback *v42;
  unint64_t v43;
  BBUFeedback *v45;
  int *v46;
  char *v47;
  std::string v48;
  std::string __p;
  stat v50;

  memset(&__p, 170, sizeof(__p));
  getNVMFilePath((uint64_t)&__p, 0);
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v50.st_blksize = v2;
  *(timespec *)v50.st_qspare = v2;
  v50.st_birthtimespec = v2;
  *(timespec *)&v50.st_size = v2;
  v50.st_mtimespec = v2;
  v50.st_ctimespec = v2;
  *(timespec *)&v50.st_uid = v2;
  v50.st_atimespec = v2;
  *(timespec *)&v50.st_dev = v2;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (stat((const char *)p_p, &v50))
  {
    v4 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v4 = (std::string *)__p.__r_.__value_.__r.__words[0];
    BBUFeedback::handleComment(this[1], "%s not found, generating default (ffs) file.", (const char *)v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v48, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v48 = __p;
    v5 = capabilities::updater::ICENVMFSizeBytes();
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v48;
    else
      v6 = (std::string *)v48.__r_.__value_.__r.__words[0];
    v7 = open((const char *)v6, 1537, 384);
    if ((v7 & 0x80000000) == 0)
    {
      if (v5 >= 0x4000)
      {
        v8 = v5 >> 14;
        do
        {
          write(v7, &ff_buffer, 0x4000uLL);
          --v8;
        }
        while (v8);
      }
      close(v7);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v48.__r_.__value_.__l.__data_);
      if (v7 < 0)
        goto LABEL_81;
    }
    else if (v7 < 0)
    {
      goto LABEL_81;
    }
  }
  v9 = (BBUDataSource *)operator new(0x30uLL);
  *(_QWORD *)v9 = off_24CE7FC78;
  *(_OWORD *)((char *)v9 + 8) = 0u;
  *(_OWORD *)((char *)v9 + 24) = 0u;
  if (BBUFileDataSource::init((uint64_t)v9, (const char *)&__p, 0))
  {
    (*(void (**)(BBUDataSource *))(*(_QWORD *)v9 + 8))(v9);
    v9 = 0;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_30;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_30;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v10 = (const char *)(*(uint64_t (**)(BBUFeedback **))*this)(this);
    v14 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      LOBYTE(v14) = __p.__r_.__value_.__s.__data_[0];
    _BBULog(3, 0, v10, "", "Loaded NVM file %s\n", v11, v12, v13, (char)v14);
  }
LABEL_30:
  v15 = (BBUICENVMImage *)operator new(0x38uLL);
  BBUICENVMImage::BBUICENVMImage(v15, v9, "static.nvm", 0);
  *(_QWORD *)&v50.st_dev = v15;
  v16 = (std::__shared_weak_count *)operator new(0x20uLL);
  v17 = v16;
  v16->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)off_24CE808E0;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
  v50.st_ino = (__darwin_ino64_t)v16;
  v19 = this[34];
  if (v19 >= this[35])
  {
    v21 = (BBUFeedback *)std::vector<std::shared_ptr<BBUICENVMImage>>::__push_back_slow_path<std::shared_ptr<BBUICENVMImage> const&>((uint64_t)(this + 33), (uint64_t)v15, (uint64_t)v16);
  }
  else
  {
    *(_QWORD *)v19 = v15;
    *((_QWORD *)v19 + 1) = v16;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v21 = (BBUFeedback *)((char *)v19 + 16);
  }
  this[34] = v21;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (v22)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_39;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_39;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_39:
  memset(&__p, 170, sizeof(__p));
  getNVMFilePath((uint64_t)&__p, 1);
  v23.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v23.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v50.st_blksize = v23;
  *(timespec *)v50.st_qspare = v23;
  v50.st_birthtimespec = v23;
  *(timespec *)&v50.st_size = v23;
  v50.st_mtimespec = v23;
  v50.st_ctimespec = v23;
  *(timespec *)&v50.st_uid = v23;
  v50.st_atimespec = v23;
  *(timespec *)&v50.st_dev = v23;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &__p;
  else
    v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (!stat((const char *)v24, &v50))
    goto LABEL_60;
  v25 = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
  BBUFeedback::handleComment(this[1], "%s not found, generating default (ffs) file.", (const char *)v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v48, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v48 = __p;
  v26 = capabilities::updater::ICENVMFSizeBytes();
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = &v48;
  else
    v27 = (std::string *)v48.__r_.__value_.__r.__words[0];
  v28 = open((const char *)v27, 1537, 384);
  if ((v28 & 0x80000000) == 0)
  {
    if (v26 >= 0x4000)
    {
      v29 = v26 >> 14;
      do
      {
        write(v28, &ff_buffer, 0x4000uLL);
        --v29;
      }
      while (v29);
    }
    close(v28);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v48.__r_.__value_.__l.__data_);
    if (v28 < 0)
      goto LABEL_81;
LABEL_60:
    v30 = (BBUDataSource *)operator new(0x30uLL);
    *(_QWORD *)v30 = off_24CE7FC78;
    *(_OWORD *)((char *)v30 + 8) = 0u;
    *(_OWORD *)((char *)v30 + 24) = 0u;
    if (BBUFileDataSource::init((uint64_t)v30, (const char *)&__p, 0))
    {
      (*(void (**)(BBUDataSource *))(*(_QWORD *)v30 + 8))(v30);
      v30 = 0;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_68;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_68;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      v31 = (const char *)(*(uint64_t (**)(BBUFeedback **))*this)(this);
      v35 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        LOBYTE(v35) = __p.__r_.__value_.__s.__data_[0];
      _BBULog(3, 0, v31, "", "Loaded NVM file %s\n", v32, v33, v34, (char)v35);
    }
LABEL_68:
    v36 = (BBUICENVMImage *)operator new(0x38uLL);
    BBUICENVMImage::BBUICENVMImage(v36, v30, "dynamic.nvm", 0);
    *(_QWORD *)&v50.st_dev = v36;
    v37 = (std::__shared_weak_count *)operator new(0x20uLL);
    v38 = v37;
    v37->__shared_owners_ = 0;
    v39 = (unint64_t *)&v37->__shared_owners_;
    v37->__vftable = (std::__shared_weak_count_vtbl *)off_24CE808E0;
    v37->__shared_weak_owners_ = 0;
    v37[1].__vftable = (std::__shared_weak_count_vtbl *)v36;
    v50.st_ino = (__darwin_ino64_t)v37;
    v40 = this[34];
    if (v40 >= this[35])
    {
      v42 = (BBUFeedback *)std::vector<std::shared_ptr<BBUICENVMImage>>::__push_back_slow_path<std::shared_ptr<BBUICENVMImage> const&>((uint64_t)(this + 33), (uint64_t)v36, (uint64_t)v37);
    }
    else
    {
      *(_QWORD *)v40 = v36;
      *((_QWORD *)v40 + 1) = v37;
      do
        v41 = __ldxr(v39);
      while (__stxr(v41 + 1, v39));
      v42 = (BBUFeedback *)((char *)v40 + 16);
    }
    this[34] = v42;
    do
      v43 = __ldaxr(v39);
    while (__stlxr(v43 - 1, v39));
    if (v43)
    {
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return 1;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return 1;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    return 1;
  }
  if ((v28 & 0x80000000) == 0)
    goto LABEL_60;
LABEL_81:
  v45 = this[1];
  v46 = __error();
  v47 = strerror(*v46);
  BBUFeedback::handleComment(v45, "Failed to create file %s\n", v47);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_212AB1D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if ((a22 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t getNVMFilePath(uint64_t a1, int a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  const char *v11;
  BBUPartitionManager *v12;
  BBUPartitionManager *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  std::string::size_type v28;
  std::string *v29;
  const void **v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  std::string __p;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  void *v43[2];
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v45 = 0xAAAAAAAAAAAAAAAALL;
  v55 = v4;
  v54 = v4;
  v53 = v4;
  v52 = v4;
  v51 = v4;
  v50 = v4;
  v49 = v4;
  v48 = v4;
  v47 = v4;
  v44 = v4;
  *(_OWORD *)v43 = v4;
  v42 = v4;
  v41 = v4;
  v40 = v4;
  v39 = v4;
  v5 = MEMORY[0x24BEDB870];
  v6 = MEMORY[0x24BEDB870] + 64;
  v46 = MEMORY[0x24BEDB870] + 64;
  v7 = (uint64_t *)MEMORY[0x24BEDB800];
  v8 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v38 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v38 + *(_QWORD *)(v38 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v38 + *(_QWORD *)(v38 - 24));
  std::ios_base::init(v9, &v39);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v38 = v5 + 24;
  v46 = v6;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v39 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)v43 = 0u;
  v44 = 0u;
  LODWORD(v45) = 16;
  if (a2)
    v11 = "dynamic.nvm";
  else
    v11 = "static.nvm";
  if (!strcasecmp(v11, ""))
  {
    *(_BYTE *)(a1 + 23) = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_48;
  }
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v12 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v13 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v13);
    v14 = operator new(0x20uLL);
    *v14 = &unk_24CE85728;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v13;
    v15 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v13;
    off_253D31E70 = v14;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v12 = (BBUPartitionManager *)off_253D31E68;
  }
  v18 = (std::__shared_weak_count *)off_253D31E70;
  if (off_253D31E70)
  {
    v19 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v12, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)p_p, size);
  if (a2)
    v24 = 11;
  else
    v24 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v11, v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v18)
  {
    v25 = (unint64_t *)&v18->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      v27 = v45;
      if ((v45 & 0x10) == 0)
        goto LABEL_31;
LABEL_36:
      v31 = *((_QWORD *)&v44 + 1);
      if (*((_QWORD *)&v44 + 1) < (unint64_t)v42)
      {
        *((_QWORD *)&v44 + 1) = v42;
        v31 = v42;
      }
      v30 = (const void **)&v41 + 1;
      goto LABEL_39;
    }
  }
  v27 = v45;
  if ((v45 & 0x10) != 0)
    goto LABEL_36;
LABEL_31:
  if ((v27 & 8) == 0)
  {
    v28 = 0;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    v29 = &__p;
    goto LABEL_47;
  }
  v30 = (const void **)&v40;
  v31 = v41;
LABEL_39:
  v32 = *v30;
  v28 = v31 - (_QWORD)*v30;
  if (v28 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v28 >= 0x17)
  {
    v33 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v33 = v28 | 7;
    v34 = v33 + 1;
    v29 = (std::string *)operator new(v33 + 1);
    __p.__r_.__value_.__l.__size_ = v28;
    __p.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v31 - *(_BYTE *)v30;
    v29 = &__p;
    if (!v28)
      goto LABEL_47;
  }
  memmove(v29, v32, v28);
LABEL_47:
  v29->__r_.__value_.__s.__data_[v28] = 0;
  v35 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
  *(_QWORD *)a1 = __p.__r_.__value_.__r.__words[0];
  *(_OWORD *)(a1 + 8) = v35;
LABEL_48:
  v38 = *v7;
  *(uint64_t *)((char *)&v38 + *(_QWORD *)(v38 - 24)) = v7[3];
  *(_QWORD *)&v39 = v10 + 16;
  if (SBYTE7(v44) < 0)
    operator delete(v43[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212BFA3D0](&v46);
}

void sub_212AB2190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  char **v18;

  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v18, v18[1]);
  operator delete(v18);
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16UpdateSource::loadMRCData(BBUFeedback **this)
{
  timespec v2;
  std::string *p_p;
  std::string *v4;
  std::string *v5;
  int v6;
  int v7;
  char *v8;
  int v9;
  uint64_t v10;
  std::string *v11;
  const char *v12;
  int v13;
  std::string::value_type v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  BBUFeedback *v19;
  int *v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  _BYTE *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *st_ino;
  unint64_t *p_shared_owners;
  BBUFeedback *v32;
  BBUFeedback *v33;
  unint64_t v34;
  BBUFeedback *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  BBUFeedback *v41;
  BBUFeedback *v42;
  unint64_t v43;
  BBUFeedback *v44;
  __int128 v45;
  BBUFeedback *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::string v53;
  std::string __p;
  stat v55;

  memset(&__p, 170, sizeof(__p));
  BBUICE16UpdateSource::getMRCFilePath((uint64_t)&__p);
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v55.st_blksize = v2;
  *(timespec *)v55.st_qspare = v2;
  v55.st_birthtimespec = v2;
  *(timespec *)&v55.st_size = v2;
  v55.st_mtimespec = v2;
  v55.st_ctimespec = v2;
  *(timespec *)&v55.st_uid = v2;
  v55.st_atimespec = v2;
  *(timespec *)&v55.st_dev = v2;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (stat((const char *)p_p, &v55))
  {
    v4 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v4 = (std::string *)__p.__r_.__value_.__r.__words[0];
    BBUFeedback::handleComment(this[1], "%s not found, generating default (ffs) file.", (const char *)v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v53, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v53 = __p;
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v53;
    else
      v5 = (std::string *)v53.__r_.__value_.__r.__words[0];
    v6 = open((const char *)v5, 1537, 384);
    v7 = v6;
    if ((v6 & 0x80000000) == 0)
      close(v6);
    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if ((v7 & 0x80000000) == 0)
        goto LABEL_17;
LABEL_30:
      v19 = this[1];
      v20 = __error();
      v21 = strerror(*v20);
      BBUFeedback::handleComment(v19, "Failed to create file %s\n", v21);
      v22 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_70;
      return v22;
    }
    operator delete(v53.__r_.__value_.__l.__data_);
    if (v7 < 0)
      goto LABEL_30;
  }
LABEL_17:
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)v8 = off_24CE7FC78;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  v9 = BBUFileDataSource::init((uint64_t)v8, (const char *)&__p, 0);
  v10 = *(_QWORD *)v8;
  if (v9)
  {
    (*(void (**)(char *))(v10 + 8))(v8);
    v11 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
    BBUFeedback::handleComment(this[1], "Failed to read file %s", (const char *)v11);
    goto LABEL_69;
  }
  if ((*(unsigned int (**)(char *))(v10 + 24))(v8) >= 0x801)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
        goto LABEL_24;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
      {
LABEL_24:
        if ((gBBULogVerbosity & 0x80000000) == 0)
        {
          v12 = (const char *)(*(uint64_t (**)(BBUFeedback **))*this)(this);
          v13 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          v14 = __p.__r_.__value_.__s.__data_[0];
          (*(void (**)(char *))(*(_QWORD *)v8 + 24))(v8);
          v18 = &__p;
          if (v13 < 0)
            LOBYTE(v18) = v14;
          _BBULog(3, 0, v12, "", "MRC file %s is too large (%lu), ignoring\n", v15, v16, v17, (char)v18);
        }
      }
    }
    (*(void (**)(char *))(*(_QWORD *)v8 + 8))(v8);
    goto LABEL_69;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_38;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_38;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v23 = (const char *)(*(uint64_t (**)(BBUFeedback **))*this)(this);
    v27 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      LOBYTE(v27) = __p.__r_.__value_.__s.__data_[0];
    _BBULog(3, 0, v23, "", "Loaded MRC file %s\n", v24, v25, v26, (char)v27);
  }
LABEL_38:
  v28 = operator new(0x30uLL);
  *(_QWORD *)v28 = off_24CE83780;
  v28[31] = 7;
  strcpy(v28 + 8, "mrc.dat");
  *((_DWORD *)v28 + 8) = 0;
  *((_QWORD *)v28 + 5) = v8;
  *(_QWORD *)&v55.st_dev = v28;
  v29 = (std::__shared_weak_count *)operator new(0x20uLL);
  st_ino = v29;
  v29->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v29->__shared_owners_;
  v29->__vftable = (std::__shared_weak_count_vtbl *)off_24CE80930;
  v29->__shared_weak_owners_ = 0;
  v29[1].__vftable = (std::__shared_weak_count_vtbl *)v28;
  v55.st_ino = (__darwin_ino64_t)v29;
  v33 = this[37];
  v32 = this[38];
  if (v33 < v32)
  {
    *(_QWORD *)v33 = v28;
    *((_QWORD *)v33 + 1) = v29;
    do
      v34 = __ldxr(p_shared_owners);
    while (__stxr(v34 + 1, p_shared_owners));
    this[37] = (BBUFeedback *)((char *)v33 + 16);
LABEL_65:
    v50 = (unint64_t *)&st_ino->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))st_ino->__on_zero_shared)(st_ino);
      std::__shared_weak_count::__release_weak(st_ino);
    }
    goto LABEL_69;
  }
  v35 = this[36];
  v36 = (v33 - v35) >> 4;
  v37 = v36 + 1;
  if ((unint64_t)(v36 + 1) >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v38 = v32 - v35;
  if (v38 >> 3 > v37)
    v37 = v38 >> 3;
  if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
    v39 = 0xFFFFFFFFFFFFFFFLL;
  else
    v39 = v37;
  if (v39 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v40 = (char *)operator new(16 * v39);
  v41 = (BBUFeedback *)&v40[16 * v36];
  v42 = (BBUFeedback *)&v40[16 * v39];
  *(_QWORD *)v41 = v28;
  *((_QWORD *)v41 + 1) = st_ino;
  do
    v43 = __ldxr(p_shared_owners);
  while (__stxr(v43 + 1, p_shared_owners));
  v44 = (BBUFeedback *)((char *)v41 + 16);
  if (v33 == v35)
  {
    this[36] = v41;
    this[37] = v44;
    this[38] = v42;
  }
  else
  {
    do
    {
      v45 = *((_OWORD *)v33 - 1);
      v33 = (BBUFeedback *)((char *)v33 - 16);
      *((_OWORD *)v41 - 1) = v45;
      v41 = (BBUFeedback *)((char *)v41 - 16);
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
    }
    while (v33 != v35);
    v33 = this[36];
    v46 = this[37];
    this[36] = v41;
    this[37] = v44;
    this[38] = v42;
    while (v46 != v33)
    {
      v47 = (std::__shared_weak_count *)*((_QWORD *)v46 - 1);
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v46 = (BBUFeedback *)((char *)v46 - 16);
    }
  }
  if (v33)
    operator delete(v33);
  st_ino = (std::__shared_weak_count *)v55.st_ino;
  this[37] = v44;
  if (st_ino)
    goto LABEL_65;
LABEL_69:
  v22 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_70:
    operator delete(__p.__r_.__value_.__l.__data_);
  return v22;
}

void sub_212AB2790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  BBUICEMRCImage *v23;

  BBUICEMRCImage::~BBUICEMRCImage(v23);
  if ((a22 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16UpdateSource::loadBINFiles(BBUFeedback **this)
{
  uint64_t *v2;
  uint64_t v3;
  BBUDataSource *DataSource;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  BBUICEBinaryImage *v10;
  BBUICEBinaryImage *v11;
  std::string *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  BBUFeedback *v16;
  BBUFeedback *v17;
  unint64_t v18;
  BBUFeedback *v19;
  std::string *v20;
  BBUFeedback *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  BBUFeedback *v27;
  BBUFeedback *v28;
  unint64_t v29;
  __int128 v30;
  BBUFeedback *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  std::string v43;
  void *__p[2];
  char v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;

  v46 = (uint64_t)&v46;
  v47 = &v46;
  v48 = 0;
  v45 = 4;
  strcpy((char *)__p, ".bin");
  (*((void (**)(BBUFeedback **, uint64_t *, void **))*this + 32))(this, &v46, __p);
  if (v45 < 0)
    operator delete(__p[0]);
  *((_BYTE *)&v43.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v43, "psi_ram.bin");
  std::list<std::string>::remove(&v46, (unsigned __int8 **)&v43);
  *((_BYTE *)&v43.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v43, "restorepsi.bin");
  std::list<std::string>::remove(&v46, (unsigned __int8 **)&v43);
  *((_BYTE *)&v43.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v43, "psi_ram2.bin");
  std::list<std::string>::remove(&v46, (unsigned __int8 **)&v43);
  *((_BYTE *)&v43.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v43, "restorepsi2.bin");
  std::list<std::string>::remove(&v46, (unsigned __int8 **)&v43);
  *((_BYTE *)&v43.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v43, "ebl.bin");
  std::list<std::string>::remove(&v46, (unsigned __int8 **)&v43);
  v2 = v47;
  if (v47 != &v46)
  {
    while (1)
    {
      memset(&v43, 170, sizeof(v43));
      if (*((char *)v2 + 39) < 0)
        std::string::__init_copy_ctor_external(&v43, (const std::string::value_type *)v2[2], v2[3]);
      else
        v43 = *(std::string *)(v2 + 2);
      v3 = BBUICEUpdateSource::containsFile((uint64_t)this, (uint64_t)&v43);
      if ((v3 & 1) == 0)
      {
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v20 = &v43;
        else
          v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
        BBUFeedback::handleComment(this[1], "Unable to locate file from directory listing '%s'.", (const char *)v20);
LABEL_52:
        if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_54;
LABEL_53:
        operator delete(v43.__r_.__value_.__l.__data_);
        goto LABEL_54;
      }
      DataSource = (BBUDataSource *)BBUICEUpdateSource::createDataSource((uint64_t)this, (uint64_t)&v43, 0);
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
          goto LABEL_15;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
          goto LABEL_15;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        v5 = (const char *)(*(uint64_t (**)(BBUFeedback **))*this)(this);
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v9 = &v43;
        else
          LOBYTE(v9) = v43.__r_.__value_.__s.__data_[0];
        _BBULog(3, 0, v5, "", "Loaded binary file '%s'\n", v6, v7, v8, (char)v9);
      }
LABEL_15:
      v10 = (BBUICEBinaryImage *)operator new(0x38uLL);
      v11 = v10;
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v43;
      else
        v12 = (std::string *)v43.__r_.__value_.__r.__words[0];
      BBUICEBinaryImage::BBUICEBinaryImage(v10, DataSource, (const char *)v12, 0);
      v13 = (std::__shared_weak_count *)operator new(0x20uLL);
      v14 = v13;
      v13->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      v13->__vftable = (std::__shared_weak_count_vtbl *)off_24CE80980;
      v13->__shared_weak_owners_ = 0;
      v13[1].__vftable = (std::__shared_weak_count_vtbl *)v11;
      v42 = v13;
      v17 = this[31];
      v16 = this[32];
      if (v17 >= v16)
      {
        v21 = this[30];
        v22 = (v17 - v21) >> 4;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v24 = v16 - v21;
        if (v24 >> 3 > v23)
          v23 = v24 >> 3;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
          v25 = 0xFFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v26 = (char *)operator new(16 * v25);
        v27 = (BBUFeedback *)&v26[16 * v22];
        v28 = (BBUFeedback *)&v26[16 * v25];
        *(_QWORD *)v27 = v11;
        *((_QWORD *)v27 + 1) = v14;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
        v19 = (BBUFeedback *)((char *)v27 + 16);
        if (v17 == v21)
        {
          this[30] = v27;
          this[31] = v19;
          this[32] = v28;
        }
        else
        {
          do
          {
            v30 = *((_OWORD *)v17 - 1);
            v17 = (BBUFeedback *)((char *)v17 - 16);
            *((_OWORD *)v27 - 1) = v30;
            v27 = (BBUFeedback *)((char *)v27 - 16);
            *(_QWORD *)v17 = 0;
            *((_QWORD *)v17 + 1) = 0;
          }
          while (v17 != v21);
          v17 = this[30];
          v31 = this[31];
          this[30] = v27;
          this[31] = v19;
          for (this[32] = v28; v31 != v17; v31 = (BBUFeedback *)((char *)v31 - 16))
          {
            v32 = (std::__shared_weak_count *)*((_QWORD *)v31 - 1);
            if (v32)
            {
              v33 = (unint64_t *)&v32->__shared_owners_;
              do
                v34 = __ldaxr(v33);
              while (__stlxr(v34 - 1, v33));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
          }
        }
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v17 = v11;
        *((_QWORD *)v17 + 1) = v13;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
        v19 = (BBUFeedback *)((char *)v17 + 16);
      }
      this[31] = v19;
      if (!v42)
        goto LABEL_52;
      v35 = (unint64_t *)&v42->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (v36)
        goto LABEL_52;
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_53;
LABEL_54:
      if ((_DWORD)v3)
      {
        v2 = (uint64_t *)v2[1];
        if (v2 != &v46)
          continue;
      }
      goto LABEL_62;
    }
  }
  v3 = 1;
LABEL_62:
  if (v48)
  {
    v37 = v46;
    v38 = v47;
    v39 = *v47;
    *(_QWORD *)(v39 + 8) = *(_QWORD *)(v46 + 8);
    **(_QWORD **)(v37 + 8) = v39;
    v48 = 0;
    if (v38 != &v46)
    {
      do
      {
        v41 = (uint64_t *)v38[1];
        if (*((char *)v38 + 39) < 0)
          operator delete((void *)v38[2]);
        operator delete(v38);
        v38 = v41;
      }
      while (v41 != &v46);
    }
  }
  return v3;
}

void sub_212AB2D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a25 < 0)
    operator delete(__p);
  std::list<std::string>::~list(&a26);
  _Unwind_Resume(a1);
}

void std::list<std::string>::remove(_QWORD *a1, unsigned __int8 **a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *i;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  void *__p;
  uint64_t v27;

  v25 = &v25;
  __p = &v25;
  v27 = 0;
  v2 = (_QWORD *)a1[1];
  if (v2 == a1)
    return;
  v5 = 0;
  v6 = &v25;
  while (2)
  {
    v8 = *((unsigned __int8 *)v2 + 39);
    if ((v8 & 0x80u) == 0)
      v9 = (unsigned __int8 *)*((unsigned __int8 *)v2 + 39);
    else
      v9 = (unsigned __int8 *)v2[3];
    v10 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    v11 = (char)v10;
    if ((char)v10 < 0)
      v10 = a2[1];
    if (v9 != v10)
      goto LABEL_4;
    if (v11 >= 0)
      v12 = (unsigned __int8 *)a2;
    else
      v12 = *a2;
    if ((v8 & 0x80) != 0)
    {
      if (memcmp((const void *)v2[2], v12, v2[3]))
        goto LABEL_4;
    }
    else if (*((_BYTE *)v2 + 39))
    {
      v13 = 0;
      while (*((unsigned __int8 *)v2 + v13 + 16) == v12[v13])
      {
        if (v8 == ++v13)
          goto LABEL_21;
      }
LABEL_4:
      i = v2;
LABEL_5:
      i = (_QWORD *)i[1];
      goto LABEL_6;
    }
LABEL_21:
    for (i = (_QWORD *)v2[1]; ; i = (_QWORD *)i[1])
    {
      if (i == a1)
      {
        v17 = 1;
        i = a1;
        if (v2 == a1)
          goto LABEL_36;
        goto LABEL_39;
      }
      v14 = *((unsigned __int8 *)i + 39);
      if ((v14 & 0x80u) == 0)
        v15 = (unsigned __int8 *)*((unsigned __int8 *)i + 39);
      else
        v15 = (unsigned __int8 *)i[3];
      if (v15 != v9)
        goto LABEL_35;
      if ((v14 & 0x80) == 0)
        break;
      if (memcmp((const void *)i[2], v12, i[3]))
        goto LABEL_35;
LABEL_23:
      ;
    }
    if (!*((_BYTE *)i + 39))
      goto LABEL_23;
    v16 = 0;
    while (*((unsigned __int8 *)i + v16 + 16) == v12[v16])
    {
      if (v14 == ++v16)
        goto LABEL_23;
    }
LABEL_35:
    v17 = 0;
    if (v2 == i)
    {
LABEL_36:
      if ((v17 & 1) == 0)
        goto LABEL_5;
      goto LABEL_6;
    }
LABEL_39:
    v6 = (_QWORD *)*i;
    if (&v25 != a1)
    {
      v18 = 1;
      if (v6 != v2)
      {
        v19 = v2;
        do
        {
          v19 = (_QWORD *)v19[1];
          ++v18;
        }
        while (v19 != v6);
      }
      a1[2] -= v18;
      v5 += v18;
      v27 = v5;
    }
    v20 = *v2;
    *(_QWORD *)(v20 + 8) = v6[1];
    *(_QWORD *)v6[1] = v20;
    v21 = v25;
    v25[1] = v2;
    *v2 = v21;
    v25 = v6;
    v6[1] = &v25;
    if ((v17 & 1) == 0)
      goto LABEL_5;
LABEL_6:
    v2 = i;
    if (i != a1)
      continue;
    break;
  }
  if (v5)
  {
    v22 = (char *)__p;
    v23 = *(_QWORD *)__p;
    *(_QWORD *)(v23 + 8) = v6[1];
    *(_QWORD *)v6[1] = v23;
    v27 = 0;
    if (v22 != (char *)&v25)
    {
      do
      {
        v24 = (char *)*((_QWORD *)v22 + 1);
        if (v22[39] < 0)
          operator delete(*((void **)v22 + 2));
        operator delete(v22);
        v22 = v24;
      }
      while (v24 != (char *)&v25);
    }
  }
}

char *std::list<std::string>::~list(char *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v6;

  if (*((_QWORD *)a1 + 2))
  {
    v2 = *(_QWORD *)a1;
    v3 = (char *)*((_QWORD *)a1 + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v3 + 1);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

uint64_t BBUICE16UpdateSource::loadELFFiles(BBUFeedback **this)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *DataSource;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  void *v13;
  size_t v14;
  size_t v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  BBUFeedback *v22;
  BBUFeedback *v23;
  unint64_t v24;
  BBUFeedback *v25;
  BBUFeedback *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  BBUFeedback *v32;
  BBUFeedback *v33;
  unint64_t v34;
  __int128 v35;
  BBUFeedback *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v46;
  std::__shared_weak_count *v47;
  std::string v48;
  void *__p[2];
  char v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;

  v51 = (uint64_t)&v51;
  v52 = &v51;
  v53 = 0;
  v50 = 4;
  strcpy((char *)__p, ".elf");
  (*((void (**)(BBUFeedback **, uint64_t *, void **))*this + 32))(this, &v51, __p);
  if ((v50 & 0x80000000) == 0)
  {
    v2 = v52;
    if (v52 != &v51)
      goto LABEL_3;
    goto LABEL_69;
  }
  operator delete(__p[0]);
  v2 = v52;
  if (v52 != &v51)
  {
    while (1)
    {
LABEL_3:
      memset(&v48, 170, sizeof(v48));
      if (*((char *)v2 + 39) < 0)
        std::string::__init_copy_ctor_external(&v48, (const std::string::value_type *)v2[2], v2[3]);
      else
        v48 = *(std::string *)(v2 + 2);
      v3 = BBUICEUpdateSource::containsFile((uint64_t)this, (uint64_t)&v48);
      if ((v3 & 1) == 0)
      {
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v16 = &v48;
        else
          v16 = (std::string *)v48.__r_.__value_.__r.__words[0];
        BBUFeedback::handleComment(this[1], "Unable to locate file from directory listing '%s'.", (const char *)v16);
LABEL_59:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_61;
LABEL_60:
        operator delete(v48.__r_.__value_.__l.__data_);
        goto LABEL_61;
      }
      DataSource = BBUICEUpdateSource::createDataSource((uint64_t)this, (uint64_t)&v48, 0);
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
          goto LABEL_14;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
          goto LABEL_14;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        v5 = (const char *)(*(uint64_t (**)(BBUFeedback **))*this)(this);
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v9 = &v48;
        else
          LOBYTE(v9) = v48.__r_.__value_.__s.__data_[0];
        _BBULog(3, 0, v5, "", "Loaded download file '%s'\n", v6, v7, v8, (char)v9);
      }
LABEL_14:
      v10 = operator new(0x30uLL);
      v11 = v10;
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v48;
      else
        v12 = (std::string *)v48.__r_.__value_.__r.__words[0];
      *v10 = off_24CE84488;
      v13 = v10 + 1;
      v14 = strlen((const char *)v12);
      if (v14 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v15 = v14;
      if (v14 >= 0x17)
      {
        v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v17 = v14 | 7;
        v18 = v17 + 1;
        v13 = operator new(v17 + 1);
        v11[2] = v15;
        v11[3] = v18 | 0x8000000000000000;
        v11[1] = v13;
LABEL_28:
        memmove(v13, v12, v15);
        goto LABEL_29;
      }
      *((_BYTE *)v11 + 31) = v14;
      if (v14)
        goto LABEL_28;
LABEL_29:
      *((_BYTE *)v13 + v15) = 0;
      *((_DWORD *)v11 + 8) = 0;
      v11[5] = DataSource;
      v19 = (std::__shared_weak_count *)operator new(0x20uLL);
      v20 = v19;
      v19->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      v19->__vftable = (std::__shared_weak_count_vtbl *)off_24CE809D0;
      v19->__shared_weak_owners_ = 0;
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)v11;
      v47 = v19;
      v23 = this[28];
      v22 = this[29];
      if (v23 >= v22)
      {
        v26 = this[27];
        v27 = (v23 - v26) >> 4;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v29 = v22 - v26;
        if (v29 >> 3 > v28)
          v28 = v29 >> 3;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
          v30 = 0xFFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v31 = (char *)operator new(16 * v30);
        v32 = (BBUFeedback *)&v31[16 * v27];
        v33 = (BBUFeedback *)&v31[16 * v30];
        *(_QWORD *)v32 = v11;
        *((_QWORD *)v32 + 1) = v20;
        do
          v34 = __ldxr(p_shared_owners);
        while (__stxr(v34 + 1, p_shared_owners));
        v25 = (BBUFeedback *)((char *)v32 + 16);
        if (v23 == v26)
        {
          this[27] = v32;
          this[28] = v25;
          this[29] = v33;
        }
        else
        {
          do
          {
            v35 = *((_OWORD *)v23 - 1);
            v23 = (BBUFeedback *)((char *)v23 - 16);
            *((_OWORD *)v32 - 1) = v35;
            v32 = (BBUFeedback *)((char *)v32 - 16);
            *(_QWORD *)v23 = 0;
            *((_QWORD *)v23 + 1) = 0;
          }
          while (v23 != v26);
          v23 = this[27];
          v36 = this[28];
          this[27] = v32;
          this[28] = v25;
          this[29] = v33;
          while (v36 != v23)
          {
            v37 = (std::__shared_weak_count *)*((_QWORD *)v36 - 1);
            if (v37)
            {
              v38 = (unint64_t *)&v37->__shared_owners_;
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
            v36 = (BBUFeedback *)((char *)v36 - 16);
          }
        }
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_QWORD *)v23 = v11;
        *((_QWORD *)v23 + 1) = v19;
        do
          v24 = __ldxr(p_shared_owners);
        while (__stxr(v24 + 1, p_shared_owners));
        v25 = (BBUFeedback *)((char *)v23 + 16);
      }
      this[28] = v25;
      if (!v47)
        goto LABEL_59;
      v40 = (unint64_t *)&v47->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (v41)
        goto LABEL_59;
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_60;
LABEL_61:
      if ((_DWORD)v3)
      {
        v2 = (uint64_t *)v2[1];
        if (v2 != &v51)
          continue;
      }
      goto LABEL_70;
    }
  }
LABEL_69:
  v3 = 1;
LABEL_70:
  if (v53)
  {
    v42 = v51;
    v43 = v52;
    v44 = *v52;
    *(_QWORD *)(v44 + 8) = *(_QWORD *)(v51 + 8);
    **(_QWORD **)(v42 + 8) = v44;
    v53 = 0;
    if (v43 != &v51)
    {
      do
      {
        v46 = (uint64_t *)v43[1];
        if (*((char *)v43 + 39) < 0)
          operator delete((void *)v43[2]);
        operator delete(v43);
        v43 = v46;
      }
      while (v46 != &v51);
    }
  }
  return v3;
}

void sub_212AB3554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a25 < 0)
    operator delete(__p);
  std::list<std::string>::~list(&a26);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16UpdateSource::getEBLImage(BBUICE16UpdateSource *this)
{
  return *((_QWORD *)this + 25);
}

uint64_t *BBUICE16UpdateSource::getItems(BBUICE16UpdateSource *this)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  void *v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  void *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;

  v2 = (uint64_t *)operator new(0x18uLL);
  *v2 = (uint64_t)v2;
  v2[1] = (uint64_t)v2;
  v2[2] = 0;
  v3 = (*(uint64_t (**)(BBUICE16UpdateSource *))(*(_QWORD *)this + 280))(this);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = operator new(0x38uLL);
    BBUICE16Programmer::ICE16Item::ICE16Item((uint64_t)v5, 20480, v4);
    v6 = operator new(0x18uLL);
    v6[1] = v2;
    v6[2] = v5;
    v7 = *v2;
    *v6 = *v2;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = (uint64_t)v6;
    ++v2[2];
  }
  v8 = (void *)*((_QWORD *)this + 6);
  if (v8)
  {
    v9 = operator new(0x38uLL);
    BBUICE16Programmer::ICE16Item::ICE16Item((uint64_t)v9, 20484, v8);
    v10 = operator new(0x18uLL);
    v10[1] = v2;
    v10[2] = v9;
    v11 = *v2;
    *v10 = *v2;
    *(_QWORD *)(v11 + 8) = v10;
    *v2 = (uint64_t)v10;
    ++v2[2];
  }
  v12 = (void *)*((_QWORD *)this + 7);
  if (v12)
  {
    v13 = operator new(0x38uLL);
    BBUICE16Programmer::ICE16Item::ICE16Item((uint64_t)v13, 20485, v12);
    v14 = operator new(0x18uLL);
    v14[1] = v2;
    v14[2] = v13;
    v15 = *v2;
    *v14 = *v2;
    *(_QWORD *)(v15 + 8) = v14;
    *v2 = (uint64_t)v14;
    ++v2[2];
  }
  v16 = (void *)*((_QWORD *)this + 5);
  if (v16)
  {
    v17 = operator new(0x38uLL);
    BBUICE16Programmer::ICE16Item::ICE16Item((uint64_t)v17, 20486, v16);
    v18 = operator new(0x18uLL);
    v18[1] = v2;
    v18[2] = v17;
    v19 = *v2;
    *v18 = *v2;
    *(_QWORD *)(v19 + 8) = v18;
    *v2 = (uint64_t)v18;
    ++v2[2];
  }
  v20 = *((_QWORD *)this + 33);
  v21 = *((_QWORD *)this + 34);
  while (v20 != v21)
  {
    v23 = *(void **)v20;
    v22 = *(std::__shared_weak_count **)(v20 + 8);
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    if (v23)
    {
      v26 = operator new(0x38uLL);
      BBUICE16Programmer::ICE16Item::ICE16Item((uint64_t)v26, 20481, v23);
      v27 = operator new(0x18uLL);
      v27[1] = v2;
      v27[2] = v26;
      v28 = *v2;
      *v27 = *v2;
      *(_QWORD *)(v28 + 8) = v27;
      *v2 = (uint64_t)v27;
      ++v2[2];
    }
    if (v22)
    {
      v29 = (unint64_t *)&v22->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v20 += 16;
  }
  v31 = *((_QWORD *)this + 30);
  v32 = *((_QWORD *)this + 31);
  while (v31 != v32)
  {
    v34 = *(void **)v31;
    v33 = *(std::__shared_weak_count **)(v31 + 8);
    if (v33)
    {
      v35 = (unint64_t *)&v33->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    if (v34)
    {
      v37 = operator new(0x38uLL);
      BBUICE16Programmer::ICE16Item::ICE16Item((uint64_t)v37, 20482, v34);
      v38 = operator new(0x18uLL);
      v38[1] = v2;
      v38[2] = v37;
      v39 = *v2;
      *v38 = *v2;
      *(_QWORD *)(v39 + 8) = v38;
      *v2 = (uint64_t)v38;
      ++v2[2];
    }
    if (v33)
    {
      v40 = (unint64_t *)&v33->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v31 += 16;
  }
  v42 = *((_QWORD *)this + 27);
  v43 = *((_QWORD *)this + 28);
  while (v42 != v43)
  {
    v45 = *(void **)v42;
    v44 = *(std::__shared_weak_count **)(v42 + 8);
    if (v44)
    {
      v46 = (unint64_t *)&v44->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    if (v45)
    {
      v48 = operator new(0x38uLL);
      BBUICE16Programmer::ICE16Item::ICE16Item((uint64_t)v48, 20483, v45);
      v49 = operator new(0x18uLL);
      v49[1] = v2;
      v49[2] = v48;
      v50 = *v2;
      *v49 = *v2;
      *(_QWORD *)(v50 + 8) = v49;
      *v2 = (uint64_t)v49;
      ++v2[2];
    }
    if (v44)
    {
      v51 = (unint64_t *)&v44->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v42 += 16;
  }
  v53 = *((_QWORD *)this + 36);
  v54 = *((_QWORD *)this + 37);
  while (v53 != v54)
  {
    v56 = *(void **)v53;
    v55 = *(std::__shared_weak_count **)(v53 + 8);
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    if (v56)
    {
      v59 = operator new(0x38uLL);
      BBUICE16Programmer::ICE16Item::ICE16Item((uint64_t)v59, 20487, v56);
      v60 = operator new(0x18uLL);
      v60[1] = v2;
      v60[2] = v59;
      v61 = *v2;
      *v60 = *v2;
      *(_QWORD *)(v61 + 8) = v60;
      *v2 = (uint64_t)v60;
      ++v2[2];
    }
    if (v55)
    {
      v62 = (unint64_t *)&v55->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v53 += 16;
  }
  return v2;
}

void sub_212AB3A34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212AB3A48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212AB3A5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212AB3A70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212AB3A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  operator delete(v9);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_212AB3AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  operator delete(v9);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_212AB3ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  operator delete(v9);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_212AB3AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  operator delete(v9);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_212AB3AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_212AB3B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_212AB3B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_212AB3B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16UpdateSource::eraseBasebandFilesystem(BBUFeedback **this)
{
  std::string *p_p;
  std::string *v3;
  int v4;
  uint64_t v5;
  BBUFeedback *v6;
  int *v7;
  char *v8;
  unsigned int v9;
  char v10;
  BBUFeedback *v11;
  int *v12;
  char *v13;
  std::string *v14;
  std::string *v15;
  int v16;
  BBUFeedback *v17;
  int *v18;
  char *v19;
  unsigned int i;
  BBUFeedback *v21;
  int *v22;
  char *v23;
  uint64_t v24;
  std::string *v25;
  std::string *v26;
  int v27;
  BBUFeedback *v28;
  int *v29;
  char *v30;
  BBUPartitionManager *v31;
  BBUPartitionManager *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  bbufs *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unint64_t *v55;
  unint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v62;
  std::string __p;

  memset(&__p, 170, sizeof(__p));
  getNVMFilePath((uint64_t)&__p, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  BBUFeedback::handleComment(this[1], "generating 0xFF-filled file for %s", (const char *)p_p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &__p;
  else
    v3 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v4 = open((const char *)v3, 1537, 384);
  if (v4 < 0)
  {
    v6 = this[1];
    v7 = __error();
    v8 = strerror(*v7);
    BBUFeedback::handleComment(v6, "Failed to create file %s\n", v8);
    v5 = 15;
  }
  else
  {
    v5 = 0;
  }
  v9 = 0;
  v10 = 1;
  while (v9 < (unint64_t)capabilities::updater::ICENVMFSizeBytes() >> 14)
  {
    if (write(v4, &ff_buffer, 0x4000uLL) != 0x4000)
    {
      v11 = this[1];
      v12 = __error();
      v13 = strerror(*v12);
      BBUFeedback::handleComment(v11, "Failed zero-filling file at segment %u, err=%s\n", v9, v13);
      v10 = 0;
    }
    ++v9;
  }
  close(v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 170, sizeof(__p));
  getNVMFilePath((uint64_t)&__p, 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__p;
  else
    v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  BBUFeedback::handleComment(this[1], "generating 0xFF-filled file for %s", (const char *)v14);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &__p;
  else
    v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v16 = open((const char *)v15, 1537, 384);
  if (v16 < 0)
  {
    v17 = this[1];
    v18 = __error();
    v19 = strerror(*v18);
    BBUFeedback::handleComment(v17, "Failed to create file %s\n", v19);
    v5 = 15;
  }
  for (i = 0; i < (unint64_t)capabilities::updater::ICENVMFSizeBytes() >> 14; ++i)
  {
    if (write(v16, &ff_buffer, 0x4000uLL) != 0x4000)
    {
      v21 = this[1];
      v22 = __error();
      v23 = strerror(*v22);
      BBUFeedback::handleComment(v21, "Failed zero-filling file at segment %u, err=%s\n", i, v23);
      v10 = 0;
    }
  }
  v24 = close(v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v10 & 1) == 0)
      return v5;
  }
  else if ((v10 & 1) == 0)
  {
    return v5;
  }
  if (MEMORY[0x212BF9644](v24))
  {
    memset(&__p, 170, sizeof(__p));
    BBUICE16UpdateSource::getMRCFilePath((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &__p;
    else
      v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
    BBUFeedback::handleComment(this[1], "unlinking MRC data %s", (const char *)v25);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &__p;
    else
      v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v27 = unlink((const char *)v26);
    if (v27 < 0)
    {
      v28 = this[1];
      v29 = __error();
      v30 = strerror(*v29);
      BBUFeedback::handleComment(v28, "Unlinking MRC had an error %s", v30);
      v5 = 15;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_43:
        if (v27 < 0)
          return v5;
        goto LABEL_47;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_43;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v27 < 0)
      return v5;
  }
LABEL_47:
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v31 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v32 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v32);
    v33 = operator new(0x20uLL);
    *v33 = &unk_24CE85728;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v32;
    v34 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v32;
    off_253D31E70 = v33;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v31 = (BBUPartitionManager *)off_253D31E68;
  }
  v37 = (std::__shared_weak_count *)off_253D31E70;
  if (off_253D31E70)
  {
    v38 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v31, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = (bbufs *)&__p;
  else
    v47 = (bbufs *)__p.__r_.__value_.__r.__words[0];
  if (v47)
  {
    if ((bbufs::prepareDestination(v47, v40) & 1) != 0)
    {
      v54 = 1;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_67;
      goto LABEL_68;
    }
    _BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v48, v49, v50, v51, v52, v53, v62);
  }
  else
  {
    _BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v41, v42, v43, v44, v45, v46, 0);
  }
  v54 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_67:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_68:
  if (v37)
  {
    v55 = (unint64_t *)&v37->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if ((v54 & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v5 = 11;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        return v5;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v5 = 11;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        return v5;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      v57 = (const char *)(*(uint64_t (**)(BBUFeedback **))*this)(this);
      _BBULog(3, 0, v57, "", "failed preparing filesystem after erase\n", v58, v59, v60, v62);
    }
  }
  return v5;
}

void sub_212AB4070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  char **v19;

  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v19, v19[1]);
  operator delete(v19);
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  _Unwind_Resume(a1);
}

CFMutableDictionaryRef BBUICE16UpdateSource::copyBasebandMigrationData(BBUICE16UpdateSource *this, BBUFeedback *a2)
{
  BBUPartitionManager *v3;
  BBUPartitionManager *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  bbufs *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFMutableDictionaryRef Mutable;
  timespec v29;
  std::string *p_p;
  std::string *v31;
  BBUDataSource *v32;
  std::string *v33;
  timespec v34;
  std::string *v35;
  std::string *v36;
  BBUDataSource *v37;
  std::string *v38;
  std::string *v40;
  std::string *v41;
  const void *v42;
  const void *v43;
  char v44;
  std::string v45;
  std::string __p;
  std::string v47;
  stat v48;

  memset(&v47, 170, sizeof(v47));
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v3 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v4 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v4);
    v5 = operator new(0x20uLL);
    *v5 = &unk_24CE85728;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v4;
    v6 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v4;
    off_253D31E70 = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v3 = (BBUPartitionManager *)off_253D31E68;
  }
  v9 = (std::__shared_weak_count *)off_253D31E70;
  *(_QWORD *)&v48.st_dev = v3;
  v48.st_ino = (__darwin_ino64_t)off_253D31E70;
  if (off_253D31E70)
  {
    v10 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v3, &v47);
  if (!v9)
    goto LABEL_15;
  v19 = (unint64_t *)&v9->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_15:
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = (bbufs *)&v47;
    else
      v21 = (bbufs *)v47.__r_.__value_.__r.__words[0];
    if (v21)
      goto LABEL_19;
LABEL_32:
    _BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v13, v14, v15, v16, v17, v18, 0);
LABEL_33:
    BBUFeedback::handleComment(this, "Failed preparing baseband filesystem directory for copying baseband migration data\n");
    Mutable = 0;
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_54;
    return Mutable;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = (bbufs *)&v47;
  else
    v21 = (bbufs *)v47.__r_.__value_.__r.__words[0];
  if (!v21)
    goto LABEL_32;
LABEL_19:
  if ((bbufs::prepareDestination(v21, v12) & 1) == 0)
  {
    _BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v22, v23, v24, v25, v26, v27, v44);
    goto LABEL_33;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  memset(&__p, 170, sizeof(__p));
  getNVMFilePath((uint64_t)&__p, 0);
  v29.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v29.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v48.st_blksize = v29;
  *(timespec *)v48.st_qspare = v29;
  v48.st_birthtimespec = v29;
  *(timespec *)&v48.st_size = v29;
  v48.st_mtimespec = v29;
  v48.st_ctimespec = v29;
  *(timespec *)&v48.st_uid = v29;
  v48.st_atimespec = v29;
  *(timespec *)&v48.st_dev = v29;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (stat((const char *)p_p, &v48))
  {
    v31 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
    BBUFeedback::handleComment(this, "Failed to locate %s while copying baseband migration data\n", (const char *)v31);
    goto LABEL_39;
  }
  v32 = (BBUDataSource *)operator new(0x30uLL);
  *(_QWORD *)v32 = off_24CE7FC78;
  *(_OWORD *)((char *)v32 + 8) = 0u;
  *(_OWORD *)((char *)v32 + 24) = 0u;
  if (BBUFileDataSource::init((uint64_t)v32, (const char *)&__p, 0))
  {
    (*(void (**)(BBUDataSource *))(*(_QWORD *)v32 + 8))(v32);
    v33 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
    BBUFeedback::handleComment(this, "Failed generating data source for %s while copying baseband migration data\n", (const char *)v33);
LABEL_39:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_40;
  }
  v40 = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
  BBUFeedback::handleComment(this, "copying %s for migration", (const char *)v40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v45, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v45 = __p;
  BBUDataSource::createData(v32, (CFDataRef *)&v48);
  v42 = *(const void **)&v48.st_dev;
  ctu::cf::insert<std::string,__CFData const*>((uint64_t)Mutable, (uint64_t)&v45, *(const void **)&v48.st_dev);
  if (v42)
    CFRelease(v42);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  (*(void (**)(BBUDataSource *))(*(_QWORD *)v32 + 8))(v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_40:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_41:
  memset(&__p, 170, sizeof(__p));
  getNVMFilePath((uint64_t)&__p, 1);
  v34.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v34.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v48.st_blksize = v34;
  *(timespec *)v48.st_qspare = v34;
  v48.st_birthtimespec = v34;
  *(timespec *)&v48.st_size = v34;
  v48.st_mtimespec = v34;
  v48.st_ctimespec = v34;
  *(timespec *)&v48.st_uid = v34;
  v48.st_atimespec = v34;
  *(timespec *)&v48.st_dev = v34;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &__p;
  else
    v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (stat((const char *)v35, &v48))
  {
    v36 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
    BBUFeedback::handleComment(this, "Failed to locate %s while copying baseband migration data\n", (const char *)v36);
    goto LABEL_52;
  }
  v37 = (BBUDataSource *)operator new(0x30uLL);
  *(_QWORD *)v37 = off_24CE7FC78;
  *(_OWORD *)((char *)v37 + 8) = 0u;
  *(_OWORD *)((char *)v37 + 24) = 0u;
  if (BBUFileDataSource::init((uint64_t)v37, (const char *)&__p, 0))
  {
    (*(void (**)(BBUDataSource *))(*(_QWORD *)v37 + 8))(v37);
    v38 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
    BBUFeedback::handleComment(this, "Failed generating data source for %s while copying baseband migration data\n", (const char *)v38);
LABEL_52:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_53;
LABEL_77:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return Mutable;
    goto LABEL_54;
  }
  v41 = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
  BBUFeedback::handleComment(this, "copying %s for migration", (const char *)v41);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v45, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v45 = __p;
  BBUDataSource::createData(v37, (CFDataRef *)&v48);
  v43 = *(const void **)&v48.st_dev;
  ctu::cf::insert<std::string,__CFData const*>((uint64_t)Mutable, (uint64_t)&v45, *(const void **)&v48.st_dev);
  if (v43)
    CFRelease(v43);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  (*(void (**)(BBUDataSource *))(*(_QWORD *)v37 + 8))(v37);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_77;
LABEL_53:
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
LABEL_54:
    operator delete(v47.__r_.__value_.__l.__data_);
  return Mutable;
}

void sub_212AB4668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,const void *a30)
{
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a30);
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if (a29 < 0)
      {
LABEL_8:
        operator delete(a24);
        _Unwind_Resume(a1);
      }
LABEL_7:
      _Unwind_Resume(a1);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if (a29 < 0)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t ctu::cf::insert<std::string,__CFData const*>(uint64_t a1, uint64_t a2, const void *a3)
{
  ctu::cf::convert_copy();
  if (a3)
  {
    CFRetain(a3);
    CFRelease(a3);
  }
  return 0;
}

void sub_212AB47E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

void sub_212AB4808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16UpdateSource::restoreBasebandMigrationData(BBUICE16UpdateSource *this, BBUFeedback *a2, const __CFDictionary *a3)
{
  BBUPartitionManager *v5;
  BBUPartitionManager *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  bbufs *p_p;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 *v33;
  BOOL v34;
  _QWORD *v35;
  _OWORD *v36;
  const __CFAllocator *v37;
  __int128 v38;
  const __CFString *v39;
  const __CFURL *v40;
  const char *v41;
  __CFWriteStream *v42;
  __CFWriteStream *v43;
  uint64_t (*v44)(uint64_t);
  const UInt8 *BytePtr;
  CFIndex Length;
  CFIndex v47;
  _QWORD *v48;
  _OWORD *v49;
  char v51;
  std::string v52;
  const __CFString *v53;
  _BYTE v54[32];
  __int128 v55;
  uint64_t v56;
  std::string __p;
  uint64_t v58;
  std::string v59;
  std::string context;
  const __CFString *v61;

  memset(&__p, 170, sizeof(__p));
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v5 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v6 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v6);
    v7 = operator new(0x20uLL);
    *v7 = &unk_24CE85728;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v6;
    v8 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v6;
    off_253D31E70 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v5 = (BBUPartitionManager *)off_253D31E68;
  }
  v11 = (std::__shared_weak_count *)off_253D31E70;
  *(_QWORD *)v54 = v5;
  *(_QWORD *)&v54[8] = off_253D31E70;
  if (off_253D31E70)
  {
    v12 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v5, &__p);
  if (v11)
  {
    v21 = (unint64_t *)&v11->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = (bbufs *)&__p;
      else
        p_p = (bbufs *)__p.__r_.__value_.__r.__words[0];
      if (p_p)
        goto LABEL_19;
LABEL_26:
      _BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v15, v16, v17, v18, v19, v20, 0);
      goto LABEL_27;
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = (bbufs *)&__p;
  else
    p_p = (bbufs *)__p.__r_.__value_.__r.__words[0];
  if (!p_p)
    goto LABEL_26;
LABEL_19:
  if ((bbufs::prepareDestination(p_p, v14) & 1) != 0)
  {
    v30 = 1;
    goto LABEL_28;
  }
  _BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v24, v25, v26, v27, v28, v29, v51);
LABEL_27:
  BBUFeedback::handleComment(this, "Failed preparing baseband filesystem directory for copying baseband migration data");
  v30 = 0;
LABEL_28:
  *((_QWORD *)&v55 + 1) = 0;
  v56 = 0;
  *(_QWORD *)&v55 = (char *)&v55 + 8;
  *(_OWORD *)&v54[8] = 0uLL;
  *(_QWORD *)v54 = &v54[8];
  context.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
  context.__r_.__value_.__l.__size_ = (std::string::size_type)&v54[8];
  if (!a2)
  {
    std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy((uint64_t)v54, 0);
    v36 = (_OWORD *)v55;
    if ((__int128 *)v55 == (__int128 *)((char *)&v55 + 8))
      goto LABEL_90;
    goto LABEL_36;
  }
  CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)ctu::cf::_Applier_InsertMapDefault<std::string,__CFData const*,std::insert_iterator<std::map<std::string,__CFData const*>>>, &context);
  v31 = v55;
  v55 = *(_OWORD *)v54;
  *(_OWORD *)v54 = v31;
  v32 = v56;
  v56 = *(_QWORD *)&v54[16];
  *(_QWORD *)&v54[16] = v32;
  v33 = &v55;
  if (v56)
    v33 = (__int128 *)(*((_QWORD *)&v55 + 1) + 16);
  *(_QWORD *)v33 = (char *)&v55 + 8;
  v34 = v32 == 0;
  v35 = v54;
  if (!v34)
    v35 = (_QWORD *)(*((_QWORD *)&v31 + 1) + 16);
  *v35 = &v54[8];
  std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy((uint64_t)v54, *((char **)&v31 + 1));
  v36 = (_OWORD *)v55;
  if ((__int128 *)v55 != (__int128 *)((char *)&v55 + 8))
  {
LABEL_36:
    v37 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    do
    {
      *(_QWORD *)&v38 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v38 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)v54 = v38;
      *(_OWORD *)&v54[16] = v38;
      if (*((char *)v36 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v54, *((const std::string::value_type **)v36 + 4), *((_QWORD *)v36 + 5));
      }
      else
      {
        *(_OWORD *)v54 = v36[2];
        *(_QWORD *)&v54[16] = *((_QWORD *)v36 + 6);
      }
      *(_QWORD *)&v54[24] = *((_QWORD *)v36 + 7);
      if ((v54[23] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)v54, *(std::string::size_type *)&v54[8]);
      else
        v52 = *(std::string *)v54;
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v59, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
      else
        v59 = v52;
      v58 = 0;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&context, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
      else
        context = v59;
      v61 = 0;
      if (ctu::cf::convert_copy())
        v39 = v61;
      else
        v39 = 0;
      if (SHIBYTE(context.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(context.__r_.__value_.__l.__data_);
        v53 = v39;
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_69:
          operator delete(v59.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_56;
          goto LABEL_70;
        }
      }
      else
      {
        v53 = v39;
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_69;
      }
      if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_56;
LABEL_70:
      operator delete(v52.__r_.__value_.__l.__data_);
LABEL_56:
      v40 = CFURLCreateWithFileSystemPath(v37, v39, kCFURLPOSIXPathStyle, 0);
      if (!v40)
      {
        v41 = v54;
        if (v54[23] < 0)
          v41 = *(const char **)v54;
        BBUFeedback::handleComment(this, "Failed creating CFURLRef for %s while restoring baseband migration data", v41);
      }
      if (v39)
        CFRelease(v39);
      if (!v40)
      {
        v30 = 0;
        goto LABEL_81;
      }
      context.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
      v59.__r_.__value_.__r.__words[0] = 0;
      v42 = CFWriteStreamCreateWithFile(0, v40);
      v43 = v42;
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      if (v42)
        v44 = ctu::SharedRef<__CFWriteStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFWriteStream>::get;
      else
        v44 = 0;
      if (v44)
      {
        if (CFWriteStreamOpen(v42))
        {
          BytePtr = CFDataGetBytePtr(*(CFDataRef *)&v54[24]);
          Length = CFDataGetLength(*(CFDataRef *)&v54[24]);
          v47 = CFWriteStreamWrite(v43, BytePtr, Length);
          if (v47 <= 0)
            BBUFeedback::handleComment(this, "Failed writing to stream for restoring baseband migration data");
          CFWriteStreamClose(v43);
          v30 = v30 & (v47 > 0);
          if (!v43)
            goto LABEL_80;
LABEL_79:
          CFRelease(v43);
          goto LABEL_80;
        }
        BBUFeedback::handleComment(this, "Failed opening stream for restoring baseband migration data");
      }
      else
      {
        BBUFeedback::handleComment(this, "Failed creating CFWriteStremRef for restoring baseband migration data");
      }
      v30 = 0;
      if (v43)
        goto LABEL_79;
LABEL_80:
      CFRelease(v40);
LABEL_81:
      if ((v54[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v54);
        v48 = (_QWORD *)*((_QWORD *)v36 + 1);
        if (v48)
        {
          do
          {
LABEL_85:
            v49 = v48;
            v48 = (_QWORD *)*v48;
          }
          while (v48);
          goto LABEL_37;
        }
      }
      else
      {
        v48 = (_QWORD *)*((_QWORD *)v36 + 1);
        if (v48)
          goto LABEL_85;
      }
      do
      {
        v49 = (_OWORD *)*((_QWORD *)v36 + 2);
        v34 = *(_QWORD *)v49 == (_QWORD)v36;
        v36 = v49;
      }
      while (!v34);
LABEL_37:
      v36 = v49;
    }
    while (v49 != (__int128 *)((char *)&v55 + 8));
  }
LABEL_90:
  std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy((uint64_t)&v55, *((char **)&v55 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v30;
}

void sub_212AB4D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  char **v41;

  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v41, v41[1]);
  operator delete(v41);
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_212AB4F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a14);
  if ((a20 & 0x80000000) == 0)
    JUMPOUT(0x212AB4EDCLL);
  JUMPOUT(0x212AB4ED4);
}

uint64_t ctu::SharedRef<__CFWriteStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFWriteStream>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

const void **ctu::cf::CFSharedRef<__CFWriteStream>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *BBUICE16UpdateSource::copyHashData(BBUICE16UpdateSource *this, char a2)
{
  BBUZipFile *v4;
  __int128 *v5;
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  std::string *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t *v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t *v27;
  int64_t v28;
  char *v29;
  size_t v30;
  __int128 v31;
  __int128 v32;
  BBUZipFile *v33;
  _OWORD *v34;
  uint64_t v35;
  _QWORD *DataSource;
  _DWORD *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::string *v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  size_t v49;
  uint64_t *v50;
  __int128 v51;
  uint64_t *v52;
  uint64_t *v53;
  int64_t v54;
  char *v55;
  size_t v56;
  __int128 v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v67;
  void *exception;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  std::string v76;
  _QWORD v77[3];
  __int128 *v78;
  __int128 v79;
  std::string *v80;

  if (!capabilities::updater::supportsHashSha384(this))
  {
    if ((a2 & 1) == 0)
    {
      v58 = operator new(0x20uLL);
      BBUICE16HashData::BBUICE16HashData(v58, 0, 0);
      return v58;
    }
    v33 = (BBUZipFile *)*((_QWORD *)this + 8);
    if (!v33)
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0x2E9u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"BBU firmware data error.\")", v72, v73, v74, v75);
      goto LABEL_99;
    }
    v79 = 0uLL;
    v78 = &v79;
    memset(v77, 170, sizeof(v77));
    BBUZipFile::getFileList(v33, v77);
    v34 = operator new(0x20uLL);
    *v34 = 0u;
    v34[1] = 0u;
    v35 = v77[1];
    if ((_QWORD *)v77[1] == v77)
    {
LABEL_84:
      v58 = operator new(0x20uLL);
      v58[2] = 0;
      *v58 = off_24CE81D48;
      v58[1] = v58 + 2;
      v58[3] = 0;
      std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<unsigned char>>,std::__tree_node<std::__value_type<std::string,std::vector<unsigned char>>,void *> *,long>>((uint64_t)(v58 + 1), v78, &v79);
      operator delete(v34);
      if (v77[2])
      {
        v59 = v77[0];
        v60 = (_QWORD *)v77[1];
        v61 = *(_QWORD *)v77[1];
        *(_QWORD *)(v61 + 8) = *(_QWORD *)(v77[0] + 8);
        **(_QWORD **)(v59 + 8) = v61;
        v77[2] = 0;
        if (v60 != v77)
        {
          do
          {
            v62 = (_QWORD *)v60[1];
            if (*((char *)v60 + 39) < 0)
              operator delete((void *)v60[2]);
            operator delete(v60);
            v60 = v62;
          }
          while (v62 != v77);
        }
      }
LABEL_92:
      std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy((uint64_t)&v78, (char *)v79);
      return v58;
    }
    while (1)
    {
      memset(&v76, 170, sizeof(v76));
      if (*(char *)(v35 + 39) < 0)
        std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)(v35 + 16), *(_QWORD *)(v35 + 24));
      else
        v76 = *(std::string *)(v35 + 16);
      DataSource = BBUICEUpdateSource::createDataSource((uint64_t)this, (uint64_t)&v76, 0);
      v37 = operator new(0x18uLL);
      *(_QWORD *)v37 = off_24CE85510;
      v37[2] = 0;
      *((_QWORD *)v37 + 2) = DataSource;
      BBUICEEBLImage::generateHash((uint64_t)v37, (unsigned __int8 *)v34, 0);
      ctu::assign();
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
          goto LABEL_58;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
        {
LABEL_58:
          if ((gBBULogVerbosity & 0x80000000) == 0)
          {
            v38 = (const char *)(**(uint64_t (***)(BBUICE16UpdateSource *))this)(this);
            if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v42 = &v76;
            else
              LOBYTE(v42) = v76.__r_.__value_.__s.__data_[0];
            _BBULog(3, 0, v38, "", "Zipfile hash of %s: %s\n", v39, v40, v41, (char)v42);
          }
        }
      }
      v80 = &v76;
      v43 = std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v78, (const void **)&v76.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v80);
      v44 = v43;
      v46 = v43 + 7;
      v45 = v43[7];
      v47 = (unint64_t)v43[9];
      if (v47 - (unint64_t)v45 >= 0x20)
      {
        v53 = v43[8];
        v54 = (char *)v53 - (char *)v45;
        if ((unint64_t)((char *)v53 - (char *)v45) > 0x1F)
        {
          v57 = v34[1];
          *(_OWORD *)v45 = *v34;
          *((_OWORD *)v45 + 1) = v57;
          v52 = v45 + 4;
        }
        else
        {
          if (v53 != v45)
          {
            memmove(v43[7], v34, (char *)v53 - (char *)v45);
            v45 = v44[8];
          }
          v55 = (char *)v34 + v54;
          v56 = 32 - v54;
          memmove(v45, v55, v56);
          v52 = (uint64_t *)((char *)v45 + v56);
        }
      }
      else
      {
        if (v45)
        {
          v43[8] = v45;
          operator delete(v45);
          v47 = 0;
          *v46 = 0;
          v46[1] = 0;
          v46[2] = 0;
        }
        v48 = 2 * v47;
        if (2 * v47 <= 0x20)
          v48 = 32;
        if (v47 >= 0x3FFFFFFFFFFFFFFFLL)
          v49 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        v50 = (uint64_t *)operator new(v49);
        v44[7] = v50;
        v44[8] = v50;
        v44[9] = (uint64_t *)((char *)v50 + v49);
        v51 = v34[1];
        *(_OWORD *)v50 = *v34;
        *((_OWORD *)v50 + 1) = v51;
        v52 = v50 + 4;
      }
      v44[8] = v52;
      (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v76.__r_.__value_.__l.__data_);
        v35 = *(_QWORD *)(v35 + 8);
        if ((_QWORD *)v35 == v77)
          goto LABEL_84;
      }
      else
      {
        v35 = *(_QWORD *)(v35 + 8);
        if ((_QWORD *)v35 == v77)
          goto LABEL_84;
      }
    }
  }
  if ((a2 & 1) != 0)
  {
    v4 = (BBUZipFile *)*((_QWORD *)this + 8);
    if (v4)
    {
      v79 = 0uLL;
      v78 = &v79;
      memset(v77, 170, sizeof(v77));
      BBUZipFile::getFileList(v4, v77);
      v5 = (__int128 *)operator new(0x30uLL);
      v5[1] = 0u;
      v5[2] = 0u;
      *v5 = 0u;
      v6 = v77[1];
      if ((_QWORD *)v77[1] != v77)
      {
        while (1)
        {
          memset(&v76, 170, sizeof(v76));
          if (*(char *)(v6 + 39) < 0)
            std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)(v6 + 16), *(_QWORD *)(v6 + 24));
          else
            v76 = *(std::string *)(v6 + 16);
          v5[1] = 0u;
          v5[2] = 0u;
          *v5 = 0u;
          v7 = BBUICEUpdateSource::createDataSource((uint64_t)this, (uint64_t)&v76, 0);
          v8 = operator new(0x18uLL);
          *(_QWORD *)v8 = off_24CE85510;
          v8[2] = 0;
          *((_QWORD *)v8 + 2) = v7;
          if (*((_DWORD *)this + 40) != 104
            || ((*(uint64_t (**)(BBUICE16UpdateSource *))(*(_QWORD *)this + 336))(this) & 1) != 0)
          {
LABEL_20:
            v11 = 1;
            goto LABEL_21;
          }
          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
          {
            v10 = (std::string *)v76.__r_.__value_.__r.__words[0];
            if (!strcmp(v76.__r_.__value_.__l.__data_, "psi_ram2.bin"))
              goto LABEL_45;
          }
          else
          {
            if (v76.__r_.__value_.__r.__words[0] == 0x326D61725F697370
              && *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 5) == 0x6E69622E326D61)
            {
              goto LABEL_45;
            }
            v10 = &v76;
          }
          if (strcmp((const char *)v10, "restorepsi2.bin"))
            goto LABEL_20;
LABEL_45:
          v11 = 0;
LABEL_21:
          (*(void (**)(_DWORD *, __int128 *, uint64_t))(*(_QWORD *)v8 + 56))(v8, v5, v11);
          ctu::assign();
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
              goto LABEL_23;
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
            {
LABEL_23:
              if ((gBBULogVerbosity & 0x80000000) == 0)
              {
                v12 = (const char *)(**(uint64_t (***)(BBUICE16UpdateSource *))this)(this);
                if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v16 = &v76;
                else
                  LOBYTE(v16) = v76.__r_.__value_.__s.__data_[0];
                _BBULog(3, 0, v12, "", "Zipfile hash of %s: %s\n", v13, v14, v15, (char)v16);
              }
            }
          }
          v80 = &v76;
          v17 = std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v78, (const void **)&v76.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v80);
          v18 = v17;
          v20 = v17 + 7;
          v19 = v17[7];
          v21 = (unint64_t)v17[9];
          if (v21 - (unint64_t)v19 >= 0x30)
          {
            v27 = v17[8];
            v28 = (char *)v27 - (char *)v19;
            if ((unint64_t)((char *)v27 - (char *)v19) > 0x2F)
            {
              v31 = *v5;
              v32 = v5[2];
              *((_OWORD *)v19 + 1) = v5[1];
              *((_OWORD *)v19 + 2) = v32;
              *(_OWORD *)v19 = v31;
              v26 = v19 + 6;
            }
            else
            {
              if (v27 != v19)
              {
                memmove(v17[7], v5, (char *)v27 - (char *)v19);
                v19 = v18[8];
              }
              v29 = (char *)v5 + v28;
              v30 = 48 - v28;
              memmove(v19, v29, v30);
              v26 = (uint64_t *)((char *)v19 + v30);
            }
          }
          else
          {
            if (v19)
            {
              v17[8] = v19;
              operator delete(v19);
              v21 = 0;
              *v20 = 0;
              v20[1] = 0;
              v20[2] = 0;
            }
            v22 = 2 * v21;
            if (2 * v21 <= 0x30)
              v22 = 48;
            if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
              v23 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v23 = v22;
            v24 = (uint64_t *)operator new(v23);
            v18[7] = v24;
            v18[8] = v24;
            v18[9] = (uint64_t *)((char *)v24 + v23);
            v25 = v5[1];
            *(_OWORD *)v24 = *v5;
            *((_OWORD *)v24 + 1) = v25;
            *((_OWORD *)v24 + 2) = v5[2];
            v26 = v24 + 6;
          }
          v18[8] = v26;
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v76.__r_.__value_.__l.__data_);
            v6 = *(_QWORD *)(v6 + 8);
            if ((_QWORD *)v6 == v77)
              break;
          }
          else
          {
            v6 = *(_QWORD *)(v6 + 8);
            if ((_QWORD *)v6 == v77)
              break;
          }
        }
      }
      v58 = operator new(0x20uLL);
      v58[2] = 0;
      *v58 = off_24CE84F18;
      v58[1] = v58 + 2;
      v58[3] = 0;
      std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<unsigned char>>,std::__tree_node<std::__value_type<std::string,std::vector<unsigned char>>,void *> *,long>>((uint64_t)(v58 + 1), v78, &v79);
      operator delete(v5);
      if (v77[2])
      {
        v63 = v77[0];
        v64 = (_QWORD *)v77[1];
        v65 = *(_QWORD *)v77[1];
        *(_QWORD *)(v65 + 8) = *(_QWORD *)(v77[0] + 8);
        **(_QWORD **)(v63 + 8) = v65;
        v77[2] = 0;
        if (v64 != v77)
        {
          do
          {
            v67 = (_QWORD *)v64[1];
            if (*((char *)v64 + 39) < 0)
              operator delete((void *)v64[2]);
            operator delete(v64);
            v64 = v67;
          }
          while (v67 != v77);
        }
      }
      goto LABEL_92;
    }
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0x2BEu, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"BBU firmware data error.\")", v69, v70, v71, v75);
LABEL_99:
  }
  v58 = operator new(0x20uLL);
  BBUICE18HashData::BBUICE18HashData(v58, 0, 0);
  return v58;
}

void sub_212AB585C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AB5870(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AB5884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,char *a29)
{
  char **v29;
  void *v30;
  uint64_t v31;

  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(v31, v29[2]);
  operator delete(v29);
  operator delete(v30);
  std::list<std::string>::~list(&a25);
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy((uint64_t)&a28, a29);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16UpdateSource::saveImages(BBUICE16UpdateSource *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  void *v12;
  std::string::size_type size;
  std::string *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v37;
  void *exception;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  std::string v48;
  std::string v49;
  _QWORD v50[3];
  void *__p[3];

  if (!*((_QWORD *)this + 8))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0x310u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"BBU firmware data error.\")", v39, v40, v41, v46);
  }
  memset(__p, 170, sizeof(__p));
  capabilities::radio::personalizedFirmwarePath(this);
  v2 = (void *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) < 0)
    v2 = __p[1];
  if (!v2)
  {
    v42 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v42, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICE16UpdateSource.cpp", 0x313u, (ctu::LogMessageBuffer *)"Assertion failure(folder.empty() != true && \"Failed finding the bbfw path.\")", v43, v44, v45, v46);
  }
  v3 = BBUICEUpdateSource::saveImages(this);
  if (*((_QWORD *)this + 39) != *((_QWORD *)this + 40))
  {
    v4 = v3;
    memset(v50, 170, sizeof(v50));
    BBUZipFile::getFileList(*((BBUZipFile **)this + 8), v50);
    v5 = v50[1];
    if ((_QWORD *)v50[1] == v50)
      goto LABEL_70;
    v6 = &qword_253D37000;
    v7 = &qword_253D37000;
    while (1)
    {
      memset(&v49, 170, sizeof(v49));
      if (*(char *)(v5 + 39) < 0)
        std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(v5 + 16), *(_QWORD *)(v5 + 24));
      else
        v49 = *(std::string *)(v5 + 16);
      if (!*((_BYTE *)this + 208))
        goto LABEL_41;
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v48, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
      else
        v48 = v49;
      v8 = *((_QWORD *)this + 39);
      v9 = *((_QWORD *)this + 40);
      v10 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
      if (v8 != v9)
        break;
      if ((*((_BYTE *)&v48.__r_.__value_.__s + 23) & 0x80) != 0)
        operator delete(v48.__r_.__value_.__l.__data_);
LABEL_49:
      if (v6[502] == -1)
      {
        v18 = 3;
        if ((*(_BYTE *)v7[501] & 2) == 0)
          goto LABEL_56;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        v18 = 3;
        if ((*(_BYTE *)v7[501] & 2) == 0)
          goto LABEL_56;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        v24 = (const char *)(**(uint64_t (***)(BBUICE16UpdateSource *))this)(this);
        v28 = &v49;
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          LOBYTE(v28) = v49.__r_.__value_.__s.__data_[0];
        _BBULog(1, 0, v24, "", "Skipping saving image %s: not in allowed list\n", v25, v26, v27, (char)v28);
      }
LABEL_56:
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v49.__r_.__value_.__l.__data_);
        if (v18 == 3)
          goto LABEL_8;
      }
      else if (v18 == 3)
      {
        goto LABEL_8;
      }
      if (v18)
      {
        v4 = v47;
LABEL_70:
        if (v50[2])
        {
          v33 = v50[0];
          v34 = (_QWORD *)v50[1];
          v35 = *(_QWORD *)v50[1];
          *(_QWORD *)(v35 + 8) = *(_QWORD *)(v50[0] + 8);
          **(_QWORD **)(v33 + 8) = v35;
          v50[2] = 0;
          if (v34 != v50)
          {
            do
            {
              v37 = (_QWORD *)v34[1];
              if (*((char *)v34 + 39) < 0)
                operator delete((void *)v34[2]);
              operator delete(v34);
              v34 = v37;
            }
            while (v37 != v50);
          }
        }
        goto LABEL_72;
      }
LABEL_8:
      v5 = *(_QWORD *)(v5 + 8);
      if ((_QWORD *)v5 == v50)
        goto LABEL_70;
    }
    v11 = v6;
    v12 = (void *)v48.__r_.__value_.__r.__words[0];
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    else
      size = v48.__r_.__value_.__l.__size_;
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v48;
    else
      v14 = (std::string *)v48.__r_.__value_.__r.__words[0];
    do
    {
      v15 = *(unsigned __int8 *)(v8 + 23);
      if ((v15 & 0x80u) == 0)
        v16 = *(unsigned __int8 *)(v8 + 23);
      else
        v16 = *(_QWORD *)(v8 + 8);
      if (v16 == size)
      {
        if ((v15 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v8, v14, *(_QWORD *)(v8 + 8)))
            goto LABEL_34;
        }
        else
        {
          if (!*(_BYTE *)(v8 + 23))
          {
LABEL_34:
            if ((v10 & 0x80) == 0)
              goto LABEL_35;
            goto LABEL_40;
          }
          v17 = 0;
          while (*(unsigned __int8 *)(v8 + v17) == v14->__r_.__value_.__s.__data_[v17])
          {
            if (v15 == ++v17)
              goto LABEL_34;
          }
        }
      }
      v8 += 24;
    }
    while (v8 != v9);
    v8 = v9;
    if ((v10 & 0x80) == 0)
    {
LABEL_35:
      v6 = v11;
      v7 = &qword_253D37000;
      if (v8 != v9)
        goto LABEL_41;
      goto LABEL_49;
    }
LABEL_40:
    operator delete(v12);
    v6 = v11;
    v7 = &qword_253D37000;
    if (v8 == v9)
      goto LABEL_49;
LABEL_41:
    v4 = BBUICEUpdateSource::saveFile((uint64_t)this, (uint64_t)&v49, (uint64_t)__p);
    if ((_DWORD)v4)
    {
      if (v6[502] == -1)
      {
        v18 = 1;
        if ((*(_BYTE *)v7[501] & 8) != 0)
        {
LABEL_44:
          if ((gBBULogVerbosity & 0x80000000) == 0)
          {
            v19 = (const char *)(**(uint64_t (***)(BBUICE16UpdateSource *))this)(this);
            v23 = &v49;
            if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              LOBYTE(v23) = v49.__r_.__value_.__s.__data_[0];
            _BBULog(3, 0, v19, "", "Failed saving %s", v20, v21, v22, (char)v23);
          }
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        v18 = 1;
        if ((*(_BYTE *)v7[501] & 8) != 0)
          goto LABEL_44;
      }
      v47 = v4;
      goto LABEL_56;
    }
    v18 = 0;
    goto LABEL_56;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    v4 = 22;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_72;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v4 = 22;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_72;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v29 = (const char *)(**(uint64_t (***)(BBUICE16UpdateSource *))this)(this);
    _BBULog(1, 0, v29, "", "Error: image filter list is empty, cannot save any images!\n", v30, v31, v32, v46);
  }
LABEL_72:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_212AB5EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BBUICE16UpdateSource::validateCoredumpItems(BBUICE16UpdateSource *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  if (*((_DWORD *)this + 40) == 104)
  {
    if ((*(unsigned int (**)(BBUICE16UpdateSource *))(*(_QWORD *)this + 336))(this))
    {
      v2 = *((_QWORD *)this + 21);
      if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2))
        return 0;
    }
    else
    {
      v5 = *((_QWORD *)this + 23);
      if (v5 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
        return 0;
    }
  }
  else
  {
    v4 = *((_QWORD *)this + 21);
    if (v4 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4))
      return 0;
  }
  return 35;
}

const char *BBUICE16UpdateSource::getDebugName(BBUICE16UpdateSource *this)
{
  return "BBUICE16UpdateSource";
}

uint64_t BBUICEUpdateSource::getShouldProgram(BBUICEUpdateSource *this)
{
  return 1;
}

uint64_t BBUICEUpdateSource::getCanProvision(BBUICEUpdateSource *this)
{
  return *((unsigned __int8 *)this + 120);
}

uint64_t BBUICEUpdateSource::getZipFile@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 72);
  *a2 = *(_QWORD *)(this + 64);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t BBUICE16UpdateSource::isBbcfgImageMandatory(BBUICE16UpdateSource *this)
{
  return 0;
}

void std::__shared_ptr_pointer<BBUZipFile *,std::shared_ptr<BBUZipFile>::__shared_ptr_default_delete<BBUZipFile,BBUZipFile>,std::allocator<BBUZipFile>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BBUZipFile *,std::shared_ptr<BBUZipFile>::__shared_ptr_default_delete<BBUZipFile,BBUZipFile>,std::allocator<BBUZipFile>>::__on_zero_shared(uint64_t a1)
{
  BBUZipFile *v1;
  void *v2;

  v1 = *(BBUZipFile **)(a1 + 24);
  if (v1)
  {
    BBUZipFile::~BBUZipFile(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<BBUZipFile *,std::shared_ptr<BBUZipFile>::__shared_ptr_default_delete<BBUZipFile,BBUZipFile>,std::allocator<BBUZipFile>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B534FALL)
    return a1 + 24;
  if (((v3 & 0x8000000212B534FALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B534FALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B534FALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

_QWORD *std::vector<std::shared_ptr<BBUICENVMImage>>::__push_back_slow_path<std::shared_ptr<BBUICENVMImage> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  __int128 v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v11 = 16 * v6;
  v12 = (char *)operator new(16 * v6);
  v13 = &v12[16 * v5];
  *(_QWORD *)v13 = a2;
  *((_QWORD *)v13 + 1) = a3;
  if (a3)
  {
    v14 = (unint64_t *)(a3 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v3 = *(_QWORD **)a1;
    v4 = *(_QWORD **)(a1 + 8);
  }
  v16 = &v12[v11];
  v17 = v13 + 16;
  if (v4 == v3)
  {
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
  }
  else
  {
    do
    {
      v18 = *((_OWORD *)v4 - 1);
      v4 -= 2;
      *((_OWORD *)v13 - 1) = v18;
      v13 -= 16;
      *v4 = 0;
      v4[1] = 0;
    }
    while (v4 != v3);
    v3 = *(_QWORD **)a1;
    v19 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    while (v19 != v3)
    {
      v20 = (std::__shared_weak_count *)*(v19 - 1);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v19 -= 2;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void std::__shared_ptr_pointer<BBUICENVMImage *,std::shared_ptr<BBUICENVMImage>::__shared_ptr_default_delete<BBUICENVMImage,BBUICENVMImage>,std::allocator<BBUICENVMImage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<BBUICENVMImage *,std::shared_ptr<BBUICENVMImage>::__shared_ptr_default_delete<BBUICENVMImage,BBUICENVMImage>,std::allocator<BBUICENVMImage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<BBUICENVMImage *,std::shared_ptr<BBUICENVMImage>::__shared_ptr_default_delete<BBUICENVMImage,BBUICENVMImage>,std::allocator<BBUICENVMImage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B535C1)
    return a1 + 24;
  if (((v3 & 0x8000000212B535C1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B535C1))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B535C1 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<BBUICEMRCImage *,std::shared_ptr<BBUICEMRCImage>::__shared_ptr_default_delete<BBUICEMRCImage,BBUICEMRCImage>,std::allocator<BBUICEMRCImage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<BBUICEMRCImage *,std::shared_ptr<BBUICEMRCImage>::__shared_ptr_default_delete<BBUICEMRCImage,BBUICEMRCImage>,std::allocator<BBUICEMRCImage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<BBUICEMRCImage *,std::shared_ptr<BBUICEMRCImage>::__shared_ptr_default_delete<BBUICEMRCImage,BBUICEMRCImage>,std::allocator<BBUICEMRCImage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B5368CLL)
    return a1 + 24;
  if (((v3 & 0x8000000212B5368CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B5368CLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B5368CLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<BBUICEBinaryImage *,std::shared_ptr<BBUICEBinaryImage>::__shared_ptr_default_delete<BBUICEBinaryImage,BBUICEBinaryImage>,std::allocator<BBUICEBinaryImage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<BBUICEBinaryImage *,std::shared_ptr<BBUICEBinaryImage>::__shared_ptr_default_delete<BBUICEBinaryImage,BBUICEBinaryImage>,std::allocator<BBUICEBinaryImage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<BBUICEBinaryImage *,std::shared_ptr<BBUICEBinaryImage>::__shared_ptr_default_delete<BBUICEBinaryImage,BBUICEBinaryImage>,std::allocator<BBUICEBinaryImage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B5375ALL)
    return a1 + 24;
  if (((v3 & 0x8000000212B5375ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B5375ALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B5375ALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<BBUICEDownloadImage *,std::shared_ptr<BBUICEDownloadImage>::__shared_ptr_default_delete<BBUICEDownloadImage,BBUICEDownloadImage>,std::allocator<BBUICEDownloadImage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<BBUICEDownloadImage *,std::shared_ptr<BBUICEDownloadImage>::__shared_ptr_default_delete<BBUICEDownloadImage,BBUICEDownloadImage>,std::allocator<BBUICEDownloadImage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<BBUICEDownloadImage *,std::shared_ptr<BBUICEDownloadImage>::__shared_ptr_default_delete<BBUICEDownloadImage,BBUICEDownloadImage>,std::allocator<BBUICEDownloadImage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B5382DLL)
    return a1 + 24;
  if (((v3 & 0x8000000212B5382DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B5382DLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B5382DLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void ctu::cf::_Applier_InsertMapDefault<std::string,__CFData const*,std::insert_iterator<std::map<std::string,__CFData const*>>>(uint64_t a1, const void *a2, uint64_t a3)
{
  CFTypeID v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  std::string __p;
  uint64_t v11;
  void *v12[2];
  __int128 v13;

  *(_OWORD *)v12 = 0u;
  v13 = 0u;
  if (!ctu::cf::assign())
    goto LABEL_14;
  if (a2)
  {
    v5 = CFGetTypeID(a2);
    if (v5 == CFDataGetTypeID())
      *((_QWORD *)&v13 + 1) = a2;
  }
  if (SBYTE7(v13) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v12[0], (std::string::size_type)v12[1]);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v12;
    __p.__r_.__value_.__r.__words[2] = v13;
  }
  v11 = *((_QWORD *)&v13 + 1);
  v6 = std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,__CFData const*>>(*(uint64_t ***)a3, *(uint64_t **)(a3 + 8), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  *(_QWORD *)(a3 + 8) = v6;
  v7 = (_QWORD *)v6[1];
  if (v7)
  {
    do
    {
      v8 = v7;
      v7 = (_QWORD *)*v7;
    }
    while (v7);
  }
  else
  {
    do
    {
      v8 = (_QWORD *)v6[2];
      v9 = *v8 == (_QWORD)v6;
      v6 = v8;
    }
    while (!v9);
  }
  *(_QWORD *)(a3 + 8) = v8;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SBYTE7(v13) & 0x80000000) == 0)
      return;
LABEL_17:
    operator delete(v12[0]);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v13) < 0)
    goto LABEL_17;
}

void sub_212AB66D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,__CFData const*>>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  _QWORD *v9;
  std::string *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  v14 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  v15 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, a2, &v15, &v14, a3);
  if (*v6)
    return (_QWORD *)*v6;
  v8 = v6;
  v9 = operator new(0x40uLL);
  v10 = (std::string *)(v9 + 4);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    v9[6] = *(_QWORD *)(a4 + 16);
  }
  v9[7] = *(_QWORD *)(a4 + 24);
  v11 = v15;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = v11;
  *v8 = (uint64_t)v9;
  v12 = (uint64_t *)**a1;
  v13 = v9;
  if (v12)
  {
    *a1 = v12;
    v13 = (uint64_t *)*v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_212AB6814(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(uint64_t a1, char *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void *)*((_QWORD *)a2 + 7);
    if (v4)
    {
      *((_QWORD *)a2 + 8) = v4;
      operator delete(v4);
    }
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::string *v22;
  __int128 *v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = (const void *)v6[4];
      v12 = v6 + 4;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v10)
        v18 = v10;
      else
        v18 = v17;
      v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            return v11;
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        v6 = v11[1];
        if (!v6)
        {
          v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17)
          goto LABEL_22;
LABEL_8:
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_29;
      }
    }
  }
  v11 = a1 + 1;
LABEL_29:
  v21 = operator new(0x50uLL);
  v22 = (std::string *)(v21 + 4);
  v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
  }
  else
  {
    v24 = *v23;
    v21[6] = *((_QWORD *)v23 + 2);
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v24;
  }
  v21[7] = 0;
  v21[8] = 0;
  v21[9] = 0;
  *v21 = 0;
  v21[1] = 0;
  v21[2] = v11;
  *v7 = v21;
  v25 = (uint64_t *)**a1;
  v26 = v21;
  if (v25)
  {
    *a1 = v25;
    v26 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_212AB6A14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_7()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUPartitionManager>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance, &dword_212A4D000);
  }
  return result;
}

char *BBUEUR16UpdateSource::copyHashData(BBUEUR16UpdateSource *this, int a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  capabilities::updater *v12;
  uint64_t v13;
  char *v14;
  size_t HashSize;
  size_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  size_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  size_t v32;
  size_t v33;
  size_t v34;
  void *exception;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD v72[2];
  _OWORD v73[2];
  _OWORD v74[2];
  _OWORD v75[2];
  _OWORD v76[2];
  _OWORD v77[2];
  _OWORD v78[2];
  _OWORD v79[2];
  _OWORD __src[2];
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __src[0] = v3;
    __src[1] = v3;
    v79[0] = v3;
    v79[1] = v3;
    v78[0] = v3;
    v78[1] = v3;
    v77[0] = v3;
    v77[1] = v3;
    v76[0] = v3;
    v76[1] = v3;
    v75[0] = v3;
    v75[1] = v3;
    v74[0] = v3;
    v74[1] = v3;
    v73[0] = v3;
    v73[1] = v3;
    v72[0] = v3;
    v72[1] = v3;
    v4 = *((_QWORD *)this + 28);
    if (!v4)
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 89, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR16UpdateSource.cpp", 0x32u, (ctu::LogMessageBuffer *)"Assertion failure(fSBLImage && \"Failed loading SBL image for creating hash.\")", v37, v38, v39, v72[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v4 + 56))(v4, __src, 0);
    v5 = *((_QWORD *)this + 29);
    if (!v5)
    {
      v40 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v40, 90, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR16UpdateSource.cpp", 0x35u, (ctu::LogMessageBuffer *)"Assertion failure(fRPMImage && \"Failed loading RPM image for creating hash.\")", v41, v42, v43, v72[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v5 + 56))(v5, v79, 0);
    v6 = *((_QWORD *)this + 30);
    if (!v6)
    {
      v44 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v44, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR16UpdateSource.cpp", 0x38u, (ctu::LogMessageBuffer *)"Assertion failure(fAppsImage && \"Failed loading Apps image for creating hash.\")", v45, v46, v47, v72[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v6 + 56))(v6, v78, 0);
    v7 = *((_QWORD *)this + 32);
    if (!v7)
    {
      v48 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v48, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR16UpdateSource.cpp", 0x3Bu, (ctu::LogMessageBuffer *)"Assertion failure(fMBAImage && \"Failed loading MBA image for creating hash.\")", v49, v50, v51, v72[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v7 + 56))(v7, v77, 0);
    v8 = *((_QWORD *)this + 33);
    if (!v8)
    {
      v52 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v52, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR16UpdateSource.cpp", 0x3Eu, (ctu::LogMessageBuffer *)"Assertion failure(fQDSP6SWImage && \"Failed loading QDSP6SW image for creating hash.\")", v53, v54, v55, v72[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v8 + 56))(v8, v76, 0);
    v9 = *((_QWORD *)this + 34);
    if (!v9)
    {
      v56 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v56, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR16UpdateSource.cpp", 0x41u, (ctu::LogMessageBuffer *)"Assertion failure(fTZImage && \"Failed loading TZI image for creating hash.\")", v57, v58, v59, v72[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v9 + 56))(v9, v75, 0);
    v10 = *((_QWORD *)this + 29);
    if (!v10)
    {
      v60 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v60, 90, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR16UpdateSource.cpp", 0x44u, (ctu::LogMessageBuffer *)"Assertion failure(fRPMImage && \"Failed loading RPM image for creating hash.\")", v61, v62, v63, v72[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v10 + 56))(v10, v74, 0);
    v11 = *((_QWORD *)this + 40);
    if (!v11)
    {
      v64 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v64, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR16UpdateSource.cpp", 0x47u, (ctu::LogMessageBuffer *)"Assertion failure(fAcdbImage && \"Failed loading ACDB image for creating hash.\")", v65, v66, v67, v72[0]);
    }
    v12 = (capabilities::updater *)(*(uint64_t (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v11 + 56))(v11, v73, 0);
    if (capabilities::updater::supportsBbcfgImage(v12))
    {
      v13 = *((_QWORD *)this + 41);
      if (!v13)
      {
        v68 = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)v68, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR16UpdateSource.cpp", 0x4Cu, (ctu::LogMessageBuffer *)"Assertion failure(fBbcfgImage && \"Failed loading BBCFG image for creating hash.\")", v69, v70, v71, v72[0]);
      }
      (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v13 + 56))(v13, v72, 0);
    }
    v14 = (char *)operator new(0x148uLL);
    *(_QWORD *)v14 = &unk_24CE800C0;
    HashSize = BBUEURHashData::getHashSize((BBUEURHashData *)v14);
    memcpy(v14 + 8, __src, HashSize);
    v16 = (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 32))(v14);
    memcpy(v14 + 40, v79, v16);
    v17 = (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 32))(v14);
    memcpy(v14 + 72, v78, v17);
    v18 = (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 32))(v14);
    bzero(v14 + 104, v18);
    v19 = (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 32))(v14);
    memcpy(v14 + 136, v77, v19);
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 32))(v14);
    memcpy(v14 + 168, v76, v20);
    v21 = (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 32))(v14);
    memcpy(v14 + 200, v75, v21);
    v22 = (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 32))(v14);
    bzero(v14 + 232, v22);
    v23 = (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 32))(v14);
    memcpy(v14 + 264, v73, v23);
    v24 = (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 32))(v14);
    memcpy(v14 + 296, v72, v24);
  }
  else
  {
    v14 = (char *)operator new(0x148uLL);
    *(_QWORD *)v14 = &unk_24CE800C0;
    v25 = BBUEURHashData::getHashSize((BBUEURHashData *)v14);
    bzero(v14 + 8, v25);
    v26 = (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 32))(v14);
    bzero(v14 + 40, v26);
    v27 = (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 32))(v14);
    bzero(v14 + 72, v27);
    v28 = (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 32))(v14);
    bzero(v14 + 104, v28);
    v29 = (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 32))(v14);
    bzero(v14 + 136, v29);
    v30 = (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 32))(v14);
    bzero(v14 + 168, v30);
    v31 = (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 32))(v14);
    bzero(v14 + 200, v31);
    v32 = (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 32))(v14);
    bzero(v14 + 232, v32);
    v33 = (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 32))(v14);
    bzero(v14 + 264, v33);
    v34 = (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 32))(v14);
    bzero(v14 + 296, v34);
  }
  return v14;
}

void sub_212AB70C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AB70D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AB70E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AB70FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AB7110(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AB7124(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AB7138(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AB714C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AB7160(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AB7174(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212AB7188(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR16UpdateSource::validateBootupItems(BBUEUR16UpdateSource *this)
{
  uint64_t v2;
  capabilities::updater *v3;
  uint64_t result;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *((_QWORD *)this + 28);
  if (!v2)
    return 35;
  v3 = (capabilities::updater *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  if (!v3)
    return 35;
  if (*((_QWORD *)this + 29)
    && *((_QWORD *)this + 30)
    && *((_QWORD *)this + 32)
    && *((_QWORD *)this + 33)
    && *((_QWORD *)this + 34)
    && *((_QWORD *)this + 40))
  {
    result = capabilities::updater::supportsBbcfgImage(v3);
    if (!(_DWORD)result)
      return result;
    if (*((_QWORD *)this + 41))
      return 0;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    result = 35;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      return result;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    result = 35;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      return result;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v5 = (const char *)(**(uint64_t (***)(BBUEUR16UpdateSource *))this)(this);
    _BBULog(3, 0, v5, "", "Baseband FW isn't complete. You are missing some images!\n", v6, v7, v8, v9);
    return 35;
  }
  return result;
}

uint64_t BBUEUR16UpdateSource::saveImages(BBUEUR16UpdateSource *this)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  capabilities::radio *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  capabilities::updater *v11;
  uint64_t v12;
  uint64_t v13;
  void *exception;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *__p[2];
  char v24;
  void *v25[3];

  if (!*((_QWORD *)this + 8))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR16UpdateSource.cpp", 0x80u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Firmware data source error!\")", v16, v17, v18, (char)__p[0]);
  }
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v2 = (const char *)(**(uint64_t (***)(BBUEUR16UpdateSource *))this)(this);
  v6 = (capabilities::radio *)_BBULog(19, 0xFFFFFFFFLL, v2, "", "BBUEUR16UpdateSource::saveImages\n", v3, v4, v5, (char)__p[0]);
  memset(v25, 170, sizeof(v25));
  capabilities::radio::personalizedFirmwarePath(v6);
  v7 = (void *)HIBYTE(v25[2]);
  if (SHIBYTE(v25[2]) < 0)
    v7 = v25[1];
  if (!v7)
  {
    v19 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v19, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR16UpdateSource.cpp", 0x85u, (ctu::LogMessageBuffer *)"Assertion failure(folder.empty() != true && \"Failed finding the bbfw path.\")", v20, v21, v22, (char)__p[0]);
  }
  v8 = BBUEURUpdateSource::saveImages(this);
  if (!(_DWORD)v8)
  {
    v24 = 8;
    strcpy((char *)__p, "sbl1.mbn");
    v9 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
    v8 = v9;
    if (v24 < 0)
    {
      operator delete(__p[0]);
      if ((_DWORD)v8)
        goto LABEL_41;
    }
    else if ((_DWORD)v9)
    {
      goto LABEL_41;
    }
    v24 = 7;
    strcpy((char *)__p, "rpm.mbn");
    v10 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
    v8 = v10;
    if (v24 < 0)
    {
      operator delete(__p[0]);
      if ((_DWORD)v8)
        goto LABEL_41;
    }
    else if ((_DWORD)v10)
    {
      goto LABEL_41;
    }
    v24 = 8;
    strcpy((char *)__p, "apps.mbn");
    v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
    if (v24 < 0)
      operator delete(__p[0]);
    if (!(_DWORD)v8)
    {
      v24 = 11;
      strcpy((char *)__p, "qdsp6sw.mbn");
      v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
      if (v24 < 0)
        operator delete(__p[0]);
      if (!(_DWORD)v8)
      {
        v24 = 7;
        strcpy((char *)__p, "mba.mbn");
        v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
        if (v24 < 0)
          operator delete(__p[0]);
        if (!(_DWORD)v8)
        {
          v24 = 6;
          strcpy((char *)__p, "tz.mbn");
          v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
          if (v24 < 0)
            operator delete(__p[0]);
          if (!(_DWORD)v8)
          {
            v24 = 8;
            strcpy((char *)__p, "acdb.mbn");
            v11 = (capabilities::updater *)BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
            v8 = (uint64_t)v11;
            if (v24 < 0)
              operator delete(__p[0]);
            if (!(_DWORD)v8)
            {
              if ((capabilities::updater::supportsBbcfgImage(v11) & 1) == 0)
              {
                v12 = *((_QWORD *)this + 8);
                v24 = 9;
                strcpy((char *)__p, "bbcfg.mbn");
                if (!BBUZipFile::containsFile(v12, __p))
                  goto LABEL_36;
              }
              v24 = 9;
              strcpy((char *)__p, "bbcfg.mbn");
              v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
              if (v24 < 0)
                operator delete(__p[0]);
              if (!(_DWORD)v8)
              {
LABEL_36:
                v13 = *((_QWORD *)this + 8);
                (*(void (**)(void **__return_ptr, BBUEUR16UpdateSource *))(*(_QWORD *)this + 56))(__p, this);
                v8 = BBUZipFile::containsFile(v13, __p);
                if (v24 < 0)
                  operator delete(__p[0]);
                if ((_DWORD)v8)
                {
                  (*(void (**)(void **__return_ptr, BBUEUR16UpdateSource *))(*(_QWORD *)this + 56))(__p, this);
                  v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
                  if (v24 < 0)
                    operator delete(__p[0]);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_41:
  if (SHIBYTE(v25[2]) < 0)
    operator delete(v25[0]);
  return v8;
}

void sub_212AB7728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

const char *BBUEUR16UpdateSource::getDebugName(BBUEUR16UpdateSource *this)
{
  return "BBUEUR16UpdateSource";
}

void BBUEUR16UpdateSource::~BBUEUR16UpdateSource(BBUEUR16UpdateSource *this)
{
  void *v1;

  BBUEUR10UpdateSource::~BBUEUR10UpdateSource(this);
  operator delete(v1);
}

uint64_t BBUEUR3Fusing::writeFuse(_BYTE *a1)
{
  __int128 v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _OWORD v13[16];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[14] = v2;
  v13[15] = v2;
  v13[12] = v2;
  v13[13] = v2;
  v13[10] = v2;
  v13[11] = v2;
  v13[8] = v2;
  v13[9] = v2;
  v13[6] = v2;
  v13[7] = v2;
  v13[4] = v2;
  v13[5] = v2;
  v13[2] = v2;
  v13[3] = v2;
  v13[0] = v2;
  v13[1] = v2;
  TelephonyUtilLogBinaryToBuffer();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      goto LABEL_5;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v3 = (const char *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 32))(a1);
    _BBULog(13, 0, v3, "", "%s\n", v4, v5, v6, (char)v13);
  }
LABEL_5:
  if (a1[24])
    return 1;
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
  if ((ETLFusingProgramQfpromFuse() & 1) != 0)
    return 1;
  if (gBBULogMaskGet(void)::once == -1)
  {
    result = 0;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      return result;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    result = 0;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      return result;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v8 = (const char *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 32))(a1);
    _BBULog(13, 0, v8, "", "ETLFusingProgramQfpromFuse failed\n", v9, v10, v11, v12);
    return 0;
  }
  return result;
}

uint64_t BBUEUR3Fusing::readFuse(uint64_t a1, char a2, void *a3, unsigned int a4)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t QfpromFuse;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  _BYTE __src[264];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0 && (gBBULogVerbosity & 0x80000000) == 0)
  {
    v8 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    _BBULog(13, 0, v8, "", "FuseID %d\n", v9, v10, v11, a2);
  }
  memset(__src, 0, 256);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  QfpromFuse = ETLFusingReadQfpromFuse();
  if ((QfpromFuse & 1) != 0)
  {
    TelephonyUtilLogBinaryToBuffer();
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
        goto LABEL_9;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
      {
LABEL_9:
        if ((gBBULogVerbosity & 0x80000000) == 0)
        {
          v13 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
          _BBULog(13, 0, v13, "", "Received (%u) %d: %s\n", v14, v15, v16, 170);
        }
      }
    }
    if (a4 <= 0xAAAAAAAA)
      v17 = a4;
    else
      v17 = 2863311530;
    memcpy(a3, __src, v17);
    return QfpromFuse;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      return QfpromFuse;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      return QfpromFuse;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v18 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    _BBULog(13, 0, v18, "", "ETLFusingReadQfpromFuse failed\n", v19, v20, v21, v23);
  }
  return QfpromFuse;
}

uint64_t BBUEUR3Fusing::processFusedItem(uint64_t a1, CFArrayRef *this, CFIndex a3, uint64_t a4)
{
  int v5;
  int v8;
  void **v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unsigned int v36[2];
  __CFString *v37;
  unsigned int v38;
  void *__p[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD v71[8];
  uint64_t v72;

  v5 = a3;
  v72 = *MEMORY[0x24BDAC8D0];
  v38 = -1431655766;
  *(_QWORD *)v36 = 0;
  v37 = (__CFString *)0xAAAAAAAAAAAAAAAALL;
  memset(v71, 0, sizeof(v71));
  if ((BBUpdaterFusingProgram::copyFuseItem(this, a3, (ctu::cf *)&v36[1], v36, (const __CFString **)&v37, (unsigned __int8 *)v71, 0x80u, (ctu::cf *)&v38) & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed to copy fuse item %u", v5);
    goto LABEL_57;
  }
  if ((v36[1] & 0x80000000) != 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Fuse ID invalid %d", v36[1]);
    goto LABEL_57;
  }
  if (!v37)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "No fuse name - malformed fusing program?");
    goto LABEL_57;
  }
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v40 = 0;
  v8 = ctu::cf::assign();
  if (v8)
  {
    v9 = __p;
    if (SBYTE7(v40) < 0)
      v9 = (void **)__p[0];
    BBUFeedback::handleBeginPhase(*(BBUFeedback **)(a1 + 8), "Writing Fuse %d(%s) length %u", v36[1], (const char *)v9, v38);
  }
  if (SBYTE7(v40) < 0)
  {
    operator delete(__p[0]);
    if (v38)
      v11 = v8;
    else
      v11 = 0;
    if (v11 == 1)
    {
LABEL_13:
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v46 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      *(_OWORD *)__p = 0u;
      if (v36[1] == 107)
        strcpy((char *)__p, "monkey");
      else
        TelephonyUtilBinToHex();
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Value: '%s'", (const char *)__p);
      if (*(char *)(a1 + 55) < 0)
      {
        v14 = &qword_253D37000;
        v15 = &qword_253D37000;
        if (*(_QWORD *)(a1 + 40))
          goto LABEL_35;
      }
      else
      {
        v14 = &qword_253D37000;
        v15 = &qword_253D37000;
        if (*(_BYTE *)(a1 + 55))
        {
LABEL_35:
          if (*(char *)(a1 + 79) < 0)
          {
            if (*(_QWORD *)(a1 + 64))
              goto LABEL_45;
          }
          else if (*(_BYTE *)(a1 + 79))
          {
LABEL_45:
            if (v14[502] == -1)
            {
              if ((*(_BYTE *)(v15[501] + 1) & 0x20) == 0)
                goto LABEL_49;
            }
            else
            {
              dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
              if ((*(_BYTE *)(v15[501] + 1) & 0x20) == 0)
                goto LABEL_49;
            }
            if ((gBBULogVerbosity & 0x80000000) == 0)
            {
              v24 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
              _BBULog(13, 0, v24, "", "Writing Fuse ID %u, Value Length %u\n", v25, v26, v27, v36[1]);
            }
LABEL_49:
            v28 = v36[0];
            if (((*(uint64_t (**)(uint64_t, _QWORD, BOOL, _OWORD *, _QWORD, uint64_t))(*(_QWORD *)a1 + 64))(a1, v36[1], v36[0] != 0, v71, v38, a4) & 1) != 0)
            {
              if (*((_DWORD *)this + 7) > v5)
              {
                if (v14[502] == -1)
                {
                  if ((*(_BYTE *)(v15[501] + 1) & 0x20) == 0)
                    goto LABEL_55;
                }
                else
                {
                  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
                  if ((*(_BYTE *)(v15[501] + 1) & 0x20) == 0)
                    goto LABEL_55;
                }
                if ((gBBULogVerbosity & 0x80000000) == 0)
                {
                  v29 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
                  _BBULog(13, 0, v29, "", "Verifying Fuse ID %u, Value Length %u\n", v30, v31, v32, v36[1]);
                }
LABEL_55:
                v33 = (*(uint64_t (**)(uint64_t, _QWORD, BOOL, _OWORD *, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, v36[1], v28 != 0, v71, v38, a4);
                v12 = *(_QWORD *)(a1 + 8);
                if ((v33 & 1) != 0)
                  goto LABEL_61;
                goto LABEL_23;
              }
              v12 = *(_QWORD *)(a1 + 8);
LABEL_61:
              v34 = 0;
              v13 = 1;
              goto LABEL_59;
            }
LABEL_57:
            v13 = 0;
            v12 = *(_QWORD *)(a1 + 8);
            goto LABEL_58;
          }
          if (v36[1] != 105)
            goto LABEL_45;
          if (v14[502] == -1)
          {
            if ((*(_BYTE *)(v15[501] + 1) & 0x20) != 0)
              goto LABEL_42;
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(_BYTE *)(v15[501] + 1) & 0x20) != 0)
            {
LABEL_42:
              if ((gBBULogVerbosity & 0x80000000) == 0)
              {
                v20 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
                _BBULog(13, 0, v20, "", "Overriding PublicKeyHash as %s\n", v21, v22, v23, (char)__p);
              }
            }
          }
          std::string::__assign_external((std::string *)(a1 + 56), (const std::string::value_type *)__p);
          goto LABEL_45;
        }
      }
      if (v36[1] != 100)
        goto LABEL_35;
      if (v14[502] == -1)
      {
        if ((*(_BYTE *)(v15[501] + 1) & 0x20) != 0)
          goto LABEL_32;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)(v15[501] + 1) & 0x20) != 0)
        {
LABEL_32:
          if ((gBBULogVerbosity & 0x80000000) == 0)
          {
            v16 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
            _BBULog(13, 0, v16, "", "Overriding PublicKeyHash as %s\n", v17, v18, v19, (char)__p);
          }
        }
      }
      std::string::__assign_external((std::string *)(a1 + 32), (const std::string::value_type *)__p);
      goto LABEL_35;
    }
  }
  else
  {
    if (v38)
      v10 = v8;
    else
      v10 = 0;
    if (v10 == 1)
      goto LABEL_13;
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v8)
    goto LABEL_61;
LABEL_23:
  v13 = 0;
LABEL_58:
  v34 = 12;
LABEL_59:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v34);
  return v13;
}

void sub_212AB8254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUEUR3Fusing::processFusedArray(BBUFeedback **a1, uint64_t a2, uint64_t a3)
{
  const __CFArray *v6;
  int Count;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(const __CFArray **)(a2 + 16);
  if (v6)
  {
    Count = CFArrayGetCount(v6);
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_3;
LABEL_12:
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_4;
  }
  Count = 0;
  if (gBBULogMaskGet(void)::once != -1)
    goto LABEL_12;
LABEL_3:
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
    goto LABEL_6;
LABEL_4:
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v8 = (const char *)(*((uint64_t (**)(BBUFeedback **))*a1 + 4))(a1);
    _BBULog(13, 0, v8, "", "Number of fuses %d\n", v9, v10, v11, Count);
  }
LABEL_6:
  if (Count < 1)
    return 1;
  v12 = 0;
  while (((*((uint64_t (**)(BBUFeedback **, uint64_t, uint64_t, uint64_t))*a1 + 11))(a1, a2, v12, a3) & 1) != 0)
  {
    v12 = (v12 + 1);
    if (Count == (_DWORD)v12)
      return 1;
  }
  BBUFeedback::handleComment(a1[1], "Fuse item %u failed", v12);
  return 0;
}

uint64_t BBUEUR3Fusing::performFusing(BBUFeedback **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  void *exception;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  BBUFeedback::handleBeginPhase(a1[1], "Fuse and verify");
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  if (!v4)
  {
    BBUFeedback::handleComment(a1[1], "Error: No fusing program given");
    v7 = 24;
    goto LABEL_15;
  }
  v5 = (*((uint64_t (**)(BBUFeedback **, uint64_t))*a1 + 7))(a1, v4);
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 24, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR3Fusing.cpp", 0x103u, (ctu::LogMessageBuffer *)"Assertion failure(parseObj && \"Error: unable to create fusing program.\")", v15, v16, v17, v18);
  }
  v6 = v5;
  if (((*((uint64_t (**)(BBUFeedback **, uint64_t, BBUFeedback *))*a1 + 12))(a1, v5, a1[2]) & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v7 = 24;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_10;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v7 = 24;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_10;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      v8 = (const char *)(*((uint64_t (**)(BBUFeedback **))*a1 + 4))(a1);
      _BBULog(13, 0, v8, "", "Failed to fuse baseband\n", v9, v10, v11, v18);
    }
    goto LABEL_10;
  }
  v7 = 0;
LABEL_10:
  if (*(_QWORD *)v6)
    CFRelease(*(CFTypeRef *)v6);
  v12 = *(const void **)(v6 + 16);
  if (v12)
    CFRelease(v12);
  operator delete((void *)v6);
LABEL_15:
  (*(void (**)(BBUFeedback *, uint64_t))(*(_QWORD *)a1[1] + 16))(a1[1], v7);
  return v7;
}

void sub_212AB8580(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR3Fusing::verifyFusing()
{
  return 0;
}

BBUpdaterFusingProgram *BBUEUR3Fusing::createFusingProgram(BBUEUR3Fusing *this, BBUDataSource *a2)
{
  BBUpdaterFusingProgram *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (BBUpdaterFusingProgram *)operator new(0x20uLL);
  BBUpdaterFusingProgram::BBUpdaterFusingProgram(v3, a2, v4, v5, v6, v7, v8, v9);
  return v3;
}

void sub_212AB85D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void BasebandBooter::BasebandBooter(BasebandBooter *this)
{
  *(_QWORD *)this = off_24CE80B78;
}

uint64_t BasebandBooter::create@<X0>(BasebandBooter *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  ACFULogging::getLogInstance(this);
  return ACFULogging::handleMessage();
}

void sub_212AB8680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _QWORD *v4;
  va_list va;

  va_start(va, a4);
  *v4 = 0;
  BasebandBooterParams::~BasebandBooterParams((BasebandBooterParams *)va);
  _Unwind_Resume(a1);
}

uint64_t BasebandBooter::create@<X0>(ACFULogging *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  ACFULogging::getLogInstance(a1);
  return ACFULogging::handleMessage();
}

void sub_212AB86E8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

void BasebandBooterParams::~BasebandBooterParams(BasebandBooterParams *this)
{
  void **v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_24CE80BA8;
  if (!*((_BYTE *)this + 112))
    goto LABEL_5;
  v2 = (void **)*((_QWORD *)this + 11);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_15:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_15;
      }
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    operator delete(v3);
LABEL_5:
  if (*((_BYTE *)this + 64) && *((char *)this + 63) < 0)
  {
    operator delete(*((void **)this + 5));
    if (!*((_BYTE *)this + 32))
      return;
  }
  else if (!*((_BYTE *)this + 32))
  {
    return;
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t BBUEUR2HashData::compare(BBUEUR2HashData *this, BBUFeedback *a2, const BBUHashData *lpsrc)
{
  const unsigned __int8 *v5;
  _BOOL4 v6;
  _BOOL4 v7;

  if (lpsrc)
  else
    v5 = 0;
  v6 = BBUHashData::compareHash(this, a2, (const unsigned __int8 *)this + 8, v5 + 8, "EDBL");
  v7 = BBUHashData::compareHash(this, a2, (const unsigned __int8 *)this + 40, v5 + 40, "OSBL");
  return (BBUHashData::compareHash(this, a2, (const unsigned __int8 *)this + 72, v5 + 72, "AMSS") && v7) & v6;
}

void BBUEUR2HashData::showHashes(BBUEUR2HashData *this, BBUFeedback *a2)
{
  const char *p_p;
  const char *v5;
  void *__p;
  uint64_t v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  (*(void (**)(BBUEUR2HashData *))(*(_QWORD *)this + 32))(this);
  ctu::assign();
  BBUFeedback::handleComment(a2, "\t %s:  %s", "DBL_HASH", (const char *)&__p);
  if (SHIBYTE(v8) < 0)
    operator delete(__p);
  __p = 0;
  v7 = 0;
  v8 = 0;
  (*(void (**)(BBUEUR2HashData *))(*(_QWORD *)this + 32))(this);
  ctu::assign();
  if (v8 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  BBUFeedback::handleComment(a2, "\t %s:  %s", "OSBL_HASH", p_p);
  if (SHIBYTE(v8) < 0)
    operator delete(__p);
  __p = 0;
  v7 = 0;
  v8 = 0;
  (*(void (**)(BBUEUR2HashData *))(*(_QWORD *)this + 32))(this);
  ctu::assign();
  if (v8 >= 0)
    v5 = (const char *)&__p;
  else
    v5 = (const char *)__p;
  BBUFeedback::handleComment(a2, "\t %s:  %s", "AMSS_HASH", v5);
  if (SHIBYTE(v8) < 0)
    operator delete(__p);
}

void sub_212AB8A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BBUEURFirmwareVersion::~BBUEURFirmwareVersion(void **this)
{
  *this = off_24CE80C30;
  if (*((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(this[3]);
      return;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    goto LABEL_7;
}

{
  *this = off_24CE80C30;
  if ((*((char *)this + 95) & 0x80000000) == 0)
  {
    if ((*((char *)this + 71) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_7:
    operator delete(this[6]);
    if ((*((char *)this + 47) & 0x80000000) == 0)
      goto LABEL_4;
LABEL_8:
    operator delete(this[3]);
    operator delete(this);
    return;
  }
  operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    goto LABEL_7;
LABEL_3:
  if (*((char *)this + 47) < 0)
    goto LABEL_8;
LABEL_4:
  operator delete(this);
}

BOOL BBUEURFirmwareVersion::initCommon(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  int v7;
  void **v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  BOOL v16;
  signed __int8 v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  _BOOL8 v20;
  void *v22;
  size_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  void **v26;
  void **v27;
  unint64_t v28;
  char v29;
  __int128 v30;
  void *v31;
  size_t v32;
  void **v33;
  char v34;
  __int128 v35;
  void *v36;
  size_t v37;
  void **v38;
  void **v39;
  unint64_t v40;
  char v41;
  __int128 v42;
  void *v43;
  size_t v44;
  const char *v45;
  void **v46;
  void **v47;
  uint64_t v48;
  const char *v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  std::string v54;
  std::string v55;
  std::string v56;
  void *__p[2];
  unsigned __int8 v58;
  std::string v59;
  _QWORD v60[3];
  std::string __dst;

  memset(&__dst, 0, sizeof(__dst));
  memset(v60, 170, sizeof(v60));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v59 = *(std::string *)a2;
  ctu::tokenize();
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  v3 = (unsigned __int8 *)v60[0];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60[1] - v60[0]) >> 3) < 2)
    goto LABEL_32;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
  v4 = v3[23];
  if ((v4 & 0x80u) == 0)
    v5 = (void *)v3[23];
  else
    v5 = (void *)*((_QWORD *)v3 + 1);
  v6 = v58;
  v7 = (char)v58;
  if ((v58 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  if (v5 == (void *)v6)
  {
    if ((v58 & 0x80u) == 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    if ((v4 & 0x80) != 0)
    {
      v16 = memcmp(*(const void **)v3, v8, *((_QWORD *)v3 + 1)) == 0;
      if ((v7 & 0x80000000) == 0)
        goto LABEL_25;
    }
    else if (v3[23])
    {
      v9 = v4 - 1;
      do
      {
        v11 = *v3++;
        v10 = v11;
        v13 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v12 = v13;
        v15 = v9-- != 0;
        v16 = v10 == v12;
      }
      while (v10 == v12 && v15);
      if (((char)v58 & 0x80000000) == 0)
      {
LABEL_25:
        v3 = (unsigned __int8 *)v60[0];
        if (v16)
          goto LABEL_26;
LABEL_32:
        if (v3)
        {
          v18 = (unsigned __int8 *)v60[1];
          v19 = v3;
          if ((unsigned __int8 *)v60[1] != v3)
          {
            do
            {
              if ((char)*(v18 - 1) < 0)
                operator delete(*((void **)v18 - 3));
              v18 -= 24;
            }
            while (v18 != v3);
            v19 = (unsigned __int8 *)v60[0];
          }
          v60[1] = v3;
          goto LABEL_40;
        }
        goto LABEL_41;
      }
    }
    else
    {
      v16 = 1;
      if (((char)v58 & 0x80000000) == 0)
        goto LABEL_25;
    }
  }
  else
  {
    v16 = 0;
    if (((char)v58 & 0x80000000) == 0)
      goto LABEL_25;
  }
  operator delete(__p[0]);
  v3 = (unsigned __int8 *)v60[0];
  if (!v16)
    goto LABEL_32;
LABEL_26:
  if (&__dst != (std::string *)(v3 + 24))
  {
    v17 = v3[47];
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v17 >= 0)
        v22 = v3 + 24;
      else
        v22 = (void *)*((_QWORD *)v3 + 3);
      if (v17 >= 0)
        v23 = v3[47];
      else
        v23 = *((_QWORD *)v3 + 4);
      std::string::__assign_no_alias<false>((void **)&__dst.__r_.__value_.__l.__data_, v22, v23);
    }
    else if ((v3[47] & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(&__dst, *((void **)v3 + 3), *((_QWORD *)v3 + 4));
    }
    else
    {
      __dst = *(std::string *)(v3 + 1);
    }
    v3 = (unsigned __int8 *)v60[0];
  }
  if (v3)
  {
    v24 = (unsigned __int8 *)v60[1];
    v25 = v3;
    if ((unsigned __int8 *)v60[1] != v3)
    {
      do
      {
        if ((char)*(v24 - 1) < 0)
          operator delete(*((void **)v24 - 3));
        v24 -= 24;
      }
      while (v24 != v3);
      v25 = (unsigned __int8 *)v60[0];
    }
    v60[1] = v3;
    operator delete(v25);
  }
  memset(v60, 170, sizeof(v60));
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v56, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v56 = __dst;
  ctu::tokenize();
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  v27 = (void **)v60[0];
  v26 = (void **)v60[1];
  v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60[1] - v60[0]) >> 3);
  if (v28 != 1)
  {
    if (v28 != 2)
    {
      if (!v60[0])
        goto LABEL_41;
      if (v60[1] == v60[0])
        goto LABEL_130;
      do
      {
        if (*((char *)v26 - 1) < 0)
          operator delete(*(v26 - 3));
        v26 -= 3;
      }
      while (v26 != v27);
      goto LABEL_129;
    }
    if (&__dst != (std::string *)v60[0])
    {
      v29 = *(_BYTE *)(v60[0] + 23);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v29 >= 0)
          v31 = (void *)v60[0];
        else
          v31 = *(void **)v60[0];
        if (v29 >= 0)
          v32 = *(unsigned __int8 *)(v60[0] + 23);
        else
          v32 = *(_QWORD *)(v60[0] + 8);
        std::string::__assign_no_alias<false>((void **)&__dst.__r_.__value_.__l.__data_, v31, v32);
      }
      else if ((*(_BYTE *)(v60[0] + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(&__dst, *(void **)v60[0], *(_QWORD *)(v60[0] + 8));
      }
      else
      {
        v30 = *(_OWORD *)v60[0];
        __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v60[0] + 16);
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v30;
      }
    }
    v27 = (void **)v60[0];
    if (a1 != v60[0])
    {
      v33 = (void **)(a1 + 24);
      v34 = *(_BYTE *)(v60[0] + 47);
      if (*(char *)(a1 + 47) < 0)
      {
        if (v34 >= 0)
          v36 = (void *)(v60[0] + 24);
        else
          v36 = *(void **)(v60[0] + 24);
        if (v34 >= 0)
          v37 = *(unsigned __int8 *)(v60[0] + 47);
        else
          v37 = *(_QWORD *)(v60[0] + 32);
        std::string::__assign_no_alias<false>(v33, v36, v37);
      }
      else if ((*(_BYTE *)(v60[0] + 47) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v33, *(void **)(v60[0] + 24), *(_QWORD *)(v60[0] + 32));
      }
      else
      {
        v35 = *(_OWORD *)(v60[0] + 24);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v60[0] + 40);
        *(_OWORD *)v33 = v35;
      }
      v27 = (void **)v60[0];
    }
  }
  if (v27)
  {
    v38 = (void **)v60[1];
    v39 = v27;
    if ((void **)v60[1] != v27)
    {
      do
      {
        if (*((char *)v38 - 1) < 0)
          operator delete(*(v38 - 3));
        v38 -= 3;
      }
      while (v38 != v27);
      v39 = (void **)v60[0];
    }
    v60[1] = v27;
    operator delete(v39);
  }
  memset(v60, 170, sizeof(v60));
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v55, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v55 = __dst;
  ctu::tokenize();
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  v27 = (void **)v60[0];
  v26 = (void **)v60[1];
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60[1] - v60[0]) >> 3);
  if (v40 != 1)
  {
    if (v40 == 2)
    {
      if (&__dst != (std::string *)v60[0])
      {
        v41 = *(_BYTE *)(v60[0] + 23);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v41 >= 0)
            v43 = (void *)v60[0];
          else
            v43 = *(void **)v60[0];
          if (v41 >= 0)
            v44 = *(unsigned __int8 *)(v60[0] + 23);
          else
            v44 = *(_QWORD *)(v60[0] + 8);
          std::string::__assign_no_alias<false>((void **)&__dst.__r_.__value_.__l.__data_, v43, v44);
        }
        else if ((*(_BYTE *)(v60[0] + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(&__dst, *(void **)v60[0], *(_QWORD *)(v60[0] + 8));
        }
        else
        {
          v42 = *(_OWORD *)v60[0];
          __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v60[0] + 16);
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v42;
        }
      }
      if (*(char *)(v60[0] + 47) >= 0)
        v45 = (const char *)(v60[0] + 24);
      else
        v45 = *(const char **)(v60[0] + 24);
      *(_DWORD *)(a1 + 20) = strtoul(v45, 0, 10);
      v27 = (void **)v60[0];
      goto LABEL_143;
    }
    if (v60[0])
    {
      if (v60[1] == v60[0])
        goto LABEL_130;
      do
      {
        if (*((char *)v26 - 1) < 0)
          operator delete(*(v26 - 3));
        v26 -= 3;
      }
      while (v26 != v27);
LABEL_129:
      v26 = (void **)v60[0];
LABEL_130:
      v60[1] = v27;
      v19 = (unsigned __int8 *)v26;
LABEL_40:
      operator delete(v19);
    }
LABEL_41:
    v20 = 0;
    goto LABEL_42;
  }
LABEL_143:
  if (v27)
  {
    v46 = (void **)v60[1];
    v47 = v27;
    if ((void **)v60[1] != v27)
    {
      do
      {
        if (*((char *)v46 - 1) < 0)
          operator delete(*(v46 - 3));
        v46 -= 3;
      }
      while (v46 != v27);
      v47 = (void **)v60[0];
    }
    v60[1] = v27;
    operator delete(v47);
  }
  memset(v60, 170, sizeof(v60));
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v54, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v54 = __dst;
  ctu::tokenize();
  if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v48 = v60[0];
    v20 = v60[1] - v60[0] == 72;
    if (v60[1] - v60[0] == 72)
      goto LABEL_156;
LABEL_168:
    if (!v48)
      goto LABEL_42;
    goto LABEL_169;
  }
  operator delete(v54.__r_.__value_.__l.__data_);
  v48 = v60[0];
  v20 = v60[1] - v60[0] == 72;
  if (v60[1] - v60[0] != 72)
    goto LABEL_168;
LABEL_156:
  if (*(char *)(v48 + 23) >= 0)
    v49 = (const char *)v48;
  else
    v49 = *(const char **)v48;
  *(_DWORD *)(a1 + 8) = strtoul(v49, 0, 10);
  if (*(char *)(v60[0] + 47) >= 0)
    v50 = (const char *)(v60[0] + 24);
  else
    v50 = *(const char **)(v60[0] + 24);
  *(_DWORD *)(a1 + 12) = strtoul(v50, 0, 10);
  if (*(char *)(v60[0] + 71) >= 0)
    v51 = (const char *)(v60[0] + 48);
  else
    v51 = *(const char **)(v60[0] + 48);
  *(_DWORD *)(a1 + 16) = strtoul(v51, 0, 10);
  v48 = v60[0];
  if (!v60[0])
    goto LABEL_42;
LABEL_169:
  v52 = v60[1];
  v53 = (void *)v48;
  if (v60[1] != v48)
  {
    do
    {
      if (*(char *)(v52 - 1) < 0)
        operator delete(*(void **)(v52 - 24));
      v52 -= 24;
    }
    while (v52 != v48);
    v53 = (void *)v60[0];
  }
  v60[1] = v48;
  operator delete(v53);
LABEL_42:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v20;
}

void sub_212AB925C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  std::vector<std::string>::~vector[abi:ne180100]((void **)(v37 - 88));
  if (*(char *)(v37 - 41) < 0)
    operator delete(*(void **)(v37 - 64));
  _Unwind_Resume(a1);
}

BOOL BBUEURFirmwareVersion::initWithVersionString(char *a1, void **a2)
{
  std::string *v4;
  int v5;
  void *v6;
  int64_t size;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  void *v15;
  char v16;
  char v17;
  char *v18;
  int v19;
  void **v20;
  void **v21;
  void **v22;
  void *v23;
  size_t v24;
  int v25;
  size_t v26;
  unint64_t v27;
  std::string::value_type *v28;
  void **v29;
  _BOOL8 inited;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  const void *v35;
  std::string v36;
  std::string v37;
  void *__p[3];
  _QWORD v39[3];

  v39[2] = *MEMORY[0x24BDAC8D0];
  memset(__p, 0, sizeof(__p));
  v4 = &v37;
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 24))(&v37);
  v5 = SHIBYTE(v37.__r_.__value_.__r.__words[2]);
  v6 = (void *)v37.__r_.__value_.__r.__words[0];
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  }
  else
  {
    size = v37.__r_.__value_.__l.__size_;
    v4 = (std::string *)v37.__r_.__value_.__r.__words[0];
  }
  if (!size)
  {
    v8 = 0;
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_20:
    operator delete(v6);
    if (v8)
      goto LABEL_8;
LABEL_21:
    if (__p != a2)
    {
      v17 = *((_BYTE *)a2 + 23);
      if (SHIBYTE(__p[2]) < 0)
      {
        if (v17 >= 0)
          v23 = a2;
        else
          v23 = *a2;
        if (v17 >= 0)
          v24 = *((unsigned __int8 *)a2 + 23);
        else
          v24 = (size_t)a2[1];
        std::string::__assign_no_alias<false>(__p, v23, v24);
      }
      else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(__p, *a2, (size_t)a2[1]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)a2;
        __p[2] = a2[2];
      }
    }
    goto LABEL_46;
  }
  if (size <= 0)
  {
    v18 = 0;
    v19 = v4->__r_.__value_.__s.__data_[0];
    v20 = __p;
    do
    {
      if (&v18[-size] == (char *)-1)
        break;
      v21 = (void **)memchr(v20, v19, (size_t)&v18[-size + 1]);
      if (!v21)
        break;
      v22 = v21;
      if (!memcmp(v21, v4, size))
      {
        if (v22 == __p)
          v8 = -1;
        else
          v8 = (char *)v22 - (char *)__p;
        if ((v5 & 0x80000000) == 0)
          goto LABEL_7;
        goto LABEL_20;
      }
      v20 = (void **)((char *)v22 + 1);
      v18 = (char *)((char *)__p - ((char *)v22 + 1));
    }
    while ((uint64_t)v18 >= size);
  }
  v8 = -1;
  if (v5 < 0)
    goto LABEL_20;
LABEL_7:
  if (!v8)
    goto LABEL_21;
LABEL_8:
  (*(void (**)(std::string *__return_ptr, char *))(*(_QWORD *)a1 + 24))(&v36, a1);
  v9 = std::string::append(&v36, " ", 1uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = *((char *)a2 + 23);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)a2;
  else
    v12 = (const std::string::value_type *)*a2;
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)a2 + 23);
  else
    v13 = (std::string::size_type)a2[1];
  v14 = std::string::append(&v37, v12, v13);
  v15 = (void *)v14->__r_.__value_.__r.__words[0];
  v39[0] = v14->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v39 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
  v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  __p[0] = v15;
  __p[1] = (void *)v39[0];
  *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v39 + 7);
  HIBYTE(__p[2]) = v16;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
  }
  else if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_46;
  }
  operator delete(v36.__r_.__value_.__l.__data_);
LABEL_46:
  v25 = *((char *)a2 + 23);
  if (v25 >= 0)
    v26 = *((unsigned __int8 *)a2 + 23);
  else
    v26 = (size_t)a2[1];
  v27 = v26 + 16;
  memset(&v37, 170, sizeof(v37));
  if (v26 + 16 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v27 >= 0x17)
  {
    v32 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v32 = v27 | 7;
    v33 = v32 + 1;
    v34 = operator new(v32 + 1);
    v37.__r_.__value_.__l.__size_ = v26 + 16;
    v37.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
    *v34 = *(_OWORD *)"Version String: ";
    v28 = (std::string::value_type *)(v34 + 1);
  }
  else
  {
    v28 = &v37.__r_.__value_.__s.__data_[16];
    v37.__r_.__value_.__r.__words[2] = 0;
    *((_BYTE *)&v37.__r_.__value_.__s + 23) = v26 + 16;
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)"Version String: ";
    if (!v26)
    {
      v37.__r_.__value_.__s.__data_[16] = 0;
      v29 = (void **)(a1 + 48);
      if ((a1[71] & 0x80000000) == 0)
        goto LABEL_53;
      goto LABEL_63;
    }
  }
  if (v25 >= 0)
    v35 = a2;
  else
    v35 = *a2;
  memmove(v28, v35, v26);
  v28[v26] = 0;
  v29 = (void **)(a1 + 48);
  if ((a1[71] & 0x80000000) == 0)
    goto LABEL_53;
LABEL_63:
  operator delete(*v29);
LABEL_53:
  *(std::string *)v29 = v37;
  inited = BBUEURFirmwareVersion::initCommon((uint64_t)a1, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return inited;
}

void sub_212AB96A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a28 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a23);
  _Unwind_Resume(exception_object);
}

BOOL BBUEURFirmwareVersion::initWithFolderName(uint64_t a1, uint64_t a2)
{
  int v2;
  size_t v3;
  unint64_t v4;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const void *v13;
  __int128 v14;
  unint64_t v15;

  v2 = *(char *)(a2 + 23);
  if (v2 >= 0)
    v3 = *(unsigned __int8 *)(a2 + 23);
  else
    v3 = *(_QWORD *)(a2 + 8);
  v4 = v3 + 8;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15 = 0xAAAAAAAAAAAAAAAALL;
  if (v3 + 8 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 >= 0x17)
  {
    v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v10 = v4 | 7;
    v11 = v10 + 1;
    v12 = operator new(v10 + 1);
    *v12 = 0x203A7265646C6F46;
    v7 = (char *)(v12 + 1);
    *((_QWORD *)&v14 + 1) = v3 + 8;
    v15 = v11 | 0x8000000000000000;
    *(_QWORD *)&v14 = v12;
  }
  else
  {
    v7 = (char *)&v14 + 8;
    v15 = 0;
    HIBYTE(v15) = v3 + 8;
    v14 = 0x203A7265646C6F46uLL;
    if (!v3)
    {
      BYTE8(v14) = 0;
      v8 = a1 + 48;
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_8;
LABEL_16:
      operator delete(*(void **)v8);
      goto LABEL_8;
    }
  }
  if (v2 >= 0)
    v13 = (const void *)a2;
  else
    v13 = *(const void **)a2;
  memmove(v7, v13, v3);
  v7[v3] = 0;
  v8 = a1 + 48;
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_16;
LABEL_8:
  *(_OWORD *)v8 = v14;
  *(_QWORD *)(v8 + 16) = v15;
  return BBUEURFirmwareVersion::initCommon(a1, a2);
}

unsigned int *BBUEURFirmwareVersion::isNewerThan(_DWORD *a1, void *lpsrc)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  if (result)
  {
    v4 = a1[2];
    v5 = result[2];
    if (v4 >= v5)
    {
      if (v4 > v5)
        return (unsigned int *)1;
      v6 = a1[3];
      v7 = result[3];
      if (v6 < v7)
        return 0;
      if (v6 > v7)
        return (unsigned int *)1;
      v8 = a1[4];
      v9 = result[4];
      if (v8 < v9)
        return 0;
      if (v8 > v9)
        return (unsigned int *)1;
      else
        return (unsigned int *)(a1[5] > (int)result[5]);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t BBUEURFirmwareVersion::equals(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v19;

  if (result)
  {
    if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(result + 8))
    {
      if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(result + 12)
        || *(_DWORD *)(a1 + 16) != *(_DWORD *)(result + 16)
        || *(_DWORD *)(a1 + 20) != *(_DWORD *)(result + 20))
      {
        return 0;
      }
      v4 = *(unsigned __int8 *)(a1 + 47);
      if ((v4 & 0x80u) == 0)
        v5 = *(unsigned __int8 *)(a1 + 47);
      else
        v5 = *(_QWORD *)(a1 + 32);
      v6 = *(unsigned __int8 *)(result + 47);
      v7 = (char)v6;
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(result + 32);
      if (v5 == v6)
      {
        v8 = (const void **)(a1 + 24);
        v11 = *(unsigned __int8 **)(result + 24);
        v9 = (unsigned __int8 *)(result + 24);
        v10 = v11;
        if (v7 >= 0)
          v12 = v9;
        else
          v12 = v10;
        if ((v4 & 0x80) != 0)
        {
          return memcmp(*v8, v12, *(_QWORD *)(a1 + 32)) == 0;
        }
        else if (*(_BYTE *)(a1 + 47))
        {
          v13 = v4 - 1;
          do
          {
            v15 = *(unsigned __int8 *)v8;
            v8 = (const void **)((char *)v8 + 1);
            v14 = v15;
            v17 = *v12++;
            v16 = v17;
            v19 = v13-- != 0;
            result = v14 == v16;
          }
          while (v14 == v16 && v19);
        }
        else
        {
          return 1;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t BBUEURFirmwareVersion::getAsFileName@<X0>(BBUEURFirmwareVersion *this@<X0>, std::string *a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const std::locale::facet *v13;
  std::string *v14;
  __int128 v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  void *v26;
  std::string::size_type v27;
  int64_t v28;
  std::string v29;
  std::string v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 __p;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v48 = v4;
  v47 = v4;
  v46 = v4;
  v45 = v4;
  v44 = v4;
  v43 = v4;
  v42 = v4;
  v41 = v4;
  v40 = v4;
  v37 = v4;
  __p = v4;
  v35 = v4;
  v33 = v4;
  v34 = v4;
  v32 = v4;
  v5 = MEMORY[0x24BEDB870];
  v6 = MEMORY[0x24BEDB870] + 64;
  v39 = MEMORY[0x24BEDB870] + 64;
  v7 = (uint64_t *)MEMORY[0x24BEDB800];
  v8 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v31 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v31 + *(_QWORD *)(v31 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v31 + *(_QWORD *)(v31 - 24));
  std::ios_base::init(v9, &v32);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v31 = v5 + 24;
  v39 = v6;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v32 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v37 = 0u;
  LODWORD(v38) = 16;
  v11 = v31;
  v12 = (char *)&v31 + *(_QWORD *)(v31 - 24);
  if (*((_DWORD *)v12 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&v31 + *(_QWORD *)(v31 - 24)));
    v13 = std::locale::use_facet((const std::locale *)&v30, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 32);
    std::locale::~locale((std::locale *)&v30);
    v11 = v31;
  }
  *((_DWORD *)v12 + 36) = 48;
  *(_QWORD *)((char *)&v33 + *(_QWORD *)(v11 - 24)) = 2;
  std::ostream::operator<<();
  *(_QWORD *)((char *)&v33 + *(_QWORD *)(v31 - 24)) = 1;
  v30.__r_.__value_.__s.__data_[0] = 46;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)&v30, 1);
  *(_QWORD *)((char *)&v33 + *(_QWORD *)(v31 - 24)) = 2;
  std::ostream::operator<<();
  *(_QWORD *)((char *)&v33 + *(_QWORD *)(v31 - 24)) = 1;
  v30.__r_.__value_.__s.__data_[0] = 46;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)&v30, 1);
  *(_QWORD *)((char *)&v33 + *(_QWORD *)(v31 - 24)) = 2;
  std::ostream::operator<<();
  *(_QWORD *)((char *)&v33 + *(_QWORD *)(v31 - 24)) = 1;
  if (*((_DWORD *)this + 5) != -1)
  {
    v30.__r_.__value_.__s.__data_[0] = 45;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)&v30, 1);
    std::ostream::operator<<();
  }
  memset(a2, 170, sizeof(std::string));
  (*(void (**)(std::string *__return_ptr, BBUEURFirmwareVersion *))(*(_QWORD *)this + 24))(&v29, this);
  v14 = std::string::append(&v29, "-", 1uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((v38 & 0x10) != 0)
  {
    v18 = *((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1) < (unint64_t)v35)
    {
      *((_QWORD *)&v37 + 1) = v35;
      v18 = v35;
    }
    v19 = (const void *)*((_QWORD *)&v34 + 1);
    v16 = v18 - *((_QWORD *)&v34 + 1);
    if ((unint64_t)(v18 - *((_QWORD *)&v34 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_34;
  }
  else
  {
    if ((v38 & 8) == 0)
    {
      v16 = 0;
      HIBYTE(v28) = 0;
      v17 = &v26;
      goto LABEL_18;
    }
    v19 = (const void *)v33;
    v16 = v34 - v33;
    if ((_QWORD)v34 - (_QWORD)v33 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_34:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    v17 = operator new(v20 + 1);
    v27 = v16;
    v28 = v21 | 0x8000000000000000;
    v26 = v17;
    goto LABEL_17;
  }
  HIBYTE(v28) = v16;
  v17 = &v26;
  if (v16)
LABEL_17:
    memmove(v17, v19, v16);
LABEL_18:
  *((_BYTE *)v17 + v16) = 0;
  if (v28 >= 0)
    v22 = (const std::string::value_type *)&v26;
  else
    v22 = (const std::string::value_type *)v26;
  if (v28 >= 0)
    v23 = HIBYTE(v28);
  else
    v23 = v27;
  v24 = std::string::append(&v30, v22, v23);
  *a2 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
LABEL_31:
    operator delete(v30.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_32;
  }
  operator delete(v26);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_31;
LABEL_26:
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_27;
LABEL_32:
  operator delete(v29.__r_.__value_.__l.__data_);
LABEL_27:
  v31 = *v7;
  *(uint64_t *)((char *)&v31 + *(_QWORD *)(v31 - 24)) = v7[3];
  *(_QWORD *)&v32 = v10 + 16;
  if (SBYTE7(v37) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212BFA3D0](&v39);
}

void sub_212AB9EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, char a18)
{
  std::locale::~locale(&a15);
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_212AB9EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
  {
LABEL_4:
    std::ostringstream::~ostringstream((uint64_t)&a27);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a15);
  std::ostringstream::~ostringstream((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_212AB9F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212AB9FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void BBUEURFirmwareVersion::getAsString(BBUEURFirmwareVersion *this@<X0>, std::string *a2@<X8>)
{
  char v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void **v12;
  std::string::size_type v13;
  void *__p[3];

  memset(a2, 170, sizeof(std::string));
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)this + 32))(a2);
  v4 = *((_BYTE *)this + 47);
  if (v4 < 0)
  {
    if (!*((_QWORD *)this + 4))
      return;
  }
  else if (!*((_BYTE *)this + 47))
  {
    return;
  }
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)this + 47);
  else
    v5 = *((_QWORD *)this + 4);
  v6 = v5 + 1;
  memset(__p, 170, sizeof(__p));
  if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v6 >= 0x17)
  {
    v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v8 = v6 | 7;
    v9 = v8 + 1;
    v10 = (char *)operator new(v8 + 1);
    __p[1] = (void *)(v5 + 1);
    __p[2] = (void *)(v9 | 0x8000000000000000);
    __p[0] = v10;
    *v10 = 95;
    v7 = v10 + 1;
    goto LABEL_15;
  }
  __p[1] = 0;
  __p[2] = 0;
  HIBYTE(__p[2]) = v5 + 1;
  v7 = (char *)__p + 1;
  __p[0] = (void *)95;
  if (v5)
  {
LABEL_15:
    if (v4 >= 0)
      v11 = (char *)this + 24;
    else
      v11 = (char *)*((_QWORD *)this + 3);
    memmove(v7, v11, v5);
  }
  v7[v5] = 0;
  if (SHIBYTE(__p[2]) >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if (SHIBYTE(__p[2]) >= 0)
    v13 = HIBYTE(__p[2]);
  else
    v13 = (std::string::size_type)__p[1];
  std::string::append(a2, (const std::string::value_type *)v12, v13);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_212ABA128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void BBUEURFirmwareVersion::getFirmwarePrefix(BBUEURFirmwareVersion *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 11);
  }
}

uint64_t BBULogIOABP::startRunLoopThread(pthread_t *this)
{
  NSObject *v2;
  uint64_t Controller;
  pthread_t v4;
  _QWORD v6[5];
  dispatch_object_t object;

  v2 = dispatch_group_create();
  dispatch_group_enter(v2);
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 1174405120;
  v6[2] = ___ZN11BBULogIOABP18startRunLoopThreadEv_block_invoke;
  v6[3] = &__block_descriptor_tmp_3;
  v6[4] = this;
  object = v2;
  if (v2)
    dispatch_retain(v2);
  pthread_create(this + 9, 0, (void *(__cdecl *)(void *))enterRunLoopThread, v6);
  dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
  Controller = TelephonyBasebandCreateController();
  v4 = this[11];
  this[11] = (pthread_t)Controller;
  if (v4)
    CFRelease(v4);
  if (object)
    dispatch_release(object);
  if (v2)
    dispatch_release(v2);
  return 1;
}

void sub_212ABA274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  NSObject *v14;

  if (object)
  {
    dispatch_release(object);
    if (!v14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  dispatch_release(v14);
  _Unwind_Resume(exception_object);
}

const void **ctu::cf::CFSharedRef<__CFRunLoopSource>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFRunLoop>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *std::vector<std::unique_ptr<BBULogIOABP::ABPBuffer>>::~vector[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (_QWORD *)*--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          v7 = (void *)v5[1];
          if (v7)
          {
            v5[2] = v7;
            operator delete(v7);
          }
          operator delete(v5);
        }
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void BBULogIOABP::BBULogIOABP(BBULogIOABP *this)
{
  char *v2;

  *((_QWORD *)this + 12) = &off_24CE81018;
  *(_QWORD *)this = &unk_24CE810A0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = 0;
  v2 = (char *)operator new(0x1000uLL);
  bzero(v2, 0x1000uLL);
  *((_QWORD *)this + 17) = v2 + 4096;
  *((_QWORD *)this + 18) = v2 + 4096;
  *((_QWORD *)this + 15) = 4096;
  *((_QWORD *)this + 16) = v2;
  *(_OWORD *)((char *)this + 104) = xmmword_212B53910;
  *((_BYTE *)this + 152) = 1;
  *((_QWORD *)this + 12) = &unk_24CE80D78;
  *(_QWORD *)this = &off_24CE80CE8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = dispatch_queue_create("com.apple.BBULogIOABP", 0);
  *((_OWORD *)this + 2) = 0u;
  *((_BYTE *)this + 80) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + *(_QWORD *)(*(_QWORD *)this - 80) + 56) = 0;
  BBULogIOABP::startRunLoopThread((pthread_t *)this);
}

void sub_212ABA480(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(v2);
  ctu::cf::CFSharedRef<__CFRunLoopSource>::~CFSharedRef((const void **)(v1 + 64));
  ctu::cf::CFSharedRef<__CFRunLoop>::~CFSharedRef((const void **)(v1 + 56));
  std::vector<std::unique_ptr<BBULogIOABP::ABPBuffer>>::~vector[abi:ne180100](v3);
  v7 = *(NSObject **)(v1 + 24);
  if (v7)
  {
    dispatch_release(v7);
    v8 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    if (!v8)
    {
LABEL_3:
      v9 = *v5;
      *v5 = 0;
      if (!v9)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v8 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    if (!v8)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *v5;
  *v5 = 0;
  if (!v9)
  {
LABEL_4:
    *(_QWORD *)(v1 + 96) = v4;
    *(_QWORD *)v1 = v4 + 136;
    v10 = *(void **)(v1 + 128);
    if (!v10)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  *(_QWORD *)(v1 + 96) = v4;
  *(_QWORD *)v1 = v4 + 136;
  v10 = *(void **)(v1 + 128);
  if (!v10)
LABEL_5:
    _Unwind_Resume(a1);
LABEL_9:
  *(_QWORD *)(v1 + 136) = v10;
  operator delete(v10);
  _Unwind_Resume(a1);
}

void BBULogIOABP::~BBULogIOABP(BBULogIOABP *this)
{
  const void *v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[6];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;

  *((_QWORD *)this + 12) = &unk_24CE80D78;
  *(_QWORD *)this = &off_24CE80CE8;
  BBULogIOABP::disable(this);
  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  v2 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    CFRelease(v2);
  v3 = *((_QWORD *)this + 3);
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1107296256;
  v17[2] = ___ZN11BBULogIOABP17stopRunLoopThreadEv_block_invoke;
  v17[3] = &__block_descriptor_tmp_4;
  v17[4] = &v18;
  v17[5] = this;
  dispatch_sync(v3, v17);
  if (*((_BYTE *)v19 + 24))
  {
    pthread_join(*((pthread_t *)this + 9), 0);
    v4 = (const void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v4)
      CFRelease(v4);
  }
  _Block_object_dispose(&v18, 8);
  v5 = (const void *)*((_QWORD *)this + 11);
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 8);
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 7);
  if (v7)
    CFRelease(v7);
  v8 = (_QWORD *)*((_QWORD *)this + 4);
  if (v8)
  {
    v9 = (_QWORD *)*((_QWORD *)this + 5);
    v10 = (void *)*((_QWORD *)this + 4);
    if (v9 != v8)
    {
      do
      {
        v12 = (_QWORD *)*--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
        {
          v13 = (void *)v11[1];
          if (v13)
          {
            v11[2] = v13;
            operator delete(v13);
          }
          operator delete(v11);
        }
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v8;
    operator delete(v10);
  }
  v14 = *((_QWORD *)this + 3);
  if (v14)
    dispatch_release(v14);
  v15 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
}

{
  _QWORD *v2;
  void *v3;

  BBULogIOABP::~BBULogIOABP(this);
  v2[12] = &off_24CE81018;
  *v2 = &unk_24CE810A0;
  v3 = (void *)v2[16];
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
}

{
  _QWORD *v2;
  void *v3;

  BBULogIOABP::~BBULogIOABP(this);
  v2[12] = &off_24CE81018;
  *v2 = &unk_24CE810A0;
  v3 = (void *)v2[16];
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  operator delete(this);
}

void sub_212ABA6E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  __clang_call_terminate(a1);
}

void `virtual thunk to'BBULogIOABP::~BBULogIOABP(BBULogIOABP *this)
{
  _QWORD *v1;
  void *v2;

  BBULogIOABP::~BBULogIOABP((BBULogIOABP *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)));
  v1[12] = &off_24CE81018;
  *v1 = &unk_24CE810A0;
  v2 = (void *)v1[16];
  if (v2)
  {
    v1[17] = v2;
    operator delete(v2);
  }
}

{
  BBULogIOABP *v1;
  void *v2;

  v1 = (BBULogIOABP *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32));
  BBULogIOABP::~BBULogIOABP(v1);
  *((_QWORD *)v1 + 12) = &off_24CE81018;
  *(_QWORD *)v1 = &unk_24CE810A0;
  v2 = (void *)*((_QWORD *)v1 + 16);
  if (v2)
  {
    *((_QWORD *)v1 + 17) = v2;
    operator delete(v2);
  }
  operator delete(v1);
}

void ___ZN11BBULogIOABP18startRunLoopThreadEv_block_invoke(uint64_t a1, const void *a2)
{
  uint64_t v4;
  CFRunLoopRef Current;
  CFRunLoopRef v6;
  const void *v7;
  const void *v8;

  v4 = *(_QWORD *)(a1 + 32);
  Current = CFRunLoopGetCurrent();
  v6 = Current;
  if (Current)
    CFRetain(Current);
  v7 = *(const void **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v6;
  if (v7)
    CFRelease(v7);
  if (a2)
    CFRetain(a2);
  v8 = *(const void **)(v4 + 64);
  *(_QWORD *)(v4 + 64) = a2;
  if (v8)
    CFRelease(v8);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void __copy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;

  v3 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
    dispatch_retain(v3);
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 40);
  if (v1)
    dispatch_release(v1);
}

uint64_t enterRunLoopThread(void (**a1)(_QWORD, _QWORD))
{
  __CFRunLoopSource *v2;
  __CFRunLoop *Current;
  CFRunLoopSourceContext context;

  memset(&context, 0, 72);
  context.perform = (void (__cdecl *)(void *))peformNOP;
  v2 = CFRunLoopSourceCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, &context);
  Current = CFRunLoopGetCurrent();
  CFRunLoopAddSource(Current, v2, (CFRunLoopMode)*MEMORY[0x24BDBD5A0]);
  ((void (**)(_QWORD, __CFRunLoopSource *))a1)[2](a1, v2);
  CFRunLoopRun();
  if (v2)
    CFRelease(v2);
  return 0;
}

void sub_212ABA978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFRunLoopSource>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN11BBULogIOABP17stopRunLoopThreadEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __CFRunLoop *v3;
  const void *v4;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(__CFRunLoop **)(v2 + 56);
  if (v3)
  {
    CFRunLoopWakeUp(v3);
    CFRunLoopSourceInvalidate(*(CFRunLoopSourceRef *)(v2 + 64));
    v4 = *(const void **)(v2 + 64);
    *(_QWORD *)(v2 + 64) = 0;
    if (v4)
      CFRelease(v4);
    CFRunLoopPerformBlock(*(CFRunLoopRef *)(v2 + 56), (CFTypeRef)*MEMORY[0x24BDBD5A0], &__block_literal_global_1);
    CFRunLoopWakeUp(*(CFRunLoopRef *)(v2 + 56));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
}

void ___ZN11BBULogIOABP17stopRunLoopThreadEv_block_invoke_2()
{
  __CFRunLoop *Current;

  Current = CFRunLoopGetCurrent();
  CFRunLoopStop(Current);
}

void ___ZN11BBULogIOABP25registerIOABPControl_syncEv_block_invoke()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      return;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      return;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v0 = pci::transport::kernel::errorAsString();
    _BBULog(1, 0, "BBULogIOABP", "", "received '%s' error. arg0 = %#llx arg1 = %#llx\n", v1, v2, v3, v0);
  }
}

uint64_t ___ZN11BBULogIOABP25registerIOABPControl_syncEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD block[7];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(NSObject **)(v3 + 24);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN11BBULogIOABP25registerIOABPControl_syncEv_block_invoke_3;
  block[3] = &__block_descriptor_tmp_25;
  block[4] = v3;
  block[5] = a2;
  block[6] = a3;
  dispatch_async(v4, block);
  return 0;
}

void ___ZN11BBULogIOABP25registerIOABPControl_syncEv_block_invoke_3(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *exception;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v8 = a1[4];
  if (!*(_BYTE *)(v8 + *(_QWORD *)(*(_QWORD *)v8 - 80) + 56))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBULogIOABP.cpp", 0x93u, (ctu::LogMessageBuffer *)"Assertion failure(fEnabled)", v16, v17, v18, v22);
    goto LABEL_20;
  }
  v10 = (unsigned int *)a1[5];
  if (!*v10)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBULogIOABP.cpp", 0x95u, (ctu::LogMessageBuffer *)"Assertion failure(buf->size)", v19, v20, v21, v22);
LABEL_20:
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_7;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_7;
  }
  if (gBBULogVerbosity >= 6)
    _BBULog(2, 6, "BBULogIOABP", "", "add log: data %p size %zu\n", a6, a7, a8, *((_QWORD *)v10 + 1));
LABEL_7:
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v8 + *(_QWORD *)(*(_QWORD *)v8 - 80)) + 24))(v8 + *(_QWORD *)(*(_QWORD *)v8 - 80), *((_QWORD *)v10 + 1), a1[6]);
  if (*(_BYTE *)(v8 + 80))
  {
    _Block_release(*((const void **)v10 + 4));
    return;
  }
  v14 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, void (*)(const void **, void *, int, void *, uint64_t, uint64_t, uint64_t, uint64_t), unsigned int *))(**(_QWORD **)(v8 + 16) + 64))(*(_QWORD *)(v8 + 16), *((_QWORD *)v10 + 1), *v10, 0, BBULogIOABP::cbReadLogs, v10);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      return;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      return;
  }
  if (gBBULogVerbosity >= 6)
    _BBULog(2, 6, "BBULogIOABP", "", "readLogsAsync: ret %#x\n", v11, v12, v13, v14);
}

void sub_212ABAD74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212ABAD88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void BBULogIOABP::cbReadLogs(const void **this, void *a2, int a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = (char)a2;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_5;
  }
  if (gBBULogVerbosity >= 6)
    _BBULog(2, 6, "BBULogIOABP", "", "readCompletion: ret %#x, arg0 %p, refCon %p\n", a6, a7, a8, v8);
LABEL_5:
  if (this)
  {
    if ((*((unsigned int (**)(void))this[4] + 2))())
      _Block_release(this[4]);
  }
}

_QWORD **std::unique_ptr<BBULogIOABP::ABPBuffer>::~unique_ptr[abi:ne180100](_QWORD **a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)v2[1];
    if (v3)
    {
      v2[2] = v3;
      operator delete(v3);
    }
    operator delete(v2);
  }
  return a1;
}

void BBULogIOABP::enable(BBULogIOABP *this)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *((_QWORD *)this + 3);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN11BBULogIOABP6enableEv_block_invoke;
  block[3] = &__block_descriptor_tmp_38;
  block[4] = this;
  dispatch_async(v1, block);
}

void ___ZN11BBULogIOABP6enableEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  int v21;
  char v22;
  char v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  size_t v27;
  char *v28;
  char *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;
  size_t v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  size_t v51;
  char *v52;
  char *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  _QWORD *v62;
  size_t v63;
  char *v64;
  char *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  const char *v74;
  int v75;
  uint64_t v76;
  const char *v77;
  char v78;
  const char *v79;
  char v80;
  _QWORD aBlock[5];
  void *__p;
  unsigned int v83;

  v9 = *(_QWORD **)(a1 + 32);
  if (*((_BYTE *)v9 + *(_QWORD *)(*v9 - 80) + 56) || !v9[7] || !v9[11])
    return;
  _Block_copy(&__block_literal_global_31);
  v10 = TelephonyBasebandRegisterForReset();
  if ((v10 & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_9;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_9;
    }
    if (gBBULogVerbosity >= 1)
      v10 = _BBULog(1, 1, "BBULogIOABP", "", "Failed to register for reset detect", v11, v12, v13, v80);
  }
LABEL_9:
  v83 = 0x10000;
  pci::transport::kernelControl::create((pci::transport::kernelControl *)v10);
  v17 = __p;
  __p = 0;
  v18 = v9[2];
  v9[2] = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = __p;
    __p = 0;
    if (v19)
      (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
    v17 = (void *)v9[2];
  }
  if (!v17)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_79;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_79;
    }
    if (gBBULogVerbosity >= 6)
    {
      _BBULog(1, 6, "BBULogIOABP", "", "check failed: %s, %d, assertion: %s\n", v14, v15, v16, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBULogIOABP.cpp");
      if (gBBULogMaskGet(void)::once != -1)
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_112;
LABEL_80:
        if (gBBULogVerbosity < 1)
          goto LABEL_112;
        v77 = "Fail to create kernelControl\n";
LABEL_111:
        _BBULog(1, 1, "BBULogIOABP", "", v77, v14, v15, v16, v80);
        goto LABEL_112;
      }
    }
LABEL_79:
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_112;
    goto LABEL_80;
  }
  if (((*(uint64_t (**)(void *))(*(_QWORD *)v17 + 24))(v17) & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_86;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_86;
    }
    if (gBBULogVerbosity >= 6)
    {
      _BBULog(1, 6, "BBULogIOABP", "", "check failed: %s, %d, assertion: %s\n", v14, v15, v16, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBULogIOABP.cpp");
      if (gBBULogMaskGet(void)::once != -1)
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_112;
LABEL_87:
        if (gBBULogVerbosity < 1)
          goto LABEL_112;
        v77 = "Fail to start kernelControl\n";
        goto LABEL_111;
      }
    }
LABEL_86:
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_112;
    goto LABEL_87;
  }
  v20 = (*(uint64_t (**)(_QWORD, _QWORD, void *))(*(_QWORD *)v9[2] + 72))(v9[2], v9[7], &__block_literal_global_14);
  if (v20)
  {
    v78 = v20;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_93;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_93;
    }
    if (gBBULogVerbosity >= 6)
    {
      _BBULog(1, 6, "BBULogIOABP", "", "check failed: %s, %d, assertion: %s\n", v14, v15, v16, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBULogIOABP.cpp");
      if (gBBULogMaskGet(void)::once != -1)
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_112;
LABEL_94:
        if (gBBULogVerbosity < 1)
          goto LABEL_112;
        v79 = "Fail to registerEventNotification: %#x \n";
LABEL_103:
        _BBULog(1, 1, "BBULogIOABP", "", v79, v14, v15, v16, v78);
        goto LABEL_112;
      }
    }
LABEL_93:
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_112;
    goto LABEL_94;
  }
  v21 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v9[2] + 40))(v9[2], v9[7]);
  if (v21)
  {
    v78 = v21;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_100;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_100;
    }
    if (gBBULogVerbosity >= 6)
    {
      _BBULog(1, 6, "BBULogIOABP", "", "check failed: %s, %d, assertion: %s\n", v14, v15, v16, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBULogIOABP.cpp");
      if (gBBULogMaskGet(void)::once != -1)
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_112;
LABEL_101:
        if (gBBULogVerbosity < 1)
          goto LABEL_112;
        v79 = "Fail to open kernelControl: %#x \n";
        goto LABEL_103;
      }
    }
LABEL_100:
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_112;
    goto LABEL_101;
  }
  v22 = (*(uint64_t (**)(_QWORD, unsigned int *))(*(_QWORD *)v9[2] + 96))(v9[2], &v83);
  v23 = v22;
  if (gBBULogMaskGet(void)::once == -1)
  {
    v24 = *(_QWORD *)gBBULogMaskGet(void)::sBBULogMask;
    v25 = gBBULogVerbosity;
    if ((v22 & 1) != 0)
    {
LABEL_19:
      if ((v24 & 4) != 0 && v25 >= 6)
        _BBULog(2, 6, "BBULogIOABP", "", "internal buffer is %lu bytes\n", v14, v15, v16, v83);
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 0x40000000;
      aBlock[2] = ___ZN11BBULogIOABP25registerIOABPControl_syncEv_block_invoke_2;
      aBlock[3] = &__block_descriptor_tmp_27;
      aBlock[4] = v9;
      v26 = operator new(0x28uLL);
      v27 = v83;
      *(_DWORD *)v26 = v83;
      v26[2] = 0;
      v26[3] = 0;
      v26[1] = 0;
      if ((_DWORD)v27)
      {
        v28 = (char *)operator new(v27);
        v26[1] = v28;
        v29 = &v28[v27];
        v26[3] = &v28[v27];
        bzero(v28, v27);
        v26[2] = v29;
      }
      v26[4] = _Block_copy(aBlock);
      __p = v26;
      v30 = (_QWORD *)v9[5];
      if ((unint64_t)v30 >= v9[6])
      {
        v31 = std::vector<std::unique_ptr<BBULogIOABP::ABPBuffer>>::__push_back_slow_path<std::unique_ptr<BBULogIOABP::ABPBuffer>>(v9 + 4, (uint64_t *)&__p);
        v32 = __p;
        v9[5] = v31;
        if (v32)
        {
          v33 = (void *)v32[1];
          if (v33)
          {
            v32[2] = v33;
            operator delete(v33);
          }
          operator delete(v32);
        }
      }
      else
      {
        *v30 = v26;
        v9[5] = v30 + 1;
      }
      v37 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, void (*)(const void **, void *, int, void *, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD *))(*(_QWORD *)v9[2] + 64))(v9[2], v26[1], *(unsigned int *)v26, 0, BBULogIOABP::cbReadLogs, v26);
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          goto LABEL_34;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          goto LABEL_34;
      }
      if (gBBULogVerbosity >= 6)
        _BBULog(2, 6, "BBULogIOABP", "", "readLogsAsync returned %#x\n", v34, v35, v36, v37);
LABEL_34:
      v38 = operator new(0x28uLL);
      v39 = v83;
      *(_DWORD *)v38 = v83;
      v38[2] = 0;
      v38[3] = 0;
      v38[1] = 0;
      if ((_DWORD)v39)
      {
        v40 = (char *)operator new(v39);
        v38[1] = v40;
        v41 = &v40[v39];
        v38[3] = &v40[v39];
        bzero(v40, v39);
        v38[2] = v41;
      }
      v38[4] = _Block_copy(aBlock);
      __p = v38;
      v42 = (_QWORD *)v9[5];
      if ((unint64_t)v42 >= v9[6])
      {
        v43 = std::vector<std::unique_ptr<BBULogIOABP::ABPBuffer>>::__push_back_slow_path<std::unique_ptr<BBULogIOABP::ABPBuffer>>(v9 + 4, (uint64_t *)&__p);
        v44 = __p;
        v9[5] = v43;
        if (v44)
        {
          v45 = (void *)v44[1];
          if (v45)
          {
            v44[2] = v45;
            operator delete(v45);
          }
          operator delete(v44);
        }
      }
      else
      {
        *v42 = v38;
        v9[5] = v42 + 1;
      }
      v49 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, void (*)(const void **, void *, int, void *, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD *))(*(_QWORD *)v9[2] + 64))(v9[2], v38[1], *(unsigned int *)v38, 0, BBULogIOABP::cbReadLogs, v38);
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          goto LABEL_46;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          goto LABEL_46;
      }
      if (gBBULogVerbosity >= 6)
        _BBULog(2, 6, "BBULogIOABP", "", "readLogsAsync returned %#x\n", v46, v47, v48, v49);
LABEL_46:
      v50 = operator new(0x28uLL);
      v51 = v83;
      *(_DWORD *)v50 = v83;
      v50[2] = 0;
      v50[3] = 0;
      v50[1] = 0;
      if ((_DWORD)v51)
      {
        v52 = (char *)operator new(v51);
        v50[1] = v52;
        v53 = &v52[v51];
        v50[3] = &v52[v51];
        bzero(v52, v51);
        v50[2] = v53;
      }
      v50[4] = _Block_copy(aBlock);
      __p = v50;
      v54 = (_QWORD *)v9[5];
      if ((unint64_t)v54 >= v9[6])
      {
        v55 = std::vector<std::unique_ptr<BBULogIOABP::ABPBuffer>>::__push_back_slow_path<std::unique_ptr<BBULogIOABP::ABPBuffer>>(v9 + 4, (uint64_t *)&__p);
        v56 = __p;
        v9[5] = v55;
        if (v56)
        {
          v57 = (void *)v56[1];
          if (v57)
          {
            v56[2] = v57;
            operator delete(v57);
          }
          operator delete(v56);
        }
      }
      else
      {
        *v54 = v50;
        v9[5] = v54 + 1;
      }
      v61 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, void (*)(const void **, void *, int, void *, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD *))(*(_QWORD *)v9[2] + 64))(v9[2], v50[1], *(unsigned int *)v50, 0, BBULogIOABP::cbReadLogs, v50);
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          goto LABEL_58;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          goto LABEL_58;
      }
      if (gBBULogVerbosity >= 6)
        _BBULog(2, 6, "BBULogIOABP", "", "readLogsAsync returned %#x\n", v58, v59, v60, v61);
LABEL_58:
      v62 = operator new(0x28uLL);
      v63 = v83;
      *(_DWORD *)v62 = v83;
      v62[2] = 0;
      v62[3] = 0;
      v62[1] = 0;
      if ((_DWORD)v63)
      {
        v64 = (char *)operator new(v63);
        v62[1] = v64;
        v65 = &v64[v63];
        v62[3] = &v64[v63];
        bzero(v64, v63);
        v62[2] = v65;
      }
      v62[4] = _Block_copy(aBlock);
      __p = v62;
      v66 = (_QWORD *)v9[5];
      if ((unint64_t)v66 >= v9[6])
      {
        v67 = std::vector<std::unique_ptr<BBULogIOABP::ABPBuffer>>::__push_back_slow_path<std::unique_ptr<BBULogIOABP::ABPBuffer>>(v9 + 4, (uint64_t *)&__p);
        v68 = __p;
        v9[5] = v67;
        if (v68)
        {
          v69 = (void *)v68[1];
          if (v69)
          {
            v68[2] = v69;
            operator delete(v69);
          }
          operator delete(v68);
        }
      }
      else
      {
        *v66 = v62;
        v9[5] = v66 + 1;
      }
      v73 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, void (*)(const void **, void *, int, void *, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD *))(*(_QWORD *)v9[2] + 64))(v9[2], v62[1], *(unsigned int *)v62, 0, BBULogIOABP::cbReadLogs, v62);
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
          goto LABEL_68;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
        {
LABEL_68:
          if (gBBULogVerbosity >= 6)
            _BBULog(2, 6, "BBULogIOABP", "", "readLogsAsync returned %#x\n", v70, v71, v72, v73);
        }
      }
      (*(void (**)(char *, _QWORD))(*(_QWORD *)((char *)v9 + *(_QWORD *)(*v9 - 80)) + 56))((char *)v9 + *(_QWORD *)(*v9 - 80), 2 * v83);
      *((_BYTE *)v9 + *(_QWORD *)(*v9 - 80) + 56) = 1;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          return;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          return;
      }
      if (gBBULogVerbosity >= 6)
      {
        v74 = "Succeed to enable\n";
        v75 = 2;
        v76 = 6;
LABEL_74:
        _BBULog(v75, v76, "BBULogIOABP", "", v74, v14, v15, v16, a9);
        return;
      }
      return;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v24 = *(_QWORD *)gBBULogMaskGet(void)::sBBULogMask;
    v25 = gBBULogVerbosity;
    if ((v23 & 1) != 0)
      goto LABEL_19;
  }
  if ((v24 & 2) != 0
    && v25 >= 6
    && (_BBULog(1, 6, "BBULogIOABP", "", "check failed: %s, %d, assertion: %s\n", v14, v15, v16, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBULogIOABP.cpp"), gBBULogMaskGet(void)::once != -1))
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_112;
  }
  else if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
  {
    goto LABEL_112;
  }
  if (gBBULogVerbosity >= 1)
  {
    v77 = "failed to getLogInternalBufferSize... will use %lu bytes.\n";
    v80 = v83;
    goto LABEL_111;
  }
LABEL_112:
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      return;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      return;
  }
  if (gBBULogVerbosity >= 1)
  {
    v74 = "Failed to enable\n";
    v75 = 1;
    v76 = 1;
    goto LABEL_74;
  }
}

void sub_212ABBBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *__p)
{
  void *v18;

  if (__p)
  {
    v18 = (void *)__p[1];
    if (v18)
    {
      __p[2] = v18;
      operator delete(v18);
    }
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11BBULogIOABP6enableEv_block_invoke_2(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  char v9;
  const char *v10;

  if (a2 == -469794816)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
        return;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
        return;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      v10 = "baseband reset detected\n";
      goto LABEL_7;
    }
  }
  else
  {
    v9 = a2;
    if (a2 == -469794815)
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          return;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          return;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        v10 = "baseband alive detected\n";
LABEL_7:
        _BBULog(2, 0, "BBULogIOABP", "", v10, a6, a7, a8, a9);
      }
    }
    else
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          return;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          return;
      }
      if (gBBULogVerbosity >= 6)
        _BBULog(2, 6, "BBULogIOABP", "", "reset message type: %x\n", a6, a7, a8, v9);
    }
  }
}

void sResetDetectCallback(void (**a1)(_QWORD, _QWORD), unsigned int a2, uint64_t a3, void *a4)
{
  if (a1)
  {
    a1[2](a1, a3);
    _Block_release(a1);
  }
}

void `virtual thunk to'BBULogIOABP::enable(BBULogIOABP *this)
{
  char *v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  v2 = *((_QWORD *)v1 + 3);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN11BBULogIOABP6enableEv_block_invoke;
  block[3] = &__block_descriptor_tmp_38;
  block[4] = v1;
  dispatch_async(v2, block);
}

void BBULogIOABP::disable(BBULogIOABP *this)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];
  dispatch_object_t object;

  v2 = dispatch_group_create();
  dispatch_group_enter(v2);
  v3 = *((_QWORD *)this + 3);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 1174405120;
  v8[2] = ___ZN11BBULogIOABP7disableEv_block_invoke;
  v8[3] = &__block_descriptor_tmp_42;
  v8[4] = this;
  object = v2;
  if (v2)
    dispatch_retain(v2);
  dispatch_async(v3, v8);
  dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
  if (*((_QWORD *)this + 2))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
        goto LABEL_6;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
      {
LABEL_6:
        if (gBBULogVerbosity >= 6)
          _BBULog(2, 6, "BBULogIOABP", "", "closing ABPControlObj\n", v4, v5, v6, v8[0]);
      }
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2));
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (object)
    dispatch_release(object);
  if (v2)
    dispatch_release(v2);
}

void sub_212ABC000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  NSObject *v14;

  if (object)
  {
    dispatch_release(object);
    if (!v14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  dispatch_release(v14);
  _Unwind_Resume(exception_object);
}

void ___ZN11BBULogIOABP7disableEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *__p;
  _QWORD aBlock[5];
  dispatch_object_t object;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + *(_QWORD *)(*(_QWORD *)v2 - 80) + 56) && *(_QWORD *)(v2 + 16))
  {
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN11BBULogIOABP7disableEv_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_41;
    v3 = *(NSObject **)(a1 + 40);
    aBlock[4] = v2;
    object = v3;
    if (v3)
      dispatch_retain(v3);
    *(_BYTE *)(v2 + 80) = 1;
    v4 = operator new(0x28uLL);
    *(_DWORD *)v4 = 0;
    v4[2] = 0;
    v4[3] = 0;
    v4[1] = 0;
    v4[4] = _Block_copy(aBlock);
    __p = v4;
    v5 = *(_QWORD **)(v2 + 40);
    if ((unint64_t)v5 >= *(_QWORD *)(v2 + 48))
    {
      v6 = std::vector<std::unique_ptr<BBULogIOABP::ABPBuffer>>::__push_back_slow_path<std::unique_ptr<BBULogIOABP::ABPBuffer>>((_QWORD *)(v2 + 32), (uint64_t *)&__p);
      v7 = __p;
      *(_QWORD *)(v2 + 40) = v6;
      if (v7)
      {
        v8 = (void *)v7[1];
        if (v8)
        {
          v7[2] = v8;
          operator delete(v8);
        }
        operator delete(v7);
      }
    }
    else
    {
      *v5 = v4;
      *(_QWORD *)(v2 + 40) = v5 + 1;
    }
    if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD, uint64_t, void (*)(const void **, void *, int, void *, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD *))(**(_QWORD **)(v2 + 16) + 64))(*(_QWORD *)(v2 + 16), v4[1], *(unsigned int *)v4, 1, BBULogIOABP::cbReadLogs, v4))
    {
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
    }
    if (object)
      dispatch_release(object);
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
}

void sub_212ABC188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, dispatch_object_t object)
{
  std::unique_ptr<BBULogIOABP::ABPBuffer>::~unique_ptr[abi:ne180100](&a10);
  if (object)
    dispatch_release(object);
  _Unwind_Resume(a1);
}

uint64_t ___ZN11BBULogIOABP7disableEv_block_invoke_2(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  NSObject *v3;
  _QWORD v5[5];
  dispatch_object_t object;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(NSObject **)(a1 + 40);
  v3 = *(NSObject **)(v2 + 24);
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 1174405120;
  v5[2] = ___ZN11BBULogIOABP7disableEv_block_invoke_3;
  v5[3] = &__block_descriptor_tmp_40;
  v5[4] = v2;
  object = v1;
  if (v1)
    dispatch_retain(v1);
  dispatch_async(v3, v5);
  if (object)
    dispatch_release(object);
  return 1;
}

void ___ZN11BBULogIOABP7disableEv_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  char v10;

  v9 = *(_QWORD **)(a1 + 32);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_5;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(2, 0, "BBULogIOABP", "", "last readLogBlock callback\n", a6, a7, a8, v10);
LABEL_5:
  *((_BYTE *)v9 + *(_QWORD *)(*v9 - 80) + 56) = 0;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void `virtual thunk to'BBULogIOABP::disable(BBULogIOABP *this)
{
  BBULogIOABP::disable((BBULogIOABP *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)));
}

void BBULogCircularBuffer::~BBULogCircularBuffer(BBULogCircularBuffer *this)
{
  void *v2;

  *(_QWORD *)this = &unk_24CE81220;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &unk_24CE81220;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  operator delete(this);
}

void `virtual thunk to'BBULogCircularBuffer::~BBULogCircularBuffer(BBULogCircularBuffer *this)
{
  _QWORD *v1;
  void *v2;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32));
  *v1 = &unk_24CE81220;
  v2 = (void *)v1[4];
  if (v2)
  {
    v1[5] = v2;
    operator delete(v2);
  }
}

{
  _QWORD *v1;
  void *v2;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32));
  *v1 = &unk_24CE81220;
  v2 = (void *)v1[4];
  if (v2)
  {
    v1[5] = v2;
    operator delete(v2);
  }
  operator delete(v1);
}

_QWORD *std::vector<std::unique_ptr<BBULogIOABP::ABPBuffer>>::__push_back_slow_path<std::unique_ptr<BBULogIOABP::ABPBuffer>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
      goto LABEL_33;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v10 -= v18;
    v19 = &v15[-v18];
    v20 = v15 - 16;
    v21 = &v9[8 * v3 - 16];
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v20 - 1);
      v23 = *(_OWORD *)v20;
      *((_OWORD *)v20 - 1) = 0uLL;
      *(_OWORD *)v20 = 0uLL;
      *((_OWORD *)v21 - 1) = v24;
      *(_OWORD *)v21 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_33:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      v28 = (_QWORD *)*((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        v29 = (void *)v27[1];
        if (v29)
        {
          v27[2] = v29;
          operator delete(v29);
        }
        operator delete(v27);
      }
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

uint64_t BBUICEProgrammer::BBUICEProgrammer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  capabilities::programmer *v8;
  capabilities::programmer *v9;
  void *exception;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  *(_QWORD *)a1 = off_24CE84B60;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 40;
  *(_QWORD *)(a1 + 48) = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 67, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBUProgrammer.cpp", 0xB4u, (ctu::LogMessageBuffer *)"Assertion failure(transport && \"BBU telephony util transport error.\")", v12, v13, v14, v25);
  }
  *(_QWORD *)a1 = off_24CE81128;
  v5 = capabilities::programmer::connectAttemptCount((capabilities::programmer *)a1);
  if (HIDWORD(v5))
  {
    v15 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v15, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICEProgrammer.cpp", 0xCu, (ctu::LogMessageBuffer *)"Assertion failure(capabilities::programmer::connectAttemptCount() <= std::numeric_limits<UInt32>::max() && \"capabilities::programmer::connectAttemptCount() exceeds maximum allowable value\")", v16, v17, v18, v25);
    goto LABEL_10;
  }
  v6 = capabilities::programmer::connectTimeout((capabilities::programmer *)v5);
  if (v6 >= 0x100000000)
  {
    v15 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v15, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICEProgrammer.cpp", 0xDu, (ctu::LogMessageBuffer *)"Assertion failure(capabilities::programmer::connectTimeout().count() <= std::numeric_limits<UInt32>::max() && \"capabilities::programmer::connectTimeout().count() exceeds maximum allowable value\")", v19, v20, v21, v25);
    goto LABEL_10;
  }
  v7 = capabilities::programmer::commandTimeout((capabilities::programmer *)v6);
  if (v7 >= 0x100000000)
  {
    v15 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v15, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICEProgrammer.cpp", 0xEu, (ctu::LogMessageBuffer *)"Assertion failure(capabilities::programmer::commandTimeout().count() <= std::numeric_limits<UInt32>::max() && \"capabilities::programmer::commandTimeout().count() exceeds maximum allowable value\")", v22, v23, v24, v25);
LABEL_10:
  }
  v8 = (capabilities::programmer *)capabilities::programmer::connectAttemptCount((capabilities::programmer *)v7);
  *(_DWORD *)(a1 + 68) = (_DWORD)v8;
  v9 = (capabilities::programmer *)capabilities::programmer::connectTimeout(v8);
  *(_DWORD *)(a1 + 72) = (_DWORD)v9;
  *(_DWORD *)(a1 + 76) = capabilities::programmer::commandTimeout(v9);
  *(_BYTE *)(a1 + 80) = 0;
  return a1;
}

void sub_212ABC728(_Unwind_Exception *a1)
{
  BBUProgrammer *v1;
  void *v2;

  __cxa_free_exception(v2);
  BBUProgrammer::~BBUProgrammer(v1);
  _Unwind_Resume(a1);
}

void sub_212ABC74C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::list<BBUProgrammer::Item *>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_212ABC760(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t *v2;

  __cxa_free_exception(v1);
  std::list<BBUProgrammer::Item *>::~list(v2);
  _Unwind_Resume(a1);
}

void sub_212ABC77C(_Unwind_Exception *a1)
{
  BBUProgrammer *v1;

  BBUProgrammer::~BBUProgrammer(v1);
  _Unwind_Resume(a1);
}

void sub_212ABC790(_Unwind_Exception *a1)
{
  BBUProgrammer *v1;

  BBUProgrammer::~BBUProgrammer(v1);
  _Unwind_Resume(a1);
}

void sub_212ABC7A4(_Unwind_Exception *a1)
{
  BBUProgrammer *v1;

  BBUProgrammer::~BBUProgrammer(v1);
  _Unwind_Resume(a1);
}

void sub_212ABC7B8(_Unwind_Exception *a1)
{
  BBUProgrammer *v1;

  BBUProgrammer::~BBUProgrammer(v1);
  _Unwind_Resume(a1);
}

void sub_212ABC7CC(_Unwind_Exception *a1)
{
  BBUProgrammer *v1;

  BBUProgrammer::~BBUProgrammer(v1);
  _Unwind_Resume(a1);
}

void BBUICEProgrammer::~BBUICEProgrammer(BBUICEProgrammer *this)
{
  char *v2;
  uint64_t i;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  *(_QWORD *)this = off_24CE84B60;
  v2 = (char *)this + 40;
  for (i = *((_QWORD *)this + 6); (char *)i != v2; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_QWORD *)(i + 16);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*((_QWORD *)this + 7))
  {
    v6 = *((_QWORD *)this + 5);
    v5 = (char *)*((_QWORD *)this + 6);
    v7 = *(_QWORD *)v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    *((_QWORD *)this + 7) = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (char *)*((_QWORD *)v5 + 1);
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
}

{
  char *v2;
  uint64_t i;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  *(_QWORD *)this = off_24CE84B60;
  v2 = (char *)this + 40;
  for (i = *((_QWORD *)this + 6); (char *)i != v2; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_QWORD *)(i + 16);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*((_QWORD *)this + 7))
  {
    v6 = *((_QWORD *)this + 5);
    v5 = (char *)*((_QWORD *)this + 6);
    v7 = *(_QWORD *)v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    *((_QWORD *)this + 7) = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (char *)*((_QWORD *)v5 + 1);
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
}

{
  char *v2;
  uint64_t i;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  *(_QWORD *)this = off_24CE84B60;
  v2 = (char *)this + 40;
  for (i = *((_QWORD *)this + 6); (char *)i != v2; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_QWORD *)(i + 16);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*((_QWORD *)this + 7))
  {
    v6 = *((_QWORD *)this + 5);
    v5 = (char *)*((_QWORD *)this + 6);
    v7 = *(_QWORD *)v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    *((_QWORD *)this + 7) = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (char *)*((_QWORD *)v5 + 1);
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  operator delete(this);
}

uint64_t BBUICEProgrammer::enableStepThroughImages(uint64_t this)
{
  *(_BYTE *)(this + 80) = 1;
  return this;
}

uint64_t BBUICEProgrammer::getConnectTries(BBUICEProgrammer *this)
{
  return *((unsigned int *)this + 17);
}

uint64_t BBUICEProgrammer::getConnectTimeout(BBUICEProgrammer *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t BBUICEProgrammer::getCommandTimeout(BBUICEProgrammer *this)
{
  return *((unsigned int *)this + 19);
}

void BBUICEProgrammer::gatherPersonalizationParameters(BBUICEProgrammer *this, BOOL a2, BOOL a3, unsigned int *a4, BBUPersonalizationParameters *a5)
{
  void *exception;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  exception = __cxa_allocate_exception(0x210uLL);
  _BBUException::_BBUException((uint64_t)exception, 68, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICEProgrammer.cpp", 0x36u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Error in gathering personalization parameters.\")", v6, v7, v8, v9);
}

void sub_212ABCA48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void BBUICEProgrammer::program()
{
  void *exception;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  exception = __cxa_allocate_exception(0x210uLL);
  _BBUException::_BBUException((uint64_t)exception, 68, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICEProgrammer.cpp", 0x3Du, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Programmer failure.\")", v1, v2, v3, v4);
}

void sub_212ABCAA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUProgrammer::load()
{
  return 9;
}

uint64_t BBUProgrammer::eraseEFS(BBUProgrammer *this)
{
  return 0;
}

uint64_t BBUProgrammer::collectCoreDump()
{
  return 0;
}

{
  return 0;
}

uint64_t BBUICEProgrammer::getEFSEraseIndicated(BBUICEProgrammer *this)
{
  return 0;
}

void BBUProgrammer::getHashVerifiedFiles(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

_QWORD *BBULogCircularBuffer::clearLog(_QWORD *this)
{
  this[1] = 0;
  this[3] = this[2];
  return this;
}

_QWORD *`virtual thunk to'BBULogCircularBuffer::clearLog(_QWORD *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*this - 24));
  v1[1] = 0;
  v1[3] = v1[2];
  return this;
}

uint64_t BBULogCircularBuffer::log(BBULogCircularBuffer *this, const char *a2, size_t a3)
{
  BOOL v3;
  uint64_t v4;
  size_t v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  size_t v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  BOOL v15;
  size_t v16;
  size_t v17;
  size_t v18;
  unint64_t v19;
  size_t v20;

  if (a2)
    v3 = a3 == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (!v3 && *((_BYTE *)this + 56))
  {
    v7 = *((_QWORD *)this + 1);
    v6 = *((_QWORD *)this + 2);
    v8 = a3 - v6;
    if (a3 < v6)
      v8 = 0;
    v9 = &a2[v8];
    if (v6 >= a3)
      v10 = a3;
    else
      v10 = *((_QWORD *)this + 2);
    v11 = v6 - v7;
    v12 = (void *)(*((_QWORD *)this + 4) + v7);
    if (v10 <= v6 - v7)
    {
      memcpy(v12, &a2[v8], v10);
    }
    else
    {
      memcpy(v12, &a2[v8], v11);
      v13 = *((_QWORD *)this + 3);
      v14 = *((_QWORD *)this + 4);
      v15 = v13 >= v11;
      v16 = v13 - v11;
      if (!v15)
        v16 = 0;
      *((_QWORD *)this + 3) = v16;
      v17 = (*((_QWORD *)this + 1) + v11) % *((_QWORD *)this + 2);
      *((_QWORD *)this + 1) = v17;
      memcpy((void *)(v14 + v17), &v9[v11], v10 - v11);
      v10 -= v11;
    }
    v19 = *((_QWORD *)this + 2);
    v18 = *((_QWORD *)this + 3);
    v15 = v18 >= v10;
    v20 = v18 - v10;
    if (!v15)
      v20 = 0;
    *((_QWORD *)this + 3) = v20;
    *((_QWORD *)this + 1) = (*((_QWORD *)this + 1) + v10) % v19;
  }
  return v4;
}

uint64_t `virtual thunk to'BBULogCircularBuffer::log(BBULogCircularBuffer *this, const char *a2, size_t a3)
{
  BOOL v3;
  uint64_t v4;
  char *v5;
  size_t v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  size_t v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  BOOL v15;
  size_t v16;
  size_t v17;
  size_t v18;
  unint64_t v19;
  size_t v20;

  if (a2)
    v3 = a3 == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (!v3)
  {
    v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 40);
    if (v5[56])
    {
      v7 = *((_QWORD *)v5 + 1);
      v6 = *((_QWORD *)v5 + 2);
      v8 = a3 - v6;
      if (a3 < v6)
        v8 = 0;
      v9 = &a2[v8];
      if (v6 >= a3)
        v10 = a3;
      else
        v10 = *((_QWORD *)v5 + 2);
      v11 = v6 - v7;
      v12 = (void *)(*((_QWORD *)v5 + 4) + v7);
      if (v10 <= v6 - v7)
      {
        memcpy(v12, &a2[v8], v10);
      }
      else
      {
        memcpy(v12, &a2[v8], v11);
        v13 = *((_QWORD *)v5 + 3);
        v14 = *((_QWORD *)v5 + 4);
        v15 = v13 >= v11;
        v16 = v13 - v11;
        if (!v15)
          v16 = 0;
        *((_QWORD *)v5 + 3) = v16;
        v17 = (*((_QWORD *)v5 + 1) + v11) % *((_QWORD *)v5 + 2);
        *((_QWORD *)v5 + 1) = v17;
        memcpy((void *)(v14 + v17), &v9[v11], v10 - v11);
        v10 -= v11;
      }
      v19 = *((_QWORD *)v5 + 2);
      v18 = *((_QWORD *)v5 + 3);
      v15 = v18 >= v10;
      v20 = v18 - v10;
      if (!v15)
        v20 = 0;
      *((_QWORD *)v5 + 3) = v20;
      *((_QWORD *)v5 + 1) = (*((_QWORD *)v5 + 1) + v10) % v19;
    }
  }
  return v4;
}

uint64_t BBULogCircularBuffer::enable(uint64_t this)
{
  *(_BYTE *)(this + 56) = 1;
  return this;
}

_QWORD *`virtual thunk to'BBULogCircularBuffer::enable(_QWORD *this)
{
  *((_BYTE *)this + *(_QWORD *)(*this - 48) + 56) = 1;
  return this;
}

uint64_t BBULogCircularBuffer::disable(uint64_t this)
{
  *(_BYTE *)(this + 56) = 0;
  return this;
}

_QWORD *`virtual thunk to'BBULogCircularBuffer::disable(_QWORD *this)
{
  *((_BYTE *)this + *(_QWORD *)(*this - 56) + 56) = 0;
  return this;
}

uint64_t BBULogCircularBuffer::getLogAsStringStreamSharedRef@<X0>(BBULogCircularBuffer *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  _QWORD *v5;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x118uLL);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  *a2 = v4;
  v5 = operator new(0x20uLL);
  *v5 = off_24CE81298;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v4;
  a2[1] = v5;
  if (!*((_QWORD *)this + 3))
    std::ostream::write();
  if (*((_QWORD *)this + 1))
    std::ostream::write();
  return (**(uint64_t (***)(BBULogCircularBuffer *))this)(this);
}

void sub_212ABCDE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_212ABCE00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212ABCE14(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'BBULogCircularBuffer::getLogAsStringStreamSharedRef@<X0>(BBULogCircularBuffer *this@<X0>, _QWORD *a2@<X8>)
{
  return BBULogCircularBuffer::getLogAsStringStreamSharedRef((BBULogCircularBuffer *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 64)), a2);
}

void BBULogCircularBuffer::resize(BBULogCircularBuffer *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;

  if (*((_BYTE *)this + 56))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return;
    }
    if (gBBULogVerbosity >= 6)
      goto LABEL_42;
  }
  else
  {
    if (*((_QWORD *)this + 2) < a2)
    {
      v11 = (char *)*((_QWORD *)this + 4);
      v10 = (char *)*((_QWORD *)this + 5);
      v12 = v10 - v11;
      if (a2 <= v10 - v11)
      {
        if (a2 < v10 - v11)
          *((_QWORD *)this + 5) = &v11[a2];
        goto LABEL_33;
      }
      v13 = *((_QWORD *)this + 6);
      if (v13 - (uint64_t)v10 >= a2 - (v10 - v11))
      {
        bzero(*((void **)this + 5), a2 - (v10 - v11));
        *((_QWORD *)this + 5) = &v11[a2];
LABEL_33:
        *((_QWORD *)this + 2) = a2;
        *((_QWORD *)this + 3) = a2;
        *((_QWORD *)this + 1) = 0;
        return;
      }
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = v13 - (_QWORD)v11;
      v15 = 2 * v14;
      if (2 * v14 <= a2)
        v15 = a2;
      if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      v17 = (char *)operator new(v16);
      v18 = &v17[v12];
      v19 = &v17[v16];
      bzero(&v17[v12], a2 - (v10 - v11));
      if (v10 == v11)
      {
LABEL_31:
        *((_QWORD *)this + 4) = v18;
        *((_QWORD *)this + 5) = &v17[a2];
        *((_QWORD *)this + 6) = v19;
        if (v10)
          operator delete(v10);
        goto LABEL_33;
      }
      if (v12 >= 8 && (unint64_t)(v11 - v17) >= 0x20)
      {
        if (v12 < 0x20)
        {
          v20 = 0;
          goto LABEL_23;
        }
        v20 = v12 & 0xFFFFFFFFFFFFFFE0;
        v21 = v10 - 16;
        v22 = &v17[v10 - 16 - v11];
        v23 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v24 = *(_OWORD *)v21;
          *((_OWORD *)v22 - 1) = *((_OWORD *)v21 - 1);
          *(_OWORD *)v22 = v24;
          v22 -= 32;
          v21 -= 32;
          v23 -= 32;
        }
        while (v23);
        if (v12 == v20)
          goto LABEL_30;
        if ((v12 & 0x18) != 0)
        {
LABEL_23:
          v18 -= v12 & 0xFFFFFFFFFFFFFFF8;
          v25 = &v10[-v20 - 8];
          v26 = (char *)(v25 - v11);
          v27 = v20 - (v12 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v28 = *(_QWORD *)v25;
            v25 -= 8;
            *(_QWORD *)&v26[(_QWORD)v17] = v28;
            v26 -= 8;
            v27 += 8;
          }
          while (v27);
          v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
          if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_30;
          goto LABEL_28;
        }
        v18 -= v20;
        v10 -= v20;
      }
LABEL_28:
      v29 = v18 - 1;
      do
      {
        v30 = *--v10;
        *v29-- = v30;
      }
      while (v10 != v11);
LABEL_30:
      v10 = v11;
      v18 = v17;
      goto LABEL_31;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return;
    }
    if (gBBULogVerbosity >= 6)
LABEL_42:
      _BBULog(1, 6, "BBULogCircularBuffer", "", "check failed: %s, %d, assertion: %s\n", a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBULogCircularBuffer.cpp");
  }
}

void `virtual thunk to'BBULogCircularBuffer::resize(BBULogCircularBuffer *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BBULogCircularBuffer::resize((BBULogCircularBuffer *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 72)), a2, a3, a4, a5, a6, a7, a8);
}

void std::__shared_ptr_pointer<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>> *,std::shared_ptr<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>>::__shared_ptr_default_delete<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>,std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>> *,std::shared_ptr<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>>::__shared_ptr_default_delete<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>,std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>> *,std::shared_ptr<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>>::__shared_ptr_default_delete<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>,std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B53A0DLL)
    return a1 + 24;
  if (((v3 & 0x8000000212B53A0DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B53A0DLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B53A0DLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t BBUICEUpdateSource::containsFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v6;
  size_t v7;
  unint64_t v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  std::string __dst;
  void *__p[2];
  std::string::size_type v21;

  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    return BBUZipFile::containsFile(v4, (_QWORD *)a2);
  v6 = *(char *)(a1 + 103);
  if (v6 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 103);
  else
    v7 = *(_QWORD *)(a1 + 88);
  v8 = v7 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7 + 1;
    if (!v7)
      goto LABEL_17;
  }
  if (v6 >= 0)
    v12 = (const void *)(a1 + 80);
  else
    v12 = *(const void **)(a1 + 80);
  memmove(p_dst, v12, v7);
LABEL_17:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v7) = 47;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v21 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = ctu::fs::file_exists();
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v18;
LABEL_27:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return v18;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_27;
  return v18;
}

void sub_212ABD39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void BBUICEUpdateSource::listFiles(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::string::size_type v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *i;
  uint64_t v15;
  std::string::size_type v16;
  std::string::size_type size;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *p_p;
  size_t v21;
  void **p_dst;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  int v29;
  void **v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  BOOL v38;
  _QWORD *v39;
  std::string *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  void *v44;
  size_t v45;
  void **v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  _QWORD *v53;
  std::string *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  __int128 v59;
  _QWORD *v60;
  std::string *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  void **__dst;
  size_t v68;
  int64_t v69;
  std::string __p;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;

  v71 = (uint64_t)&v71;
  v72 = &v71;
  v73 = 0;
  if (*(_QWORD *)(a1 + 64))
  {
    BBUZipFile::getFileList(*(BBUZipFile **)(a1 + 64), &__p);
    if (v73)
    {
      v5 = v71;
      v6 = v72;
      v7 = *v72;
      *(_QWORD *)(v7 + 8) = *(_QWORD *)(v71 + 8);
      **(_QWORD **)(v5 + 8) = v7;
      v73 = 0;
      if (v6 != &v71)
      {
        do
        {
          v12 = (uint64_t *)v6[1];
          if (*((char *)v6 + 39) < 0)
            operator delete((void *)v6[2]);
          operator delete(v6);
          v6 = v12;
        }
        while (v12 != &v71);
      }
    }
    v8 = __p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v10 = *(_QWORD *)__p.__r_.__value_.__l.__size_;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8);
      **(_QWORD **)(v9 + 8) = v10;
      v11 = v71;
      *(_QWORD *)(v71 + 8) = *((_QWORD *)&v9 + 1);
      **((_QWORD **)&v9 + 1) = v11;
      *(_QWORD *)(v9 + 8) = &v71;
      v71 = v9;
      v73 += v8;
    }
  }
  else
  {
    BBUpdaterCommon::BBUReadDirectory((const char *)(a1 + 80), &v71);
  }
  v13 = a3[23];
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)a3 + 1);
  if (v13)
  {
    for (i = v72; i != &v71; i = (uint64_t *)i[1])
    {
      memset(&__p, 170, sizeof(__p));
      if (*((char *)i + 39) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)i[2], i[3]);
      else
        __p = *(std::string *)(i + 2);
      v15 = a3[23];
      if ((char)a3[23] < 0)
      {
        v16 = *((_QWORD *)a3 + 1);
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_22:
          if (v16 > size)
            continue;
          v18 = size;
LABEL_26:
          if ((v15 & 0x80) != 0)
          {
            v19 = v18 - *((_QWORD *)a3 + 1);
            if ((size & 0x80) == 0)
              goto LABEL_28;
          }
          else
          {
            v19 = v18 - v15;
            if ((size & 0x80) == 0)
            {
LABEL_28:
              if (v19 > size)
                goto LABEL_114;
              p_p = &__p;
              v21 = size - v19;
              if (size - v19 >= 0x7FFFFFFFFFFFFFF8)
                goto LABEL_115;
              goto LABEL_34;
            }
          }
          size = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ < v19)
LABEL_114:
            std::string::__throw_out_of_range[abi:ne180100]();
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          v21 = __p.__r_.__value_.__l.__size_ - v19;
          if (__p.__r_.__value_.__l.__size_ - v19 >= 0x7FFFFFFFFFFFFFF8)
LABEL_115:
            std::string::__throw_length_error[abi:ne180100]();
LABEL_34:
          if (v21 >= 0x17)
          {
            v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v21 | 7) != 0x17)
              v23 = v21 | 7;
            v24 = v23 + 1;
            p_dst = (void **)operator new(v23 + 1);
            v68 = v21;
            v69 = v24 | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v69) = v21;
            p_dst = (void **)&__dst;
            if (size == v19)
            {
LABEL_41:
              v25 = 0;
              *((_BYTE *)p_dst + v21) = 0;
              v26 = a3[23];
              if ((v26 & 0x80u) == 0)
                v27 = a3[23];
              else
                v27 = *((_QWORD *)a3 + 1);
              v28 = HIBYTE(v69);
              v29 = SHIBYTE(v69);
              if (v69 < 0)
                v28 = v68;
              if (v27 == v28)
              {
                if (v69 >= 0)
                  v30 = (void **)&__dst;
                else
                  v30 = __dst;
                if ((v26 & 0x80) != 0)
                {
                  v25 = memcmp(*(const void **)a3, v30, *((_QWORD *)a3 + 1)) == 0;
                  if (v29 < 0)
                    goto LABEL_63;
                }
                else
                {
                  if (a3[23])
                  {
                    v31 = v26 - 1;
                    v32 = a3;
                    do
                    {
                      v34 = *v32++;
                      v33 = v34;
                      v36 = *(unsigned __int8 *)v30;
                      v30 = (void **)((char *)v30 + 1);
                      v35 = v36;
                      v38 = v31-- != 0;
                      v25 = v33 == v35;
                    }
                    while (v33 == v35 && v38);
                    goto LABEL_58;
                  }
                  v25 = 1;
                  if (SHIBYTE(v69) < 0)
                  {
LABEL_63:
                    operator delete(__dst);
                    if (!v25)
                    {
LABEL_64:
                      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        continue;
                      goto LABEL_15;
                    }
                    goto LABEL_60;
                  }
                }
              }
              else
              {
LABEL_58:
                if (SHIBYTE(v69) < 0)
                  goto LABEL_63;
              }
              if (!v25)
                goto LABEL_64;
LABEL_60:
              v39 = operator new(0x28uLL);
              v40 = (std::string *)(v39 + 2);
              *v39 = 0;
              v39[1] = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v40, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              }
              else
              {
                *(_OWORD *)&v40->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                v39[4] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              }
              v41 = *a2;
              *v39 = *a2;
              v39[1] = a2;
              *(_QWORD *)(v41 + 8) = v39;
              *a2 = (uint64_t)v39;
              ++a2[2];
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                continue;
              goto LABEL_15;
            }
          }
          memmove(p_dst, (char *)p_p + v19, v21);
          goto LABEL_41;
        }
      }
      else
      {
        v16 = a3[23];
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_22;
      }
      v18 = __p.__r_.__value_.__l.__size_;
      if (v16 <= __p.__r_.__value_.__l.__size_)
        goto LABEL_26;
LABEL_15:
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else if (&v71 != a2)
  {
    v42 = v72;
    v43 = (uint64_t *)a2[1];
    if (v72 != &v71 && v43 != a2)
    {
      do
      {
        if (v43 != v42)
        {
          v47 = (void **)(v43 + 2);
          v48 = *((_BYTE *)v42 + 39);
          if (*((char *)v43 + 39) < 0)
          {
            if (v48 >= 0)
              v44 = v42 + 2;
            else
              v44 = (void *)v42[2];
            if (v48 >= 0)
              v45 = *((unsigned __int8 *)v42 + 39);
            else
              v45 = v42[3];
            std::string::__assign_no_alias<false>(v47, v44, v45);
          }
          else if ((*((_BYTE *)v42 + 39) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v47, (void *)v42[2], v42[3]);
          }
          else
          {
            v49 = *((_OWORD *)v42 + 1);
            v43[4] = v42[4];
            *(_OWORD *)v47 = v49;
          }
        }
        v42 = (uint64_t *)v42[1];
        v43 = (uint64_t *)v43[1];
      }
      while (v42 != &v71 && v43 != a2);
    }
    if (v43 == a2)
    {
      if (v42 != &v71)
      {
        v53 = operator new(0x28uLL);
        v54 = (std::string *)(v53 + 2);
        *v53 = 0;
        v53[1] = 0;
        if (*((char *)v42 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(v54, (const std::string::value_type *)v42[2], v42[3]);
        }
        else
        {
          v55 = *((_OWORD *)v42 + 1);
          v53[4] = v42[4];
          *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v55;
        }
        v56 = v42[1];
        v57 = 1;
        if ((uint64_t *)v56 == &v71)
        {
          v60 = v53;
        }
        else
        {
          v58 = v53;
          do
          {
            v60 = operator new(0x28uLL);
            *v60 = v58;
            v60[1] = 0;
            v61 = (std::string *)(v60 + 2);
            if (*(char *)(v56 + 39) < 0)
            {
              std::string::__init_copy_ctor_external(v61, *(const std::string::value_type **)(v56 + 16), *(_QWORD *)(v56 + 24));
            }
            else
            {
              v59 = *(_OWORD *)(v56 + 16);
              v60[4] = *(_QWORD *)(v56 + 32);
              *(_OWORD *)&v61->__r_.__value_.__l.__data_ = v59;
            }
            v58[1] = v60;
            ++v57;
            v56 = *(_QWORD *)(v56 + 8);
            v58 = v60;
          }
          while ((uint64_t *)v56 != &v71);
        }
        v62 = *a2;
        *(_QWORD *)(v62 + 8) = v53;
        *v53 = v62;
        *a2 = (uint64_t)v60;
        v60[1] = a2;
        a2[2] += v57;
      }
    }
    else
    {
      v50 = *a2;
      v51 = *v43;
      *(_QWORD *)(v51 + 8) = *(_QWORD *)(*a2 + 8);
      **(_QWORD **)(v50 + 8) = v51;
      do
      {
        v52 = (uint64_t *)v43[1];
        --a2[2];
        if (*((char *)v43 + 39) < 0)
          operator delete((void *)v43[2]);
        operator delete(v43);
        v43 = v52;
      }
      while (v52 != a2);
    }
  }
  if (v73)
  {
    v63 = v71;
    v64 = v72;
    v65 = *v72;
    *(_QWORD *)(v65 + 8) = *(_QWORD *)(v71 + 8);
    **(_QWORD **)(v63 + 8) = v65;
    v73 = 0;
    if (v64 != &v71)
    {
      do
      {
        v66 = (uint64_t *)v64[1];
        if (*((char *)v64 + 39) < 0)
          operator delete((void *)v64[2]);
        operator delete(v64);
        v64 = v66;
      }
      while (v66 != &v71);
    }
  }
}

void sub_212ABD9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  void *v16;

  operator delete(v16);
  std::list<std::string>::~list(&a16);
  _Unwind_Resume(a1);
}

void sub_212ABD9E8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  void **v16;
  void *v17;
  void **v19;

  operator delete(v17);
  __cxa_begin_catch(a1);
  while (1)
  {
    v19 = (void **)*v16;
    if (*((char *)v16 + 39) < 0)
      operator delete(v16[2]);
    operator delete(v16);
    v16 = v19;
    if (!v19)
      __cxa_rethrow();
  }
}

void sub_212ABDA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  void *v19;

  operator delete(v19);
  if (a18 < 0)
    operator delete(__p);
  std::list<std::string>::~list(&a19);
  _Unwind_Resume(a1);
}

_QWORD *BBUICEUpdateSource::createDataSource(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  size_t v14;
  unint64_t v15;
  std::string *p_dst;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string __dst;
  void *__p[2];
  std::string::size_type v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v6 = *(_QWORD *)(a1 + 64);
  if (!v6)
  {
    v13 = *(char *)(a1 + 103);
    if (v13 >= 0)
      v14 = *(unsigned __int8 *)(a1 + 103);
    else
      v14 = *(_QWORD *)(a1 + 88);
    v15 = v14 + 1;
    memset(&__dst, 170, sizeof(__dst));
    if (v14 + 1 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v15 >= 0x17)
    {
      v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v17 = v15 | 7;
      v18 = v17 + 1;
      p_dst = (std::string *)operator new(v17 + 1);
      __dst.__r_.__value_.__l.__size_ = v14 + 1;
      __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14 + 1;
      if (!v14)
        goto LABEL_26;
    }
    if (v13 >= 0)
      v19 = (const void *)(a1 + 80);
    else
      v19 = *(const void **)(a1 + 80);
    memmove(p_dst, v19, v14);
LABEL_26:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v14) = 47;
    v20 = *(char *)(a2 + 23);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)a2;
    else
      v21 = *(const std::string::value_type **)a2;
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a2 + 23);
    else
      v22 = *(_QWORD *)(a2 + 8);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v28 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v10 = operator new(0x30uLL);
    *v10 = off_24CE7FC78;
    *(_OWORD *)(v10 + 1) = 0u;
    *(_OWORD *)(v10 + 3) = 0u;
    if (BBUFileDataSource::init((uint64_t)v10, (const char *)__p, a3))
    {
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
      v10 = 0;
    }
    if (SHIBYTE(v28) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v10;
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return v10;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    return v10;
  }
  v7 = *(std::__shared_weak_count **)(a1 + 72);
  v29 = *(_QWORD *)(a1 + 64);
  v30 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = operator new(0x38uLL);
  *v10 = off_24CE81588;
  v10[1] = v6;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  if (BBUZipDataSource::init((uint64_t)v10, (_QWORD *)a2, a3))
  {
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    v10 = 0;
  }
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v10;
}

void sub_212ABDD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUICEUpdateSource::saveFile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::ios_base *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  size_t v33;
  void **p_dst;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  size_t v41;
  void **v42;
  uint64_t v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  void *exception;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  void **__dst;
  size_t v54;
  int64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  void *__p[2];
  __int128 v62;
  unint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  std::__shared_weak_count *v75;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICEUpdateSource.cpp", 0x58u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Error: BBU firmware data error!\")", v49, v50, v51, v52);
  }
  if (!BBUZipFile::containsFile(v4, (_QWORD *)a2))
    return 35;
  v8 = *(_QWORD *)(a1 + 64);
  v7 = *(std::__shared_weak_count **)(a1 + 72);
  v74 = v8;
  v75 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = operator new(0x38uLL);
  *v11 = off_24CE81588;
  v11[1] = v8;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  if (BBUZipDataSource::init((uint64_t)v11, (_QWORD *)a2, 0))
  {
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    v11 = 0;
  }
  if (!v7)
    goto LABEL_12;
  v12 = (unint64_t *)&v7->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
  {
LABEL_12:
    if (v11)
      goto LABEL_13;
    return 35;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!v11)
    return 35;
LABEL_13:
  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v63 = 0xAAAAAAAAAAAAAAAALL;
  v73 = v14;
  v72 = v14;
  v71 = v14;
  v70 = v14;
  v69 = v14;
  v68 = v14;
  v67 = v14;
  v66 = v14;
  v65 = v14;
  v62 = v14;
  *(_OWORD *)__p = v14;
  v60 = v14;
  v59 = v14;
  v58 = v14;
  v57 = v14;
  v15 = MEMORY[0x24BEDB870];
  v16 = MEMORY[0x24BEDB870] + 64;
  v64 = MEMORY[0x24BEDB870] + 64;
  v17 = (uint64_t *)MEMORY[0x24BEDB800];
  v18 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v56 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v56 + *(_QWORD *)(v56 - 24)) = v18;
  v19 = (std::ios_base *)((char *)&v56 + *(_QWORD *)(v56 - 24));
  std::ios_base::init(v19, &v57);
  v19[1].__vftable = 0;
  v19[1].__fmtflags_ = -1;
  v56 = v15 + 24;
  v64 = v16;
  std::streambuf::basic_streambuf();
  v20 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v57 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v62 = 0u;
  LODWORD(v63) = 16;
  v21 = *(char *)(a3 + 23);
  if (v21 >= 0)
    v22 = a3;
  else
    v22 = *(_QWORD *)a3;
  if (v21 >= 0)
    v23 = *(unsigned __int8 *)(a3 + 23);
  else
    v23 = *(_QWORD *)(a3 + 8);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, v22, v23);
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"/", 1);
  v26 = *(char *)(a2 + 23);
  if (v26 >= 0)
    v27 = a2;
  else
    v27 = *(_QWORD *)a2;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(a2 + 23);
  else
    v28 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_47;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_47;
  }
  if (gBBULogVerbosity < 0)
    goto LABEL_47;
  v32 = (const char *)(**(uint64_t (***)(uint64_t))a1)(a1);
  if ((v63 & 0x10) != 0)
  {
    v36 = *((_QWORD *)&v62 + 1);
    if (*((_QWORD *)&v62 + 1) < (unint64_t)v60)
    {
      *((_QWORD *)&v62 + 1) = v60;
      v36 = v60;
    }
    v37 = (const void *)*((_QWORD *)&v59 + 1);
    v33 = v36 - *((_QWORD *)&v59 + 1);
    if ((unint64_t)(v36 - *((_QWORD *)&v59 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_69;
  }
  else
  {
    if ((v63 & 8) == 0)
    {
      v33 = 0;
      HIBYTE(v55) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_43;
    }
    v37 = (const void *)v58;
    v33 = v59 - v58;
    if ((_QWORD)v59 - (_QWORD)v58 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_69:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v33 >= 0x17)
  {
    v38 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v38 = v33 | 7;
    v39 = v38 + 1;
    p_dst = (void **)operator new(v38 + 1);
    v54 = v33;
    v55 = v39 | 0x8000000000000000;
    __dst = p_dst;
    v20 = MEMORY[0x24BEDB848];
  }
  else
  {
    HIBYTE(v55) = v33;
    p_dst = (void **)&__dst;
    if (!v33)
      goto LABEL_43;
  }
  memmove(p_dst, v37, v33);
LABEL_43:
  *((_BYTE *)p_dst + v33) = 0;
  v40 = (void **)&__dst;
  if (v55 < 0)
    LOBYTE(v40) = (_BYTE)__dst;
  _BBULog(3, 0, v32, "", "Saving %s\n", v29, v30, v31, (char)v40);
  if (SHIBYTE(v55) < 0)
    operator delete(__dst);
LABEL_47:
  if ((v63 & 0x10) != 0)
  {
    v43 = *((_QWORD *)&v62 + 1);
    if (*((_QWORD *)&v62 + 1) < (unint64_t)v60)
    {
      *((_QWORD *)&v62 + 1) = v60;
      v43 = v60;
    }
    v44 = (const void *)*((_QWORD *)&v59 + 1);
    v41 = v43 - *((_QWORD *)&v59 + 1);
    if ((unint64_t)(v43 - *((_QWORD *)&v59 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_67;
  }
  else
  {
    if ((v63 & 8) == 0)
    {
      v41 = 0;
      HIBYTE(v55) = 0;
      v42 = (void **)&__dst;
      goto LABEL_60;
    }
    v44 = (const void *)v58;
    v41 = v59 - v58;
    if ((_QWORD)v59 - (_QWORD)v58 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_67:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v41 >= 0x17)
  {
    v45 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17)
      v45 = v41 | 7;
    v46 = v45 + 1;
    v42 = (void **)operator new(v45 + 1);
    v54 = v41;
    v55 = v46 | 0x8000000000000000;
    __dst = v42;
  }
  else
  {
    HIBYTE(v55) = v41;
    v42 = (void **)&__dst;
    if (!v41)
      goto LABEL_60;
  }
  memmove(v42, v44, v41);
LABEL_60:
  *((_BYTE *)v42 + v41) = 0;
  v35 = (*(uint64_t (**)(_QWORD *, void ***, _QWORD))(*v11 + 48))(v11, &__dst, 0);
  if (SHIBYTE(v55) < 0)
    operator delete(__dst);
  (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  v56 = *v17;
  *(uint64_t *)((char *)&v56 + *(_QWORD *)(v56 - 24)) = v17[3];
  *(_QWORD *)&v57 = v20 + 16;
  if (SBYTE7(v62) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v64);
  return v35;
}

