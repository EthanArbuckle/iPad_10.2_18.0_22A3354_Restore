void sub_212ABE2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t BBUICEUpdateSource::saveImages(BBUICEUpdateSource *this)
{
  const char *v2;
  unint64_t v3;
  timespec v4;
  char *v5;
  const char *v6;
  int v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  void *v11;
  void **v12;
  void **v13;
  _BYTE *v14;
  BOOL v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void *exception;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void *__dst[3];
  stat v37;
  void *__src[5];

  if (!*((_QWORD *)this + 8))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICEUpdateSource.cpp", 0x72u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Error: BBU firmware data error!\")", v28, v29, v30, v35);
  }
  memset(__src, 170, 24);
  capabilities::radio::personalizedFirmwarePath(this);
  if (SHIBYTE(__src[2]) < 0)
  {
    if (__src[1])
    {
      v2 = (const char *)__src[0];
      goto LABEL_7;
    }
LABEL_75:
    v31 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v31, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICEUpdateSource.cpp", 0x75u, (ctu::LogMessageBuffer *)"Assertion failure(folder.empty() != true && \"Failed finding the bbfw path.\")", v32, v33, v34, v35);
  }
  if (!HIBYTE(__src[2]))
    goto LABEL_75;
  v2 = (const char *)__src;
LABEL_7:
  BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Saving image to %s", v2);
  v3 = 0;
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v37.st_blksize = v4;
  *(timespec *)v37.st_qspare = v4;
  v37.st_birthtimespec = v4;
  *(timespec *)&v37.st_size = v4;
  v37.st_mtimespec = v4;
  v37.st_ctimespec = v4;
  *(timespec *)&v37.st_uid = v4;
  v37.st_atimespec = v4;
  *(timespec *)&v37.st_dev = v4;
  while (1)
  {
    v6 = SHIBYTE(__src[2]) >= 0 ? (const char *)__src : (const char *)__src[0];
    v7 = stat(v6, &v37);
    v8 = 0;
    if (v3 == -1 || !v7)
      break;
    v9 = HIBYTE(__src[2]);
    v10 = (char *)__src[1];
    if (SHIBYTE(__src[2]) >= 0)
      v11 = (void *)HIBYTE(__src[2]);
    else
      v11 = __src[1];
    if ((unint64_t)v11 <= v3
      || ((v12 = (void **)__src[0], SHIBYTE(__src[2]) >= 0) ? (v13 = __src) : (v13 = (void **)__src[0]),
          (v14 = memchr((char *)v13 + v3, 47, (size_t)v11 - v3), v5 = (char *)(v14 - (_BYTE *)v13), v14)
        ? (v15 = v5 + 1 == 0)
        : (v15 = 1),
          v15))
    {
      if ((v9 & 0x80) != 0)
      {
        if (!v10)
        {
LABEL_8:
          v5 = 0;
          goto LABEL_9;
        }
        memset(__dst, 170, sizeof(__dst));
        v5 = v10;
        v12 = (void **)__src[0];
        v9 = (size_t)v10;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_59;
      }
      else
      {
        if (!(_DWORD)v9)
          goto LABEL_8;
        v5 = (char *)v9;
        memset(__dst, 170, sizeof(__dst));
        v12 = __src;
      }
    }
    else
    {
      if (!v5)
        goto LABEL_9;
      memset(__dst, 170, sizeof(__dst));
      if ((v9 & 0x80) != 0)
      {
        if (v10 >= v5)
          v9 = (size_t)v5;
        else
          v9 = (size_t)v10;
        if (v9 >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_59;
      }
      else
      {
        v12 = __src;
        if (v9 >= (unint64_t)v5)
          v9 = (size_t)v5;
        if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_59:
          std::string::__throw_length_error[abi:ne180100]();
      }
    }
    if (v9 >= 0x17)
    {
      v17 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v17 = v9 | 7;
      v18 = v17 + 1;
      v16 = (void **)operator new(v17 + 1);
      __dst[1] = (void *)v9;
      __dst[2] = (void *)(v18 | 0x8000000000000000);
      __dst[0] = v16;
    }
    else
    {
      HIBYTE(__dst[2]) = v9;
      v16 = __dst;
      if (!v9)
        goto LABEL_45;
    }
    memmove(v16, v12, v9);
LABEL_45:
    *((_BYTE *)v16 + v9) = 0;
    if (SHIBYTE(__dst[2]) >= 0)
      v19 = (const char *)__dst;
    else
      v19 = (const char *)__dst[0];
    if (stat(v19, &v37))
    {
      v20 = SHIBYTE(__dst[2]) >= 0 ? (const char *)__dst : (const char *)__dst[0];
      if (mkdir(v20, 0x1EDu))
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
          {
LABEL_62:
            if ((gBBULogVerbosity & 0x80000000) == 0)
            {
              v21 = (const char *)(**(uint64_t (***)(BBUICEUpdateSource *))this)(this);
              v25 = __dst;
              if (SHIBYTE(__dst[2]) < 0)
                LOBYTE(v25) = __dst[0];
              _BBULog(3, 0, v21, "", "Failed to create path %s", v22, v23, v24, (char)v25);
            }
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
            goto LABEL_62;
        }
        if (SHIBYTE(__dst[2]) < 0)
          operator delete(__dst[0]);
        v8 = 35;
        break;
      }
    }
    if (SHIBYTE(__dst[2]) < 0)
    {
      operator delete(__dst[0]);
      v3 = (unint64_t)(v5 + 1);
    }
    else
    {
LABEL_9:
      v3 = (unint64_t)(v5 + 1);
    }
  }
  if (SHIBYTE(__src[2]) < 0)
    operator delete(__src[0]);
  return v8;
}

void sub_212ABE758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 - 97) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 - 97) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v15 - 120));
  _Unwind_Resume(exception_object);
}

uint64_t BBUICEUpdateSource::cleanupFirmwareImage(uint64_t a1, uint64_t a2)
{
  void *v4;
  size_t v5;
  unint64_t v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  const char *v16;
  void **v17;
  char v18;
  void **v19;
  BBUFeedback *v20;
  int v21;
  int *v22;
  char *v23;
  void *exception;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  std::string __dst;
  void *__p[2];
  int64_t v36;
  void *v37[3];

  if (!*(_QWORD *)(a1 + 64))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICEUpdateSource.cpp", 0x9Bu, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Error: BBU firmware data error!\")", v26, v27, v28, v33);
  }
  memset(v37, 170, sizeof(v37));
  capabilities::radio::personalizedFirmwarePath((capabilities::radio *)a1);
  if ((SHIBYTE(v37[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v37[2]))
    {
      v4 = v37[1];
      goto LABEL_6;
    }
LABEL_44:
    v29 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v29, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICEUpdateSource.cpp", 0xA0u, (ctu::LogMessageBuffer *)"Assertion failure(dirPath.empty() != true && \"Failed finding the bbfw path.\")", v30, v31, v32, v33);
  }
  v4 = v37[1];
  if (!v37[1])
    goto LABEL_44;
LABEL_6:
  if (SHIBYTE(v37[2]) >= 0)
    v5 = HIBYTE(v37[2]);
  else
    v5 = (size_t)v4;
  v6 = v5 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v6 >= 0x17)
  {
    v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v8 = v6 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5 + 1;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5 + 1;
    if (!v5)
      goto LABEL_20;
  }
  if (SHIBYTE(v37[2]) >= 0)
    v10 = v37;
  else
    v10 = (void **)v37[0];
  memmove(p_dst, v10, v5);
LABEL_20:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v5) = 47;
  v11 = *(char *)(a2 + 23);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)a2;
  else
    v12 = *(const std::string::value_type **)a2;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  v14 = std::string::append(&__dst, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v36 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (*(char *)(a2 + 23) >= 0)
    v16 = (const char *)a2;
  else
    v16 = *(const char **)a2;
  v17 = v37;
  if (SHIBYTE(v37[2]) < 0)
    v17 = (void **)v37[0];
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Removing Firmware image [%s] in path [%s]\n", v16, (const char *)v17);
  v18 = HIBYTE(v36);
  if (v36 >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  if (unlink((const char *)v19))
  {
    v20 = *(BBUFeedback **)(a1 + 8);
    v21 = *__error();
    v22 = __error();
    v23 = strerror(*v22);
    BBUFeedback::handleComment(v20, "Unable to remove Firmware image [%s]. Error[%d][%s]\n", (const char *)v19, v21, v23);
    v18 = HIBYTE(v36);
  }
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v37[2]) & 0x80000000) == 0)
      return 0;
LABEL_42:
    operator delete(v37[0]);
    return 0;
  }
  if (SHIBYTE(v37[2]) < 0)
    goto LABEL_42;
  return 0;
}

void sub_212ABEA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BBUICEUpdateSource::saveFirmwareImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  void **v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  void *exception;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void *__dst[2];
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void *__p[2];
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  void *v58[4];

  if (!*(_QWORD *)(a1 + 64))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICEUpdateSource.cpp", 0xB1u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Error: BBU firmware data error!\")", v34, v35, v36, v37);
  }
  memset(v58, 170, 24);
  capabilities::radio::personalizedFirmwarePath((capabilities::radio *)a1);
  if ((SHIBYTE(v58[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v58[2]))
      goto LABEL_4;
LABEL_21:
    v22 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v22, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICEUpdateSource.cpp", 0xB8u, (ctu::LogMessageBuffer *)"Assertion failure(dirPath.empty() != true && \"Failed finding the bbfw path.\")", v23, v24, v25, v37);
  }
  if (!v58[1])
    goto LABEL_21;
LABEL_4:
  v4 = BBUICEUpdateSource::saveImages((BBUICEUpdateSource *)a1);
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47 = 0xAAAAAAAAAAAAAAAALL;
  v57 = v5;
  v56 = v5;
  v55 = v5;
  v54 = v5;
  v53 = v5;
  v52 = v5;
  v51 = v5;
  v50 = v5;
  v49 = v5;
  *(_OWORD *)__p = v5;
  v46 = v5;
  v43 = v5;
  v44 = v5;
  v41 = v5;
  v42 = v5;
  v6 = MEMORY[0x24BEDB870];
  v7 = MEMORY[0x24BEDB870] + 64;
  v48 = MEMORY[0x24BEDB870] + 64;
  v8 = (uint64_t *)MEMORY[0x24BEDB800];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v40 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v40 + *(_QWORD *)(v40 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v40 + *(_QWORD *)(v40 - 24));
  std::ios_base::init(v10, &v41);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v40 = v6 + 24;
  v48 = v7;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v41 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v46 = 0u;
  LODWORD(v47) = 16;
  if (SHIBYTE(v58[2]) >= 0)
    v12 = v58;
  else
    v12 = (void **)v58[0];
  if (SHIBYTE(v58[2]) >= 0)
    v13 = HIBYTE(v58[2]);
  else
    v13 = (uint64_t)v58[1];
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)v12, v13);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/", 1);
  v16 = *(char *)(a2 + 23);
  if (v16 >= 0)
    v17 = a2;
  else
    v17 = *(_QWORD *)a2;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a2 + 23);
  else
    v18 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
  if ((_DWORD)v4)
    goto LABEL_40;
  v19 = *(_QWORD *)(a1 + 64);
  if ((v47 & 0x10) != 0)
  {
    v26 = *((_QWORD *)&v46 + 1);
    if (*((_QWORD *)&v46 + 1) < (unint64_t)v44)
    {
      *((_QWORD *)&v46 + 1) = v44;
      v26 = v44;
    }
    v27 = (const void *)*((_QWORD *)&v43 + 1);
    v20 = v26 - *((_QWORD *)&v43 + 1);
    if ((unint64_t)(v26 - *((_QWORD *)&v43 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_46;
  }
  else
  {
    if ((v47 & 8) == 0)
    {
      v20 = 0;
      HIBYTE(v39) = 0;
      v21 = __dst;
      goto LABEL_32;
    }
    v27 = (const void *)v42;
    v20 = v43 - v42;
    if ((_QWORD)v43 - (_QWORD)v42 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_46:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v20 >= 0x17)
  {
    v28 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v28 = v20 | 7;
    v29 = v28 + 1;
    v21 = (void **)operator new(v28 + 1);
    __dst[1] = (void *)v20;
    v39 = v29 | 0x8000000000000000;
    __dst[0] = v21;
    v11 = MEMORY[0x24BEDB848];
  }
  else
  {
    HIBYTE(v39) = v20;
    v21 = __dst;
    if (!v20)
      goto LABEL_32;
  }
  memmove(v21, v27, v20);
LABEL_32:
  *((_BYTE *)v21 + v20) = 0;
  v4 = BBUZipFile::saveDataToFile(v19, (uint64_t)__dst);
  if (SHIBYTE(v39) < 0)
    operator delete(__dst[0]);
  if (*(char *)(a2 + 23) >= 0)
    v30 = (const char *)a2;
  else
    v30 = *(const char **)a2;
  v31 = (const char *)v58;
  if (SHIBYTE(v58[2]) < 0)
    v31 = (const char *)v58[0];
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Saving Firmware image [%s] in path [%s]\n", v30, v31);
LABEL_40:
  v40 = *v8;
  *(uint64_t *)((char *)&v40 + *(_QWORD *)(v40 - 24)) = v8[3];
  *(_QWORD *)&v41 = v11 + 16;
  if (SBYTE7(v46) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v48);
  if (SHIBYTE(v58[2]) < 0)
    operator delete(v58[0]);
  return v4;
}

void sub_212ABEEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;

  if (a16 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a17);
  if (*(char *)(v17 - 89) < 0)
    operator delete(*(void **)(v17 - 112));
  _Unwind_Resume(a1);
}

void BBUICEUpdateSource::loadProvisioningData(BBUICEUpdateSource *this)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t *v36;
  unint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *exception;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  std::string v56;
  std::string v57;
  std::string v58;
  _OWORD v59[2];

  memset(v59, 170, 24);
  *((_BYTE *)&v58.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v58, "provisioning/");
  v2 = std::string::append(&v58, "info.plist", 0xAuLL);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  *(_QWORD *)&v59[1] = *((_QWORD *)&v2->__r_.__value_.__l + 2);
  v59[0] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  memset(&v58, 170, sizeof(v58));
  *((_BYTE *)&v57.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v57, "provisioning/");
  v4 = std::string::append(&v57, "puk.pem", 7uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  *((_BYTE *)&v56.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v56, "provisioning/");
  v6 = std::string::append(&v56, "manifest.bin", 0xCuLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  v8 = *((_QWORD *)this + 8);
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICEUpdateSource.cpp", 0xD2u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"BBU firmware data error.\")", v43, v44, v45, v55);
    goto LABEL_75;
  }
  *((_BYTE *)&v56.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v56, "provisioning/");
  if (BBUZipFile::containsFile(v8, &v56))
    *((_BYTE *)this + 120) = 1;
  if (BBUZipFile::containsFile(*((_QWORD *)this + 8), v59))
  {
    if (*((_QWORD *)this + 16))
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICEUpdateSource.cpp", 0xDDu, (ctu::LogMessageBuffer *)"Assertion failure(fProvisioningDictSource == __null)", v46, v47, v48, v55);
      goto LABEL_75;
    }
    v10 = *((_QWORD *)this + 8);
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = operator new(0x38uLL);
    *v13 = off_24CE81588;
    v13[1] = v10;
    v13[4] = 0;
    v13[5] = 0;
    v13[3] = 0;
    if (BBUZipDataSource::init((uint64_t)v13, v59, 0))
    {
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
      v13 = 0;
    }
    *((_QWORD *)this + 16) = v13;
    if (v9)
    {
      v14 = (unint64_t *)&v9->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_26;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_26;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      v16 = (const char *)(**(uint64_t (***)(BBUICEUpdateSource *))this)(this);
      _BBULog(3, 0, v16, "", "Loaded provisioning dictionary\n", v17, v18, v19, v55);
    }
  }
LABEL_26:
  if (!BBUZipFile::containsFile(*((_QWORD *)this + 8), &v58))
    goto LABEL_42;
  if (*((_QWORD *)this + 17))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICEUpdateSource.cpp", 0xE7u, (ctu::LogMessageBuffer *)"Assertion failure(fProvisioningPublicKeySource == __null)", v49, v50, v51, v55);
    goto LABEL_75;
  }
  v21 = *((_QWORD *)this + 8);
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = operator new(0x38uLL);
  *v24 = off_24CE81588;
  v24[1] = v21;
  v24[4] = 0;
  v24[5] = 0;
  v24[3] = 0;
  if (BBUZipDataSource::init((uint64_t)v24, &v58, 0))
  {
    (*(void (**)(_QWORD *))(*v24 + 8))(v24);
    v24 = 0;
  }
  *((_QWORD *)this + 17) = v24;
  if (v20)
  {
    v25 = (unint64_t *)&v20->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_42;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_42;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v27 = (const char *)(**(uint64_t (***)(BBUICEUpdateSource *))this)(this);
    _BBULog(3, 0, v27, "", "Loaded public key source\n", v28, v29, v30, v55);
  }
LABEL_42:
  if (!BBUZipFile::containsFile(*((_QWORD *)this + 8), &v57))
    goto LABEL_58;
  if (*((_QWORD *)this + 18))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICEUpdateSource.cpp", 0xF0u, (ctu::LogMessageBuffer *)"Assertion failure(fProvisioningManifestSource == __null)", v52, v53, v54, v55);
LABEL_75:
  }
  v32 = *((_QWORD *)this + 8);
  v31 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v31)
  {
    v33 = (unint64_t *)&v31->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = operator new(0x38uLL);
  *v35 = off_24CE81588;
  v35[1] = v32;
  v35[4] = 0;
  v35[5] = 0;
  v35[3] = 0;
  if (BBUZipDataSource::init((uint64_t)v35, &v57, 0))
  {
    (*(void (**)(_QWORD *))(*v35 + 8))(v35);
    v35 = 0;
  }
  *((_QWORD *)this + 18) = v35;
  if (v31)
  {
    v36 = (unint64_t *)&v31->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_58;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_58;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v38 = (const char *)(**(uint64_t (***)(BBUICEUpdateSource *))this)(this);
    _BBULog(3, 0, v38, "", "Loaded provisioning manifest\n", v39, v40, v41, v55);
  }
LABEL_58:
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_60:
      if ((SBYTE7(v59[1]) & 0x80000000) == 0)
        return;
LABEL_64:
      operator delete(*(void **)&v59[0]);
      return;
    }
  }
  else if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_60;
  }
  operator delete(v58.__r_.__value_.__l.__data_);
  if (SBYTE7(v59[1]) < 0)
    goto LABEL_64;
}

void sub_212ABF59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  uint64_t v28;

  __cxa_free_exception(v27);
  if (a27 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 73) < 0)
    operator delete(*(void **)(v28 - 96));
  if (*(char *)(v28 - 41) < 0)
    operator delete(*(void **)(v28 - 64));
  _Unwind_Resume(a1);
}

uint64_t BBUICEUpdateSource::copyProvisioningData(uint64_t a1, int a2, BBUMatureProvisioningData **a3)
{
  BBUDataSource *v5;
  BBUMatureProvisioningData *v6;
  void *exception;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (a2 != 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 70, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICEUpdateSource.cpp", 0x105u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized provisioning support type.\")", v9, v10, v11, v12);
  }
  v5 = *(BBUDataSource **)(a1 + 136);
  if (!v5 && !*(_QWORD *)(a1 + 144))
    return 0;
  v6 = (BBUMatureProvisioningData *)operator new(0x18uLL);
  BBUMatureProvisioningData::BBUMatureProvisioningData(v6, v5, *(BBUDataSource **)(a1 + 144));
  *a3 = v6;
  return 1;
}

void sub_212ABF718(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212ABF72C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUICEUpdateSource::getFusingSource(BBUICEUpdateSource *this)
{
  uint64_t v2;
  int v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *exception;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char __p[20];
  char v25;

  v2 = *((_QWORD *)this + 8);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICEUpdateSource.cpp", 0x10Eu, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"BBU firmware data error.\")", v17, v18, v19, v23);
    goto LABEL_26;
  }
  v3 = *((_DWORD *)this + 26);
  if ((v3 & 4) != 0)
    return *((_QWORD *)this + 14);
  *((_DWORD *)this + 26) = v3 | 4;
  v25 = 19;
  strcpy(__p, "fusingprogram.plist");
  if (!BBUZipFile::containsFile(v2, __p))
    return *((_QWORD *)this + 14);
  if (*((_QWORD *)this + 14))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICEUpdateSource.cpp", 0x116u, (ctu::LogMessageBuffer *)"Assertion failure(fFusingSource == __null)", v20, v21, v22, aFusingprogramP[0]);
LABEL_26:
  }
  v5 = *((_QWORD *)this + 8);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v25 = 19;
  strcpy(__p, "fusingprogram.plist");
  v8 = operator new(0x38uLL);
  *v8 = off_24CE81588;
  v8[1] = v5;
  v8[4] = 0;
  v8[5] = 0;
  v8[3] = 0;
  if (BBUZipDataSource::init((uint64_t)v8, __p, 0))
  {
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    v8 = 0;
  }
  *((_QWORD *)this + 14) = v8;
  if (v25 < 0)
    operator delete(*(void **)__p);
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      return *((_QWORD *)this + 14);
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      return *((_QWORD *)this + 14);
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v11 = (const char *)(**(uint64_t (***)(BBUICEUpdateSource *))this)(this);
    _BBULog(3, 0, v11, "", "Loaded Fusing program\n", v12, v13, v14, aFusingprogramP[0]);
  }
  return *((_QWORD *)this + 14);
}

void sub_212ABF98C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212ABF9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_212ABF9C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUICEUpdateSource::getManifestSource(BBUICEUpdateSource *this)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  char v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  char **v16;
  std::string *p_dst;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  int v25;
  int v26;
  size_t v27;
  unint64_t v28;
  std::string *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  char *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *exception;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  std::string::size_type v51;
  unsigned __int8 v52;
  std::string __dst;
  uint64_t v54;
  std::__shared_weak_count *v55;
  void *__p[2];
  std::string::size_type v57;

  v2 = *((_DWORD *)this + 26);
  if ((v2 & 1) != 0)
    return *((_QWORD *)this + 19);
  *((_DWORD *)this + 26) = v2 | 1;
  v3 = *((_QWORD *)this + 8);
  if (!v3)
  {
    v6 = *((_BYTE *)this + 103);
    if (v6 < 0)
    {
      if (!*((_QWORD *)this + 11))
        return *((_QWORD *)this + 19);
    }
    else if (!*((_BYTE *)this + 103))
    {
      return *((_QWORD *)this + 19);
    }
    if (v6 >= 0)
      v14 = *((unsigned __int8 *)this + 103);
    else
      v14 = *((_QWORD *)this + 11);
    v15 = v14 + 1;
    memset(&__dst, 170, sizeof(__dst));
    if (v14 + 1 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_91;
    v16 = (char **)((char *)this + 80);
    if (v15 >= 0x17)
    {
      v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v18 = v15 | 7;
      v19 = v18 + 1;
      p_dst = (std::string *)operator new(v18 + 1);
      __dst.__r_.__value_.__l.__size_ = v14 + 1;
      __dst.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14 + 1;
      if (!v14)
        goto LABEL_41;
    }
    if (v6 >= 0)
      v20 = (char *)this + 80;
    else
      v20 = *v16;
    memmove(p_dst, v20, v14);
LABEL_41:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v14) = 47;
    (*(void (**)(void **__return_ptr, BBUICEUpdateSource *))(*(_QWORD *)this + 56))(&v50, this);
    if ((v52 & 0x80u) == 0)
      v21 = (const std::string::value_type *)&v50;
    else
      v21 = (const std::string::value_type *)v50;
    if ((v52 & 0x80u) == 0)
      v22 = v52;
    else
      v22 = v51;
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v57 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = ctu::fs::file_exists();
    if (SHIBYTE(v57) < 0)
    {
      operator delete(__p[0]);
      if (((char)v52 & 0x80000000) == 0)
      {
LABEL_49:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_50;
        goto LABEL_54;
      }
    }
    else if (((char)v52 & 0x80000000) == 0)
    {
      goto LABEL_49;
    }
    operator delete(v50);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_50:
      if (!v25)
        return *((_QWORD *)this + 19);
      goto LABEL_55;
    }
LABEL_54:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!v25)
      return *((_QWORD *)this + 19);
LABEL_55:
    if (*((_QWORD *)this + 19))
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICEUpdateSource.cpp", 0x132u, (ctu::LogMessageBuffer *)"Assertion failure(fRootManifestSource == __null)", v47, v48, v49, (char)v50);
LABEL_94:
    }
    v26 = *((char *)this + 103);
    if (v26 >= 0)
      v27 = *((unsigned __int8 *)this + 103);
    else
      v27 = *((_QWORD *)this + 11);
    v28 = v27 + 1;
    memset(&__dst, 170, sizeof(__dst));
    if (v27 + 1 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v28 >= 0x17)
      {
        v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v28 | 7) != 0x17)
          v30 = v28 | 7;
        v31 = v30 + 1;
        v29 = (std::string *)operator new(v30 + 1);
        __dst.__r_.__value_.__l.__size_ = v27 + 1;
        __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        v29 = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v27 + 1;
        if (!v27)
          goto LABEL_70;
      }
      if (v26 >= 0)
        v32 = (char *)this + 80;
      else
        v32 = *v16;
      memmove(v29, v32, v27);
LABEL_70:
      *(_WORD *)((char *)&v29->__r_.__value_.__l.__data_ + v27) = 47;
      (*(void (**)(void **__return_ptr, BBUICEUpdateSource *))(*(_QWORD *)this + 56))(&v50, this);
      if ((v52 & 0x80u) == 0)
        v33 = (const std::string::value_type *)&v50;
      else
        v33 = (const std::string::value_type *)v50;
      if ((v52 & 0x80u) == 0)
        v34 = v52;
      else
        v34 = v51;
      v35 = std::string::append(&__dst, v33, v34);
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v57 = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      v37 = (char *)operator new(0x30uLL);
      *(_QWORD *)v37 = off_24CE7FC78;
      *(_OWORD *)(v37 + 8) = 0u;
      *(_OWORD *)(v37 + 24) = 0u;
      if (BBUFileDataSource::init((uint64_t)v37, (const char *)__p, 0))
      {
        (*(void (**)(char *))(*(_QWORD *)v37 + 8))(v37);
        v37 = 0;
      }
      *((_QWORD *)this + 19) = v37;
      if (SHIBYTE(v57) < 0)
      {
        operator delete(__p[0]);
        if (((char)v52 & 0x80000000) == 0)
        {
LABEL_80:
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_81;
          goto LABEL_88;
        }
      }
      else if (((char)v52 & 0x80000000) == 0)
      {
        goto LABEL_80;
      }
      operator delete(v50);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_81:
        if (gBBULogMaskGet(void)::once != -1)
          goto LABEL_89;
        goto LABEL_82;
      }
LABEL_88:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (gBBULogMaskGet(void)::once != -1)
        goto LABEL_89;
LABEL_82:
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        return *((_QWORD *)this + 19);
      goto LABEL_83;
    }
LABEL_91:
    std::string::__throw_length_error[abi:ne180100]();
  }
  (*(void (**)(void **__return_ptr, BBUICEUpdateSource *))(*(_QWORD *)this + 56))(__p, this);
  v4 = BBUZipFile::containsFile(v3, __p);
  v5 = v4;
  if (SHIBYTE(v57) < 0)
  {
    operator delete(__p[0]);
    if (!v5)
      return *((_QWORD *)this + 19);
  }
  else if (!v4)
  {
    return *((_QWORD *)this + 19);
  }
  if (*((_QWORD *)this + 19))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICEUpdateSource.cpp", 0x129u, (ctu::LogMessageBuffer *)"Assertion failure(fRootManifestSource == __null)", v44, v45, v46, (char)v50);
    goto LABEL_94;
  }
  v8 = *((_QWORD *)this + 8);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  v54 = v8;
  v55 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  (*(void (**)(void **__return_ptr, BBUICEUpdateSource *))(*(_QWORD *)this + 56))(__p, this);
  v11 = operator new(0x38uLL);
  *v11 = off_24CE81588;
  v11[1] = v8;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  if (BBUZipDataSource::init((uint64_t)v11, __p, 0))
  {
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    v11 = 0;
  }
  *((_QWORD *)this + 19) = v11;
  if (SHIBYTE(v57) < 0)
    operator delete(__p[0]);
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      return *((_QWORD *)this + 19);
    goto LABEL_83;
  }
LABEL_89:
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
    return *((_QWORD *)this + 19);
LABEL_83:
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v38 = (const char *)(**(uint64_t (***)(BBUICEUpdateSource *))this)(this);
    _BBULog(3, 0, v38, "", "Loaded Manifest\n", v39, v40, v41, (char)v50);
  }
  return *((_QWORD *)this + 19);
}

void sub_212ABFF78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212ABFF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(a15);
  goto LABEL_6;
}

uint64_t BBUICEUpdateSource::hasManifestSource(BBUICEUpdateSource *this)
{
  uint64_t result;
  uint64_t v3;
  void *__p[2];
  char v5;

  if ((*((_BYTE *)this + 104) & 1) != 0)
    return *((_QWORD *)this + 19) != 0;
  (*(void (**)(void **__return_ptr, BBUICEUpdateSource *))(*(_QWORD *)this + 56))(__p, this);
  result = BBUICEUpdateSource::containsFile((uint64_t)this, (uint64_t)__p);
  v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_212AC0118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BBUICEUpdateSource::getManifestFilename(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "bbticket.der");
}

uint64_t BBUICEUpdateSource::generateHash(BBUICEUpdateSource *this, unsigned __int8 *a2)
{
  uint64_t v2;
  const void *v4;
  _DWORD *v5;
  void *exception;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = *((_QWORD *)this + 8);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/ICE/BBUICEUpdateSource.cpp", 0x154u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"BBU firmware data error.\")", v8, v9, v10, v11);
  }
  v4 = *(const void **)(v2 + 144);
  v5 = operator new(0x18uLL);
  v5[4] = 0;
  *(_QWORD *)v5 = off_24CE84890;
  *((_QWORD *)v5 + 1) = v4;
  if (v4)
    CFRetain(v4);
  BBUDataSource::generateHash((uint64_t)v5, a2, 0);
  (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
  return 1;
}

void sub_212AC0220(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUICEUpdateSource::getProgrammerSource(BBUICEUpdateSource *this)
{
  return 0;
}

uint64_t BBUICEUpdateSource::getItems(BBUICEUpdateSource *this)
{
  return 0;
}

uint64_t BBUICEUpdateSource::validateBootupItems(BBUICEUpdateSource *this)
{
  return 0;
}

uint64_t BBUICEUpdateSource::copyHashData(BBUICEUpdateSource *this)
{
  return 0;
}

uint64_t BBUICEUpdateSource::validateCoredumpItems(BBUICEUpdateSource *this)
{
  return 0;
}

uint64_t BBUUpdateSource::eraseBasebandFilesystem(BBUUpdateSource *this)
{
  return 0;
}

uint64_t BBUEUR13Communication::freeTransportSync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  NSObject *v13;
  _QWORD block[6];
  char v15;

  v8 = *(_QWORD *)(a1 + 80);
  if (!v8)
    return 1;
  if (v8 != a2)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
        goto LABEL_5;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
      {
LABEL_5:
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(2, 0, "BBUEUR13Communication", "", "call with %p different from fTransportCreated(%p)\n", a6, a7, a8, a2);
      }
    }
    return 0;
  }
  v12 = TelephonyUtilTransportFree();
  v13 = *(NSObject **)(a1 + 72);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN21BBUEUR13Communication17freeTransportSyncEP26TelephonyUtilTransport_tag_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v15 = v12;
  block[4] = a1;
  block[5] = a2;
  dispatch_sync(v13, block);
  return v12;
}

void ___ZN21BBUEUR13Communication17freeTransportSyncEP26TelephonyUtilTransport_tag_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_BYTE *)(a1 + 48))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) = 0;
    return;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      return;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      return;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(2, 0, "BBUEUR13Communication", "", "fail to free transport: %p\n", a6, a7, a8, *(_QWORD *)(a1 + 40));
}

uint64_t BBUEUR13Communication::createTransport(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  void *exception;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD block[8];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  _QWORD v38[5];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  _QWORD v45[3];
  char v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;

  v47 = 0;
  v48 = &v47;
  v49 = 0x2000000000;
  v50 = 3;
  v45[0] = 0;
  v45[1] = v45;
  v45[2] = 0x2000000000;
  v46 = 0;
  v44 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42 = v9;
  v43 = v9;
  v40 = v9;
  v41 = v9;
  v39 = v9;
  TelephonyBasebandPCITransportInitParameters();
  if (*(_QWORD *)(a1 + 80))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 67, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Communication/Eureka/BBUEUR13Communication.cpp", 0x4Du, (ctu::LogMessageBuffer *)"Assertion failure(nullptr == fTransportCreated && \"Telephony transport error.\")", v21, v22, v23, v30);
    goto LABEL_26;
  }
  v13 = MEMORY[0x24BDAC760];
  v14 = *(_QWORD *)(a1 + 72);
  v38[0] = MEMORY[0x24BDAC760];
  v38[1] = 0x40000000;
  v38[2] = ___ZN21BBUEUR13Communication15createTransportEP26TelephonyUtilTransport_tag8BBUStagedbN16BBUCommunication17BasebandInterfaceE_block_invoke;
  v38[3] = &__block_descriptor_tmp_11;
  v38[4] = a2;
  *((_QWORD *)&v39 + 1) = v14;
  *(_QWORD *)&v40 = v38;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
    {
LABEL_4:
      if ((gBBULogVerbosity & 0x80000000) == 0)
        _BBULog(2, 0, "BBUEUR13Communication", "", "Creating transport:%p stage:%d interface:%d %f ms\n", v10, v11, v12, a2);
    }
  }
  switch(a3)
  {
    case 1:
    case 16:
      v15 = 2;
      LODWORD(v39) = 2;
      v16 = 2000;
      goto LABEL_16;
    case 2:
      v15 = 0;
      LODWORD(v39) = 0;
      goto LABEL_15;
    case 4:
      v15 = 1;
      goto LABEL_14;
    case 8:
      if (a5 == 1)
      {
        v15 = 3;
        goto LABEL_14;
      }
      if (a5)
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
            goto LABEL_34;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
          {
LABEL_34:
            if ((gBBULogVerbosity & 0x80000000) == 0)
              _BBULog(2, 0, "BBUEUR13Communication", "", "Unsupported intf: %d\n", v10, v11, v12, a5);
          }
        }
        exception = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 67, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Communication/Eureka/BBUEUR13Communication.cpp", 0x70u, (ctu::LogMessageBuffer *)"Assertion failure(false)", v27, v28, v29, v30);
LABEL_26:
      }
      v15 = 2;
LABEL_14:
      LODWORD(v39) = v15;
LABEL_15:
      v16 = 5000;
LABEL_16:
      DWORD2(v40) = v16;
      *(_DWORD *)(a1 + 88) = v15;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          goto LABEL_20;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          goto LABEL_20;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
        _BBULog(2, 0, "BBUEUR13Communication", "", "Creating with timeout set to %u ms\n", v10, v11, v12, SBYTE8(v40));
LABEL_20:
      v17 = *(NSObject **)(a1 + 64);
      block[0] = v13;
      block[1] = 1107296256;
      block[2] = ___ZN21BBUEUR13Communication15createTransportEP26TelephonyUtilTransport_tag8BBUStagedbN16BBUCommunication17BasebandInterfaceE_block_invoke_2;
      block[3] = &__block_descriptor_tmp_20;
      block[6] = a1;
      block[7] = a2;
      v34 = v41;
      v35 = v42;
      v36 = v43;
      v37 = v44;
      v32 = v39;
      v33 = v40;
      block[4] = v45;
      block[5] = &v47;
      dispatch_sync(v17, block);
      v18 = *((unsigned int *)v48 + 6);
      _Block_object_dispose(v45, 8);
      _Block_object_dispose(&v47, 8);
      return v18;
    default:
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
          goto LABEL_29;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
        {
LABEL_29:
          if ((gBBULogVerbosity & 0x80000000) == 0)
            _BBULog(2, 0, "BBUEUR13Communication", "", "Unsupported BBU stage: %d\n", v10, v11, v12, a3);
        }
      }
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Communication/Eureka/BBUEUR13Communication.cpp", 0x76u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unsupported BBU stage.\")", v24, v25, v26, v30);
      goto LABEL_26;
  }
}

void sub_212AC08DC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  __cxa_free_exception(v1);
  _Block_object_dispose((const void *)(v2 - 160), 8);
  _Block_object_dispose((const void *)(v2 - 128), 8);
  _Unwind_Resume(a1);
}

void ___ZN21BBUEUR13Communication15createTransportEP26TelephonyUtilTransport_tag8BBUStagedbN16BBUCommunication17BasebandInterfaceE_block_invoke(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const void *Controller;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;

  v9 = *(_QWORD *)(a1 + 32);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_5;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(2, 0, "BBUEUR13Communication", "", "transport %p, status: %#x\n", a6, a7, a8, v9);
LABEL_5:
  if (a2 != 1)
    return;
  Controller = (const void *)TelephonyBasebandCreateController();
  v14 = TelephonyBasebandResetModem();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
    {
LABEL_8:
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        v15 = "failure";
        if (v14)
          v15 = "success";
        _BBULog(2, 0, "BBUEUR13Communication", "", "Resetting modem: %s\n", v11, v12, v13, (char)v15);
      }
    }
  }
  if (Controller)
    CFRelease(Controller);
}

void sub_212AC0AD0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void ___ZN21BBUEUR13Communication15createTransportEP26TelephonyUtilTransport_tag8BBUStagedbN16BBUCommunication17BasebandInterfaceE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  int v10;
  void *exception;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v2 = a1[6];
  *(_QWORD *)(v2 + 80) = a1[7];
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = TelephonyBasebandPCITransportCreate();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_8;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
      v9 = "success";
    else
      v9 = "failure";
    _BBULog(2, 0, "BBUEUR13Communication", "", " TelephonyBasebandPCITransportCreate returns: %s\n", v6, v7, v8, (char)v9);
  }
LABEL_8:
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    if (!*(_QWORD *)(v2 + 80))
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 67, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Communication/Eureka/BBUEUR13Communication.cpp", 0x88u, (ctu::LogMessageBuffer *)"Assertion failure(nullptr != fTransportCreated && \"Telephony Util transport error!\")", v12, v13, v14, v15);
    }
    v10 = 0;
  }
  else
  {
    BBUEUR13Communication::freeTransportSync(v2, a1[7], v3, v4, v5, v6, v7, v8);
    v10 = 3;
  }
  *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v10;
}

void sub_212AC0C50(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32r40r(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 8);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 8);
}

void __destroy_helper_block_e8_32r40r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 8);
  _Block_object_dispose(*(const void **)(a1 + 32), 8);
}

uint64_t BBUEUR13Communication::getBasebandState(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;

  v9 = *(int *)(a1 + 88);
  if (v9 > 3)
    v10 = 3;
  else
    v10 = dword_212B53BA0[v9];
  *a3 = v10;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      return 0;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      return 0;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(2, 0, "BBUEUR13Communication", "", "returning state: %d\n", a6, a7, a8, *a3);
  return 0;
}

uint64_t BBUEUR13Communication::freeTransport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v10;
  uint64_t v11;
  _QWORD block[7];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 1;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_5;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(2, 0, "BBUEUR13Communication", "", "request to free transport: %p\n", a6, a7, a8, a2);
LABEL_5:
  v10 = *(NSObject **)(a1 + 64);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1107296256;
  block[2] = ___ZN21BBUEUR13Communication13freeTransportEP26TelephonyUtilTransport_tag_block_invoke;
  block[3] = &__block_descriptor_tmp_23;
  block[4] = &v14;
  block[5] = a1;
  block[6] = a2;
  dispatch_sync(v10, block);
  v11 = *((unsigned __int8 *)v15 + 24);
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_212AC0EC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21BBUEUR13Communication13freeTransportEP26TelephonyUtilTransport_tag_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = BBUEUR13Communication::freeTransportSync(a1[5], a1[6], a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  return result;
}

void BBUEUR13Communication::~BBUEUR13Communication(BBUEUR13Communication *this)
{
  NSObject *v2;
  NSObject *v3;

  *(_QWORD *)this = off_24CE81520;
  v2 = *((_QWORD *)this + 9);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 8);
  if (v3)
    dispatch_release(v3);
  *(_QWORD *)this = &unk_24CE819F0;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
}

{
  NSObject *v2;
  NSObject *v3;

  *(_QWORD *)this = off_24CE81520;
  v2 = *((_QWORD *)this + 9);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 8);
  if (v3)
    dispatch_release(v3);
  *(_QWORD *)this = &unk_24CE819F0;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  operator delete(this);
}

std::string *BBUEURCommunication::setUartDevicePath(BBUEURCommunication *this, char *a2)
{
  return std::string::__assign_external((std::string *)((char *)this + 32), a2);
}

_QWORD *BBUEUR13Communication::getIPCLogBuffer@<X0>(_QWORD *a1@<X8>)
{
  BBULogIOABP *v3;
  _QWORD *result;

  v3 = (BBULogIOABP *)operator new(0xA0uLL);
  BBULogIOABP::BBULogIOABP(v3);
  *a1 = (char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 88);
  result = operator new(0x20uLL);
  *result = &unk_24CE814D0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v3;
  a1[1] = result;
  return result;
}

void sub_212AC1060(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_212AC1078(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<BBULogIOABP *,std::shared_ptr<BBULogBuffer>::__shared_ptr_default_delete<BBULogBuffer,BBULogIOABP>,std::allocator<BBULogIOABP>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<BBULogIOABP *,std::shared_ptr<BBULogBuffer>::__shared_ptr_default_delete<BBULogBuffer,BBULogIOABP>,std::allocator<BBULogIOABP>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<BBULogIOABP *,std::shared_ptr<BBULogBuffer>::__shared_ptr_default_delete<BBULogBuffer,BBULogIOABP>,std::allocator<BBULogIOABP>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B53B3DLL)
    return a1 + 24;
  if (((v3 & 0x8000000212B53B3DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B53B3DLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B53B3DLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void BBUZipFile::BBUZipFile(BBUZipFile *this, const __CFData *a2)
{
  char **v4;
  __int128 v5;
  const UInt8 *BytePtr;
  CFIndex Length;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int CurrentFileInfoInternal;
  char v15;
  int8x16_t v16;
  int8x16_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t **v22;
  char *v23;
  std::string *v24;
  std::string::size_type size;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  char *v30;
  size_t v31;
  size_t v32;
  int v33;
  int v34;
  char *v35;
  std::string *v36;
  uint64_t *v37;
  _QWORD *v38;
  void **v39;
  std::string *v40;
  std::string::size_type v41;
  void **v42;
  std::string *data;
  std::string::size_type v44;
  int8x16_t v45;
  int8x16_t v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *exception;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  _QWORD **v73;
  __int128 v74;
  size_t (*v75)(int, _QWORD *, void *, size_t);
  uint64_t (*v76)(uint64_t, uint64_t);
  uint64_t (*v77)(uint64_t, _QWORD *, unint64_t, int);
  uint64_t (*v78)(int, void *);
  uint64_t (*v79)();
  uint64_t v80;
  std::string v81[2];
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  unint64_t v91;
  char __str[16];
  __int128 v93;
  unint64_t v94;
  std::string::value_type v95[16];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  int v101;
  std::string::value_type __s[16];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  int v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  pthread_mutex_init((pthread_mutex_t *)this, 0);
  *((_QWORD *)this + 12) = 0;
  v4 = (char **)((char *)this + 96);
  *((_QWORD *)this + 11) = (char *)this + 96;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *(_QWORD *)&v74 = fopen_mem_func;
  *((_QWORD *)&v74 + 1) = fread_mem_func;
  v75 = fwrite_mem_func;
  v76 = ftell_mem_func;
  v77 = fseek_mem_func;
  v78 = fclose_mem_func;
  v79 = ferror_mem_func;
  v80 = 0;
  v94 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__str = v5;
  v93 = v5;
  *((_QWORD *)this + 18) = a2;
  CFRetain(a2);
  BytePtr = CFDataGetBytePtr(*((CFDataRef *)this + 18));
  Length = CFDataGetLength(*((CFDataRef *)this + 18));
  snprintf(__str, 0x28uLL, "%lx+%lx", BytePtr, Length);
  v8 = unzOpen2(__str, &v74);
  *((_QWORD *)this + 8) = v8;
  v73 = (_QWORD **)((char *)this + 88);
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUZipFile.cpp", 0x31u, (ctu::LogMessageBuffer *)"Assertion failure(ret == (0))", v69, v70, v71, v72);
LABEL_97:
  }
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)(v8 + 9);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      goto LABEL_6;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(15, 0, "BBUZipFile", (const char *)&str_4_6, "%s - Num entries %lu\n", v9, v10, v11, (char)__str);
LABEL_6:
  v12 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v12
    || (v13 = v12[17],
        v12[12] = 0,
        v12[13] = v13,
        CurrentFileInfoInternal = unzlocal_GetCurrentFileInfoInternal((uint64_t)v12, (uint64_t)(v12 + 18), v12 + 35, 0, 0, 0, 0, 0, 0), v12[14] = CurrentFileInfoInternal == 0, CurrentFileInfoInternal))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUZipFile.cpp", 0x4Bu, (ctu::LogMessageBuffer *)"Assertion failure(ret == (0))", v66, v67, v68, v72);
    goto LABEL_97;
  }
  do
  {
    while (1)
    {
      v91 = 0xAAAAAAAAAAAAAAAALL;
      v16.i64[0] = 0xAAAAAAAAAAAAAAAALL;
      v16.i64[1] = 0xAAAAAAAAAAAAAAAALL;
      v89 = v16;
      v90 = v16;
      v87 = v16;
      v88 = v16;
      v85 = v16;
      v86 = v16;
      v83 = v16;
      v84 = v16;
      v82 = v16;
      memset(v81, 0, sizeof(v81));
      *(_OWORD *)__s = 0u;
      v103 = 0u;
      v104 = 0u;
      v105 = 0u;
      v106 = 0u;
      v107 = 0u;
      v108 = 0;
      *(_OWORD *)v95 = 0u;
      v96 = 0u;
      v97 = 0u;
      v98 = 0u;
      v99 = 0u;
      v100 = 0u;
      v101 = 0;
      v17 = (int8x16_t *)*((_QWORD *)this + 8);
      if (!v17 || !v17[7].i64[0])
      {
        v55 = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)v55, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUZipFile.cpp", 0x57u, (ctu::LogMessageBuffer *)"Assertion failure(ret == (0))", v56, v57, v58, v72);
        goto LABEL_94;
      }
      v82 = vextq_s8(v17[6], v17[6], 8uLL);
      if (unzlocal_GetCurrentFileInfoInternal((uint64_t)v17, (uint64_t)&v83, 0, (uint64_t)__s, 0x63uLL, 0, 0, (uint64_t)v95, 0x63uLL))
      {
        v55 = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)v55, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUZipFile.cpp", 0x5Eu, (ctu::LogMessageBuffer *)"Assertion failure(ret == (0))", v62, v63, v64, v72);
LABEL_94:
      }
      std::string::__assign_external(v81, __s);
      std::string::__assign_external(&v81[1], v95);
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
          goto LABEL_19;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
          goto LABEL_19;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
        _BBULog(15, 0, "BBUZipFile", (const char *)&str_4_6, "Loaded file %s, Comment %s\n", v18, v19, v20, (char)__s);
LABEL_19:
      v21 = *v4;
      v22 = (uint64_t **)((char *)this + 96);
      v23 = (char *)this + 96;
      if (*v4)
      {
        if ((v81[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = v81;
        else
          v24 = (std::string *)v81[0].__r_.__value_.__r.__words[0];
        if ((v81[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v81[0].__r_.__value_.__r.__words[2]);
        else
          size = v81[0].__r_.__value_.__l.__size_;
        while (1)
        {
          v23 = v21;
          v28 = (char *)*((_QWORD *)v21 + 4);
          v26 = v21 + 32;
          v27 = v28;
          v29 = v26[23];
          if (v29 >= 0)
            v30 = v26;
          else
            v30 = v27;
          if (v29 >= 0)
            v31 = v26[23];
          else
            v31 = *((_QWORD *)v26 + 1);
          if (v31 >= size)
            v32 = size;
          else
            v32 = v31;
          v33 = memcmp(v24, v30, v32);
          if (v33)
          {
            if (v33 < 0)
              goto LABEL_26;
LABEL_40:
            v34 = memcmp(v30, v24, v32);
            if (v34)
            {
              if ((v34 & 0x80000000) == 0)
                goto LABEL_53;
            }
            else if (v31 >= size)
            {
LABEL_53:
              v35 = v23;
              v39 = (void **)(v23 + 56);
              if (v23 + 56 != (char *)v81)
                goto LABEL_54;
              goto LABEL_76;
            }
            v21 = (char *)*((_QWORD *)v23 + 1);
            if (!v21)
            {
              v22 = (uint64_t **)(v23 + 8);
              break;
            }
          }
          else
          {
            if (size >= v31)
              goto LABEL_40;
LABEL_26:
            v21 = *(char **)v23;
            v22 = (uint64_t **)v23;
            if (!*(_QWORD *)v23)
              break;
          }
        }
      }
      v35 = (char *)operator new(0x100uLL);
      v36 = (std::string *)(v35 + 32);
      if (SHIBYTE(v81[0].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v36, v81[0].__r_.__value_.__l.__data_, v81[0].__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)&v81[0].__r_.__value_.__l.__data_;
        *((_QWORD *)v35 + 6) = *((_QWORD *)&v81[0].__r_.__value_.__l + 2);
      }
      *((_QWORD *)v35 + 31) = 0;
      *(_OWORD *)(v35 + 232) = 0u;
      *(_OWORD *)(v35 + 216) = 0u;
      *(_OWORD *)(v35 + 200) = 0u;
      *(_OWORD *)(v35 + 184) = 0u;
      *(_OWORD *)(v35 + 168) = 0u;
      *(_OWORD *)(v35 + 152) = 0u;
      *(_OWORD *)(v35 + 136) = 0u;
      *(_OWORD *)(v35 + 120) = 0u;
      *(_OWORD *)(v35 + 104) = 0u;
      *(_OWORD *)(v35 + 88) = 0u;
      *(_OWORD *)(v35 + 72) = 0u;
      *(_OWORD *)(v35 + 56) = 0u;
      *(_QWORD *)v35 = 0;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = v23;
      *v22 = (uint64_t *)v35;
      v37 = (uint64_t *)v35;
      v38 = (_QWORD *)**v73;
      if (v38)
      {
        *v73 = v38;
        v37 = *v22;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 12), v37);
      ++*((_QWORD *)this + 13);
      v39 = (void **)(v35 + 56);
      if (v35 + 56 != (char *)v81)
      {
LABEL_54:
        if (v35[79] < 0)
        {
          if ((v81[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = v81;
          else
            v40 = (std::string *)v81[0].__r_.__value_.__r.__words[0];
          if ((v81[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v41 = HIBYTE(v81[0].__r_.__value_.__r.__words[2]);
          else
            v41 = v81[0].__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>(v39, v40, v41);
        }
        else if ((*((_BYTE *)&v81[0].__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v39, v81[0].__r_.__value_.__l.__data_, v81[0].__r_.__value_.__l.__size_);
        }
        else
        {
          *(std::string *)v39 = v81[0];
        }
        v42 = (void **)(v35 + 80);
        if (v35[103] < 0)
        {
          if ((v81[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            data = &v81[1];
          else
            data = (std::string *)v81[1].__r_.__value_.__l.__data_;
          if ((v81[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v44 = HIBYTE(v81[1].__r_.__value_.__r.__words[2]);
          else
            v44 = v81[1].__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>(v42, data, v44);
        }
        else if ((*((_BYTE *)&v81[1].__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v42, v81[1].__r_.__value_.__l.__data_, v81[1].__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)v42 = *(_OWORD *)&v81[1].__r_.__value_.__l.__data_;
          *((_QWORD *)v35 + 12) = *((_QWORD *)&v81[1].__r_.__value_.__l + 2);
        }
      }
LABEL_76:
      v45 = v86;
      *(int8x16_t *)(v35 + 184) = v87;
      *(int8x16_t *)(v35 + 168) = v45;
      v46 = v84;
      *(int8x16_t *)(v35 + 152) = v85;
      *(int8x16_t *)(v35 + 136) = v46;
      v47 = v91;
      *(int8x16_t *)(v35 + 232) = v90;
      v48 = v88;
      *(int8x16_t *)(v35 + 216) = v89;
      *(int8x16_t *)(v35 + 200) = v48;
      v49 = v83;
      *(int8x16_t *)(v35 + 104) = v82;
      *((_QWORD *)v35 + 31) = v47;
      *(int8x16_t *)(v35 + 120) = v49;
      v50 = (_QWORD *)*((_QWORD *)this + 8);
      if (!v50)
      {
LABEL_92:
        v55 = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)v55, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUZipFile.cpp", 0x6Fu, (ctu::LogMessageBuffer *)"Assertion failure(ret == (0))", v59, v60, v61, v72);
        goto LABEL_94;
      }
      if (v50[14])
      {
        v51 = v50[9];
        v52 = v50[12] + 1;
        if (v51 == 0xFFFF || v52 != v51)
        {
          v53 = v50[26] + v50[27] + v50[28] + v50[13] + 46;
          v50[12] = v52;
          v50[13] = v53;
          v54 = unzlocal_GetCurrentFileInfoInternal((uint64_t)v50, (uint64_t)(v50 + 18), v50 + 35, 0, 0, 0, 0, 0, 0);
          v50[14] = v54 == 0;
          if (v54 != -100)
            break;
        }
      }
      v15 = 0;
      if (SHIBYTE(v81[1].__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_83;
LABEL_10:
      if (SHIBYTE(v81[0].__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_84;
LABEL_11:
      if ((v15 & 1) == 0)
        return;
    }
    if (v54)
      goto LABEL_92;
    v15 = 1;
    if ((SHIBYTE(v81[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_83:
    operator delete(v81[1].__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_84:
    operator delete(v81[0].__r_.__value_.__l.__data_);
  }
  while ((v15 & 1) != 0);
}

void sub_212AC1908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;
  void *v24;

  __cxa_free_exception(v24);
  if (*(char *)(v23 + 135) < 0)
    operator delete(*a12);
  std::__tree<std::__value_type<std::string,BBUZipFile::FileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,BBUZipFile::FileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BBUZipFile::FileInfo>>>::destroy(a14, *(_QWORD *)(v23 + 96));
  pthread_mutex_destroy((pthread_mutex_t *)v23);
  _Unwind_Resume(a1);
}

void BBUZipFile::~BBUZipFile(BBUZipFile *this)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;

  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 288);
    if (v3)
    {
      if (*(_QWORD *)v3)
        free(*(void **)v3);
      *(_QWORD *)v3 = 0;
      if (*(_QWORD *)(v3 + 128))
        inflateEnd((z_streamp)(v3 + 8));
      free((void *)v3);
      *(_QWORD *)(v2 + 288) = 0;
    }
    (*(void (**)(_QWORD, _QWORD))(v2 + 40))(*(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    free((void *)v2);
    *((_QWORD *)this + 8) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 18);
  if (v4)
    CFRelease(v4);
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  std::__tree<std::__value_type<std::string,BBUZipFile::FileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,BBUZipFile::FileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BBUZipFile::FileInfo>>>::destroy((uint64_t)this + 88, *((_QWORD *)this + 12));
  pthread_mutex_destroy((pthread_mutex_t *)this);
}

uint64_t BBUZipFile::containsFile(uint64_t a1, _QWORD *a2)
{
  uint64_t **v4;
  size_t v5;
  size_t v6;
  int v7;
  uint64_t *v8;
  size_t v9;
  size_t v10;
  int v11;
  int v12;
  uint64_t v13;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v4 = *(uint64_t ***)(a1 + 96);
  if (!v4)
  {
LABEL_24:
    v13 = 0;
    goto LABEL_25;
  }
  v5 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v6 = v5;
  }
  while (1)
  {
    v7 = *((char *)v4 + 55);
    if (v7 >= 0)
      v8 = (uint64_t *)(v4 + 4);
    else
      v8 = v4[4];
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)v4 + 55);
    else
      v9 = (size_t)v4[5];
    if (v9 >= v6)
      v10 = v6;
    else
      v10 = v9;
    v11 = memcmp(a2, v8, v10);
    if (v11)
    {
      if (v11 < 0)
        goto LABEL_7;
    }
    else if (v6 < v9)
    {
      goto LABEL_7;
    }
    v12 = memcmp(v8, a2, v10);
    if (!v12)
    {
      if (v9 >= v6)
        break;
      goto LABEL_6;
    }
    if ((v12 & 0x80000000) == 0)
      break;
LABEL_6:
    ++v4;
LABEL_7:
    v4 = (uint64_t **)*v4;
    if (!v4)
      goto LABEL_24;
  }
  v13 = 1;
LABEL_25:
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v13;
}

uint64_t BBUZipFile::getFileSize(pthread_mutex_t *a1, const void **a2)
{
  uint64_t *v4;
  uint64_t v5;
  void *exception;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  pthread_mutex_lock(a1);
  v4 = std::__tree<std::__value_type<std::string,BBUZipFile::FileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,BBUZipFile::FileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BBUZipFile::FileInfo>>>::find<std::string>((uint64_t)&a1[1].__opaque[16], a2);
  if (&a1[1].__opaque[24] == (char *)v4)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUZipFile.cpp", 0x124u, (ctu::LogMessageBuffer *)"Assertion failure(i != fFileMap.end())", v8, v9, v10, v11);
  }
  v5 = v4[22];
  pthread_mutex_unlock(a1);
  return v5;
}

void sub_212AC1BF8(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;
  void *v2;

  __cxa_free_exception(v2);
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUZipFile::copyDataFromFile(uint64_t a1, const void **a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const void **v14;
  uint64_t v15;
  const void *v16;
  const void *v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  const void *v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  int v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void *v34;
  signed __int8 v35;
  __int128 v36;
  void *v37;
  size_t v38;
  int8x16_t *v39;
  int CurrentFileInfoInternal;
  unsigned int v41;
  unsigned int v42;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *exception;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  _BYTE __b[1024];
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  pthread_mutex_lock((pthread_mutex_t *)a1);
  v13 = std::__tree<std::__value_type<std::string,BBUZipFile::FileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,BBUZipFile::FileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BBUZipFile::FileInfo>>>::find<std::string>(a1 + 88, a2);
  if ((uint64_t *)(a1 + 96) == v13)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUZipFile.cpp", 0x124u, (ctu::LogMessageBuffer *)"Assertion failure(i != fFileMap.end())", v56, v57, v58, v68);
  }
  v14 = (const void **)(a1 + 112);
  v15 = *(unsigned __int8 *)(a1 + 135);
  if ((v15 & 0x80u) == 0)
    v16 = (const void *)*(unsigned __int8 *)(a1 + 135);
  else
    v16 = *(const void **)(a1 + 120);
  v17 = (const void *)*((unsigned __int8 *)a2 + 23);
  v18 = (char)v17;
  if ((char)v17 < 0)
    v17 = a2[1];
  if (v16 != v17)
    goto LABEL_18;
  if (v18 >= 0)
    v19 = (unsigned __int8 *)a2;
  else
    v19 = (unsigned __int8 *)*a2;
  if ((v15 & 0x80) != 0)
  {
    if (memcmp(*v14, v19, *(_QWORD *)(a1 + 120)))
      goto LABEL_18;
  }
  else if (*(_BYTE *)(a1 + 135))
  {
    v20 = (unsigned __int8 *)(a1 + 112);
    while (*v20 == *v19)
    {
      ++v20;
      ++v19;
      if (!--v15)
        goto LABEL_27;
    }
LABEL_18:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
        goto LABEL_24;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
        goto LABEL_24;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      LOBYTE(v21) = a1 + 112;
      if (*(char *)(a1 + 135) < 0)
        v21 = *v14;
      _BBULog(15, 0, "BBUZipFile", (const char *)&str_4_6, "Switch from file %s to %s\n", v10, v11, v12, (char)v21);
    }
LABEL_24:
    if (*(char *)(a1 + 135) < 0)
    {
      if (!*(_QWORD *)(a1 + 120))
      {
LABEL_52:
        if (v14 != a2)
        {
          v35 = *((_BYTE *)a2 + 23);
          if (*(char *)(a1 + 135) < 0)
          {
            if (v35 >= 0)
              v37 = a2;
            else
              v37 = (void *)*a2;
            if (v35 >= 0)
              v38 = *((unsigned __int8 *)a2 + 23);
            else
              v38 = (size_t)a2[1];
            std::string::__assign_no_alias<false>((void **)(a1 + 112), v37, v38);
          }
          else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)(a1 + 112), (void *)*a2, (size_t)a2[1]);
          }
          else
          {
            v36 = *(_OWORD *)a2;
            *(_QWORD *)(a1 + 128) = a2[2];
            *(_OWORD *)v14 = v36;
          }
        }
        *(_DWORD *)(a1 + 136) = 0;
        v39 = *(int8x16_t **)(a1 + 64);
        if (!v39
          || (v39[6] = vextq_s8(*(int8x16_t *)(v13 + 13), *(int8x16_t *)(v13 + 13), 8uLL),
              CurrentFileInfoInternal = unzlocal_GetCurrentFileInfoInternal((uint64_t)v39, (uint64_t)v39[9].i64, &v39[17].i64[1], 0, 0, 0, 0, 0, 0), v39[7].i64[0] = CurrentFileInfoInternal == 0, CurrentFileInfoInternal))
        {
          v48 = __cxa_allocate_exception(0x210uLL);
          _BBUException::_BBUException((uint64_t)v48, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUZipFile.cpp", 0xB7u, (ctu::LogMessageBuffer *)"Assertion failure(ret == (0))", v49, v50, v51, v68);
        }
        goto LABEL_66;
      }
    }
    else if (!*(_BYTE *)(a1 + 135))
    {
      goto LABEL_52;
    }
    v31 = *(_QWORD *)(a1 + 64);
    if (!v31 || (v32 = *(_QWORD *)(v31 + 288)) == 0)
    {
LABEL_93:
      v27 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v27, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUZipFile.cpp", 0xAFu, (ctu::LogMessageBuffer *)"Assertion failure(ret == (0))", v52, v53, v54, v68);
      goto LABEL_98;
    }
    if (*(_QWORD *)(v32 + 184) || *(_DWORD *)(v32 + 280))
    {
      v33 = 0;
      v34 = *(void **)v32;
      if (!*(_QWORD *)v32)
        goto LABEL_49;
    }
    else
    {
      if (*(_QWORD *)(v32 + 160) == *(_QWORD *)(v32 + 168))
        v33 = 0;
      else
        v33 = -105;
      v34 = *(void **)v32;
      if (!*(_QWORD *)v32)
      {
LABEL_49:
        *(_QWORD *)v32 = 0;
        if (*(_QWORD *)(v32 + 128))
          inflateEnd((z_streamp)(v32 + 8));
        free((void *)v32);
        *(_QWORD *)(v31 + 288) = 0;
        if (!v33)
          goto LABEL_52;
        goto LABEL_93;
      }
    }
    free(v34);
    goto LABEL_49;
  }
LABEL_27:
  v22 = *(_DWORD *)(a1 + 136);
  if (v22 <= a5)
    goto LABEL_68;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      goto LABEL_32;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      goto LABEL_32;
  }
  if (gBBULogVerbosity >= 1)
    _BBULog(15, 1, "BBUZipFile", (const char *)&str_4_6, "Reset offset for %u, current %u, file %s\n", v10, v11, v12, a5);
LABEL_32:
  *(_DWORD *)(a1 + 136) = 0;
  v23 = *(_QWORD *)(a1 + 64);
  if (!v23 || (v24 = *(char **)(v23 + 288)) == 0)
  {
LABEL_41:
    v27 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v27, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUZipFile.cpp", 0x9Eu, (ctu::LogMessageBuffer *)"Assertion failure(ret == (0))", v28, v29, v30, v68);
    goto LABEL_98;
  }
  if (*((_QWORD *)v24 + 23) || *((_DWORD *)v24 + 70))
  {
    v25 = 0;
    v26 = *(void **)v24;
    if (!*(_QWORD *)v24)
      goto LABEL_38;
    goto LABEL_37;
  }
  if (*((_QWORD *)v24 + 20) == *((_QWORD *)v24 + 21))
    v25 = 0;
  else
    v25 = -105;
  v26 = *(void **)v24;
  if (*(_QWORD *)v24)
LABEL_37:
    free(v26);
LABEL_38:
  *(_QWORD *)v24 = 0;
  if (*((_QWORD *)v24 + 16))
    inflateEnd((z_streamp)(v24 + 8));
  free(v24);
  *(_QWORD *)(v23 + 288) = 0;
  if (v25)
    goto LABEL_41;
LABEL_66:
  if (unzOpenCurrentFile3(*(_QWORD *)(a1 + 64), 0, 0, 0, 0))
  {
    v27 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v27, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUZipFile.cpp", 0xBDu, (ctu::LogMessageBuffer *)"Assertion failure(ret == (0))", v65, v66, v67, v68);
LABEL_98:
  }
  v22 = *(_DWORD *)(a1 + 136);
LABEL_68:
  v41 = a5 - v22;
  if (a5 < v22)
  {
    v27 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v27, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUZipFile.cpp", 0xC0u, (ctu::LogMessageBuffer *)"Assertion failure(fCurrentFileOffset <= offset)", v59, v60, v61, v68);
    goto LABEL_98;
  }
  memset(__b, 170, sizeof(__b));
  for (; v41; v41 -= v42)
  {
    if (v41 >= 0x400)
      v42 = 1024;
    else
      v42 = v41;
    if (unzReadCurrentFile(*(_QWORD *)(a1 + 64), (uint64_t)__b, v42) != v42)
    {
      v44 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v44, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUZipFile.cpp", 0xCBu, (ctu::LogMessageBuffer *)"Assertion failure(err == chunk)", v45, v46, v47, v68);
    }
  }
  *(_DWORD *)(a1 + 136) = a5;
  if (unzReadCurrentFile(*(_QWORD *)(a1 + 64), a3, a4) != a4)
  {
    v27 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v27, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUZipFile.cpp", 0xD3u, (ctu::LogMessageBuffer *)"Assertion failure(ret == static_cast<SInt32>( amount))", v62, v63, v64, v68);
    goto LABEL_98;
  }
  *(_DWORD *)(a1 + 136) += a4;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return 0;
}

void sub_212AC228C(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;
  void *v2;

  __cxa_free_exception(v2);
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUZipFile::copyEntireFile(pthread_mutex_t *a1, const void **a2, __CFData **a3)
{
  CFIndex FileSize;
  __CFData *Mutable;
  __CFData *v8;
  UInt8 *MutableBytePtr;

  if (!BBUZipFile::containsFile((uint64_t)a1, a2))
    return 15;
  FileSize = BBUZipFile::getFileSize(a1, a2);
  Mutable = CFDataCreateMutable(0, FileSize);
  if (!Mutable)
    return 19;
  v8 = Mutable;
  CFDataSetLength(Mutable, FileSize);
  MutableBytePtr = CFDataGetMutableBytePtr(v8);
  BBUZipFile::copyDataFromFile((uint64_t)a1, a2, (uint64_t)MutableBytePtr, FileSize, 0);
  *a3 = v8;
  CFRetain(v8);
  CFRelease(v8);
  return 0;
}

uint64_t BBUZipFile::saveDataToFile(uint64_t a1, uint64_t a2)
{
  const __CFData *v3;
  char Length;
  const char *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BBUpdaterCommon *v13;
  NSObject *v14;
  std::__shared_weak_count_vtbl *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::string *v26;
  __int128 v27;
  NSObject *isa;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::string v36;
  void *__p[2];
  std::string::size_type v38;
  NSObject *v39;
  void *v40;
  int v41;
  __int128 v42;
  void (*v43)(uint64_t);
  void *v44;
  NSObject *v45;
  void **v46;
  int v47;
  __int128 *v48;
  NSObject *block[6];

  v3 = *(const __CFData **)(a1 + 144);
  if (v3)
  {
    CFDataGetBytePtr(v3);
    Length = CFDataGetLength(*(CFDataRef *)(a1 + 144));
    v6 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
    v7 = open(v6, 1537, 420);
    if ((v7 & 0x80000000) == 0)
    {
      v8 = v7;
      v41 = -1431655766;
      v9 = TelephonyUtilWriteToCompletion();
      if (!(_DWORD)v9)
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          v32 = 0;
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
            goto LABEL_46;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          v32 = 0;
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
            goto LABEL_46;
        }
        if ((gBBULogVerbosity & 0x80000000) == 0)
        {
          _BBULog(15, 0, "BBUZipFile", (const char *)&str_4_6, "Wrote %u bytes to %s\n", v10, v11, v12, v41);
          v32 = 0;
        }
        goto LABEL_46;
      }
      v13 = (BBUpdaterCommon *)v9;
      pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
      v14 = qword_253D31DC8;
      if (!qword_253D31DC8)
      {
        v15 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
        block[0] = 0;
        ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v15, "BBUError", QOS_CLASS_UTILITY, block);
        if (block[0])
          dispatch_release(block[0]);
        v15->__on_zero_shared_weak = 0;
        v15[1].~__shared_weak_count = 0;
        v15[1].~__shared_weak_count_0 = 0;
        std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&v42, v15);
        v16 = v42;
        v42 = 0uLL;
        v17 = (std::__shared_weak_count *)off_253D31DD0;
        *(_OWORD *)&qword_253D31DC8 = v16;
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
        if (*((_QWORD *)&v42 + 1))
        {
          v21 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v14 = qword_253D31DC8;
      }
      v23 = (std::__shared_weak_count *)off_253D31DD0;
      v39 = v14;
      v40 = off_253D31DD0;
      if (off_253D31DD0)
      {
        v24 = (unint64_t *)((char *)off_253D31DD0 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
      BBUpdaterCommon::BBUStrError(v13, &v36);
      v26 = std::string::insert(&v36, 0, "Failed to write file: ", 0x16uLL);
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v38 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)&v42 = MEMORY[0x24BDAC760];
      *((_QWORD *)&v42 + 1) = 0x40000000;
      v43 = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
      v44 = &__block_descriptor_tmp_6;
      v45 = v14;
      v46 = __p;
      v47 = 35;
      v48 = &v42;
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 0x40000000;
      block[2] = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
      block[3] = &__block_descriptor_tmp_10;
      block[4] = v14;
      block[5] = &v48;
      isa = v14[2].isa;
      if (v14[3].isa)
      {
        dispatch_async_and_wait(isa, block);
        if ((SHIBYTE(v38) & 0x80000000) == 0)
          goto LABEL_27;
      }
      else
      {
        dispatch_sync(isa, block);
        if ((SHIBYTE(v38) & 0x80000000) == 0)
        {
LABEL_27:
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v36.__r_.__value_.__l.__data_);
            if (!v23)
              goto LABEL_42;
          }
          else if (!v23)
          {
            goto LABEL_42;
          }
          v33 = (unint64_t *)&v23->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
LABEL_42:
          if (gBBULogMaskGet(void)::once == -1)
          {
            v32 = 35;
            if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
              goto LABEL_44;
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            v32 = 35;
            if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
            {
LABEL_44:
              if ((gBBULogVerbosity & 0x80000000) == 0)
                _BBULog(15, 0, "BBUZipFile", (const char *)&str_4_6, "Failed writing %u bytes to %s - wrote only %u\n", v29, v30, v31, Length);
            }
          }
LABEL_46:
          close(v8);
          return v32;
        }
      }
      operator delete(__p[0]);
      goto LABEL_27;
    }
  }
  return 35;
}

void sub_212AC27E4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  NSObject *v4;

  v4 = *(NSObject **)(v2 - 112);
  if (v4)
    dispatch_release(v4);
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_212AC281C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a17 < 0)
  {
    operator delete(__p);
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void BBUZipDataSource::~BBUZipDataSource(void **this)
{
  *this = off_24CE81588;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

{
  BBUZipDataSource *v1;

  v1 = (BBUZipDataSource *)this;
  *this = off_24CE81588;
  if (*((char *)this + 47) < 0)
  {
    operator delete(this[3]);
    this = (void **)v1;
  }
  operator delete(this);
}

uint64_t BBUZipDataSource::init(uint64_t a1, _QWORD *a2, int a3)
{
  const void **v5;
  __int128 v6;
  size_t v7;
  size_t v8;
  int FileSize;
  uint64_t result;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = (const void **)(a1 + 24);
  if ((_QWORD *)(a1 + 24) == a2)
    goto LABEL_10;
  if (*(char *)(a1 + 47) < 0)
  {
    v7 = a2[1];
    if (*((char *)a2 + 23) >= 0)
    {
      v8 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (_QWORD *)*a2;
      v8 = v7;
    }
    std::string::__assign_no_alias<false>((void **)(a1 + 24), a2, v8);
LABEL_10:
    if ((BBUZipFile::containsFile(*(_QWORD *)(a1 + 8), v5) & 1) == 0)
      goto LABEL_14;
    goto LABEL_11;
  }
  if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>((_QWORD *)(a1 + 24), (void *)*a2, a2[1]);
    if ((BBUZipFile::containsFile(*(_QWORD *)(a1 + 8), v5) & 1) == 0)
      goto LABEL_14;
LABEL_11:
    FileSize = BBUZipFile::getFileSize(*(pthread_mutex_t **)(a1 + 8), v5);
    result = 0;
    *(_DWORD *)(a1 + 16) = FileSize;
    *(_DWORD *)(a1 + 48) = a3;
    return result;
  }
  v6 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 40) = a2[2];
  *(_OWORD *)v5 = v6;
  if ((BBUZipFile::containsFile(*(_QWORD *)(a1 + 8), v5) & 1) != 0)
    goto LABEL_11;
LABEL_14:
  if (gBBULogMaskGet(void)::once == -1)
  {
    result = 35;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      return result;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    result = 35;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      return result;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v11 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    if (*(char *)(a1 + 47) < 0)
      v5 = (const void **)*v5;
    _BBULog(15, 0, v11, (const char *)&str_4_6, "File %s does not exist\n", v12, v13, v14, (char)v5);
    return 35;
  }
  return result;
}

uint64_t BBUZipDataSource::copyData(BBUZipDataSource *this, unsigned __int8 *a2, unsigned int a3, unsigned int *a4, unsigned int a5)
{
  BBUZipFile::copyDataFromFile(*((_QWORD *)this + 1), (const void **)this + 3, (uint64_t)a2, a3, a5);
  *a4 = a3;
  return 0;
}

uint64_t BBUZipDataSource::getSize(BBUZipDataSource *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t BBUZipDataSource::getBaseAddress(BBUZipDataSource *this)
{
  return *((unsigned int *)this + 12);
}

_QWORD *BBUZipDataSource::getNameAsString@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  size_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  const void *v11;

  v3 = *((char *)this + 47);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)this + 47);
  else
    v4 = this[4];
  v5 = v4 + 4;
  memset(a2, 170, 24);
  if (v4 + 4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (uint64_t)this;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v10 = operator new(v8 + 1);
    a2[1] = v5;
    a2[2] = v9 | 0x8000000000000000;
    *a2 = v10;
    *v10 = 544237914;
    v7 = v10 + 1;
  }
  else
  {
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    *((_BYTE *)a2 + 23) = v5;
    v7 = (char *)a2 + 4;
    *(_DWORD *)a2 = 544237914;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v11 = (const void *)(v6 + 24);
  else
    v11 = *(const void **)(v6 + 24);
  this = memmove(v7, v11, v4);
LABEL_15:
  *((_BYTE *)v7 + v4) = 0;
  return this;
}

void BBUZipFile::getFileList(BBUZipFile *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  char *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::string *v8;
  __int128 v9;
  char *v10;
  char *v11;
  BOOL v12;

  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 11);
  v3 = (char *)this + 96;
  if (v2 != (_QWORD *)((char *)this + 96))
  {
    v5 = 0;
    v6 = a2;
    do
    {
      v7 = operator new(0x28uLL);
      v8 = (std::string *)(v7 + 2);
      *v7 = 0;
      v7[1] = 0;
      if (*((char *)v2 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v2[4], v2[5]);
        v6 = (_QWORD *)*a2;
        v5 = a2[2];
      }
      else
      {
        v9 = *((_OWORD *)v2 + 2);
        v7[4] = v2[6];
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      *v7 = v6;
      v7[1] = a2;
      v6[1] = v7;
      *a2 = v7;
      a2[2] = ++v5;
      v10 = (char *)v2[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char *)v2[2];
          v12 = *(_QWORD *)v11 == (_QWORD)v2;
          v2 = v11;
        }
        while (!v12);
      }
      v6 = v7;
      v2 = v11;
    }
    while (v11 != v3);
  }
}

void sub_212AC2CB0(_Unwind_Exception *a1)
{
  char *v1;
  void *v2;

  operator delete(v2);
  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_212AC2CCC(_Unwind_Exception *a1)
{
  char *v1;

  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

const char *BBUZipDataSource::getDebugName(BBUZipDataSource *this)
{
  return "BBUFileDataSource";
}

void std::__tree<std::__value_type<std::string,BBUZipFile::FileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,BBUZipFile::FileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BBUZipFile::FileInfo>>>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,BBUZipFile::FileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,BBUZipFile::FileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BBUZipFile::FileInfo>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,BBUZipFile::FileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,BBUZipFile::FileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BBUZipFile::FileInfo>>>::destroy(a1, *(_QWORD *)(a2 + 8));
    if (*(char *)(a2 + 103) < 0)
    {
      operator delete(*(void **)(a2 + 80));
      if ((*(char *)(a2 + 79) & 0x80000000) == 0)
      {
LABEL_4:
        if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        {
LABEL_5:
          operator delete((void *)a2);
          return;
        }
        goto LABEL_9;
      }
    }
    else if ((*(char *)(a2 + 79) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a2 + 56));
    if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_9:
    operator delete(*(void **)(a2 + 32));
    operator delete((void *)a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,BBUZipFile::FileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,BBUZipFile::FileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BBUZipFile::FileInfo>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  const void *v5;
  size_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  size_t v10;
  size_t v11;
  int v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v8 = *((char *)v3 + 55);
      v9 = v8 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      v10 = v8 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      v11 = v6 >= v10 ? v10 : v6;
      v12 = memcmp(v9, v5, v11);
      if (v12)
        break;
      if (v10 >= v6)
        goto LABEL_23;
LABEL_9:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_24;
    }
    if (v12 < 0)
      goto LABEL_9;
LABEL_23:
    v7 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v7 == v2)
    return v2;
  v13 = *((char *)v7 + 55);
  if (v13 >= 0)
    v14 = v7 + 4;
  else
    v14 = (const void *)v7[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)v7 + 55);
  else
    v15 = v7[5];
  if (v15 >= v6)
    v16 = v6;
  else
    v16 = v15;
  v17 = memcmp(v5, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      return v7;
    return v2;
  }
  else
  {
    if (v6 < v15)
      return v2;
    return v7;
  }
}

uint64_t __cxx_global_var_init_8()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUError>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance, &dword_212A4D000);
  }
  return result;
}

uint64_t BBUEURCommunication::setTransportCreationTimeout(BBUEURCommunication *this, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;

  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
    {
LABEL_7:
      *((double *)this + 2) = a2;
      goto LABEL_8;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_7;
  }
  if (gBBULogVerbosity < 0)
    goto LABEL_7;
  _BBULog(2, 0, "BBUEURCommunication", "", "Transport timeout set to %f from %f\n", a7, a8, a9, SLOBYTE(a2));
  v11 = gBBULogMaskGet(void)::once;
  *((double *)this + 2) = a2;
  if (v11 != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
LABEL_8:
  if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0 && (gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(2, 0, "BBUEURCommunication", "", "Boot-up transport timeout set to %f from %f\n", a7, a8, a9, SLOBYTE(a2));
  *((double *)this + 3) = a2;
  return 0;
}

uint64_t BBUEURCommunication::freeTransport(uint64_t a1)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 56);
  if (v2 >= 1)
  {
    close(v2);
    *(_DWORD *)(a1 + 56) = -1;
  }
  return TelephonyUtilTransportFree();
}

uint64_t BBUEUR4Programmer::gatherPersonalizationParameters(BBUFeedback **this, int a2, char a3, unsigned int *a4, BBUPersonalizationParameters *a5)
{
  uint64_t Nonce_nl;
  UInt8 *v11;
  _QWORD *v12;
  const __CFAllocator *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  BBUFeedback *v19;
  const char *v20;
  BBUpdaterCommon *v21;
  const char *v22;
  int v23;
  BBUFeedback *v24;
  void **v25;
  BBUFeedback *v26;
  void **v27;
  BBUFeedback *v28;
  int v29;
  void *__p[2];
  char v31;
  int v32;

  if ((a3 & 1) != 0)
  {
    v32 = -1431655766;
    BBUFeedback::handleBeginPhase(this[1], "Gathering Personalization parameters...");
    if ((*((unsigned int (**)(BBUFeedback **, int *))*this + 23))(this, &v32))
    {
      Nonce_nl = 48;
    }
    else if (v32 == 2)
    {
      Nonce_nl = 28;
    }
    else if (v32 == 256)
    {
      v11 = (UInt8 *)operator new(0x40uLL);
      Nonce_nl = BBUEUR4Programmer::handleMaverickGetNonce_nl((uint64_t)this, a2);
      if (!(_DWORD)Nonce_nl)
      {
        v12 = operator new(0x10uLL);
        *v12 = off_24CE848F8;
        v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v12[1] = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v11 + 4, 20);
        v14 = BBUEURPersonalizationParameters::EURChipID::createFromChipID((BBUEURPersonalizationParameters::EURChipID *)*((unsigned int *)v11 + 7));
        v15 = BBUEURPersonalizationParameters::EURSerialNumber::createFromSerialNumber((BBUEURPersonalizationParameters::EURSerialNumber *)(v11 + 24), (const unsigned __int8 *)0x20);
        v16 = operator new(0x10uLL);
        *v16 = off_24CE84A18;
        v16[1] = CFDataCreate(v13, v11 + 32, 32);
        *a4 = *(_DWORD *)v11;
        operator delete(v11);
        v17 = *((_QWORD *)a5 + 1);
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        *((_QWORD *)a5 + 1) = v12;
        v18 = *((_QWORD *)a5 + 2);
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        *((_QWORD *)a5 + 2) = v14;
        (*(void (**)(BBUPersonalizationParameters *, _QWORD *))(*(_QWORD *)a5 + 16))(a5, v15);
        (*(void (**)(BBUPersonalizationParameters *, _QWORD *))(*(_QWORD *)a5 + 24))(a5, v16);
        if (v15)
        {
          v19 = this[1];
          (*(void (**)(void **__return_ptr, _QWORD *))(*v15 + 24))(__p, v15);
          v21 = v31 >= 0 ? (BBUpdaterCommon *)__p : (BBUpdaterCommon *)__p[0];
          v22 = BBUpdaterCommon::redactedString(v21, v20);
          v23 = (*(uint64_t (**)(_QWORD *))(*v14 + 24))(v14);
          BBUFeedback::handleComment(v19, "   SNUM: 0x%s / CHIPID: 0x%08x", v22, v23);
          if (v31 < 0)
            operator delete(__p[0]);
        }
        v24 = this[1];
        (*(void (**)(void **__return_ptr, _QWORD *))(*v12 + 24))(__p, v12);
        if (v31 >= 0)
          v25 = __p;
        else
          v25 = (void **)__p[0];
        BBUFeedback::handleComment(v24, "   NONCE: %s", (const char *)v25);
        if (v31 < 0)
          operator delete(__p[0]);
        v26 = this[1];
        (*(void (**)(void **__return_ptr, _QWORD *))(*v16 + 24))(__p, v16);
        if (v31 >= 0)
          v27 = __p;
        else
          v27 = (void **)__p[0];
        BBUFeedback::handleComment(v26, "   PUBLIC_KEY_HASH: %s", (const char *)v27);
        if (v31 < 0)
          operator delete(__p[0]);
        v28 = this[1];
        v29 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a5 + 3) + 24))(*((_QWORD *)a5 + 3));
        BBUFeedback::handleComment(v28, "   CertID: %u", v29);
        Nonce_nl = 0;
      }
    }
    else
    {
      Nonce_nl = 12;
    }
    (*(void (**)(BBUFeedback *, uint64_t))(*(_QWORD *)this[1] + 16))(this[1], Nonce_nl);
  }
  else
  {
    BBUFeedback::handleComment(this[1], "Not in restore mode - skipping gathering Personalization parameters...");
    return 0;
  }
  return Nonce_nl;
}

void sub_212AC3378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BBUEUR4Programmer::handleMaverickGetNonce_nl(uint64_t a1, int a2)
{
  _DWORD *v4;
  uint64_t v5;

  v4 = operator new[](0x400uLL);
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Starting Maverick Protocol (%s)", "handleMaverickGetNonce_nl");
  if (ETLSAHCommandReceive() && ETLSAHCommandParseMaverickEraseQuery())
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Setting HSIC cookie? %d", *(unsigned __int8 *)(a1 + 64));
    if (a2)
      *(_BYTE *)(a1 + 4300) = 1;
    if (ETLSAHCommandCreateMaverickEraseResponse())
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Sending Erase Response: Length %u Type %u  Erase EFS %u", v4[1], *v4, a2);
      ETLSAHCommandSend();
    }
  }
  v5 = 3;
  if (ETLSAHCommandReceive())
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Checking Manifest Request: Length %u Type %u", v4[1], *v4);
    if (ETLSAHCommandParseMaverickRootManifestQuery())
      v5 = 0;
    else
      v5 = 3;
  }
  operator delete[](v4);
  return v5;
}

uint64_t BBUEUR4Programmer::sendImage_nl(BBUFeedback **a1, void *lpsrc, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  unsigned int v23;
  BBUFeedback *v24;
  int v25;
  __int128 v26;
  uint64_t Nonce_nl;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  const char *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (lpsrc)
  else
    v15 = 0;
  (*(void (**)(_QWORD *))(*v15[2] + 16))(v15[2]);
  v38 = -1431655766;
  if ((a5 & 1) == 0)
  {
    while (1)
    {
      v22 = (*((uint64_t (**)(BBUFeedback **, int *))*a1 + 23))(a1, &v38);
      if ((_DWORD)v22)
        return v22;
      if (v38 == 256)
        break;
      if (v38 == 2)
        return 28;
      v23 = *((_DWORD *)v15 + 2) - 16385;
      if (v23 <= 5)
      {
        v24 = a1[1];
        if (*((_BYTE *)v24 + 44))
          *((_DWORD *)v24 + 10) = dword_212B53C58[v23];
      }
      v20 = (*((uint64_t (**)(BBUFeedback **, _QWORD *, BOOL))*a1 + 22))(a1, v15[2], v23 < 6);
      if (v23 <= 5)
        BBUFeedback::endProgressBarItem(a1[1]);
      v25 = 1;
      if ((_DWORD)v20)
        return v20;
LABEL_37:
      v22 = BBUEUR2Programmer::disconnectForImage_nl(a1);
      if ((_DWORD)v22)
        v34 = 1;
      else
        v34 = v25;
      if (v34 == 1)
        return v22;
    }
    *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v41 = v26;
    v42 = v26;
    v39 = v26;
    v40 = v26;
    Nonce_nl = BBUEUR4Programmer::handleMaverickGetNonce_nl((uint64_t)a1, a7);
    if ((_DWORD)Nonce_nl)
    {
      v20 = Nonce_nl;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
          goto LABEL_36;
        goto LABEL_23;
      }
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
      {
LABEL_23:
        if (gBBULogVerbosity < 0)
          goto LABEL_36;
        v31 = 5;
        v32 = "failed getting nonce\n";
LABEL_35:
        _BBULog(v31, 0, "BBUProgrammer", "", v32, v28, v29, v30, v37);
      }
LABEL_36:
      v25 = 0;
      if ((_DWORD)v20)
        return v20;
      goto LABEL_37;
    }
    v33 = (*((uint64_t (**)(BBUFeedback **, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t))*a1 + 24))(a1, a3, v39, a6, a7, 0, a8);
    if ((_DWORD)v33)
    {
      v20 = v33;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_36;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_36;
      }
      if (gBBULogVerbosity < 0)
        goto LABEL_36;
      v31 = 1;
      v32 = "failed handling sahara send hashes command\n";
      goto LABEL_35;
    }
    v20 = (*((uint64_t (**)(BBUFeedback **))*a1 + 25))(a1);
    if (!(_DWORD)v20)
      goto LABEL_36;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_36;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_36;
    }
    if (gBBULogVerbosity < 0)
      goto LABEL_36;
    v31 = 1;
    v32 = "failed handling maverick end\n";
    goto LABEL_35;
  }
  v16 = (*((uint64_t (**)(BBUFeedback **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*a1 + 24))(a1, a3, a4, a6, a7, 1, a8);
  if ((_DWORD)v16)
  {
    v20 = v16;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
        return v20;
      goto LABEL_8;
    }
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
    {
LABEL_8:
      if (gBBULogVerbosity < 0)
        return v20;
      v21 = "failed handling sahara send hashes command\n";
LABEL_54:
      _BBULog(5, 0, "BBUProgrammer", "", v21, v17, v18, v19, v37);
      return v20;
    }
    return v20;
  }
  v35 = (*((uint64_t (**)(BBUFeedback **))*a1 + 25))(a1);
  if ((_DWORD)v35)
  {
    v20 = v35;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
        return v20;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
        return v20;
    }
    if (gBBULogVerbosity < 0)
      return v20;
    v21 = "failed handling maverick end\n";
    goto LABEL_54;
  }
  return BBUEUR2Programmer::disconnectForImage_nl(a1);
}

uint64_t BBUEUR4Programmer::getEFSEraseIndicated(BBUEUR4Programmer *this)
{
  return *((unsigned __int8 *)this + 4301);
}

uint64_t support::parsers::getCoredumpCrashReport(const void **a1, uint64_t a2, uint64_t a3, int *a4)
{
  xpc_object_t v7;
  xpc_object_t v8;
  int v9;
  size_t v10;
  unint64_t v11;
  stat *p_dst;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  std::string *v16;
  __int128 v17;
  timespec v18;
  void **v19;
  _anonymous_namespace_ *v20;
  _BOOL8 File;
  _BOOL4 v22;
  const void *v23;
  size_t v24;
  void *v25;
  void **v26;
  void *v27;
  void *v28;
  ctu *v29;
  _anonymous_namespace_ *v30;
  const void *v31;
  xpc_object_t v32;
  _anonymous_namespace_ *v33;
  uint64_t v34;
  uint64_t v35;
  xpc_object_t v36;
  _anonymous_namespace_ *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  timespec v40;
  xpc_object_t value;
  xpc_object_t v42;
  uint64_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  _anonymous_namespace_ *v50;
  _anonymous_namespace_ *v51;
  xpc_object_t v52;
  xpc_object_t v53;
  xpc_object_t v54;
  xpc_object_t v55;
  uint64_t v56;
  xpc_object_t v57;
  xpc_object_t v58;
  void *v59;
  char **v60;
  void **v61;
  xpc_object_t v62;
  xpc_object_t v63;
  char *v64;
  uint64_t v65;
  size_t v66;
  const void *v67;
  uint64_t v68;
  size_t v69;
  size_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  xpc_object_t v76;
  void *v77;
  size_t v78;
  _BYTE *v79;
  uint64_t tv_nsec;
  const void *tv_sec;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  void **v86;
  xpc_object_t first_not_of;
  xpc_object_t v88;
  char *v89;
  uint64_t last_not_of;
  size_t v91;
  const void *v92;
  uint64_t v93;
  size_t v94;
  size_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint8_t *v100;
  uint64_t v101;
  char st_gen;
  size_t v103;
  void *v104;
  timespec *p_tv_nsec;
  uint64_t v106;
  const void *v107;
  uint64_t v108;
  uint64_t v109;
  uint8_t *v110;
  xpc_object_t v111;
  xpc_object_t v112;
  uint64_t v113;
  uint64_t v114;
  xpc_object_t v115;
  xpc_object_t v116;
  xpc_object_t v117;
  xpc_object_t v118;
  xpc_object_t v119;
  timespec v120;
  _QWORD *v121;
  uint8_t *v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  void **v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  void **v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  xpc_object_t *v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  void **v138;
  uint64_t v139;
  size_t v140;
  __int128 *v141;
  uint64_t v142;
  const void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void **v147;
  char *v148;
  uint64_t v149;
  void **v150;
  char *v151;
  void **v153;
  char *v154;
  int v158;
  void **v159;
  uint64_t v160;
  char *v161;
  void **v162;
  char *v163;
  uint64_t v165;
  NSObject *v166;
  const char *v167;
  NSObject *v168;
  NSObject *v169;
  uint64_t v170;
  NSObject *v171;
  NSObject *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v178;
  unint64_t v179;
  void *v180[3];
  xpc_object_t object;
  xpc_object_t v182[3];
  void *v183[4];
  void *v184[4];
  void *v185[4];
  void *__p[2];
  xpc_object_t v187;
  uint8_t buf[32];
  stat __dst;
  timespec v190;
  timespec v191;
  timespec v192;
  timespec v193;
  timespec v194;
  timespec v195;
  timespec v196;
  timespec v197;
  unint64_t v198;
  uint64_t v199;

  v199 = *MEMORY[0x24BDAC8D0];
  v7 = xpc_null_create();
  v176 = a3;
  v8 = xpc_null_create();
  __p[0] = 0;
  __p[1] = 0;
  v187 = 0;
  memset(v185, 170, 24);
  v9 = *((char *)a1 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a1 + 23);
  else
    v10 = (size_t)a1[1];
  v11 = v10 + 1;
  memset(&__dst, 170, 24);
  if (v10 + 1 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v11 >= 0x17)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    p_dst = (stat *)operator new(v13 + 1);
    __dst.st_ino = v10 + 1;
    *(_QWORD *)&__dst.st_uid = v14 | 0x8000000000000000;
    *(_QWORD *)&__dst.st_dev = p_dst;
  }
  else
  {
    memset(&__dst, 0, 24);
    p_dst = &__dst;
    HIBYTE(__dst.st_gid) = v10 + 1;
    if (!v10)
      goto LABEL_15;
  }
  if (v9 >= 0)
    v15 = a1;
  else
    v15 = *a1;
  memmove(p_dst, v15, v10);
LABEL_15:
  *(_WORD *)((char *)&p_dst->st_dev + v10) = 47;
  v16 = std::string::append((std::string *)&__dst, "report.json", 0xBuLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v185[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v185 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.st_gid) < 0)
    operator delete(*(void **)&__dst.st_dev);
  v18.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v18.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blksize = v18;
  *(timespec *)__dst.st_qspare = v18;
  __dst.st_birthtimespec = v18;
  *(timespec *)&__dst.st_size = v18;
  __dst.st_mtimespec = v18;
  __dst.st_ctimespec = v18;
  *(timespec *)&__dst.st_uid = v18;
  __dst.st_atimespec = v18;
  *(timespec *)&__dst.st_dev = v18;
  if (SHIBYTE(v185[2]) >= 0)
    v19 = v185;
  else
    v19 = (void **)v185[0];
  v20 = (_anonymous_namespace_ *)stat((const char *)v19, &__dst);
  if ((_DWORD)v20)
  {
    v166 = *(NSObject **)qword_253D37290;
    if (!os_log_type_enabled(*(os_log_t *)qword_253D37290, OS_LOG_TYPE_ERROR))
      goto LABEL_356;
    LOWORD(__dst.st_dev) = 0;
    v167 = "error: file not found";
    goto LABEL_349;
  }
  memset(&__dst, 0, 24);
  File = support::fs::loadFile((uint64_t)v185, (uint64_t)&__dst);
  v22 = File;
  if (File)
  {
    v23 = *(const void **)&__dst.st_dev;
    v24 = __dst.st_ino - *(_QWORD *)&__dst.st_dev;
    if (__dst.st_ino - *(_QWORD *)&__dst.st_dev > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v24 >= 0x17)
    {
      v34 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v34 = v24 | 7;
      v35 = v34 + 1;
      v25 = operator new(v34 + 1);
      *(_QWORD *)&buf[8] = v24;
      *(_QWORD *)&buf[16] = v35 | 0x8000000000000000;
      *(_QWORD *)buf = v25;
    }
    else
    {
      buf[23] = LOBYTE(__dst.st_ino) - LOBYTE(__dst.st_dev);
      v25 = buf;
      if (__dst.st_ino == *(_QWORD *)&__dst.st_dev)
      {
        buf[v24] = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        {
LABEL_26:
          *(_OWORD *)a2 = *(_OWORD *)buf;
          *(_QWORD *)(a2 + 16) = *(_QWORD *)&buf[16];
          goto LABEL_27;
        }
LABEL_42:
        operator delete(*(void **)a2);
        goto LABEL_26;
      }
    }
    memmove(v25, v23, v24);
    *((_BYTE *)v25 + v24) = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_42;
  }
  v168 = *(NSObject **)qword_253D37290;
  if (os_log_type_enabled(*(os_log_t *)qword_253D37290, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_212A4D000, v168, OS_LOG_TYPE_ERROR, "error: failed to load file", buf, 2u);
  }
LABEL_27:
  if (*(_QWORD *)&__dst.st_dev)
  {
    __dst.st_ino = *(_QWORD *)&__dst.st_dev;
    operator delete(*(void **)&__dst.st_dev);
  }
  if (!v22)
    goto LABEL_356;
  *(_QWORD *)buf = 0;
  if (SHIBYTE(v185[2]) >= 0)
    v26 = v185;
  else
    v26 = (void **)v185[0];
  v27 = (void *)objc_msgSend(MEMORY[0x24BDBCE90], "inputStreamWithFileAtPath:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v26));
  v28 = v27;
  if (!v27)
  {
    v166 = *(NSObject **)qword_253D37290;
    if (!os_log_type_enabled(*(os_log_t *)qword_253D37290, OS_LOG_TYPE_ERROR))
      goto LABEL_356;
    LOWORD(__dst.st_dev) = 0;
    v167 = "error: failed to read file";
LABEL_349:
    _os_log_error_impl(&dword_212A4D000, v166, OS_LOG_TYPE_ERROR, v167, (uint8_t *)&__dst, 2u);
    v165 = 0;
    v32 = v7;
    if ((SHIBYTE(v185[2]) & 0x80000000) == 0)
      goto LABEL_358;
    goto LABEL_357;
  }
  objc_msgSend(v27, "open");
  v29 = (ctu *)objc_msgSend(MEMORY[0x24BDD1608], "JSONObjectWithStream:options:error:", v28, 0, buf);
  v30 = (_anonymous_namespace_ *)objc_msgSend(v28, "close");
  if (!v29)
  {
    v169 = *(NSObject **)qword_253D37290;
    if (os_log_type_enabled(*(os_log_t *)qword_253D37290, OS_LOG_TYPE_ERROR))
    {
      v170 = objc_msgSend((id)objc_msgSend(*(id *)buf, "localizedDescription"), "UTF8String");
      __dst.st_dev = 136315138;
      *(_QWORD *)&__dst.st_mode = v170;
      _os_log_error_impl(&dword_212A4D000, v169, OS_LOG_TYPE_ERROR, "error: failed to create json object (%s)", (uint8_t *)&__dst, 0xCu);
      v165 = 0;
      v32 = v7;
      if ((SHIBYTE(v185[2]) & 0x80000000) == 0)
        goto LABEL_358;
      goto LABEL_357;
    }
LABEL_356:
    v165 = 0;
    v32 = v7;
    if ((SHIBYTE(v185[2]) & 0x80000000) == 0)
      goto LABEL_358;
    goto LABEL_357;
  }
  ctu::cf_to_xpc(v29, v31);
  v32 = *(xpc_object_t *)&__dst.st_dev;
  v33 = (_anonymous_namespace_ *)MEMORY[0x24BDACFA0];
  if (*(_QWORD *)&__dst.st_dev && (_anonymous_namespace_ *)MEMORY[0x212BFAA90](*(_QWORD *)&__dst.st_dev) == v33)
    xpc_retain(v32);
  else
    v32 = xpc_null_create();
  v36 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v36);
  xpc_release(*(xpc_object_t *)&__dst.st_dev);
  v37 = (_anonymous_namespace_ *)MEMORY[0x212BFAA90](v32);
  if (v37 == v33)
  {
    v38 = xpc_null_create();
    v39 = xpc_null_create();
    v198 = 0xAAAAAAAAAAAAAAAALL;
    v40.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v40.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    v196 = v40;
    v197 = v40;
    v194 = v40;
    v195 = v40;
    v192 = v40;
    v193 = v40;
    v190 = v40;
    v191 = v40;
    *(timespec *)&__dst.st_blksize = v40;
    *(timespec *)__dst.st_qspare = v40;
    __dst.st_birthtimespec = v40;
    *(timespec *)&__dst.st_size = v40;
    __dst.st_mtimespec = v40;
    __dst.st_ctimespec = v40;
    *(timespec *)&__dst.st_uid = v40;
    __dst.st_atimespec = v40;
    *(timespec *)&__dst.st_dev = v40;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__dst);
    memset(v184, 0, 24);
    memset(v183, 0, 24);
    value = xpc_dictionary_get_value(v32, "crash_details");
    v42 = value;
    v43 = MEMORY[0x24BDACF78];
    if (value)
    {
      xpc_retain(value);
    }
    else
    {
      v42 = xpc_null_create();
      if (!v42)
      {
        v44 = xpc_null_create();
        v42 = 0;
        goto LABEL_52;
      }
    }
    if (MEMORY[0x212BFAA90](v42) == v43)
    {
      xpc_retain(v42);
      v44 = v42;
    }
    else
    {
      v44 = xpc_null_create();
    }
LABEL_52:
    xpc_release(v42);
    v45 = xpc_null_create();
    xpc_release(v39);
    xpc_release(v45);
    if (MEMORY[0x212BFAA90](v44) != v43)
    {
      if (v8)
      {
        xpc_retain(v8);
        v46 = v8;
      }
      else
      {
        v46 = xpc_null_create();
      }
LABEL_64:
      v49 = xpc_null_create();
      xpc_release(v8);
      xpc_release(v49);
      v50 = (_anonymous_namespace_ *)MEMORY[0x212BFAA90](v46);
      v51 = v50;
      if (v50 != v33)
      {
        v173 = *(NSObject **)qword_253D37290;
        if (os_log_type_enabled(*(os_log_t *)qword_253D37290, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_212A4D000, v173, OS_LOG_TYPE_INFO, "unexpected coredump format, skip parsing coredump report any further", buf, 2u);
        }
        v54 = v38;
        if (SHIBYTE(v183[2]) < 0)
          goto LABEL_207;
        goto LABEL_200;
      }
      v52 = xpc_dictionary_get_value(v32, "title");
      v53 = v52;
      if (v52)
      {
        xpc_retain(v52);
      }
      else
      {
        v53 = xpc_null_create();
        if (!v53)
        {
          v54 = xpc_null_create();
          v53 = 0;
          goto LABEL_72;
        }
      }
      if ((_anonymous_namespace_ *)MEMORY[0x212BFAA90](v53) == v33)
      {
        xpc_retain(v53);
        v54 = v53;
      }
      else
      {
        v54 = xpc_null_create();
      }
LABEL_72:
      xpc_release(v53);
      v55 = xpc_null_create();
      xpc_release(v38);
      xpc_release(v55);
      v56 = MEMORY[0x212BFAA90](v54);
      if ((_anonymous_namespace_ *)v56 != v33)
      {
        HIBYTE(v182[2]) = 7;
        strcpy((char *)v182, "unknown");
        if ((SHIBYTE(v187) & 0x80000000) == 0)
          goto LABEL_80;
        goto LABEL_74;
      }
      v57 = xpc_dictionary_get_value(v54, "name");
      object = v57;
      if (v57)
        xpc_retain(v57);
      else
        object = xpc_null_create();
      memset(buf, 0, 24);
      xpc::dyn_cast_or_default();
      if ((char)buf[23] < 0)
      {
        operator delete(*(void **)buf);
        if ((SHIBYTE(v187) & 0x80000000) == 0)
        {
LABEL_80:
          *(_OWORD *)__p = *(_OWORD *)v182;
          v187 = v182[2];
          HIBYTE(v182[2]) = 0;
          LOBYTE(v182[0]) = 0;
          if ((_anonymous_namespace_ *)v56 == v33)
            xpc_release(object);
          v58 = xpc_dictionary_get_value(v46, "log_data");
          v182[0] = v58;
          if (v58)
            xpc_retain(v58);
          else
            v182[0] = xpc_null_create();
          xpc::dyn_cast_or_default();
          if (SHIBYTE(v184[2]) < 0)
            operator delete(v184[0]);
          *(_OWORD *)v184 = *(_OWORD *)buf;
          v184[2] = *(void **)&buf[16];
          buf[23] = 0;
          buf[0] = 0;
          xpc_release(v182[0]);
          v59 = (void *)HIBYTE(v184[2]);
          if (SHIBYTE(v184[2]) < 0)
            v59 = v184[1];
          v60 = (char **)MEMORY[0x24BED9C00];
          if (!v59)
          {
LABEL_120:
            v76 = xpc_dictionary_get_value(v46, "ucs_crash_id");
            v182[0] = v76;
            if (v76)
              xpc_retain(v76);
            else
              v182[0] = xpc_null_create();
            xpc::dyn_cast_or_default();
            if (SHIBYTE(v183[2]) < 0)
              operator delete(v183[0]);
            *(_OWORD *)v183 = *(_OWORD *)buf;
            v183[2] = *(void **)&buf[16];
            buf[23] = 0;
            buf[0] = 0;
            xpc_release(v182[0]);
            v77 = (void *)HIBYTE(v183[2]);
            if (SHIBYTE(v183[2]) < 0)
              v77 = v183[1];
            if (!v77)
              goto LABEL_176;
            if ((__dst.st_gen & 0x10) != 0)
            {
              tv_nsec = *(_QWORD *)&__dst.st_blksize;
              if (*(_QWORD *)&__dst.st_blksize < __dst.st_ctimespec.tv_nsec)
              {
                *(_QWORD *)&__dst.st_blksize = __dst.st_ctimespec.tv_nsec;
                tv_nsec = __dst.st_ctimespec.tv_nsec;
              }
              tv_sec = (const void *)__dst.st_ctimespec.tv_sec;
              v78 = tv_nsec - __dst.st_ctimespec.tv_sec;
              if ((unint64_t)(tv_nsec - __dst.st_ctimespec.tv_sec) > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_210;
            }
            else
            {
              if ((__dst.st_gen & 8) == 0)
              {
                v78 = 0;
                buf[23] = 0;
                v79 = buf;
                goto LABEL_141;
              }
              tv_sec = (const void *)__dst.st_atimespec.tv_nsec;
              v78 = __dst.st_mtimespec.tv_nsec - __dst.st_atimespec.tv_nsec;
              if (__dst.st_mtimespec.tv_nsec - __dst.st_atimespec.tv_nsec > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_210:
                std::string::__throw_length_error[abi:ne180100]();
            }
            if (v78 >= 0x17)
            {
              v82 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v78 | 7) != 0x17)
                v82 = v78 | 7;
              v83 = v82 + 1;
              v79 = operator new(v82 + 1);
              *(_QWORD *)&buf[8] = v78;
              *(_QWORD *)&buf[16] = v83 | 0x8000000000000000;
              *(_QWORD *)buf = v79;
            }
            else
            {
              buf[23] = v78;
              v79 = buf;
              if (!v78)
              {
LABEL_141:
                v79[v78] = 0;
                if ((char)buf[23] < 0)
                {
                  v84 = *(_QWORD *)&buf[8];
                  operator delete(*(void **)buf);
                  if (!v84)
                    goto LABEL_146;
                }
                else if (!buf[23])
                {
LABEL_146:
                  v85 = (void *)HIBYTE(v183[2]);
                  v86 = v183;
                  if (SHIBYTE(v183[2]) < 0)
                  {
                    v86 = (void **)v183[0];
                    v85 = v183[1];
                  }
                  v182[0] = v86;
                  v182[1] = v85;
                  first_not_of = (xpc_object_t)ctu::llvm::StringRef::find_first_not_of();
                  if (first_not_of >= v182[1])
                    v88 = v182[1];
                  else
                    v88 = first_not_of;
                  if (*v60 >= (char *)((char *)v182[1] - (char *)v88))
                    v89 = (char *)((char *)v182[1] - (char *)v88);
                  else
                    v89 = *v60;
                  *(_QWORD *)buf = (char *)v182[0] + (unint64_t)v88;
                  *(_QWORD *)&buf[8] = v89;
                  last_not_of = ctu::llvm::StringRef::find_last_not_of();
                  v92 = *(const void **)buf;
                  v91 = *(_QWORD *)&buf[8];
                  if ((unint64_t)(last_not_of + 1) < *(_QWORD *)&buf[8])
                    v93 = last_not_of + 1;
                  else
                    v93 = *(_QWORD *)&buf[8];
                  v94 = *(_QWORD *)&buf[8] - (_QWORD)v89 + v93;
                  *(_QWORD *)&buf[8] = 0xAAAAAAAAAAAAAAAALL;
                  *(_QWORD *)&buf[16] = 0xAAAAAAAAAAAAAAAALL;
                  if (v94 >= v91)
                    v95 = v91;
                  else
                    v95 = v94;
                  *(_QWORD *)buf = 0xAAAAAAAAAAAAAAAALL;
                  if (v95 > 0x7FFFFFFFFFFFFFF7)
                    std::string::__throw_length_error[abi:ne180100]();
                  if (v95 >= 0x17)
                  {
                    v97 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v95 | 7) != 0x17)
                      v97 = v95 | 7;
                    v98 = v97 + 1;
                    v96 = operator new(v97 + 1);
                    *(_QWORD *)&buf[8] = v95;
                    *(_QWORD *)&buf[16] = v98 | 0x8000000000000000;
                    *(_QWORD *)buf = v96;
                  }
                  else
                  {
                    buf[23] = v95;
                    v96 = buf;
                    if (!v95)
                      goto LABEL_168;
                  }
                  memmove(v96, v92, v95);
LABEL_168:
                  *((_BYTE *)v96 + v95) = 0;
                  HIBYTE(v182[2]) = 2;
                  strcpy((char *)v182, "c:");
                  v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.st_uid, (uint64_t)v182, 2);
                  if ((buf[23] & 0x80u) == 0)
                    v100 = buf;
                  else
                    v100 = *(uint8_t **)buf;
                  if ((buf[23] & 0x80u) == 0)
                    v101 = buf[23];
                  else
                    v101 = *(_QWORD *)&buf[8];
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)v100, v101);
                  if ((SHIBYTE(v182[2]) & 0x80000000) == 0)
                  {
                    if (((char)buf[23] & 0x80000000) == 0)
                      goto LABEL_176;
LABEL_181:
                    operator delete(*(void **)buf);
                    st_gen = __dst.st_gen;
                    if ((__dst.st_gen & 0x10) == 0)
                      goto LABEL_177;
                    goto LABEL_182;
                  }
                  operator delete(v182[0]);
                  if ((char)buf[23] < 0)
                    goto LABEL_181;
LABEL_176:
                  st_gen = __dst.st_gen;
                  if ((__dst.st_gen & 0x10) == 0)
                  {
LABEL_177:
                    if ((st_gen & 8) == 0)
                    {
                      v103 = 0;
                      buf[23] = 0;
                      v104 = buf;
                      goto LABEL_193;
                    }
                    p_tv_nsec = (timespec *)&__dst.st_atimespec.tv_nsec;
                    v106 = __dst.st_mtimespec.tv_nsec;
LABEL_185:
                    v107 = (const void *)p_tv_nsec->tv_sec;
                    v103 = v106 - p_tv_nsec->tv_sec;
                    if (v103 > 0x7FFFFFFFFFFFFFF7)
                      std::string::__throw_length_error[abi:ne180100]();
                    if (v103 >= 0x17)
                    {
                      v108 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v103 | 7) != 0x17)
                        v108 = v103 | 7;
                      v109 = v108 + 1;
                      v104 = operator new(v108 + 1);
                      *(_QWORD *)&buf[8] = v103;
                      *(_QWORD *)&buf[16] = v109 | 0x8000000000000000;
                      *(_QWORD *)buf = v104;
                    }
                    else
                    {
                      buf[23] = v106 - LOBYTE(p_tv_nsec->tv_sec);
                      v104 = buf;
                      if (!v103)
                        goto LABEL_193;
                    }
                    memmove(v104, v107, v103);
LABEL_193:
                    *((_BYTE *)v104 + v103) = 0;
                    if ((buf[23] & 0x80u) == 0)
                      v110 = buf;
                    else
                      v110 = *(uint8_t **)buf;
                    v111 = xpc_string_create((const char *)v110);
                    v33 = (_anonymous_namespace_ *)MEMORY[0x24BDACFA0];
                    if (!v111)
                      v111 = xpc_null_create();
                    xpc_dictionary_set_value(v46, "log_data", v111);
                    v112 = xpc_null_create();
                    xpc_release(v111);
                    xpc_release(v112);
                    if (((char)buf[23] & 0x80000000) == 0)
                    {
                      if ((SHIBYTE(v183[2]) & 0x80000000) == 0)
                        goto LABEL_200;
LABEL_207:
                      operator delete(v183[0]);
                      if ((SHIBYTE(v184[2]) & 0x80000000) == 0)
                        goto LABEL_201;
                      goto LABEL_208;
                    }
                    operator delete(*(void **)buf);
                    if (SHIBYTE(v183[2]) < 0)
                      goto LABEL_207;
LABEL_200:
                    if ((SHIBYTE(v184[2]) & 0x80000000) == 0)
                      goto LABEL_201;
LABEL_208:
                    operator delete(v184[0]);
LABEL_201:
                    v113 = *MEMORY[0x24BEDB7F0];
                    *(_QWORD *)&__dst.st_dev = v113;
                    v114 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    v174 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)((char *)&__dst.st_dev + *(_QWORD *)(v113 - 24)) = v174;
                    v175 = v114;
                    *(_QWORD *)&__dst.st_uid = v114;
                    *(_QWORD *)&__dst.st_rdev = MEMORY[0x24BEDB848] + 16;
                    if (SHIBYTE(__dst.st_blocks) < 0)
                      operator delete((void *)__dst.st_birthtimespec.tv_nsec);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BFA3D0](__dst.st_qspare);
                    xpc_release(v44);
                    xpc_release(v54);
                    if (v51 != v33)
                      goto LABEL_335;
                    memset(buf, 170, 24);
                    v115 = xpc_dictionary_get_value(v46, "host_taskname");
                    *(_QWORD *)&__dst.st_dev = v115;
                    if (v115)
                      xpc_retain(v115);
                    else
                      *(_QWORD *)&__dst.st_dev = xpc_null_create();
                    xpc::dyn_cast_or_default();
                    xpc_release(*(xpc_object_t *)&__dst.st_dev);
                    memset(v184, 170, 24);
                    v116 = xpc_dictionary_get_value(v46, "host_filename");
                    *(_QWORD *)&__dst.st_dev = v116;
                    if (v116)
                      xpc_retain(v116);
                    else
                      *(_QWORD *)&__dst.st_dev = xpc_null_create();
                    xpc::dyn_cast_or_default();
                    xpc_release(*(xpc_object_t *)&__dst.st_dev);
                    memset(v183, 170, 24);
                    v117 = xpc_dictionary_get_value(v46, "host_line");
                    *(_QWORD *)&__dst.st_dev = v117;
                    if (v117)
                      xpc_retain(v117);
                    else
                      *(_QWORD *)&__dst.st_dev = xpc_null_create();
                    xpc::dyn_cast_or_default();
                    xpc_release(*(xpc_object_t *)&__dst.st_dev);
                    memset(v182, 170, sizeof(v182));
                    v118 = xpc_dictionary_get_value(v46, "subsystem");
                    *(_QWORD *)&__dst.st_dev = v118;
                    if (v118)
                      xpc_retain(v118);
                    else
                      *(_QWORD *)&__dst.st_dev = xpc_null_create();
                    xpc::dyn_cast_or_default();
                    xpc_release(*(xpc_object_t *)&__dst.st_dev);
                    memset(v180, 170, sizeof(v180));
                    v119 = xpc_dictionary_get_value(v46, "log_data");
                    *(_QWORD *)&__dst.st_dev = v119;
                    if (v119)
                      xpc_retain(v119);
                    else
                      *(_QWORD *)&__dst.st_dev = xpc_null_create();
                    xpc::dyn_cast_or_default();
                    xpc_release(*(xpc_object_t *)&__dst.st_dev);
                    v198 = 0xAAAAAAAAAAAAAAAALL;
                    v120.tv_sec = 0xAAAAAAAAAAAAAAAALL;
                    v120.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
                    v196 = v120;
                    v197 = v120;
                    v194 = v120;
                    v195 = v120;
                    v192 = v120;
                    v193 = v120;
                    v190 = v120;
                    v191 = v120;
                    *(timespec *)&__dst.st_blksize = v120;
                    *(timespec *)__dst.st_qspare = v120;
                    __dst.st_birthtimespec = v120;
                    *(timespec *)&__dst.st_size = v120;
                    __dst.st_mtimespec = v120;
                    __dst.st_ctimespec = v120;
                    *(timespec *)&__dst.st_uid = v120;
                    __dst.st_atimespec = v120;
                    *(timespec *)&__dst.st_dev = v120;
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__dst);
                    v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.st_uid, (uint64_t)"TASK=", 5);
                    if ((buf[23] & 0x80u) == 0)
                      v122 = buf;
                    else
                      v122 = *(uint8_t **)buf;
                    if ((buf[23] & 0x80u) == 0)
                      v123 = buf[23];
                    else
                      v123 = *(_QWORD *)&buf[8];
                    v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)v122, v123);
                    v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)"@", 1);
                    if (SHIBYTE(v184[2]) >= 0)
                      v126 = v184;
                    else
                      v126 = (void **)v184[0];
                    if (SHIBYTE(v184[2]) >= 0)
                      v127 = HIBYTE(v184[2]);
                    else
                      v127 = (uint64_t)v184[1];
                    v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)v126, v127);
                    v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)":", 1);
                    if (SHIBYTE(v183[2]) >= 0)
                      v130 = v183;
                    else
                      v130 = (void **)v183[0];
                    if (SHIBYTE(v183[2]) >= 0)
                      v131 = HIBYTE(v183[2]);
                    else
                      v131 = (uint64_t)v183[1];
                    v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)v130, v131);
                    v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)",CPU=", 5);
                    if (SHIBYTE(v182[2]) >= 0)
                      v134 = v182;
                    else
                      v134 = (xpc_object_t *)v182[0];
                    if (SHIBYTE(v182[2]) >= 0)
                      v135 = HIBYTE(v182[2]);
                    else
                      v135 = (uint64_t)v182[1];
                    v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)v134, v135);
                    v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)",LOG=", 5);
                    if (SHIBYTE(v180[2]) >= 0)
                      v138 = v180;
                    else
                      v138 = (void **)v180[0];
                    if (SHIBYTE(v180[2]) >= 0)
                      v139 = HIBYTE(v180[2]);
                    else
                      v139 = (uint64_t)v180[1];
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)v138, v139);
                    if ((__dst.st_gen & 0x10) != 0)
                    {
                      v142 = *(_QWORD *)&__dst.st_blksize;
                      if (*(_QWORD *)&__dst.st_blksize < __dst.st_ctimespec.tv_nsec)
                      {
                        *(_QWORD *)&__dst.st_blksize = __dst.st_ctimespec.tv_nsec;
                        v142 = __dst.st_ctimespec.tv_nsec;
                      }
                      v143 = (const void *)__dst.st_ctimespec.tv_sec;
                      v140 = v142 - __dst.st_ctimespec.tv_sec;
                      if ((unint64_t)(v142 - __dst.st_ctimespec.tv_sec) > 0x7FFFFFFFFFFFFFF7)
                        goto LABEL_288;
                    }
                    else
                    {
                      if ((__dst.st_gen & 8) == 0)
                      {
                        v140 = 0;
                        HIBYTE(v179) = 0;
                        v141 = &v178;
                        goto LABEL_267;
                      }
                      v143 = (const void *)__dst.st_atimespec.tv_nsec;
                      v140 = __dst.st_mtimespec.tv_nsec - __dst.st_atimespec.tv_nsec;
                      if (__dst.st_mtimespec.tv_nsec - __dst.st_atimespec.tv_nsec > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_288:
                        std::string::__throw_length_error[abi:ne180100]();
                    }
                    if (v140 >= 0x17)
                    {
                      v144 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v140 | 7) != 0x17)
                        v144 = v140 | 7;
                      v145 = v144 + 1;
                      v141 = (__int128 *)operator new(v144 + 1);
                      *((_QWORD *)&v178 + 1) = v140;
                      v179 = v145 | 0x8000000000000000;
                      *(_QWORD *)&v178 = v141;
                    }
                    else
                    {
                      HIBYTE(v179) = v140;
                      v141 = &v178;
                      if (!v140)
                      {
LABEL_267:
                        *((_BYTE *)v141 + v140) = 0;
                        if (*(char *)(v176 + 23) < 0)
                          operator delete(*(void **)v176);
                        *(_OWORD *)v176 = v178;
                        *(_QWORD *)(v176 + 16) = v179;
                        if (a4)
                        {
                          if (SHIBYTE(v180[2]) >= 0)
                            v146 = HIBYTE(v180[2]);
                          else
                            v146 = (uint64_t)v180[1];
                          if (SHIBYTE(v180[2]) >= 0)
                            v147 = v180;
                          else
                            v147 = (void **)v180[0];
                          if (v146 > 9)
                          {
                            v148 = (char *)v147 + v146;
                            v149 = v146;
                            v150 = v147;
                            do
                            {
                              v151 = (char *)memchr(v150, 54, v149 - 9);
                              if (!v151)
                                break;
                              if (*(_QWORD *)v151 == 0x4646304344303036 && *((_WORD *)v151 + 4) == 17733)
                              {
                                if (v151 != v148 && v151 - (char *)v147 != -1)
                                {
LABEL_308:
                                  v158 = 3;
                                  goto LABEL_327;
                                }
                                break;
                              }
                              v150 = (void **)(v151 + 1);
                              v149 = v148 - (char *)v150;
                            }
                            while (v148 - (char *)v150 >= 10);
                            if (v146 >= 27)
                            {
                              v153 = v147;
                              do
                              {
                                v154 = (char *)memchr(v153, 65, v146 - 26);
                                if (!v154)
                                  break;
                                if (*(_QWORD *)v154 == 0x6563726F66205041
                                  && *((_QWORD *)v154 + 1) == 0x756465726F632064
                                  && *((_QWORD *)v154 + 2) == 0x532061697620706DLL
                                  && *(_QWORD *)(v154 + 19) == 0x494D505320616976)
                                {
                                  if (v154 == v148 || v154 - (char *)v147 == -1)
                                    break;
                                  goto LABEL_308;
                                }
                                v153 = (void **)(v154 + 1);
                                v146 = v148 - (char *)v153;
                              }
                              while (v148 - (char *)v153 >= 27);
                            }
                          }
                          if (SHIBYTE(v187) >= 0)
                            v159 = __p;
                          else
                            v159 = (void **)__p[0];
                          v160 = HIBYTE(v187);
                          if (SHIBYTE(v187) < 0)
                            v160 = (uint64_t)__p[1];
                          if (v160 >= 9)
                          {
                            v161 = (char *)v159 + v160;
                            v162 = v159;
                            do
                            {
                              v163 = (char *)memchr(v162, 101, v160 - 8);
                              if (!v163)
                                break;
                              if (*(_QWORD *)v163 == 0x636E656772656D65 && v163[8] == 121)
                              {
                                if (v163 != v161 && v163 - (char *)v159 != -1)
                                {
                                  v158 = 1;
                                  goto LABEL_327;
                                }
                                break;
                              }
                              v162 = (void **)(v163 + 1);
                              v160 = v161 - (char *)v162;
                            }
                            while (v161 - (char *)v162 >= 9);
                          }
                          v158 = 2;
LABEL_327:
                          *a4 = v158;
                        }
                        *(_QWORD *)&__dst.st_dev = v113;
                        *(_QWORD *)((char *)&__dst.st_dev + *(_QWORD *)(v113 - 24)) = v174;
                        *(_QWORD *)&__dst.st_uid = v175;
                        *(_QWORD *)&__dst.st_rdev = MEMORY[0x24BEDB848] + 16;
                        if (SHIBYTE(__dst.st_blocks) < 0)
                          operator delete((void *)__dst.st_birthtimespec.tv_nsec);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x212BFA3D0](__dst.st_qspare);
                        if (SHIBYTE(v180[2]) < 0)
                        {
                          operator delete(v180[0]);
                          if ((SHIBYTE(v182[2]) & 0x80000000) == 0)
                          {
LABEL_332:
                            if ((SHIBYTE(v183[2]) & 0x80000000) == 0)
                              goto LABEL_333;
                            goto LABEL_339;
                          }
                        }
                        else if ((SHIBYTE(v182[2]) & 0x80000000) == 0)
                        {
                          goto LABEL_332;
                        }
                        operator delete(v182[0]);
                        if ((SHIBYTE(v183[2]) & 0x80000000) == 0)
                        {
LABEL_333:
                          if ((SHIBYTE(v184[2]) & 0x80000000) == 0)
                            goto LABEL_334;
LABEL_340:
                          operator delete(v184[0]);
                          if ((char)buf[23] < 0)
                            goto LABEL_341;
LABEL_335:
                          v165 = 1;
                          v8 = v46;
                          if ((SHIBYTE(v185[2]) & 0x80000000) == 0)
                            goto LABEL_358;
                          goto LABEL_357;
                        }
LABEL_339:
                        operator delete(v183[0]);
                        if ((SHIBYTE(v184[2]) & 0x80000000) == 0)
                        {
LABEL_334:
                          if (((char)buf[23] & 0x80000000) == 0)
                            goto LABEL_335;
LABEL_341:
                          operator delete(*(void **)buf);
                          v165 = 1;
                          v8 = v46;
                          if ((SHIBYTE(v185[2]) & 0x80000000) == 0)
                            goto LABEL_358;
                          goto LABEL_357;
                        }
                        goto LABEL_340;
                      }
                    }
                    memmove(v141, v143, v140);
                    goto LABEL_267;
                  }
LABEL_182:
                  v106 = *(_QWORD *)&__dst.st_blksize;
                  if (*(_QWORD *)&__dst.st_blksize < __dst.st_ctimespec.tv_nsec)
                  {
                    *(_QWORD *)&__dst.st_blksize = __dst.st_ctimespec.tv_nsec;
                    v106 = __dst.st_ctimespec.tv_nsec;
                  }
                  p_tv_nsec = &__dst.st_ctimespec;
                  goto LABEL_185;
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.st_uid, (uint64_t)", ", 2);
                goto LABEL_146;
              }
            }
            memmove(v79, tv_sec, v78);
            goto LABEL_141;
          }
          v61 = v184;
          if (SHIBYTE(v184[2]) < 0)
            v61 = (void **)v184[0];
          v182[0] = v61;
          v182[1] = v59;
          v62 = (xpc_object_t)ctu::llvm::StringRef::find_first_not_of();
          if (v62 >= v182[1])
            v63 = v182[1];
          else
            v63 = v62;
          if (*v60 >= (char *)((char *)v182[1] - (char *)v63))
            v64 = (char *)((char *)v182[1] - (char *)v63);
          else
            v64 = *v60;
          *(_QWORD *)buf = (char *)v182[0] + (unint64_t)v63;
          *(_QWORD *)&buf[8] = v64;
          v65 = ctu::llvm::StringRef::find_last_not_of();
          v67 = *(const void **)buf;
          v66 = *(_QWORD *)&buf[8];
          if ((unint64_t)(v65 + 1) < *(_QWORD *)&buf[8])
            v68 = v65 + 1;
          else
            v68 = *(_QWORD *)&buf[8];
          v69 = *(_QWORD *)&buf[8] - (_QWORD)v64 + v68;
          *(_QWORD *)&buf[8] = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&buf[16] = 0xAAAAAAAAAAAAAAAALL;
          if (v69 >= v66)
            v70 = v66;
          else
            v70 = v69;
          *(_QWORD *)buf = 0xAAAAAAAAAAAAAAAALL;
          if (v70 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v70 >= 0x17)
          {
            v72 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v70 | 7) != 0x17)
              v72 = v70 | 7;
            v73 = v72 + 1;
            v71 = operator new(v72 + 1);
            *(_QWORD *)&buf[8] = v70;
            *(_QWORD *)&buf[16] = v73 | 0x8000000000000000;
            *(_QWORD *)buf = v71;
          }
          else
          {
            buf[23] = v70;
            v71 = buf;
            if (!v70)
            {
LABEL_112:
              v71[v70] = 0;
              if ((buf[23] & 0x80u) == 0)
                v74 = buf;
              else
                v74 = *(uint8_t **)buf;
              if ((buf[23] & 0x80u) == 0)
                v75 = buf[23];
              else
                v75 = *(_QWORD *)&buf[8];
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.st_uid, (uint64_t)v74, v75);
              if ((char)buf[23] < 0)
                operator delete(*(void **)buf);
              goto LABEL_120;
            }
          }
          memmove(v71, v67, v70);
          goto LABEL_112;
        }
      }
      else if ((SHIBYTE(v187) & 0x80000000) == 0)
      {
        goto LABEL_80;
      }
LABEL_74:
      operator delete(__p[0]);
      goto LABEL_80;
    }
    v47 = xpc_array_get_value(v44, 0);
    v48 = v47;
    if (v47)
    {
      xpc_retain(v47);
    }
    else
    {
      v48 = xpc_null_create();
      if (!v48)
      {
        v46 = xpc_null_create();
        v48 = 0;
LABEL_63:
        xpc_release(v48);
        goto LABEL_64;
      }
    }
    if ((_anonymous_namespace_ *)MEMORY[0x212BFAA90](v48) == v33)
    {
      xpc_retain(v48);
      v46 = v48;
    }
    else
    {
      v46 = xpc_null_create();
    }
    goto LABEL_63;
  }
  v171 = *(NSObject **)qword_253D37290;
  if (!os_log_type_enabled(*(os_log_t *)qword_253D37290, OS_LOG_TYPE_ERROR))
  {
    v7 = v32;
    goto LABEL_356;
  }
  LOWORD(__dst.st_dev) = 0;
  _os_log_error_impl(&dword_212A4D000, v171, OS_LOG_TYPE_ERROR, "error: failed to convert json object to xpc dictionary", (uint8_t *)&__dst, 2u);
  v165 = 0;
  if (SHIBYTE(v185[2]) < 0)
LABEL_357:
    operator delete(v185[0]);
LABEL_358:
  if (SHIBYTE(v187) < 0)
    operator delete(__p[0]);
  xpc_release(v8);
  xpc_release(v32);
  return v165;
}

void sub_212AC50A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, xpc_object_t object, xpc_object_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,xpc_object_t a55)
{
  void *v55;
  void *v56;
  void *v57;
  void *v58;

  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a55);
  xpc_release(v57);
  xpc_release(v58);
  if (a42 < 0)
    operator delete(a37);
  if (a49 < 0)
    operator delete(a44);
  xpc_release(v56);
  xpc_release(v55);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::getLogClient(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  std::string __p;
  std::string v3;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_2);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v3, "com.apple.telephony.basebandservices.support");
    std::string::basic_string[abi:ne180100]<0>(&__p, "coredump");
    support::log::client::client(qword_253D37260, &v3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v3.__r_.__value_.__l.__data_);
    __cxa_guard_release(&_MergedGlobals_2);
  }
}

void sub_212AC55D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      __cxa_guard_abort(&_MergedGlobals_2);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  __cxa_guard_abort(&_MergedGlobals_2);
  _Unwind_Resume(a1);
}

void sub_212AC5638(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_MergedGlobals_2);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_9()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_212A4D000);
  }
  return result;
}

uint64_t INTStateMachineStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;

  if (*(_BYTE *)(a1 + 368))
  {
    _BBUFSDebugPrint("INTStateMachineStart", "BBUFSServer already running\n", a3, a4, a5, a6, a7, a8, v10);
  }
  else
  {
    _BBUFSDebugPrint("INTStateMachineStart", "BBUFSServer started successfully\n", a3, a4, a5, a6, a7, a8, v10);
    *(_BYTE *)(a1 + 368) = 1;
  }
  return 1;
}

uint64_t INTStateMachineStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;

  if (*(_BYTE *)(a1 + 368))
  {
    _BBUFSDebugPrint("INTStateMachineStop", "BBUFSServer stopped successfully\n", a3, a4, a5, a6, a7, a8, v10);
    *(_BYTE *)(a1 + 368) = 0;
  }
  else
  {
    _BBUFSDebugPrint("INTStateMachineStop", "BBUFSServer not running\n", a3, a4, a5, a6, a7, a8, v10);
  }
  return 1;
}

uint64_t INTStateMachinePerformSnapshot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v10;
  const char *v11;
  BOOL v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *size;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t (***v40)(_QWORD, void **, void **, uint64_t);
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  dispatch_semaphore_t *v48;
  dispatch_time_t v49;
  intptr_t v50;
  const char *v51;
  size_t v52;
  std::string::size_type v53;
  std::string *p_object;
  void **v55;
  void **v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  NSObject *v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  char BackupDir;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  size_t v73;
  std::string::size_type v74;
  std::string *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  const char *v85;
  size_t v86;
  std::string::size_type v87;
  std::string *v88;
  uint64_t v89;
  uint64_t v90;
  char File;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::string *v98;
  std::string *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  dispatch_time_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::string *v114;
  std::string *v115;
  std::string *v116;
  dispatch_semaphore_t *v117;
  dispatch_time_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v140;
  char v141;
  char v142;
  char v143;
  char *__s;
  std::string v145;
  void *v146[2];
  uint64_t v147;
  uint64_t (*v148)(uint64_t, uint64_t);
  void (*v149)(uint64_t);
  const char *v150;
  dispatch_object_t v151[2];
  std::string v152;
  void *v153[2];
  char v154;
  std::string object;
  void *v156;
  uint64_t *v157;
  uint64_t *v158;
  void *v159;
  std::string v160;
  std::string v161;
  void *v162;
  void *__p[3];
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t (*v169)(uint64_t, uint64_t);
  void (*v170)(uint64_t);
  const char *v171;
  dispatch_object_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  char v176;
  std::string aBlock;
  void *v178;
  uint64_t *v179;
  void **v180;
  uint64_t v181;

  v181 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 368))
  {
    _BBUFSDebugPrint("INTStateMachinePerformSnapshot", "BBUFSServer failed to perform snapshot: server not running\n", a3, a4, a5, a6, a7, a8, v140);
    return 0;
  }
  __s = (char *)(a1 + 104);
  memset(&v145, 0, sizeof(v145));
  v9 = 1;
  while (1)
  {
    v10 = *(_DWORD *)(a1 + 376);
    v11 = "TransferFile";
    if (v10 != 1)
      v11 = "Unknown";
    v12 = v10 == 0;
    v13 = "Snapshot";
    if (!v12)
      LOBYTE(v13) = (_BYTE)v11;
    _BBUFSDebugPrint("INTStateMachinePerformSnapshot", "---------------------%s---------------------\n", a3, a4, a5, a6, a7, a8, (char)v13);
    v20 = *(_DWORD *)(a1 + 376);
    if (v20 != 1)
      break;
    v173 = 0;
    v174 = &v173;
    v175 = 0x2020000000;
    v176 = 0;
    v146[0] = 0;
    v146[1] = v146;
    v147 = 0x3812000000;
    v148 = __Block_byref_object_copy__0;
    v149 = __Block_byref_object_dispose__0;
    v150 = "";
    v151[0] = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
    v151[0] = dispatch_semaphore_create(0);
    v166 = 0;
    v167 = &v166;
    v168 = 0x3812000000;
    v169 = __Block_byref_object_copy__0;
    v170 = __Block_byref_object_dispose__0;
    v171 = "";
    v172 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
    v172 = dispatch_semaphore_create(0);
    v164 = 0xAAAAAAAAAAAAAAAALL;
    v165 = 0xAAAAAAAAAAAAAAAALL;
    v21 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)dispatch_queue_create("BBUFSServer", v21);
    *(_OWORD *)&aBlock.__r_.__value_.__l.__data_ = 0uLL;
    HSFilerReadSession::create();
    size = (std::__shared_weak_count *)aBlock.__r_.__value_.__l.__size_;
    if (!aBlock.__r_.__value_.__l.__size_)
      goto LABEL_12;
    v29 = (unint64_t *)(aBlock.__r_.__value_.__l.__size_ + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (v30)
    {
LABEL_12:
      v31 = object.__r_.__value_.__r.__words[0];
      if (!object.__r_.__value_.__r.__words[0])
        goto LABEL_14;
LABEL_13:
      dispatch_release(v31);
      goto LABEL_14;
    }
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    v31 = object.__r_.__value_.__r.__words[0];
    if (object.__r_.__value_.__r.__words[0])
      goto LABEL_13;
LABEL_14:
    if (v164)
    {
      v32 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v164 + 16))(v164);
      _BBUFSDebugPrint("sCreateFilerSession", "BBUFSServer successfully created filer read session with ID (%llu)\n", v33, v34, v35, v36, v37, v38, v32);
      *(_QWORD *)(a1 + 384) = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v164 + 16))(v164);
    }
    else
    {
      _BBUFSDebugPrint("sCreateFilerSession", "BBUFSServer failed to create filer read session\n", v22, v23, v24, v25, v26, v27, v141);
    }
    if (!v164)
    {
      v39 = 0;
      goto LABEL_46;
    }
    memset(__p, 170, sizeof(__p));
    if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&aBlock, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
    else
      aBlock = v145;
    std::vector<std::string>::vector[abi:ne180100](__p, (uint64_t)&aBlock, 1uLL);
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
      operator delete(aBlock.__r_.__value_.__l.__data_);
    v40 = (uint64_t (***)(_QWORD, void **, void **, uint64_t))v164;
    aBlock.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
    aBlock.__r_.__value_.__l.__size_ = 3254779904;
    aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZL13sTransferFileP16_BBUFSServer_tagRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
    v178 = &__block_descriptor_48_e8_32r40r_e11_v20__0Q8i16l;
    v179 = &v173;
    v180 = v146;
    v162 = _Block_copy(&aBlock);
    v41 = (**v40)(v40, __p, &v162, 5);
    *((_BYTE *)v174 + 24) = v41;
    if (v162)
    {
      _Block_release(v162);
      v41 = *((unsigned __int8 *)v174 + 24);
    }
    if (!v41)
    {
      v51 = "BBUFSServer failed to queue filer read session (%llu)\n";
LABEL_36:
      _BBUFSDebugPrint("sTransferFile", v51, v42, v43, v44, v45, v46, v47, *(_QWORD *)(a1 + 384));
      goto LABEL_37;
    }
    v48 = (dispatch_semaphore_t *)v146[1];
    v49 = dispatch_time(0, 10005000000000);
    v50 = dispatch_semaphore_wait(v48[6], v49);
    v51 = "BBUFSServer timeout waiting for filer read session (%llu) start\n";
    if (v50)
      goto LABEL_36;
    if (!*((_BYTE *)v174 + 24))
    {
      v51 = "BBUFSServer failed to start filer read session (%llu)\n";
      goto LABEL_36;
    }
    v52 = strlen(__s);
    if (v52 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v53 = v52;
    if (v52 >= 0x17)
    {
      v63 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v52 | 7) != 0x17)
        v63 = v52 | 7;
      v64 = v63 + 1;
      p_object = (std::string *)operator new(v63 + 1);
      object.__r_.__value_.__l.__size_ = v53;
      object.__r_.__value_.__r.__words[2] = v64 | 0x8000000000000000;
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)p_object;
    }
    else
    {
      *((_BYTE *)&object.__r_.__value_.__s + 23) = v52;
      p_object = &object;
      if (!v52)
        goto LABEL_68;
    }
    memcpy(p_object, __s, v53);
LABEL_68:
    p_object->__r_.__value_.__s.__data_[v53] = 0;
    BackupDir = bbufs::createBackupDir((uint64_t)&object);
    v72 = BackupDir;
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(object.__r_.__value_.__l.__data_);
      if ((v72 & 1) != 0)
      {
LABEL_70:
        v73 = strlen(__s);
        if (v73 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v74 = v73;
        if (v73 >= 0x17)
        {
          v76 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v73 | 7) != 0x17)
            v76 = v73 | 7;
          v77 = v76 + 1;
          v75 = (std::string *)operator new(v76 + 1);
          object.__r_.__value_.__l.__size_ = v74;
          object.__r_.__value_.__r.__words[2] = v77 | 0x8000000000000000;
          object.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
        }
        else
        {
          *((_BYTE *)&object.__r_.__value_.__s + 23) = v73;
          v75 = &object;
          if (!v73)
          {
LABEL_80:
            v75->__r_.__value_.__s.__data_[v74] = 0;
            s4ccToFileName(&v161, (uint64_t)&v145);
            v84 = bbufs::backupFile((uint64_t)&object);
            if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_82;
LABEL_85:
              operator delete(object.__r_.__value_.__l.__data_);
              v85 = "BBUFSServer failed to backup file (%s)\n";
              if ((v84 & 1) != 0)
                goto LABEL_86;
LABEL_105:
              v99 = &v145;
              if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                LOBYTE(v99) = v145.__r_.__value_.__s.__data_[0];
              _BBUFSDebugPrint("sTransferFile", v85, v78, v79, v80, v81, v82, v83, (char)v99);
              goto LABEL_37;
            }
            operator delete(v161.__r_.__value_.__l.__data_);
            if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_85;
LABEL_82:
            v85 = "BBUFSServer failed to backup file (%s)\n";
            if ((v84 & 1) == 0)
              goto LABEL_105;
LABEL_86:
            v86 = strlen(__s);
            if (v86 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v87 = v86;
            if (v86 >= 0x17)
            {
              v89 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v86 | 7) != 0x17)
                v89 = v86 | 7;
              v90 = v89 + 1;
              v88 = (std::string *)operator new(v89 + 1);
              object.__r_.__value_.__l.__size_ = v87;
              object.__r_.__value_.__r.__words[2] = v90 | 0x8000000000000000;
              object.__r_.__value_.__r.__words[0] = (std::string::size_type)v88;
            }
            else
            {
              *((_BYTE *)&object.__r_.__value_.__s + 23) = v86;
              v88 = &object;
              if (!v86)
              {
LABEL_94:
                v88->__r_.__value_.__s.__data_[v87] = 0;
                s4ccToFileName(&v161, (uint64_t)&v145);
                File = bbufs::createFile((uint64_t)&object);
                if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v161.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_96:
                    v85 = "BBUFSServer failed to create file (%s) and/or set owner\n";
                    if ((File & 1) != 0)
                      goto LABEL_97;
                    goto LABEL_105;
                  }
                }
                else if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  goto LABEL_96;
                }
                operator delete(object.__r_.__value_.__l.__data_);
                v85 = "BBUFSServer failed to create file (%s) and/or set owner\n";
                if ((File & 1) != 0)
                {
LABEL_97:
                  memset(&v161, 170, sizeof(v161));
                  s4ccToFileName(&object, (uint64_t)&v145);
                  ctu::path_join<char (&)[256],std::string>(&v161, __s);
                  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(object.__r_.__value_.__l.__data_);
                  v98 = &v145;
                  if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    LOBYTE(v98) = v145.__r_.__value_.__s.__data_[0];
                  _BBUFSDebugPrint("sTransferFile", "BBUFSServer transferring file (%s) to path (%s)\n", v92, v93, v94, v95, v96, v97, (char)v98);
                  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v160, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
                  else
                    v160 = v161;
                  object.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
                  object.__r_.__value_.__l.__size_ = 3254779904;
                  object.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZL13sTransferFileP16_BBUFSServer_tagRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke_59;
                  v156 = &__block_descriptor_48_e8_32r40r_e16_v28__0Q8i16r_v20l;
                  v157 = &v173;
                  v158 = &v166;
                  v159 = _Block_copy(&object);
                  *((_BYTE *)v174 + 24) = HSFilerReadSession::readWithFile();
                  if (v159)
                    _Block_release(v159);
                  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v160.__r_.__value_.__l.__data_);
                  if (*((_BYTE *)v174 + 24))
                  {
                    v106 = v167;
                    v107 = dispatch_time(0, 10005000000000);
                    if (dispatch_semaphore_wait((dispatch_semaphore_t)v106[6], v107))
                    {
                      v114 = &v145;
                      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        LOBYTE(v114) = v145.__r_.__value_.__s.__data_[0];
                      _BBUFSDebugPrint("sTransferFile", "BBUFSServer timeout waiting for file (%s) transfer to complete\n", v108, v109, v110, v111, v112, v113, (char)v114);
                      *((_BYTE *)v174 + 24) = 0;
                    }
                    else if (!*((_BYTE *)v174 + 24))
                    {
                      v116 = &v145;
                      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        LOBYTE(v116) = v145.__r_.__value_.__s.__data_[0];
                      _BBUFSDebugPrint("sTransferFile", "BBUFSServer failed to transfer file (%s)\n", v108, v109, v110, v111, v112, v113, (char)v116);
                    }
                    v117 = (dispatch_semaphore_t *)v146[1];
                    v118 = dispatch_time(0, 10005000000000);
                    if (dispatch_semaphore_wait(v117[6], v118))
                    {
                      _BBUFSDebugPrint("sTransferFile", "BBUFSServer timeout waiting for filer read session (%llu) to end\n", v119, v120, v121, v122, v123, v124, *(_QWORD *)(a1 + 384));
                      *((_BYTE *)v174 + 24) = 0;
                      goto LABEL_131;
                    }
                    if (*((_BYTE *)v174 + 24)
                      || (_BBUFSDebugPrint("sTransferFile", "BBUFSServer filer read session (%llu) end failed\n", v119, v120, v121, v122, v123, v124, *(_QWORD *)(a1 + 384)), *((_BYTE *)v174 + 24)))
                    {
                      std::string::basic_string[abi:ne180100]<0>(v153, __s);
                      s4ccToFileName(&v152, (uint64_t)&v145);
                      v131 = bbufs::clearBackupFile((uint64_t)v153);
                      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v152.__r_.__value_.__l.__data_);
                        if (v154 < 0)
                          goto LABEL_142;
LABEL_139:
                        if ((v131 & 1) == 0)
                        {
LABEL_143:
                          _BBUFSDebugPrint("sTransferFile", "BBUFSServer failed to clear file backup\n", v125, v126, v127, v128, v129, v130, v142);
                          *((_BYTE *)v174 + 24) = 0;
                        }
                      }
                      else
                      {
                        if ((v154 & 0x80000000) == 0)
                          goto LABEL_139;
LABEL_142:
                        operator delete(v153[0]);
                        if ((v131 & 1) == 0)
                          goto LABEL_143;
                      }
                    }
                    else
                    {
LABEL_131:
                      std::string::basic_string[abi:ne180100]<0>(v153, __s);
                      s4ccToFileName(&v152, (uint64_t)&v145);
                      bbufs::restoreBackupFile((uint64_t)v153);
                      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v152.__r_.__value_.__l.__data_);
                      if (v154 < 0)
                        operator delete(v153[0]);
                    }
                    v39 = *((_BYTE *)v174 + 24) != 0;
                  }
                  else
                  {
                    v115 = &v145;
                    if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      LOBYTE(v115) = v145.__r_.__value_.__s.__data_[0];
                    _BBUFSDebugPrint("sTransferFile", "BBUFSServer failed to read file (%s)\n", v100, v101, v102, v103, v104, v105, (char)v115);
                    std::string::basic_string[abi:ne180100]<0>(v153, __s);
                    s4ccToFileName(&v152, (uint64_t)&v145);
                    bbufs::restoreBackupFile((uint64_t)v153);
                    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v152.__r_.__value_.__l.__data_);
                    if (v154 < 0)
                      operator delete(v153[0]);
                    v39 = 0;
                  }
                  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v161.__r_.__value_.__l.__data_);
                  goto LABEL_38;
                }
                goto LABEL_105;
              }
            }
            memcpy(v88, __s, v87);
            goto LABEL_94;
          }
        }
        memcpy(v75, __s, v74);
        goto LABEL_80;
      }
    }
    else if ((BackupDir & 1) != 0)
    {
      goto LABEL_70;
    }
    _BBUFSDebugPrint("sTransferFile", "BBUFSServer failed to create backup directory\n", v66, v67, v68, v69, v70, v71, v142);
LABEL_37:
    v39 = 0;
LABEL_38:
    v55 = (void **)__p[0];
    if (__p[0])
    {
      v56 = (void **)__p[1];
      v57 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((char *)v56 - 1) < 0)
            operator delete(*(v56 - 3));
          v56 -= 3;
        }
        while (v56 != v55);
        v57 = __p[0];
      }
      __p[1] = v55;
      operator delete(v57);
    }
LABEL_46:
    v58 = (std::__shared_weak_count *)v165;
    if (!v165)
      goto LABEL_50;
    v59 = (unint64_t *)(v165 + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (v60)
    {
LABEL_50:
      _Block_object_dispose(&v166, 8);
      v61 = v172;
      if (!v172)
        goto LABEL_52;
LABEL_51:
      dispatch_release(v61);
      goto LABEL_52;
    }
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
    _Block_object_dispose(&v166, 8);
    v61 = v172;
    if (v172)
      goto LABEL_51;
LABEL_52:
    _Block_object_dispose(v146, 8);
    if (v151[0])
      dispatch_release(v151[0]);
    _Block_object_dispose(&v173, 8);
    *(_QWORD *)(a1 + 384) = 0;
    if (!v39)
    {
      _BBUFSDebugPrint("INTStateMachinePerformSnapshot", "BBUFSServer failed to perform snapshot: sTransferFile failed\n", a3, a4, a5, a6, a7, a8, v142);
      goto LABEL_152;
    }
    *(_DWORD *)(a1 + 376) = 0;
  }
  if (v20)
  {
    _BBUFSDebugPrint("INTStateMachinePerformSnapshot", "BBUFSServer failed to perform snapshot: unrecognized INT state. This should never happen\n", v14, v15, v16, v17, v18, v19, v141);
LABEL_152:
    v132 = 0;
    if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v132;
LABEL_153:
    operator delete(v145.__r_.__value_.__l.__data_);
    return v132;
  }
  do
  {
    if ((*(_DWORD *)(a1 + 380) & v9) != 0)
      __asm { BR              X8 }
    v62 = v9 >= 9;
    v9 *= 2;
  }
  while (!v62);
  _BBUFSDebugPrint("INTStateMachinePerformSnapshot", "Device has no (further) updates\n", v14, v15, v16, v17, v18, v19, v141);
  _BBUFSDebugPrint("INTStateMachinePerformSnapshot", "BBUFSServer peformed snapshot successfully\n", v133, v134, v135, v136, v137, v138, v143);
  v132 = 1;
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_153;
  return v132;
}

void sub_212AC662C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,dispatch_object_t object,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,dispatch_object_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *aBlock,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,void *a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  char a64;
  dispatch_object_t a70;
  uint64_t v70;
  NSObject *v72;

  if (a34 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  if (a57 < 0)
    operator delete(a52);
  std::vector<std::string>::~vector[abi:ne180100](&a59);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  _Block_object_dispose(&a64, 8);
  if (a70)
  {
    dispatch_release(a70);
    _Block_object_dispose(&a18, 8);
    v72 = object;
    if (!object)
    {
LABEL_10:
      _Block_object_dispose((const void *)(v70 - 224), 8);
      if (a17 < 0)
        operator delete(a12);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    _Block_object_dispose(&a18, 8);
    v72 = object;
    if (!object)
      goto LABEL_10;
  }
  dispatch_release(v72);
  goto LABEL_10;
}

void s4ccToFileName(std::string *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  _DWORD *v6;
  uint64_t **v7;
  __int128 v8;
  uint64_t *v9[3];

  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3 != 4)
    goto LABEL_12;
  if (v4 >= 0)
    v6 = (_DWORD *)a2;
  else
    v6 = *(_DWORD **)a2;
  if (*v6 == 1953718882 || *v6 == 2036621922)
  {
    GetBasebandNVM4ccToFileNameMap(v9);
    v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)a2, a2);
    if ((*((char *)v7 + 79) & 0x80000000) == 0)
    {
LABEL_16:
      v8 = *(_OWORD *)(v7 + 7);
      a1->__r_.__value_.__r.__words[2] = (std::string::size_type)v7[9];
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v8;
      goto LABEL_17;
    }
  }
  else
  {
    if (*v6 != 1818452578 && *v6 != 1668309602 && *v6 != 1987076706)
    {
LABEL_12:
      a1->__r_.__value_.__r.__words[0] = 0;
      a1->__r_.__value_.__l.__size_ = 0;
      a1->__r_.__value_.__r.__words[2] = 0;
      return;
    }
    GetBasebandFDR4ccToFileNameMap(v9);
    v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)a2, a2);
    if ((*((char *)v7 + 79) & 0x80000000) == 0)
      goto LABEL_16;
  }
  std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)v7[7], (std::string::size_type)v7[8]);
LABEL_17:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v9, (uint64_t)v9[1]);
}

void sub_212AC6A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_212AC6A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

BOOL INTStateMachineSnapshotInProgress(uint64_t a1)
{
  return *(_DWORD *)(a1 + 376) > 0;
}

uint64_t INTStateMachineSetConfig(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  char v40;

  v8 = (uint64_t)a2;
  if (!a2)
  {
    v36 = "BBUFSServer failed to set config: NULL configName param\n";
    goto LABEL_13;
  }
  v9 = a3;
  if (!strcasecmp("ForceSync", a2))
  {
    *(_BYTE *)(a1 + 392) = v9 != 0;
    v37 = "false";
    if (v9)
      v37 = "true";
    _BBUFSDebugPrint("INTStateMachineSetConfig", "Set forceSync config to %s\n", v11, v12, v13, v14, v15, v16, (char)v37);
  }
  else if (!strcasecmp("ShutdownSync", (const char *)v8))
  {
    *(_BYTE *)(a1 + 393) = v9 != 0;
    v38 = "false";
    if (v9)
      v38 = "true";
    _BBUFSDebugPrint("INTStateMachineSetConfig", "Set shutdownSync config to %s\n", v17, v18, v19, v20, v21, v22, (char)v38);
  }
  else
  {
    if (strcasecmp("ARICtxId", (const char *)v8))
    {
      if (strcasecmp("SyncStatic", (const char *)v8))
      {
        if (!strcasecmp("SyncDynamic", (const char *)v8))
        {
          *(_DWORD *)(a1 + 380) = 2;
          v39 = "Requested to sync dynamic\n";
        }
        else if (!strcasecmp("SyncCalibration", (const char *)v8))
        {
          *(_DWORD *)(a1 + 380) = 4;
          v39 = "Requested to sync calibration\n";
        }
        else if (!strcasecmp("SyncFATPCalibration", (const char *)v8))
        {
          *(_DWORD *)(a1 + 380) = 8;
          v39 = "Requested to sync FATP-calibration\n";
        }
        else if (!strcasecmp("SyncStaticDynamicCalibration", (const char *)v8))
        {
          *(_DWORD *)(a1 + 380) = 7;
          v39 = "Requested to sync static + dynamic + calibration\n";
        }
        else
        {
          if (strcasecmp("SyncStaticDynamic", (const char *)v8))
          {
            _BBUFSDebugPrint("INTStateMachineSetConfig", "BBUFSServer failed to set config, unrecognized config name '%s'\n", v29, v30, v31, v32, v33, v34, v8);
            return 0;
          }
          *(_DWORD *)(a1 + 380) = 3;
          v39 = "Requested to sync static + dynamic\n";
        }
        _BBUFSDebugPrint("INTStateMachineSetConfig", v39, v29, v30, v31, v32, v33, v34, v40);
        return 1;
      }
      v8 = 1;
      *(_DWORD *)(a1 + 380) = 1;
      v36 = "Requested to sync static\n";
LABEL_13:
      _BBUFSDebugPrint("INTStateMachineSetConfig", v36, a3, a4, a5, a6, a7, a8, v40);
      return v8;
    }
    _BBUFSDebugPrint("INTStateMachineSetConfig", "Set ARI context ID to %d\n", v23, v24, v25, v26, v27, v28, v9);
  }
  return 1;
}

uint64_t INTStateMachineSetConfigDefaults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;

  if (MEMORY[0x24BED4408])
  {
    *(_WORD *)(a1 + 392) = 0;
    *(_DWORD *)(a1 + 380) = 3;
    *(_BYTE *)(a1 + 394) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    return 1;
  }
  else
  {
    _BBUFSDebugPrint("INTStateMachineSetConfigDefaults", "HSFilerDynamic library is not available for INT case. It should always be\n", a3, a4, a5, a6, a7, a8, v9);
    return 0;
  }
}

uint64_t **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  std::string *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
LABEL_28:
          v20 = operator new(0x50uLL);
          v21 = (std::string *)(v20 + 4);
          if (*(char *)(a3 + 23) < 0)
            goto LABEL_31;
LABEL_29:
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
          v21->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_28;
      }
    }
  }
  v10 = a1 + 1;
  v20 = operator new(0x50uLL);
  v21 = (std::string *)(v20 + 4);
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_31:
  std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
LABEL_32:
  v20[7] = 0;
  v20[8] = 0;
  v20[9] = 0;
  *v20 = 0;
  v20[1] = 0;
  v20[2] = v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_212AC6ED4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 48);
  if (v1)
    dispatch_release(v1);
}

intptr_t ___ZL13sTransferFileP16_BBUFSServer_tagRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1, char a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  hsfiler::support::to_string();
  _BBUFSDebugPrint("sTransferFile_block_invoke", "BBUFSServer filer read session (%llu) status: %s\n", v6, v7, v8, v9, v10, v11, a2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3 >= 0;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48));
}

uint64_t ctu::path_join<char (&)[256],std::string>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  memset(a1, 170, 24);
  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memcpy(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return ctu::path_join_impl();
}

void sub_212AC7044(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

intptr_t ___ZL13sTransferFileP16_BBUFSServer_tagRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke_59(uint64_t a1, char a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  hsfiler::support::to_string();
  _BBUFSDebugPrint("sTransferFile_block_invoke", "BBUFSServer filer read session (%llu) file (%s) transfer status: %s\n", v6, v7, v8, v9, v10, v11, a2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3 >= 0;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48));
}

uint64_t __cxx_global_var_init_10()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_212A4D000);
  }
  return result;
}

uint64_t BBUEURProvisioner::getProvisioningCommandTimeoutMilliseconds(BBUEURProvisioner *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t BBUEURProvisioner::determineSupport(uint64_t a1)
{
  uint64_t v1;
  int Status;
  int v5;
  const char *v6;
  const char *v7;

  if (*(_DWORD *)(a1 + 16))
    return 0;
  BBUFeedback::handleBeginQuickStep(*(BBUFeedback **)(a1 + 8), "Determining support");
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  Status = ETLProvisionGetStatus();
  *(_DWORD *)(a1 + 16) = Status;
  if (Status)
    v1 = 0;
  else
    v1 = 70;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v1);
  if (!Status)
    return v1;
  v5 = *(_DWORD *)(a1 + 16);
  v6 = "???";
  if (v5 == 1)
    v6 = "Mature";
  if (v5)
    v7 = v6;
  else
    v7 = "Unknown";
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Determined support as %s", v7);
  return v1;
}

uint64_t BBUEURProvisioner::handleBeginMature(BBUFeedback **a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  unsigned int Length;
  UInt8 *v7;
  __int128 v8;
  int v9;
  std::string *v10;
  size_t v11;
  size_t v12;
  __int128 *p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _DWORD *v19;
  size_t v20;
  void *v21;
  void **v22;
  uint64_t result;
  void *exception;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 __dst;
  unint64_t v30;
  _DWORD v31[2];
  UInt8 *v32;
  unint64_t v33;
  const void *v34;
  char __b[1024];
  __int128 v36;
  _OWORD __sz[16];
  int v38;
  uint64_t v39;
  CFRange v40;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = *(const void **)(a2 + 8);
  v34 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 56, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUEURProvisioner.cpp", 0x4Eu, (ctu::LogMessageBuffer *)"Assertion failure(d.get() && \"Unable to extract public key to start mature provisioning.\")", v25, v26, v27, v28);
  }
  CFRetain(v3);
  Length = CFDataGetLength((CFDataRef)v3);
  v33 = Length | 0xAAAAAAAA00000000;
  v7 = (UInt8 *)operator new[](Length);
  v40.length = CFDataGetLength((CFDataRef)v3);
  v40.location = 0;
  CFDataGetBytes((CFDataRef)v3, v40, v7);
  v32 = v7;
  v38 = -1431655766;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __sz[14] = v8;
  __sz[15] = v8;
  __sz[12] = v8;
  __sz[13] = v8;
  __sz[10] = v8;
  __sz[11] = v8;
  __sz[8] = v8;
  __sz[9] = v8;
  __sz[6] = v8;
  __sz[7] = v8;
  __sz[4] = v8;
  __sz[5] = v8;
  __sz[2] = v8;
  __sz[3] = v8;
  __sz[0] = v8;
  __sz[1] = v8;
  v36 = v8;
  (*((void (**)(BBUFeedback **))*a1 + 8))(a1);
  v9 = ETLProvisionStart();
  operator delete[](v7);
  if (!v9)
  {
    BBUFeedback::handleComment(a1[1], "Failed to retrieve mature provisioning parameters");
    v14 = 3;
LABEL_27:
    CFRelease(v3);
    return v14;
  }
  *(_DWORD *)((char *)v31 + 3) = -1431655766;
  v31[0] = -1431655766;
  if (ETLCDMAMakeMEID() && ETLCDMAIsValidMEID())
  {
    memset(__b, 170, sizeof(__b));
    ETLCDMAMakeStringFromMEID();
    v10 = (std::string *)operator new(0x18uLL);
    v11 = strlen(__b);
    if (v11 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v12 = v11;
    if (v11 >= 0x17)
    {
      v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v15 = v11 | 7;
      v16 = v15 + 1;
      p_dst = (__int128 *)operator new(v15 + 1);
      *((_QWORD *)&__dst + 1) = v12;
      v30 = v16 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v30) = v11;
      p_dst = &__dst;
      if (!v11)
      {
LABEL_14:
        *((_BYTE *)p_dst + v12) = 0;
        if (SHIBYTE(v30) < 0)
        {
          v18 = (void *)__dst;
          std::string::__init_copy_ctor_external(v10, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
          operator delete(v18);
          v17 = *(_QWORD *)(a3 + 16);
          if (!v17)
          {
LABEL_21:
            *(_QWORD *)(a3 + 16) = v10;
            goto LABEL_22;
          }
        }
        else
        {
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = __dst;
          v10->__r_.__value_.__r.__words[2] = v30;
          v17 = *(_QWORD *)(a3 + 16);
          if (!v17)
            goto LABEL_21;
        }
        if (*(char *)(v17 + 23) < 0)
          operator delete(*(void **)v17);
        operator delete((void *)v17);
        goto LABEL_21;
      }
    }
    memcpy(p_dst, __b, v12);
    goto LABEL_14;
  }
LABEL_22:
  v19 = operator new(0x10uLL);
  v20 = LODWORD(__sz[0]);
  v19[2] = __sz[0];
  v21 = operator new[](v20);
  *(_QWORD *)v19 = v21;
  memcpy(v21, (char *)__sz + 4, v20);
  v22 = *(void ***)(a3 + 32);
  if (v22)
  {
    if (*v22)
      operator delete(*v22);
    operator delete(v22);
  }
  v14 = 0;
  result = 0;
  *(_QWORD *)(a3 + 32) = v19;
  v3 = v34;
  if (v34)
    goto LABEL_27;
  return result;
}

void sub_212AC7550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16)
{
  void *v16;
  void *v17;

  operator delete(v17);
  operator delete(v16);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a16);
  _Unwind_Resume(a1);
}

uint64_t BBUEURProvisioner::handleFinishMature(uint64_t a1, uint64_t a2)
{
  const void *v2;
  unsigned int Length;
  UInt8 *v5;
  int v6;
  void *exception;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  CFRange v13;

  v2 = *(const void **)(a2 + 16);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 56, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUEURProvisioner.cpp", 0x7Bu, (ctu::LogMessageBuffer *)"Assertion failure(d.get() && \"Unable to extract public key to finish mature provisioning.\")", v9, v10, v11, v12);
  }
  CFRetain(v2);
  Length = CFDataGetLength((CFDataRef)v2);
  v5 = (UInt8 *)operator new[](Length);
  v13.length = CFDataGetLength((CFDataRef)v2);
  v13.location = 0;
  CFDataGetBytes((CFDataRef)v2, v13, v5);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v6 = ETLProvisionFinish();
  operator delete[](v5);
  CFRelease(v2);
  if (v6)
    return 0;
  else
    return 3;
}

void sub_212AC76E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212AC76F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  void *v12;

  __cxa_free_exception(v12);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a12);
  _Unwind_Resume(a1);
}

void sub_212AC7714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212AC772C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212AC7740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t BBUProvisioner::overrideSupport(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

void BBUEUR10LoaderVersion::~BBUEUR10LoaderVersion(void **this)
{
  *this = off_24CE844F0;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  BBUEUR10LoaderVersion *v1;

  v1 = (BBUEUR10LoaderVersion *)this;
  *this = off_24CE844F0;
  if (*((char *)this + 39) < 0)
  {
    operator delete(this[2]);
    this = (void **)v1;
  }
  operator delete(this);
}

void BBUEUR10LoaderVersion::getAsString(BBUEUR10LoaderVersion *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 39) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 1);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 4);
  }
}

void BBUEUR10LoaderVersion::getAsFilename(_BYTE *a1@<X8>)
{
  a1[23] = 0;
  *a1 = 0;
}

uint64_t BBUEUR10LoaderVersion::parseVersionString(uint64_t a1, void **a2)
{
  void **v3;
  __int128 v4;
  size_t v6;
  size_t v7;

  v3 = (void **)(a1 + 16);
  if (v3 == a2)
    goto LABEL_5;
  if (*(char *)(a1 + 39) < 0)
  {
    v6 = (size_t)a2[1];
    if (*((char *)a2 + 23) >= 0)
    {
      v7 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (void **)*a2;
      v7 = v6;
    }
    std::string::__assign_no_alias<false>(v3, a2, v7);
    *(_DWORD *)(a1 + 8) = 2;
    return 0;
  }
  else
  {
    if ((*((_BYTE *)a2 + 23) & 0x80) == 0)
    {
      v4 = *(_OWORD *)a2;
      v3[2] = a2[2];
      *(_OWORD *)v3 = v4;
LABEL_5:
      *(_DWORD *)(a1 + 8) = 2;
      return 0;
    }
    std::string::__assign_no_alias<true>(v3, *a2, (size_t)a2[1]);
    *(_DWORD *)(a1 + 8) = 2;
    return 0;
  }
}

BOOL BBUEUR10LoaderVersion::isNewerThan(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v7[2];
  char v8;
  _QWORD v9[2];
  uint64_t v10;
  void *__p;
  char v12;
  _BYTE v13[152];
  uint64_t v14;

  v14 = 0;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t)v9, (__int128 *)(a1 + 16));
  MEMORY[0x212BFA1D8](v9, (char *)&v14 + 4);
  v3 = *MEMORY[0x24BEDB7F8];
  v9[0] = v3;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v3 - 24)) = v4;
  v5 = MEMORY[0x24BEDB848];
  v10 = MEMORY[0x24BEDB848] + 16;
  if (v12 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212BFA3D0](v13);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(v7, a2);
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t)v9, (__int128 *)v7);
  MEMORY[0x212BFA1D8](v9, &v14);
  v9[0] = v3;
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v3 - 24)) = v4;
  v10 = v5 + 16;
  if (v12 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212BFA3D0](v13);
  if (v8 < 0)
    operator delete(v7[0]);
  return SHIDWORD(v14) > (int)v14;
}

void sub_212AC7A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::istringstream::~istringstream((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_212AC7A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::basic_istringstream[abi:ne180100](uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  __int128 v11;

  v4 = MEMORY[0x24BEDB868];
  v5 = MEMORY[0x24BEDB868] + 64;
  *(_QWORD *)(a1 + 120) = MEMORY[0x24BEDB868] + 64;
  v6 = a1 + 16;
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + *(_QWORD *)(v7 - 24)) = v8;
  *(_QWORD *)(a1 + 8) = 0;
  v9 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v9, (void *)(a1 + 16));
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v4 + 24;
  *(_QWORD *)(a1 + 120) = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x24BEDB848];
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 16) = v10 + 16;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 8;
  if ((__int128 *)(a1 + 80) != a2)
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__assign_no_alias<true>((_QWORD *)(a1 + 80), *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v11 = *a2;
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 80) = v11;
    }
  }
  std::stringbuf::__init_buf_ptrs[abi:ne180100](v6);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  __int128 v10;

  v4 = MEMORY[0x24BEDB868];
  v5 = MEMORY[0x24BEDB868] + 64;
  *(_QWORD *)(a1 + 120) = MEMORY[0x24BEDB868] + 64;
  v6 = a1 + 16;
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + *(_QWORD *)(v7 - 24)) = v8;
  *(_QWORD *)(a1 + 8) = 0;
  v9 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v9, (void *)(a1 + 16));
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v4 + 24;
  *(_QWORD *)(a1 + 120) = v5;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  v10 = *a2;
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 80) = v10;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 8;
  std::stringbuf::__init_buf_ptrs[abi:ne180100](v6);
  return a1;
}

void sub_212AC7B74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x212BFA3D0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7F8];
  v3 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212BFA3D0](a1 + 120);
  return a1;
}

void sub_212AC7D34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 103) < 0)
    operator delete(*v3);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212BFA3D0](v1);
  _Unwind_Resume(a1);
}

BOOL BBUEUR10LoaderVersion::isEqualTo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v7[2];
  char v8;
  _QWORD v9[2];
  uint64_t v10;
  void *__p;
  char v12;
  _BYTE v13[152];
  uint64_t v14;

  v14 = 0;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t)v9, (__int128 *)(a1 + 16));
  MEMORY[0x212BFA1D8](v9, (char *)&v14 + 4);
  v3 = *MEMORY[0x24BEDB7F8];
  v9[0] = v3;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v3 - 24)) = v4;
  v5 = MEMORY[0x24BEDB848];
  v10 = MEMORY[0x24BEDB848] + 16;
  if (v12 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212BFA3D0](v13);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(v7, a2);
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t)v9, (__int128 *)v7);
  MEMORY[0x212BFA1D8](v9, &v14);
  v9[0] = v3;
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v3 - 24)) = v4;
  v10 = v5 + 16;
  if (v12 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212BFA3D0](v13);
  if (v8 < 0)
    operator delete(v7[0]);
  return HIDWORD(v14) == (_DWORD)v14;
}

void sub_212AC7ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::istringstream::~istringstream((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_212AC7F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(_QWORD *a1, const char *a2, dispatch_qos_class_t qos_class, NSObject **a4)
{
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;

  v7 = dispatch_queue_attr_make_with_qos_class(0, qos_class, 0);
  v8 = *a4;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_retain(v8);
    v9 = dispatch_queue_create_with_target_V2(a2, v7, v8);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = v9;
    if (!v9)
      goto LABEL_4;
    goto LABEL_3;
  }
  v9 = dispatch_queue_create(a2, v7);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v9;
  if (v9)
LABEL_3:
    dispatch_retain(v9);
LABEL_4:
  a1[3] = v8;
  if (v8)
    dispatch_retain(v8);
  if (v9)
    dispatch_release(v9);
  if (v8)
  {
    dispatch_release(v8);
    dispatch_release(v8);
  }
  return a1;
}

void BBUError::BBUError(BBUError *this)
{
  dispatch_object_t object;

  object = 0;
  ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(this, "BBUError", QOS_CLASS_UTILITY, &object);
  if (object)
    dispatch_release(object);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
}

void sub_212AC8040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

void ___ZN8BBUError10getCFErrorEPP9__CFError_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 *v9;
  __int128 *v10;
  CFErrorRef v12;
  CFErrorRef *v13;
  __int128 v14;
  std::string __p;

  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(__int128 **)(v8 + 32);
  v10 = *(__int128 **)(v8 + 40);
  if (v9 != v10)
  {
    v12 = 0;
    v13 = *(CFErrorRef **)(a1 + 40);
    do
    {
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v14 = *v9;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
      }
      BBUpdaterCommon::BBUCreateCFError(v13, (uint64_t)&__p, *((_DWORD *)v9 + 6), v12, a5, a6, a7, a8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v13 = *(CFErrorRef **)(a1 + 40);
      v12 = *v13;
      v9 += 2;
    }
    while (v9 != v10);
  }
}

void sub_212AC810C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN8BBUError12getErrorCodeEv_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 40);
  v3 = *(_QWORD *)(v1 + 32);
  v2 = *(_QWORD *)(v1 + 40);
  if (v3 != v2)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(v2 - 8);
  return result;
}

void BBUError::getErrorString(BBUError *this@<X0>, std::string *a2@<X8>)
{
  NSObject *v3;
  char *v4;
  uint64_t *v5;
  __int128 v6;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __n128 (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  void *__p;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD block[6];

  v8 = 0;
  v9 = &v8;
  v10 = 0x4002000000;
  v11 = __Block_byref_object_copy__1;
  v12 = __Block_byref_object_dispose__1;
  v15 = 0;
  __p = 0;
  v14 = 0;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1107296256;
  v7[2] = ___ZN8BBUError14getErrorStringEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_5;
  v7[4] = &v8;
  v7[5] = this;
  v16 = v7;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_10;
  block[4] = this;
  block[5] = &v16;
  v4 = (char *)this + 16;
  v3 = *((_QWORD *)this + 2);
  if (*((_QWORD *)v4 + 1))
  {
    dispatch_async_and_wait(v3, block);
    v5 = v9;
    if ((*((char *)v9 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(v5 + 5);
      a2->__r_.__value_.__r.__words[2] = v5[7];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_sync(v3, block);
    v5 = v9;
    if ((*((char *)v9 + 63) & 0x80000000) == 0)
      goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v5[5], v5[6]);
LABEL_6:
  _Block_object_dispose(&v8, 8);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
}

void sub_212AC8278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Block_object_dispose(&a16, 8);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void BBUError::addError(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v5[6];
  int v6;
  _QWORD *v7;
  _QWORD block[6];

  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
  v5[3] = &__block_descriptor_tmp_6;
  v5[4] = a1;
  v5[5] = a2;
  v6 = a3;
  v7 = v5;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_10;
  block[4] = a1;
  block[5] = &v7;
  v4 = a1 + 16;
  v3 = *(NSObject **)(a1 + 16);
  if (*(_QWORD *)(v4 + 8))
    dispatch_async_and_wait(v3, block);
  else
    dispatch_sync(v3, block);
}

void ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke(uint64_t a1)
{
  __int128 *v2;
  _QWORD *v3;
  __int128 v4;
  int v5;
  unint64_t v6;
  void **v7;
  __int128 v8;
  void **v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  void **v19;
  int v20;
  std::string __p;
  int v22;

  v3 = *(_QWORD **)(a1 + 32);
  v2 = *(__int128 **)(a1 + 40);
  if (*((char *)v2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
    v5 = *(_DWORD *)(a1 + 48);
    v22 = v5;
    v7 = (void **)v3[5];
    v6 = v3[6];
    if ((unint64_t)v7 < v6)
      goto LABEL_3;
  }
  else
  {
    v4 = *v2;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
    v5 = *(_DWORD *)(a1 + 48);
    v22 = v5;
    v7 = (void **)v3[5];
    v6 = v3[6];
    if ((unint64_t)v7 < v6)
    {
LABEL_3:
      v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v7[2] = (void *)__p.__r_.__value_.__r.__words[2];
      *(_OWORD *)v7 = v8;
      *((_DWORD *)v7 + 6) = v22;
      v3[5] = v7 + 4;
      return;
    }
  }
  v9 = (void **)v3[4];
  v10 = ((char *)v7 - (char *)v9) >> 5;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 59)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v12 = v6 - (_QWORD)v9;
  if (v12 >> 4 > v11)
    v11 = v12 >> 4;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
    v13 = 0x7FFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v14 = (char *)operator new(32 * v13);
  v15 = &v14[32 * v10];
  *(std::string *)v15 = __p;
  v16 = &v14[32 * v13];
  memset(&__p, 0, sizeof(__p));
  *((_DWORD *)v15 + 6) = v5;
  v17 = v15 + 32;
  if (v7 == v9)
  {
    v3[4] = v15;
    v3[5] = v17;
    v3[6] = v16;
  }
  else
  {
    do
    {
      v18 = *((_OWORD *)v7 - 2);
      *((_QWORD *)v15 - 2) = *(v7 - 2);
      *((_OWORD *)v15 - 2) = v18;
      *(v7 - 3) = 0;
      *(v7 - 2) = 0;
      *(v7 - 4) = 0;
      *((_DWORD *)v15 - 2) = *((_DWORD *)v7 - 2);
      v15 -= 32;
      v7 -= 4;
    }
    while (v7 != v9);
    v7 = (void **)v3[4];
    v19 = (void **)v3[5];
    v3[4] = v15;
    v3[5] = v17;
    v3[6] = v16;
    while (v19 != v7)
    {
      if (*((char *)v19 - 9) < 0)
        operator delete(*(v19 - 4));
      v19 -= 4;
    }
  }
  if (v7)
    operator delete(v7);
  v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v3[5] = v17;
  if (v20 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_212AC85A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN8BBUError11clearErrorsEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 32);
  for (i = *(_QWORD *)(v1 + 40); i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  *(_QWORD *)(v1 + 40) = v2;
}

void BBUEUR16FirmwareVersion::BBUEUR16FirmwareVersion(BBUEUR16FirmwareVersion *this)
{
  const void *v2;
  size_t v3;
  size_t v4;
  __int128 *p_dst;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  void *v9;
  __int128 __dst;
  unint64_t v11;

  v2 = (const void *)BBUEUR16FirmwareVersion::kFirmwarePrefix;
  v3 = strlen((const char *)BBUEUR16FirmwareVersion::kFirmwarePrefix);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_dst = (__int128 *)operator new(v6 + 1);
    *((_QWORD *)&__dst + 1) = v4;
    v11 = v7 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v11) = v3;
  p_dst = &__dst;
  if (v3)
LABEL_8:
    memmove(p_dst, v2, v4);
  *((_BYTE *)p_dst + v4) = 0;
  *(_QWORD *)this = off_24CE80C30;
  *((_DWORD *)this + 5) = -1;
  *(_OWORD *)((char *)this + 24) = 0u;
  v8 = (std::string *)((char *)this + 72);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (SHIBYTE(v11) < 0)
  {
    v9 = (void *)__dst;
    std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
    *((_DWORD *)this + 4) = 0;
    *((_QWORD *)this + 1) = 0;
    operator delete(v9);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = __dst;
    *((_QWORD *)this + 11) = v11;
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = off_24CE81CD8;
}

void sub_212AC8758(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*(void **)(v1 + 48));
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v2);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void BBUEUR16FirmwareVersion::~BBUEUR16FirmwareVersion(void **this)
{
  *this = off_24CE80C30;
  if (*((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(this[3]);
      return;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    goto LABEL_7;
}

{
  *this = off_24CE80C30;
  if ((*((char *)this + 95) & 0x80000000) == 0)
  {
    if ((*((char *)this + 71) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_7:
    operator delete(this[6]);
    if ((*((char *)this + 47) & 0x80000000) == 0)
      goto LABEL_4;
LABEL_8:
    operator delete(this[3]);
    operator delete(this);
    return;
  }
  operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    goto LABEL_7;
LABEL_3:
  if (*((char *)this + 47) < 0)
    goto LABEL_8;
LABEL_4:
  operator delete(this);
}

unint64_t BBUEUR16FirmwareVersion::getFirmwarePrefix@<X0>(_QWORD *a1@<X8>)
{
  const void *v3;
  unint64_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const void *)BBUEUR16FirmwareVersion::kFirmwarePrefix;
  result = strlen((const char *)BBUEUR16FirmwareVersion::kFirmwarePrefix);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a1[1] = v5;
    a1[2] = v7 | 0x8000000000000000;
    *a1 = v8;
    a1 = v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a1 = 0;
      return result;
    }
  }
  result = (unint64_t)memmove(a1, v3, v5);
  *((_BYTE *)a1 + v5) = 0;
  return result;
}

_QWORD *BBUICE16HashData::BBUICE16HashData(_QWORD *a1, unsigned int a2, char *__s)
{
  uint64_t **v3;
  uint64_t v5;
  size_t v6;
  _BYTE *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t *v20;
  __int128 v21;
  uint64_t *v22;
  int64_t v23;
  char *v24;
  size_t v25;
  __int128 v26;
  void *__p[3];
  void **v30;

  *a1 = off_24CE81D48;
  a1[2] = 0;
  a1[1] = a1 + 2;
  v3 = (uint64_t **)(a1 + 1);
  a1[3] = 0;
  if (a2)
  {
    v5 = a2;
    while (1)
    {
      memset(__p, 170, sizeof(__p));
      v6 = strlen(__s);
      if (v6 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v7 = (_BYTE *)v6;
      if (v6 >= 0x17)
        break;
      HIBYTE(__p[2]) = v6;
      v8 = __p;
      if (v6)
        goto LABEL_12;
LABEL_13:
      v7[(_QWORD)v8] = 0;
      v11 = operator new(0x20uLL);
      v12 = *((_OWORD *)__s + 5);
      *v11 = *((_OWORD *)__s + 4);
      v11[1] = v12;
      v30 = __p;
      v13 = std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v30);
      v14 = v13;
      v16 = v13 + 7;
      v15 = v13[7];
      v17 = (unint64_t)v13[9];
      if (v17 - (unint64_t)v15 >= 0x20)
      {
        v22 = v13[8];
        v23 = (char *)v22 - (char *)v15;
        if ((unint64_t)((char *)v22 - (char *)v15) > 0x1F)
        {
          v26 = v11[1];
          *(_OWORD *)v15 = *v11;
          *((_OWORD *)v15 + 1) = v26;
          v13[8] = v15 + 4;
          operator delete(v11);
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
            goto LABEL_4;
        }
        else
        {
          if (v22 != v15)
          {
            memmove(v13[7], v11, (char *)v22 - (char *)v15);
            v15 = v14[8];
          }
          v24 = (char *)v11 + v23;
          v25 = 32 - v23;
          memmove(v15, v24, v25);
          v14[8] = (uint64_t *)((char *)v15 + v25);
          operator delete(v11);
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
            goto LABEL_4;
        }
      }
      else
      {
        if (v15)
        {
          v13[8] = v15;
          operator delete(v15);
          v17 = 0;
          *v16 = 0;
          v16[1] = 0;
          v16[2] = 0;
        }
        v18 = 2 * v17;
        if (2 * v17 <= 0x20)
          v18 = 32;
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
          v19 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        v20 = (uint64_t *)operator new(v19);
        v14[7] = v20;
        v14[8] = v20;
        v14[9] = (uint64_t *)((char *)v20 + v19);
        v21 = v11[1];
        *(_OWORD *)v20 = *v11;
        *((_OWORD *)v20 + 1) = v21;
        v14[8] = v20 + 4;
        operator delete(v11);
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
          goto LABEL_4;
      }
      operator delete(__p[0]);
LABEL_4:
      __s += 96;
      if (!--v5)
        return a1;
    }
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    __p[1] = v7;
    __p[2] = (void *)(v10 | 0x8000000000000000);
    __p[0] = v8;
LABEL_12:
    memcpy(v8, __s, (size_t)v7);
    goto LABEL_13;
  }
  return a1;
}

void sub_212AC8BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char **a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(v17, *a10);
  _Unwind_Resume(a1);
}

void sub_212AC8BE8()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x212AC8BF4);
}

void BBUICE16HashData::~BBUICE16HashData(char **this)
{
  *this = (char *)off_24CE81D48;
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy((uint64_t)(this + 1), this[2]);
}

{
  *this = (char *)off_24CE81D48;
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy((uint64_t)(this + 1), this[2]);
  operator delete(this);
}

BOOL BBUICE16HashData::compare(BBUICE16HashData *this, BBUFeedback *a2, const BBUHashData *lpsrc)
{
  void *v5;
  _BOOL8 v6;
  __int128 *v7;
  char *v8;
  __int128 v9;
  const unsigned __int8 *v10;
  const unsigned __int8 *v11;
  const char *v12;
  void *v13;
  const char *v14;
  __int128 *v15;
  __int128 *v16;
  BOOL v17;
  _BYTE v19[32];
  __int128 v20;

  if (!lpsrc)
  {
    v5 = 0;
    v6 = 0;
    v7 = (__int128 *)*((_QWORD *)this + 1);
    v8 = (char *)this + 16;
    if (v7 == (__int128 *)((char *)this + 16))
      return v6;
LABEL_7:
    while (1)
    {
      *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v19[16] = v9;
      v20 = v9;
      *(_OWORD *)v19 = v9;
      std::pair<std::string const,std::vector<unsigned char>>::pair[abi:ne180100]((std::string *)v19, v7 + 2);
      v10 = *(const unsigned __int8 **)&v19[24];
      v11 = (const unsigned __int8 *)(*(uint64_t (**)(void *, _BYTE *))(*(_QWORD *)v5 + 40))(v5, v19);
      if (!v11)
        break;
      if (!v6)
        goto LABEL_18;
      if (v19[23] >= 0)
        v12 = v19;
      else
        v12 = *(const char **)v19;
      v6 = BBUHashData::compareHash(this, a2, v10, v11, v12);
      v13 = *(void **)&v19[24];
      if (*(_QWORD *)&v19[24])
        goto LABEL_19;
LABEL_20:
      if ((v19[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v19);
        v15 = (__int128 *)*((_QWORD *)v7 + 1);
        if (v15)
        {
          do
          {
LABEL_24:
            v16 = v15;
            v15 = *(__int128 **)v15;
          }
          while (v15);
          goto LABEL_6;
        }
      }
      else
      {
        v15 = (__int128 *)*((_QWORD *)v7 + 1);
        if (v15)
          goto LABEL_24;
      }
      do
      {
        v16 = (__int128 *)*((_QWORD *)v7 + 2);
        v17 = *(_QWORD *)v16 == (_QWORD)v7;
        v7 = v16;
      }
      while (!v17);
LABEL_6:
      v7 = v16;
      if (v16 == (__int128 *)v8)
        return v6;
    }
    if (v19[23] >= 0)
      v14 = v19;
    else
      v14 = *(const char **)v19;
    BBUFeedback::handleComment(a2, "Hash missing in BBFW: %s", v14);
LABEL_18:
    v6 = 0;
    v13 = *(void **)&v19[24];
    if (!*(_QWORD *)&v19[24])
      goto LABEL_20;
LABEL_19:
    *(_QWORD *)&v20 = v13;
    operator delete(v13);
    goto LABEL_20;
  }
  v6 = v5 != 0;
  v7 = (__int128 *)*((_QWORD *)this + 1);
  v8 = (char *)this + 16;
  if (v7 != (__int128 *)((char *)this + 16))
    goto LABEL_7;
  return v6;
}

void sub_212AC8E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::string const,std::vector<unsigned char>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::vector<unsigned char>>::~pair(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void BBUICE16HashData::showHashes(BBUICE16HashData *this, BBUFeedback *a2)
{
  __int128 *v2;
  char *v3;
  __int128 v6;
  const char *v7;
  const char *v8;
  void *v9;
  __int128 *v10;
  __int128 *v11;
  BOOL v12;
  _BYTE v13[32];
  __int128 v14;
  void *v15[2];
  uint64_t v16;

  v2 = (__int128 *)*((_QWORD *)this + 1);
  v3 = (char *)this + 16;
  if (v2 != (__int128 *)((char *)this + 16))
  {
    while (1)
    {
      *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v13[16] = v6;
      v14 = v6;
      *(_OWORD *)v13 = v6;
      std::pair<std::string const,std::vector<unsigned char>>::pair[abi:ne180100]((std::string *)v13, v2 + 2);
      v7 = v13[23] >= 0 ? v13 : *(const char **)v13;
      v15[0] = 0;
      v15[1] = 0;
      v16 = 0;
      (*(void (**)(BBUICE16HashData *))(*(_QWORD *)this + 32))(this);
      ctu::assign();
      v8 = v16 >= 0 ? (const char *)v15 : (const char *)v15[0];
      BBUFeedback::handleComment(a2, "\t %s:  %s", v7, v8);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        break;
      operator delete(v15[0]);
      v9 = *(void **)&v13[24];
      if (*(_QWORD *)&v13[24])
        goto LABEL_12;
LABEL_13:
      if ((v13[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v13);
        v10 = (__int128 *)*((_QWORD *)v2 + 1);
        if (v10)
        {
          do
          {
LABEL_19:
            v11 = v10;
            v10 = *(__int128 **)v10;
          }
          while (v10);
          goto LABEL_3;
        }
      }
      else
      {
        v10 = (__int128 *)*((_QWORD *)v2 + 1);
        if (v10)
          goto LABEL_19;
      }
      do
      {
        v11 = (__int128 *)*((_QWORD *)v2 + 2);
        v12 = *(_QWORD *)v11 == (_QWORD)v2;
        v2 = v11;
      }
      while (!v12);
LABEL_3:
      v2 = v11;
      if (v11 == (__int128 *)v3)
        return;
    }
    v9 = *(void **)&v13[24];
    if (!*(_QWORD *)&v13[24])
      goto LABEL_13;
LABEL_12:
    *(_QWORD *)&v14 = v9;
    operator delete(v9);
    goto LABEL_13;
  }
}

void sub_212AC9008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  std::pair<std::string const,std::vector<unsigned char>>::~pair((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16HashData::getFileHash(uint64_t a1, const void **a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::__value_type<std::string,BBUZipFile::FileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,BBUZipFile::FileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BBUZipFile::FileInfo>>>::find<std::string>(a1 + 8, a2);
  if ((uint64_t *)(a1 + 16) == v3)
    return 0;
  else
    return v3[7];
}

uint64_t BBUICE16HashData::getHashSize(BBUICE16HashData *this)
{
  return 32;
}

std::string *std::pair<std::string const,std::vector<unsigned char>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;
  _BYTE *v9;
  void *v10;
  std::string::size_type v11;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v9 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v9 - v6;
    if (v9 == v6)
      return this;
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v5 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v5 - v6;
    if (v5 == v6)
      return this;
  }
  if ((v7 & 0x8000000000000000) != 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v10 = operator new(v7);
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v10;
  v11 = (std::string::size_type)v10 + v7;
  this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v10 + v7;
  memcpy(v10, v6, v7);
  this[1].__r_.__value_.__l.__size_ = v11;
  return this;
}

void sub_212AC9140(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<unsigned char>>,std::__tree_node<std::__value_type<std::string,std::vector<unsigned char>>,void *> *,long>>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 *v11;
  void **v12;
  char v13;
  __int128 v14;
  void *v15;
  size_t v16;
  char *v17;
  __int128 *v18;
  BOOL v19;
  char *v20;
  uint64_t v21;
  char *i;
  __int128 *v23;
  __int128 *v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;

  v4 = a2;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_52;
  v6 = *(uint64_t **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v8 = v6[1] ? v6[1] : (uint64_t)v6;
  v28 = v8;
  if (!v8)
    goto LABEL_52;
  v9 = *(char **)(v8 + 16);
  if (v9)
  {
    v10 = *(char **)v9;
    if (*(_QWORD *)v9 == v8)
    {
      *(_QWORD *)v9 = 0;
      while (1)
      {
        v25 = (char *)*((_QWORD *)v9 + 1);
        if (!v25)
          break;
        do
        {
          v9 = v25;
          v25 = *(char **)v25;
        }
        while (v25);
      }
    }
    else
    {
      for (*((_QWORD *)v9 + 1) = 0; v10; v10 = (char *)*((_QWORD *)v9 + 1))
      {
        do
        {
          v9 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v27 = (uint64_t)v9;
  if (a2 == a3)
  {
    v21 = a1;
    std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(a1, (char *)v8);
    if (!v9)
      goto LABEL_52;
    goto LABEL_49;
  }
  v11 = a2;
  do
  {
    if ((__int128 *)v8 != v11)
    {
      v12 = (void **)(v8 + 32);
      v13 = *((_BYTE *)v11 + 55);
      if (*(char *)(v8 + 55) < 0)
      {
        if (v13 >= 0)
          v15 = v11 + 2;
        else
          v15 = (void *)*((_QWORD *)v11 + 4);
        if (v13 >= 0)
          v16 = *((unsigned __int8 *)v11 + 55);
        else
          v16 = *((_QWORD *)v11 + 5);
        std::string::__assign_no_alias<false>(v12, v15, v16);
      }
      else if ((*((_BYTE *)v11 + 55) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v12, *((void **)v11 + 4), *((_QWORD *)v11 + 5));
      }
      else
      {
        v14 = v11[2];
        *(_QWORD *)(v8 + 48) = *((_QWORD *)v11 + 6);
        *(_OWORD *)v12 = v14;
      }
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v8 + 56), *((char **)v11 + 7), *((char **)v11 + 8), *((_QWORD *)v11 + 8) - *((_QWORD *)v11 + 7));
      v8 = v28;
    }
    std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__node_insert_multi((uint64_t **)a1, v8);
    v8 = v27;
    v28 = v27;
    if (v27)
    {
      v9 = *(char **)(v27 + 16);
      if (v9)
      {
        v17 = *(char **)v9;
        if (*(_QWORD *)v9 == v27)
        {
          *(_QWORD *)v9 = 0;
          while (1)
          {
            v20 = (char *)*((_QWORD *)v9 + 1);
            if (!v20)
              break;
            do
            {
              v9 = v20;
              v20 = *(char **)v20;
            }
            while (v20);
          }
        }
        else
        {
          for (*((_QWORD *)v9 + 1) = 0; v17; v17 = (char *)*((_QWORD *)v9 + 1))
          {
            do
            {
              v9 = v17;
              v17 = *(char **)v17;
            }
            while (v17);
          }
        }
      }
      v27 = (uint64_t)v9;
      v18 = (__int128 *)*((_QWORD *)v11 + 1);
      if (!v18)
      {
        do
        {
LABEL_37:
          v4 = (__int128 *)*((_QWORD *)v11 + 2);
          v19 = *(_QWORD *)v4 == (_QWORD)v11;
          v11 = v4;
        }
        while (!v19);
        goto LABEL_39;
      }
    }
    else
    {
      v9 = 0;
      v18 = (__int128 *)*((_QWORD *)v11 + 1);
      if (!v18)
        goto LABEL_37;
    }
    do
    {
      v4 = v18;
      v18 = *(__int128 **)v18;
    }
    while (v18);
LABEL_39:
    if (!v8)
      break;
    v11 = v4;
  }
  while (v4 != a3);
  v21 = a1;
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(a1, (char *)v8);
  if (!v9)
    goto LABEL_52;
LABEL_49:
  for (i = (char *)*((_QWORD *)v9 + 2); i; i = (char *)*((_QWORD *)i + 2))
    v9 = i;
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(v21, v9);
LABEL_52:
  if (v4 != a3)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__emplace_multi<std::pair<std::string const,std::vector<unsigned char>> const&>((uint64_t **)a1, v4 + 2);
      v23 = (__int128 *)*((_QWORD *)v4 + 1);
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = *(__int128 **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (__int128 *)*((_QWORD *)v4 + 2);
          v19 = *(_QWORD *)v24 == (_QWORD)v4;
          v4 = v24;
        }
        while (!v19);
      }
      v4 = v24;
    }
    while (v24 != a3);
  }
}

void sub_212AC9414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t **v5;
  int v6;
  const void *v7;
  size_t v8;
  uint64_t **v9;
  _QWORD *v10;
  const void *v11;
  const void *v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    v6 = *(char *)(a2 + 55);
    if (v6 >= 0)
      v7 = (const void *)(a2 + 32);
    else
      v7 = *(const void **)(a2 + 32);
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 55);
    else
      v8 = *(_QWORD *)(a2 + 40);
    while (1)
    {
      v5 = (uint64_t **)v4;
      v12 = (const void *)v4[4];
      v10 = v4 + 4;
      v11 = v12;
      v13 = *((char *)v10 + 23);
      if (v13 >= 0)
        v14 = v10;
      else
        v14 = v11;
      if (v13 >= 0)
        v15 = *((unsigned __int8 *)v10 + 23);
      else
        v15 = v10[1];
      if (v15 >= v8)
        v16 = v8;
      else
        v16 = v15;
      v17 = memcmp(v7, v14, v16);
      if (v17)
      {
        if (v17 < 0)
          goto LABEL_8;
LABEL_22:
        v4 = v5[1];
        if (!v4)
        {
          v9 = v5 + 1;
          goto LABEL_25;
        }
      }
      else
      {
        if (v8 >= v15)
          goto LABEL_22;
LABEL_8:
        v4 = *v5;
        v9 = v5;
        if (!*v5)
          goto LABEL_25;
      }
    }
  }
  v9 = a1 + 1;
LABEL_25:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v5;
  *v9 = (uint64_t *)a2;
  v18 = (uint64_t *)**a1;
  v19 = (uint64_t *)a2;
  if (v18)
  {
    *a1 = v18;
    v19 = *v9;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v19);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return a2;
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

char *std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__emplace_multi<std::pair<std::string const,std::vector<unsigned char>> const&>(uint64_t **a1, __int128 *a2)
{
  char **v4;
  char *v5;
  std::string *v6;
  char *v7;
  char **v8;
  int v9;
  std::string *v10;
  size_t v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  uint64_t *v20;
  char *v22;

  v4 = (char **)(a1 + 1);
  v5 = (char *)operator new(0x50uLL);
  v22 = v5;
  v6 = std::pair<std::string const,std::vector<unsigned char>>::pair[abi:ne180100]((std::string *)(v5 + 32), a2);
  v7 = *v4;
  v8 = v4;
  if (*v4)
  {
    v9 = v5[55];
    if (v9 >= 0)
      v10 = v6;
    else
      v10 = (std::string *)*((_QWORD *)v5 + 4);
    if (v9 >= 0)
      v11 = v5[55];
    else
      v11 = *((_QWORD *)v5 + 5);
    while (1)
    {
      v4 = (char **)v7;
      v14 = (const void *)*((_QWORD *)v7 + 4);
      v12 = v7 + 32;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v11)
        v18 = v11;
      else
        v18 = v17;
      v19 = memcmp(v10, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v7 = v4[1];
        if (!v7)
        {
          v8 = v4 + 1;
          break;
        }
      }
      else
      {
        if (v11 >= v17)
          goto LABEL_22;
LABEL_8:
        v7 = *v4;
        v8 = v4;
        if (!*v4)
          break;
      }
    }
  }
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = v4;
  *v8 = v5;
  v20 = (uint64_t *)**a1;
  if (v20)
  {
    *a1 = v20;
    v5 = *v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v5);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v22;
}

void sub_212AC96A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<unsigned char>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<unsigned char>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<unsigned char>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<unsigned char>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(void **)(v2 + 56);
      if (v3)
      {
        *(_QWORD *)(v2 + 64) = v3;
        operator delete(v3);
      }
      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t createETLStructures(uint64_t *a1, void **a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  void *v34;
  const char *v35;
  char v36;

  if (!a1 || !a2)
  {
    _BBUFSDebugPrint("createETLStructures", "bad arguments header = %p, ringBuffer = %p\n", (uint64_t)a3, a4, a5, a6, a7, a8, (char)a2);
    return 0;
  }
  v11 = malloc(0x4000uLL);
  *a2 = v11;
  if (!v11)
  {
    _BBUFSDebugPrint("createETLStructures", "failed allocating memory for header\n", v12, v13, v14, v15, v16, v17, v36);
    v34 = *a2;
    if (!*a2)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (a3)
    *a3 = 0x4000;
  v18 = malloc(0x1000uLL);
  if (!v18)
  {
    _BBUFSDebugPrint("createETLStructures", "failed allocating memory for scratch buffer\n", v19, v20, v21, v22, v23, v24, v36);
    v34 = *a2;
    if (!*a2)
      goto LABEL_20;
LABEL_19:
    free(v34);
    *a2 = 0;
    goto LABEL_20;
  }
  v25 = v18;
  v26 = malloc(0x18uLL);
  *a1 = (uint64_t)v26;
  if (v26)
  {
    if ((TelephonyUtilRingBufferInitialize() & 1) != 0)
      return 1;
    v35 = "failed initializing ring buffer\n";
  }
  else
  {
    v35 = "failed allocating TelephonyUtilRingBuffer\n";
  }
  _BBUFSDebugPrint("createETLStructures", v35, v27, v28, v29, v30, v31, v32, v36);
  free(v25);
  v34 = *a2;
  if (*a2)
    goto LABEL_19;
LABEL_20:
  result = *a1;
  if (*a1)
  {
    free((void *)result);
    result = 0;
    *a1 = 0;
  }
  return result;
}

_QWORD *BBUInitializer::create(BBUInitializer *this, BBUFeedback *a2)
{
  uint64_t v2;
  _QWORD *v4;
  capabilities::updater *v5;
  capabilities::updater *v6;
  capabilities::updater *v7;
  capabilities::updater *v8;
  _QWORD *result;
  _QWORD *v10;
  capabilities::updater *v11;
  capabilities::updater *v12;
  capabilities::updater *v13;
  capabilities::updater *v14;
  void *exception;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  switch(capabilities::updater::getInitializerVersion(this))
  {
    case 0u:
    case 3u:
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Initialization/Common/BBUInitializer.cpp", 0x38u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type!\")", v16, v17, v18, v19);
    case 1u:
      v4 = operator new(0x1E0uLL);
      *v4 = &unk_24CE81DA0;
      v4[1] = this;
      v4[2] = 0;
      *((_BYTE *)v4 + 24) = 0;
      *((_BYTE *)v4 + 28) = 0;
      *((_BYTE *)v4 + 32) = 0;
      *((_DWORD *)v4 + 9) = 0;
      *((_BYTE *)v4 + 40) = 1;
      v4[6] = 0;
      v5 = (capabilities::updater *)capabilities::updater::pingAttemptCount((capabilities::updater *)v4);
      *((_DWORD *)v4 + 114) = (_DWORD)v5;
      v6 = (capabilities::updater *)capabilities::updater::resetDelay(v5);
      *((_DWORD *)v4 + 115) = (_DWORD)v6;
      v7 = (capabilities::updater *)capabilities::updater::NVRestoreTimeout(v6);
      *((_DWORD *)v4 + 116) = (_DWORD)v7;
      v8 = (capabilities::updater *)capabilities::updater::personalizationCommandTimeout(v7);
      *((_DWORD *)v4 + 117) = (_DWORD)v8;
      *((_DWORD *)v4 + 118) = capabilities::updater::pingTimeout(v8);
      *v4 = &unk_24CE853D0;
      result = v4;
      break;
    case 2u:
      v10 = operator new(0x1E0uLL);
      *v10 = &unk_24CE81DA0;
      v10[1] = this;
      v10[2] = 0;
      *((_BYTE *)v10 + 24) = 0;
      *((_BYTE *)v10 + 28) = 0;
      *((_BYTE *)v10 + 32) = 0;
      *((_DWORD *)v10 + 9) = 0;
      *((_BYTE *)v10 + 40) = 1;
      v10[6] = 0;
      v11 = (capabilities::updater *)capabilities::updater::pingAttemptCount((capabilities::updater *)v10);
      *((_DWORD *)v10 + 114) = (_DWORD)v11;
      v12 = (capabilities::updater *)capabilities::updater::resetDelay(v11);
      *((_DWORD *)v10 + 115) = (_DWORD)v12;
      v13 = (capabilities::updater *)capabilities::updater::NVRestoreTimeout(v12);
      *((_DWORD *)v10 + 116) = (_DWORD)v13;
      v14 = (capabilities::updater *)capabilities::updater::personalizationCommandTimeout(v13);
      *((_DWORD *)v10 + 117) = (_DWORD)v14;
      *((_DWORD *)v10 + 118) = capabilities::updater::pingTimeout(v14);
      *v10 = &unk_24CE86260;
      result = v10;
      break;
    default:
      result = (_QWORD *)v2;
      break;
  }
  return result;
}

void sub_212AC99FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AC9A10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212AC9A24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUInitializer::pingBlocking(BBUFeedback **a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v4 = (*((uint64_t (**)(BBUFeedback **))*a1 + 14))(a1);
  if (!v4)
    return 2863311530;
  v5 = 0;
  v6 = v4 - 1;
  while (1)
  {
    v7 = (*((uint64_t (**)(BBUFeedback **, uint64_t, uint64_t))*a1 + 27))(a1, a2, v5);
    if (!(_DWORD)v7)
      break;
    BBUFeedback::handleComment(a1[1], "Ping failed, %u tries left", v6);
    v5 = (v5 + 1);
    if (--v6 == -1)
      return v7;
  }
  BBUFeedback::handleComment(a1[1], "Ping success");
  return v7;
}

uint64_t BBUInitializer::powercycle()
{
  uint64_t result;

  result = TelephonyBasebandPowercycleModem();
  if ((_DWORD)result)
    return TelephonyBasebandPowerOnModem();
  return result;
}

uint64_t BBUInitializer::getPingAttempts(BBUInitializer *this)
{
  if (*((_BYTE *)this + 28))
    return *((unsigned int *)this + 6);
  else
    return (*(uint64_t (**)(BBUInitializer *))(*(_QWORD *)this + 272))(this);
}

uint64_t BBUInitializer::setPingAttempts(BBUInitializer *this, int a2)
{
  BBUFeedback *v4;
  int v5;

  if ((*(unsigned int (**)(BBUInitializer *))(*(_QWORD *)this + 272))(this) != a2)
  {
    v4 = (BBUFeedback *)*((_QWORD *)this + 1);
    v5 = (*(uint64_t (**)(BBUInitializer *))(*(_QWORD *)this + 272))(this);
    BBUFeedback::handleComment(v4, "Ping attempts set to %u from %u", a2, v5);
  }
  *((_DWORD *)this + 6) = a2;
  *((_BYTE *)this + 28) = 1;
  return 0;
}

uint64_t BBUInitializer::getBootMode(BBUInitializer *this)
{
  return *((unsigned int *)this + 9);
}

void BBUInitializer::setBootMode(uint64_t a1, unsigned int a2)
{
  BBUFeedback *v2;
  const char *v3;

  *(_DWORD *)(a1 + 36) = a2;
  v2 = *(BBUFeedback **)(a1 + 8);
  if (a2 > 2)
    v3 = "Unknown";
  else
    v3 = off_24CE81EC8[a2];
  BBUFeedback::handleComment(v2, "Requested boot mode:  %s", v3);
}

uint64_t BBUInitializer::getIgnoreManifestStatus(BBUInitializer *this)
{
  return *((unsigned __int8 *)this + 32);
}

uint64_t BBUInitializer::setIgnoreManifestStatus(uint64_t this, char a2)
{
  *(_BYTE *)(this + 32) = a2;
  return this;
}

uint64_t BBUInitializer::getResetDelayMilliseconds(BBUInitializer *this)
{
  return *((unsigned int *)this + 115);
}

void BBUInitializer::setResetDelayMilliseconds(BBUInitializer *this, int a2)
{
  BBUFeedback *v4;
  int v5;

  if ((*(unsigned int (**)(BBUInitializer *))(*(_QWORD *)this + 168))(this) != a2)
  {
    v4 = (BBUFeedback *)*((_QWORD *)this + 1);
    v5 = (*(uint64_t (**)(BBUInitializer *))(*(_QWORD *)this + 168))(this);
    BBUFeedback::handleComment(v4, "Setting reset delay to %u from %u", a2, v5);
    *((_DWORD *)this + 115) = a2;
  }
}

uint64_t BBUInitializer::getNVRestoreTimeoutMilliseconds(BBUInitializer *this)
{
  return *((unsigned int *)this + 116);
}

uint64_t BBUInitializer::getPersonalizationCommandTimeoutMilliseconds(BBUInitializer *this)
{
  return *((unsigned int *)this + 117);
}

uint64_t BBUInitializer::getPingTimeoutMilliseconds(BBUInitializer *this)
{
  return *((unsigned int *)this + 118);
}

uint64_t BBUInitializer::getDefaultPingAttempts(BBUInitializer *this)
{
  return *((unsigned int *)this + 114);
}

void BBUpdaterFusingProgram::BBUpdaterFusingProgram(BBUpdaterFusingProgram *this, BBUDataSource *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  size_t v11;
  UInt8 *v12;
  const __CFAllocator *v13;
  const __CFData *v14;
  const __CFData *v15;
  const __CFDictionary *v16;
  const void *Value;
  const void *v18;
  CFTypeID v19;
  const __CFArray *v20;
  CFIndex v21;
  const __CFArray *v22;
  int v23;
  int v24;
  const void *v25;
  CFTypeID v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  CFTypeID v31;
  CFNumberType Type;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *exception;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  int valuePtr;
  void *__p[2];
  uint64_t v76;
  int v77;
  unsigned int v78[5];
  void *v79[2];
  uint64_t v80;
  CFPropertyListFormat format;
  int v82;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 7) = -1;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
      goto LABEL_5;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(19, 0, "BBUpdaterFusingProgram", (const char *)&str_15, "Loading fusing program\n", a6, a7, a8, v73);
LABEL_5:
  if (a2)
  {
    v10 = (*(uint64_t (**)(BBUDataSource *))(*(_QWORD *)a2 + 24))(a2);
    if (v10 >= 0x4000)
      v11 = 0x4000;
    else
      v11 = v10;
    v12 = (UInt8 *)operator new[](v11);
    v82 = -1431655766;
    if ((*(unsigned int (**)(BBUDataSource *, UInt8 *, size_t, int *, _QWORD))(*(_QWORD *)a2 + 16))(a2, v12, v11, &v82, 0))
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x2Cu, (ctu::LogMessageBuffer *)"Assertion failure(ret == kBBUReturnSuccess)", v58, v59, v60, v73);
    }
    else if (v82 == (_DWORD)v11)
    {
      v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v14 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v12, v11);
      if (v14)
      {
        v15 = v14;
        format = kCFPropertyListXMLFormat_v1_0;
        v16 = (const __CFDictionary *)CFPropertyListCreateWithData(v13, v14, 2uLL, &format, 0);
        Value = CFDictionaryGetValue(v16, CFSTR("Instructions"));
        if (Value)
        {
          v18 = Value;
          CFRetain(Value);
          v19 = CFGetTypeID(v18);
          if (v19 == CFArrayGetTypeID())
          {
            *((_QWORD *)this + 2) = v18;
            CFRelease(v16);
            CFRelease(v15);
            operator delete[](v12);
            BBUpdaterFusingProgram::createFuseDictionary(this);
            v20 = (const __CFArray *)*((_QWORD *)this + 2);
            if (v20)
              LODWORD(v20) = CFArrayGetCount(v20);
            v21 = 0;
            *((_DWORD *)this + 7) = (_DWORD)v20;
            while (1)
            {
              v22 = (const __CFArray *)*((_QWORD *)this + 2);
              if (v22)
                LODWORD(v22) = CFArrayGetCount(v22);
              if (v21 >= v22)
                return;
              v79[0] = 0;
              v79[1] = 0;
              v80 = 0;
              memset(v78, 170, sizeof(v78));
              if ((BBUpdaterFusingProgram::getFuseItem((CFArrayRef *)this, v21, (const __CFString **)&v78[3], (const void **)&v78[1], v78) & 1) == 0)
              {
                v41 = __cxa_allocate_exception(0x210uLL);
                _BBUException::_BBUException((uint64_t)v41, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x4Fu, (ctu::LogMessageBuffer *)"Assertion failure(success)", v42, v43, v44, v73);
              }
              v77 = 0;
              v23 = BBUpdaterFusingProgram::mapFuseNameToID((CFDictionaryRef *)this, *(const __CFString **)&v78[3], (ctu::cf *)&v77);
              if (v77 == 65534)
                v24 = v23;
              else
                v24 = 0;
              if (v24 == 1)
                *((_DWORD *)this + 7) = v21;
              if ((ctu::cf::assign() & 1) == 0)
              {
                v37 = __cxa_allocate_exception(0x210uLL);
                _BBUException::_BBUException((uint64_t)v37, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x5Du, (ctu::LogMessageBuffer *)"Assertion failure(success)", v38, v39, v40, v73);
              }
              v25 = *(const void **)&v78[1];
              v26 = CFGetTypeID(*(CFTypeRef *)&v78[1]);
              if (v26 == CFStringGetTypeID())
                break;
              v31 = CFGetTypeID(v25);
              if (v31 != CFNumberGetTypeID())
                goto LABEL_17;
              Type = CFNumberGetType((CFNumberRef)v25);
              __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
              if (Type == kCFNumberSInt32Type)
              {
                valuePtr = -1431655766;
                if (!CFNumberGetValue((CFNumberRef)v25, kCFNumberIntType, &valuePtr))
                {
                  v53 = __cxa_allocate_exception(0x210uLL);
                  _BBUException::_BBUException((uint64_t)v53, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x73u, (ctu::LogMessageBuffer *)"Assertion failure(success)", v54, v55, v56, v73);
                }
                __p[0] = (void *)valuePtr;
              }
              else if (!CFNumberGetValue((CFNumberRef)v25, kCFNumberSInt64Type, __p))
              {
                v49 = __cxa_allocate_exception(0x210uLL);
                _BBUException::_BBUException((uint64_t)v49, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x7Au, (ctu::LogMessageBuffer *)"Assertion failure(success)", v50, v51, v52, v73);
              }
              if (gBBULogMaskGet(void)::once == -1)
              {
                if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
                  goto LABEL_17;
              }
              else
              {
                dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
                if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
                  goto LABEL_17;
              }
              if ((gBBULogVerbosity & 0x80000000) == 0)
              {
                v36 = v79;
                if (v80 < 0)
                  LOBYTE(v36) = v79[0];
                _BBULog(13, 0, "BBUpdaterFusingProgram", (const char *)&str_15, "Fuse %s:0x%016llx(%llu) 0x%08x\n", v33, v34, v35, (char)v36);
              }
LABEL_17:
              if (SHIBYTE(v80) < 0)
                operator delete(v79[0]);
              v21 = (v21 + 1);
            }
            __p[0] = 0;
            __p[1] = 0;
            v76 = 0;
            if ((ctu::cf::assign() & 1) == 0)
            {
              v45 = __cxa_allocate_exception(0x210uLL);
              _BBUException::_BBUException((uint64_t)v45, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x64u, (ctu::LogMessageBuffer *)"Assertion failure(success)", v46, v47, v48, v73);
            }
            if (gBBULogMaskGet(void)::once == -1)
            {
              if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
                goto LABEL_34;
            }
            else
            {
              dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
              if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
              {
LABEL_34:
                if ((gBBULogVerbosity & 0x80000000) == 0)
                {
                  v30 = v79;
                  if (v80 < 0)
                    LOBYTE(v30) = v79[0];
                  _BBULog(13, 0, "BBUpdaterFusingProgram", (const char *)&str_15, "Fuse %s: %s 0x%08x\n", v27, v28, v29, (char)v30);
                }
              }
            }
            if (SHIBYTE(v76) < 0)
              operator delete(__p[0]);
            goto LABEL_17;
          }
          exception = __cxa_allocate_exception(0x210uLL);
          _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x3Au, (ctu::LogMessageBuffer *)"Assertion failure(CFGetTypeID( v) == CFArrayGetTypeID())", v70, v71, v72, v73);
        }
        else
        {
          exception = __cxa_allocate_exception(0x210uLL);
          _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x37u, (ctu::LogMessageBuffer *)"Assertion failure(v)", v67, v68, v69, v73);
        }
      }
      else
      {
        exception = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x30u, (ctu::LogMessageBuffer *)"Assertion failure(data)", v64, v65, v66, v73);
      }
    }
    else
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x2Du, (ctu::LogMessageBuffer *)"Assertion failure(copied == length)", v61, v62, v63, v73);
    }
  }
}

void sub_212ACA388(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212ACA39C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212ACA3B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212ACA3C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212ACA3D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212ACA3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void BBUpdaterFusingProgram::createFuseDictionary(BBUpdaterFusingProgram *this)
{
  uint64_t FusingProgramType;
  _QWORD *v3;
  unsigned int v4;
  CFIndex v5;
  uint64_t v6;
  char *v7;
  size_t v8;
  void *v9;
  CFTypeRef *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFAllocator *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *exception;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28[8];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  FusingProgramType = capabilities::updater::getFusingProgramType(this);
  switch((_DWORD)FusingProgramType)
  {
    case 0:
      v3 = &_MergedGlobals;
LABEL_7:
      *((_BYTE *)this + 24) = 1;
      v4 = 58;
      goto LABEL_8;
    case 1:
      v3 = &unk_253D32268;
      goto LABEL_7;
    case 2:
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUpdaterFusingProgram.cpp", 0x215u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type.\")", v25, v26, v27, v28[0]);
  }
  v3 = (_QWORD *)0xAAAAAAAAAAAAAAAALL;
  v4 = -1431655766;
LABEL_8:
  v5 = v4;
  v6 = 8 * v4;
  MEMORY[0x24BDAC7A8](FusingProgramType);
  v7 = &v28[-((v6 + 15) & 0xFFFFFFFF0)];
  v8 = ((v6 + 0x7FFFFFFF8) & 0x5555555C8) + 8;
  v9 = memset(v7, 170, v8);
  MEMORY[0x24BDAC7A8](v9);
  v10 = (CFTypeRef *)v7;
  memset(v7, 170, v8);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 8) == 0)
      goto LABEL_12;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(19, 0, "BBUpdaterFusingProgram", (const char *)&str_15, "Number of entries in dictionary: %d\n", v11, v12, v13, v5);
LABEL_12:
  v14 = 0;
  v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v16 = 8 * v5;
  v17 = v3;
  do
  {
    *(_QWORD *)&v7[v14] = v17[1];
    *(_QWORD *)&v7[v14] = CFNumberCreate(v15, kCFNumberIntType, v17);
    v14 += 8;
    v17 += 2;
  }
  while (v16 != v14);
  v18 = 0;
  *(_QWORD *)this = CFDictionaryCreate(v15, (const void **)v7, (const void **)v7, v5, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  do
  {
    CFRelease(*(CFTypeRef *)&v7[v18]);
    v18 += 8;
  }
  while (v16 != v18);
  v19 = 0;
  v20 = (char *)v3 + 4;
  do
  {
    *(_QWORD *)&v7[v19] = *(_QWORD *)(v20 + 4);
    *(_QWORD *)&v7[v19] = CFNumberCreate(v15, kCFNumberIntType, v20);
    v19 += 8;
    v20 += 16;
  }
  while (v16 != v19);
  *((_QWORD *)this + 1) = CFDictionaryCreate(v15, (const void **)v7, (const void **)v7, v5, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  do
  {
    CFRelease(*v10++);
    --v5;
  }
  while (v5);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      return;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      return;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(13, 0, "BBUpdaterFusingProgram", (const char *)&str_15, "Created Fuse Dictionaries\n", v21, v22, v23, v28[0]);
}

void sub_212ACA808(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUpdaterFusingProgram::getFuseItem(CFArrayRef *this, CFIndex idx, const __CFString **a3, const void **a4, unsigned int *a5)
{
  uint64_t result;
  const __CFArray *v9;
  CFTypeID v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t Count;
  const char *v15;
  unint64_t v16;
  const __CFString *ValueAtIndex;
  CFTypeID v18;
  const void *v19;
  CFTypeID v20;
  CFTypeID v21;
  unsigned int v22;
  void *v23;
  CFTypeID v24;
  const __CFNumber *v25;
  char v26;
  unsigned int v27;

  result = (uint64_t)CFArrayGetValueAtIndex(this[2], idx);
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  if (!result)
    return result;
  v9 = (const __CFArray *)result;
  v10 = CFGetTypeID((CFTypeRef)result);
  if (v10 != CFArrayGetTypeID())
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      result = 0;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        return result;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      result = 0;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        return result;
    }
    if (gBBULogVerbosity < 0)
      return result;
    v15 = "Item is not an array\n";
    goto LABEL_36;
  }
  Count = CFArrayGetCount(v9);
  if (Count > 1)
  {
    v16 = Count;
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v9, 0);
    v18 = CFGetTypeID(ValueAtIndex);
    if (v18 != CFStringGetTypeID())
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        result = 0;
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
          return result;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        result = 0;
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
          return result;
      }
      if (gBBULogVerbosity < 0)
        return result;
      v15 = "key needs to be of type CFString\n";
      goto LABEL_36;
    }
    v19 = CFArrayGetValueAtIndex(v9, 1);
    v20 = CFGetTypeID(v19);
    if (v20 != CFStringGetTypeID())
    {
      v21 = CFGetTypeID(v19);
      if (v21 != CFNumberGetTypeID())
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          result = 0;
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
            return result;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          result = 0;
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
            return result;
        }
        if (gBBULogVerbosity < 0)
          return result;
        v15 = "Value needs to be of type CFString or CFNumber\n";
        goto LABEL_36;
      }
    }
    v22 = 0;
    v27 = 0;
    if (v16 >= 3)
    {
      v23 = (void *)CFArrayGetValueAtIndex(v9, 2);
      v24 = CFGetTypeID(v23);
      if (v24 != CFNumberGetTypeID())
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          result = 0;
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
            return result;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          result = 0;
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
            return result;
        }
        if (gBBULogVerbosity < 0)
          return result;
        v15 = "Flags needs to be of type CFNumber\n";
        goto LABEL_36;
      }
      if (!ctu::cf::assign((ctu::cf *)&v27, (int *)v23, v25))
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          result = 0;
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
            return result;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          result = 0;
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
            return result;
        }
        if ((gBBULogVerbosity & 0x80000000) == 0)
        {
          v15 = "Cannot retrieve the flags value\n";
LABEL_36:
          _BBULog(13, 0, "BBUpdaterFusingProgram", (const char *)&str_15, v15, v11, v12, v13, v26);
          return 0;
        }
        return result;
      }
      v22 = v27;
    }
    *a3 = ValueAtIndex;
    *a4 = v19;
    result = 1;
    *a5 = v22;
    return result;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    result = 0;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      return result;
    goto LABEL_6;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  result = 0;
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
  {
LABEL_6:
    if (gBBULogVerbosity < 0)
      return result;
    v15 = "Expected at least 2 parameters, key value [flags]\n";
    goto LABEL_36;
  }
  return result;
}

uint64_t BBUpdaterFusingProgram::mapFuseNameToID(CFDictionaryRef *this, const __CFString *a2, ctu::cf *a3)
{
  int *Value;
  const __CFNumber *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  Value = (int *)CFDictionaryGetValue(*this, a2);
  if (!Value)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
        goto LABEL_10;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
      {
LABEL_10:
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(13, 0, "BBUpdaterFusingProgram", (const char *)&str_15, "Got unexpected key\n", v6, v7, v8, v13);
      }
    }
    result = 0;
    *(_DWORD *)a3 = -1;
    return result;
  }
  result = ctu::cf::assign(a3, Value, v5);
  if (!(_DWORD)result)
    return result;
  if (gBBULogMaskGet(void)::once == -1)
  {
    result = 1;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      return result;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    result = 1;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      return result;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    _BBULog(13, 0, "BBUpdaterFusingProgram", (const char *)&str_15, "FuseID %d\n", v10, v11, v12, *(_DWORD *)a3);
    return 1;
  }
  return result;
}

uint64_t BBUpdaterFusingProgram::copyStringFuseItem(BBUpdaterFusingProgram *this, CFStringRef theString, unsigned __int8 *a3, int a4, unsigned int *a5)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  if (CFStringGetLength(theString) > (2 * a4))
    return 0;
  v6 = ctu::cf::assign();
  if ((_DWORD)v6)
  {
    v7 = TelephonyUtilHexToBin();
    v8 = *a5;
    if (v7 < *a5)
      v8 = v7;
    *a5 = v8;
  }
  return v6;
}

void sub_212ACAE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BBUpdaterFusingProgram::copyFuseItem(CFArrayRef *this, CFIndex a2, ctu::cf *a3, unsigned int *a4, const __CFString **a5, unsigned __int8 *a6, unsigned int a7, ctu::cf *a8)
{
  int FuseItem;
  uint64_t result;
  const __CFString *v16;
  CFTypeID v17;
  BBUpdaterFusingProgram *TypeID;
  CFTypeID v19;
  CFNumberType Type;
  size_t v21;
  CFTypeRef cf;
  int valuePtr;
  int32x2_t __src;

  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  *(_DWORD *)a8 = 0;
  *a5 = 0;
  FuseItem = BBUpdaterFusingProgram::getFuseItem(this, a2, a5, &cf, a4);
  result = 0;
  if (FuseItem)
  {
    result = BBUpdaterFusingProgram::mapFuseNameToID(this, *a5, a3);
    if ((_DWORD)result)
    {
      result = BBUpdaterFusingProgram::mapFuseNameToLength(this, *a5, a8);
      if ((_DWORD)result)
      {
        v16 = (const __CFString *)cf;
        v17 = CFGetTypeID(cf);
        TypeID = (BBUpdaterFusingProgram *)CFStringGetTypeID();
        if ((BBUpdaterFusingProgram *)v17 == TypeID)
          return BBUpdaterFusingProgram::copyStringFuseItem(TypeID, v16, a6, a7, (unsigned int *)a8);
        v19 = CFGetTypeID(v16);
        if (v19 != CFNumberGetTypeID())
          return 0;
        Type = CFNumberGetType((CFNumberRef)v16);
        if (*(_DWORD *)a8 > a7)
          return 0;
        __src = (int32x2_t)0xAAAAAAAAAAAAAAAALL;
        if (Type == kCFNumberSInt32Type)
        {
          valuePtr = -1431655766;
          result = CFNumberGetValue((CFNumberRef)v16, kCFNumberSInt32Type, &valuePtr);
          __src = (int32x2_t)valuePtr;
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          result = CFNumberGetValue((CFNumberRef)v16, kCFNumberSInt64Type, &__src);
          if (!(_DWORD)result)
            return result;
        }
        v21 = *(unsigned int *)a8;
        if (*((_BYTE *)this + 24) || v21 < 5)
          memcpy(a6, &__src, v21);
        else
          *(int32x2_t *)a6 = vrev64_s32(__src);
        return 1;
      }
    }
  }
  return result;
}

uint64_t BBUpdaterFusingProgram::mapFuseNameToLength(CFDictionaryRef *this, const __CFString *a2, ctu::cf *a3)
{
  unsigned int *Value;
  const __CFNumber *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  Value = (unsigned int *)CFDictionaryGetValue(this[1], a2);
  if (!Value)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
        goto LABEL_10;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
      {
LABEL_10:
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(13, 0, "BBUpdaterFusingProgram", (const char *)&str_15, "Got unexpected key\n", v6, v7, v8, v13);
      }
    }
    result = 0;
    *(_DWORD *)a3 = 0;
    return result;
  }
  result = ctu::cf::assign(a3, Value, v5);
  if (!(_DWORD)result)
    return result;
  if (gBBULogMaskGet(void)::once == -1)
  {
    result = 1;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      return result;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    result = 1;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      return result;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    _BBULog(13, 0, "BBUpdaterFusingProgram", (const char *)&str_15, "Fuse length %d\n", v10, v11, v12, *(_DWORD *)a3);
    return 1;
  }
  return result;
}

uint64_t BBUEURFusing::getSetModeTimeout(BBUEURFusing *this)
{
  return *((unsigned int *)this + 21);
}

uint64_t BBUEURFusing::getCommandTimeout(BBUEURFusing *this)
{
  return *((unsigned int *)this + 22);
}

const char *BBUEURFusing::getDebugName(BBUEURFusing *this)
{
  return "BBUEURFusing";
}

uint64_t eUICC::logEUICCData(int *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *__p;
  char v27;
  void *v28;
  char v29;
  void *v30[2];
  char v31;

  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v2 = *a1;
  ctu::hex((ctu *)((char *)a1 + 7), (const void *)0x10);
  _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylValve", "", "status 0x%x sw1_sw2 0x%x eid 0x%s op_mode 0x%hhx\n", v3, v4, v5, v2);
  if (v31 < 0)
    operator delete(v30[0]);
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v6 = v30;
  ctu::hex((ctu *)(a1 + 6), (const void *)0x20);
  if (v31 < 0)
    LOBYTE(v6) = v30[0];
  ctu::hex((ctu *)(a1 + 14), (const void *)8);
  ctu::hex((ctu *)(a1 + 16), (const void *)8);
  _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylValve", "", "current_fw_version %s main_fw_nonce 0x%s gold_fw_nonce 0x%s\n", v7, v8, v9, (char)v6);
  if (v27 < 0)
  {
    operator delete(__p);
    if ((v29 & 0x80000000) == 0)
    {
LABEL_11:
      if ((v31 & 0x80000000) == 0)
        goto LABEL_12;
LABEL_28:
      operator delete(v30[0]);
      if (gBBULogMaskGet(void)::once == -1)
        goto LABEL_13;
      goto LABEL_29;
    }
  }
  else if ((v29 & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v28);
  if (v31 < 0)
    goto LABEL_28;
LABEL_12:
  if (gBBULogMaskGet(void)::once == -1)
    goto LABEL_13;
LABEL_29:
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
LABEL_13:
  ctu::hex((ctu *)(a1 + 18), (const void *)0x10);
  v10 = v31;
  v11 = (char)v30[0];
  ctu::hex((ctu *)((char *)a1 + 147), (const void *)0x10);
  if (v10 >= 0)
    v15 = v30;
  else
    LOBYTE(v15) = v11;
  _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylValve", "", "main_fw_pcf_mac 0x%s gold_fw_pcf_mac 0x%s pcf_version 0x%x\n", v12, v13, v14, (char)v15);
  if ((v29 & 0x80000000) == 0)
  {
    if ((v31 & 0x80000000) == 0)
      goto LABEL_18;
LABEL_31:
    operator delete(v30[0]);
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_19;
    goto LABEL_32;
  }
  operator delete(v28);
  if (v31 < 0)
    goto LABEL_31;
LABEL_18:
  if (gBBULogMaskGet(void)::once == -1)
    goto LABEL_19;
LABEL_32:
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
LABEL_19:
  ctu::hex((ctu *)(a1 + 60), (const void *)3);
  v16 = v31;
  v17 = (char)v30[0];
  ctu::hex((ctu *)((char *)a1 + 243), (const void *)0x20);
  if (v16 >= 0)
    v21 = v30;
  else
    LOBYTE(v21) = v17;
  _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylValve", "", "loader_version 0x%s key_id 0x%s perso %d\n", v18, v19, v20, (char)v21);
  if ((v29 & 0x80000000) == 0)
  {
    if ((v31 & 0x80000000) == 0)
      goto LABEL_24;
LABEL_34:
    operator delete(v30[0]);
    if (gBBULogMaskGet(void)::once == -1)
      return _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylValve", "", "chip_id 0x%x stream_apdu_max_apdus 0x%x isAbsentOk: %s\n", v22, v23, v24, *((_BYTE *)a1 + 275));
LABEL_35:
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    return _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylValve", "", "chip_id 0x%x stream_apdu_max_apdus 0x%x isAbsentOk: %s\n", v22, v23, v24, *((_BYTE *)a1 + 275));
  }
  operator delete(v28);
  if (v31 < 0)
    goto LABEL_34;
LABEL_24:
  if (gBBULogMaskGet(void)::once != -1)
    goto LABEL_35;
  return _BBULog(22, 0xFFFFFFFFLL, "eUICCVinylValve", "", "chip_id 0x%x stream_apdu_max_apdus 0x%x isAbsentOk: %s\n", v22, v23, v24, *((_BYTE *)a1 + 275));
}

void sub_212ACB5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
  {
    operator delete(__p);
    if (*(char *)(v25 - 49) < 0)
    {
LABEL_6:
      operator delete(*(void **)(v25 - 72));
      _Unwind_Resume(exception_object);
    }
  }
  else if (*(char *)(v25 - 49) < 0)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *BBUEUR20Programmer::addProgressBarTimes(uint64_t *this, BBUFeedback *a2)
{
  uint64_t v2;
  int *v3;
  uint64_t **v4;
  uint64_t **v5;
  _QWORD *v6;
  int *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  int *v18;
  uint64_t **v19;
  _QWORD *v20;
  int *v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  _QWORD *v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  int *v32;
  uint64_t **v33;
  _QWORD *v34;
  int *v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t **v40;
  _QWORD *v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  int *v46;
  uint64_t **v47;
  _QWORD *v48;
  int *v49;
  int v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t **v54;
  _QWORD *v55;
  int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  int *v60;
  uint64_t **v61;
  _QWORD *v62;
  int *v63;
  int v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t **v68;
  _QWORD *v69;
  int v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t *v73;
  int *v74;
  uint64_t **v75;
  _QWORD *v76;
  int *v77;
  int v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t **v82;
  _QWORD *v83;
  int v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t *v87;
  int *v88;
  uint64_t **v89;
  _QWORD *v90;
  int *v91;
  int v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t **v96;
  _QWORD *v97;
  int v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t *v101;
  int *v102;
  uint64_t **v103;
  _QWORD *v104;
  int *v105;
  int v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t **v110;
  _QWORD *v111;
  int v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t *v115;
  int *v116;
  uint64_t **v117;
  _QWORD *v118;
  int *v119;
  int v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t **v124;
  _QWORD *v125;
  int v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t *v129;
  int *v130;
  uint64_t **v131;
  _QWORD *v132;
  int *v133;
  int v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t **v138;
  _QWORD *v139;
  int v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t *v143;
  int *v144;
  uint64_t **v145;
  _QWORD *v146;
  int *v147;
  int v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t **v152;
  _QWORD *v153;
  int v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t *v157;
  int *v158;
  _QWORD *v159;
  int v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t *v163;

  v2 = (uint64_t)this;
  v4 = (uint64_t **)(this + 2);
  v3 = (int *)this[2];
  v5 = (uint64_t **)(this + 2);
  v6 = this + 2;
  if (v3)
  {
    v7 = (int *)this[2];
    while (1)
    {
      while (1)
      {
        v6 = v7;
        v8 = v7[8];
        if (v8 < 2)
          break;
        v7 = (int *)*v6;
        v5 = (uint64_t **)v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v8 == 1)
        break;
      v7 = (int *)v6[1];
      if (!v7)
      {
        v5 = (uint64_t **)(v6 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v9 = v6;
    v6 = operator new(0x30uLL);
    *((_DWORD *)v6 + 8) = 1;
    v6[5] = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v9;
    *v5 = v6;
    v10 = **(_QWORD **)(v2 + 8);
    v11 = v6;
    if (v10)
    {
      *(_QWORD *)(v2 + 8) = v10;
      v11 = *v5;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v11);
    v3 = *(int **)(v2 + 16);
    ++*(_QWORD *)(v2 + 24);
  }
  v6[5] = 0x408F400000000000;
  v12 = v4;
  v13 = v4;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v13 = v3;
        v14 = v3[8];
        if (v14 < 13)
          break;
        v3 = (int *)*v13;
        v12 = (uint64_t **)v13;
        if (!*v13)
          goto LABEL_18;
      }
      if (v14 == 12)
        break;
      v3 = (int *)v13[1];
      if (!v3)
      {
        v12 = (uint64_t **)(v13 + 1);
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    v15 = v13;
    v13 = operator new(0x30uLL);
    *((_DWORD *)v13 + 8) = 12;
    v13[5] = 0;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = v15;
    *v12 = v13;
    v16 = **(_QWORD **)(v2 + 8);
    v17 = v13;
    if (v16)
    {
      *(_QWORD *)(v2 + 8) = v16;
      v17 = *v12;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v17);
    ++*(_QWORD *)(v2 + 24);
  }
  v13[5] = 0x4103880000000000;
  v18 = (int *)*v4;
  v19 = v4;
  v20 = v4;
  if (*v4)
  {
    v21 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        v20 = v21;
        v22 = v21[8];
        if (v22 < 10)
          break;
        v21 = (int *)*v20;
        v19 = (uint64_t **)v20;
        if (!*v20)
          goto LABEL_28;
      }
      if (v22 == 9)
        break;
      v21 = (int *)v20[1];
      if (!v21)
      {
        v19 = (uint64_t **)(v20 + 1);
        goto LABEL_28;
      }
    }
  }
  else
  {
LABEL_28:
    v23 = v20;
    v20 = operator new(0x30uLL);
    *((_DWORD *)v20 + 8) = 9;
    v20[5] = 0;
    *v20 = 0;
    v20[1] = 0;
    v20[2] = v23;
    *v19 = v20;
    v24 = **(_QWORD **)(v2 + 8);
    v25 = v20;
    if (v24)
    {
      *(_QWORD *)(v2 + 8) = v24;
      v25 = *v19;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v25);
    v18 = *(int **)(v2 + 16);
    ++*(_QWORD *)(v2 + 24);
  }
  v20[5] = 0x40B3880000000000;
  v26 = v4;
  v27 = v4;
  if (v18)
  {
    while (1)
    {
      while (1)
      {
        v27 = v18;
        v28 = v18[8];
        if (v28 < 14)
          break;
        v18 = (int *)*v27;
        v26 = (uint64_t **)v27;
        if (!*v27)
          goto LABEL_38;
      }
      if (v28 == 13)
        break;
      v18 = (int *)v27[1];
      if (!v18)
      {
        v26 = (uint64_t **)(v27 + 1);
        goto LABEL_38;
      }
    }
  }
  else
  {
LABEL_38:
    v29 = v27;
    v27 = operator new(0x30uLL);
    *((_DWORD *)v27 + 8) = 13;
    v27[5] = 0;
    *v27 = 0;
    v27[1] = 0;
    v27[2] = v29;
    *v26 = v27;
    v30 = **(_QWORD **)(v2 + 8);
    v31 = v27;
    if (v30)
    {
      *(_QWORD *)(v2 + 8) = v30;
      v31 = *v26;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v31);
    ++*(_QWORD *)(v2 + 24);
  }
  v27[5] = 0x409F400000000000;
  v32 = (int *)*v4;
  v33 = v4;
  v34 = v4;
  if (*v4)
  {
    v35 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        v34 = v35;
        v36 = v35[8];
        if (v36 < 29)
          break;
        v35 = (int *)*v34;
        v33 = (uint64_t **)v34;
        if (!*v34)
          goto LABEL_48;
      }
      if (v36 == 28)
        break;
      v35 = (int *)v34[1];
      if (!v35)
      {
        v33 = (uint64_t **)(v34 + 1);
        goto LABEL_48;
      }
    }
  }
  else
  {
LABEL_48:
    v37 = v34;
    v34 = operator new(0x30uLL);
    *((_DWORD *)v34 + 8) = 28;
    v34[5] = 0;
    *v34 = 0;
    v34[1] = 0;
    v34[2] = v37;
    *v33 = v34;
    v38 = **(_QWORD **)(v2 + 8);
    v39 = v34;
    if (v38)
    {
      *(_QWORD *)(v2 + 8) = v38;
      v39 = *v33;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v39);
    v32 = *(int **)(v2 + 16);
    ++*(_QWORD *)(v2 + 24);
  }
  v34[5] = 0x40A7700000000000;
  v40 = v4;
  v41 = v4;
  if (v32)
  {
    while (1)
    {
      while (1)
      {
        v41 = v32;
        v42 = v32[8];
        if (v42 < 28)
          break;
        v32 = (int *)*v41;
        v40 = (uint64_t **)v41;
        if (!*v41)
          goto LABEL_58;
      }
      if (v42 == 27)
        break;
      v32 = (int *)v41[1];
      if (!v32)
      {
        v40 = (uint64_t **)(v41 + 1);
        goto LABEL_58;
      }
    }
  }
  else
  {
LABEL_58:
    v43 = v41;
    v41 = operator new(0x30uLL);
    *((_DWORD *)v41 + 8) = 27;
    v41[5] = 0;
    *v41 = 0;
    v41[1] = 0;
    v41[2] = v43;
    *v40 = v41;
    v44 = **(_QWORD **)(v2 + 8);
    v45 = v41;
    if (v44)
    {
      *(_QWORD *)(v2 + 8) = v44;
      v45 = *v40;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v45);
    ++*(_QWORD *)(v2 + 24);
  }
  v41[5] = 0x4071D00000000000;
  v46 = (int *)*v4;
  v47 = v4;
  v48 = v4;
  if (*v4)
  {
    v49 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        v48 = v49;
        v50 = v49[8];
        if (v50 < 23)
          break;
        v49 = (int *)*v48;
        v47 = (uint64_t **)v48;
        if (!*v48)
          goto LABEL_68;
      }
      if (v50 == 22)
        break;
      v49 = (int *)v48[1];
      if (!v49)
      {
        v47 = (uint64_t **)(v48 + 1);
        goto LABEL_68;
      }
    }
  }
  else
  {
LABEL_68:
    v51 = v48;
    v48 = operator new(0x30uLL);
    *((_DWORD *)v48 + 8) = 22;
    v48[5] = 0;
    *v48 = 0;
    v48[1] = 0;
    v48[2] = v51;
    *v47 = v48;
    v52 = **(_QWORD **)(v2 + 8);
    v53 = v48;
    if (v52)
    {
      *(_QWORD *)(v2 + 8) = v52;
      v53 = *v47;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v53);
    v46 = *(int **)(v2 + 16);
    ++*(_QWORD *)(v2 + 24);
  }
  v48[5] = 0x4072200000000000;
  v54 = v4;
  v55 = v4;
  if (v46)
  {
    while (1)
    {
      while (1)
      {
        v55 = v46;
        v56 = v46[8];
        if (v56 < 11)
          break;
        v46 = (int *)*v55;
        v54 = (uint64_t **)v55;
        if (!*v55)
          goto LABEL_78;
      }
      if (v56 == 10)
        break;
      v46 = (int *)v55[1];
      if (!v46)
      {
        v54 = (uint64_t **)(v55 + 1);
        goto LABEL_78;
      }
    }
  }
  else
  {
LABEL_78:
    v57 = v55;
    v55 = operator new(0x30uLL);
    *((_DWORD *)v55 + 8) = 10;
    v55[5] = 0;
    *v55 = 0;
    v55[1] = 0;
    v55[2] = v57;
    *v54 = v55;
    v58 = **(_QWORD **)(v2 + 8);
    v59 = v55;
    if (v58)
    {
      *(_QWORD *)(v2 + 8) = v58;
      v59 = *v54;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v59);
    ++*(_QWORD *)(v2 + 24);
  }
  v55[5] = 0x406F400000000000;
  v60 = (int *)*v4;
  v61 = v4;
  v62 = v4;
  if (*v4)
  {
    v63 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        v62 = v63;
        v64 = v63[8];
        if (v64 < 27)
          break;
        v63 = (int *)*v62;
        v61 = (uint64_t **)v62;
        if (!*v62)
          goto LABEL_88;
      }
      if (v64 == 26)
        break;
      v63 = (int *)v62[1];
      if (!v63)
      {
        v61 = (uint64_t **)(v62 + 1);
        goto LABEL_88;
      }
    }
  }
  else
  {
LABEL_88:
    v65 = v62;
    v62 = operator new(0x30uLL);
    *((_DWORD *)v62 + 8) = 26;
    v62[5] = 0;
    *v62 = 0;
    v62[1] = 0;
    v62[2] = v65;
    *v61 = v62;
    v66 = **(_QWORD **)(v2 + 8);
    v67 = v62;
    if (v66)
    {
      *(_QWORD *)(v2 + 8) = v66;
      v67 = *v61;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v67);
    v60 = *(int **)(v2 + 16);
    ++*(_QWORD *)(v2 + 24);
  }
  v62[5] = 0x4062C00000000000;
  v68 = v4;
  v69 = v4;
  if (v60)
  {
    while (1)
    {
      while (1)
      {
        v69 = v60;
        v70 = v60[8];
        if (v70 < 25)
          break;
        v60 = (int *)*v69;
        v68 = (uint64_t **)v69;
        if (!*v69)
          goto LABEL_98;
      }
      if (v70 == 24)
        break;
      v60 = (int *)v69[1];
      if (!v60)
      {
        v68 = (uint64_t **)(v69 + 1);
        goto LABEL_98;
      }
    }
  }
  else
  {
LABEL_98:
    v71 = v69;
    v69 = operator new(0x30uLL);
    *((_DWORD *)v69 + 8) = 24;
    v69[5] = 0;
    *v69 = 0;
    v69[1] = 0;
    v69[2] = v71;
    *v68 = v69;
    v72 = **(_QWORD **)(v2 + 8);
    v73 = v69;
    if (v72)
    {
      *(_QWORD *)(v2 + 8) = v72;
      v73 = *v68;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v73);
    ++*(_QWORD *)(v2 + 24);
  }
  v69[5] = 0x4051800000000000;
  v74 = (int *)*v4;
  v75 = v4;
  v76 = v4;
  if (*v4)
  {
    v77 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        v76 = v77;
        v78 = v77[8];
        if (v78 < 30)
          break;
        v77 = (int *)*v76;
        v75 = (uint64_t **)v76;
        if (!*v76)
          goto LABEL_108;
      }
      if (v78 == 29)
        break;
      v77 = (int *)v76[1];
      if (!v77)
      {
        v75 = (uint64_t **)(v76 + 1);
        goto LABEL_108;
      }
    }
  }
  else
  {
LABEL_108:
    v79 = v76;
    v76 = operator new(0x30uLL);
    *((_DWORD *)v76 + 8) = 29;
    v76[5] = 0;
    *v76 = 0;
    v76[1] = 0;
    v76[2] = v79;
    *v75 = v76;
    v80 = **(_QWORD **)(v2 + 8);
    v81 = v76;
    if (v80)
    {
      *(_QWORD *)(v2 + 8) = v80;
      v81 = *v75;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v81);
    v74 = *(int **)(v2 + 16);
    ++*(_QWORD *)(v2 + 24);
  }
  v76[5] = 0x4039000000000000;
  v82 = v4;
  v83 = v4;
  if (v74)
  {
    while (1)
    {
      while (1)
      {
        v83 = v74;
        v84 = v74[8];
        if (v84 < 31)
          break;
        v74 = (int *)*v83;
        v82 = (uint64_t **)v83;
        if (!*v83)
          goto LABEL_118;
      }
      if (v84 == 30)
        break;
      v74 = (int *)v83[1];
      if (!v74)
      {
        v82 = (uint64_t **)(v83 + 1);
        goto LABEL_118;
      }
    }
  }
  else
  {
LABEL_118:
    v85 = v83;
    v83 = operator new(0x30uLL);
    *((_DWORD *)v83 + 8) = 30;
    v83[5] = 0;
    *v83 = 0;
    v83[1] = 0;
    v83[2] = v85;
    *v82 = v83;
    v86 = **(_QWORD **)(v2 + 8);
    v87 = v83;
    if (v86)
    {
      *(_QWORD *)(v2 + 8) = v86;
      v87 = *v82;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v87);
    ++*(_QWORD *)(v2 + 24);
  }
  v83[5] = 0x4039000000000000;
  v88 = (int *)*v4;
  v89 = v4;
  v90 = v4;
  if (*v4)
  {
    v91 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        v90 = v91;
        v92 = v91[8];
        if (v92 < 24)
          break;
        v91 = (int *)*v90;
        v89 = (uint64_t **)v90;
        if (!*v90)
          goto LABEL_128;
      }
      if (v92 == 23)
        break;
      v91 = (int *)v90[1];
      if (!v91)
      {
        v89 = (uint64_t **)(v90 + 1);
        goto LABEL_128;
      }
    }
  }
  else
  {
LABEL_128:
    v93 = v90;
    v90 = operator new(0x30uLL);
    *((_DWORD *)v90 + 8) = 23;
    v90[5] = 0;
    *v90 = 0;
    v90[1] = 0;
    v90[2] = v93;
    *v89 = v90;
    v94 = **(_QWORD **)(v2 + 8);
    v95 = v90;
    if (v94)
    {
      *(_QWORD *)(v2 + 8) = v94;
      v95 = *v89;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v95);
    v88 = *(int **)(v2 + 16);
    ++*(_QWORD *)(v2 + 24);
  }
  v90[5] = 0x4039000000000000;
  v96 = v4;
  v97 = v4;
  if (v88)
  {
    while (1)
    {
      while (1)
      {
        v97 = v88;
        v98 = v88[8];
        if (v98 < 26)
          break;
        v88 = (int *)*v97;
        v96 = (uint64_t **)v97;
        if (!*v97)
          goto LABEL_138;
      }
      if (v98 == 25)
        break;
      v88 = (int *)v97[1];
      if (!v88)
      {
        v96 = (uint64_t **)(v97 + 1);
        goto LABEL_138;
      }
    }
  }
  else
  {
LABEL_138:
    v99 = v97;
    v97 = operator new(0x30uLL);
    *((_DWORD *)v97 + 8) = 25;
    v97[5] = 0;
    *v97 = 0;
    v97[1] = 0;
    v97[2] = v99;
    *v96 = v97;
    v100 = **(_QWORD **)(v2 + 8);
    v101 = v97;
    if (v100)
    {
      *(_QWORD *)(v2 + 8) = v100;
      v101 = *v96;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v101);
    ++*(_QWORD *)(v2 + 24);
  }
  v97[5] = 0x4039000000000000;
  v102 = (int *)*v4;
  v103 = v4;
  v104 = v4;
  if (*v4)
  {
    v105 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        v104 = v105;
        v106 = v105[8];
        if (v106 < 32)
          break;
        v105 = (int *)*v104;
        v103 = (uint64_t **)v104;
        if (!*v104)
          goto LABEL_148;
      }
      if (v106 == 31)
        break;
      v105 = (int *)v104[1];
      if (!v105)
      {
        v103 = (uint64_t **)(v104 + 1);
        goto LABEL_148;
      }
    }
  }
  else
  {
LABEL_148:
    v107 = v104;
    v104 = operator new(0x30uLL);
    *((_DWORD *)v104 + 8) = 31;
    v104[5] = 0;
    *v104 = 0;
    v104[1] = 0;
    v104[2] = v107;
    *v103 = v104;
    v108 = **(_QWORD **)(v2 + 8);
    v109 = v104;
    if (v108)
    {
      *(_QWORD *)(v2 + 8) = v108;
      v109 = *v103;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v109);
    v102 = *(int **)(v2 + 16);
    ++*(_QWORD *)(v2 + 24);
  }
  v104[5] = 0x4039000000000000;
  v110 = v4;
  v111 = v4;
  if (v102)
  {
    while (1)
    {
      while (1)
      {
        v111 = v102;
        v112 = v102[8];
        if (v112 < 33)
          break;
        v102 = (int *)*v111;
        v110 = (uint64_t **)v111;
        if (!*v111)
          goto LABEL_158;
      }
      if (v112 == 32)
        break;
      v102 = (int *)v111[1];
      if (!v102)
      {
        v110 = (uint64_t **)(v111 + 1);
        goto LABEL_158;
      }
    }
  }
  else
  {
LABEL_158:
    v113 = v111;
    v111 = operator new(0x30uLL);
    *((_DWORD *)v111 + 8) = 32;
    v111[5] = 0;
    *v111 = 0;
    v111[1] = 0;
    v111[2] = v113;
    *v110 = v111;
    v114 = **(_QWORD **)(v2 + 8);
    v115 = v111;
    if (v114)
    {
      *(_QWORD *)(v2 + 8) = v114;
      v115 = *v110;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v115);
    ++*(_QWORD *)(v2 + 24);
  }
  v111[5] = 0x4039000000000000;
  v116 = (int *)*v4;
  v117 = v4;
  v118 = v4;
  if (*v4)
  {
    v119 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        v118 = v119;
        v120 = v119[8];
        if (v120 < 34)
          break;
        v119 = (int *)*v118;
        v117 = (uint64_t **)v118;
        if (!*v118)
          goto LABEL_168;
      }
      if (v120 == 33)
        break;
      v119 = (int *)v118[1];
      if (!v119)
      {
        v117 = (uint64_t **)(v118 + 1);
        goto LABEL_168;
      }
    }
  }
  else
  {
LABEL_168:
    v121 = v118;
    v118 = operator new(0x30uLL);
    *((_DWORD *)v118 + 8) = 33;
    v118[5] = 0;
    *v118 = 0;
    v118[1] = 0;
    v118[2] = v121;
    *v117 = v118;
    v122 = **(_QWORD **)(v2 + 8);
    v123 = v118;
    if (v122)
    {
      *(_QWORD *)(v2 + 8) = v122;
      v123 = *v117;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v123);
    v116 = *(int **)(v2 + 16);
    ++*(_QWORD *)(v2 + 24);
  }
  v118[5] = 0x4039000000000000;
  v124 = v4;
  v125 = v4;
  if (v116)
  {
    while (1)
    {
      while (1)
      {
        v125 = v116;
        v126 = v116[8];
        if (v126 < 16)
          break;
        v116 = (int *)*v125;
        v124 = (uint64_t **)v125;
        if (!*v125)
          goto LABEL_178;
      }
      if (v126 == 15)
        break;
      v116 = (int *)v125[1];
      if (!v116)
      {
        v124 = (uint64_t **)(v125 + 1);
        goto LABEL_178;
      }
    }
  }
  else
  {
LABEL_178:
    v127 = v125;
    v125 = operator new(0x30uLL);
    *((_DWORD *)v125 + 8) = 15;
    v125[5] = 0;
    *v125 = 0;
    v125[1] = 0;
    v125[2] = v127;
    *v124 = v125;
    v128 = **(_QWORD **)(v2 + 8);
    v129 = v125;
    if (v128)
    {
      *(_QWORD *)(v2 + 8) = v128;
      v129 = *v124;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v129);
    ++*(_QWORD *)(v2 + 24);
  }
  v125[5] = 0x3FF0000000000000;
  v130 = (int *)*v4;
  v131 = v4;
  v132 = v4;
  if (*v4)
  {
    v133 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        v132 = v133;
        v134 = v133[8];
        if (v134 < 17)
          break;
        v133 = (int *)*v132;
        v131 = (uint64_t **)v132;
        if (!*v132)
          goto LABEL_188;
      }
      if (v134 == 16)
        break;
      v133 = (int *)v132[1];
      if (!v133)
      {
        v131 = (uint64_t **)(v132 + 1);
        goto LABEL_188;
      }
    }
  }
  else
  {
LABEL_188:
    v135 = v132;
    v132 = operator new(0x30uLL);
    *((_DWORD *)v132 + 8) = 16;
    v132[5] = 0;
    *v132 = 0;
    v132[1] = 0;
    v132[2] = v135;
    *v131 = v132;
    v136 = **(_QWORD **)(v2 + 8);
    v137 = v132;
    if (v136)
    {
      *(_QWORD *)(v2 + 8) = v136;
      v137 = *v131;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v137);
    v130 = *(int **)(v2 + 16);
    ++*(_QWORD *)(v2 + 24);
  }
  v132[5] = 0x3FF0000000000000;
  v138 = v4;
  v139 = v4;
  if (v130)
  {
    while (1)
    {
      while (1)
      {
        v139 = v130;
        v140 = v130[8];
        if (v140 < 18)
          break;
        v130 = (int *)*v139;
        v138 = (uint64_t **)v139;
        if (!*v139)
          goto LABEL_198;
      }
      if (v140 == 17)
        break;
      v130 = (int *)v139[1];
      if (!v130)
      {
        v138 = (uint64_t **)(v139 + 1);
        goto LABEL_198;
      }
    }
  }
  else
  {
LABEL_198:
    v141 = v139;
    v139 = operator new(0x30uLL);
    *((_DWORD *)v139 + 8) = 17;
    v139[5] = 0;
    *v139 = 0;
    v139[1] = 0;
    v139[2] = v141;
    *v138 = v139;
    v142 = **(_QWORD **)(v2 + 8);
    v143 = v139;
    if (v142)
    {
      *(_QWORD *)(v2 + 8) = v142;
      v143 = *v138;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v143);
    ++*(_QWORD *)(v2 + 24);
  }
  v139[5] = 0x3FF0000000000000;
  v144 = (int *)*v4;
  v145 = v4;
  v146 = v4;
  if (*v4)
  {
    v147 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        v146 = v147;
        v148 = v147[8];
        if (v148 < 19)
          break;
        v147 = (int *)*v146;
        v145 = (uint64_t **)v146;
        if (!*v146)
          goto LABEL_208;
      }
      if (v148 == 18)
        break;
      v147 = (int *)v146[1];
      if (!v147)
      {
        v145 = (uint64_t **)(v146 + 1);
        goto LABEL_208;
      }
    }
  }
  else
  {
LABEL_208:
    v149 = v146;
    v146 = operator new(0x30uLL);
    *((_DWORD *)v146 + 8) = 18;
    v146[5] = 0;
    *v146 = 0;
    v146[1] = 0;
    v146[2] = v149;
    *v145 = v146;
    v150 = **(_QWORD **)(v2 + 8);
    v151 = v146;
    if (v150)
    {
      *(_QWORD *)(v2 + 8) = v150;
      v151 = *v145;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v151);
    v144 = *(int **)(v2 + 16);
    ++*(_QWORD *)(v2 + 24);
  }
  v146[5] = 0x3FF0000000000000;
  v152 = v4;
  v153 = v4;
  if (v144)
  {
    while (1)
    {
      while (1)
      {
        v153 = v144;
        v154 = v144[8];
        if (v154 < 20)
          break;
        v144 = (int *)*v153;
        v152 = (uint64_t **)v153;
        if (!*v153)
          goto LABEL_218;
      }
      if (v154 == 19)
        break;
      v144 = (int *)v153[1];
      if (!v144)
      {
        v152 = (uint64_t **)(v153 + 1);
        goto LABEL_218;
      }
    }
  }
  else
  {
LABEL_218:
    v155 = v153;
    v153 = operator new(0x30uLL);
    *((_DWORD *)v153 + 8) = 19;
    v153[5] = 0;
    *v153 = 0;
    v153[1] = 0;
    v153[2] = v155;
    *v152 = v153;
    v156 = **(_QWORD **)(v2 + 8);
    v157 = v153;
    if (v156)
    {
      *(_QWORD *)(v2 + 8) = v156;
      v157 = *v152;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v157);
    ++*(_QWORD *)(v2 + 24);
  }
  v153[5] = 0x3FF0000000000000;
  v158 = (int *)*v4;
  v159 = v4;
  if (*v4)
  {
    while (1)
    {
      while (1)
      {
        v159 = v158;
        v160 = v158[8];
        if (v160 < 21)
          break;
        v158 = (int *)*v159;
        v4 = (uint64_t **)v159;
        if (!*v159)
          goto LABEL_228;
      }
      if (v160 == 20)
        break;
      v158 = (int *)v159[1];
      if (!v158)
      {
        v4 = (uint64_t **)(v159 + 1);
        goto LABEL_228;
      }
    }
  }
  else
  {
LABEL_228:
    v161 = v159;
    v159 = operator new(0x30uLL);
    *((_DWORD *)v159 + 8) = 20;
    v159[5] = 0;
    *v159 = 0;
    v159[1] = 0;
    v159[2] = v161;
    *v4 = v159;
    v162 = **(_QWORD **)(v2 + 8);
    v163 = v159;
    if (v162)
    {
      *(_QWORD *)(v2 + 8) = v162;
      v163 = *v4;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v163);
    ++*(_QWORD *)(v2 + 24);
  }
  v159[5] = 0x3FF0000000000000;
  return this;
}

uint64_t BBUEUR20Programmer::handleMaverickGetNonce_nl(uint64_t a1, int a2)
{
  uint64_t v4;

  bzero(*(void **)(a1 + 4352), 0x400uLL);
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Starting Maverick Protocol (%s)", "handleMaverickGetNonce_nl");
  if (ETLSAHCommandReceive() && ETLSAHCommandParseMaverickEraseQuery())
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Setting HSIC cookie? %d", *(unsigned __int8 *)(a1 + 64));
    if (a2)
      *(_BYTE *)(a1 + 4300) = 1;
    if (ETLSAHCommandCreateMaverickEraseResponse())
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Sending Erase Response: Length %u Type %u  Erase EFS %u", *(_DWORD *)(*(_QWORD *)(a1 + 4352) + 4), **(_DWORD **)(a1 + 4352), a2);
      ETLSAHCommandSend();
    }
  }
  v4 = 3;
  if (ETLSAHCommandReceive())
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Checking Manifest Request: Length %u Type %u", *(_DWORD *)(*(_QWORD *)(a1 + 4352) + 4), **(_DWORD **)(a1 + 4352));
    if (ETLSAHCommandParseMaverickRootManifestQuery())
      return 0;
    else
      return 3;
  }
  return v4;
}

uint64_t BBUEUR20Programmer::gatherPersonalizationParameters(BBUEUR20Programmer *this, int a2, char a3, unsigned int *a4, BBUPersonalizationParameters *a5)
{
  BBUFeedback *v6;
  uint64_t Nonce_nl;
  UInt8 *v12;
  _QWORD *v13;
  const __CFAllocator *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BBUFeedback *v20;
  int v21;
  BBUFeedback *v22;
  void **v23;
  BBUFeedback *v24;
  void **v25;
  BBUFeedback *v26;
  int v27;
  void *__p[2];
  char v29;
  int v30;

  v30 = 256;
  v6 = (BBUFeedback *)*((_QWORD *)this + 1);
  if ((a3 & 1) != 0)
  {
    BBUFeedback::handleBeginPhase(v6, "Gathering Personalization parameters...");
    if ((*(unsigned int (**)(BBUEUR20Programmer *, int *))(*(_QWORD *)this + 184))(this, &v30))
    {
      Nonce_nl = 48;
    }
    else if (v30 == 2)
    {
      Nonce_nl = 28;
    }
    else if (v30 == 256)
    {
      v12 = (UInt8 *)operator new(0x50uLL);
      Nonce_nl = BBUEUR20Programmer::handleMaverickGetNonce_nl((uint64_t)this, a2);
      if (!(_DWORD)Nonce_nl)
      {
        v13 = operator new(0x10uLL);
        *v13 = off_24CE848F8;
        v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v13[1] = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v12 + 4, 20);
        v15 = BBUEURPersonalizationParameters::EURChipID::createFromChipID((BBUEURPersonalizationParameters::EURChipID *)*((unsigned int *)v12 + 7));
        v16 = BBUEURPersonalizationParameters::EURSerialNumber::createFromSerialNumber((BBUEURPersonalizationParameters::EURSerialNumber *)(v12 + 24), (const unsigned __int8 *)0x20);
        v17 = operator new(0x10uLL);
        *v17 = off_24CE84A18;
        v17[1] = CFDataCreate(v14, v12 + 32, 48);
        *a4 = *(_DWORD *)v12;
        operator delete(v12);
        v18 = *((_QWORD *)a5 + 1);
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        *((_QWORD *)a5 + 1) = v13;
        v19 = *((_QWORD *)a5 + 2);
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        *((_QWORD *)a5 + 2) = v15;
        (*(void (**)(BBUPersonalizationParameters *, _QWORD *))(*(_QWORD *)a5 + 16))(a5, v16);
        (*(void (**)(BBUPersonalizationParameters *, _QWORD *))(*(_QWORD *)a5 + 24))(a5, v17);
        if (v16)
        {
          v20 = (BBUFeedback *)*((_QWORD *)this + 1);
          v21 = (*(uint64_t (**)(_QWORD *))(*v15 + 24))(v15);
          BBUFeedback::handleComment(v20, "   SNUM: %s / CHIPID: 0x%08x", "<< SNUM >>", v21);
        }
        v22 = (BBUFeedback *)*((_QWORD *)this + 1);
        (*(void (**)(void **__return_ptr, _QWORD *))(*v13 + 24))(__p, v13);
        if (v29 >= 0)
          v23 = __p;
        else
          v23 = (void **)__p[0];
        BBUFeedback::handleComment(v22, "   NONCE: %s", (const char *)v23);
        if (v29 < 0)
          operator delete(__p[0]);
        v24 = (BBUFeedback *)*((_QWORD *)this + 1);
        (*(void (**)(void **__return_ptr, _QWORD *))(*v17 + 24))(__p, v17);
        if (v29 >= 0)
          v25 = __p;
        else
          v25 = (void **)__p[0];
        BBUFeedback::handleComment(v24, "   PUBLIC_KEY_HASH: %s", (const char *)v25);
        if (v29 < 0)
          operator delete(__p[0]);
        v26 = (BBUFeedback *)*((_QWORD *)this + 1);
        v27 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a5 + 3) + 24))(*((_QWORD *)a5 + 3));
        BBUFeedback::handleComment(v26, "   CertID: %u", v27);
        Nonce_nl = 0;
      }
    }
    else
    {
      Nonce_nl = 12;
    }
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), Nonce_nl);
  }
  else
  {
    BBUFeedback::handleComment(v6, "Not in restore mode - skipping gathering Personalization parameters...");
    return 0;
  }
  return Nonce_nl;
}

void sub_212ACC9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BBUEUR20Programmer::handleSaharaMode_nl(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v11;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Nonce_nl;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  __int128 v24;
  char v25;
  BBUFeedback *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  unsigned int v34;
  char MaverickConfigResponse;
  BBUFeedback *v36;
  void *exception;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  _OWORD v43[16];
  uint64_t v44;

  v11 = a2;
  v44 = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)a4)
  {
    v13 = a2 >= 2;
    if (a2 <= 2)
      goto LABEL_3;
LABEL_10:
    if (a2 == 3)
    {
      Nonce_nl = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, 9);
      if ((_DWORD)Nonce_nl)
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
            return Nonce_nl;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
            return Nonce_nl;
        }
        if ((gBBULogVerbosity & 0x80000000) == 0)
        {
          v18 = "failed handling command mode\n";
          goto LABEL_29;
        }
      }
      return Nonce_nl;
    }
    if (a2 != 256)
    {
LABEL_25:
      if (gBBULogMaskGet(void)::once == -1)
      {
        Nonce_nl = 12;
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          return Nonce_nl;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        Nonce_nl = 12;
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          return Nonce_nl;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        ETLSAHModeAsString();
        v18 = "unexpected start mode %u, %s\n";
        v41 = v11;
        goto LABEL_29;
      }
      return Nonce_nl;
    }
    if ((a5 & 1) == 0)
    {
      Nonce_nl = BBUEUR20Programmer::handleMaverickGetNonce_nl(a1, 0);
      if ((_DWORD)Nonce_nl)
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
            return Nonce_nl;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
            return Nonce_nl;
        }
        if (gBBULogVerbosity < 0)
          return Nonce_nl;
        v22 = "failed getting nonce\n";
LABEL_69:
        _BBULog(1, 0, "BBUProgrammer", "", v22, v19, v20, v21, v41);
        return Nonce_nl;
      }
      a4 = 0;
    }
    Nonce_nl = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, a3, a4, a6, 0, a5, a7);
    if ((_DWORD)Nonce_nl)
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          return Nonce_nl;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          return Nonce_nl;
      }
      if (gBBULogVerbosity < 0)
        return Nonce_nl;
      v22 = "failed handling sahara send hashes command\n";
      goto LABEL_69;
    }
    if ((a5 & 1) != 0)
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Skipping sahara config command");
LABEL_38:
      Nonce_nl = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
      if (!(_DWORD)Nonce_nl)
        return Nonce_nl;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          return Nonce_nl;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          return Nonce_nl;
      }
      if (gBBULogVerbosity < 0)
        return Nonce_nl;
      v22 = "failed handling maverick end\n";
      goto LABEL_69;
    }
    v23 = operator new[](0x400uLL);
    *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v43[14] = v24;
    v43[15] = v24;
    v43[12] = v24;
    v43[13] = v24;
    v43[10] = v24;
    v43[11] = v24;
    v43[8] = v24;
    v43[9] = v24;
    v43[6] = v24;
    v43[7] = v24;
    v43[4] = v24;
    v43[5] = v24;
    v43[2] = v24;
    v43[3] = v24;
    v43[0] = v24;
    v43[1] = v24;
    v42 = v24;
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Receiving baseband config...");
    if ((ETLSAHCommandReceive() & 1) == 0)
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "failed receiving baseband config");
LABEL_53:
      Nonce_nl = 3;
LABEL_65:
      operator delete[](v23);
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          return Nonce_nl;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          return Nonce_nl;
      }
      if (gBBULogVerbosity < 0)
        return Nonce_nl;
      v22 = "failed handling sahara config command\n";
      goto LABEL_69;
    }
    v25 = ETLSAHCommandParseMaverickConfigQuery();
    v26 = *(BBUFeedback **)(a1 + 8);
    if ((v25 & 1) != 0)
    {
      BBUFeedback::handleComment(v26, "Baseband config:");
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "    send_info_ver:        0x%04x", (_DWORD)v42);
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "    sbl_sec_version:      0x%04x", DWORD1(v42));
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "    power_sequence_index: 0x%04x", DWORD2(v42));
      if (HIDWORD(v42))
        v27 = "true";
      else
        v27 = "false";
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "    coredump_supported:   %s", v27);
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "    bb_version_string:    %s", (const char *)v43);
      if ((TelephonyBasebandSetBasebandProperty() & 1) != 0)
      {
        v31 = TelephonyBasebandSetBasebandProperty();
        if ((v31 & 1) != 0)
        {
          if (!*(_QWORD *)(*(_QWORD *)(a1 + 8) + 176))
          {
            exception = __cxa_allocate_exception(0x210uLL);
            _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Feedback/BBUFeedback.cpp", 0xD4u, (ctu::LogMessageBuffer *)"Assertion failure(!fStageContext.empty())", v38, v39, v40, v41);
          }
          v34 = capabilities::pci::supportsPCIAudio((capabilities::pci *)v31);
          BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Sending flag to BB: 0x%llx", v34);
          bzero(v23, 0x400uLL);
          MaverickConfigResponse = ETLSAHCommandCreateMaverickConfigResponse();
          v36 = *(BBUFeedback **)(a1 + 8);
          if ((MaverickConfigResponse & 1) != 0)
          {
            BBUFeedback::handleComment(v36, "Sending config response...");
            if ((ETLSAHCommandSend() & 1) != 0)
            {
              operator delete[](v23);
              goto LABEL_38;
            }
            BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "failed sending maverick config response");
            goto LABEL_53;
          }
          BBUFeedback::handleComment(v36, "failed creating maverick config response");
LABEL_55:
          Nonce_nl = 11;
          goto LABEL_65;
        }
        if (gBBULogMaskGet(void)::once == -1)
        {
          Nonce_nl = 11;
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
            goto LABEL_65;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          Nonce_nl = 11;
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
            goto LABEL_65;
        }
        if (gBBULogVerbosity < 0)
          goto LABEL_65;
        v32 = "Failed to send PowerSequenceIndex property to AppleBaseband Driver\n";
      }
      else
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          Nonce_nl = 11;
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
            goto LABEL_65;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          Nonce_nl = 11;
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
            goto LABEL_65;
        }
        if (gBBULogVerbosity < 0)
          goto LABEL_65;
        v32 = "Failed to send CoredumpSupported property to AppleBaseband Driver\n";
      }
      _BBULog(1, 0, "BBUProgrammer", "", v32, v28, v29, v30, v41);
      goto LABEL_65;
    }
    BBUFeedback::handleComment(v26, "failed parsing baseband config");
    goto LABEL_55;
  }
  a4 = (*(_DWORD *)(a1 + 4280) - 8);
  v13 = a2 >= 2;
  if (a2 > 2)
    goto LABEL_10;
LABEL_3:
  if (v13)
  {
    if (a2 == 2)
      return 28;
    goto LABEL_25;
  }
  Nonce_nl = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 224))(a1, a1 + 40);
  if ((_DWORD)Nonce_nl)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return Nonce_nl;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return Nonce_nl;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      v18 = "failed sending image\n";
LABEL_29:
      _BBULog(1, 0, "BBUProgrammer", "", v18, v14, v15, v16, v41);
    }
  }
  return Nonce_nl;
}

void sub_212ACD274(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR20Programmer::switchSaharaMode(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  bzero(*(void **)(a1 + 4352), 0x400uLL);
  if ((ETLSAHCommandCreateSwitchMode() & 1) != 0)
  {
    if ((ETLSAHCommandSend() & 1) != 0)
      return 0;
    if (gBBULogMaskGet(void)::once == -1)
    {
      result = 11;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
        return result;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      result = 11;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
        return result;
    }
    if (gBBULogVerbosity >= 1)
    {
      _BBULog(9, 1, "BBUProgrammer", "", "failed sending mode switch command", v4, v5, v6, v8);
      return 11;
    }
  }
  else
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      result = 11;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return result;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      result = 11;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return result;
    }
    if (gBBULogVerbosity >= 1)
    {
      _BBULog(1, 1, "BBUProgrammer", "", "failed creating mode switch command", v1, v2, v3, v8);
      return 11;
    }
  }
  return result;
}

uint64_t BBUEUR20Programmer::handleCommandMode(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BBUFeedback *v18;
  const char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;

  bzero(*(void **)(a1 + 4352), 0x400uLL);
  if ((ETLSAHCommandReceive() & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v7 = 3;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return v7;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v7 = 3;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return v7;
    }
    if (gBBULogVerbosity < 1)
      return v7;
    v8 = "no response from baseband when trying to receive next action\n";
LABEL_14:
    _BBULog(1, 1, "BBUProgrammer", "", v8, v4, v5, v6, v25);
    return v7;
  }
  if ((ETLSAHCommandParseCommandReady() & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v7 = 11;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return v7;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v7 = 11;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return v7;
    }
    if (gBBULogVerbosity < 1)
      return v7;
    v8 = "failed to parse CommandReady\n";
    goto LABEL_14;
  }
  if (ETLSAHCommandExecute())
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if (((gBBULogVerbosity > 0) & (*(unsigned __int8 *)gBBULogMaskGet(void)::sBBULogMask >> 1)) != 0)
    {
      v10 = ETLSAHReturnAsString();
      v7 = 1;
      _BBULog(1, 1, "BBUProgrammer", "", "failed getting command ID with %s\n", v11, v12, v13, v10);
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v7 = 1;
    }
    goto LABEL_24;
  }
  if (a2 != -1431655766)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v9 = 0;
      v7 = 12;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_24;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v9 = 0;
      v7 = 12;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_24;
    }
    if (gBBULogVerbosity >= 1)
    {
      v14 = ETLSAHExecutionCommandIDAsString();
      ETLSAHExecutionCommandIDAsString();
      _BBULog(1, 1, "BBUProgrammer", "", "received unexpected command ID(expected: %s, received: %s\n", v15, v16, v17, v14);
      v9 = 0;
      v7 = 12;
    }
    goto LABEL_24;
  }
  v7 = 0;
  v9 = 1;
LABEL_24:
  v18 = *(BBUFeedback **)(a1 + 8);
  v19 = (const char *)ETLSAHExecutionCommandIDAsString();
  BBUFeedback::handleComment(v18, "Done executing kETLSAHGetCommandsID, received: %s", v19);
  if (!v9)
    return v7;
  if (a2 == 9)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
    if (!(_DWORD)v7)
      return v7;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return v7;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return v7;
    }
    if (gBBULogVerbosity < 1)
      return v7;
    v8 = "failed to handle kETLSAHGetDDRCalData\n";
    goto LABEL_14;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    v7 = 12;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      return v7;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v7 = 12;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      return v7;
  }
  if (gBBULogVerbosity >= 1)
  {
    v20 = ETLSAHExecutionCommandIDAsString();
    _BBULog(1, 1, "BBUProgrammer", "", "received unexpected command: %s\n", v21, v22, v23, v20);
  }
  return v7;
}

uint64_t BBUEUR20Programmer::handleGetDDRCalData(BBUEUR20Programmer *this)
{
  void *v2;
  CFDataRef v3;
  _DWORD *v4;
  BBUPartitionManager *v5;
  BBUPartitionManager *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *exception;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _BYTE *v39;
  char v40;
  std::string v41;
  std::string v42;
  _BYTE v43[24];
  CFIndex v44;

  v44 = 0;
  v2 = operator new(0x800uLL);
  bzero(v2, 0x800uLL);
  bzero(*((void **)this + 544), 0x400uLL);
  BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Receiving DDR Cal Data...\n");
  if (ETLSAHCommandExecute())
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v18 = 1;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_43;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v18 = 1;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_43;
    }
    if (gBBULogVerbosity >= 1)
    {
      v19 = ETLSAHReturnAsString();
      _BBULog(1, 1, "BBUProgrammer", "", "failed getting getting DDR training data with %s\n", v20, v21, v22, v19);
    }
    goto LABEL_43;
  }
  v3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)v2, v44);
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR20Programmer.cpp", 0x225u, (ctu::LogMessageBuffer *)"Assertion failure(ddrDataRef)", v31, v32, v33, 232);
  }
  v4 = operator new(0x18uLL);
  v4[4] = 0;
  *(_QWORD *)v4 = off_24CE84890;
  *((_QWORD *)v4 + 1) = v3;
  CFRetain(v3);
  memset(v43, 170, sizeof(v43));
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v5 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v6 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v6);
    v7 = operator new(0x20uLL);
    *v7 = &unk_24CE85728;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v6;
    v8 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v6;
    off_253D31E70 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v5 = (BBUPartitionManager *)off_253D31E68;
  }
  v11 = (std::__shared_weak_count *)off_253D31E70;
  if (off_253D31E70)
  {
    v12 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v5, &v41);
  v14 = std::string::append(&v41, "/", 1uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v42, "mdmddr.mbn", 0xAuLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  *(_QWORD *)&v43[16] = *((_QWORD *)&v16->__r_.__value_.__l + 2);
  *(_OWORD *)v43 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if (!v11)
        goto LABEL_27;
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v41.__r_.__value_.__l.__data_);
  if (!v11)
    goto LABEL_27;
LABEL_23:
  v23 = (unint64_t *)&v11->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_27:
  if ((*(unsigned int (**)(_DWORD *, _BYTE *, uint64_t))(*(_QWORD *)v4 + 48))(v4, v43, 1))
  {
    v34 = __cxa_allocate_exception(0x210uLL);
    v38 = v34;
    v39 = v43;
    if (v43[23] < 0)
      LOBYTE(v39) = v43[0];
    _BBUException::_BBUException((uint64_t)v34, 104, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR20Programmer.cpp", 0x22Au, (ctu::LogMessageBuffer *)"failed to save %s(%d)", v35, v36, v37, (char)v39);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  v25 = v43;
  if (v43[23] < 0)
    v25 = *(const char **)v43;
  BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Saved MDMDDR data to: %s\n", v25);
  if ((v43[23] & 0x80000000) != 0)
    operator delete(*(void **)v43);
  v18 = (*(uint64_t (**)(BBUEUR20Programmer *, _QWORD))(*(_QWORD *)this + 264))(this, 0);
  if ((_DWORD)v18)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_43;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_43;
    }
    if (gBBULogVerbosity >= 1)
      _BBULog(1, 1, "BBUProgrammer", "", "failed to switch mode\n", v26, v27, v28, v40);
  }
  else
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v18 = 0;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
        goto LABEL_43;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v18 = 0;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
        goto LABEL_43;
    }
    if (gBBULogVerbosity >= 1)
    {
      _BBULog(9, 1, "BBUProgrammer", "", "successfully switched Sahara mode to ETLSAHModePending\n", v26, v27, v28, v40);
      v18 = 0;
    }
  }
LABEL_43:
  operator delete(v2);
  return v18;
}

void sub_212ACDE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  char **v26;

  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v26, v26[1]);
  operator delete(v26);
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  operator delete(v25);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR20Programmer::handleHashesQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t HashSize;
  size_t v18;
  size_t v19;
  size_t v20;
  BBUFeedback **v21;
  BBUFeedback *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v27[3];
  _OWORD v28[3];
  _OWORD v29[3];
  _OWORD v30[3];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v30[1] = v11;
  v30[2] = v11;
  v29[2] = v11;
  v30[0] = v11;
  v29[0] = v11;
  v29[1] = v11;
  v28[1] = v11;
  v28[2] = v11;
  v27[2] = v11;
  v28[0] = v11;
  v27[0] = v11;
  v27[1] = v11;
  if (!a2)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_9;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_9;
    }
    if (gBBULogVerbosity >= 1)
      _BBULog(1, 1, "BBUProgrammer", "", "bad arguments: header is NULL\n", a6, a7, a8, v27[0]);
LABEL_9:
    v15 = 2;
    if (!a3)
      return v15;
    goto LABEL_10;
  }
  if ((ETLSAHCommandParseMaverickSendHashesQuery() & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v15 = 12;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return v15;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v15 = 12;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return v15;
    }
    if (gBBULogVerbosity >= 1)
      _BBULog(1, 1, "BBUProgrammer", "", "Failed parsing maverick hash query results\n", v12, v13, v14, v27[0]);
    return v15;
  }
  v15 = 0;
  if (!a3)
    return v15;
LABEL_10:
  if (a4)
  {
    v16 = (char *)operator new(0xC8uLL);
    *(_QWORD *)v16 = &unk_24CE7FCE0;
    HashSize = BBUEURHashData::getHashSize((BBUEURHashData *)v16);
    memcpy(v16 + 8, v27, HashSize);
    v18 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    memcpy(v16 + 56, v28, v18);
    v19 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    memcpy(v16 + 104, v29, v19);
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    memcpy(v16 + 152, v30, v20);
    v22 = *(BBUFeedback **)(a1 + 8);
    v21 = (BBUFeedback **)(a1 + 8);
    BBUFeedback::handleComment(v22, "rootManifestHashData:");
    (*(void (**)(char *, BBUFeedback *))(*(_QWORD *)v16 + 24))(v16, *v21);
    BBUFeedback::handleComment(*v21, "\nupdateSourceHashData:");
    (*(void (**)(uint64_t, BBUFeedback *))(*(_QWORD *)a4 + 24))(a4, *v21);
    if (((*(uint64_t (**)(uint64_t, BBUFeedback *, char *))(*(_QWORD *)a4 + 16))(a4, *v21, v16) & 1) == 0)
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        v15 = 33;
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
          goto LABEL_14;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        v15 = 33;
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        {
LABEL_14:
          if (gBBULogVerbosity >= 1)
            _BBULog(1, 1, "BBUProgrammer", "", "root manifest hash data mismatches baseband hash query\n", v23, v24, v25, v27[0]);
        }
      }
    }
    (*(void (**)(char *))(*(_QWORD *)v16 + 8))(v16);
  }
  return v15;
}

void sub_212ACE2E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR20Programmer::collectCoreDump(BBUFeedback **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  std::string v19;
  int v20;

  v20 = 0;
  *((_DWORD *)a1 + 1071) = 0;
  BBUFeedback::handleBeginPhase(a1[1], "Sending images for CoreDump...");
  do
  {
    v5 = (*((uint64_t (**)(BBUFeedback **, int *))*a1 + 23))(a1, &v20);
    if ((_DWORD)v5)
    {
      v11 = v5;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_20;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_20;
      }
      if (gBBULogVerbosity < 0)
        goto LABEL_20;
      v12 = "failed connecting to sahara in CoreDump\n";
      goto LABEL_19;
    }
    if (v20)
    {
      v11 = 0;
      goto LABEL_20;
    }
    v9 = (*((uint64_t (**)(BBUFeedback **, BBUFeedback **))*a1 + 28))(a1, a1 + 5);
    if ((_DWORD)v9)
    {
      v11 = v9;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_20;
LABEL_17:
        if (gBBULogVerbosity < 0)
          goto LABEL_20;
        v12 = "failed sending image in CoreDump\n";
LABEL_19:
        _BBULog(1, 0, "BBUProgrammer", "", v12, v6, v7, v8, v18);
        goto LABEL_20;
      }
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_17;
      goto LABEL_20;
    }
    v10 = (*((uint64_t (**)(BBUFeedback **, int *))*a1 + 31))(a1, &v20);
  }
  while (!(_DWORD)v10);
  v11 = v10;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_20;
    goto LABEL_8;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
  {
LABEL_8:
    if (gBBULogVerbosity < 0)
      goto LABEL_20;
    v12 = "failed disconnecting for image in CoreDump\n";
    goto LABEL_19;
  }
LABEL_20:
  (*(void (**)(BBUFeedback *, uint64_t))(*(_QWORD *)a1[1] + 16))(a1[1], v11);
  if ((_DWORD)v11)
    return v11;
  if (v20 != 2)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v11 = 12;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return v11;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v11 = 12;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return v11;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      v14 = ETLSAHModeAsString();
      _BBULog(1, 0, "BBUProgrammer", "", "unexpected mode: %s\n", v15, v16, v17, v14);
      return 12;
    }
    return v11;
  }
  *((_DWORD *)a1 + 1071) = 2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v19 = *(std::string *)a3;
  v11 = BBUEUR2Programmer::collectCoreDump(a1, (uint64_t)&v19);
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v11;
  operator delete(v19.__r_.__value_.__l.__data_);
  return v11;
}

void sub_212ACE624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BBUEUR20Programmer::postCrashReason(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  char *v5;
  char *v6;
  _QWORD v7[2];
  void (*v8)(uint64_t, uint64_t);
  void *v9;
  uint64_t i;
  std::string v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v11 = *(std::string *)a2;
  v3 = ETLEFSearchBasebandCrashReasonM20();
  v4 = v3;
  if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v3)
      goto LABEL_6;
LABEL_10:
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "\tFailed: Looking for CoreDump reason");
    goto LABEL_11;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (!v4)
    goto LABEL_10;
LABEL_6:
  v5 = v12;
  v6 = v13;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 0x40000000;
  v8 = ___ZN18BBUEUR20Programmer15postCrashReasonENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  v9 = &__block_descriptor_tmp_6;
  for (i = a1; v5 != v6; v5 += 388)
    v8((uint64_t)v7, (uint64_t)v5);
LABEL_11:
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
}

void sub_212ACE744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void *v22;

  v22 = *(void **)(v20 - 56);
  if (v22)
  {
    *(_QWORD *)(v20 - 48) = v22;
    operator delete(v22);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18BBUEUR20Programmer15postCrashReasonENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  BBUFeedback::handleComment(*(BBUFeedback **)(*(_QWORD *)(a1 + 32) + 8), "\tCrash reason: File:%s, Line:%d, String:%s", (const char *)(a2 + 68), *(_DWORD *)a2, (const char *)(a2 + 132));
}

void BBUEUR20Programmer::~BBUEUR20Programmer(BBUEUR20Programmer *this)
{
  void *v2;
  char *v3;
  uint64_t i;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  *(_QWORD *)this = off_24CE81F50;
  v2 = (void *)*((_QWORD *)this + 541);
  if (v2)
  {
    *((_QWORD *)this + 542) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_24CE840A8;
  if (*((char *)this + 4327) < 0)
    operator delete(*((void **)this + 538));
  *(_QWORD *)this = off_24CE83568;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 88));
  *(_QWORD *)this = off_24CE84B60;
  v3 = (char *)this + 40;
  for (i = *((_QWORD *)this + 6); (char *)i != v3; i = *(_QWORD *)(i + 8))
  {
    v5 = *(_QWORD *)(i + 16);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  if (*((_QWORD *)this + 7))
  {
    v7 = *((_QWORD *)this + 5);
    v6 = (char *)*((_QWORD *)this + 6);
    v8 = *(_QWORD *)v6;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    *((_QWORD *)this + 7) = 0;
    if (v6 != v3)
    {
      do
      {
        v9 = (char *)*((_QWORD *)v6 + 1);
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != v3);
    }
  }
}

{
  void *v2;
  char *v3;
  uint64_t i;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  *(_QWORD *)this = off_24CE81F50;
  v2 = (void *)*((_QWORD *)this + 541);
  if (v2)
  {
    *((_QWORD *)this + 542) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_24CE840A8;
  if (*((char *)this + 4327) < 0)
    operator delete(*((void **)this + 538));
  *(_QWORD *)this = off_24CE83568;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 88));
  *(_QWORD *)this = off_24CE84B60;
  v3 = (char *)this + 40;
  for (i = *((_QWORD *)this + 6); (char *)i != v3; i = *(_QWORD *)(i + 8))
  {
    v5 = *(_QWORD *)(i + 16);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  if (*((_QWORD *)this + 7))
  {
    v7 = *((_QWORD *)this + 5);
    v6 = (char *)*((_QWORD *)this + 6);
    v8 = *(_QWORD *)v6;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    *((_QWORD *)this + 7) = 0;
    if (v6 != v3)
    {
      do
      {
        v9 = (char *)*((_QWORD *)v6 + 1);
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != v3);
    }
  }
  operator delete(this);
}

uint64_t __cxx_global_var_init_11()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUPartitionManager>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance, &dword_212A4D000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUError>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance, &dword_212A4D000);
  }
  return result;
}

void BBUEUR10FirmwareVersion::BBUEUR10FirmwareVersion(BBUEUR10FirmwareVersion *this)
{
  const void *v2;
  size_t v3;
  size_t v4;
  __int128 *p_dst;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  void *v9;
  __int128 __dst;
  unint64_t v11;

  v2 = (const void *)BBUEUR10FirmwareVersion::kFirmwarePrefix;
  v3 = strlen((const char *)BBUEUR10FirmwareVersion::kFirmwarePrefix);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_dst = (__int128 *)operator new(v6 + 1);
    *((_QWORD *)&__dst + 1) = v4;
    v11 = v7 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v11) = v3;
  p_dst = &__dst;
  if (v3)
LABEL_8:
    memmove(p_dst, v2, v4);
  *((_BYTE *)p_dst + v4) = 0;
  *(_QWORD *)this = off_24CE80C30;
  *((_DWORD *)this + 5) = -1;
  *(_OWORD *)((char *)this + 24) = 0u;
  v8 = (std::string *)((char *)this + 72);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (SHIBYTE(v11) < 0)
  {
    v9 = (void *)__dst;
    std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
    *((_DWORD *)this + 4) = 0;
    *((_QWORD *)this + 1) = 0;
    operator delete(v9);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = __dst;
    *((_QWORD *)this + 11) = v11;
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = off_24CE820B0;
}

void sub_212ACEB48(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*(void **)(v1 + 48));
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v2);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void BBUEUR10FirmwareVersion::~BBUEUR10FirmwareVersion(void **this)
{
  *this = off_24CE80C30;
  if (*((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(this[3]);
      return;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    goto LABEL_7;
}

{
  *this = off_24CE80C30;
  if ((*((char *)this + 95) & 0x80000000) == 0)
  {
    if ((*((char *)this + 71) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_7:
    operator delete(this[6]);
    if ((*((char *)this + 47) & 0x80000000) == 0)
      goto LABEL_4;
LABEL_8:
    operator delete(this[3]);
    operator delete(this);
    return;
  }
  operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    goto LABEL_7;
LABEL_3:
  if (*((char *)this + 47) < 0)
    goto LABEL_8;
LABEL_4:
  operator delete(this);
}

unint64_t BBUEUR10FirmwareVersion::getFirmwarePrefix@<X0>(_QWORD *a1@<X8>)
{
  const void *v3;
  unint64_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const void *)BBUEUR10FirmwareVersion::kFirmwarePrefix;
  result = strlen((const char *)BBUEUR10FirmwareVersion::kFirmwarePrefix);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a1[1] = v5;
    a1[2] = v7 | 0x8000000000000000;
    *a1 = v8;
    a1 = v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a1 = 0;
      return result;
    }
  }
  result = (unint64_t)memmove(a1, v3, v5);
  *((_BYTE *)a1 + v5) = 0;
  return result;
}

void BBUEUR10Loader::BBUEUR10Loader(BBUEUR10Loader *this, BBUFeedback *a2)
{
  uint64_t v3;
  char **v4;
  char *v5;
  char *v6;
  _OWORD *v7;

  BBUEURLoader::BBUEURLoader(this, a2);
  *(_QWORD *)v3 = off_24CE82120;
  *(_QWORD *)(v3 + 44) = 0x100000000080;
  *(_DWORD *)(v3 + 52) = 1000;
  *(_QWORD *)(v3 + 80) = 0;
  v4 = (char **)(v3 + 80);
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  v5 = (char *)operator new(0x1000uLL);
  *v4 = v5;
  v6 = v5 + 4096;
  *((_QWORD *)this + 12) = v5 + 4096;
  bzero(v5, 0x1000uLL);
  *((_QWORD *)this + 11) = v6;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  v7 = operator new(0x80uLL);
  *v7 = 0u;
  v7[1] = 0u;
  v7[2] = 0u;
  v7[3] = 0u;
  v7[4] = 0u;
  v7[5] = 0u;
  v7[6] = 0u;
  v7[7] = 0u;
  *(_OWORD *)((char *)this + 136) = constinit;
  *((_QWORD *)this + 13) = v7;
  *((_QWORD *)this + 14) = v7 + 8;
  *((_QWORD *)this + 15) = v7 + 8;
  *((_QWORD *)this + 16) = v7;
  *(_OWORD *)((char *)this + 152) = unk_212B53DA8;
  if ((TelephonyUtilRingBufferInitialize() & 1) == 0)
    BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "failed initializing ring buffer");
}

void sub_212ACEE30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (!*v2)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v1 + 88) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

uint64_t BBUEUR10Loader::connect(uint64_t a1)
{
  uint64_t v2;

  BBUFeedback::handleBeginQuickStep(*(BBUFeedback **)(a1 + 8), "Connecting to Sahara Loader");
  if ((ETLSAHCommandReceive() & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "failed reading hello packet");
    v2 = 3;
    goto LABEL_12;
  }
  if ((ETLSAHCommandParseHello() & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "failed parsing hello packet");
LABEL_11:
    v2 = 11;
    goto LABEL_12;
  }
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  if ((ETLSAHCommandCreateHelloResponse() & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "failed creating hello response");
    goto LABEL_11;
  }
  if ((ETLSAHCommandSend() & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "failed sending hello response");
LABEL_15:
    v2 = 3;
    goto LABEL_12;
  }
  if ((ETLSAHCommandReceive() & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "failed receiving command ready packet");
    goto LABEL_15;
  }
  if ((ETLSAHCommandParseCommandReady() & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "failed parsing command ready packet");
    goto LABEL_11;
  }
  v2 = 0;
LABEL_12:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v2);
  return v2;
}

uint64_t BBUEUR10Loader::getVersion(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __int128 v5;
  size_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *__p[2];
  __int128 v23;
  __int128 v24;
  _OWORD v25[9];
  unint64_t v26;

  BBUFeedback::handleBeginQuickStep(*(BBUFeedback **)(a1 + 8), "Getting Version");
  if (!a3)
  {
    v8 = 2;
    goto LABEL_21;
  }
  v26 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[7] = v5;
  v25[8] = v5;
  v25[5] = v5;
  v25[6] = v5;
  v25[3] = v5;
  v25[4] = v5;
  v25[1] = v5;
  v25[2] = v5;
  v24 = v5;
  v25[0] = v5;
  *(_OWORD *)__p = v5;
  v23 = v5;
  v20 = v5;
  v21 = v5;
  v18 = v5;
  v19 = v5;
  v17 = v5;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v17);
  std::ostream::operator<<();
  if ((BYTE8(v24) & 0x10) != 0)
  {
    v9 = v24;
    if ((unint64_t)v24 < *((_QWORD *)&v21 + 1))
    {
      *(_QWORD *)&v24 = *((_QWORD *)&v21 + 1);
      v9 = *((_QWORD *)&v21 + 1);
    }
    v10 = (const void *)v21;
    v6 = v9 - v21;
    if ((unint64_t)(v9 - v21) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_23;
  }
  else
  {
    if ((BYTE8(v24) & 8) == 0)
    {
      v6 = 0;
      HIBYTE(v16) = 0;
      v7 = __dst;
      goto LABEL_16;
    }
    v10 = (const void *)*((_QWORD *)&v19 + 1);
    v6 = *((_QWORD *)&v20 + 1) - *((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v20 + 1) - *((_QWORD *)&v19 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_23:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    v7 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v6;
    v16 = v12 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v16) = v6;
    v7 = __dst;
    if (!v6)
      goto LABEL_16;
  }
  memmove(v7, v10, v6);
LABEL_16:
  *((_BYTE *)v7 + v6) = 0;
  *a3 = BBULoaderVersion::createFromVersionString((uint64_t)__dst);
  if (SHIBYTE(v16) < 0)
    operator delete(__dst[0]);
  *(_QWORD *)&v17 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v17 + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v18 = v13;
  *((_QWORD *)&v18 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v23) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BFA3D0](v25);
  v8 = 0;
LABEL_21:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v8);
  return v8;
}

void sub_212ACF21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10Loader::queryChipInfo(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  char v4;
  unsigned int *v6;
  uint64_t v7;
  const char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  const char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v4 = a2;
  if (a2 && a3)
  {
    v6 = (unsigned int *)operator new(0x100uLL);
    *(_OWORD *)v6 = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *((_OWORD *)v6 + 3) = 0u;
    *((_OWORD *)v6 + 4) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    *((_OWORD *)v6 + 9) = 0u;
    *((_OWORD *)v6 + 10) = 0u;
    *((_OWORD *)v6 + 11) = 0u;
    *((_OWORD *)v6 + 12) = 0u;
    *((_OWORD *)v6 + 13) = 0u;
    *((_OWORD *)v6 + 14) = 0u;
    *((_OWORD *)v6 + 15) = 0u;
    v39 = a1[13];
    if (ETLSAHCommandExecute())
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        v7 = 1;
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
          goto LABEL_6;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        v7 = 1;
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        {
LABEL_6:
          if (gBBULogVerbosity >= 1)
          {
            v8 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 72))(a1);
            v9 = ETLSAHReturnAsString();
            _BBULog(1, 1, v8, "", "failed getting chip id with %s\n", v10, v11, v12, v9);
          }
        }
      }
LABEL_29:
      operator delete(v6);
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
          return v7;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
          return v7;
      }
      if (gBBULogVerbosity >= 1)
      {
        v25 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 72))(a1);
        v29 = "failed querying chip id\n";
        goto LABEL_33;
      }
      return v7;
    }
    if (ETLSAHCommandParseChipID())
    {
      v17 = BBUEURPersonalizationParameters::EURChipID::createFromChipID((BBUEURPersonalizationParameters::EURChipID *)v6[1]);
      v18 = *(_QWORD *)(a3 + 16);
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      *(_QWORD *)(a3 + 16) = v17;
      operator delete(v6);
      v19 = operator new(0x100uLL);
      *v19 = 0u;
      v19[1] = 0u;
      v19[2] = 0u;
      v19[3] = 0u;
      v19[4] = 0u;
      v19[5] = 0u;
      v19[6] = 0u;
      v19[7] = 0u;
      v19[8] = 0u;
      v19[9] = 0u;
      v19[10] = 0u;
      v19[11] = 0u;
      v19[12] = 0u;
      v19[13] = 0u;
      v19[14] = 0u;
      v19[15] = 0u;
      v39 = a1[13];
      if (ETLSAHCommandExecute())
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          v7 = 1;
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
            goto LABEL_18;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          v7 = 1;
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
          {
LABEL_18:
            if (gBBULogVerbosity >= 1)
            {
              v20 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 72))(a1);
              v21 = ETLSAHReturnAsString();
              _BBULog(1, 1, v20, "", "failed getting serial number with %s\n", v22, v23, v24, v21);
            }
          }
        }
LABEL_20:
        operator delete(v19);
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
            return v7;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
            return v7;
        }
        if (gBBULogVerbosity >= 1)
        {
          v25 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 72))(a1);
          v29 = "failed querying SNUM\n";
LABEL_33:
          _BBULog(9, 1, v25, "", v29, v26, v27, v28, v39);
          return v7;
        }
        return v7;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        v7 = 11;
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
          goto LABEL_20;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        v7 = 11;
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
          goto LABEL_20;
      }
      if (gBBULogVerbosity >= 1)
      {
        v35 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 72))(a1);
        _BBULog(9, 1, v35, "", "failed generating serial number from buffer\n", v36, v37, v38, v39);
      }
      goto LABEL_20;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) != 0)
        goto LABEL_26;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) != 0)
      {
LABEL_26:
        if (gBBULogVerbosity >= 1)
        {
          v30 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 72))(a1);
          _BBULog(9, 1, v30, "", "failed generating chip id from buffer\n", v31, v32, v33, v39);
        }
      }
    }
    v7 = 11;
    goto LABEL_29;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    v7 = 2;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
      return v7;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v7 = 2;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
      return v7;
  }
  if (gBBULogVerbosity >= 1)
  {
    v13 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 72))(a1);
    _BBULog(9, 1, v13, "", "bad arguments:  transport = %p, parameters = %p\n", v14, v15, v16, v4);
  }
  return v7;
}

void sub_212ACFBA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212ACFBBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212ACFBD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212ACFBE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212ACFBF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212ACFC0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212ACFC20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212ACFC34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10Loader::load(BBUFeedback **a1, const void *a2, BBUDataSource *a3, char a4)
{
  BBUFeedback *v7;
  const __CFData *Controller;
  char *v10;
  char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  CFDataRef v23;
  int v24;
  _DWORD *v25;
  _WORD *v26;
  _WORD *v27;
  char v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  CFDataRef v37[2];

  v7 = a1[1];
  if (!a2 || !a3)
  {
    BBUFeedback::handleComment(v7, "invalid arguments transport: %p updateSource: %p", a2, a3);
    v12 = 2;
    BBUFeedback::handleComment(a1[1], "Loading second stage bootloader");
LABEL_14:
    Controller = (const __CFData *)TelephonyBasebandCreateController();
    goto LABEL_15;
  }
  BBUFeedback::handleComment(v7, "Loading second stage bootloader");
  if (!ETLSAHCommandCreateSwitchMode())
  {
    v12 = 11;
    BBUFeedback::handleComment(a1[1], "failed creating mode switch command");
    goto LABEL_14;
  }
  if ((ETLSAHCommandSend() & 1) == 0)
  {
    v12 = 3;
    BBUFeedback::handleComment(a1[1], "failed sending mode switch command");
    goto LABEL_14;
  }
  Controller = (const __CFData *)TelephonyBasebandCreateController();
  v37[1] = Controller;
  v10 = BBUProgrammer::create(a1[1], (uint64_t)a2, (uint64_t)Controller);
  v11 = v10;
  if (v10)
  {
    if (!(*(unsigned int (**)(char *))(*(_QWORD *)v10 + 16))(v10))
    {
      v22 = (uint64_t *)operator new(0x18uLL);
      *v22 = (uint64_t)v22;
      v22[1] = (uint64_t)v22;
      v22[2] = 0;
      BBUDataSource::createData(a3, v37);
      v23 = v37[0];
      v24 = (*(uint64_t (**)(BBUDataSource *))(*(_QWORD *)a3 + 32))(a3);
      v25 = operator new(0x18uLL);
      v25[4] = v24;
      *(_QWORD *)v25 = off_24CE84890;
      *((_QWORD *)v25 + 1) = v23;
      if (v23)
      {
        CFRetain(v23);
        CFRelease(v23);
      }
      v26 = operator new(0x58uLL);
      BBUEURMIImage::BBUEURMIImage((BBUEURMIImage *)v26, (BBUDataSource *)v25, 0);
      *(_QWORD *)v26 = &unk_24CE821A0;
      *((_QWORD *)v26 + 8) = 0;
      v27 = v26 + 32;
      *((_QWORD *)v26 + 9) = 0;
      *((_QWORD *)v26 + 10) = 0;
      if ((a4 & 1) != 0)
      {
        *((_BYTE *)v26 + 66) = 76;
        *v27 = 16979;
        v28 = 3;
      }
      else
      {
        v26[36] = 19522;
        *(_QWORD *)v27 = *(_QWORD *)"restoreSBL";
        v28 = 10;
      }
      *((_BYTE *)v26 + 87) = v28;
      v29 = operator new(0x20uLL);
      BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v29, 16391, v26);
      v30 = operator new(0x18uLL);
      v30[1] = v22;
      v30[2] = v29;
      v31 = *v22;
      *v30 = *v22;
      *(_QWORD *)(v31 + 8) = v30;
      *v22 = (uint64_t)v30;
      ++v22[2];
      v12 = (*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, v22);
      if ((_DWORD)v12)
        BBUFeedback::handleComment(a1[1], "failed programming secondary loader");
      (*(void (**)(_WORD *))(*(_QWORD *)v26 + 8))(v26);
      if (v22[2])
      {
        v33 = *v22;
        v32 = (uint64_t *)v22[1];
        v34 = *v32;
        *(_QWORD *)(v34 + 8) = *(_QWORD *)(*v22 + 8);
        **(_QWORD **)(v33 + 8) = v34;
        v22[2] = 0;
        if (v32 != v22)
        {
          do
          {
            v35 = (uint64_t *)v32[1];
            operator delete(v32);
            v32 = v35;
          }
          while (v35 != v22);
        }
      }
      operator delete(v22);
      goto LABEL_33;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      v12 = 3;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) != 0)
        goto LABEL_9;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v12 = 3;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) != 0)
      {
LABEL_9:
        if (gBBULogVerbosity >= 1)
        {
          v13 = (const char *)(*((uint64_t (**)(BBUFeedback **))*a1 + 9))(a1);
          _BBULog(9, 1, v13, "", "failed connecting to programmer\n", v14, v15, v16, v36);
        }
      }
    }
LABEL_33:
    (*(void (**)(char *))(*(_QWORD *)v11 + 8))(v11);
    goto LABEL_15;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    v12 = 19;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
      goto LABEL_15;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v12 = 19;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
      goto LABEL_15;
  }
  if (gBBULogVerbosity >= 1)
  {
    v18 = (const char *)(*((uint64_t (**)(BBUFeedback **))*a1 + 9))(a1);
    _BBULog(9, 1, v18, "", "failed creating programmer instance\n", v19, v20, v21, v36);
  }
LABEL_15:
  if (Controller)
    CFRelease(Controller);
  return v12;
}

void sub_212AD0064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  void *v12;

  operator delete(v12);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(&a12);
  _Unwind_Resume(a1);
}

void sub_212AD0080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  void *v12;

  operator delete(v12);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(&a12);
  _Unwind_Resume(a1);
}

void sub_212AD009C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212AD00B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212AD00C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212AD00D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212AD00EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212AD0100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_212AD011C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212AD0130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10Loader::go()
{
  return 0;
}

void BBUEUR10Loader::~BBUEUR10Loader(BBUEUR10Loader *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_24CE82120;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_24CE82120;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  operator delete(this);
}

const char *BBUEUR10Loader::getDebugName(BBUEUR10Loader *this)
{
  return "BBUEUR10Loader";
}

void BBUEURSBLImage::~BBUEURSBLImage(void **this)
{
  void *v2;

  *this = &unk_24CE821A0;
  if (*((char *)this + 87) < 0)
  {
    operator delete(this[8]);
    *this = off_24CE84BF8;
    v2 = this[1];
    if (!v2)
      return;
  }
  else
  {
    *this = off_24CE84BF8;
    v2 = this[1];
    if (!v2)
      return;
  }
  (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
}

{
  void *v2;

  *this = &unk_24CE821A0;
  if (*((char *)this + 87) < 0)
  {
    operator delete(this[8]);
    *this = off_24CE84BF8;
    v2 = this[1];
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  *this = off_24CE84BF8;
  v2 = this[1];
  if (v2)
LABEL_3:
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
LABEL_4:
  operator delete(this);
}

uint64_t BBUEURSBLImage::getName(BBUEURSBLImage *this)
{
  uint64_t result;

  result = (uint64_t)this + 64;
  if (*((char *)this + 87) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t support::log::manager::parameters::set_defaults(uint64_t this)
{
  *(_BYTE *)(this + 8) = 3;
  return this;
}

uint64_t *std::list<std::unique_ptr<support::log::delegate>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v7 = (uint64_t *)v3[1];
        v6 = v3[2];
        v3[2] = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v3);
        v3 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

void support::log::manager::~manager(support::log::manager *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_24CE82218;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_24CE82218;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

uint64_t support::log::buffer::borrow(support::log::buffer *this)
{
  char *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v24;

  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_254B601B8)
    goto LABEL_2;
  v1 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v1 + 1) = 0;
  *((_QWORD *)v1 + 2) = 0;
  *(_QWORD *)v1 = off_24CE82340;
  *((_QWORD *)v1 + 3) = off_24CE82390;
  v2 = (uint64_t)(v1 + 24);
  *((_QWORD *)v1 + 4) = 850045863;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *((_QWORD *)v1 + 14) = 0;
  *((_QWORD *)v1 + 13) = 0;
  *((_QWORD *)v1 + 11) = 0;
  *((_QWORD *)v1 + 12) = v1 + 104;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  v3 = (std::__shared_weak_count *)off_254B601C0;
  qword_254B601B8 = (uint64_t)(v1 + 24);
  off_254B601C0 = v1;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
LABEL_2:
    v2 = qword_254B601B8;
    v1 = (char *)off_254B601C0;
    v24 = (std::__shared_weak_count *)off_254B601C0;
    if (!off_254B601C0)
      goto LABEL_12;
    goto LABEL_10;
  }
  v24 = (std::__shared_weak_count *)v1;
LABEL_10:
  v6 = (unint64_t *)(v1 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  std::mutex::lock((std::mutex *)(v2 + 8));
  v8 = *(_QWORD *)(v2 + 136);
  if (v8)
  {
    v9 = (_QWORD *)(v2 + 128);
    v10 = *(void ***)(v2 + 104);
    v11 = (*(_QWORD **)((char *)v10 + ((*(_QWORD *)(v2 + 128) >> 6) & 0x3FFFFFFFFFFFFF8)))[*(_QWORD *)(v2 + 128) & 0x1FFLL];
    v12 = *(_QWORD *)(v2 + 128) + 1;
    *(_QWORD *)(v2 + 128) = v12;
    *(_QWORD *)(v2 + 136) = v8 - 1;
    if (v12 >= 0x400)
    {
      operator delete(*v10);
      *(_QWORD *)(v2 + 104) += 8;
      v13 = -512;
LABEL_26:
      *v9 += v13;
    }
  }
  else
  {
    v14 = malloc(0x400uLL);
    v11 = (uint64_t)v14;
    if (v14)
    {
      v16 = (uint64_t **)(v2 + 80);
      v15 = *(uint64_t **)(v2 + 80);
      if (!v15)
      {
        v17 = (uint64_t **)(v2 + 80);
LABEL_23:
        v19 = (uint64_t *)operator new(0x28uLL);
        v19[4] = v11;
        *v19 = 0;
        v19[1] = 0;
        v19[2] = (uint64_t)v17;
        *v16 = v19;
        v20 = **(_QWORD **)(v2 + 72);
        if (v20)
        {
          *(_QWORD *)(v2 + 72) = v20;
          v19 = *v16;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 80), v19);
        v9 = (_QWORD *)(v2 + 88);
        v13 = 1;
        goto LABEL_26;
      }
      while (1)
      {
        while (1)
        {
          v17 = (uint64_t **)v15;
          v18 = v15[4];
          if ((unint64_t)v14 >= v18)
            break;
          v15 = *v17;
          v16 = v17;
          if (!*v17)
            goto LABEL_23;
        }
        if (v18 >= (unint64_t)v14)
          break;
        v15 = v17[1];
        if (!v15)
        {
          v16 = v17 + 1;
          goto LABEL_23;
        }
      }
    }
  }
  std::mutex::unlock((std::mutex *)(v2 + 8));
  if (v24)
  {
    v21 = (unint64_t *)&v24->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return v11;
}

void sub_212AD06B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_212AD06D4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_212AD06F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void support::log::manager::release_log_buffer(support::log::manager *this, char *a2)
{
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::mutex *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  void *v58;
  void *v59;
  unint64_t v60;
  char *v61;
  void *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  BOOL v69;
  int64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  char *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  unint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  int64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  __int128 *v107;
  _OWORD *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  size_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  __int128 *v126;
  _OWORD *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  int64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  __int128 *v146;
  _OWORD *v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  std::runtime_error *exception;
  void *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;

  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_254B601B8)
  {
    v3 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    *(_QWORD *)v3 = off_24CE82340;
    *((_QWORD *)v3 + 3) = off_24CE82390;
    v4 = (uint64_t)(v3 + 24);
    *((_QWORD *)v3 + 4) = 850045863;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *((_QWORD *)v3 + 14) = 0;
    *((_QWORD *)v3 + 13) = 0;
    *((_QWORD *)v3 + 11) = 0;
    *((_QWORD *)v3 + 12) = v3 + 104;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    v5 = (std::__shared_weak_count *)off_254B601C0;
    qword_254B601B8 = (uint64_t)(v3 + 24);
    off_254B601C0 = v3;
    if (!v5)
    {
LABEL_9:
      v8 = (unint64_t *)(v3 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      goto LABEL_11;
    }
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v4 = qword_254B601B8;
  v3 = (char *)off_254B601C0;
  if (off_254B601C0)
    goto LABEL_9;
LABEL_11:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  v12 = *(_QWORD **)(v4 + 80);
  v11 = v4 + 80;
  v10 = v12;
  if (!v12)
    goto LABEL_22;
  v13 = (_QWORD *)v11;
  do
  {
    v14 = v10[4];
    v15 = v14 >= (unint64_t)a2;
    if (v14 >= (unint64_t)a2)
      v16 = v10;
    else
      v16 = v10 + 1;
    if (v15)
      v13 = v10;
    v10 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 == (_QWORD *)v11 || v13[4] > (unint64_t)a2)
LABEL_22:
    v13 = (_QWORD *)v11;
  if (!v3)
    goto LABEL_27;
  v17 = (unint64_t *)(v3 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_27:
    if (v13 != (_QWORD *)v11)
      goto LABEL_28;
LABEL_32:
    free(a2);
    return;
  }
  (*(void (**)(char *))(*(_QWORD *)v3 + 16))(v3);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
  if (v13 == (_QWORD *)v11)
    goto LABEL_32;
LABEL_28:
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_254B601B8)
    goto LABEL_29;
  v19 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = 0;
  *(_QWORD *)v19 = off_24CE82340;
  *((_QWORD *)v19 + 3) = off_24CE82390;
  *((_QWORD *)v19 + 4) = 850045863;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *((_QWORD *)v19 + 14) = 0;
  *((_QWORD *)v19 + 13) = 0;
  *((_QWORD *)v19 + 11) = 0;
  *((_QWORD *)v19 + 12) = v19 + 104;
  *(_OWORD *)(v19 + 120) = 0u;
  *(_OWORD *)(v19 + 136) = 0u;
  *(_OWORD *)(v19 + 152) = 0u;
  v20 = (std::__shared_weak_count *)off_254B601C0;
  qword_254B601B8 = (uint64_t)(v19 + 24);
  off_254B601C0 = v19;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
LABEL_29:
    v19 = (char *)off_254B601C0;
    v153 = (std::__shared_weak_count *)off_254B601C0;
    if (!off_254B601C0)
      goto LABEL_41;
    goto LABEL_39;
  }
  v153 = (std::__shared_weak_count *)v19;
LABEL_39:
  v23 = (unint64_t *)(v19 + 8);
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
LABEL_41:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_254B601B8)
  {
    v25 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v25 + 1) = 0;
    *((_QWORD *)v25 + 2) = 0;
    *(_QWORD *)v25 = off_24CE82340;
    *((_QWORD *)v25 + 3) = off_24CE82390;
    v26 = (uint64_t)(v25 + 24);
    *((_QWORD *)v25 + 4) = 850045863;
    *(_OWORD *)(v25 + 40) = 0u;
    *(_OWORD *)(v25 + 56) = 0u;
    *(_OWORD *)(v25 + 72) = 0u;
    *((_QWORD *)v25 + 14) = 0;
    *((_QWORD *)v25 + 13) = 0;
    *((_QWORD *)v25 + 11) = 0;
    *((_QWORD *)v25 + 12) = v25 + 104;
    *(_OWORD *)(v25 + 120) = 0u;
    *(_OWORD *)(v25 + 136) = 0u;
    *(_OWORD *)(v25 + 152) = 0u;
    v27 = (std::__shared_weak_count *)off_254B601C0;
    qword_254B601B8 = (uint64_t)(v25 + 24);
    off_254B601C0 = v25;
    if (!v27)
    {
      v154 = (std::__shared_weak_count *)v25;
LABEL_50:
      v30 = (unint64_t *)(v25 + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      goto LABEL_52;
    }
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v26 = qword_254B601B8;
  v25 = (char *)off_254B601C0;
  v154 = (std::__shared_weak_count *)off_254B601C0;
  if (off_254B601C0)
    goto LABEL_50;
LABEL_52:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  v32 = (std::mutex *)(v26 + 8);
  std::mutex::lock((std::mutex *)(v26 + 8));
  v33 = *(_QWORD **)(v26 + 80);
  if (!v33)
    goto LABEL_186;
  v34 = v26 + 80;
  do
  {
    v35 = v33[4];
    v36 = v35 >= (unint64_t)a2;
    if (v35 >= (unint64_t)a2)
      v37 = v33;
    else
      v37 = v33 + 1;
    if (v36)
      v34 = (uint64_t)v33;
    v33 = (_QWORD *)*v37;
  }
  while (*v37);
  if (v34 == v26 + 80 || *(_QWORD *)(v34 + 32) > (unint64_t)a2)
  {
LABEL_186:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempting to put back a buffer the instance does not own");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v38 = *(char **)(v26 + 112);
  v39 = *(char **)(v26 + 104);
  v40 = v38 - v39;
  if (v38 == v39)
    v41 = 0;
  else
    v41 = ((v38 - v39) << 6) - 1;
  v43 = *(_QWORD *)(v26 + 128);
  v42 = *(_QWORD *)(v26 + 136);
  v44 = v42 + v43;
  if (v41 == v42 + v43)
  {
    if (v43 >= 0x200)
    {
      *(_QWORD *)(v26 + 128) = v43 - 512;
      v45 = v39 + 8;
      v46 = *(_QWORD *)v39;
      *(_QWORD *)(v26 + 104) = v39 + 8;
      if (v38 != *(char **)(v26 + 120))
      {
LABEL_157:
        *(_QWORD *)v38 = v46;
        goto LABEL_158;
      }
      v47 = *(char **)(v26 + 96);
      if (v45 > v47)
      {
        v48 = (v45 - v47) >> 3;
        if (v48 >= -1)
          v49 = v48 + 1;
        else
          v49 = v48 + 2;
        v50 = v49 >> 1;
        v51 = -v50;
        v52 = &v45[-8 * v50];
        v53 = v38 - v45;
        if (v38 != v45)
        {
          memmove(&v45[-8 * v50], v45, v38 - v45);
          v38 = *(char **)(v26 + 104);
        }
        v54 = &v38[8 * v51];
        v38 = &v52[v53];
        *(_QWORD *)(v26 + 104) = v54;
        *(_QWORD *)(v26 + 112) = &v52[v53];
        goto LABEL_157;
      }
      if (v38 == v47)
        v66 = 1;
      else
        v66 = (v38 - v47) >> 2;
      if (!(v66 >> 61))
      {
        v67 = (char *)operator new(8 * v66);
        v68 = &v67[8 * (v66 >> 2)];
        v70 = v38 - v45;
        v69 = v38 == v45;
        v38 = v68;
        if (v69)
          goto LABEL_155;
        v38 = &v68[v70 & 0xFFFFFFFFFFFFFFF8];
        v71 = v70 - 8;
        if (v71 >= 0x38)
        {
          v123 = &v67[8 * (v66 >> 2)];
          v72 = v123;
          if ((unint64_t)(v123 - v45) >= 0x20)
          {
            v124 = (v71 >> 3) + 1;
            v125 = 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
            v72 = &v68[v125];
            v45 += v125;
            v126 = (__int128 *)(v39 + 24);
            v127 = v123 + 16;
            v128 = v124 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v129 = *v126;
              *(v127 - 1) = *(v126 - 1);
              *v127 = v129;
              v126 += 2;
              v127 += 2;
              v128 -= 4;
            }
            while (v128);
            if (v124 == (v124 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_155:
              *(_QWORD *)(v26 + 96) = v67;
              *(_QWORD *)(v26 + 104) = v68;
              *(_QWORD *)(v26 + 112) = v38;
              *(_QWORD *)(v26 + 120) = &v67[8 * v66];
              if (v47)
              {
                operator delete(v47);
                v38 = *(char **)(v26 + 112);
              }
              goto LABEL_157;
            }
          }
        }
        else
        {
          v72 = &v67[8 * (v66 >> 2)];
        }
        do
        {
          v130 = *(_QWORD *)v45;
          v45 += 8;
          *(_QWORD *)v72 = v130;
          v72 += 8;
        }
        while (v72 != v38);
        goto LABEL_155;
      }
LABEL_188:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v55 = v40 >> 3;
    v56 = *(char **)(v26 + 120);
    v57 = *(char **)(v26 + 96);
    if (v40 >> 3 >= (unint64_t)((v56 - v57) >> 3))
    {
      if (v56 == v57)
        v60 = 1;
      else
        v60 = (v56 - v57) >> 2;
      if (!(v60 >> 61))
      {
        v61 = (char *)operator new(8 * v60);
        v62 = operator new(0x1000uLL);
        v63 = &v61[8 * v55];
        v64 = &v61[8 * v60];
        if (v55 == v60)
        {
          v152 = v62;
          if (v40 < 1)
          {
            if (v38 == v39)
              v74 = 1;
            else
              v74 = v40 >> 2;
            if (v74 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v63 = (char *)operator new(8 * v74);
            v64 = &v63[8 * v74];
            operator delete(v61);
            v39 = *(char **)(v26 + 104);
            v38 = *(char **)(v26 + 112);
            v61 = v63;
          }
          else
          {
            v65 = v55 + 2;
            if (v55 >= -1)
              v65 = v55 + 1;
            v63 -= 8 * (v65 >> 1);
          }
          v62 = v152;
        }
        *(_QWORD *)v63 = v62;
        v75 = v63 + 8;
        if (v38 != v39)
        {
          do
          {
            if (v63 == v61)
            {
              if (v75 >= v64)
              {
                if (v64 == v61)
                  v82 = 1;
                else
                  v82 = (v64 - v61) >> 2;
                if (v82 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v83 = (char *)operator new(8 * v82);
                v84 = v83;
                v85 = (v82 + 3) >> 2;
                v63 = &v83[8 * v85];
                v86 = v75 - v61;
                v69 = v75 == v61;
                v75 = v63;
                if (!v69)
                {
                  v75 = &v63[v86 & 0xFFFFFFFFFFFFFFF8];
                  v87 = v86 - 8;
                  v88 = &v83[8 * v85];
                  v89 = v61;
                  if (v87 < 0x38)
                    goto LABEL_192;
                  v90 = 8 * v85;
                  v88 = &v83[8 * v85];
                  v89 = v61;
                  if ((unint64_t)(v88 - v61) < 0x20)
                    goto LABEL_192;
                  v91 = (v87 >> 3) + 1;
                  v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
                  v88 = &v63[v92];
                  v89 = &v61[v92];
                  v93 = (__int128 *)(v61 + 16);
                  v94 = &v83[v90 + 16];
                  v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v96 = *v93;
                    *((_OWORD *)v94 - 1) = *(v93 - 1);
                    *(_OWORD *)v94 = v96;
                    v93 += 2;
                    v94 += 32;
                    v95 -= 4;
                  }
                  while (v95);
                  if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_192:
                    do
                    {
                      v97 = *(_QWORD *)v89;
                      v89 += 8;
                      *(_QWORD *)v88 = v97;
                      v88 += 8;
                    }
                    while (v88 != v75);
                  }
                }
                v64 = &v83[8 * v82];
                operator delete(v61);
                v61 = v84;
              }
              else
              {
                v78 = (v64 - v75) >> 3;
                if (v78 >= -1)
                  v79 = v78 + 1;
                else
                  v79 = v78 + 2;
                v80 = v79 >> 1;
                v63 = &v61[8 * (v79 >> 1)];
                v81 = v61;
                if (v75 != v61)
                {
                  memmove(v63, v61, v75 - v61);
                  v81 = v75;
                }
                v75 = (char *)v81 + 8 * v80;
              }
            }
            v77 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *((_QWORD *)v63 - 1) = v77;
            v63 -= 8;
          }
          while (v38 != *(char **)(v26 + 104));
        }
        v76 = *(void **)(v26 + 96);
        *(_QWORD *)(v26 + 96) = v61;
        *(_QWORD *)(v26 + 104) = v63;
        *(_QWORD *)(v26 + 112) = v75;
        *(_QWORD *)(v26 + 120) = v64;
        v32 = (std::mutex *)(v26 + 8);
        if (v76)
          operator delete(v76);
        goto LABEL_159;
      }
      goto LABEL_188;
    }
    v58 = operator new(0x1000uLL);
    v59 = v58;
    if (v56 != v38)
    {
      *(_QWORD *)v38 = v58;
LABEL_158:
      *(_QWORD *)(v26 + 112) += 8;
LABEL_159:
      v39 = *(char **)(v26 + 104);
      v42 = *(_QWORD *)(v26 + 136);
      v44 = *(_QWORD *)(v26 + 128) + v42;
      goto LABEL_160;
    }
    if (v39 == v57)
    {
      if (v38 == v39)
        v98 = 1;
      else
        v98 = (v56 - v39) >> 2;
      if (v98 >> 61)
        goto LABEL_188;
      v99 = (char *)operator new(8 * v98);
      v100 = (v98 + 3) >> 2;
      v73 = &v99[8 * v100];
      v101 = v73;
      if (v38 != v39)
      {
        v101 = &v73[8 * v55];
        v102 = &v99[8 * v100];
        v103 = v39;
        if ((unint64_t)(v40 - 8) < 0x38)
          goto LABEL_193;
        v104 = &v99[8 * v100];
        v102 = v104;
        v103 = v39;
        if ((unint64_t)(v104 - v39) < 0x20)
          goto LABEL_193;
        v105 = ((unint64_t)(v40 - 8) >> 3) + 1;
        v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
        v102 = &v73[v106];
        v103 = &v39[v106];
        v107 = (__int128 *)(v39 + 16);
        v108 = v104 + 16;
        v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v110 = *v107;
          *(v108 - 1) = *(v107 - 1);
          *v108 = v110;
          v107 += 2;
          v108 += 2;
          v109 -= 4;
        }
        while (v109);
        if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_193:
          do
          {
            v111 = *(_QWORD *)v103;
            v103 += 8;
            *(_QWORD *)v102 = v111;
            v102 += 8;
          }
          while (v102 != v101);
        }
      }
      *(_QWORD *)(v26 + 96) = v99;
      *(_QWORD *)(v26 + 104) = v73;
      *(_QWORD *)(v26 + 112) = v101;
      *(_QWORD *)(v26 + 120) = &v99[8 * v98];
      if (v39)
      {
        operator delete(v39);
        v73 = *(char **)(v26 + 104);
      }
    }
    else
    {
      v73 = v39;
    }
    *((_QWORD *)v73 - 1) = v59;
    v112 = *(char **)(v26 + 104);
    v113 = *(char **)(v26 + 112);
    *(_QWORD *)(v26 + 104) = v112 - 8;
    v114 = *((_QWORD *)v112 - 1);
    *(_QWORD *)(v26 + 104) = v112;
    if (v113 != *(char **)(v26 + 120))
    {
LABEL_142:
      *(_QWORD *)v113 = v114;
      goto LABEL_158;
    }
    v115 = *(char **)(v26 + 96);
    if (v112 > v115)
    {
      v116 = (v112 - v115) >> 3;
      if (v116 >= -1)
        v117 = v116 + 1;
      else
        v117 = v116 + 2;
      v118 = v117 >> 1;
      v119 = -v118;
      v120 = &v112[-8 * v118];
      v121 = v113 - v112;
      if (v121)
      {
        memmove(&v112[-8 * v118], v112, v121);
        v112 = *(char **)(v26 + 104);
      }
      v122 = &v120[v121];
      *(_QWORD *)(v26 + 104) = &v112[8 * v119];
      *(_QWORD *)(v26 + 112) = v122;
      *(_QWORD *)v122 = v114;
      goto LABEL_158;
    }
    if (v113 == v115)
      v136 = 1;
    else
      v136 = (v113 - v115) >> 2;
    if (v136 >> 61)
      goto LABEL_188;
    v137 = (char *)operator new(8 * v136);
    v138 = &v137[8 * (v136 >> 2)];
    v139 = v113 - v112;
    v69 = v113 == v112;
    v113 = v138;
    if (!v69)
    {
      v113 = &v138[v139 & 0xFFFFFFFFFFFFFFF8];
      v140 = v139 - 8;
      if (v140 < 0x38)
      {
        v141 = &v137[8 * (v136 >> 2)];
        do
        {
LABEL_183:
          v150 = *(_QWORD *)v112;
          v112 += 8;
          *(_QWORD *)v141 = v150;
          v141 += 8;
        }
        while (v141 != v113);
        goto LABEL_184;
      }
      v142 = &v137[8 * (v136 >> 2)];
      v141 = v142;
      if ((unint64_t)(v142 - v112) < 0x20)
        goto LABEL_183;
      v143 = (v140 >> 3) + 1;
      v144 = 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
      v141 = &v138[v144];
      v145 = &v112[v144];
      v146 = (__int128 *)(v112 + 16);
      v147 = v142 + 16;
      v148 = v143 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v149 = *v146;
        *(v147 - 1) = *(v146 - 1);
        *v147 = v149;
        v146 += 2;
        v147 += 2;
        v148 -= 4;
      }
      while (v148);
      v112 = v145;
      if (v143 != (v143 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_183;
    }
LABEL_184:
    *(_QWORD *)(v26 + 96) = v137;
    *(_QWORD *)(v26 + 104) = v138;
    *(_QWORD *)(v26 + 112) = v113;
    *(_QWORD *)(v26 + 120) = &v137[8 * v136];
    if (v115)
    {
      operator delete(v115);
      v113 = *(char **)(v26 + 112);
    }
    goto LABEL_142;
  }
LABEL_160:
  *(_QWORD *)(*(_QWORD *)&v39[(v44 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v44 & 0x1FF)) = a2;
  *(_QWORD *)(v26 + 136) = v42 + 1;
  std::mutex::unlock(v32);
  if (!v154)
    goto LABEL_164;
  v131 = (unint64_t *)&v154->__shared_owners_;
  do
    v132 = __ldaxr(v131);
  while (__stlxr(v132 - 1, v131));
  if (!v132)
  {
    ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
    std::__shared_weak_count::__release_weak(v154);
    v133 = v153;
    if (!v153)
      return;
  }
  else
  {
LABEL_164:
    v133 = v153;
    if (!v153)
      return;
  }
  v134 = (unint64_t *)&v133->__shared_owners_;
  do
    v135 = __ldaxr(v134);
  while (__stlxr(v135 - 1, v134));
  if (!v135)
  {
    ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
    std::__shared_weak_count::__release_weak(v133);
  }
}

void sub_212AD1238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::mutex *a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  operator delete(__p);
  operator delete(v13);
  std::mutex::unlock(a10);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void support::log::manager::set_defaults(support::log::manager *this)
{
  std::mutex *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((_BYTE *)this + 112) = 3;
  if (*((_QWORD *)this + 17))
  {
    v3 = (char *)this + 120;
    v4 = *((_QWORD *)this + 15);
    v5 = (char *)*((_QWORD *)this + 16);
    v6 = *(_QWORD *)v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    *((_QWORD *)this + 17) = 0;
    if (v5 != (char *)this + 120)
    {
      do
      {
        v8 = (char *)*((_QWORD *)v5 + 1);
        v7 = *((_QWORD *)v5 + 2);
        *((_QWORD *)v5 + 2) = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v3);
    }
  }
  std::mutex::unlock(v2);
}

void support::log::manager::message_delegates(support::log::manager *this, const support::log::details *a2, char *a3)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)this + 120;
  v5 = *((_QWORD *)this + 16);
  if ((support::log::manager *)v5 != (support::log::manager *)((char *)this + 120))
  {
    do
    {
      this = (support::log::manager *)(***(uint64_t (****)(_QWORD, const support::log::details *, char *))(v5 + 16))(*(_QWORD *)(v5 + 16), a2, a3);
      v5 = *(_QWORD *)(v5 + 8);
    }
    while ((char *)v5 != v4);
  }
  support::log::manager::release_log_buffer(this, a3);
}

_QWORD *support::log::client::client(_QWORD *a1, std::string *a2, std::string *a3, uint64_t a4)
{
  unsigned __int8 v6;
  std::string::size_type size;
  unint64_t v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  char *v17;
  const char *v18;
  const char *v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  void *v29;
  void **v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  const void **v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void **v40;
  void **v41;
  uint64_t v42;
  int v43;
  char *v44;
  std::string *v45;
  float v46;
  _QWORD *v47;
  _QWORD *v48;
  _BOOL8 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t prime;
  void *v53;
  void *v54;
  uint64_t v55;
  _QWORD **v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *i;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint8x8_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  char *v73;
  std::string *v74;
  const char *v75;
  __int128 v76;
  std::string::size_type v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  void *v87;
  void *v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  void *__p[4];
  std::string __dst;

  *a1 = &unk_24CE7E928;
  v90 = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  v89 = *a3;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a1[1] = off_24CE82278;
  v6 = atomic_load((unsigned __int8 *)&_MergedGlobals_4);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_4))
  {
    *(_OWORD *)&qword_254B60560 = 0u;
    *(_OWORD *)&qword_254B60550 = 0u;
    dword_254B60570 = 1065353216;
    __cxa_guard_release(&_MergedGlobals_4);
  }
  std::mutex::lock(&_MergedGlobals_0);
  memset(__p, 170, 24);
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v90.__r_.__value_.__r.__words[2]);
  else
    size = v90.__r_.__value_.__l.__size_;
  v8 = size + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (size + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = size + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + 1;
    if (!size)
      goto LABEL_16;
  }
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v90;
  else
    v12 = (std::string *)v90.__r_.__value_.__r.__words[0];
  memmove(p_dst, v12, size);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + size) = 44;
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v89;
  else
    v13 = (std::string *)v89.__r_.__value_.__r.__words[0];
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  else
    v14 = v89.__r_.__value_.__l.__size_;
  v15 = std::string::append(&__dst, (const std::string::value_type *)v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  __p[2] = (void *)v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p))
      goto LABEL_156;
  }
  else if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p))
  {
    goto LABEL_156;
  }
  v17 = (char *)operator new(0x40uLL);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v92, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  else
    v92 = v90;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v91, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
  else
    v91 = v89;
  *(_QWORD *)v17 = off_24CE82310;
  v18 = v17 + 8;
  *(std::string *)(v17 + 8) = v92;
  memset(&v92, 0, sizeof(v92));
  *(std::string *)(v17 + 32) = v91;
  memset(&v91, 0, sizeof(v91));
  if (v17[31] < 0)
  {
    v18 = *(const char **)v18;
    v19 = v17 + 32;
    if ((v17[55] & 0x80000000) == 0)
      goto LABEL_34;
  }
  else
  {
    v19 = v17 + 32;
    if ((v17[55] & 0x80000000) == 0)
      goto LABEL_34;
  }
  v19 = *(const char **)v19;
LABEL_34:
  *((_QWORD *)v17 + 7) = os_log_create(v18, v19);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = (uint64_t *)__p;
  else
    v20 = (uint64_t *)__p[0];
  if (SHIBYTE(__p[2]) >= 0)
    v21 = HIBYTE(__p[2]);
  else
    v21 = (unint64_t)__p[1];
  v22 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&__dst, v20, v21);
  v23 = v22;
  v24 = qword_254B60558;
  if (qword_254B60558)
  {
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)qword_254B60558);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      v26 = v22;
      if (v22 >= qword_254B60558)
        v26 = v22 % qword_254B60558;
    }
    else
    {
      v26 = (qword_254B60558 - 1) & v22;
    }
    v27 = *(uint64_t ***)(qword_254B60550 + 8 * v26);
    if (v27)
    {
      v28 = *v27;
      if (*v27)
      {
        if (SHIBYTE(__p[2]) >= 0)
          v29 = (void *)HIBYTE(__p[2]);
        else
          v29 = __p[1];
        if (SHIBYTE(__p[2]) >= 0)
          v30 = __p;
        else
          v30 = (void **)__p[0];
        if (v25.u32[0] < 2uLL)
        {
          v31 = qword_254B60558 - 1;
          while (1)
          {
            v37 = v28[1];
            if (v37 == v23)
            {
              v38 = *((unsigned __int8 *)v28 + 39);
              if ((v38 & 0x80u) == 0)
                v39 = (void *)*((unsigned __int8 *)v28 + 39);
              else
                v39 = (void *)v28[3];
              if (v39 == v29)
              {
                v40 = (const void **)(v28 + 2);
                if ((v38 & 0x80) != 0)
                {
                  v88 = v29;
                  v42 = v31;
                  v43 = memcmp(*v40, v30, v28[3]);
                  v31 = v42;
                  v29 = v88;
                  if (!v43)
                    goto LABEL_154;
                }
                else
                {
                  if (!*((_BYTE *)v28 + 39))
                    goto LABEL_154;
                  v41 = v30;
                  while (*(unsigned __int8 *)v40 == *(unsigned __int8 *)v41)
                  {
                    v40 = (const void **)((char *)v40 + 1);
                    v41 = (void **)((char *)v41 + 1);
                    if (!--v38)
                      goto LABEL_154;
                  }
                }
              }
            }
            else if ((v37 & v31) != v26)
            {
              goto LABEL_90;
            }
            v28 = (uint64_t *)*v28;
            if (!v28)
              goto LABEL_90;
          }
        }
        do
        {
          v32 = v28[1];
          if (v32 == v23)
          {
            v33 = *((unsigned __int8 *)v28 + 39);
            if ((v33 & 0x80u) == 0)
              v34 = (void *)*((unsigned __int8 *)v28 + 39);
            else
              v34 = (void *)v28[3];
            if (v34 == v29)
            {
              v35 = (const void **)(v28 + 2);
              if ((v33 & 0x80) != 0)
              {
                if (!memcmp(*v35, v30, v28[3]))
                  goto LABEL_154;
              }
              else
              {
                if (!*((_BYTE *)v28 + 39))
                  goto LABEL_154;
                v36 = v30;
                while (*(unsigned __int8 *)v35 == *(unsigned __int8 *)v36)
                {
                  v35 = (const void **)((char *)v35 + 1);
                  v36 = (void **)((char *)v36 + 1);
                  if (!--v33)
                    goto LABEL_154;
                }
              }
            }
          }
          else
          {
            if (v32 >= v24)
              v32 %= v24;
            if (v32 != v26)
              break;
          }
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
    }
  }
  else
  {
    v26 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_90:
  __dst.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAA00;
  v44 = (char *)operator new(0x30uLL);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&qword_254B60560;
  *(_QWORD *)v44 = 0;
  *((_QWORD *)v44 + 1) = v23;
  v45 = (std::string *)(v44 + 16);
  if (SHIBYTE(__p[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v45, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v45->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void **)v44 + 4) = __p[2];
  }
  *((_QWORD *)v44 + 5) = v17;
  __dst.__r_.__value_.__s.__data_[16] = 1;
  v46 = (float)(unint64_t)(qword_254B60568 + 1);
  if (!v24 || (float)(*(float *)&dword_254B60570 * (float)v24) < v46)
  {
    v49 = 1;
    if (v24 >= 3)
      v49 = (v24 & (v24 - 1)) != 0;
    v50 = v49 | (2 * v24);
    v51 = vcvtps_u32_f32(v46 / *(float *)&dword_254B60570);
    if (v50 <= v51)
      prime = v51;
    else
      prime = v50;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v24 = qword_254B60558;
    if (prime > qword_254B60558)
      goto LABEL_107;
    if (prime >= qword_254B60558)
      goto LABEL_140;
    v63 = vcvtps_u32_f32((float)(unint64_t)qword_254B60568 / *(float *)&dword_254B60570);
    if ((unint64_t)qword_254B60558 < 3
      || (v64 = (uint8x8_t)vcnt_s8((int8x8_t)qword_254B60558), v64.i16[0] = vaddlv_u8(v64), v64.u32[0] > 1uLL))
    {
      v63 = std::__next_prime(v63);
    }
    else
    {
      v65 = 1 << -(char)__clz(v63 - 1);
      if (v63 >= 2)
        v63 = v65;
    }
    if (prime <= v63)
      prime = v63;
    if (prime >= v24)
    {
      v24 = qword_254B60558;
    }
    else
    {
      if (prime)
      {
LABEL_107:
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v53 = operator new(8 * prime);
        v54 = (void *)qword_254B60550;
        qword_254B60550 = (uint64_t)v53;
        if (v54)
          operator delete(v54);
        v55 = 0;
        qword_254B60558 = prime;
        do
          *(_QWORD *)(qword_254B60550 + 8 * v55++) = 0;
        while (prime != v55);
        v56 = (_QWORD **)qword_254B60560;
        if (!qword_254B60560)
          goto LABEL_139;
        v57 = *(_QWORD *)(qword_254B60560 + 8);
        v58 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v59 = v57 & v58;
          *(_QWORD *)(qword_254B60550 + 8 * v59) = &qword_254B60560;
          for (i = *v56; *v56; i = *v56)
          {
            v61 = i[1] & v58;
            if (v61 == v59)
            {
              v56 = (_QWORD **)i;
            }
            else if (*(_QWORD *)(qword_254B60550 + 8 * v61))
            {
              *v56 = (_QWORD *)*i;
              v62 = 8 * v61;
              *i = **(_QWORD **)(qword_254B60550 + v62);
              **(_QWORD **)(qword_254B60550 + v62) = i;
            }
            else
            {
              *(_QWORD *)(qword_254B60550 + 8 * v61) = v56;
              v56 = (_QWORD **)i;
              v59 = v61;
            }
          }
LABEL_139:
          v24 = prime;
          goto LABEL_140;
        }
        if (v57 >= prime)
          v57 %= prime;
        *(_QWORD *)(qword_254B60550 + 8 * v57) = &qword_254B60560;
        v66 = *v56;
        if (!*v56)
          goto LABEL_139;
        while (1)
        {
          v68 = v66[1];
          if (v68 >= prime)
            v68 %= prime;
          if (v68 == v57)
            goto LABEL_133;
          if (*(_QWORD *)(qword_254B60550 + 8 * v68))
          {
            *v56 = (_QWORD *)*v66;
            v67 = 8 * v68;
            *v66 = **(_QWORD **)(qword_254B60550 + v67);
            **(_QWORD **)(qword_254B60550 + v67) = v66;
            v66 = v56;
LABEL_133:
            v56 = (_QWORD **)v66;
            v66 = (_QWORD *)*v66;
            if (!v66)
              goto LABEL_139;
          }
          else
          {
            *(_QWORD *)(qword_254B60550 + 8 * v68) = v56;
            v56 = (_QWORD **)v66;
            v66 = (_QWORD *)*v66;
            v57 = v68;
            if (!v66)
              goto LABEL_139;
          }
        }
      }
      v87 = (void *)qword_254B60550;
      qword_254B60550 = 0;
      if (v87)
        operator delete(v87);
      v24 = 0;
      qword_254B60558 = 0;
    }
LABEL_140:
    v69 = v24 - 1;
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v23 >= v24)
      {
        v26 = v23 % v24;
        v47 = *(_QWORD **)(qword_254B60550 + 8 * (v23 % v24));
        v48 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
        if (v47)
          goto LABEL_96;
      }
      else
      {
        v26 = v23;
        v47 = *(_QWORD **)(qword_254B60550 + 8 * v23);
        v48 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
        if (v47)
          goto LABEL_96;
      }
    }
    else
    {
      v26 = v69 & v23;
      v47 = *(_QWORD **)(qword_254B60550 + 8 * (v69 & v23));
      v48 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
      if (v47)
        goto LABEL_96;
    }
LABEL_142:
    *v48 = qword_254B60560;
    qword_254B60560 = __dst.__r_.__value_.__r.__words[0];
    *(_QWORD *)(qword_254B60550 + 8 * v26) = &qword_254B60560;
    if (*(_QWORD *)__dst.__r_.__value_.__l.__data_)
    {
      v70 = *(_QWORD *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 8);
      if ((v24 & (v24 - 1)) != 0)
      {
        if (v70 >= v24)
          v70 %= v24;
      }
      else
      {
        v70 &= v24 - 1;
      }
      *(_QWORD *)(qword_254B60550 + 8 * v70) = __dst.__r_.__value_.__r.__words[0];
    }
    goto LABEL_153;
  }
  v47 = *(_QWORD **)(qword_254B60550 + 8 * v26);
  v48 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
  if (!v47)
    goto LABEL_142;
LABEL_96:
  *v48 = *v47;
  *v47 = __dst.__r_.__value_.__r.__words[0];
LABEL_153:
  ++qword_254B60568;
LABEL_154:
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v91.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_156:
      v71 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
      if (v71)
        goto LABEL_157;
LABEL_184:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  else if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_156;
  }
  operator delete(v92.__r_.__value_.__l.__data_);
  v71 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
  if (!v71)
    goto LABEL_184;
LABEL_157:
  v72 = v71[5];
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  std::mutex::unlock(&_MergedGlobals_0);
  a1[2] = v72;
  a1[3] = v72;
  a1[4] = v72 + 8;
  a1[5] = v72 + 32;
  a1[6] = v72 + 56;
  if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_161;
LABEL_164:
    operator delete(v90.__r_.__value_.__l.__data_);
    if (a4)
      goto LABEL_162;
LABEL_165:
    pthread_mutex_lock(&stru_253D32648);
    if (qword_253D32688)
      goto LABEL_166;
    v73 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v73 + 1) = 0;
    *((_QWORD *)v73 + 2) = 0;
    *(_QWORD *)v73 = off_24CE823D8;
    *((_QWORD *)v73 + 3) = off_24CE82218;
    a4 = (uint64_t)(v73 + 24);
    v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v92;
    *(_OWORD *)&v92.__r_.__value_.__r.__words[1] = (unint64_t)&v92;
    *((_QWORD *)v73 + 4) = 850045863;
    *(_OWORD *)(v73 + 40) = 0u;
    *(_OWORD *)(v73 + 56) = 0u;
    *(_OWORD *)(v73 + 72) = 0u;
    *((_QWORD *)v73 + 11) = 0;
    __dst.__r_.__value_.__r.__words[0] = 0x6C61626F6C67;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 6;
    HIBYTE(__p[2]) = 12;
    strcpy((char *)__p, ".log_manager");
    v74 = std::string::append(&__dst, (const std::string::value_type *)__p, 0xCuLL);
    v75 = v73 + 96;
    v76 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    *((_QWORD *)v73 + 14) = *((_QWORD *)&v74->__r_.__value_.__l + 2);
    *((_OWORD *)v73 + 6) = v76;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_170:
        if ((v73[119] & 0x80000000) == 0)
        {
LABEL_171:
          *((_QWORD *)v73 + 15) = os_log_create("com.apple.telephony.basebandservices", v75);
          *((_QWORD *)v73 + 16) = &off_24CE82200;
          v73[136] = 3;
          *((_QWORD *)v73 + 18) = v73 + 144;
          *((_QWORD *)v73 + 19) = v73 + 144;
          *((_QWORD *)v73 + 20) = 0;
          v77 = v92.__r_.__value_.__r.__words[2];
          if (v92.__r_.__value_.__r.__words[2])
          {
            v78 = *(_OWORD *)&v92.__r_.__value_.__l.__data_;
            v79 = *(_QWORD *)v92.__r_.__value_.__l.__size_;
            *(_QWORD *)(v79 + 8) = *(_QWORD *)(v92.__r_.__value_.__r.__words[0] + 8);
            **(_QWORD **)(v78 + 8) = v79;
            v80 = *((_QWORD *)v73 + 18);
            *(_QWORD *)(v80 + 8) = *((_QWORD *)&v78 + 1);
            **((_QWORD **)&v78 + 1) = v80;
            *((_QWORD *)v73 + 18) = v78;
            *(_QWORD *)(v78 + 8) = v73 + 144;
            *((_QWORD *)v73 + 20) = v77;
          }
          *((_QWORD *)v73 + 3) = off_24CE82248;
          v81 = (std::__shared_weak_count *)off_253D32690;
          qword_253D32688 = (uint64_t)(v73 + 24);
          off_253D32690 = v73;
          if (!v81)
            goto LABEL_178;
          p_shared_owners = (unint64_t *)&v81->__shared_owners_;
          do
            v83 = __ldaxr(p_shared_owners);
          while (__stlxr(v83 - 1, p_shared_owners));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
LABEL_166:
          a4 = qword_253D32688;
          v73 = (char *)off_253D32690;
          if (!off_253D32690)
          {
LABEL_180:
            pthread_mutex_unlock(&stru_253D32648);
            a1[7] = a4;
            a1[8] = v73;
            goto LABEL_181;
          }
LABEL_178:
          v84 = (unint64_t *)(v73 + 8);
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
          goto LABEL_180;
        }
LABEL_187:
        v75 = *(const char **)v75;
        goto LABEL_171;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_170;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v73[119] & 0x80000000) == 0)
      goto LABEL_171;
    goto LABEL_187;
  }
  operator delete(v89.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_164;
LABEL_161:
  if (!a4)
    goto LABEL_165;
LABEL_162:
  a1[7] = 0;
  a1[8] = 0;
LABEL_181:
  a1[9] = a4;
  return a1;
}

void sub_212AD1F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)(v44 - 112));
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a37 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a44 & 0x80000000) == 0)
    {
LABEL_8:
      std::mutex::unlock(&_MergedGlobals_0);
      if (a16 < 0)
        operator delete(a11);
      if (a23 < 0)
        operator delete(a18);
      _Unwind_Resume(a1);
    }
LABEL_7:
    operator delete(a39);
    goto LABEL_8;
  }
  operator delete(a32);
  if ((a44 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

_QWORD *support::log::client::client(_QWORD *a1, std::string *a2, std::string *a3)
{
  std::string __p;
  std::string v6;

  v6 = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  __p = *a3;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  support::log::client::client(a1, &v6, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return a1;
  }
  else if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v6.__r_.__value_.__l.__data_);
  return a1;
}

void sub_212AD2194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

BOOL support::log::manager::should_log(uint64_t a1, unsigned int a2, os_log_t oslog)
{
  return *(unsigned __int8 *)(a1 + 112) >= a2 || os_log_type_enabled(oslog, support::log::sOSLogLevel[a2]);
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void support::log::manager_global::~manager_global(support::log::manager_global *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_24CE82218;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_24CE82218;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(_QWORD *a1)
{
  _BYTE *v1;
  int v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t *result;
  uint64_t **v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v1 = a1;
  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  if (v2 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v24, v3, v4);
  v6 = qword_254B60558;
  if (!qword_254B60558)
    return 0;
  v7 = v5;
  v8 = (uint8x8_t)vcnt_s8((int8x8_t)qword_254B60558);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = v5;
    if (v5 >= qword_254B60558)
      v9 = v5 % qword_254B60558;
  }
  else
  {
    v9 = (qword_254B60558 - 1) & v5;
  }
  v11 = *(uint64_t ***)(qword_254B60550 + 8 * v9);
  if (v11)
  {
    v12 = *v11;
    if (*v11)
    {
      v13 = v1[23];
      if (v13 >= 0)
        v14 = v1[23];
      else
        v14 = *((_QWORD *)v1 + 1);
      if (v13 < 0)
        v1 = *(_BYTE **)v1;
      if (v8.u32[0] < 2uLL)
      {
        v15 = qword_254B60558 - 1;
        while (1)
        {
          v20 = v12[1];
          if (v20 == v7)
          {
            v21 = *((unsigned __int8 *)v12 + 39);
            if ((v21 & 0x80u) == 0)
              v22 = *((unsigned __int8 *)v12 + 39);
            else
              v22 = v12[3];
            if (v22 == v14)
            {
              if ((v21 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v1, v12[3]))
                  return v12;
              }
              else
              {
                if (!*((_BYTE *)v12 + 39))
                  return v12;
                v23 = 0;
                while (*((unsigned __int8 *)v12 + v23 + 16) == v1[v23])
                {
                  if (v21 == ++v23)
                    return v12;
                }
              }
            }
          }
          else if ((v20 & v15) != v9)
          {
            return 0;
          }
          result = 0;
          v12 = (uint64_t *)*v12;
          if (!v12)
            return result;
        }
      }
      while (1)
      {
        v16 = v12[1];
        if (v16 == v7)
        {
          v17 = *((unsigned __int8 *)v12 + 39);
          if ((v17 & 0x80u) == 0)
            v18 = *((unsigned __int8 *)v12 + 39);
          else
            v18 = v12[3];
          if (v18 == v14)
          {
            if ((v17 & 0x80) != 0)
            {
              if (!memcmp((const void *)v12[2], v1, v12[3]))
                return v12;
            }
            else
            {
              if (!*((_BYTE *)v12 + 39))
                return v12;
              v19 = 0;
              while (*((unsigned __int8 *)v12 + v19 + 16) == v1[v19])
              {
                if (v17 == ++v19)
                  return v12;
              }
            }
          }
        }
        else
        {
          if (v16 >= v6)
            v16 %= v6;
          if (v16 != v9)
            return 0;
        }
        result = 0;
        v12 = (uint64_t *)*v12;
        if (!v12)
          return result;
      }
    }
  }
  return 0;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v23 + v26 + v27 + a3;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v27 + a3 + v24 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v25 + v28 + v36;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v49 + v47 + v58 + v48;
        v40 = __ROR8__(v49 + v47 + v58, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void support::log::global_client_descriptor::~global_client_descriptor(void **this)
{
  *this = off_24CE82310;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(this[1]);
    return;
  }
  operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    goto LABEL_5;
}

{
  *this = off_24CE82310;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(this[1]);
    operator delete(this);
    return;
  }
  if (*((char *)this + 31) < 0)
    goto LABEL_6;
LABEL_3:
  operator delete(this);
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24CE82340;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24CE82340;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::buffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void support::log::buffer::~buffer(support::log::buffer *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;

  *(_QWORD *)this = off_24CE82390;
  v2 = (char *)*((_QWORD *)this + 9);
  v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<char *>::destroy(*((_QWORD **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;

  *(_QWORD *)this = off_24CE82390;
  v2 = (char *)*((_QWORD *)this + 9);
  v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<char *>::destroy(*((_QWORD **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

uint64_t std::deque<char *>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__tree<char *>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<char *>::destroy(*a1);
    std::__tree<char *>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24CE823D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24CE823D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::manager_global>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t __cxx_global_var_init_12()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_212A4D000);
  }
  return result;
}

const char *BBUStageAsString(int a1)
{
  int v1;
  const char *result;
  void *exception;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v1 = a1 - 1;
  result = "initial";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "first";
      break;
    case 3:
      result = "second";
      break;
    case 7:
      result = "booted";
      break;
    case 15:
      result = "provisioning";
      break;
    case 31:
      result = "eUICC";
      break;
    default:
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Common/BBUStages.cpp", 0xFu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized BBU stage.\")", v4, v5, v6, v7);
  }
  return result;
}

void sub_212AD3150(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void BasebandCoredump::BasebandCoredump(BasebandCoredump *this)
{
  *(_QWORD *)this = off_24CE82428;
}

void BasebandCoredump::create(BasebandCoredump *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (**v2)(BasebandCoredumpParams *__hidden);
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v4 = 0u;
  v5 = 0u;
  v3 = 0u;
  v2 = &off_24CE82460;
  BYTE8(v6) = 0;
  v10 = 0u;
  v11 = 0u;
  *a2 = 0;
  ACFULogging::getLogInstance(this);
  ACFULogging::handleMessage();
  BasebandCoredumpParams::~BasebandCoredumpParams((BasebandCoredumpParams *)&v2);
}

void sub_212AD3208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _QWORD *v4;
  va_list va;

  va_start(va, a4);
  *v4 = 0;
  BasebandCoredumpParams::~BasebandCoredumpParams((BasebandCoredumpParams *)va);
  _Unwind_Resume(a1);
}

uint64_t BasebandCoredump::create@<X0>(ACFULogging *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  ACFULogging::getLogInstance(a1);
  return ACFULogging::handleMessage();
}

void sub_212AD3270(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

void BasebandCoredumpParams::~BasebandCoredumpParams(BasebandCoredumpParams *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_24CE82460;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!*((_BYTE *)this + 96))
      goto LABEL_19;
  }
  else
  {
LABEL_15:
    if (!*((_BYTE *)this + 96))
      goto LABEL_19;
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
LABEL_19:
  if (*((_BYTE *)this + 64) && *((char *)this + 63) < 0)
  {
    operator delete(*((void **)this + 5));
    if (!*((_BYTE *)this + 32))
      return;
  }
  else if (!*((_BYTE *)this + 32))
  {
    return;
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

BOOL support::fs::loadFile(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _BOOL8 v4;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  __int128 v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  _QWORD __b[91];

  __b[89] = *MEMORY[0x24BDAC8D0];
  memset(__b, 170, 0x240uLL);
  std::ifstream::basic_ifstream(__b);
  if (!__b[17]
    || (std::istream::tellg(), std::istream::seekg(), std::istream::tellg(), v3 = __b[88], std::istream::seekg(), !v3)
    || *(_DWORD *)((char *)&__b[4] + *(_QWORD *)(__b[0] - 24)))
  {
    v4 = 0;
    goto LABEL_5;
  }
  v7 = *(char **)a2;
  v6 = *(char **)(a2 + 8);
  v8 = (unint64_t)&v6[-*(_QWORD *)a2];
  v9 = v3 - v8;
  if (v3 <= v8)
  {
    if (v3 < v8)
      *(_QWORD *)(a2 + 8) = &v7[v3];
    goto LABEL_36;
  }
  v10 = *(_QWORD *)(a2 + 16);
  if (v10 - (uint64_t)v6 < v9)
  {
    if ((v3 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v10 - (_QWORD)v7;
    v12 = 2 * v11;
    if (2 * v11 <= v3)
      v12 = v3;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v14 = (char *)operator new(v13);
    v15 = &v14[v8];
    v16 = &v14[v13];
    bzero(&v14[v8], v3 - v8);
    if (v6 == v7)
      goto LABEL_34;
    if (v8 >= 8 && (unint64_t)(v7 - v14) >= 0x20)
    {
      if (v8 < 0x20)
      {
        v17 = 0;
        goto LABEL_26;
      }
      v17 = v8 & 0xFFFFFFFFFFFFFFE0;
      v18 = v6 - 16;
      v19 = &v14[v6 - 16 - v7];
      v20 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v21 = *(_OWORD *)v18;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)v19 = v21;
        v19 -= 32;
        v18 -= 32;
        v20 -= 32;
      }
      while (v20);
      if (v8 == v17)
        goto LABEL_33;
      if ((v8 & 0x18) != 0)
      {
LABEL_26:
        v15 -= v8 & 0xFFFFFFFFFFFFFFF8;
        v22 = &v6[-v17 - 8];
        v23 = (char *)(v22 - v7);
        v24 = v17 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v25 = *(_QWORD *)v22;
          v22 -= 8;
          *(_QWORD *)&v23[(_QWORD)v14] = v25;
          v23 -= 8;
          v24 += 8;
        }
        while (v24);
        v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_33;
        goto LABEL_31;
      }
      v15 -= v17;
      v6 -= v17;
    }
LABEL_31:
    v26 = v15 - 1;
    do
    {
      v27 = *--v6;
      *v26-- = v27;
    }
    while (v6 != v7);
LABEL_33:
    v6 = v7;
    v15 = v14;
LABEL_34:
    *(_QWORD *)a2 = v15;
    *(_QWORD *)(a2 + 8) = &v14[v3];
    *(_QWORD *)(a2 + 16) = v16;
    if (v6)
      operator delete(v6);
    goto LABEL_36;
  }
  bzero(*(void **)(a2 + 8), v3 - v8);
  *(_QWORD *)(a2 + 8) = &v6[v9];
LABEL_36:
  std::istream::read();
  v4 = __b[1] == (int)v3;
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)__b + *(_QWORD *)(__b[0] - 24)), *(_DWORD *)((char *)&__b[4] + *(_QWORD *)(__b[0] - 24)) | 4);
LABEL_5:
  __b[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)__b + *(_QWORD *)(__b[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x212BFA184](&__b[2]);
  std::istream::~istream();
  MEMORY[0x212BFA3D0](&__b[53]);
  return v4;
}

void sub_212AD36DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x212BFA178](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_212AD37D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x212BFA3D0](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x212BFA184](a1 + 2);
  std::istream::~istream();
  MEMORY[0x212BFA3D0](a1 + 53);
  return a1;
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  std::locale::__imp *locale;
  unint64_t *v3;
  unint64_t v4;

  locale = this[6].__locale_;
  if (!locale)
    goto LABEL_5;
  v3 = (unint64_t *)((char *)locale + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (!v4)
  {
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)locale);
    std::locale::~locale(this);
  }
  else
  {
LABEL_5:
    std::locale::~locale(this);
  }
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  void **v14;
  std::string *v16;
  std::string *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    v11 = v10 + 1;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((_QWORD *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_212AD3A94(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1, char *a2, int a3)
{
  const std::locale *v6;
  size_t v7;

  v6 = (const std::locale *)MEMORY[0x212BFA37C]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x24BEDB350]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x24BEDB4B0]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(a1, a2, &a2[v7]) != (std::basic_regex<char> *)&a2[v7])
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_212AD3B44(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_212AD3B60(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BFA0E8](exception, 17);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_212AD3BAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  std::basic_regex<char> *v3;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::__owns_one_state<char> *v11;
  int v12;
  char *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3)
    return a2;
  if (*a2 == 94)
  {
    v6 = operator new(0x18uLL);
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *v6 = &unk_24CE825E8;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      v10 = v3;
      v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, (uint64_t)v10, a3);
      if (v13 != (char *)v10)
      {
        v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v3 != v10)
          continue;
      }
      if ((char *)&v10->__traits_.__loc_.__locale_ + 1 != a3 || LOBYTE(v10->__traits_.__loc_.__locale_) != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v14 = operator new(0x18uLL);
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *v14 = &unk_24CE82630;
      v14[1] = v17;
      *((_BYTE *)v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::basic_regex<char> *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_13;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v7, v3);
  }
  while (v7 != v8);
  if (v8 == a2)
LABEL_13:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 != v3)
  {
    while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
    {
      v9 = *(_QWORD *)(a1 + 56);
      v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), v3);
      if (v11 == (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1))
        goto LABEL_13;
      do
      {
        v8 = v11;
        v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v11, v3);
      }
      while (v11 != v8);
      if (v8 == v10)
        goto LABEL_13;
      v12 = operator new(0x18uLL);
      v13 = *(_QWORD *)(v9 + 8);
      v12[1] = *(_QWORD *)(v6 + 8);
      v12[2] = v13;
      *v12 = &unk_24CE82AB0;
      *(_QWORD *)(v6 + 8) = v12;
      *(_QWORD *)(v9 + 8) = 0;
      v14 = operator new(0x10uLL);
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v14[1] = v15;
      *(_QWORD *)(v9 + 8) = v14;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
      v16 = operator new(0x10uLL);
      v17 = *(_QWORD *)(v9 + 8);
      *v16 = &unk_24CE82AF8;
      v16[1] = v17;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
      if (v8 == v3)
        return v3;
    }
    return v8;
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = operator new(0x10uLL);
    v11 = *(_QWORD *)(v6 + 8);
    v10[1] = v11;
    *(_QWORD *)(v6 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (char *)memchr(v9, 10, a3 - v9);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v9)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v9, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_24CE82AB0;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_24CE82AF8;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v9 = v22;
    else
      v9 = v22 + 1;
  }
  while (v9 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::basic_regex<char> *v21;
  std::basic_regex<char> *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = operator new(0x10uLL);
    v11 = *(_QWORD *)(v6 + 8);
    v10[1] = v11;
    *(_QWORD *)(v6 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v9 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v9 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (std::basic_regex<char> *)memchr(v9, 10, (char *)a3 - (char *)v9);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v9)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v9, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_24CE82AB0;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_24CE82AF8;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v9 = v22;
    else
      v9 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
  }
  while (v9 != a3);
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BFA0E8](exception, 14);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_212AD424C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B5457DLL)
    return a1 + 24;
  if (((v3 & 0x8000000212B5457DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B5457DLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B5457DLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  operator delete(this);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x212BFA37C]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x24BEDB350]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x24BEDB4B0]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_212AD4460(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  char *v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = (char *)operator new(0x58uLL);
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &unk_24CE826C0;
  *((_QWORD *)v8 + 1) = first;
  std::locale::locale((std::locale *)v8 + 2, &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *((_QWORD *)v8 + 7) = a2->__start_.__ptr_;
  *((_QWORD *)v8 + 8) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *((_QWORD *)v8 + 9) = a2->__end_;
  *((_DWORD *)v8 + 20) = a4;
  v8[84] = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BFA0E8](exception, 6);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_212AD4564(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;

  if (!*(_BYTE *)(a2 + 92))
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
    return result;
  }
  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8) && (*(_BYTE *)(a2 + 88) & 1) == 0)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24CE82678;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24CE82678;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_19;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          v6 = *v2;
          if (v6 == 95)
            goto LABEL_17;
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    v7 = *(v4 - 1);
    v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      v9 = 1;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    else
    {
      v9 = 0;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(_BYTE *)(result + 40) == (v9 != 0))
        goto LABEL_20;
      goto LABEL_27;
    }
LABEL_24:
    if (*(_BYTE *)(result + 40) != (v9 != 1))
      goto LABEL_27;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(a2 + 88) & 8) == 0)
  {
    v6 = *(v3 - 1);
    if (v6 == 95)
      goto LABEL_17;
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(_BYTE *)(result + 40) != 1)
        goto LABEL_27;
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(_QWORD *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(_BYTE *)(result + 40))
    goto LABEL_20;
LABEL_27:
  v10 = *(_QWORD *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void (__cdecl **v6)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24CE826C0;
  v2 = (std::locale *)(a1 + 2);
  v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1];
  if (v6)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v6 + 1))(v6);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&unk_24CE826C0;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  operator delete(a1);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::vector<std::csub_match>::size_type v5;
  uint64_t v6;
  const char *v7;
  BOOL v8;
  char v9;
  std::sub_match<const char *> *begin;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  std::sub_match<const char *> *v16;
  uint64_t v17;
  std::vector<std::csub_match> __p;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20 = 0xAAAAAAAAAAAAAAAALL;
  v22 = 0xAAAAAAAAAAAAAA00;
  v24 = v4;
  v21 = 0;
  v23 = 0uLL;
  LOBYTE(v24) = 0;
  BYTE8(v24) = 0;
  v25 = 0;
  memset(&__p, 0, sizeof(__p));
  v5 = (*(_DWORD *)(a1 + 44) + 1);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)&v19 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)&v19 + 1) = v19;
  LOBYTE(v20) = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v5, (std::vector<std::csub_match>::const_reference)&v19);
  *((_QWORD *)&v20 + 1) = v6;
  v21 = v6;
  LOBYTE(v22) = 0;
  v23 = v19;
  LOBYTE(v24) = v20;
  v25 = v6;
  BYTE8(v24) = 1;
  v7 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v8 = v7 == *(const char **)(a2 + 8);
  else
    v8 = 0;
  v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v7, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = 1;
  do
  {
    v16 = &begin[v15];
    v17 = v14 + 24 * (v13 + v12);
    *(std::pair<const char *, const char *> *)v17 = v16->std::pair<const char *, const char *>;
    *(_BYTE *)(v17 + 16) = v16->matched;
    v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_212AD4BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BFA0E8](exception, 12);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_212AD4C90(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BFA0E8](exception, 16);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_212AD4CDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          *((_QWORD *)v3 - 4) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 8);
        if (v6)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v22 = (void *)*((_QWORD *)v21 - 5);
      if (v22)
      {
        *((_QWORD *)v21 - 4) = v22;
        operator delete(v22);
      }
      v23 = (void *)*((_QWORD *)v21 - 8);
      if (v23)
      {
        *((_QWORD *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::sub_match<const char *> *value;
  std::vector<std::csub_match>::pointer end;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::sub_match<const char *> *v13;
  std::vector<std::csub_match>::size_type v14;
  std::pair<const char *, const char *> v15;
  std::sub_match<const char *> *v16;
  std::vector<std::csub_match>::size_type v17;
  std::sub_match<const char *> *v18;
  std::pair<const char *, const char *> *v19;
  std::pair<const char *, const char *> v20;
  std::vector<std::csub_match>::pointer begin;
  std::pair<const char *, const char *> v22;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = &end[__n];
      v14 = 24 * __n;
      do
      {
        v15 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    v17 = 24 * __n;
    v18 = &v16[__n];
    v19 = v16;
    do
    {
      v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      *v19 = v20;
      v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v22 = end[-1].std::pair<const char *, const char *>;
        *(_QWORD *)&v16[-1].matched = *(_QWORD *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
      operator delete(end);
  }
}

uint64_t std::__state<char>::__state(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  size_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(_QWORD *)(a1 + 40) = &v9[v10];
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 7);
  v11 = (_BYTE *)*((_QWORD *)a2 + 8);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(_QWORD *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  v15 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 85) = *(_QWORD *)((char *)a2 + 85);
  *(_QWORD *)(a1 + 80) = v15;
  return a1;
}

void sub_212AD5224(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  int v7;
  unsigned int v8;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v7 = *v5;
  v8 = v7 - 48;
  if (v7 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v8);
    return a2 + 2;
  }
  if ((v7 - 49) > 8)
    goto LABEL_18;
  v10 = a2 + 2;
  if (a2 + 2 == a3)
  {
    v10 = a3;
  }
  else
  {
    while (1)
    {
      v11 = *v10;
      if ((v11 - 48) > 9)
        break;
      if (v8 >= 0x19999999)
        goto LABEL_23;
      ++v10;
      v8 = v11 + 10 * v8 - 48;
      if (v10 == a3)
      {
        v10 = a3;
        break;
      }
    }
    if (!v8)
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v8 > this->__marked_count_)
    goto LABEL_23;
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v8);
  if (v10 == v5)
  {
LABEL_18:
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>((uint64_t)this, a2 + 1, a3);
    if (v10 == v5)
    {
      v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, a3, 0);
      if (v12 == v5)
        return a2;
      else
        return v12;
    }
  }
  return v10;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BFA0E8](exception, 11);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_212AD5408(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BFA0E8](exception, 3);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_212AD54DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  _DWORD *v5;
  _DWORD *v6;
  int v7;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v6;
        *(_QWORD *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_212AD56C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212AD56D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212AD56E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212AD56FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212AD5710(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212AD5724(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  unsigned __int8 *result;
  unsigned __int8 v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  int v11;
  unsigned __int8 v12;
  char v13;
  unsigned __int8 v14;
  char v15;
  std::basic_regex<char>::value_type v16;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3)
        goto LABEL_81;
      v8 = v4[1];
      if (((v8 & 0xDF) - 65) > 0x19u)
        goto LABEL_81;
      v9 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v9;
        *((_BYTE *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v9);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        v10 = v4[1];
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            v11 = *v4;
            if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
              goto LABEL_38;
          }
        }
      }
      goto LABEL_81;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        v6 = 11;
LABEL_65:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_38:
      if (v4 + 1 == a3)
        goto LABEL_81;
      v12 = v4[1];
      v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
        goto LABEL_43;
      v12 |= 0x20u;
      if ((v12 - 97) >= 6u)
        goto LABEL_81;
      v13 = -87;
LABEL_43:
      if (v4 + 2 == a3)
        goto LABEL_81;
      v14 = v4[2];
      v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6u)
LABEL_81:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        v15 = -87;
      }
      v16 = v14 + 16 * (v12 + v13) + v15;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v16;
      *((_BYTE *)a4 + 1) = 0;
      result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0)
        goto LABEL_81;
      if (!a4)
        goto LABEL_65;
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v5;
      *((_BYTE *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  std::__node<char> *v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  char *v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (char *)operator new(0x30uLL);
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_24CE82750;
    *((_QWORD *)v8 + 1) = first;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (char *)operator new(0x30uLL);
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_24CE82798;
    *((_QWORD *)v8 + 1) = v10;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = v2;
    goto LABEL_6;
  }
  v5 = (std::__node<char> *)operator new(0x18uLL);
  end = this->__end_;
  v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_24CE827E0;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LOBYTE(v5[2].__vftable) = v2;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_212AD5D00(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BFA0E8](exception, 4);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_212AD5D78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  std::__node<char> *v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  char *v11;

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new(0x30uLL);
    v9 = v8;
    first = this->__end_->__first_;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new(0x30uLL);
    v9 = v8;
    first = this->__end_->__first_;
    goto LABEL_6;
  }
  v5 = (std::__node<char> *)operator new(0x18uLL);
  end = this->__end_;
  v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_24CE828B8;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LODWORD(v5[2].__vftable) = __i;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24CE82750;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24CE82750;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v4 + 8);
  }
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24CE82798;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24CE82798;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24CE82828;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24CE82828;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(_BYTE *)(v3 + 16)
    || (v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3, v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  v6 = result;
  if (v4 >= 1)
  {
    v7 = 0;
    while (1)
    {
      v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)v3 + v7));
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v7));
      if (v8 != (_DWORD)result)
        goto LABEL_3;
      if (v4 == ++v7)
      {
        v5 = *(_QWORD *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v5 + v4;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v6 + 8);
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24CE82870;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24CE82870;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(v3 + 24 * v2 + 16)
    || (v4 = (unsigned __int8 **)(v3 + 24 * v2),
        v5 = *v4,
        v6 = v4[1] - *v4,
        v7 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    v8 = v6;
    v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      v11 = *v5++;
      v10 = v11;
      v12 = *v9++;
      if (v10 != v12)
        goto LABEL_3;
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v7 + v6;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    *(_QWORD *)(a2 + 80) = *((_QWORD *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 40);
    v5 = *(_BYTE **)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 40) = v13;
        *(_QWORD *)(a1 + 48) = v15;
        *(_QWORD *)(a1 + 56) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 40);
  v7 = *(_BYTE **)(a1 + 40);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 48) = v15;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  std::string::size_type size;
  std::string *v14;
  BOOL v15;
  std::locale v17;
  std::string v18;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v17, v11);
  std::locale::name(&v18, &v17);
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v18;
    v15 = v14->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
  else
  {
    v15 = 1;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v17);
  *(_BYTE *)(a1 + 171) = v15;
  return a1;
}

void sub_212AD6B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  std::locale *v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v9 + 136));
  v14 = *(void **)(v9 + 112);
  if (v14)
  {
    *(_QWORD *)(v9 + 120) = v14;
    operator delete(v14);
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
    {
LABEL_3:
      v16 = *v12;
      if (!*v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
      goto LABEL_3;
  }
  *(_QWORD *)(v9 + 72) = v15;
  operator delete(v15);
  v16 = *v12;
  if (!*v12)
  {
LABEL_5:
    std::locale::~locale(v10);
    v17 = *(_QWORD *)(v9 + 8);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(v9 + 48) = v16;
  operator delete(v16);
  goto LABEL_5;
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0)
LABEL_9:
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;

  locale = a1[17].__locale_;
  if (locale)
  {
    v3 = a1[18].__locale_;
    v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*((void **)v3 - 3));
        v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  v6 = a1[11].__locale_;
  if (v6)
  {
    v7 = a1[12].__locale_;
    v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0)
LABEL_19:
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  v11 = a1[1].__locale_;
  if (v11)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void std::regex_traits<char>::__lookup_collatename<char *>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  size_t v19;
  std::string v20;
  _BYTE __dst[24];

  v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    __dst[23] = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v5);
    v9 += v5;
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  v9 = operator new(v10 + 1);
  *(_QWORD *)&__dst[8] = v5;
  *(_QWORD *)&__dst[16] = v11 | 0x8000000000000000;
  *(_QWORD *)__dst = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *v9 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if ((__dst[23] & 0x80000000) != 0)
  {
    v12 = *(char **)__dst;
    if (!*(_QWORD *)&__dst[8])
      goto LABEL_18;
  }
  else
  {
    if (!__dst[23])
      return;
    v12 = __dst;
  }
  std::__get_collation_name(&v20, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
  v13 = v20.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v20.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_16;
  if ((__dst[23] & 0x80000000) != 0)
  {
    v15 = *(_QWORD *)&__dst[8];
    v12 = *(char **)__dst;
    if (*(_QWORD *)&__dst[8] < 3uLL)
      goto LABEL_24;
LABEL_18:
    operator delete(v12);
    return;
  }
  v15 = __dst[23];
  if (__dst[23] < 3u)
  {
    v12 = __dst;
LABEL_24:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v20, *(_QWORD *)(a2 + 16), v12, &v12[v15]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v20;
    if (*(char *)(a4 + 23) < 0)
    {
      v17 = *(_QWORD *)(a4 + 8);
      if (v17 == 1 || v17 == 12)
      {
        if (__dst != (_BYTE *)a4)
        {
          if (__dst[23] >= 0)
            v18 = __dst;
          else
            v18 = *(_BYTE **)__dst;
          if (__dst[23] >= 0)
            v19 = __dst[23];
          else
            v19 = *(_QWORD *)&__dst[8];
          std::string::__assign_no_alias<false>((void **)a4, v18, v19);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v16 = *(unsigned __int8 *)(a4 + 23);
      if (v16 == 1 || v16 == 12)
      {
        if (__dst != (_BYTE *)a4)
        {
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)a4, *(void **)__dst, *(size_t *)&__dst[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__dst;
            *(_QWORD *)(a4 + 16) = *(_QWORD *)&__dst[16];
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
LABEL_16:
    if ((__dst[23] & 0x80000000) == 0)
      return;
    v12 = *(char **)__dst;
    goto LABEL_18;
  }
}

void sub_212AD6FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  size_t v5;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  void *__dst[3];

  v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v5);
    v9 = (void **)((char *)v9 + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v5;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)v9 = 0;
  memset(a4, 170, 24);
  v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  if (SHIBYTE(__dst[2]) < 0)
    v12 = (char *)__dst[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v13, &v12[(_QWORD)v13]);
  v14 = *((unsigned __int8 *)a4 + 23);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = a4[1];
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      return;
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0)
      v16 = a4;
    else
      v16 = (_BYTE *)*a4;
    v16[11] = v16[3];
    if (SHIBYTE(__dst[2]) < 0)
      goto LABEL_26;
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(_BYTE *)a4 = 0;
    *((_BYTE *)a4 + 23) = 0;
    goto LABEL_25;
  }
  *(_BYTE *)*a4 = 0;
  a4[1] = 0;
  if (SHIBYTE(__dst[2]) < 0)
LABEL_26:
    operator delete(__dst[0]);
}

void sub_212AD71B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BFA0E8](exception, 5);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_212AD720C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  char *v9;
  void **v10;
  unint64_t v11;
  __int128 v12;
  void *v13;
  void **v14;
  void **v15;
  void *__p[3];
  void *v18[3];

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_39;
  v7 = 0;
  v8 = __src;
  if (*__src != 61)
    goto LABEL_5;
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      v8 = &__src[++v7];
      if (__src[v7] == 61)
        goto LABEL_4;
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v7] == a3)
    goto LABEL_39;
  memset(v18, 170, sizeof(v18));
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v7], (uint64_t)v18);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
    v9 = (char *)HIBYTE(v18[2]);
    if (HIBYTE(v18[2]))
    {
      memset(__p, 170, sizeof(__p));
      v10 = v18;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v9 = (char *)v18[1];
  if (!v18[1])
    goto LABEL_40;
  memset(__p, 170, sizeof(__p));
  v10 = (void **)v18[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v10, &v9[(_QWORD)v10], (_BYTE **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      v11 = *(_QWORD *)(a4 + 144);
      if (v11 >= *(_QWORD *)(a4 + 152))
      {
        *(_QWORD *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v12 = *(_OWORD *)__p;
          *(void **)(v11 + 16) = __p[2];
          *(_OWORD *)v11 = v12;
        }
        *(_QWORD *)(a4 + 144) = v11 + 24;
        *(_QWORD *)(a4 + 144) = v11 + 24;
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  v13 = (void *)HIBYTE(v18[2]);
  if (SHIBYTE(v18[2]) < 0)
    v13 = v18[1];
  if (v13 == (void *)2)
  {
    v15 = v18;
    if (SHIBYTE(v18[2]) < 0)
      v15 = (void **)v18[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v15, *((char *)v15 + 1));
  }
  else
  {
    if (v13 != (void *)1)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    v14 = v18;
    if (SHIBYTE(v18[2]) < 0)
      v14 = (void **)v18[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v14);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v18[2]) < 0)
      goto LABEL_38;
    return &__src[v7 + 2];
  }
LABEL_33:
  if (SHIBYTE(v18[2]) < 0)
LABEL_38:
    operator delete(v18[0]);
  return &__src[v7 + 2];
}

void sub_212AD7458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  unint64_t v12;

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_15;
  v6 = 0;
  v7 = __src;
  if (*__src != 46)
    goto LABEL_5;
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      v7 = &__src[++v6];
      if (__src[v6] == 46)
        goto LABEL_4;
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v6] == a3)
    goto LABEL_15;
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v11;
  v8 = v12;
  *(_QWORD *)(a4 + 16) = v12;
  v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a4 + 8);
  if (v9 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return &__src[v6 + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type *v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  std::basic_regex<char>::value_type v11;

  if (a2 == a3)
LABEL_70:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v5;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30)
        goto LABEL_70;
      v7 = *a2 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_42:
        if (a4)
          goto LABEL_43;
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_42;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        v8 = a3;
        if (a4)
          goto LABEL_43;
        goto LABEL_69;
      }
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      if (!a4)
        goto LABEL_69;
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v7;
      *((_BYTE *)a4 + 1) = 0;
      return v8;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t j;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t k;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t m;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char v35;
  char *v36;
  char v37;
  _BYTE *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  int v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  void *__p[2];
  uint64_t v49;
  void *v50[2];
  uint64_t v51;

  v3 = a3;
  v4 = (uint64_t)a2;
  if (!*(_BYTE *)(a1 + 170))
  {
    v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((_QWORD *)a2 + 1) != 1)
        goto LABEL_74;
    }
    else if (v16 != 1)
    {
LABEL_74:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(_QWORD *)(a3 + 8) != 1)
        goto LABEL_74;
    }
    else if (*(_BYTE *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(_BYTE *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)__p = *(_OWORD *)v4;
      v49 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      *(_OWORD *)v50 = *(_OWORD *)v3;
      v51 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)v3 = 0;
      v39 = *(_QWORD *)(a1 + 96);
      if (v39 < *(_QWORD *)(a1 + 104))
      {
        v40 = *(_OWORD *)__p;
        *(_QWORD *)(v39 + 16) = v49;
        *(_OWORD *)v39 = v40;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(_QWORD *)(v39 + 40) = v41;
        v50[1] = 0;
        v51 = 0;
        v50[0] = 0;
        *(_QWORD *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      v42 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
      v43 = SHIBYTE(v51);
      *(_QWORD *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    v34 = a2;
    if ((v16 & 0x80) != 0)
      v34 = *(char **)a2;
    v35 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
        goto LABEL_64;
    }
    else
    {
      *(_BYTE *)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        v37 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v36);
        v38 = (_BYTE *)v3;
        if (*(char *)(v3 + 23) < 0)
          v38 = *(_BYTE **)v3;
        *v38 = v37;
        goto LABEL_67;
      }
    }
    v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(_BYTE *)(a1 + 169))
  {
    for (i = 0; ; ++i)
    {
      v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(_QWORD *)(v4 + 8))
        {
LABEL_13:
          for (j = 0; ; ++j)
          {
            v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(_QWORD *)(v3 + 8))
                goto LABEL_44;
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            v13 = v3;
            if ((v12 & 0x80) != 0)
              v13 = *(_QWORD *)v3;
            v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v13 + j));
            v15 = v3;
            if (*(char *)(v3 + 23) < 0)
              v15 = *(_QWORD *)v3;
            *(_BYTE *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      v8 = v4;
      if ((v7 & 0x80) != 0)
        v8 = *(_QWORD *)v4;
      v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v8 + i));
      v10 = v4;
      if (*(char *)(v4 + 23) < 0)
        v10 = *(_QWORD *)v4;
      *(_BYTE *)(v10 + i) = v9;
    }
  }
  for (k = 0; ; ++k)
  {
    v19 = a2[23];
    if (a2[23] < 0)
      break;
    if (k >= v19)
      goto LABEL_35;
LABEL_33:
    v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      v18 = *(char **)a2;
      v20 = *(char **)a2;
    }
    else
    {
      v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((_QWORD *)a2 + 1))
    goto LABEL_33;
LABEL_35:
  for (m = 0; ; ++m)
  {
    v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0)
      break;
    if (m >= v23)
      goto LABEL_44;
LABEL_42:
    v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      v22 = *(_QWORD *)a3;
      v24 = *(_QWORD *)a3;
    }
    else
    {
      v24 = a3;
    }
    *(_BYTE *)(v24 + m) = *(_BYTE *)(v22 + m);
  }
  if (m < *(_QWORD *)(a3 + 8))
    goto LABEL_42;
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    v26 = v4;
    v4 = *(_QWORD *)v4;
    v25 = *(_QWORD *)(v26 + 8);
  }
  else
  {
    v25 = *(unsigned __int8 *)(v4 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    v28 = v3;
    v3 = *(_QWORD *)v3;
    v27 = *(_QWORD *)(v28 + 8);
  }
  else
  {
    v27 = *(unsigned __int8 *)(v3 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)__p = *(_OWORD *)v46;
  v49 = v47;
  *(_OWORD *)v50 = *(_OWORD *)v44;
  v51 = v45;
  v29 = *(_QWORD *)(a1 + 96);
  if (v29 >= *(_QWORD *)(a1 + 104))
  {
    v32 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    v33 = SHIBYTE(v51);
    *(_QWORD *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  v30 = *(_OWORD *)__p;
  *(_QWORD *)(v29 + 16) = v49;
  *(_OWORD *)v29 = v30;
  __p[1] = 0;
  v49 = 0;
  __p[0] = 0;
  v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(_QWORD *)(v29 + 40) = v31;
  v50[1] = 0;
  v51 = 0;
  v50[0] = 0;
  *(_QWORD *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0)
    goto LABEL_69;
}

void sub_212AD804C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212AD8060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string const,std::string>::~pair((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _WORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  unint64_t v36;
  __int128 v37;
  __int16 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  unint64_t v53;
  __int128 v54;
  __int16 v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  _OWORD *v60;
  char *v61;
  unint64_t v62;
  __int128 v63;
  __int16 v64;

  if (*(_BYTE *)(a1 + 169))
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
    v8 = *(char **)(a1 + 120);
    v7 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      v9 = (char **)(a1 + 112);
      v10 = *(char **)(a1 + 112);
      v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        v12 = v11 >> 1;
        v13 = v7 - (_QWORD)v10;
        if (v13 <= (v11 >> 1) + 1)
          v14 = v12 + 1;
        else
          v14 = v13;
        if (v13 >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (!v15)
        {
          v16 = 0;
          v17 = (_WORD *)(2 * v12);
          v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          v19 = 2 * v12 + 2;
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
LABEL_30:
          v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E)
            goto LABEL_71;
          if ((unint64_t)(v8 - &v16[v11 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
            goto LABEL_71;
          v31 = (v30 >> 1) + 1;
          v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          v33 = &v8[-v32];
          v17 = (_WORD *)((char *)v17 - v32);
          v34 = &v16[2 * v12 - 16];
          v35 = v8 - 16;
          v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          v16 = operator new(2 * v15);
          v17 = &v16[2 * v12];
          v18 = &v16[2 * v15];
          *v17 = v6;
          v19 = (uint64_t)(v17 + 1);
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
          goto LABEL_30;
        }
LABEL_68:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_67:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
LABEL_28:
    *(_WORD *)v8 = v6;
    v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  v9 = (char **)(a1 + 112);
  v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  v8 = *(char **)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21)
      goto LABEL_28;
    v22 = *v9;
    v23 = v8 - *v9;
    if (v23 <= -3)
      goto LABEL_67;
    v24 = v23 >> 1;
    v25 = v21 - (_QWORD)v22;
    if (v25 <= (v23 >> 1) + 1)
      v26 = v24 + 1;
    else
      v26 = v25;
    if (v25 >= 0x7FFFFFFFFFFFFFFELL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      if (v27 < 0)
        goto LABEL_68;
      v28 = operator new(2 * v27);
      v17 = &v28[2 * v24];
      v18 = &v28[2 * v27];
      *v17 = v6;
      v19 = (uint64_t)(v17 + 1);
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    else
    {
      v28 = 0;
      v17 = (_WORD *)(2 * v24);
      v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      v19 = 2 * v24 + 2;
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E)
      goto LABEL_72;
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_72;
    v48 = (v47 >> 1) + 1;
    v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    v50 = &v8[-v49];
    v17 = (_WORD *)((char *)v17 - v49);
    v51 = &v28[2 * v24 - 16];
    v52 = v8 - 16;
    v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21)
    goto LABEL_28;
  v39 = *v9;
  v40 = v8 - *v9;
  if (v40 <= -3)
    goto LABEL_67;
  v41 = v40 >> 1;
  v42 = v21 - (_QWORD)v39;
  if (v42 <= (v40 >> 1) + 1)
    v43 = v41 + 1;
  else
    v43 = v42;
  if (v42 >= 0x7FFFFFFFFFFFFFFELL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v43;
  if (!v44)
  {
    v45 = 0;
    v17 = (_WORD *)(2 * v41);
    v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    v19 = 2 * v41 + 2;
    v46 = (char *)(v8 - v39);
    if (v8 == v39)
      goto LABEL_64;
    goto LABEL_57;
  }
  if (v44 < 0)
    goto LABEL_68;
  v45 = operator new(2 * v44);
  v17 = &v45[2 * v41];
  v18 = &v45[2 * v44];
  *v17 = v6;
  v19 = (uint64_t)(v17 + 1);
  v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E)
      goto LABEL_73;
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_73;
    v57 = (v56 >> 1) + 1;
    v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    v59 = &v8[-v58];
    v17 = (_WORD *)((char *)v17 - v58);
    v60 = &v45[2 * v41 - 16];
    v61 = v8 - 16;
    v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      *v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v18;
  if (v8)
    operator delete(v8);
LABEL_66:
  *(_QWORD *)(a1 + 120) = v19;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BFA0E8](exception, 1);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_212AD849C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _BYTE **a4@<X8>)
{
  unint64_t v5;
  _OWORD *v9;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  void **v20;
  _BYTE *v21;
  int v22;
  _BYTE *v23;
  void *__p[3];

  v5 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 > 0x16)
  {
    v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v16 = v5 | 7;
    v17 = v16 + 1;
    v9 = operator new(v16 + 1);
    __p[1] = (void *)v5;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v9 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)v9 + (v5 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = v9 + 1;
    v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  memset(a4, 170, 24);
  v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v19 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v20, &v19[(_QWORD)v20]);
  v21 = (_BYTE *)*((unsigned __int8 *)a4 + 23);
  v22 = (char)v21;
  if ((char)v21 < 0)
    v21 = a4[1];
  if (v21 == (_BYTE *)1)
    goto LABEL_32;
  if (v21 != (_BYTE *)12)
  {
    if (v22 < 0)
    {
      **a4 = 0;
      a4[1] = 0;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        return;
LABEL_35:
      operator delete(__p[0]);
      return;
    }
    *(_BYTE *)a4 = 0;
    *((_BYTE *)a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return;
    goto LABEL_35;
  }
  if (v22 >= 0)
    v23 = a4;
  else
    v23 = *a4;
  v23[11] = v23[3];
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_35;
}

void sub_212AD86A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BFA0E8](exception, 2);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_212AD86F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, _BYTE *__src, _BYTE *a3, BOOL a4)
{
  size_t v4;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  const char *v14;
  uint64_t classname;
  void *__dst[3];

  v4 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v4);
    v9 = (void **)((char *)v9 + v4);
    goto LABEL_9;
  }
  v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v10 = v4 | 7;
  v11 = v10 + 1;
  v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v4;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)v9 = 0;
  v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  if (SHIBYTE(__dst[2]) < 0)
    v12 = (char *)__dst[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v13, &v12[(_QWORD)v13]);
  if (SHIBYTE(__dst[2]) >= 0)
    v14 = (const char *)__dst;
  else
    v14 = (const char *)__dst[0];
  classname = std::__get_classname(v14, a4);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  return classname;
}

void sub_212AD8840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 64);
    v5 = *(_BYTE **)(a1 + 72);
    v16 = *(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 64) = v13;
        *(_QWORD *)(a1 + 72) = v15;
        *(_QWORD *)(a1 + 80) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 64);
  v7 = *(_BYTE **)(a1 + 64);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v15;
  *(_QWORD *)(a1 + 80) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 72) = v15;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3;
  _OWORD *v7;
  _BYTE *v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;
  void **v18;
  void *__p[3];

  v3 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3 > 0x16)
  {
    v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v14 = v3 | 7;
    v15 = v14 + 1;
    v7 = operator new(v14 + 1);
    __p[1] = (void *)v3;
    __p[2] = (void *)(v15 | 0x8000000000000000);
    __p[0] = v7;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v8 = v7;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v7 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v3 < 0x20 || (unint64_t)v7 - a2 < 0x20)
  {
    v8 = v7;
    v9 = (char *)a2;
  }
  else
  {
    v8 = (char *)v7 + (v3 & 0xFFFFFFFFFFFFFFE0);
    v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    v10 = (__int128 *)(a2 + 16);
    v11 = v7 + 1;
    v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  *v8 = 0;
  v17 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v17 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v18, &v17[(_QWORD)v18]);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_212AD8E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BFA0E8](exception, 9);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_212AD8EA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v15 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13)
        goto LABEL_22;
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13)
    operator delete(v13);
  return v11;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BFA0E8](exception, 8);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_212AD9208(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BFA0E8](exception, 7);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_212AD9254(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24CE82A38;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24CE82A38;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 44);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(_QWORD *)(a3 + 16);
  v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    v5 = (v4 - 1);
    v6 = (v3 - 1);
    v7 = *(_QWORD *)(a3 + 24);
    v8 = *(_QWORD *)(a3 + 32);
    v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      v10 = v6;
LABEL_9:
      v13 = v5 - v10;
      v14 = (_BYTE *)(v8 + 24 * v10 + 16);
      do
      {
        *((_QWORD *)v14 - 2) = v7;
        *((_QWORD *)v14 - 1) = v7;
        *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    v11 = v8 + 24 * v6 + 24;
    v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v11 - 24) = v7;
      *(_QWORD *)(v11 - 16) = v7;
      *(_QWORD *)v11 = v7;
      *(_QWORD *)(v11 + 8) = v7;
      *(_BYTE *)(v11 - 8) = 0;
      *(_BYTE *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_9;
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24CE82A38;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24CE82A38;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24CE82A38;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BFA0E8](exception, 15);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_212AD958C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(uint64_t a1, uint64_t a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::basic_regex<char> *v15;
  std::__owns_one_state<char> *v16;
  int v17;
  std::basic_regex<char> *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>((std::basic_regex<char> *)a1, (char *)a2, a3);
  v7 = v6;
  if (v6 != (char *)a2 || v6 == a3)
    return v7;
  if ((char *)(a2 + 1) == a3)
    return (char *)a2;
  if (*(_BYTE *)a2 != 92)
    return (char *)a2;
  v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new(0x18uLL);
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *v10 = &unk_24CE82948;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3)
        goto LABEL_25;
      v15 = v9;
      v16 = *(std::__owns_one_state<char> **)(a1 + 56);
      v17 = *(_DWORD *)(a1 + 28);
      v18 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v15, a3);
      if (v18 == v15)
        break;
      v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v18, (std::basic_regex<char> *)a3, v16, (v17 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v9 != v15);
    if ((char *)&v15->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v15->__traits_.__loc_.__locale_) != 92
      || BYTE1(v15->__traits_.__loc_.__locale_) != 41)
    {
LABEL_25:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    v7 = (char *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 41);
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v19 = operator new(0x18uLL);
      v20 = *(_QWORD *)(a1 + 56);
      v21 = *(_QWORD *)(v20 + 8);
      *v19 = &unk_24CE82990;
      v19[1] = v21;
      *((_DWORD *)v19 + 4) = v11;
      *(_QWORD *)(v20 + 8) = v19;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v7;
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return (char *)a2;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  std::basic_regex<char> *v6;
  int locale_low;
  std::basic_regex<char> *v9;
  int v10;
  int v11;
  std::basic_regex<char> *v12;
  int v13;
  std::basic_regex<char> *v14;
  int v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;

  v6 = this;
  if (this == a3)
    return v6;
  locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)v6 + 1);
  }
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return v6;
  }
  v9 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v9 == a3)
    goto LABEL_43;
  v10 = LOBYTE(v9->__traits_.__loc_.__locale_);
  if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38)
    goto LABEL_43;
  v11 = v10 - 48;
  v12 = (std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_16:
    v12 = a3;
  }
  else
  {
    while (1)
    {
      v13 = LOBYTE(v12->__traits_.__loc_.__locale_);
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38)
        break;
      if (v11 >= 214748364)
        goto LABEL_43;
      v11 = v13 + 10 * v11 - 48;
      v12 = (std::basic_regex<char> *)((char *)v12 + 1);
      if (v12 == a3)
        goto LABEL_16;
    }
  }
  if (v12 == v9)
    goto LABEL_43;
  if (v12 == a3)
    goto LABEL_41;
  v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 1);
  v15 = LOBYTE(v12->__traits_.__loc_.__locale_);
  if (v15 != 44)
  {
    if (v14 != a3 && v15 == 92 && LOBYTE(v14->__traits_.__loc_.__locale_) == 125)
    {
      v19 = (unsigned __int8 *)&v12->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v11, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_41;
  }
  if (v14 == a3)
    goto LABEL_41;
  v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
  if ((v16 & 0xF8) == 0x30 || (v16 & 0xFE) == 0x38)
  {
    v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2) == a3)
      goto LABEL_41;
    v17 = v16 - 48;
    while (1)
    {
      v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
      if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38)
        break;
      if (v17 >= 214748364)
        goto LABEL_43;
      v17 = v16 + 10 * v17 - 48;
      v14 = (std::basic_regex<char> *)((char *)v14 + 1);
      if (v14 == a3)
        goto LABEL_41;
    }
  }
  else
  {
    v17 = -1;
  }
  if (v14 == a3
    || (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1) == a3
    || v16 != 92
    || BYTE1(v14->__traits_.__loc_.__locale_) != 125)
  {
LABEL_41:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  v18 = (unsigned __int8 *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 125);
  if (v17 != -1)
  {
    if (v17 >= v11)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v17, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v18;
    }
LABEL_43:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v5;
  char *v6;
  int v9;
  std::__node<char> *v10;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  v6 = a2 + 1;
  v5 = *a2;
  if (a2 + 1 == a3 && v5 == 36)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
    return a2 + 1;
  }
  else
  {
    if (v6 != a3 && v5 == 92)
    {
      v9 = *v6;
      if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
        return a2 + 2;
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    }
    if (v5 != 46)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    v10 = (std::__node<char> *)operator new(0x10uLL);
    end = this->__end_;
    first = end->__first_;
    v10->__vftable = (std::__node<char>_vtbl *)&unk_24CE82B40;
    v10[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v10;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  std::basic_regex<char> *v8;
  int locale_low;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::basic_regex<char> *v22;
  std::basic_regex<char> *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2
    && (v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(a1, a2, a3), v8 == a2))
  {
    if (a2 != a3 && LOBYTE(a2->__traits_.__loc_.__locale_) == 46)
    {
      v14 = operator new(0x10uLL);
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(v15 + 8);
      *v14 = &unk_24CE82B40;
      v14[1] = v16;
      *(_QWORD *)(v15 + 8) = v14;
LABEL_14:
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, (char *)a2, (char *)a3);
    if (v8 != a2)
      goto LABEL_25;
  }
  else if (v8 != a2)
  {
    goto LABEL_25;
  }
  if (v8 == a3)
  {
LABEL_25:
    if (v8 != a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    return a2;
  }
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v10 = operator new(0x18uLL);
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
      goto LABEL_13;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v19 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v18 = operator new(0x18uLL);
        v19 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v19;
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(v20 + 8);
        *v18 = &unk_24CE82948;
        v18[1] = v21;
        *((_DWORD *)v18 + 4) = v19;
        *(_QWORD *)(v20 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v22 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v22 == a3 || (v23 = v22, LOBYTE(v22->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v24 = operator new(0x18uLL);
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *v24 = &unk_24CE82990;
        v24[1] = v26;
        *((_DWORD *)v24 + 4) = v19;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v8 = (std::basic_regex<char> *)((char *)&v23->__traits_.__loc_.__locale_ + 1);
      goto LABEL_25;
    case '^':
      v10 = operator new(0x18uLL);
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
LABEL_13:
      v17 = *(_QWORD *)(v12 + 8);
      *v10 = v13 + 16;
      v10[1] = v17;
      *((_BYTE *)v10 + 16) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      goto LABEL_14;
  }
  return a2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_)
        return this;
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::basic_regex<char>::value_type *v4;
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type *result;
  _BOOL4 v7;
  uint64_t v8;

  v3 = this;
  if (this == a3)
    return (std::basic_regex<char>::value_type *)v3;
  v4 = (char *)&this->__traits_.__loc_.__locale_ + 1;
  if ((std::basic_regex<char> *)((char *)&v3->__traits_.__loc_.__locale_ + 1) == a3
    || LOBYTE(v3->__traits_.__loc_.__locale_) != 92)
  {
    return (std::basic_regex<char>::value_type *)v3;
  }
  v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      return (char *)v3 + 2;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, (std::basic_regex<char>::value_type *)a3, 0);
      }
      else
      {
        v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        v8 = 2;
        if (!v7)
          v8 = 0;
        result = (char *)v3 + v8;
      }
      break;
  }
  return result;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *this, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  std::vector<std::ssub_match>::pointer begin;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  std::vector<std::ssub_match>::pointer v25;
  std::sub_match<std::__wrap_iter<const char *>> *v26;

  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  begin = this->__begin_;
  end = this->__end_;
  v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      end = (std::vector<std::ssub_match>::pointer)((char *)begin + 8 * ((a4[1] - *a4) >> 3));
      this->__end_ = end;
    }
  }
  else
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v11 - v14);
    begin = this->__begin_;
    end = this->__end_;
  }
  if (end != begin)
  {
    v15 = 0;
    v16 = 0;
    v18 = *a4;
    v17 = a4[1];
    do
    {
      v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      v20 = (_QWORD *)(v18 + v15 * 24);
      if (v19 <= v16)
        v21 = a4 + 3;
      else
        v21 = v20;
      begin[v15].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v21 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16)
        v22 = (uint64_t)(a4 + 3);
      else
        v22 = *a4 + v15 * 24;
      this->__begin_[v15].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *(_QWORD *)(v22 + 8) - v10);
      v18 = *a4;
      v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16)
        v23 = (uint64_t)(a4 + 3);
      else
        v23 = *a4 + v15 * 24;
      v24 = *(_BYTE *)(v23 + 16);
      begin = this->__begin_;
      v25 = this->__end_;
      this->__begin_[v15].matched = v24;
      ++v16;
      ++v15;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)begin) >> 3));
  }
  this[1].__begin_ = a3;
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  v26 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  this[2].__begin_ = v26;
  this[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(this[2].__end_cap_.__value_) = *((_BYTE *)a4 + 64);
  this[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  this[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(this[3].__end_cap_.__value_) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    this[4].__end_ = v26;
  LOBYTE(this[4].__begin_) = *((_BYTE *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::vector<std::pair<unsigned long, const char *>> *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  __int128 v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void **v85;
  void **v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t *v92;
  uint64_t v93;
  char v94;
  _BYTE v97[96];
  __int128 v98;
  __int128 v99;
  __int128 v100;

  v99 = 0u;
  v100 = 0u;
  v98 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    v85 = (void **)*((_QWORD *)&v98 + 1);
    v86 = (void **)v99;
    *((_QWORD *)&v100 + 1) = 0;
    v87 = v99 - *((_QWORD *)&v98 + 1);
    if ((_QWORD)v99 - *((_QWORD *)&v98 + 1) < 0x11uLL)
      goto LABEL_81;
    do
    {
LABEL_80:
      operator delete(*v85);
      v86 = (void **)v99;
      v85 = (void **)(*((_QWORD *)&v98 + 1) + 8);
      *((_QWORD *)&v98 + 1) = v85;
      v87 = v99 - (_QWORD)v85;
    }
    while ((_QWORD)v99 - (_QWORD)v85 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)v97 = 0;
  memset(&v97[8], 0, 85);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v98);
  v11 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (((_QWORD)v100 + *((_QWORD *)&v100 + 1)) / 0x2AuLL))
      + 96 * (((_QWORD)v100 + *((_QWORD *)&v100 + 1)) % 0x2AuLL);
  v12 = *(_OWORD *)&v97[16];
  *(_OWORD *)v11 = *(_OWORD *)v97;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  memset(&v97[32], 0, 24);
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  memset(&v97[56], 0, 24);
  v13 = *(_QWORD *)&v97[80];
  *(_QWORD *)(v11 + 85) = *(_QWORD *)&v97[85];
  *(_QWORD *)(v11 + 80) = v13;
  v15 = *((_QWORD *)&v100 + 1);
  v14 = v100;
  v16 = ++*((_QWORD *)&v100 + 1);
  v17 = *((_QWORD *)&v98 + 1);
  v18 = *(unsigned int *)(a1 + 32);
  v19 = v100 + v15;
  v20 = 8 * (v19 / 0x2A);
  v21 = 96 * (v19 % 0x2A);
  v22 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + v20) + v21;
  *(_DWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 24) = a3;
  v23 = *(_QWORD *)(v17 + v20) + v21;
  v26 = *(_QWORD *)(v23 + 56);
  v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  v25 = v26;
  v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  v92 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27)
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    v16 = *((_QWORD *)&v100 + 1);
    v14 = v100;
    v17 = *((_QWORD *)&v98 + 1);
  }
  v93 = 0;
  v94 = 0;
  v28 = 0;
  v29 = v14 + v16 - 1;
  v30 = 8 * (v29 / 0x2A);
  v31 = 96 * (v29 % 0x2A);
  *(_QWORD *)(*(_QWORD *)(v17 + v30) + v31 + 80) = v6;
  v32 = a3 - a2;
  v33 = *(_QWORD *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(_BYTE *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v35 = v16 + v100 - 1;
    v36 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v35 / 0x2A));
    v37 = v35 % 0x2A;
    v38 = v36 + 96 * (v35 % 0x2A);
    v40 = (_QWORD *)(v38 + 80);
    v39 = *(_QWORD *)(v38 + 80);
    if (v39)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v36 + 96 * v37);
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        v41 = *(_QWORD *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != a3)
          goto LABEL_21;
        v65 = v41 - *(_QWORD *)(v36 + 96 * v37 + 8);
        v66 = v93;
        if ((v94 & (v93 >= v65)) == 0)
          v66 = v65;
        if (v66 == v32)
        {
          v67 = (void **)*((_QWORD *)&v98 + 1);
          v68 = v99;
          if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          {
            *((_QWORD *)&v100 + 1) = 0;
            v82 = 0;
          }
          else
          {
            v69 = (_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * ((unint64_t)v100 / 0x2A));
            v70 = (_QWORD *)(*v69 + 96 * ((unint64_t)v100 % 0x2A));
            v71 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * ((*((_QWORD *)&v100 + 1) + (_QWORD)v100) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v100 + 1) + (_QWORD)v100) % 0x2AuLL);
            if (v70 != (_QWORD *)v71)
            {
              do
              {
                v72 = (void *)v70[7];
                if (v72)
                {
                  v70[8] = v72;
                  operator delete(v72);
                }
                v73 = (void *)v70[4];
                if (v73)
                {
                  v70[5] = v73;
                  operator delete(v73);
                }
                v70 += 12;
                if ((_QWORD *)((char *)v70 - *v69) == (_QWORD *)4032)
                {
                  v74 = (_QWORD *)v69[1];
                  ++v69;
                  v70 = v74;
                }
              }
              while (v70 != (_QWORD *)v71);
              v67 = (void **)*((_QWORD *)&v98 + 1);
              v68 = v99;
            }
            *((_QWORD *)&v100 + 1) = 0;
            v82 = v68 - (_QWORD)v67;
            if (v82 >= 0x11)
            {
              do
              {
                operator delete(*v67);
                v67 = (void **)(*((_QWORD *)&v98 + 1) + 8);
                *((_QWORD *)&v98 + 1) = v67;
                v82 = v99 - (_QWORD)v67;
              }
              while ((_QWORD)v99 - (_QWORD)v67 > 0x10uLL);
            }
          }
          if (v82 >> 3 == 1)
          {
            v83 = 21;
          }
          else
          {
            if (v82 >> 3 != 2)
            {
LABEL_76:
              v94 = 1;
              v93 = a3 - a2;
              goto LABEL_8;
            }
            v83 = 42;
          }
          *(_QWORD *)&v100 = v83;
          goto LABEL_76;
        }
        v93 = v66;
        v75 = *((_QWORD *)&v100 + 1) + v100 - 1;
        v76 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v75 / 0x2A));
        v77 = v75 % 0x2A;
        v78 = *(void **)(v76 + 96 * (v75 % 0x2A) + 56);
        if (v78)
        {
          *(_QWORD *)(v76 + 96 * v77 + 64) = v78;
          operator delete(v78);
        }
        v79 = *(void **)(v76 + 96 * v77 + 32);
        if (v79)
        {
          *(_QWORD *)(v76 + 96 * v77 + 40) = v79;
          operator delete(v79);
        }
        v80 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v81 = v100;
        --*((_QWORD *)&v100 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v80 = 0;
        if ((unint64_t)(v80 - (*((_QWORD *)&v81 + 1) + v81) + 1) >= 0x54)
        {
          operator delete(*(void **)(v99 - 8));
          *(_QWORD *)&v99 = v99 - 8;
        }
        v94 = 1;
LABEL_8:
        v16 = *((_QWORD *)&v100 + 1);
        if (*((_QWORD *)&v100 + 1))
          continue;
        if ((v94 & 1) != 0)
        {
          v84 = *v92;
          *(_QWORD *)v84 = a2;
          *(_QWORD *)(v84 + 8) = a2 + v93;
          v6 = 1;
          *(_BYTE *)(v84 + 16) = 1;
          goto LABEL_79;
        }
        v6 = 0;
        v85 = (void **)*((_QWORD *)&v98 + 1);
        v86 = (void **)v99;
        *((_QWORD *)&v100 + 1) = 0;
        v87 = v99 - *((_QWORD *)&v98 + 1);
        if ((_QWORD)v99 - *((_QWORD *)&v98 + 1) >= 0x11uLL)
          goto LABEL_80;
LABEL_81:
        v88 = v87 >> 3;
        if (v88 == 1)
        {
          v89 = 21;
LABEL_85:
          *(_QWORD *)&v100 = v89;
        }
        else if (v88 == 2)
        {
          v89 = 42;
          goto LABEL_85;
        }
        if (v85 != v86)
        {
          do
          {
            v90 = *v85++;
            operator delete(v90);
          }
          while (v85 != v86);
          if ((_QWORD)v99 != *((_QWORD *)&v98 + 1))
            *(_QWORD *)&v99 = v99 + ((*((_QWORD *)&v98 + 1) - v99 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((_QWORD)v98)
          operator delete((void *)v98);
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        v49 = v100;
        if (!(_QWORD)v100)
        {
          std::deque<std::__state<char>>::__add_front_capacity((uint64_t)&v98);
          v49 = v100;
        }
        v50 = (_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v49 / 0x2A));
        v51 = *v50 + 96 * (v49 % 0x2A);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v51 = 0;
        if (v51 == *v50)
          v51 = *(v50 - 1) + 4032;
        v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        v53 = v36 + 96 * v37;
        *(_QWORD *)(v51 - 56) = 0;
        *(_QWORD *)(v51 - 48) = 0;
        *(_QWORD *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(_QWORD *)(v51 - 48) = *(_QWORD *)(v53 + 48);
        *(_QWORD *)(v53 + 32) = 0;
        *(_QWORD *)(v53 + 40) = 0;
        *(_QWORD *)(v53 + 48) = 0;
        *(_QWORD *)(v51 - 40) = 0;
        *(_QWORD *)(v51 - 32) = 0;
        *(_QWORD *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(_QWORD *)(v51 - 24) = *(_QWORD *)(v53 + 72);
        *(_QWORD *)(v53 + 56) = 0;
        *(_QWORD *)(v53 + 64) = 0;
        *(_QWORD *)(v53 + 72) = 0;
        v54 = *v40;
        *(_QWORD *)(v51 - 11) = *(_QWORD *)(v38 + 85);
        *(_QWORD *)(v51 - 16) = v54;
        v55 = *((_QWORD *)&v100 + 1);
        *(_QWORD *)&v100 = v100 - 1;
        ++*((_QWORD *)&v100 + 1);
        v56 = v55 + v100;
        v57 = (v55 + (uint64_t)v100) / 0x2AuLL;
        v43 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * v57);
        v44 = v56 - 42 * v57;
        v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45)
          goto LABEL_23;
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        v42 = *((_QWORD *)&v100 + 1) + v100 - 1;
        v43 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v42 / 0x2A));
        v44 = v42 % 0x2A;
        v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(_QWORD *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(_QWORD *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        v47 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v48 = v100;
        --*((_QWORD *)&v100 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v47 = 0;
        if ((unint64_t)(v47 - (*((_QWORD *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v99 - 8));
          *(_QWORD *)&v99 = v99 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v97[64] = v58;
        *(_OWORD *)&v97[80] = v58;
        *(_OWORD *)&v97[32] = v58;
        *(_OWORD *)&v97[48] = v58;
        *(_OWORD *)v97 = v58;
        *(_OWORD *)&v97[16] = v58;
        std::__state<char>::__state((uint64_t)v97, (__int128 *)(v36 + 96 * v37));
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v97[80] + 24))(*(_QWORD *)&v97[80], 0, v97);
        v59 = *((_QWORD *)&v98 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v60 = 0;
        else
          v60 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v61 = *((_QWORD *)&v100 + 1) + v100;
        if (v60 == *((_QWORD *)&v100 + 1) + (_QWORD)v100)
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v98);
          v59 = *((_QWORD *)&v98 + 1);
          v61 = *((_QWORD *)&v100 + 1) + v100;
        }
        v62 = *(_QWORD *)(v59 + 8 * (v61 / 0x2A)) + 96 * (v61 % 0x2A);
        v63 = *(_OWORD *)&v97[16];
        *(_OWORD *)v62 = *(_OWORD *)v97;
        *(_OWORD *)(v62 + 16) = v63;
        *(_QWORD *)(v62 + 40) = 0;
        *(_QWORD *)(v62 + 48) = 0;
        *(_QWORD *)(v62 + 32) = 0;
        *(_OWORD *)(v62 + 32) = *(_OWORD *)&v97[32];
        *(_QWORD *)(v62 + 48) = *(_QWORD *)&v97[48];
        memset(&v97[32], 0, 24);
        *(_QWORD *)(v62 + 56) = 0;
        *(_QWORD *)(v62 + 64) = 0;
        *(_QWORD *)(v62 + 72) = 0;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)&v97[56];
        *(_QWORD *)(v62 + 72) = *(_QWORD *)&v97[72];
        memset(&v97[56], 0, 24);
        v64 = *(_QWORD *)&v97[80];
        *(_QWORD *)(v62 + 85) = *(_QWORD *)&v97[85];
        *(_QWORD *)(v62 + 80) = v64;
        ++*((_QWORD *)&v100 + 1);
        if (*(_QWORD *)&v97[56])
        {
          *(_QWORD *)&v97[64] = *(_QWORD *)&v97[56];
          operator delete(*(void **)&v97[56]);
        }
        if (*(_QWORD *)&v97[32])
        {
          *(_QWORD *)&v97[40] = *(_QWORD *)&v97[32];
          operator delete(*(void **)&v97[32]);
        }
        goto LABEL_8;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_212ADAAAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_212ADAAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::__state<char>::~__state((uint64_t *)va);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v11 - 144));
  _Unwind_Resume(a1);
}

void sub_212ADAB08(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_212ADAB1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  const char *v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  char *v24;
  const char *v25;
  char *v26;
  void *v27;
  void *v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  void *v55;
  uint64_t *v57;
  const char *v58;
  const char *v59;
  char v60;
  _BYTE v62[96];
  std::vector<std::csub_match>::value_type __x;
  _BYTE v64[40];
  void *v65[2];
  _BYTE v66[40];
  char *v67;
  char *v68;
  unint64_t v69;

  v67 = 0;
  v68 = 0;
  v69 = 0;
  *(_DWORD *)&v66[36] = -1431655766;
  *(_QWORD *)v64 = 0xAAAAAAAA00000000;
  memset(&v64[8], 0, 32);
  *(_OWORD *)v65 = 0u;
  memset(v66, 0, 36);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_63;
  __x.second = a3;
  *(_QWORD *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)v62 = 0;
  memset(&v62[8], 0, 85);
  v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
  if (*(_QWORD *)&v62[56])
  {
    *(_QWORD *)&v62[64] = *(_QWORD *)&v62[56];
    operator delete(*(void **)&v62[56]);
  }
  if (*(_QWORD *)&v62[32])
  {
    *(_QWORD *)&v62[40] = *(_QWORD *)&v62[32];
    operator delete(*(void **)&v62[32]);
  }
  v12 = v68;
  *((_DWORD *)v68 - 24) = 0;
  *((_QWORD *)v12 - 11) = a2;
  *((_QWORD *)v12 - 10) = a2;
  *((_QWORD *)v12 - 9) = a3;
  v13 = *((_QWORD *)v12 - 8);
  v14 = *(unsigned int *)(a1 + 28);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v12 - 7) - v13) >> 3);
  if (v14 <= v15)
  {
    if (v14 < v15)
      *((_QWORD *)v12 - 7) = v13 + 24 * v14;
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v12 - 64), v14 - v15, &__x);
    v12 = v68;
  }
  v16 = *((_QWORD *)v12 - 5);
  v17 = *(unsigned int *)(a1 + 32);
  v18 = (*((_QWORD *)v12 - 4) - v16) >> 4;
  v57 = a4;
  if (v17 <= v18)
  {
    if (v17 < v18)
      *((_QWORD *)v12 - 4) = v16 + 16 * v17;
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v12 - 40), v17 - v18);
    v12 = v68;
  }
  v60 = 0;
  v19 = 0;
  v20 = (const char *)(a3 - a2);
  *((_QWORD *)v12 - 2) = v6;
  *((_DWORD *)v12 - 2) = a5;
  v59 = 0;
  *(v12 - 4) = a6;
  v58 = a3;
  do
  {
    v21 = (++v19 & 0xFFF) != 0 || (int)(v19 >> 12) < (int)v20;
    if (!v21)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v23 = v12 - 16;
    v22 = *((_QWORD *)v12 - 2);
    v24 = v12 - 96;
    if (v22)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v12 - 96);
    switch(*(_DWORD *)v24)
    {
      case 0xFFFFFC18:
        v25 = (const char *)*((_QWORD *)v12 - 10);
        if ((a5 & 0x20) != 0 && v25 == a2 || (a5 & 0x1000) != 0 && v25 != v58)
          goto LABEL_29;
        v33 = &v25[-*((_QWORD *)v12 - 11)];
        v34 = v59;
        if ((v60 & ((uint64_t)v59 >= (uint64_t)v33)) == 0)
        {
          v35 = *((_OWORD *)v12 - 5);
          *(_OWORD *)v64 = *(_OWORD *)v24;
          *(_OWORD *)&v64[16] = v35;
          if (v64 != v24)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char **)&v64[32], *((char **)v12 - 8), *((char **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((uint64_t)v66, *((const double **)v12 - 5), *((const double **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          }
          v36 = *(_QWORD *)v23;
          *(_QWORD *)&v66[29] = *(_QWORD *)(v12 - 11);
          *(_QWORD *)&v66[24] = v36;
          v34 = v33;
        }
        v37 = v68;
        if (v34 == v20)
        {
          v38 = v67;
          while (v37 != v38)
          {
            v39 = (void *)*((_QWORD *)v37 - 5);
            if (v39)
            {
              *((_QWORD *)v37 - 4) = v39;
              operator delete(v39);
            }
            v40 = (void *)*((_QWORD *)v37 - 8);
            if (v40)
            {
              *((_QWORD *)v37 - 7) = v40;
              operator delete(v40);
            }
            v37 -= 96;
          }
          v68 = v38;
          v60 = 1;
          v59 = v20;
        }
        else
        {
          v59 = v34;
          v41 = (void *)*((_QWORD *)v68 - 5);
          if (v41)
          {
            *((_QWORD *)v68 - 4) = v41;
            operator delete(v41);
          }
          v42 = (void *)*((_QWORD *)v37 - 8);
          if (v42)
          {
            *((_QWORD *)v37 - 7) = v42;
            operator delete(v42);
          }
          v68 = v37 - 96;
          v60 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        v26 = v68;
        v27 = (void *)*((_QWORD *)v68 - 5);
        if (v27)
        {
          *((_QWORD *)v68 - 4) = v27;
          operator delete(v27);
        }
        v28 = (void *)*((_QWORD *)v26 - 8);
        if (v28)
        {
          *((_QWORD *)v26 - 7) = v28;
          operator delete(v28);
        }
        v68 = v26 - 96;
        break;
      case 0xFFFFFC20:
        *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v62[64] = v29;
        *(_OWORD *)&v62[80] = v29;
        *(_OWORD *)&v62[32] = v29;
        *(_OWORD *)&v62[48] = v29;
        *(_OWORD *)v62 = v29;
        *(_OWORD *)&v62[16] = v29;
        std::__state<char>::__state((uint64_t)v62, (__int128 *)v12 - 6);
        (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v23 + 24))(*(_QWORD *)v23, 1, v12 - 96);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v62[80] + 24))(*(_QWORD *)&v62[80], 0, v62);
        v30 = v68;
        if ((unint64_t)v68 >= v69)
        {
          v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
          if (*(_QWORD *)&v62[56])
          {
            *(_QWORD *)&v62[64] = *(_QWORD *)&v62[56];
            operator delete(*(void **)&v62[56]);
          }
        }
        else
        {
          v31 = *(_OWORD *)&v62[16];
          *(_OWORD *)v68 = *(_OWORD *)v62;
          *((_OWORD *)v30 + 1) = v31;
          *((_QWORD *)v30 + 4) = 0;
          *((_QWORD *)v30 + 5) = 0;
          *((_QWORD *)v30 + 6) = 0;
          *((_QWORD *)v30 + 7) = 0;
          *((_OWORD *)v30 + 2) = *(_OWORD *)&v62[32];
          *((_QWORD *)v30 + 6) = *(_QWORD *)&v62[48];
          memset(&v62[32], 0, 24);
          *((_QWORD *)v30 + 8) = 0;
          *((_QWORD *)v30 + 9) = 0;
          *(_OWORD *)(v30 + 56) = *(_OWORD *)&v62[56];
          *((_QWORD *)v30 + 9) = *(_QWORD *)&v62[72];
          memset(&v62[56], 0, 24);
          v32 = *(_QWORD *)&v62[80];
          *(_QWORD *)(v30 + 85) = *(_QWORD *)&v62[85];
          *((_QWORD *)v30 + 10) = v32;
          v68 = v30 + 96;
        }
        if (*(_QWORD *)&v62[32])
        {
          *(_QWORD *)&v62[40] = *(_QWORD *)&v62[32];
          operator delete(*(void **)&v62[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    v12 = v68;
  }
  while (v67 != v68);
  if ((v60 & 1) == 0)
  {
LABEL_63:
    v49 = 0;
    v50 = *(void **)v66;
    if (!*(_QWORD *)v66)
      goto LABEL_65;
    goto LABEL_64;
  }
  v43 = *v57;
  *(_QWORD *)v43 = a2;
  *(_QWORD *)(v43 + 8) = &v59[(_QWORD)a2];
  *(_BYTE *)(v43 + 16) = 1;
  if (v65[0] != *(void **)&v64[32])
  {
    v44 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v65[0] - *(_QWORD *)&v64[32]) >> 3);
    v45 = (_BYTE *)(*(_QWORD *)&v64[32] + 16);
    v46 = 1;
    do
    {
      v47 = v43 + 24 * v46;
      *(_OWORD *)v47 = *((_OWORD *)v45 - 1);
      v48 = *v45;
      v45 += 24;
      *(_BYTE *)(v47 + 16) = v48;
      v21 = v44 > v46++;
    }
    while (v21);
  }
  v49 = 1;
  v50 = *(void **)v66;
  if (*(_QWORD *)v66)
  {
LABEL_64:
    *(_QWORD *)&v66[8] = v50;
    operator delete(v50);
  }
LABEL_65:
  if (*(_QWORD *)&v64[32])
  {
    v65[0] = *(void **)&v64[32];
    operator delete(*(void **)&v64[32]);
  }
  v51 = v67;
  if (v67)
  {
    v52 = v68;
    v53 = v67;
    if (v68 != v67)
    {
      do
      {
        v54 = (void *)*((_QWORD *)v52 - 5);
        if (v54)
        {
          *((_QWORD *)v52 - 4) = v54;
          operator delete(v54);
        }
        v55 = (void *)*((_QWORD *)v52 - 8);
        if (v55)
        {
          *((_QWORD *)v52 - 7) = v55;
          operator delete(v55);
        }
        v52 -= 96;
      }
      while (v52 != v51);
      v53 = v67;
    }
    v68 = v51;
    operator delete(v53);
  }
  return v49;
}

void sub_212ADB0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__state<char>::~__state(&a35);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v35 - 120));
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::clear(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v11 = 0;
  }
  else
  {
    v4 = a1[4];
    v5 = &v2[v4 / 0x2A];
    v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 + 7);
        if (v8)
        {
          *((_QWORD *)v6 + 8) = v8;
          operator delete(v8);
        }
        v9 = (void *)*((_QWORD *)v6 + 4);
        if (v9)
        {
          *((_QWORD *)v6 + 5) = v9;
          operator delete(v9);
        }
        v6 += 96;
        if (v6 - (_BYTE *)*v5 == 4032)
        {
          v10 = (char *)v5[1];
          ++v5;
          v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
    a1[5] = 0;
    v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v12 = a1[2];
        v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        v11 = v12 - (_QWORD)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2)
      return;
    v13 = 42;
  }
  a1[4] = v13;
}

void **std::deque<std::__state<char>>::~deque[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  _BYTE *v5;
  _BYTE *v6;

  std::deque<std::__state<char>>::clear(a1);
  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    v6 = a1[1];
    v5 = a1[2];
    if (v5 != v6)
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  BOOL v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v32 = (v5 - v9) >> 2;
      if (v5 == v9)
        v32 = 1;
      if (!(v32 >> 61))
      {
        v33 = v32 >> 2;
        v34 = 8 * v32;
        v35 = (char *)operator new(8 * v32);
        v36 = &v35[8 * v33];
        v37 = &v35[v34];
        v39 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            v73 = &v35[8 * v33];
            v41 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v40 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v41 = &v36[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v41 = &v35[8 * v33];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v41 = v80;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v89);
      return;
    }
    v89 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v89);
    v42 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v42 + 1);
    v8 = *v42;
    *(_QWORD *)(a1 + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v43 = (v5 - v9) >> 2;
      if (v5 == v9)
        v43 = 1;
      if (!(v43 >> 61))
      {
        v44 = v43 >> 2;
        v45 = 8 * v43;
        v35 = (char *)operator new(8 * v43);
        v36 = &v35[8 * v44];
        v37 = &v35[v45];
        v46 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            v81 = &v35[8 * v44];
            v48 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v47 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v48 = &v36[v83];
              v7 += v83;
              v84 = (__int128 *)(v42 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v48 = &v35[8 * v44];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v48 = v88;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v35;
        *(_QWORD *)(a1 + 8) = v36;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFC0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v30 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v49 = 1;
      else
        v49 = v20 >> 2;
      if (v49 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v27 = (char *)operator new(8 * v49);
      v28 = &v27[8 * v49];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v27;
      *(_QWORD *)v27 = v30;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v31 = v21 + 2;
      if (v21 >= -1)
        v31 = v21 + 1;
      v27 -= 8 * (v31 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    goto LABEL_49;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_49:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v25)
            v57 = 1;
          else
            v57 = (v28 - v25) >> 2;
          if (v57 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v58 = (char *)operator new(8 * v57);
          v59 = v58;
          v60 = (v57 + 3) >> 2;
          v27 = &v58[8 * v60];
          v61 = v29 - v25;
          v38 = v29 == v25;
          v29 = v27;
          if (!v38)
          {
            v29 = &v27[v61 & 0xFFFFFFFFFFFFFFF8];
            v62 = v61 - 8;
            v63 = &v58[8 * v60];
            v64 = v25;
            if (v62 < 0x38)
              goto LABEL_89;
            v65 = 8 * v60;
            v63 = &v58[8 * v60];
            v64 = v25;
            if ((unint64_t)(v63 - v25) < 0x20)
              goto LABEL_89;
            v66 = (v62 >> 3) + 1;
            v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            v63 = &v27[v67];
            v64 = &v25[v67];
            v68 = (__int128 *)(v25 + 16);
            v69 = &v58[v65 + 16];
            v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v71 = *v68;
              *((_OWORD *)v69 - 1) = *(v68 - 1);
              *(_OWORD *)v69 = v71;
              v68 += 2;
              v69 += 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_89:
              do
              {
                v72 = *(_QWORD *)v64;
                v64 += 8;
                *(_QWORD *)v63 = v72;
                v63 += 8;
              }
              while (v63 != v29);
            }
          }
          v28 = &v58[8 * v57];
          operator delete(v25);
          v25 = v59;
        }
        else
        {
          v53 = (v28 - v29) >> 3;
          if (v53 >= -1)
            v54 = v53 + 1;
          else
            v54 = v53 + 2;
          v55 = v54 >> 1;
          v27 = &v25[8 * (v54 >> 1)];
          v56 = v25;
          if (v29 != v25)
          {
            memmove(v27, v25, v29 - v25);
            v56 = v29;
          }
          v29 = (char *)v56 + 8 * v55;
        }
      }
      v52 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v27 - 1) = v52;
      v27 -= 8;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
  }
LABEL_45:
  v51 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v51)
    operator delete(v51);
}

void sub_212ADB84C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<std::__state<char>>::__add_front_capacity(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  BOOL v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  void *v46;
  void *v47;

  v3 = *(uint64_t **)(a1 + 8);
  v2 = *(uint64_t **)(a1 + 16);
  v4 = v2 - v3;
  if (v2 == v3)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v5 - (*(_QWORD *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(_QWORD *)(a1 + 32) = v6 + 42;
    v47 = (void *)*(v2 - 1);
    *(_QWORD *)(a1 + 16) = v2 - 1;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
    return;
  }
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(uint64_t **)a1;
  v9 = (uint64_t)v7 - *(_QWORD *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v47);
      v43 = *(_QWORD *)(a1 + 16);
      v47 = *(void **)(v43 - 8);
      *(_QWORD *)(a1 + 16) = v43 - 8;
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
        goto LABEL_9;
    }
    else
    {
      v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
      {
LABEL_9:
        v10 = 21;
LABEL_45:
        *(_QWORD *)(a1 + 32) = v10;
        return;
      }
    }
    v10 = *(_QWORD *)(a1 + 32) + 42;
    goto LABEL_45;
  }
  if (v7 == v8)
    v11 = 1;
  else
    v11 = v9 >> 2;
  if (v11 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v12 = (char *)operator new(8 * v11);
  v13 = operator new(0xFC0uLL);
  v14 = v13;
  if (v11)
  {
    v15 = &v12[8 * v11];
    *(_QWORD *)v12 = v13;
    v16 = v12 + 8;
    if (v3 != v2)
    {
LABEL_16:
      v17 = v12;
      while (1)
      {
        if (v16 == v15)
        {
          if (v17 <= v12)
          {
            if (v16 == v12)
              v26 = 1;
            else
              v26 = (v16 - v12) >> 2;
            if (v26 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v27 = (char *)operator new(8 * v26);
            v28 = v27;
            v29 = v26 >> 2;
            v18 = &v27[8 * (v26 >> 2)];
            v31 = v16 - v17;
            v30 = v16 == v17;
            v16 = v18;
            if (!v30)
            {
              v16 = &v18[v31 & 0xFFFFFFFFFFFFFFF8];
              v32 = v31 - 8;
              if (v32 < 0x38 || (v33 = 8 * v29, (unint64_t)(&v27[8 * v29] - v17) < 0x20))
              {
                v34 = &v27[8 * (v26 >> 2)];
                v35 = v17;
                goto LABEL_35;
              }
              v37 = (v32 >> 3) + 1;
              v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
              v34 = &v18[v38];
              v35 = &v17[v38];
              v39 = (__int128 *)(v17 + 16);
              v40 = &v27[v33 + 16];
              v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v42 = *v39;
                *((_OWORD *)v40 - 1) = *(v39 - 1);
                *(_OWORD *)v40 = v42;
                v39 += 2;
                v40 += 32;
                v41 -= 4;
              }
              while (v41);
              if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_35:
                  v36 = *(_QWORD *)v35;
                  v35 += 8;
                  *(_QWORD *)v34 = v36;
                  v34 += 8;
                }
                while (v34 != v16);
              }
            }
            v15 = &v27[8 * v26];
            if (v12)
              operator delete(v12);
            v12 = v28;
            goto LABEL_18;
          }
          v20 = (v17 - v12) >> 3;
          if (v20 >= -1)
            v21 = v20 + 1;
          else
            v21 = v20 + 2;
          v22 = v21 >> 1;
          v23 = &v17[-8 * (v21 >> 1)];
          v24 = v16;
          if (v16 != v17)
          {
            memmove(v23, v17, v16 - v17);
            v24 = v17;
          }
          v25 = -v22;
          v15 = v16;
          v16 = &v23[v16 - v17];
          v18 = &v24[8 * v25];
        }
        else
        {
          v18 = v17;
        }
LABEL_18:
        v19 = *v3++;
        *(_QWORD *)v16 = v19;
        v16 += 8;
        v17 = v18;
        if (v3 == *(uint64_t **)(a1 + 16))
          goto LABEL_48;
      }
    }
  }
  else
  {
    v44 = (char *)operator new(8uLL);
    v15 = v44 + 8;
    operator delete(v12);
    v3 = *(uint64_t **)(a1 + 8);
    v45 = *(uint64_t **)(a1 + 16);
    v12 = v44;
    *(_QWORD *)v44 = v14;
    v16 = v44 + 8;
    if (v3 != v45)
      goto LABEL_16;
  }
  v18 = v12;
LABEL_48:
  v46 = *(void **)a1;
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 24) = v15;
  if (v16 - v18 == 8)
  {
    *(_QWORD *)(a1 + 32) = 21;
    if (v46)
LABEL_50:
      operator delete(v46);
  }
  else
  {
    *(_QWORD *)(a1 + 32) += 42;
    if (v46)
      goto LABEL_50;
  }
}

void sub_212ADBF00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char **a1, char *a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v18 = a1[1];
    v17 = a1 + 1;
    v14 = v18;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_OWORD *)v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      v16 = v24 - result;
      v14 = result;
    }
    else
    {
      v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      v21 = v14;
      if (v20 != a3)
      {
        v22 = v14;
        do
        {
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v13 = 24 * v12;
    result = (char *)operator new(24 * v12);
    v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    v16 = v15 - v14;
    v17 = a1 + 1;
  }
  *v17 = &v14[v16];
  return result;
}

double *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8;
  double *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  int64_t v15;
  _QWORD *v16;
  double *v17;
  int64_t v18;
  unint64_t v19;
  const double *v20;
  unint64_t v21;
  double *v22;
  const double *v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  __int128 v28;
  unint64_t v29;
  char *v30;
  const double *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  BOOL v37;
  char v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  const double *v42;
  double *v43;
  uint64_t v44;
  const double *v45;
  double *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  const double *v56;
  double *v57;
  uint64_t v58;
  const double *v59;
  double *v60;
  float64x2x2_t v61;
  float64x2x2_t v62;
  float64x2x2_t v63;
  float64x2x2_t v64;

  v8 = *(_QWORD *)(a1 + 16);
  result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_62;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37)
      v11 = v10;
    if (v11 >> 60)
LABEL_62:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = 2 * v11;
    result = (double *)operator new(16 * v11);
    v13 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v14 = result;
    if (a2 != a3)
    {
      result = (double *)memcpy(result, a2, ((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0);
      v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0));
    }
    v15 = (char *)v14 - (char *)v13;
    v16 = (_QWORD *)(a1 + 8);
    goto LABEL_29;
  }
  v17 = *(double **)(a1 + 8);
  v16 = (_QWORD *)(a1 + 8);
  v13 = v17;
  v18 = (char *)v17 - (char *)result;
  v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      v30 = (char *)result;
    }
    else
    {
      v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             v48 = (char *)result + v47,
             v49 = (unint64_t)a2 + v47,
             v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (v51 = 1),
            v51 ? (v52 = 0) : (v52 = 1),
            v48 > (char *)a2 ? (v53 = (unint64_t)result >= v49) : (v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        v30 = (char *)result;
        v31 = a2;
      }
      else
      {
        v54 = (v29 >> 4) + 1;
        v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        v30 = (char *)&result[v55];
        v31 = &a2[v55];
        v56 = a2 + 4;
        v57 = result + 4;
        v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = v56 - 4;
          v62 = vld2q_f64(v59);
          v64 = vld2q_f64(v56);
          v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
      do
      {
        v32 = *(_QWORD *)v31;
        v33 = *((_QWORD *)v31 + 1);
        v31 += 2;
        *(_QWORD *)v30 = v32;
        *((_QWORD *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    v15 = v30 - (char *)result;
    v13 = result;
    goto LABEL_29;
  }
  v20 = &a2[2 * v19];
  if (v13 != result)
  {
    v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           v35 = (char *)result + v34 - 8,
           v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (v37 = 1),
          v37 ? (v38 = 0) : (v38 = 1),
          v35 > (char *)a2 ? (v39 = (unint64_t)result >= v36) : (v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      v22 = result;
      v23 = a2;
    }
    else
    {
      v40 = (v21 >> 4) + 1;
      v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      v22 = &result[v41];
      v23 = &a2[v41];
      v42 = a2 + 4;
      v43 = result + 4;
      v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v45 = v42 - 4;
        v61 = vld2q_f64(v45);
        v63 = vld2q_f64(v42);
        v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_18;
    }
    do
    {
      v24 = *(_QWORD *)v23;
      v25 = *((_QWORD *)v23 + 1);
      v23 += 2;
      *(_QWORD *)v22 = v24;
      *((_QWORD *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  v26 = v13;
  if (v20 != a3)
  {
    v27 = v13;
    do
    {
      v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  v15 = (char *)v26 - (char *)v13;
LABEL_29:
  *v16 = (char *)v13 + v15;
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::sub_match<std::__wrap_iter<const char *>> *value;
  std::vector<std::ssub_match>::pointer end;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::sub_match<std::__wrap_iter<const char *>> *v11;
  std::vector<std::ssub_match>::size_type v12;
  std::sub_match<std::__wrap_iter<const char *>> *v13;
  std::vector<std::ssub_match>::size_type v14;
  std::sub_match<std::__wrap_iter<const char *>> *v15;
  std::sub_match<std::__wrap_iter<const char *>> *v16;
  std::vector<std::ssub_match>::pointer begin;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v11 = &end[__n];
      v12 = 24 * __n;
      do
      {
        end->first.__i_ = 0;
        end->second.__i_ = 0;
        end->matched = 0;
        ++end;
        v12 -= 24;
      }
      while (v12);
      end = v11;
    }
    this->__end_ = end;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v7 = v6 + __n;
    if (v6 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v6];
    v14 = 24 * __n;
    v15 = &v13[__n];
    v16 = v13;
    do
    {
      v16->first.__i_ = 0;
      v16->second.__i_ = 0;
      v16->matched = 0;
      ++v16;
      v14 -= 24;
    }
    while (v14);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v18 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(_QWORD *)&v13[-1].matched = *(_QWORD *)&end[-1].matched;
        v13[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v18;
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v9];
    if (end)
      operator delete(end);
  }
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(std::regex_iterator<std::__wrap_iter<const char *>, char> *this)
{
  std::sub_match<std::__wrap_iter<const char *>> *begin;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  int i;
  unsigned __int32 flags;
  std::match_results<std::__wrap_iter<const char *>>::value_type *p_unmatched;
  std::sub_match<const char *> *v7;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *pregex;
  std::sub_match<const char *> *v9;
  __int128 v10;
  char v11;
  std::sub_match<const char *> *v13;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *v14;
  __int128 v15;
  char v16;
  _BYTE __p[40];
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  p_match = &this->__match_;
  begin = this->__match_.__matches_.__begin_;
  i = (int)p_match[-1].__position_start_.__i_;
  flags = i | 0x800;
  LODWORD(p_match[-1].__position_start_.__i_) = i | 0x800;
  if (p_match->__matches_.__end_ == begin)
    p_unmatched = &p_match->__unmatched_;
  else
    p_unmatched = begin;
  v7 = (std::sub_match<const char *> *)p_unmatched->second.__i_;
  if ((std::sub_match<const char *> *)p_unmatched->first.__i_ != v7)
  {
LABEL_5:
    this->__flags_ = flags | 0x80;
    v9 = (std::sub_match<const char *> *)this->__end_.__i_;
    pregex = this->__pregex_;
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v18 = 0xAAAAAAAAAAAAAAAALL;
    v20 = 0xAAAAAAAAAAAAAA00;
    v22 = v10;
    v19 = 0;
    v21 = 0uLL;
    LOBYTE(v22) = 0;
    BYTE8(v22) = 0;
    v23 = 0;
    memset(__p, 0, sizeof(__p));
    v11 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)pregex, v7, v9, (std::vector<std::csub_match> *)__p, flags | 0x80);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const char *>> *)v9, (uint64_t *)__p, (flags & 0x800) != 0);
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
    if ((v11 & 1) == 0)
    {
      begin = p_match->__matches_.__begin_;
      if (!p_match->__matches_.__begin_)
      {
LABEL_10:
        this->__match_.__ready_ = 0;
        *(_OWORD *)&p_match->__matches_.__begin_ = 0u;
        *(_OWORD *)&p_match->__matches_.__end_cap_.__value_ = 0u;
        *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&p_match->__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                                     + 1) = 0u;
        this->__match_.__prefix_.first.__i_ = 0;
        this->__match_.__prefix_.second.__i_ = 0;
        this->__match_.__prefix_.matched = 0;
        this->__match_.__suffix_.first.__i_ = 0;
        this->__match_.__suffix_.second.__i_ = 0;
        this->__match_.__suffix_.matched = 0;
        this->__match_.__position_start_.__i_ = 0;
        return this;
      }
LABEL_9:
      this->__match_.__matches_.__end_ = begin;
      operator delete(begin);
      p_match->__matches_.__begin_ = 0;
      p_match->__matches_.__end_ = 0;
      p_match->__matches_.__end_cap_.__value_ = 0;
      goto LABEL_10;
    }
    return this;
  }
  v13 = (std::sub_match<const char *> *)this->__end_.__i_;
  if (v13 == v7)
  {
    if (!begin)
      goto LABEL_10;
    goto LABEL_9;
  }
  v14 = this->__pregex_;
  *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  v20 = 0xAAAAAAAAAAAAAA00;
  v22 = v15;
  v19 = 0;
  v21 = 0uLL;
  LOBYTE(v22) = 0;
  BYTE8(v22) = 0;
  v23 = 0;
  memset(__p, 0, sizeof(__p));
  v16 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v14, v7, v13, (std::vector<std::csub_match> *)__p, i | 0x860u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const char *>> *)v13, (uint64_t *)__p, 1);
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  if ((v16 & 1) == 0)
  {
    v7 = (std::sub_match<const char *> *)((char *)v7 + 1);
    flags = this->__flags_;
    goto LABEL_5;
  }
  return this;
}

void sub_212ADC764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(uint64_t a1, uint64_t a2, int a3)
{
  const std::locale *v6;
  uint64_t v7;
  char *v8;

  v6 = (const std::locale *)MEMORY[0x212BFA37C]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x24BEDB350]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x24BEDB4B0]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (char *)a2;
  else
    v8 = *(char **)a2;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (&v8[v7] != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(a1, v8, &v8[v7]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_212ADC82C(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_212ADC848(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int v12;

  v6 = operator new(8uLL);
  *v6 = &unk_24CE82498;
  v7 = operator new(0x10uLL);
  v7[1] = v6;
  v8 = operator new(0x20uLL);
  *v8 = &unk_24CE824F0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (!v9)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    v12 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v12 <= 0x3F)
    {
LABEL_6:
      if (!v12)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      if (v12 != 16)
      {
        if (v12 != 32)
LABEL_19:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
        return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, a3);
    }
  }
  else
  {
LABEL_5:
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    v12 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v12 <= 0x3F)
      goto LABEL_6;
  }
  if (v12 == 64)
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  if (v12 == 128)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v12 != 256)
    goto LABEL_19;
  return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
}

void sub_212ADCA10(_Unwind_Exception *a1)
{
  void *v1;
  void (__cdecl ***v2)(std::__owns_one_state<char> *__hidden);

  operator delete(v1);
  operator delete(v2);
  (*(void (**)(void *))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_212ADCA4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  std::basic_regex<char> *v8;
  std::__owns_one_state<char> *v9;
  unsigned int marked_count;
  std::basic_regex<char> *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  std::__node<char> *v15;
  std::__node<char> *v16;
  std::__node<char> *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;
  std::__node<char> *v20;
  std::__owns_one_state<char> *v21;
  std::basic_regex<char> *v22;
  char *v23;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  std::basic_regex<char> *v26;
  std::__node<char> *v27;
  std::__owns_one_state<char> *v28;
  std::__node<char> *v29;

  end = a1->__end_;
  v7 = a2;
  while (1)
  {
    v8 = (std::basic_regex<char> *)v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v7, a3);
    if (v8 == (std::basic_regex<char> *)v7)
      break;
LABEL_2:
    if (v7 == (char *)v8)
      goto LABEL_6;
  }
  v9 = a1->__end_;
  marked_count = a1->__marked_count_;
  v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
  if (v8 != v11)
  {
    v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 != (std::basic_regex<char> *)a2)
  {
    if (v8 != (std::basic_regex<char> *)a3)
      goto LABEL_14;
    return a3;
  }
  v12 = (std::__node<char> *)operator new(0x10uLL);
  v13 = a1->__end_;
  first = v13->__first_;
  v12[1].__vftable = (std::__node<char>_vtbl *)first;
  v13->__first_ = v12;
  a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  if (v8 != (std::basic_regex<char> *)a3)
  {
LABEL_14:
    if (LOBYTE(v8->__traits_.__loc_.__locale_) != 124)
      return (char *)v8;
    v21 = a1->__end_;
    v22 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v23 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (1)
    {
      v8 = (std::basic_regex<char> *)v23;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v23, a3);
      if (v8 == (std::basic_regex<char> *)v23)
      {
        v24 = a1->__end_;
        v25 = a1->__marked_count_;
        v26 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
        if (v8 == v26)
        {
LABEL_11:
          if (v8 == v22)
          {
            v27 = (std::__node<char> *)operator new(0x10uLL);
            v28 = a1->__end_;
            v29 = v28->__first_;
            v27[1].__vftable = (std::__node<char>_vtbl *)v29;
            v28->__first_ = v27;
            a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          }
          v15 = (std::__node<char> *)operator new(0x18uLL);
          v16 = v21->__first_;
          v15[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
          v15[2].__vftable = (std::__node<char>_vtbl *)v16;
          v15->__vftable = (std::__node<char>_vtbl *)&unk_24CE82AB0;
          end->__first_ = v15;
          v21->__first_ = 0;
          v17 = (std::__node<char> *)operator new(0x10uLL);
          v18 = a1->__end_->__first_;
          v17[1].__vftable = (std::__node<char>_vtbl *)v18;
          v21->__first_ = v17;
          a1->__end_->__first_ = 0;
          v19 = (std::__node<char> *)operator new(0x10uLL);
          v20 = v21->__first_;
          v19->__vftable = (std::__node<char>_vtbl *)&unk_24CE82AF8;
          v19[1].__vftable = (std::__node<char>_vtbl *)v20;
          a1->__end_->__first_ = v19;
          a1->__end_ = (std::__owns_one_state<char> *)v21->__first_;
          if (v8 == (std::basic_regex<char> *)a3)
            return a3;
          goto LABEL_14;
        }
        v23 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v26, (std::basic_regex<char> *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
      }
      if (v23 == (char *)v8)
        goto LABEL_11;
    }
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  std::basic_regex<char> *v3;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  std::__owns_one_state<char> *v11;
  int v12;
  char *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3)
    return a2;
  if (*a2 == 94)
  {
    v6 = operator new(0x18uLL);
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *v6 = &unk_24CE825E8;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      v10 = v3;
      v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, (uint64_t)v10, a3);
      if (v10 != v13)
      {
        v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v10 != (_BYTE *)v3)
          continue;
      }
      if (v10 + 1 != a3 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v14 = operator new(0x18uLL);
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *v14 = &unk_24CE82630;
      v14[1] = v17;
      *((_BYTE *)v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::basic_regex<char> *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_12;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2)
LABEL_12:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3)
    return a3;
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    v9 = *(_QWORD *)(a1 + 56);
    v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if ((std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1) == v11)
      goto LABEL_12;
    do
    {
      v8 = v11;
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10)
      goto LABEL_12;
    v12 = operator new(0x18uLL);
    v13 = *(_QWORD *)(v9 + 8);
    v12[1] = *(_QWORD *)(v6 + 8);
    v12[2] = v13;
    *v12 = &unk_24CE82AB0;
    *(_QWORD *)(v6 + 8) = v12;
    *(_QWORD *)(v9 + 8) = 0;
    v14 = operator new(0x10uLL);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v14[1] = v15;
    *(_QWORD *)(v9 + 8) = v14;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v16 = operator new(0x10uLL);
    v17 = *(_QWORD *)(v9 + 8);
    *v16 = &unk_24CE82AF8;
    v16[1] = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
    if (v8 == a3)
      return a3;
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = operator new(0x10uLL);
    v10 = *(_QWORD *)(v6 + 8);
    v9[1] = v10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v11 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v11 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (char *)memchr(v11, 10, a3 - v11);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v11)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_24CE82AB0;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_24CE82AF8;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v11 = v22;
    else
      v11 = v22 + 1;
  }
  while (v11 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  _QWORD *v9;
  uint64_t v10;
  std::basic_regex<char> *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::basic_regex<char> *v21;
  std::basic_regex<char> *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = operator new(0x10uLL);
    v10 = *(_QWORD *)(v6 + 8);
    v9[1] = v10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v11)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_24CE82AB0;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_24CE82AF8;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v11 = v22;
    else
      v11 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
  }
  while (v11 != a3);
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v6;
  int v7;
  __int128 v8;
  char *v9;
  unsigned int v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unsigned int marked_count;
  std::basic_regex<char> v23;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v17 = a2[1];
        if (v17 == 66)
        {
          v18 = (char *)operator new(0x30uLL);
          v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v18 = &unk_24CE82678;
          *((_QWORD *)v18 + 1) = v20;
          std::locale::locale((std::locale *)v18 + 2, (const std::locale *)a1);
          *(_OWORD *)(v18 + 24) = *(_OWORD *)(a1 + 8);
          v18[40] = 1;
        }
        else
        {
          if (v17 != 98)
            return v3;
          v18 = (char *)operator new(0x30uLL);
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v18 = &unk_24CE82678;
          *((_QWORD *)v18 + 1) = v19;
          std::locale::locale((std::locale *)v18 + 2, (const std::locale *)a1);
          *(_OWORD *)(v18 + 24) = *(_OWORD *)(a1 + 8);
          v18[40] = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return v3 + 2;
      }
      return v3;
    }
    if (v6 != 94)
      return v3;
    v11 = operator new(0x18uLL);
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
LABEL_17:
    *v11 = v15 + 16;
    v11[1] = v14;
    *((_BYTE *)v11 + 16) = v12;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 == 36)
  {
    v11 = operator new(0x18uLL);
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
    goto LABEL_17;
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3)
    return v3;
  v7 = a2[2];
  if (v7 == 33)
  {
    *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v23.__loop_count_ = v21;
    *(_OWORD *)&v23.__start_.__cntrl_ = v21;
    *(_OWORD *)&v23.__traits_.__loc_.__locale_ = v21;
    *(_OWORD *)&v23.__traits_.__col_ = v21;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v23);
    v23.__flags_ = *(_DWORD *)(a1 + 24);
    v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v23, v3 + 3, a3);
    marked_count = v23.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v23, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v9 == a3 || *v9 != 41)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    goto LABEL_27;
  }
  if (v7 != 61)
    return v3;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v23.__loop_count_ = v8;
  *(_OWORD *)&v23.__start_.__cntrl_ = v8;
  *(_OWORD *)&v23.__traits_.__loc_.__locale_ = v8;
  *(_OWORD *)&v23.__traits_.__col_ = v8;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v23);
  v23.__flags_ = *(_DWORD *)(a1 + 24);
  v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v23, v3 + 3, a3);
  v10 = v23.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v23, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v10;
  if (v9 == a3 || *v9 != 41)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_27:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v23.__traits_.__loc_);
  return v9 + 1;
}

void sub_212ADD60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_212ADD620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_212ADD634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_212ADD648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::basic_regex<char> *v6;
  std::basic_regex<char> *result;
  std::__node<char> *v8;
  std::__owns_one_state<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;
  unsigned int marked_count;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  std::basic_regex<char> *v15;
  std::basic_regex<char> *v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *v19;

  v3 = a2;
  if (a2 == a3)
    return v3;
  switch(LOBYTE(a2->__traits_.__loc_.__locale_))
  {
    case '(':
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3)
        goto LABEL_26;
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
        && BYTE1(a2->__traits_.__loc_.__locale_) == 63
        && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
      {
        ++this->__open_count_;
        v6 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, a3);
        if (v6 != a3 && LOBYTE(v6->__traits_.__loc_.__locale_) == 41)
        {
          --this->__open_count_;
          return (std::basic_regex<char> *)((char *)&v6->__traits_.__loc_.__locale_ + 1);
        }
LABEL_26:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((this->__flags_ & 2) != 0)
      {
        marked_count = this->__marked_count_;
      }
      else
      {
        v11 = (std::__node<char> *)operator new(0x18uLL);
        marked_count = this->__marked_count_ + 1;
        this->__marked_count_ = marked_count;
        end = this->__end_;
        first = end->__first_;
        v11->__vftable = (std::__node<char>_vtbl *)&unk_24CE82948;
        v11[1].__vftable = (std::__node<char>_vtbl *)first;
        LODWORD(v11[2].__vftable) = marked_count;
        end->__first_ = v11;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      ++this->__open_count_;
      v15 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, a3);
      if (v15 == a3)
        goto LABEL_26;
      v16 = v15;
      if (LOBYTE(v15->__traits_.__loc_.__locale_) != 41)
        goto LABEL_26;
      if ((this->__flags_ & 2) == 0)
      {
        v17 = (std::__node<char> *)operator new(0x18uLL);
        v18 = this->__end_;
        v19 = v18->__first_;
        v17->__vftable = (std::__node<char>_vtbl *)&unk_24CE82990;
        v17[1].__vftable = (std::__node<char>_vtbl *)v19;
        LODWORD(v17[2].__vftable) = marked_count;
        v18->__first_ = v17;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      --this->__open_count_;
      result = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
      break;
    case ')':
    case ',':
    case '-':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    case '*':
    case '+':
    case '?':
      goto LABEL_25;
    case '.':
      v8 = (std::__node<char> *)operator new(0x10uLL);
      v9 = this->__end_;
      v10 = v9->__first_;
      v8->__vftable = (std::__node<char>_vtbl *)&unk_24CE82708;
      v8[1].__vftable = (std::__node<char>_vtbl *)v10;
      v9->__first_ = v8;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return (std::basic_regex<char> *)((char *)v3 + 1);
    case '[':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, (char *)a3);
    case '\\':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    default:
      if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123)
LABEL_25:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int v6;
  int locale_low;
  std::basic_regex<char> *v8;
  std::basic_regex<char> *v9;
  char *v10;
  size_t v11;
  char *v13;
  int v14;
  int v15;
  char *v16;
  int v17;
  int v18;
  std::basic_regex<char> *v19;
  unsigned __int8 *v20;
  BOOL v21;
  std::basic_regex<char> *v22;
  BOOL v23;
  char *v24;
  size_t v25;
  std::basic_regex<char> *v26;
  int v27;
  int v28;
  std::basic_regex<char> *v29;
  int v30;
  std::basic_regex<char> *v31;
  _BYTE *v32;

  if (this == a3)
    return this;
  v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6)
        v21 = 1;
      else
        v21 = v9 == a3;
      if (!v21 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v11 = 0;
        goto LABEL_36;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v25 = 0;
      goto LABEL_45;
    }
    v8 = this;
    if (locale_low == 43)
    {
      v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v11 = 1;
LABEL_36:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v10;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v25 = 1;
      goto LABEL_45;
    }
    return v8;
  }
  if (locale_low == 63)
  {
    v22 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6)
      v23 = 1;
    else
      v23 = v22 == a3;
    if (v23 || LOBYTE(v22->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v22;
    }
    else
    {
      v24 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v24;
    }
  }
  else
  {
    v8 = this;
    if (locale_low != 123)
      return v8;
    v13 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_72;
    v14 = *v13;
    if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      goto LABEL_72;
    v15 = v14 - 48;
    v16 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_21:
      v16 = (char *)a3;
    }
    else
    {
      while (1)
      {
        v17 = *v16;
        if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38)
          break;
        if (v15 >= 214748364)
          goto LABEL_72;
        v15 = v17 + 10 * v15 - 48;
        if (++v16 == (char *)a3)
          goto LABEL_21;
      }
    }
    if (v16 == v13)
      goto LABEL_72;
    if (v16 == (char *)a3)
      goto LABEL_73;
    v18 = *v16;
    if (v18 != 44)
    {
      if (v18 == 125)
      {
        v19 = (std::basic_regex<char> *)(v16 + 1);
        if (v6 || v19 == a3 || LOBYTE(v19->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 1);
          return v19;
        }
        else
        {
          v20 = (unsigned __int8 *)(v16 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v20;
        }
      }
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    v26 = (std::basic_regex<char> *)(v16 + 1);
    if (v16 + 1 == (char *)a3)
      goto LABEL_72;
    v27 = LOBYTE(v26->__traits_.__loc_.__locale_);
    if (v27 == 125)
    {
      v9 = (std::basic_regex<char> *)(v16 + 2);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v11 = v15;
        v10 = v16 + 3;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        goto LABEL_36;
      }
      v25 = v15;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
LABEL_45:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v25, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v9;
    }
    if ((v27 & 0xF8) != 0x30 && (v27 & 0xFE) != 0x38)
      goto LABEL_73;
    v28 = v27 - 48;
    v29 = (std::basic_regex<char> *)(v16 + 2);
    if (v29 == a3)
    {
LABEL_61:
      v29 = a3;
    }
    else
    {
      while (1)
      {
        v30 = LOBYTE(v29->__traits_.__loc_.__locale_);
        if ((v30 & 0xF8) != 0x30 && (v30 & 0xFE) != 0x38)
          break;
        if (v28 >= 214748364)
          goto LABEL_72;
        v28 = v30 + 10 * v28 - 48;
        v29 = (std::basic_regex<char> *)((char *)v29 + 1);
        if (v29 == a3)
          goto LABEL_61;
      }
    }
    if (v29 == v26 || v29 == a3 || LOBYTE(v29->__traits_.__loc_.__locale_) != 125)
LABEL_73:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v28 < v15)
      goto LABEL_72;
    v31 = (std::basic_regex<char> *)((char *)&v29->__traits_.__loc_.__locale_ + 1);
    if (v6 || v31 == a3 || LOBYTE(v31->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 1);
      return v31;
    }
    else
    {
      v32 = (char *)&v29->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v32;
    }
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  int v8;
  unsigned int v9;
  int v11;
  unsigned __int8 *v12;

  if (a2 == a3)
    return a2;
  v4 = a2;
  if (*a2 == 92)
  {
    v6 = a2 + 1;
    if (a2 + 1 == a3)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    v8 = *v6;
    v9 = v8 - 48;
    if (v8 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
      return a2 + 2;
    }
    if ((v8 - 49) <= 8)
    {
      v4 = a2 + 2;
      if (a2 + 2 == a3)
      {
        v4 = a3;
      }
      else
      {
        while (1)
        {
          v11 = *v4;
          if ((v11 - 48) > 9)
            break;
          if (v9 >= 0x19999999)
            goto LABEL_24;
          ++v4;
          v9 = v11 + 10 * v9 - 48;
          if (v4 == a3)
          {
            v4 = a3;
            break;
          }
        }
        if (!v9)
LABEL_24:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      }
      if (v9 > this->__marked_count_)
        goto LABEL_24;
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v9);
      if (v4 != v6)
        return v4;
    }
    v4 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 1, a3);
    if (v6 == v4)
    {
      v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(this, a2 + 1, a3, 0);
      if (v6 == v12)
        return a2;
      else
        return v12;
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  void *v8;
  char *v9;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if (v7 == a3)
      goto LABEL_20;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3)
      goto LABEL_20;
    do
    {
      v9 = v7;
      v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v7, a3, (uint64_t)v8);
    }
    while (v9 != v7);
    if (v9 == a3)
      goto LABEL_20;
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_212ADDF60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *result;

  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  _DWORD *v5;
  _DWORD *v6;
  int v7;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v6;
        *(_QWORD *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_212ADE1B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212ADE1C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212ADE1DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212ADE1F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212ADE204(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212ADE218(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  unsigned __int8 *result;
  unsigned int v8;
  std::basic_regex<char>::value_type v10;
  int v11;
  int v12;
  unsigned __int8 v13;
  char v14;
  unsigned __int8 v15;
  char v16;
  std::basic_regex<char>::value_type v17;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3 || (char)v4[1] < 65)
        goto LABEL_85;
      v8 = v4[1];
      if (v8 >= 0x5B && (v8 - 97) > 0x19u)
        goto LABEL_85;
      v10 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v10;
        *((_BYTE *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v10);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        v11 = v4[1];
        if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            v12 = *v4;
            if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38 || (v12 | 0x20u) - 97 < 6)
              goto LABEL_42;
          }
        }
      }
      goto LABEL_85;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        v6 = 11;
LABEL_68:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_42:
      if (v4 + 1 == a3)
        goto LABEL_85;
      v13 = v4[1];
      v14 = -48;
      if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38)
        goto LABEL_47;
      v13 |= 0x20u;
      if ((v13 - 97) >= 6u)
        goto LABEL_85;
      v14 = -87;
LABEL_47:
      if (v4 + 2 == a3)
        goto LABEL_85;
      v15 = v4[2];
      v16 = -48;
      if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
      {
        v15 |= 0x20u;
        if ((v15 - 97) >= 6u)
LABEL_85:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        v16 = -87;
      }
      v17 = v15 + 16 * (v13 + v14) + v16;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v17;
      *((_BYTE *)a4 + 1) = 0;
      result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0)
        goto LABEL_85;
      if (!a4)
        goto LABEL_68;
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v5;
      *((_BYTE *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v4;
  int64_t v5;
  int v6;
  char *v7;
  char *v8;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  char *v19;
  int v20;
  _BYTE *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  char *v25;
  uint64_t v26;
  int v27;
  int v28;
  std::basic_regex<char>::value_type *v29;
  char *v30;
  _BYTE *v31;
  int v32;
  void **v33;
  _BYTE *v34;
  char *v35;
  void *v37[2];
  uint64_t v38;
  void *v39[2];
  uint64_t v40;
  void *__p[2];
  uint64_t v42;
  __int128 v43;
  int64_t v44;

  v4 = a2;
  v5 = a2 - a3;
  if (a2 == a3)
    return a2;
  v6 = *a2;
  v7 = a2;
  if (v6 == 93)
    return v7;
  v8 = (char *)a4;
  v11 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v42 = 0;
  if (a2 + 1 == a3 || v6 != 91)
  {
LABEL_36:
    v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_39;
  }
  v12 = a2[1];
  if (v12 != 46)
  {
    if (v12 == 58)
    {
      v14 = (uint64_t)(a2 + 2);
      if (a3 - (v4 + 2) < 2)
        goto LABEL_91;
      v15 = 0;
      v16 = v5 + 4;
      v17 = (unsigned __int8 *)v4;
      v18 = v16;
      if (v4[2] == 58)
        goto LABEL_15;
      do
      {
        do
        {
          if (!v18)
            goto LABEL_91;
          v17 = (unsigned __int8 *)&v4[++v15];
          v18 = v16 + v15;
        }
        while (v4[v15 + 2] != 58);
LABEL_15:
        ;
      }
      while (v17[3] != 93);
      v19 = &v4[v15 + 2];
      if (v19 == a3)
LABEL_91:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      v20 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, v14, v19, *(_DWORD *)(a1 + 24) & 1);
      if (!v20)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
      v13 = 0;
      *((_DWORD *)v8 + 40) |= v20;
      v8 = &v4[v15 + 4];
      v7 = v4;
      if (SHIBYTE(v42) < 0)
        goto LABEL_70;
      goto LABEL_71;
    }
    if (v12 == 61)
    {
      v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
      v13 = 0;
      v7 = v4;
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_71;
      goto LABEL_70;
    }
    v11 = 0;
    goto LABEL_36;
  }
  v21 = a2 + 2;
  if (a3 - (v4 + 2) < 2)
    goto LABEL_92;
  v22 = (unsigned __int8 *)(v4 + 2);
  v23 = (unsigned __int8 *)(v4 + 3);
  if (*v21 == 46)
    goto LABEL_24;
  do
  {
    do
    {
      if (a3 - 4 == v4)
        goto LABEL_92;
      ++v4;
      v22 = v23;
      v24 = *v23++;
    }
    while (v24 != 46);
LABEL_24:
    ;
  }
  while (*v23 != 93);
  if (v22 == (unsigned __int8 *)a3)
LABEL_92:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)v21, v4 + 2, (uint64_t)&v43);
  if (SHIBYTE(v42) < 0)
    operator delete(__p[0]);
  v42 = v44;
  *(_OWORD *)__p = v43;
  v25 = (char *)HIBYTE(v44);
  v11 = SHIBYTE(v44);
  v26 = *((_QWORD *)&v43 + 1);
  if (v44 < 0)
    v25 = (char *)__p[1];
  if ((unint64_t)(v25 - 1) >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  v4 = (char *)(v22 + 2);
  v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v44 >= 0)
    v26 = HIBYTE(v44);
  if (v26)
  {
    if (v4 == a3)
      goto LABEL_52;
    goto LABEL_51;
  }
LABEL_39:
  if ((v27 | 0x40) != 0x40)
  {
    LOBYTE(v28) = *v4;
LABEL_44:
    if (v11 < 0)
    {
      v31 = __p[0];
      __p[1] = (void *)1;
      *(_BYTE *)__p[0] = v28;
      v31[1] = 0;
      if (++v4 == a3)
        goto LABEL_52;
    }
    else
    {
      HIBYTE(v42) = 1;
      LOWORD(__p[0]) = v28;
      if (++v4 == a3)
        goto LABEL_52;
    }
    goto LABEL_51;
  }
  v28 = *v4;
  if (v28 != 92)
    goto LABEL_44;
  v29 = v4 + 1;
  if (v27)
    v30 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v29, a3, (uint64_t *)__p);
  else
    v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v29, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v8);
  v4 = v30;
  if (v30 == a3)
  {
LABEL_52:
    if (SHIBYTE(v42) < 0)
    {
      if (!__p[1])
        goto LABEL_69;
      if (__p[1] != (void *)1)
      {
        v33 = (void **)__p[0];
LABEL_68:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v8, *(char *)v33, *((char *)v33 + 1));
LABEL_69:
        v13 = 1;
        v7 = v4;
        if ((SHIBYTE(v42) & 0x80000000) == 0)
          goto LABEL_71;
        goto LABEL_70;
      }
      v33 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v42))
        goto LABEL_69;
      v33 = __p;
      if (HIBYTE(v42) != 1)
        goto LABEL_68;
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, *(char *)v33);
    goto LABEL_69;
  }
LABEL_51:
  v32 = *v4;
  if (v32 == 93)
    goto LABEL_52;
  v34 = v4 + 1;
  if (v4 + 1 == a3 || v32 != 45 || *v34 == 93)
    goto LABEL_52;
  v43 = 0uLL;
  v44 = 0;
  v7 = v4 + 2;
  if (v4 + 2 == a3 || *v34 != 91 || *v7 != 46)
  {
    if ((v27 | 0x40) == 0x40)
    {
      LODWORD(v34) = *v34;
      if ((_DWORD)v34 == 92)
      {
        if (v27)
          v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4 + 2, a3, (uint64_t *)&v43);
        else
          v35 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v4 + 2, (unsigned __int8 *)a3, (uint64_t)&v43, (uint64_t)v8);
        goto LABEL_81;
      }
    }
    else
    {
      LOBYTE(v34) = *v34;
    }
    HIBYTE(v44) = 1;
    LOWORD(v43) = v34;
    goto LABEL_82;
  }
  v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v4 + 3, a3, (uint64_t)&v43);
LABEL_81:
  v7 = v35;
LABEL_82:
  *(_OWORD *)v39 = *(_OWORD *)__p;
  v40 = v42;
  __p[1] = 0;
  v42 = 0;
  __p[0] = 0;
  *(_OWORD *)v37 = v43;
  v38 = v44;
  v43 = 0uLL;
  v44 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v8, (char *)v39, (uint64_t)v37);
  if (SHIBYTE(v38) < 0)
  {
    operator delete(v37[0]);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_84:
      if ((SHIBYTE(v44) & 0x80000000) == 0)
        goto LABEL_85;
LABEL_89:
      operator delete((void *)v43);
      v13 = 1;
      if (SHIBYTE(v42) < 0)
        goto LABEL_70;
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_84;
  }
  operator delete(v39[0]);
  if (SHIBYTE(v44) < 0)
    goto LABEL_89;
LABEL_85:
  v13 = 1;
  if (SHIBYTE(v42) < 0)
LABEL_70:
    operator delete(__p[0]);
LABEL_71:
  if ((v13 & 1) != 0)
    return v7;
  return v8;
}

void sub_212ADEC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  char *v11;
  void **v12;
  unint64_t v13;
  __int128 v14;
  void *v15;
  void **v16;
  void **v17;
  void *__p[3];
  void *v20[3];

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_39;
  v6 = a3 - 2;
  v7 = a2;
  v8 = a2;
  v9 = a2 + 1;
  if (*a2 != 61)
    goto LABEL_5;
LABEL_4:
  if (*v9 != 93)
  {
LABEL_5:
    while (a2 != v6)
    {
      ++v7;
      --v6;
      v8 = v9;
      v10 = *v9++;
      if (v10 == 61)
        goto LABEL_4;
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v8 == a3)
    goto LABEL_39;
  memset(v20, 170, sizeof(v20));
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v7, (uint64_t)v20);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
    v11 = (char *)HIBYTE(v20[2]);
    if (HIBYTE(v20[2]))
    {
      memset(__p, 170, sizeof(__p));
      v12 = v20;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v11 = (char *)v20[1];
  if (!v20[1])
    goto LABEL_40;
  memset(__p, 170, sizeof(__p));
  v12 = (void **)v20[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v12, &v11[(_QWORD)v12], (_BYTE **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      v13 = *(_QWORD *)(a4 + 144);
      if (v13 >= *(_QWORD *)(a4 + 152))
      {
        *(_QWORD *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v14 = *(_OWORD *)__p;
          *(void **)(v13 + 16) = __p[2];
          *(_OWORD *)v13 = v14;
        }
        *(_QWORD *)(a4 + 144) = v13 + 24;
        *(_QWORD *)(a4 + 144) = v13 + 24;
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  v15 = (void *)HIBYTE(v20[2]);
  if (SHIBYTE(v20[2]) < 0)
    v15 = v20[1];
  if (v15 == (void *)2)
  {
    v17 = v20;
    if (SHIBYTE(v20[2]) < 0)
      v17 = (void **)v20[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v17, *((char *)v17 + 1));
  }
  else
  {
    if (v15 != (void *)1)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    v16 = v20;
    if (SHIBYTE(v20[2]) < 0)
      v16 = (void **)v20[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v16);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v20[2]) < 0)
      goto LABEL_38;
    return v7 + 2;
  }
LABEL_33:
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
    return v7 + 2;
LABEL_38:
  operator delete(v20[0]);
  return v7 + 2;
}

void sub_212ADEF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  unint64_t v14;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  v7 = a2;
  v8 = a2 + 1;
  if (*a2 != 46)
    goto LABEL_5;
LABEL_4:
  if (*v8 != 93)
  {
LABEL_5:
    while (a2 != v5)
    {
      ++v6;
      --v5;
      v7 = v8;
      v9 = *v8++;
      if (v9 == 46)
        goto LABEL_4;
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v7 == a3)
    goto LABEL_15;
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v13;
  v10 = v14;
  *(_QWORD *)(a4 + 16) = v14;
  v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a4 + 8);
  if (v11 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type *v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  std::basic_regex<char>::value_type v11;

  if (a2 == a3)
LABEL_70:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v5;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30)
        goto LABEL_70;
      v7 = *a2 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_42:
        if (a4)
          goto LABEL_43;
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_42;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        v8 = a3;
        if (a4)
          goto LABEL_43;
        goto LABEL_69;
      }
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      if (!a4)
        goto LABEL_69;
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v7;
      *((_BYTE *)a4 + 1) = 0;
      return v8;
  }
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  char *v9;
  char *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  size_t v26;
  std::string v27;
  char __s[24];

  v5 = (unint64_t)&a3[-a2];
  memset(__s, 170, sizeof(__s));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    __s[23] = (_BYTE)a3 - a2;
    v9 = __s;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v16 = v5 | 7;
  v17 = v16 + 1;
  v9 = (char *)operator new(v16 + 1);
  *(_QWORD *)&__s[8] = v5;
  *(_QWORD *)&__s[16] = v17 | 0x8000000000000000;
  *(_QWORD *)__s = v9;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)&v9[-a2] < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
    do
    {
LABEL_15:
      v18 = *v11++;
      *v10++ = v18;
    }
    while (v11 != a3);
    goto LABEL_16;
  }
  v10 = &v9[v5 & 0xFFFFFFFFFFFFFFE0];
  v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
  v12 = (__int128 *)(a2 + 16);
  v13 = v9 + 16;
  v14 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v15 = *v12;
    *(v13 - 1) = *(v12 - 1);
    *v13 = v15;
    v12 += 2;
    v13 += 2;
    v14 -= 32;
  }
  while (v14);
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFE0))
    goto LABEL_15;
LABEL_16:
  *v10 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (__s[23] < 0)
  {
    v19 = *(char **)__s;
    if (!*(_QWORD *)&__s[8])
      goto LABEL_29;
  }
  else
  {
    if (!__s[23])
      return;
    v19 = __s;
  }
  std::__get_collation_name(&v27, v19);
  *(_OWORD *)a4 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  v20 = v27.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v27.__r_.__value_.__l + 2);
  v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a4 + 8);
  if (v21)
  {
LABEL_23:
    if ((__s[23] & 0x80000000) == 0)
      return;
    v19 = *(char **)__s;
LABEL_29:
    operator delete(v19);
    return;
  }
  if (__s[23] < 0)
  {
    v19 = *(char **)__s;
    v22 = *(_QWORD *)&__s[8];
    if (*(_QWORD *)&__s[8] >= 3uLL)
      goto LABEL_29;
    goto LABEL_31;
  }
  v22 = __s[23];
  if (__s[23] < 3u)
  {
    v19 = __s;
LABEL_31:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v27, *(_QWORD *)(a1 + 16), v19, &v19[v22]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v27;
    if (*(char *)(a4 + 23) < 0)
    {
      v24 = *(_QWORD *)(a4 + 8);
      if (v24 == 1 || v24 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] >= 0)
            v25 = __s;
          else
            v25 = *(char **)__s;
          if (__s[23] >= 0)
            v26 = __s[23];
          else
            v26 = *(_QWORD *)&__s[8];
          std::string::__assign_no_alias<false>((void **)a4, v25, v26);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v23 = *(unsigned __int8 *)(a4 + 23);
      if (v23 == 1 || v23 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] < 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)a4, *(void **)__s, *(size_t *)&__s[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__s;
            *(_QWORD *)(a4 + 16) = *(_QWORD *)&__s[16];
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
    goto LABEL_23;
  }
}

void sub_212ADF8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, BOOL a4)
{
  unint64_t v4;
  _OWORD *v9;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  void **v20;
  void **v21;
  uint64_t classname;
  void *__p[3];

  v4 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 > 0x16)
  {
    v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v16 = v4 | 7;
    v17 = v16 + 1;
    v9 = operator new(v16 + 1);
    __p[1] = (void *)v4;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v9 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v4 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)v9 + (v4 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v4 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = v9 + 1;
    v14 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v19 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v20, &v19[(_QWORD)v20]);
  if (SHIBYTE(__p[2]) >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  classname = std::__get_classname((const char *)v21, a4);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_212ADFAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3)
{
  char *v6;
  int v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::basic_regex<char> *v14;
  std::__owns_one_state<char> *v15;
  int v16;
  std::basic_regex<char> *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (char *)a2, a3);
  if ((char *)a2 != v6 || (char *)a2 == a3 || (char *)(a2 + 1) == a3 || *(_BYTE *)a2 != 92)
    return v6;
  v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new(0x18uLL);
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *v10 = &unk_24CE82948;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3)
        goto LABEL_23;
      v14 = v9;
      v15 = *(std::__owns_one_state<char> **)(a1 + 56);
      v16 = *(_DWORD *)(a1 + 28);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v14, a3);
      if (v14 == v17)
        break;
      v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v14 != v9);
    if ((char *)&v14->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v14->__traits_.__loc_.__locale_) != 92
      || BYTE1(v14->__traits_.__loc_.__locale_) != 41)
    {
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    v6 = (char *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 41);
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v18 = operator new(0x18uLL);
      v19 = *(_QWORD *)(a1 + 56);
      v20 = *(_QWORD *)(v19 + 8);
      *v18 = &unk_24CE82990;
      v18[1] = v20;
      *((_DWORD *)v18 + 4) = v11;
      *(_QWORD *)(v19 + 8) = v18;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v6;
    }
    return v6;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return v6;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int locale_low;
  unsigned __int8 *v9;
  std::basic_regex<char> *v10;
  int v11;
  int v12;
  std::basic_regex<char> *v13;
  int v14;
  std::basic_regex<char> *v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;

  if (this == a3)
    return this;
  locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  v9 = (unsigned __int8 *)a3;
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return this;
  }
  v10 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v10 == a3)
    goto LABEL_45;
  v11 = LOBYTE(v10->__traits_.__loc_.__locale_);
  if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38)
    goto LABEL_45;
  v12 = v11 - 48;
  v13 = (std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_15:
    v13 = a3;
  }
  else
  {
    while (1)
    {
      v14 = LOBYTE(v13->__traits_.__loc_.__locale_);
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
        break;
      if (v12 >= 214748364)
        goto LABEL_45;
      v12 = v14 + 10 * v12 - 48;
      v13 = (std::basic_regex<char> *)((char *)v13 + 1);
      if (v13 == a3)
        goto LABEL_15;
    }
  }
  if (v13 == v10)
    goto LABEL_45;
  if (v13 == a3)
LABEL_46:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 1);
  v16 = LOBYTE(v13->__traits_.__loc_.__locale_);
  if (v16 != 44)
  {
    if (v15 != a3 && v16 == 92 && LOBYTE(v15->__traits_.__loc_.__locale_) == 125)
    {
      v19 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v12, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_46;
  }
  if (v15 == a3)
    goto LABEL_46;
  v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
  if ((v17 & 0xF8) == 0x30 || (v17 & 0xFE) == 0x38)
  {
    v18 = v17 - 48;
    v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_37:
      v15 = a3;
      goto LABEL_40;
    }
    while (1)
    {
      v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
      if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38)
        break;
      if (v18 >= 214748364)
        goto LABEL_45;
      v18 = v17 + 10 * v18 - 48;
      v15 = (std::basic_regex<char> *)((char *)v15 + 1);
      if (v15 == a3)
        goto LABEL_37;
    }
  }
  else
  {
    v18 = -1;
  }
  if (v15 == a3)
  {
    v20 = (unsigned __int8 *)v15;
    v15 = a3;
    v9 = v20;
  }
  else if ((std::basic_regex<char> *)((char *)&v15->__traits_.__loc_.__locale_ + 1) == a3 || v17 != 92)
  {
    v9 = (unsigned __int8 *)v15;
  }
  else
  {
    v9 = (unsigned __int8 *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 125);
  }
LABEL_40:
  if (v15 == (std::basic_regex<char> *)v9)
    goto LABEL_46;
  if (v18 != -1)
  {
    if (v18 >= v12)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v18, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v9;
    }
LABEL_45:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v9;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v5;
  char *v6;
  int v9;
  std::__node<char> *v10;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  v6 = a2 + 1;
  v5 = *a2;
  if (a2 + 1 == a3 && v5 == 36)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
    return a2 + 1;
  }
  else if (v6 != a3
         && v5 == 92
         && (v9 = *v6, (v9 - 36) <= 0x3A)
         && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
    return a2 + 2;
  }
  else
  {
    if (*a2 != 46)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
    v10 = (std::__node<char> *)operator new(0x10uLL);
    end = this->__end_;
    first = end->__first_;
    v10->__vftable = (std::__node<char>_vtbl *)&unk_24CE82B40;
    v10[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v10;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  std::basic_regex<char> *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int locale_low;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::basic_regex<char> *v22;
  std::basic_regex<char> *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2)
  {
    v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char>::value_type *)a2, (std::basic_regex<char>::value_type *)a3);
    if (v8 == a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, (char *)a2, (char *)a3);
      }
      else
      {
        v9 = operator new(0x10uLL);
        v10 = *(_QWORD *)(a1 + 56);
        v11 = *(_QWORD *)(v10 + 8);
        *v9 = &unk_24CE82B40;
        v9[1] = v11;
        *(_QWORD *)(v10 + 8) = v9;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      }
    }
  }
  if (v8 != a2 || v8 == a3)
  {
LABEL_23:
    if (v8 != a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    return a2;
  }
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v13 = operator new(0x18uLL);
      v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v15 = *(_QWORD *)(a1 + 56);
      goto LABEL_14;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v19 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v18 = operator new(0x18uLL);
        v19 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v19;
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(v20 + 8);
        *v18 = &unk_24CE82948;
        v18[1] = v21;
        *((_DWORD *)v18 + 4) = v19;
        *(_QWORD *)(v20 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v22 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v22 == a3 || (v23 = v22, LOBYTE(v22->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v24 = operator new(0x18uLL);
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *v24 = &unk_24CE82990;
        v24[1] = v26;
        *((_DWORD *)v24 + 4) = v19;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v8 = (std::basic_regex<char> *)((char *)&v23->__traits_.__loc_.__locale_ + 1);
      goto LABEL_23;
    case '^':
      v13 = operator new(0x18uLL);
      v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v15 = *(_QWORD *)(a1 + 56);
LABEL_14:
      v17 = *(_QWORD *)(v15 + 8);
      *v13 = v16 + 16;
      v13[1] = v17;
      *((_BYTE *)v13 + 16) = v14;
      *(_QWORD *)(v15 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return a2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_)
        return this;
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  std::basic_regex<char>::value_type *v3;
  std::basic_regex<char>::value_type *v4;
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type *result;
  _BOOL4 v7;
  uint64_t v8;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
      }
      else
      {
        v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        v8 = 2;
        if (!v7)
          v8 = 0;
        result = &v3[v8];
      }
      break;
  }
  return result;
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  v11 = -86;
  MEMORY[0x212BFA1B4](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_212AE05C4(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x212AE0590);
  }
  __cxa_rethrow();
}

void sub_212AE0608(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t BBUEURProgrammer::BBUEURProgrammer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  capabilities::programmer *v5;
  capabilities::programmer *v6;
  void *exception;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  *(_QWORD *)a1 = off_24CE84B60;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 40;
  *(_QWORD *)(a1 + 48) = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 67, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBUProgrammer.cpp", 0xB4u, (ctu::LogMessageBuffer *)"Assertion failure(transport && \"BBU telephony util transport error.\")", v9, v10, v11, v12);
  }
  *(_QWORD *)a1 = off_24CE82B88;
  v5 = (capabilities::programmer *)capabilities::programmer::connectAttemptCount((capabilities::programmer *)a1);
  *(_DWORD *)(a1 + 68) = (_DWORD)v5;
  v6 = (capabilities::programmer *)capabilities::programmer::connectTimeout(v5);
  *(_DWORD *)(a1 + 72) = (_DWORD)v6;
  *(_DWORD *)(a1 + 76) = capabilities::programmer::commandTimeout(v6);
  *(_BYTE *)(a1 + 65) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  return a1;
}

void sub_212AE06E4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::list<BBUProgrammer::Item *>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_212AE06F8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  void *v2;

  __cxa_free_exception(v2);
  std::list<BBUProgrammer::Item *>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_212AE0714(_Unwind_Exception *a1)
{
  BBUProgrammer *v1;

  BBUProgrammer::~BBUProgrammer(v1);
  _Unwind_Resume(a1);
}

void sub_212AE0728(_Unwind_Exception *a1)
{
  BBUProgrammer *v1;

  BBUProgrammer::~BBUProgrammer(v1);
  _Unwind_Resume(a1);
}

void sub_212AE073C(_Unwind_Exception *a1)
{
  BBUProgrammer *v1;

  BBUProgrammer::~BBUProgrammer(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURProgrammer::enableStepThroughImages(uint64_t this)
{
  *(_BYTE *)(this + 80) = 1;
  return this;
}

uint64_t BBUEURProgrammer::getConnectTries(BBUEURProgrammer *this)
{
  return *((unsigned int *)this + 17);
}

uint64_t BBUEURProgrammer::getConnectTimeout(BBUEURProgrammer *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t BBUEURProgrammer::getCommandTimeout(BBUEURProgrammer *this)
{
  return *((unsigned int *)this + 19);
}

uint64_t BBUEURProgrammer::getEFSErasePollTimeUSec(BBUEURProgrammer *this)
{
  return 50000;
}

uint64_t BBUEURProgrammer::getEFSEraseIndicated(BBUEURProgrammer *this)
{
  return 0;
}

uint64_t BBUFusing::BBUFusing(uint64_t result, uint64_t a2, uint64_t a3)
{
  void *exception;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)result = off_24CE82C48;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  *(_BYTE *)(result + 24) = 0;
  *(_WORD *)(result + 55) = 0;
  *(_BYTE *)(result + 32) = 0;
  *(_WORD *)(result + 79) = 0;
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 24, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBUFusing.cpp", 0x15u, (ctu::LogMessageBuffer *)"Failed to get feedback", v4, v5, v6, v7);
  }
  return result;
}

void sub_212AE0818(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 79) < 0)
  {
    operator delete(*(void **)(v1 + 56));
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 32));
  _Unwind_Resume(exception_object);
}

_DWORD *BBUFusing::create(capabilities::updater *a1, uint64_t a2)
{
  int FusingType;
  _DWORD *v6;
  capabilities::fusing *v7;
  capabilities::fusing *v8;
  char *v9;
  capabilities::fusing *v10;
  capabilities::fusing *v11;
  void *exception;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  FusingType = capabilities::updater::getFusingType(a1);
  switch(FusingType)
  {
    case 0:
      v6 = operator new(0x60uLL);
      v7 = (capabilities::fusing *)BBUFusing::BBUFusing((uint64_t)v6, (uint64_t)a1, a2);
      *(_QWORD *)v6 = &unk_24CE81EF0;
      v8 = (capabilities::fusing *)capabilities::fusing::modeSetTimeout(v7);
      v6[21] = (_DWORD)v8;
      v6[22] = capabilities::fusing::commandTimeout(v8);
LABEL_7:
      *(_QWORD *)v6 = v9 + 16;
      return v6;
    case 1:
      v6 = operator new(0x60uLL);
      v10 = (capabilities::fusing *)BBUFusing::BBUFusing((uint64_t)v6, (uint64_t)a1, a2);
      *(_QWORD *)v6 = &unk_24CE81EF0;
      v11 = (capabilities::fusing *)capabilities::fusing::modeSetTimeout(v10);
      v6[21] = (_DWORD)v11;
      v6[22] = capabilities::fusing::commandTimeout(v11);
      goto LABEL_7;
    case 2:
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 24, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBUFusing.cpp", 0x2Au, (ctu::LogMessageBuffer *)"Unrecognized radio type!", v13, v14, v15, v16);
  }
  return 0;
}

void sub_212AE0994(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AE09A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)v1 = off_24CE82C48;
  if (*(char *)(v1 + 79) < 0)
  {
    operator delete(*(void **)(v1 + 56));
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      operator delete((void *)v1);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 32));
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void sub_212AE0A20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void BBUMatureProvisioningData::BBUMatureProvisioningData(BBUMatureProvisioningData *this, BBUDataSource *a2, BBUDataSource *a3)
{
  const void **v5;

  *(_QWORD *)this = off_24CE82C90;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v5 = (const void **)((char *)this + 16);
  if (a2)
    BBUMatureProvisioningData::loadDataSourceToData((uint64_t)this, (const void **)this + 1, (uint64_t)a2);
  if (a3)
    BBUMatureProvisioningData::loadDataSourceToData((uint64_t)this, v5, (uint64_t)a3);
}

void sub_212AE0AA4(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;
  CFTypeRef *v2;

  if (*v2)
    CFRelease(*v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

void BBUMatureProvisioningData::~BBUMatureProvisioningData(BBUMatureProvisioningData *this)
{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = off_24CE82C90;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
    CFRelease(v3);
}

{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = off_24CE82C90;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
    CFRelease(v3);
  operator delete(this);
}

uint64_t BBUMatureProvisioningData::loadDataSourceToData(uint64_t a1, const void **a2, uint64_t a3)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  UInt8 *v11;
  CFDataRef v12;
  CFDataRef v13;
  const void *v14;
  void *exception;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;

  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x10) == 0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 0x10) == 0)
      goto LABEL_5;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v6 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    _BBULog(20, 0, v6, (const char *)&str_3_14, "\n", v7, v8, v9, v23);
  }
LABEL_5:
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  v11 = (UInt8 *)operator new[](v10);
  v24 = -1431655766;
  (*(void (**)(uint64_t, UInt8 *, uint64_t, int *, _QWORD))(*(_QWORD *)a3 + 16))(a3, v11, v10, &v24, 0);
  if (v24 != (_DWORD)v10)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 57, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUMatureProvisioningData.cpp", 0x30u, (ctu::LogMessageBuffer *)"Assertion failure(amountCopied == dataSize && \"Unable to copy manifest data to finish provisioning.\")", v17, v18, v19, v23);
    goto LABEL_14;
  }
  v12 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v11, v10);
  if (!v12)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 57, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUMatureProvisioningData.cpp", 0x33u, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Unable to copy manifest data to finish provisioning.\")", v20, v21, v22, v23);
LABEL_14:
  }
  v13 = v12;
  v14 = *a2;
  *a2 = v13;
  if (v14)
    CFRelease(v14);
  operator delete[](v11);
  return 0;
}

void sub_212AE0D2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AE0D40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const char *BBUMatureProvisioningData::getDebugName(BBUMatureProvisioningData *this)
{
  return "BBUMatureProvisioningData";
}

_DWORD *BBUProvisioner::create(BBUProvisioner *this, BBUFeedback *a2)
{
  uint64_t v2;
  int ProvisionerType;
  _DWORD *result;
  _DWORD *v6;
  uint64_t v7;
  void *exception;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  ProvisionerType = capabilities::updater::getProvisionerType(this);
  if (ProvisionerType)
  {
    if (ProvisionerType == 1)
    {
      result = operator new(0x18uLL);
      result[4] = 0;
      *((_BYTE *)result + 20) = 1;
      *(_QWORD *)result = &unk_24CE83418;
      *((_QWORD *)result + 1) = this;
    }
    else
    {
      if (ProvisionerType == 2)
      {
        exception = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUProvisioner.cpp", 0x1Au, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized radio type.\")", v9, v10, v11, v16);
      }
      return (_DWORD *)v2;
    }
  }
  else
  {
    v6 = operator new(0x20uLL);
    v6[4] = 0;
    *((_BYTE *)v6 + 20) = 1;
    *(_QWORD *)v6 = &unk_24CE81B28;
    *((_QWORD *)v6 + 1) = this;
    v7 = capabilities::updater::provisioningCommandTimeout((capabilities::updater *)v6);
    if (v7 >= 0x100000000)
    {
      v12 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v12, 11, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUEURProvisioner.cpp", 0xFu, (ctu::LogMessageBuffer *)"Assertion failure(capabilities::updater::provisioningCommandTimeout().count() <= std::numeric_limits<UInt32>::max() && \"capabilities::updater::provisioningCommandTimeout().count() exceeds maximum allowable value\")", v13, v14, v15, v16);
    }
    v6[6] = capabilities::updater::provisioningCommandTimeout((capabilities::updater *)v7);
    *(_QWORD *)v6 = off_24CE82CD0;
    return v6;
  }
  return result;
}

void sub_212AE0EBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_free_exception(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212AE0ED8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AE0EEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUProvisioner::begin(uint64_t a1, void *lpsrc, uint64_t a3, capabilities::euicc *a4)
{
  void *v7;
  uint64_t result;
  void *exception;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (lpsrc)
  {
    result = eUICC::getEID(a4, a3, *(BBUFeedback **)(a1 + 8));
    if ((_DWORD)result == 126)
      return result;
  }
  else
  {
    v7 = 0;
    result = eUICC::getEID(a4, a3, *(BBUFeedback **)(a1 + 8));
    if ((_DWORD)result == 126)
      return result;
  }
  if (*(_DWORD *)(a1 + 16) != 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 70, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUProvisioner.cpp", 0x3Bu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid BBU provisionin support type.\")", v10, v11, v12, v13);
  }
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, capabilities::euicc *))(*(_QWORD *)a1 + 48))(a1, v7, a3, a4);
}

void sub_212AE0FFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUProvisioner::finish(_DWORD *a1, void *lpsrc, uint64_t a3)
{
  void *exception;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (lpsrc)
  if (a1[4] != 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 70, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUProvisioner.cpp", 0x4Fu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid BBU provisionin support type.\")", v7, v8, v9, v10);
  }
  return (*(uint64_t (**)(_DWORD *, void *, uint64_t))(*(_QWORD *)a1 + 56))(a1, lpsrc, a3);
}

void sub_212AE10B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_13()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ICEARIContext>::~PthreadMutexGuardPolicy, &ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance, &dword_212A4D000);
  }
  return result;
}

uint64_t eUICC::ClearMetadata::GetListOfIccids(int a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _WORD *v11;
  const void *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFData *v17;
  char *v18;
  CFIndex Length;
  const __CFAllocator *v20;
  __CFData *MutableCopy;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  int v36;
  char v37;
  char v38;
  char v39;
  CFDataRef v40;
  CFTypeRef cf;
  __int128 v42;
  __int128 v43;
  _DWORD v44[5];
  unint64_t v45[3];
  unint64_t v46;
  unint64_t v47[4];
  char *v48;
  char *v49;
  char *v50;
  __int16 v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  char *v58;

  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(0, 0xFFFFFFFFLL, "VinylClearMetadata", (const char *)&str_20, "VinylClearMetadata::GetListOfIccids: Requesting Profile List\n", a6, a7, a8, v37);
  v11 = operator new(7uLL);
  v57 = (char *)v11 + 7;
  v58 = (char *)v11 + 7;
  *(_DWORD *)v11 = 1543777727;
  v11[2] = 23042;
  *((_BYTE *)v11 + 6) = -107;
  v55 = 0;
  v56 = v11;
  v53 = 0;
  v54 = 0;
  v52 = 0;
  v51 = 0;
  (*(void (**)(_QWORD, void **, _BYTE **, __int16 *))(*(_QWORD *)*a3 + 48))(*a3, &v56, &v53, &v51);
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v12 = v53;
  v13 = v54 - v53;
  if (v54 != v53)
  {
    if ((v13 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v48 = (char *)operator new(v54 - v53);
    v50 = &v48[v13];
    memcpy(v48, v12, v13);
    v49 = &v48[v13];
  }
  *(_QWORD *)&v42 = 0;
  if (ctu::cf::convert_copy())
  {
    v17 = (const __CFData *)v42;
    v52 = v42;
    v18 = v48;
    if (!v48)
      goto LABEL_11;
    goto LABEL_10;
  }
  v17 = 0;
  v18 = v48;
  if (v48)
  {
LABEL_10:
    v49 = v18;
    operator delete(v18);
  }
LABEL_11:
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(0, 0xFFFFFFFFLL, "VinylClearMetadata", (const char *)&str_20, "VinylClearMetadata::GetListOfIccids: Extracting Profile List\n", v14, v15, v16, v38);
  memset(v47, 170, sizeof(v47));
  v46 = 0xAAAAAAAAAAAAAAAALL;
  Length = CFDataGetLength(v17);
  v20 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  MutableCopy = CFDataCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], Length, v17);
  v45[2] = (unint64_t)MutableCopy;
  v45[0] = (unint64_t)CFDataGetMutableBytePtr(MutableCopy);
  v45[1] = CFDataGetLength(MutableCopy);
  if (DERDecodeSeqContentInit(v45, &v47[2]))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
LABEL_15:
      v25 = "DR_Success == der_ret";
LABEL_16:
      _BBULog(25, 0xFFFFFFFFLL, "VinylClearMetadata", (const char *)&str_20, "Condition <<%s>> failed %s %s/%d\n", v22, v23, v24, (char)v25);
      v26 = 1;
      goto LABEL_17;
    }
LABEL_69:
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    goto LABEL_15;
  }
  if (DERDecodeSeqNext(&v47[2], &v46) || v46 != 0xA00000000000002DLL)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v25 = "DR_Success == der_ret && TAG_PILR == dec.tag";
    goto LABEL_16;
  }
  if (DERDecodeSeqContentInit(v47, &v47[2]))
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_15;
    goto LABEL_69;
  }
  if (DERDecodeSeqNext(&v47[2], &v46) || v46 != 0xA000000000000000)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v25 = "DR_Success == der_ret && TAG_PILR_OK == dec.tag";
    goto LABEL_16;
  }
  if (DERDecodeSeqContentInit(v47, &v47[2]))
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_15;
    goto LABEL_69;
  }
  v26 = 0;
  while (DERDecodeSeqNext(&v47[2], &v46) != 1)
  {
    memset(v44, 170, sizeof(v44));
    *(_QWORD *)&v31 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v42 = v31;
    v43 = v31;
    cf = 0;
    if (!DERDecodeSeqContentInit(v47, (unint64_t *)&v44[1]))
    {
      if (v46 != 0xE000000000000003)
      {
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        v35 = "DR_Success == der_ret && TAG_PI == dec.tag";
        goto LABEL_45;
      }
      {
        if (gBBULogMaskGet(void)::once == -1)
          goto LABEL_44;
      }
      else
      {
        v40 = CFDataCreate(v20, (const UInt8 *)v42, *((CFIndex *)&v42 + 1));
        ctu::cf::CFSharedRef<__CFData const>::operator=(&cf, (const void **)&v40);
        if (!DERParseInteger((char **)&v43, v44))
        {
          if (!a1 || v44[0] == 1)
          {
            std::vector<ctu::cf::CFSharedRef<__CFData const>>::push_back[abi:ne180100](a2, cf);
            v36 = 0;
          }
          else
          {
            v36 = 3;
          }
          goto LABEL_46;
        }
        if (gBBULogMaskGet(void)::once == -1)
          goto LABEL_44;
      }
LABEL_65:
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      goto LABEL_44;
    }
    if (gBBULogMaskGet(void)::once != -1)
      goto LABEL_65;
LABEL_44:
    v35 = "DR_Success == der_ret";
LABEL_45:
    _BBULog(25, 0xFFFFFFFFLL, "VinylClearMetadata", (const char *)&str_20, "Condition <<%s>> failed %s %s/%d\n", v32, v33, v34, (char)v35);
    v36 = 2;
    v26 = 1;
LABEL_46:
    if (cf)
      CFRelease(cf);
    if (v36 && v36 != 3)
      goto LABEL_17;
  }
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(0, 0xFFFFFFFFLL, "VinylClearMetadata", (const char *)&str_20, "VinylClearMetadata::GetListOfIccids: Successfully populated ICCID list!\n", v28, v29, v30, v39);
LABEL_17:
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  return v26;
}

void sub_212AE172C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,const void *a27)
{
  uint64_t v27;
  void *v29;
  void *v30;

  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a16);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(&a27);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)(v27 - 144));
  v30 = *(void **)(v27 - 136);
  if (v30)
  {
    *(_QWORD *)(v27 - 128) = v30;
    operator delete(v30);
    v29 = *(void **)(v27 - 112);
    if (v29)
    {
LABEL_6:
      *(_QWORD *)(v27 - 104) = v29;
      operator delete(v29);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v29 = *(void **)(v27 - 112);
    if (v29)
      goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFData const>::operator=(const void **a1, const void **a2)
{
  const void *v3;

  v3 = *a1;
  *a1 = *a2;
  if (v3)
    CFRelease(v3);
  return a1;
}

void std::vector<ctu::cf::CFSharedRef<__CFData const>>::push_back[abi:ne180100](uint64_t a1, CFTypeRef cf)
{
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  const void *v27;
  const void *v28;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = cf;
    if (cf)
      CFRetain(cf);
    v6 = v5 + 8;
    goto LABEL_22;
  }
  v7 = *(char **)a1;
  v8 = (uint64_t)&v5[-*(_QWORD *)a1];
  v9 = v8 >> 3;
  v10 = (v8 >> 3) + 1;
  if (v10 >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v7;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(8 * v12);
    v14 = &v13[8 * v9];
    *(_QWORD *)v14 = cf;
    if (!cf)
    {
LABEL_14:
      v15 = &v13[8 * v12];
      v6 = v14 + 8;
      v16 = (char *)(v5 - v7);
      if (v5 != v7)
        goto LABEL_15;
LABEL_19:
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v15;
      goto LABEL_20;
    }
  }
  else
  {
    v13 = 0;
    v14 = (char *)(8 * v9);
    *(_QWORD *)(8 * v9) = cf;
    if (!cf)
      goto LABEL_14;
  }
  CFRetain(cf);
  v7 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  v15 = &v13[8 * v12];
  v6 = v14 + 8;
  v16 = &v5[-*(_QWORD *)a1];
  if (v5 == *(char **)a1)
    goto LABEL_19;
LABEL_15:
  v17 = (unint64_t)(v16 - 8);
  if (v17 < 0x78)
  {
    v18 = v5;
    goto LABEL_29;
  }
  if (&v13[v8 - (v17 & 0xFFFFFFFFFFFFFFF8) - 8] < v5 && &v5[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] < v14)
  {
    v18 = v5;
    do
    {
LABEL_29:
      v25 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v14 - 1) = v25;
      v14 -= 8;
      *(_QWORD *)v18 = 0;
    }
    while (v18 != v7);
    goto LABEL_30;
  }
  v19 = (v17 >> 3) + 1;
  v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
  v14 -= v20;
  v18 = &v5[-v20];
  v21 = v5 - 16;
  v22 = &v13[8 * v9 - 16];
  v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *(_OWORD *)v21;
    *((_OWORD *)v22 - 1) = *((_OWORD *)v21 - 1);
    *(_OWORD *)v22 = v24;
    *((_OWORD *)v21 - 1) = 0uLL;
    *(_OWORD *)v21 = 0uLL;
    v21 -= 32;
    v22 -= 32;
    v23 -= 4;
  }
  while (v23);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_29;
LABEL_30:
  v7 = *(char **)a1;
  v26 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v15;
  while (v26 != v7)
  {
    v28 = (const void *)*((_QWORD *)v26 - 1);
    v26 -= 8;
    v27 = v28;
    if (v28)
      CFRelease(v27);
  }
LABEL_20:
  if (v7)
    operator delete(v7);
LABEL_22:
  *(_QWORD *)(a1 + 8) = v6;
}

uint64_t eUICC::ClearMetadata::ClearMetadataForIccids(CFDataRef **a1, _QWORD *a2)
{
  CFDataRef *v2;
  CFDataRef *v3;
  char *v5;
  const UInt8 *BytePtr;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int16 v14;
  void *__p;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char *v20;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v13 = xmmword_212B549C0;
    do
    {
      v5 = (char *)operator new(0x15uLL);
      v19 = v5 + 21;
      v20 = v5 + 21;
      *(_OWORD *)v5 = v13;
      *(_QWORD *)(v5 + 13) = 0x8002E100000000;
      v18 = v5;
      BytePtr = CFDataGetBytePtr(*v2);
      v7 = (char *)v18;
      v8 = *(_QWORD *)BytePtr;
      *(_DWORD *)((char *)v18 + 13) = *((_DWORD *)BytePtr + 2);
      *(_QWORD *)(v7 + 5) = v8;
      __p = 0;
      v16 = 0;
      v17 = 0;
      v14 = 0;
      (*(void (**)(_QWORD, void **, void **, __int16 *))(*(_QWORD *)*a2 + 48))(*a2, &v18, &__p, &v14);
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      _BBULog(0, 0xFFFFFFFFLL, "VinylClearMetadata", (const char *)&str_20, "VinylClearMetadata::ClearMetadataForIccids: Attempted metadata clear for ICCID\n", v9, v10, v11, v13);
      if (__p)
      {
        v16 = __p;
        operator delete(__p);
      }
      if (v18)
      {
        v19 = v18;
        operator delete(v18);
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return 0;
}

void sub_212AE1B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t eUICC::ClearMetadata::Perform(int a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *i;
  const void *v17;
  const void *v18;
  void *__p;
  char *v21;
  uint64_t v22;

  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(0, 0xFFFFFFFFLL, "VinylClearMetadata", (const char *)&str_20, "VinylClearMetadata::Perform: onlyBootstrap=%d\n", a6, a7, a8, a1);
  __p = 0;
  v21 = 0;
  v22 = 0;
  eUICC::ClearMetadata::GetListOfIccids(a1, (uint64_t)&__p, a2, v10, v11, v12, v13, v14);
  eUICC::ClearMetadata::ClearMetadataForIccids((CFDataRef **)&__p, a2);
  v15 = (char *)__p;
  if (__p)
  {
    for (i = v21; i != v15; i -= 8)
    {
      v18 = (const void *)*((_QWORD *)i - 1);
      v17 = v18;
      if (v18)
        CFRelease(v17);
    }
    operator delete(v15);
  }
  return 0;
}

void sub_212AE1CB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<ctu::cf::CFSharedRef<__CFData const>>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<ctu::cf::CFSharedRef<__CFData const>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  const void *v5;
  const void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (const void *)*((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if (v6)
          CFRelease(v5);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void BasebandRestore::create(BasebandRestore *this@<X0>, ACFULogging **a2@<X8>)
{
  char *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  ACFULogging *v13;
  ACFULogging *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  ACFULogging::getLogInstance(this);
  ACFULogging::handleMessage();
  *a2 = (ACFULogging *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (ACFULogging *)0xAAAAAAAAAAAAAAAALL;
  v5 = (char *)operator new(0x1E8uLL);
  ACFURestore::ACFURestore((ACFURestore *)v5);
  *((_QWORD *)v5 + 42) = 0;
  *((_QWORD *)v5 + 43) = 0;
  *(_QWORD *)v5 = off_24CE82D50;
  *((_DWORD *)v5 + 93) = 0;
  *((_WORD *)v5 + 188) = 0;
  v5[384] = 0;
  v5[392] = 0;
  *((_WORD *)v5 + 200) = 0;
  v5[402] = 0;
  *((_QWORD *)v5 + 59) = 0;
  v5[480] = 0;
  *((_QWORD *)v5 + 44) = 0;
  *((_QWORD *)v5 + 45) = 0;
  v5[368] = 0;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 450) = 0u;
  *a2 = (ACFULogging *)v5;
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7 = v6;
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_24CE82E20;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  a2[1] = (ACFULogging *)v6;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  *((_QWORD *)v5 + 42) = v5;
  *((_QWORD *)v5 + 43) = v6;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    v13 = *a2;
    if (*a2)
      goto LABEL_9;
LABEL_16:
    ACFULogging::getLogInstance(v13);
    ACFULogging::handleMessage();
    return;
  }
  v13 = *a2;
  if (!*a2)
    goto LABEL_16;
LABEL_9:
  v14 = (ACFULogging *)(*(uint64_t (**)(ACFULogging *, BasebandRestore *, const __CFString *))(*(_QWORD *)v13 + 40))(v13, this, CFSTR("Cellular1,Ticket"));
  if ((_DWORD)v14)
  {
    ACFULogging::getLogInstance(v14);
    ACFULogging::handleMessage();
    v15 = (std::__shared_weak_count *)a2[1];
    *a2 = 0;
    a2[1] = 0;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_212AE1F38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_212AE1F4C(_Unwind_Exception *a1)
{
  BasebandRestore *v1;
  void *v3;

  BasebandRestore::~BasebandRestore(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_212AE1F64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212AE1F78(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BasebandRestore::~BasebandRestore(BasebandRestore *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)this = off_24CE82D50;
  v2 = (const void *)*((_QWORD *)this + 59);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 57);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 56);
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 55);
  if (v5)
    CFRelease(v5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 54);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 52);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  ACFURestore::~ACFURestore(this);
}

{
  void *v1;

  BasebandRestore::~BasebandRestore(this);
  operator delete(v1);
}

uint64_t BasebandRestore::init(BasebandRestore *this, const __CFDictionary *a2, const void *a3)
{
  _QWORD *v6;
  ACFULogging *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  ACFULogging *v11;
  __CFDictionary *v12;
  __CFDictionary *MutableCopy;
  const __CFAllocator *v14;
  CFMutableDictionaryRef Mutable;
  ACFULogging *v16;
  CFTypeID v17;
  ACFULogging *TypeID;
  ACFULogging *Value;
  ACFURestore *v20;
  const __CFBoolean *v21;
  const __CFBoolean *v22;
  CFTypeID v23;
  ACFULogging *v24;
  _BOOL4 v25;
  ACFURestore *v26;
  const __CFBoolean *v27;
  const __CFBoolean *v28;
  CFTypeID v29;
  ACFULogging *v30;
  int v31;
  int v32;
  const __CFDictionary *v33;
  const void *v34;
  const void *v35;
  CFTypeID v36;
  ACFULogging *v37;
  CFTypeID v38;
  ACFULogging *v39;
  uint64_t v40;
  const __CFBoolean *v41;
  const __CFBoolean *v42;
  CFTypeID v43;
  ACFULogging *v44;
  _BOOL4 v45;
  const __CFBoolean *v46;
  const __CFBoolean *v47;
  CFTypeID v48;
  _BOOL4 v49;
  const void *v50;
  CFTypeID v51;
  CFTypeID v52;
  int v53;
  ACFURestore *v54;
  const __CFBoolean *v55;
  const __CFBoolean *v56;
  CFTypeID v57;
  BOOL v58;
  int v59;
  ACFURestore *v60;
  const __CFBoolean *v61;
  const __CFBoolean *v62;
  CFTypeID v63;
  BOOL v64;
  uint64_t isPreflight;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_weak_owners;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  ACFURestore *v77;
  _QWORD *v78;
  std::__shared_weak_count *v79;
  const __CFString *v80;
  const void *v81;
  CFTypeID v82;
  ACFULogging *v83;
  uint64_t v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  ACFULogging *v87;
  std::string *v88;
  __int128 v89;
  std::string *v90;
  __int128 v91;
  uint64_t v92;
  _QWORD *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  const void *v102;
  std::string::size_type v103;
  _QWORD *v104;
  std::__shared_weak_count *v105;
  uint64_t (*v106)(uint64_t);
  const __CFBoolean *v107;
  const __CFBoolean *v108;
  CFTypeID v109;
  std::string::size_type v110;
  uint64_t (*v111)(uint64_t);
  uint64_t (*v112)(uint64_t);
  __CFDictionary *v113;
  __int128 v114;
  int64_t v115;
  tm *v116;
  CFStringRef v117;
  std::string *v118;
  __int128 v119;
  std::string *v120;
  __int128 v121;
  ACFULogging *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  ACFULogging *v130;
  void *v131;
  char v132;
  const __CFString *v133;
  CFTypeID v134;
  ACFULogging *v135;
  const void *URLByAppendingStrings;
  void *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  ACFULogging *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::string::size_type v146;
  ACFULogging *v147;
  uint64_t (*v148)(uint64_t);
  __int128 v149;
  ACFULogging *v150;
  std::string *v151;
  __int128 v152;
  std::string *v153;
  __int128 v154;
  std::string::size_type v155;
  _QWORD *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  ACFULogging *v161;
  unint64_t *v162;
  unint64_t v163;
  ACFULogging *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  ACFULogging *v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  __int128 v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t *v201;
  unint64_t v202;
  uint64_t *v203;
  unint64_t v204;
  uint64_t *v205;
  unint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  std::string::size_type v210;
  std::string::size_type v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  std::string::size_type v215;
  unint64_t *v216;
  unint64_t v217;
  __CFDictionary *v218;
  unint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  const void *v226;
  uint64_t v227;
  uint64_t **v228;
  uint64_t *v229;
  int v230;
  uint64_t **v231;
  uint64_t **v232;
  int v233;
  uint64_t *v234;
  uint64_t *v235;
  char *v236;
  uint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  _QWORD *v245;
  int v246;
  uint64_t v247;
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  _QWORD *i;
  _QWORD *v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *size;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::string *v266;
  const void *v267;
  _BOOL4 v268;
  CFTypeRef cf;
  ACFURestore *v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  uint64_t v273;
  std::__shared_weak_count *v274;
  uint64_t v275;
  std::__shared_weak_count *v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  uint64_t v279;
  std::__shared_weak_count *v280;
  uint64_t v281;
  std::__shared_weak_count *v282;
  uint64_t v283;
  std::__shared_weak_count *v284;
  uint64_t v285[3];
  uint64_t v286[3];
  std::string v287;
  uint64_t v288[3];
  std::string v289;
  std::string v290;
  CFTypeRef v291;
  uint64_t valuePtr;
  char v293[16];
  __int128 v294;
  _BYTE v295[28];
  uint64_t v296;

  v296 = *MEMORY[0x24BDAC8D0];
  v291 = 0;
  valuePtr = 0;
  v6 = operator new(0x28uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = off_24CE82E70;
  v7 = (ACFULogging *)MEMORY[0x212BF9FC8](v6 + 3, CFSTR("BasebandRestore"));
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 44) = v7;
  *((_QWORD *)this + 45) = v6;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v270 = this;
  ACFULogging::getLogInstance(v7);
  v11 = (ACFULogging *)ACFULogging::handleMessage();
  if (!a2)
  {
    ACFULogging::getLogInstance(v11);
LABEL_430:
    ACFULogging::handleMessage();
    v40 = 1;
    goto LABEL_403;
  }
  if (CFDictionaryGetValue(a2, CFSTR("Options")))
  {
    v12 = 0;
    MutableCopy = a2;
    goto LABEL_12;
  }
  v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, a2);
  if (!MutableCopy)
  {
    ACFULogging::getLogInstance(0);
    goto LABEL_430;
  }
  Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
  {
    ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage();
    v40 = 1;
    v12 = MutableCopy;
    goto LABEL_402;
  }
  CFDictionaryAddValue(MutableCopy, CFSTR("Options"), Mutable);
  CFRelease(Mutable);
  v12 = MutableCopy;
LABEL_12:
  v16 = (ACFULogging *)ACFURestore::init(v270, MutableCopy, a3);
  if ((_DWORD)v16
    || (ParseUpdaterDebugArgs(MutableCopy, (ACFURestore *)((char *)v270 + 368)),
        UpdaterDebugArgs::print((ACFURestore *)((char *)v270 + 368)),
        v16 = (ACFULogging *)(*(uint64_t (**)(ACFURestore *))(*(_QWORD *)v270 + 104))(v270),
        (_DWORD)v16))
  {
    ACFULogging::getLogInstance(v16);
    ACFULogging::handleMessage();
    v40 = 4000;
    if (!v12)
      goto LABEL_403;
LABEL_402:
    CFRelease(v12);
    goto LABEL_403;
  }
  cf = CFDictionaryGetValue(a2, CFSTR("BootMode"));
  if (!cf)
    goto LABEL_17;
  AMSupportSafeRetain();
  v17 = CFGetTypeID(cf);
  TypeID = (ACFULogging *)CFNumberGetTypeID();
  if ((ACFULogging *)v17 == TypeID)
  {
    Value = (ACFULogging *)CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, (char *)&valuePtr + 4);
    if ((_DWORD)Value)
    {
LABEL_17:
      if (CFDictionaryContainsKey(*((CFDictionaryRef *)v270 + 15), CFSTR("skipCoredump")))
      {
        v20 = v270;
        v21 = (const __CFBoolean *)CFDictionaryGetValue(*((CFDictionaryRef *)v270 + 15), CFSTR("skipCoredump"));
        v22 = v21;
        if (!v21)
          goto LABEL_412;
        v23 = CFGetTypeID(v21);
        v24 = (ACFULogging *)CFBooleanGetTypeID();
        if ((ACFULogging *)v23 != v24)
          goto LABEL_413;
        v25 = CFBooleanGetValue(v22) == 0;
      }
      else
      {
        v25 = 1;
        v20 = v270;
      }
      if (!CFDictionaryContainsKey(*((CFDictionaryRef *)v20 + 15), CFSTR("noTimeout")))
      {
        v268 = *((_BYTE *)v270 + 368) != 0;
        v26 = v270;
        if (!v25)
          goto LABEL_34;
        goto LABEL_28;
      }
      v26 = v270;
      v27 = (const __CFBoolean *)CFDictionaryGetValue(*((CFDictionaryRef *)v270 + 15), CFSTR("noTimeout"));
      v28 = v27;
      if (v27)
      {
        v29 = CFGetTypeID(v27);
        v24 = (ACFULogging *)CFBooleanGetTypeID();
        if ((ACFULogging *)v29 == v24)
        {
          v30 = (ACFULogging *)CFBooleanGetValue(v28);
          v31 = (int)v30;
          ACFULogging::getLogInstance(v30);
          v268 = v31 != 0;
          ACFULogging::handleMessage();
          if (!v25)
            goto LABEL_34;
LABEL_28:
          if ((HIDWORD(valuePtr) - 1) <= 1)
          {
            v287.__r_.__value_.__r.__words[0] = 0;
            v32 = CFDictionaryContainsKey(*((CFDictionaryRef *)v26 + 15), CFSTR("coreDumpPath"));
            v33 = (const __CFDictionary *)*((_QWORD *)v26 + 15);
            if (v32)
            {
              v34 = CFDictionaryGetValue(v33, CFSTR("coreDumpPath"));
              v35 = v34;
              if (!v34)
                goto LABEL_435;
              v36 = CFGetTypeID(v34);
              v37 = (ACFULogging *)CFStringGetTypeID();
              if ((ACFULogging *)v36 != v37)
                goto LABEL_437;
              v38 = CFGetTypeID(v35);
              v39 = (ACFULogging *)CFStringGetTypeID();
              if ((ACFULogging *)v38 == v39)
                v39 = (ACFULogging *)CFRetain(v35);
              else
                v35 = 0;
              v287.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
              if (v35)
                v106 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
              else
                v106 = 0;
              if (!v106)
              {
                ACFULogging::getLogInstance(v39);
                ACFULogging::handleMessage();
LABEL_439:
                v132 = 0;
                v40 = 4008;
LABEL_150:
                if (v287.__r_.__value_.__r.__words[0])
                  CFRelease(v287.__r_.__value_.__l.__data_);
                if ((v132 & 1) == 0)
                {
                  v102 = 0;
                  v81 = 0;
                  v50 = 0;
                  goto LABEL_393;
                }
LABEL_35:
                if (CFDictionaryContainsKey(*((CFDictionaryRef *)v26 + 15), CFSTR("askToReset")))
                {
                  v41 = (const __CFBoolean *)CFDictionaryGetValue(*((CFDictionaryRef *)v270 + 15), CFSTR("askToReset"));
                  v42 = v41;
                  if (!v41)
                  {
LABEL_418:
                    ACFULogging::getLogInstance(0);
                    ACFULogging::handleMessage();
                    goto LABEL_419;
                  }
                  v43 = CFGetTypeID(v41);
                  v44 = (ACFULogging *)CFBooleanGetTypeID();
                  if ((ACFULogging *)v43 != v44)
                  {
LABEL_420:
                    ACFULogging::getLogInstance(v44);
                    ACFULogging::handleMessage();
                    goto LABEL_421;
                  }
                  v45 = CFBooleanGetValue(v42) != 0;
                }
                else
                {
                  v45 = 0;
                }
                if (!CFDictionaryContainsKey(*((CFDictionaryRef *)v270 + 15), CFSTR("skipReset")))
                {
                  v49 = 0;
LABEL_45:
                  v50 = CFDictionaryGetValue(a2, CFSTR("ImageTransferSegmentSizeBytes"));
                  if (v50)
                  {
                    AMSupportSafeRetain();
                    v51 = CFGetTypeID(v50);
                    v52 = CFNumberGetTypeID();
                    if (v51 != v52)
                      goto LABEL_426;
                    v52 = CFNumberGetValue((CFNumberRef)v50, kCFNumberSInt32Type, &valuePtr);
                    if (!(_DWORD)v52)
                      goto LABEL_426;
                    ACFULogging::getLogInstance((ACFULogging *)v52);
                    ACFULogging::handleMessage();
                  }
                  v53 = CFDictionaryContainsKey(*((CFDictionaryRef *)v270 + 15), CFSTR("BBUtilCmd"));
                  v54 = v270;
                  if (v53)
                  {
                    v55 = (const __CFBoolean *)CFDictionaryGetValue(*((CFDictionaryRef *)v270 + 15), CFSTR("BBUtilCmd"));
                    v56 = v55;
                    if (!v55)
                      goto LABEL_423;
                    v57 = CFGetTypeID(v55);
                    v52 = CFBooleanGetTypeID();
                    if (v57 != v52)
                      goto LABEL_426;
                    v58 = CFBooleanGetValue(v56) != 0;
                    v54 = v270;
                    *((_BYTE *)v270 + 464) = v58;
                  }
                  v59 = CFDictionaryContainsKey(*((CFDictionaryRef *)v54 + 15), CFSTR("ccBoot"));
                  v60 = v270;
                  if (!v59)
                  {
LABEL_57:
                    isPreflight = ACFURestore::isPreflight(v60);
                    if ((isPreflight & 1) != 0)
                    {
                      ACFULogging::getLogInstance((ACFULogging *)isPreflight);
                      ACFULogging::handleMessage();
                      v66 = valuePtr;
                      v67 = (std::__shared_weak_count *)*((_QWORD *)v270 + 24);
                      v273 = *((_QWORD *)v270 + 23);
                      v274 = v67;
                      if (v67)
                      {
                        v68 = (unint64_t *)&v67->__shared_owners_;
                        do
                          v69 = __ldxr(v68);
                        while (__stxr(v69 + 1, v68));
                      }
                      v70 = (std::__shared_weak_count *)*((_QWORD *)v270 + 43);
                      v271 = *((_QWORD *)v270 + 42);
                      v272 = v70;
                      if (v70)
                      {
                        p_shared_weak_owners = (unint64_t *)&v70->__shared_weak_owners_;
                        do
                          v72 = __ldxr(p_shared_weak_owners);
                        while (__stxr(v72 + 1, p_shared_weak_owners));
                      }
                      v73 = 0x100000000000000;
                      if (!v268)
                        v73 = 0;
                      v74 = 0x10000000000;
                      if (!v45)
                        v74 = 0;
                      v75 = 0x100000000;
                      if (!v25)
                        v75 = 0;
                      BasebandUpdaterTransport::create(&v273, &v271, v73 | v75 | v74 | v66, (ACFUACIPCTransport **)v293);
                      v76 = *(_QWORD *)v293;
                      v77 = v270;
                      if (*(_QWORD *)v293)
                      {
                        v78 = operator new(0x20uLL);
                        *v78 = off_24CE82F60;
                        v78[1] = 0;
                        v78[2] = 0;
                        v78[3] = v76;
                        *(_QWORD *)v293 = 0;
                        v79 = (std::__shared_weak_count *)*((_QWORD *)v270 + 22);
                        *((_QWORD *)v270 + 21) = v76;
                        *((_QWORD *)v270 + 22) = v78;
                        if (!v79)
                          goto LABEL_93;
                      }
                      else
                      {
                        *(_QWORD *)v293 = 0;
                        v79 = (std::__shared_weak_count *)*((_QWORD *)v270 + 22);
                        *((_QWORD *)v270 + 21) = 0;
                        *((_QWORD *)v270 + 22) = 0;
                        if (!v79)
                        {
LABEL_93:
                          v97 = *(_QWORD *)v293;
                          *(_QWORD *)v293 = 0;
                          if (v97)
                            (*(void (**)(uint64_t))(*(_QWORD *)v97 + 64))(v97);
                          v98 = v272;
                          if (v272)
                            std::__shared_weak_count::__release_weak(v272);
                          v99 = v274;
                          if (v274)
                          {
                            v100 = (unint64_t *)&v274->__shared_owners_;
                            do
                              v101 = __ldaxr(v100);
                            while (__stlxr(v101 - 1, v100));
                            if (!v101)
                            {
                              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                              std::__shared_weak_count::__release_weak(v99);
                            }
                          }
                          if (!*((_QWORD *)v270 + 21))
                          {
                            ACFULogging::getLogInstance((ACFULogging *)v98);
                            ACFULogging::handleMessage();
                            v102 = 0;
                            v81 = 0;
                            v40 = 4008;
                            goto LABEL_393;
                          }
                          v102 = 0;
                          v81 = 0;
                          goto LABEL_291;
                        }
                      }
                      v95 = (unint64_t *)&v79->__shared_owners_;
                      do
                        v96 = __ldaxr(v95);
                      while (__stlxr(v96 - 1, v95));
                      if (!v96)
                      {
                        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                        std::__shared_weak_count::__release_weak(v79);
                      }
                      goto LABEL_93;
                    }
                    if ((HIDWORD(valuePtr) - 1) < 2)
                    {
                      v81 = CFDictionaryGetValue(a2, CFSTR("firmwareDataFolder"));
                      if (v81)
                      {
                        AMSupportSafeRetain();
                        v82 = CFGetTypeID(v81);
                        v83 = (ACFULogging *)CFStringGetTypeID();
                        if ((ACFULogging *)v82 != v83)
                        {
                          ACFULogging::getLogInstance(v83);
                          ACFULogging::handleMessage();
                          v102 = 0;
                          v40 = 4002;
                          goto LABEL_393;
                        }
                        GetBasebandTatsuTagToFileNameMap(v286);
                        RTKitFirmware::create();
                        v84 = *(_QWORD *)v293;
                        if (*(_QWORD *)v293)
                        {
                          v85 = operator new(0x20uLL);
                          *v85 = off_24CE82F10;
                          v85[1] = 0;
                          v85[2] = 0;
                          v85[3] = v84;
                          *(_QWORD *)v293 = 0;
                          v86 = (std::__shared_weak_count *)*((_QWORD *)v270 + 20);
                          *((_QWORD *)v270 + 19) = v84;
                          *((_QWORD *)v270 + 20) = v85;
                          if (!v86)
                            goto LABEL_163;
                        }
                        else
                        {
                          *(_QWORD *)v293 = 0;
                          v86 = (std::__shared_weak_count *)*((_QWORD *)v270 + 20);
                          *((_QWORD *)v270 + 19) = 0;
                          *((_QWORD *)v270 + 20) = 0;
                          if (!v86)
                            goto LABEL_163;
                        }
                        v138 = (unint64_t *)&v86->__shared_owners_;
                        do
                          v139 = __ldaxr(v138);
                        while (__stlxr(v139 - 1, v138));
                        if (!v139)
                        {
                          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                          std::__shared_weak_count::__release_weak(v86);
                        }
LABEL_163:
                        v140 = *(_QWORD *)v293;
                        *(_QWORD *)v293 = 0;
                        if (v140)
                          (*(void (**)(uint64_t))(*(_QWORD *)v140 + 56))(v140);
                        std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v286, (char *)v286[1]);
                        if (!*((_QWORD *)v270 + 19))
                        {
                          ACFULogging::getLogInstance(v141);
                          ACFULogging::handleMessage();
                          v102 = 0;
                          v40 = 1000;
                          goto LABEL_393;
                        }
                        v102 = 0;
                        v142 = valuePtr;
                        v143 = (std::__shared_weak_count *)*((_QWORD *)v270 + 24);
                        v283 = *((_QWORD *)v270 + 23);
                        v284 = v143;
                        if (!v143)
                          goto LABEL_218;
                        goto LABEL_216;
                      }
                      *(_QWORD *)v293 = 0xAAAAAAAAAAAAAAAALL;
                      *(_QWORD *)v293 = ACFUDataAccess::createPersonalizedFirmwarePath((ACFUDataAccess *)CFSTR("Baseband"), v80);
                      if (!*(_QWORD *)v293)
                      {
                        ACFULogging::getLogInstance(0);
                        ACFULogging::handleMessage();
                        v266 = (std::string *)v293;
                        goto LABEL_448;
                      }
                      GetBasebandTatsuTagToFileNameMap(v285);
                      RTKitFirmware::create();
                      v103 = v290.__r_.__value_.__r.__words[0];
                      if (v290.__r_.__value_.__r.__words[0])
                      {
                        v104 = operator new(0x20uLL);
                        *v104 = off_24CE82F10;
                        v104[1] = 0;
                        v104[2] = 0;
                        v104[3] = v103;
                        v290.__r_.__value_.__r.__words[0] = 0;
                        v105 = (std::__shared_weak_count *)*((_QWORD *)v270 + 20);
                        *((_QWORD *)v270 + 19) = v103;
                        *((_QWORD *)v270 + 20) = v104;
                        if (!v105)
                          goto LABEL_173;
                      }
                      else
                      {
                        v290.__r_.__value_.__r.__words[0] = 0;
                        v105 = (std::__shared_weak_count *)*((_QWORD *)v270 + 20);
                        *((_QWORD *)v270 + 19) = 0;
                        *((_QWORD *)v270 + 20) = 0;
                        if (!v105)
                        {
LABEL_173:
                          v146 = v290.__r_.__value_.__r.__words[0];
                          v290.__r_.__value_.__r.__words[0] = 0;
                          if (v146)
                            (*(void (**)(std::string::size_type))(*(_QWORD *)v146 + 56))(v146);
                          std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v285, (char *)v285[1]);
                          if (*((_QWORD *)v270 + 19))
                          {
                            if (*(_QWORD *)v293)
                              CFRelease(*(CFTypeRef *)v293);
                            goto LABEL_202;
                          }
                          ACFULogging::getLogInstance(v147);
                          ACFULogging::handleMessage();
                          v40 = 1000;
                          v266 = (std::string *)v293;
LABEL_448:
                          ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)&v266->__r_.__value_.__l.__data_);
                          v102 = 0;
                          v81 = 0;
                          goto LABEL_393;
                        }
                      }
                      v144 = (unint64_t *)&v105->__shared_owners_;
                      do
                        v145 = __ldaxr(v144);
                      while (__stlxr(v145 - 1, v144));
                      if (!v145)
                      {
                        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                        std::__shared_weak_count::__release_weak(v105);
                      }
                      goto LABEL_173;
                    }
                    if (!HIDWORD(valuePtr))
                    {
                      if (ACFURestore::isPostSealing(v270))
                      {
                        v287.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
                        v87 = (ACFULogging *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%@/%@/"), *((_QWORD *)v270 + 41), CFSTR("/usr/standalone/firmware/Baseband/"));
                        v287.__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
                        if (!v87)
                        {
                          ACFULogging::getLogInstance(0);
                          ACFULogging::handleMessage();
LABEL_447:
                          v266 = &v287;
                          goto LABEL_448;
                        }
                        ACFULogging::getLogInstance(v87);
                        *((_BYTE *)&v289.__r_.__value_.__s + 23) = 15;
                        strcpy((char *)&v289, "BasebandRestore");
                        v88 = std::string::append(&v289, "::", 2uLL);
                        v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
                        v290.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v89;
                        v88->__r_.__value_.__l.__size_ = 0;
                        v88->__r_.__value_.__r.__words[2] = 0;
                        v88->__r_.__value_.__r.__words[0] = 0;
                        v90 = std::string::append(&v290, "init", 4uLL);
                        v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
                        *(_QWORD *)&v294 = *((_QWORD *)&v90->__r_.__value_.__l + 2);
                        *(_OWORD *)v293 = v91;
                        v90->__r_.__value_.__l.__size_ = 0;
                        v90->__r_.__value_.__r.__words[2] = 0;
                        v90->__r_.__value_.__r.__words[0] = 0;
                        ACFULogging::handleMessageCFType();
                        if (SBYTE7(v294) < 0)
                        {
                          operator delete(*(void **)v293);
                          if ((SHIBYTE(v290.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          {
LABEL_84:
                            if ((SHIBYTE(v289.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                              goto LABEL_85;
LABEL_191:
                            operator delete(v289.__r_.__value_.__l.__data_);
LABEL_85:
                            GetBasebandTatsuTagToFileNameMap(v288);
                            RTKitFirmware::create();
                            v92 = *(_QWORD *)v293;
                            if (*(_QWORD *)v293)
                            {
                              v93 = operator new(0x20uLL);
                              *v93 = off_24CE82F10;
                              v93[1] = 0;
                              v93[2] = 0;
                              v93[3] = v92;
                              *(_QWORD *)v293 = 0;
                              v94 = (std::__shared_weak_count *)*((_QWORD *)v270 + 20);
                              *((_QWORD *)v270 + 19) = v92;
                              *((_QWORD *)v270 + 20) = v93;
                              if (!v94)
                                goto LABEL_197;
                            }
                            else
                            {
                              *(_QWORD *)v293 = 0;
                              v94 = (std::__shared_weak_count *)*((_QWORD *)v270 + 20);
                              *((_QWORD *)v270 + 19) = 0;
                              *((_QWORD *)v270 + 20) = 0;
                              if (!v94)
                              {
LABEL_197:
                                v160 = *(_QWORD *)v293;
                                *(_QWORD *)v293 = 0;
                                if (v160)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v160 + 56))(v160);
                                std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v288, (char *)v288[1]);
                                if (*((_QWORD *)v270 + 19))
                                {
                                  if (v287.__r_.__value_.__r.__words[0])
                                    CFRelease(v287.__r_.__value_.__l.__data_);
LABEL_202:
                                  v102 = 0;
                                  v81 = 0;
                                  v142 = valuePtr;
                                  v143 = (std::__shared_weak_count *)*((_QWORD *)v270 + 24);
                                  v283 = *((_QWORD *)v270 + 23);
                                  v284 = v143;
                                  if (!v143)
                                    goto LABEL_218;
                                  goto LABEL_216;
                                }
                                ACFULogging::getLogInstance(v161);
                                ACFULogging::handleMessage();
                                v40 = 1000;
                                goto LABEL_447;
                              }
                            }
                            v158 = (unint64_t *)&v94->__shared_owners_;
                            do
                              v159 = __ldaxr(v158);
                            while (__stlxr(v159 - 1, v158));
                            if (!v159)
                            {
                              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                              std::__shared_weak_count::__release_weak(v94);
                            }
                            goto LABEL_197;
                          }
                        }
                        else if ((SHIBYTE(v290.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
                          goto LABEL_84;
                        }
                        operator delete(v290.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v289.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_85;
                        goto LABEL_191;
                      }
                      v102 = CFDictionaryGetValue(a2, CFSTR("firmwareSaveFolder"));
                      if (!v102)
                      {
                        URLByAppendingStrings = (const void *)ACFUCommon::createURLByAppendingStrings(*((ACFUCommon **)v270 + 41), CFSTR("/usr/standalone/firmware/Baseband/"), v133);
                        v137 = (void *)v291;
                        v291 = URLByAppendingStrings;
                        if (!v137)
                          goto LABEL_180;
                        goto LABEL_179;
                      }
                      AMSupportSafeRetain();
                      v134 = CFGetTypeID(v102);
                      v135 = (ACFULogging *)CFStringGetTypeID();
                      if ((ACFULogging *)v134 == v135)
                      {
                        URLByAppendingStrings = (const void *)AMSupportCreateURLFromString();
                        v137 = (void *)v291;
                        v291 = URLByAppendingStrings;
                        if (!v137)
                          goto LABEL_180;
LABEL_179:
                        CFRelease(v137);
LABEL_180:
                        v148 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get;
                        if (!URLByAppendingStrings)
                          v148 = 0;
                        if (!v148)
                        {
                          ACFULogging::getLogInstance((ACFULogging *)v137);
                          ACFULogging::handleMessage();
                          v81 = 0;
                          v40 = 4000;
                          goto LABEL_393;
                        }
                        *(_QWORD *)&v149 = 0xAAAAAAAAAAAAAAAALL;
                        *((_QWORD *)&v149 + 1) = 0xAAAAAAAAAAAAAAAALL;
                        *(_DWORD *)&v293[4] = -1431655766;
                        *((_QWORD *)&v294 + 1) = 0xAAAAAAAAAAAAAAAALL;
                        *(_OWORD *)v295 = v149;
                        *(_DWORD *)v293 = 1;
                        *(_QWORD *)&v293[8] = CFSTR("Cellular1,Ticket");
                        *(_QWORD *)&v294 = URLByAppendingStrings;
                        GetBasebandTatsuTagToFileNameMap((uint64_t *)&v294 + 1);
                        ACFULogging::getLogInstance(v150);
                        *((_BYTE *)&v287.__r_.__value_.__s + 23) = 15;
                        strcpy((char *)&v287, "BasebandRestore");
                        v151 = std::string::append(&v287, "::", 2uLL);
                        v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
                        v289.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v152;
                        v151->__r_.__value_.__l.__size_ = 0;
                        v151->__r_.__value_.__r.__words[2] = 0;
                        v151->__r_.__value_.__r.__words[0] = 0;
                        v153 = std::string::append(&v289, "init", 4uLL);
                        v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
                        v290.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v154;
                        v153->__r_.__value_.__l.__size_ = 0;
                        v153->__r_.__value_.__r.__words[2] = 0;
                        v153->__r_.__value_.__r.__words[0] = 0;
                        ACFULogging::handleMessageCFType();
                        if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
                        {
                          operator delete(v290.__r_.__value_.__l.__data_);
                          if ((SHIBYTE(v289.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          {
LABEL_185:
                            if ((SHIBYTE(v287.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                              goto LABEL_186;
LABEL_206:
                            operator delete(v287.__r_.__value_.__l.__data_);
LABEL_186:
                            RTKitFirmware::create();
                            v155 = v290.__r_.__value_.__r.__words[0];
                            if (v290.__r_.__value_.__r.__words[0])
                            {
                              v156 = operator new(0x20uLL);
                              *v156 = off_24CE82F10;
                              v156[1] = 0;
                              v156[2] = 0;
                              v156[3] = v155;
                              v290.__r_.__value_.__r.__words[0] = 0;
                              v157 = (std::__shared_weak_count *)*((_QWORD *)v270 + 20);
                              *((_QWORD *)v270 + 19) = v155;
                              *((_QWORD *)v270 + 20) = v156;
                              if (!v157)
                                goto LABEL_212;
                            }
                            else
                            {
                              v290.__r_.__value_.__r.__words[0] = 0;
                              v157 = (std::__shared_weak_count *)*((_QWORD *)v270 + 20);
                              *((_QWORD *)v270 + 19) = 0;
                              *((_QWORD *)v270 + 20) = 0;
                              if (!v157)
                                goto LABEL_212;
                            }
                            v162 = (unint64_t *)&v157->__shared_owners_;
                            do
                              v163 = __ldaxr(v162);
                            while (__stlxr(v163 - 1, v162));
                            if (!v163)
                            {
                              ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                              std::__shared_weak_count::__release_weak(v157);
                            }
LABEL_212:
                            v164 = (ACFULogging *)v290.__r_.__value_.__r.__words[0];
                            v290.__r_.__value_.__r.__words[0] = 0;
                            if (v164)
                              v164 = (ACFULogging *)(*(uint64_t (**)(ACFULogging *))(*(_QWORD *)v164 + 56))(v164);
                            if (!*((_QWORD *)v270 + 19))
                            {
                              ACFULogging::getLogInstance(v164);
                              ACFULogging::handleMessage();
                              std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)&v294 + 8, *(char **)v295);
                              v81 = 0;
                              v40 = 1000;
                              goto LABEL_393;
                            }
                            std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)&v294 + 8, *(char **)v295);
                            v81 = 0;
                            v142 = valuePtr;
                            v143 = (std::__shared_weak_count *)*((_QWORD *)v270 + 24);
                            v283 = *((_QWORD *)v270 + 23);
                            v284 = v143;
                            if (!v143)
                            {
LABEL_218:
                              v167 = (std::__shared_weak_count *)*((_QWORD *)v270 + 43);
                              v281 = *((_QWORD *)v270 + 42);
                              v282 = v167;
                              if (v167)
                              {
                                v168 = (unint64_t *)&v167->__shared_weak_owners_;
                                do
                                  v169 = __ldxr(v168);
                                while (__stxr(v169 + 1, v168));
                              }
                              v170 = 0x100000000000000;
                              if (!v268)
                                v170 = 0;
                              v171 = 0x1000000000000;
                              if (!v49)
                                v171 = 0;
                              v172 = 0x10000000000;
                              if (!v45)
                                v172 = 0;
                              v173 = 0x100000000;
                              if (!v25)
                                v173 = 0;
                              BasebandUpdaterTransport::create(&v283, &v281, v170 | v173 | v172 | v171 | v142, (ACFUACIPCTransport **)v293);
                              v174 = *(_QWORD *)v293;
                              v77 = v270;
                              if (*(_QWORD *)v293)
                              {
                                v175 = operator new(0x20uLL);
                                *v175 = off_24CE82F60;
                                v175[1] = 0;
                                v175[2] = 0;
                                v175[3] = v174;
                                *(_QWORD *)v293 = 0;
                                v176 = (std::__shared_weak_count *)*((_QWORD *)v270 + 22);
                                *((_QWORD *)v270 + 21) = v174;
                                *((_QWORD *)v270 + 22) = v175;
                                if (!v176)
                                  goto LABEL_237;
                              }
                              else
                              {
                                *(_QWORD *)v293 = 0;
                                v176 = (std::__shared_weak_count *)*((_QWORD *)v270 + 22);
                                *((_QWORD *)v270 + 21) = 0;
                                *((_QWORD *)v270 + 22) = 0;
                                if (!v176)
                                {
LABEL_237:
                                  v179 = *(_QWORD *)v293;
                                  *(_QWORD *)v293 = 0;
                                  if (v179)
                                    (*(void (**)(uint64_t))(*(_QWORD *)v179 + 64))(v179);
                                  v180 = (ACFULogging *)v282;
                                  if (v282)
                                    std::__shared_weak_count::__release_weak(v282);
                                  v181 = v284;
                                  if (v284)
                                  {
                                    v182 = (unint64_t *)&v284->__shared_owners_;
                                    do
                                      v183 = __ldaxr(v182);
                                    while (__stlxr(v183 - 1, v182));
                                    if (!v183)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                                      std::__shared_weak_count::__release_weak(v181);
                                    }
                                  }
                                  v184 = *((_QWORD *)v270 + 21);
                                  if (!v184)
                                    goto LABEL_432;
                                  LOWORD(v290.__r_.__value_.__l.__data_) = 256;
                                  v185 = (std::__shared_weak_count *)*((_QWORD *)v270 + 22);
                                  v279 = v184;
                                  v280 = v185;
                                  if (v185)
                                  {
                                    v186 = (unint64_t *)&v185->__shared_owners_;
                                    do
                                      v187 = __ldxr(v186);
                                    while (__stxr(v187 + 1, v186));
                                  }
                                  v188 = (std::__shared_weak_count *)*((_QWORD *)v270 + 20);
                                  v277 = *((_QWORD *)v270 + 19);
                                  v278 = v188;
                                  if (v188)
                                  {
                                    v189 = (unint64_t *)&v188->__shared_owners_;
                                    do
                                      v190 = __ldxr(v189);
                                    while (__stxr(v190 + 1, v189));
                                  }
                                  v191 = (std::__shared_weak_count *)*((_QWORD *)v270 + 24);
                                  v275 = *((_QWORD *)v270 + 23);
                                  v276 = v191;
                                  if (v191)
                                  {
                                    v192 = (unint64_t *)&v191->__shared_owners_;
                                    do
                                      v193 = __ldxr(v192);
                                    while (__stxr(v193 + 1, v192));
                                  }
                                  v180 = (ACFULogging *)ACFURTKitROM::create();
                                  v194 = *(_OWORD *)v293;
                                  memset(v293, 0, sizeof(v293));
                                  v195 = (std::__shared_weak_count *)*((_QWORD *)v270 + 52);
                                  *(_OWORD *)((char *)v270 + 408) = v194;
                                  if (v195)
                                  {
                                    v196 = (unint64_t *)&v195->__shared_owners_;
                                    do
                                      v197 = __ldaxr(v196);
                                    while (__stlxr(v197 - 1, v196));
                                    if (!v197)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                                      std::__shared_weak_count::__release_weak(v195);
                                    }
                                  }
                                  v198 = *(std::__shared_weak_count **)&v293[8];
                                  if (*(_QWORD *)&v293[8])
                                  {
                                    v199 = (unint64_t *)(*(_QWORD *)&v293[8] + 8);
                                    do
                                      v200 = __ldaxr(v199);
                                    while (__stlxr(v200 - 1, v199));
                                    if (!v200)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                                      std::__shared_weak_count::__release_weak(v198);
                                    }
                                  }
                                  if (v276)
                                  {
                                    v201 = &v276->__shared_owners_;
                                    do
                                      v202 = __ldaxr((unint64_t *)v201);
                                    while (__stlxr(v202 - 1, (unint64_t *)v201));
                                    if (!v202)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                                      std::__shared_weak_count::__release_weak(v276);
                                    }
                                  }
                                  if (v278)
                                  {
                                    v203 = &v278->__shared_owners_;
                                    do
                                      v204 = __ldaxr((unint64_t *)v203);
                                    while (__stlxr(v204 - 1, (unint64_t *)v203));
                                    if (!v204)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                                      std::__shared_weak_count::__release_weak(v278);
                                    }
                                  }
                                  if (v280)
                                  {
                                    v205 = &v280->__shared_owners_;
                                    do
                                      v206 = __ldaxr((unint64_t *)v205);
                                    while (__stlxr(v206 - 1, (unint64_t *)v205));
                                    if (!v206)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                                      std::__shared_weak_count::__release_weak(v280);
                                    }
                                  }
                                  if (!*((_QWORD *)v270 + 51))
                                  {
LABEL_432:
                                    ACFULogging::getLogInstance(v180);
                                    ACFULogging::handleMessage();
                                    v40 = 4008;
                                    goto LABEL_393;
                                  }
                                  v207 = (char *)v270 + 264;
                                  *(_QWORD *)v293 = off_24CE82FB0;
                                  *(_QWORD *)&v293[8] = v270;
                                  v208 = v293;
                                  *((_QWORD *)&v294 + 1) = v293;
                                  if (v293 == (char *)v270 + 264)
                                  {
                                    v209 = 4;
                                  }
                                  else
                                  {
                                    v208 = (char *)*((_QWORD *)v270 + 36);
                                    if (v208 == v207)
                                    {
                                      *((_QWORD *)&v294 + 1) = 0;
                                      v208 = v293;
                                      (*(void (**)(uint64_t, char *))(*(_QWORD *)v207 + 24))((uint64_t)v270 + 264, v293);
                                      (*(void (**)(_QWORD))(**((_QWORD **)v270 + 36) + 32))(*((_QWORD *)v270 + 36));
                                      *((_QWORD *)&v294 + 1) = v293;
                                      *((_QWORD *)v270 + 33) = off_24CE82FB0;
                                      *((_QWORD *)v270 + 34) = v270;
                                      v209 = 4;
                                      *((_QWORD *)v270 + 36) = v207;
                                    }
                                    else
                                    {
                                      *((_QWORD *)v270 + 33) = off_24CE82FB0;
                                      *((_QWORD *)v270 + 34) = v270;
                                      *((_QWORD *)&v294 + 1) = v208;
                                      *((_QWORD *)v270 + 36) = v207;
                                      if (v208 == v293)
                                      {
                                        v209 = 4;
                                        v208 = v293;
                                      }
                                      else
                                      {
                                        if (!v208)
                                          goto LABEL_291;
                                        v209 = 5;
                                      }
                                    }
                                  }
                                  (*(void (**)(char *))(*(_QWORD *)v208 + 8 * v209))(v208);
LABEL_291:
                                  v210 = *((_QWORD *)v77 + 51);
                                  v211 = *((_QWORD *)v77 + 52);
                                  v290.__r_.__value_.__r.__words[0] = v210;
                                  v290.__r_.__value_.__l.__size_ = v211;
                                  if (v211)
                                  {
                                    v212 = (unint64_t *)(v211 + 8);
                                    do
                                      v213 = __ldxr(v212);
                                    while (__stxr(v213 + 1, v212));
                                    LOWORD(v290.__r_.__value_.__r.__words[2]) = 0;
                                    v290.__r_.__value_.__s.__data_[18] = 1;
                                    *(_QWORD *)&v293[8] = v210;
                                    *(_QWORD *)&v294 = v211;
                                    do
                                      v214 = __ldxr(v212);
                                    while (__stxr(v214 + 1, v212));
                                    v210 = *((_QWORD *)v77 + 51);
                                    v215 = *((_QWORD *)v77 + 52);
                                    *(_DWORD *)v293 = 0;
                                    WORD4(v294) = v290.__r_.__value_.__r.__words[2];
                                    BYTE10(v294) = v290.__r_.__value_.__s.__data_[18];
                                    v289.__r_.__value_.__r.__words[0] = v210;
                                    v289.__r_.__value_.__l.__size_ = v215;
                                    if (v215)
                                    {
                                      v216 = (unint64_t *)(v215 + 8);
                                      do
                                        v217 = __ldxr(v216);
                                      while (__stxr(v217 + 1, v216));
                                      v218 = v12;
                                      LOWORD(v289.__r_.__value_.__r.__words[2]) = 0;
                                      v289.__r_.__value_.__s.__data_[18] = 0;
                                      *(_DWORD *)v295 = 3;
                                      *(_QWORD *)&v295[8] = v210;
                                      *(_QWORD *)&v295[16] = v215;
                                      do
                                        v219 = __ldxr(v216);
                                      while (__stxr(v219 + 1, v216));
LABEL_305:
                                      *(_WORD *)&v295[24] = v289.__r_.__value_.__r.__words[2];
                                      v295[26] = v289.__r_.__value_.__s.__data_[18];
                                      v267 = v50;
                                      if (*((_QWORD *)v77 + 5))
                                      {
                                        v221 = (_QWORD *)((char *)v77 + 32);
                                        v220 = *((_QWORD *)v77 + 4);
                                        v222 = *((_QWORD *)v77 + 3);
                                        *((_QWORD *)v77 + 3) = (char *)v77 + 32;
                                        *(_QWORD *)(v220 + 16) = 0;
                                        *((_QWORD *)v77 + 4) = 0;
                                        *((_QWORD *)v77 + 5) = 0;
                                        v223 = *(_QWORD *)(v222 + 8) ? *(_QWORD **)(v222 + 8) : (_QWORD *)v222;
                                        if (v223)
                                        {
                                          v224 = (_QWORD *)v223[2];
                                          if (v224)
                                          {
                                            v225 = (_QWORD *)*v224;
                                            v226 = v102;
                                            if ((_QWORD *)*v224 == v223)
                                            {
                                              *v224 = 0;
                                              while (1)
                                              {
                                                v252 = (_QWORD *)v224[1];
                                                if (!v252)
                                                  break;
                                                do
                                                {
                                                  v224 = v252;
                                                  v252 = (_QWORD *)*v252;
                                                }
                                                while (v252);
                                              }
                                            }
                                            else
                                            {
                                              for (v224[1] = 0; v225; v225 = (_QWORD *)v224[1])
                                              {
                                                do
                                                {
                                                  v224 = v225;
                                                  v225 = (_QWORD *)*v225;
                                                }
                                                while (v225);
                                              }
                                            }
                                          }
                                          else
                                          {
                                            v226 = v102;
                                          }
                                          v241 = 0;
                                          v242 = 0;
                                          while (1)
                                          {
                                            v243 = *v221;
                                            v244 = v221;
                                            v245 = v221;
                                            if (*v221)
                                            {
                                              while (1)
                                              {
                                                while (1)
                                                {
                                                  v245 = (_QWORD *)v243;
                                                  v246 = *(_DWORD *)(v243 + 32);
                                                  if (v241 >= v246)
                                                    break;
                                                  v243 = *v245;
                                                  v244 = v245;
                                                  if (!*v245)
                                                    goto LABEL_343;
                                                }
                                                if (v246 >= v241)
                                                  break;
                                                v243 = v245[1];
                                                if (!v243)
                                                {
                                                  v244 = v245 + 1;
                                                  goto LABEL_343;
                                                }
                                              }
                                              v248 = v224;
                                              if (++v242 == 2)
                                              {
LABEL_362:
                                                std::__tree<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::__map_value_compare<ACFURestore::UpdateSteps,std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::less<ACFURestore::UpdateSteps>,true>,std::allocator<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>>>::destroy(v223);
                                                v12 = v218;
                                                if (!v248)
                                                  goto LABEL_372;
                                                for (i = (_QWORD *)v248[2]; i; i = (_QWORD *)i[2])
                                                  v248 = i;
                                                goto LABEL_371;
                                              }
                                            }
                                            else
                                            {
LABEL_343:
                                              *((_DWORD *)v223 + 8) = v241;
                                              RestoreStep::operator=();
                                              *v223 = 0;
                                              v223[1] = 0;
                                              v223[2] = v245;
                                              *v244 = v223;
                                              v247 = **((_QWORD **)v270 + 3);
                                              if (v247)
                                              {
                                                *((_QWORD *)v270 + 3) = v247;
                                                v223 = (_QWORD *)*v244;
                                              }
                                              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v270 + 4), v223);
                                              ++*((_QWORD *)v270 + 5);
                                              if (!v224)
                                              {
                                                v227 = v242 + 1;
                                                v12 = v218;
                                                if (v242 != 1)
                                                  goto LABEL_317;
                                                goto LABEL_372;
                                              }
                                              v248 = (_QWORD *)v224[2];
                                              if (v248)
                                              {
                                                v249 = (_QWORD *)*v248;
                                                if ((_QWORD *)*v248 == v224)
                                                {
                                                  *v248 = 0;
                                                  while (1)
                                                  {
                                                    v250 = (_QWORD *)v248[1];
                                                    if (!v250)
                                                      break;
                                                    do
                                                    {
                                                      v248 = v250;
                                                      v250 = (_QWORD *)*v250;
                                                    }
                                                    while (v250);
                                                  }
                                                }
                                                else
                                                {
                                                  for (v248[1] = 0; v249; v249 = (_QWORD *)v248[1])
                                                  {
                                                    do
                                                    {
                                                      v248 = v249;
                                                      v249 = (_QWORD *)*v249;
                                                    }
                                                    while (v249);
                                                  }
                                                }
                                                v223 = v224;
                                                if (++v242 == 2)
                                                  goto LABEL_362;
                                              }
                                              else
                                              {
                                                if (++v242 == 2)
                                                {
                                                  v248 = v224;
                                                  v12 = v218;
LABEL_371:
                                                  std::__tree<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::__map_value_compare<ACFURestore::UpdateSteps,std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::less<ACFURestore::UpdateSteps>,true>,std::allocator<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>>>::destroy(v248);
                                                  goto LABEL_372;
                                                }
                                                v248 = 0;
                                                v223 = v224;
                                              }
                                            }
                                            v241 = *(_DWORD *)&v293[32 * v242];
                                            v224 = v248;
                                          }
                                        }
                                      }
                                      v226 = v102;
                                      v227 = 0;
                                      v12 = v218;
LABEL_317:
                                      v228 = (uint64_t **)((char *)v270 + 32);
                                      do
                                      {
                                        v229 = *v228;
                                        v230 = *(_DWORD *)&v293[32 * v227];
                                        v231 = (uint64_t **)((char *)v270 + 32);
                                        v232 = (uint64_t **)((char *)v270 + 32);
                                        if (*v228)
                                        {
                                          while (1)
                                          {
                                            while (1)
                                            {
                                              v232 = (uint64_t **)v229;
                                              v233 = *((_DWORD *)v229 + 8);
                                              if (v230 >= v233)
                                                break;
                                              v229 = *v232;
                                              v231 = v232;
                                              if (!*v232)
                                                goto LABEL_327;
                                            }
                                            if (v233 >= v230)
                                              break;
                                            v229 = v232[1];
                                            if (!v229)
                                            {
                                              v231 = v232 + 1;
                                              goto LABEL_327;
                                            }
                                          }
                                        }
                                        else
                                        {
LABEL_327:
                                          v234 = (uint64_t *)operator new(0x40uLL);
                                          v235 = v234;
                                          *((_DWORD *)v234 + 8) = v230;
                                          v236 = &v293[32 * v227];
                                          v237 = *((_QWORD *)v236 + 2);
                                          v234[5] = *((_QWORD *)v236 + 1);
                                          v234[6] = v237;
                                          if (v237)
                                          {
                                            v238 = (unint64_t *)(v237 + 8);
                                            do
                                              v239 = __ldxr(v238);
                                            while (__stxr(v239 + 1, v238));
                                          }
                                          *((_WORD *)v234 + 28) = *((_WORD *)v236 + 12);
                                          *((_BYTE *)v234 + 58) = v236[26];
                                          *v234 = 0;
                                          v234[1] = 0;
                                          v234[2] = (uint64_t)v232;
                                          *v231 = v234;
                                          v240 = **((_QWORD **)v270 + 3);
                                          if (v240)
                                          {
                                            *((_QWORD *)v270 + 3) = v240;
                                            v235 = *v231;
                                          }
                                          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v270 + 4), v235);
                                          ++*((_QWORD *)v270 + 5);
                                        }
                                        ++v227;
                                      }
                                      while (v227 != 2);
LABEL_372:
                                      v253 = *(std::__shared_weak_count **)&v295[16];
                                      v102 = v226;
                                      v50 = v267;
                                      if (*(_QWORD *)&v295[16])
                                      {
                                        v254 = (unint64_t *)(*(_QWORD *)&v295[16] + 8);
                                        do
                                          v255 = __ldaxr(v254);
                                        while (__stlxr(v255 - 1, v254));
                                        if (!v255)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                                          std::__shared_weak_count::__release_weak(v253);
                                        }
                                      }
                                      v256 = (std::__shared_weak_count *)v294;
                                      if ((_QWORD)v294)
                                      {
                                        v257 = (unint64_t *)(v294 + 8);
                                        do
                                          v258 = __ldaxr(v257);
                                        while (__stlxr(v258 - 1, v257));
                                        if (!v258)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                                          std::__shared_weak_count::__release_weak(v256);
                                        }
                                      }
                                      size = (std::__shared_weak_count *)v289.__r_.__value_.__l.__size_;
                                      if (v289.__r_.__value_.__l.__size_)
                                      {
                                        v260 = (unint64_t *)(v289.__r_.__value_.__l.__size_ + 8);
                                        do
                                          v261 = __ldaxr(v260);
                                        while (__stlxr(v261 - 1, v260));
                                        if (!v261)
                                        {
                                          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                                          std::__shared_weak_count::__release_weak(size);
                                        }
                                      }
                                      v262 = (std::__shared_weak_count *)v290.__r_.__value_.__l.__size_;
                                      if (v290.__r_.__value_.__l.__size_)
                                      {
                                        v263 = (unint64_t *)(v290.__r_.__value_.__l.__size_ + 8);
                                        do
                                          v264 = __ldaxr(v263);
                                        while (__stlxr(v264 - 1, v263));
                                        if (!v264)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                                          std::__shared_weak_count::__release_weak(v262);
                                        }
                                      }
                                      ACFUError::createAppendedDomain(*((ACFUError **)v270 + 13), CFSTR("BasebandRestore"));
                                      v40 = 0;
LABEL_393:
                                      if (!cf)
                                        goto LABEL_395;
                                      goto LABEL_394;
                                    }
                                    v218 = v12;
                                  }
                                  else
                                  {
                                    v218 = v12;
                                    LOWORD(v290.__r_.__value_.__r.__words[2]) = 0;
                                    v290.__r_.__value_.__s.__data_[18] = 1;
                                    *(_QWORD *)&v293[8] = v210;
                                    *(_QWORD *)&v294 = 0;
                                    *(_DWORD *)v293 = 0;
                                    WORD4(v294) = 0;
                                    BYTE10(v294) = 1;
                                    *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v210;
                                  }
                                  LOWORD(v289.__r_.__value_.__r.__words[2]) = 0;
                                  v289.__r_.__value_.__s.__data_[18] = 0;
                                  *(_DWORD *)v295 = 3;
                                  *(_QWORD *)&v295[8] = v210;
                                  *(_QWORD *)&v295[16] = 0;
                                  goto LABEL_305;
                                }
                              }
                              v177 = (unint64_t *)&v176->__shared_owners_;
                              do
                                v178 = __ldaxr(v177);
                              while (__stlxr(v178 - 1, v177));
                              if (!v178)
                              {
                                ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                                std::__shared_weak_count::__release_weak(v176);
                              }
                              goto LABEL_237;
                            }
LABEL_216:
                            v165 = (unint64_t *)&v143->__shared_owners_;
                            do
                              v166 = __ldxr(v165);
                            while (__stxr(v166 + 1, v165));
                            goto LABEL_218;
                          }
                        }
                        else if ((SHIBYTE(v289.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
                          goto LABEL_185;
                        }
                        operator delete(v289.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v287.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_186;
                        goto LABEL_206;
                      }
                      ACFULogging::getLogInstance(v135);
                      ACFULogging::handleMessage();
LABEL_427:
                      v81 = 0;
                      v40 = 4002;
                      goto LABEL_393;
                    }
                    ACFULogging::getLogInstance((ACFULogging *)isPreflight);
                    ACFULogging::handleMessage();
LABEL_105:
                    v102 = 0;
                    v81 = 0;
                    v40 = 1005;
                    goto LABEL_393;
                  }
                  v61 = (const __CFBoolean *)CFDictionaryGetValue(*((CFDictionaryRef *)v270 + 15), CFSTR("ccBoot"));
                  v62 = v61;
                  if (v61)
                  {
                    v63 = CFGetTypeID(v61);
                    v52 = CFBooleanGetTypeID();
                    if (v63 == v52)
                    {
                      v64 = CFBooleanGetValue(v62) != 0;
                      v60 = v270;
                      *((_BYTE *)v270 + 465) = v64;
                      goto LABEL_57;
                    }
LABEL_426:
                    ACFULogging::getLogInstance((ACFULogging *)v52);
                    ACFULogging::handleMessage();
                    v102 = 0;
                    goto LABEL_427;
                  }
LABEL_423:
                  ACFULogging::getLogInstance(0);
                  ACFULogging::handleMessage();
                  goto LABEL_105;
                }
                v46 = (const __CFBoolean *)CFDictionaryGetValue(*((CFDictionaryRef *)v270 + 15), CFSTR("skipReset"));
                v47 = v46;
                if (v46)
                {
                  v48 = CFGetTypeID(v46);
                  v44 = (ACFULogging *)CFBooleanGetTypeID();
                  if ((ACFULogging *)v48 == v44)
                  {
                    v49 = CFBooleanGetValue(v47) != 0;
                    goto LABEL_45;
                  }
                  goto LABEL_420;
                }
                goto LABEL_418;
              }
              v33 = (const __CFDictionary *)*((_QWORD *)v26 + 15);
            }
            else
            {
              v35 = 0;
            }
            if (!CFDictionaryContainsKey(v33, CFSTR("coreDumpPathNoTimestamp")))
            {
              if (v35)
                v112 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
              else
                v112 = 0;
              if (v112)
              {
LABEL_130:
                v113 = v12;
                *(_QWORD *)&v114 = 0xAAAAAAAAAAAAAAAALL;
                *((_QWORD *)&v114 + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(_OWORD *)&v295[12] = v114;
                v294 = v114;
                *(_OWORD *)v295 = v114;
                *(_OWORD *)v293 = v114;
                v290.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
                v289.__r_.__value_.__r.__words[0] = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&v290);
                v115 = v290.__r_.__value_.__r.__words[0];
                v116 = localtime((const time_t *)&v289);
                strftime(v293, 0x3CuLL, "%Y-%m-%d-%H-%M-%S", v116);
                v117 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%@/log-bb-%s-%u-cd/"), v35, v293, ((int)(v115 / 1000) % 1000));
                v110 = v287.__r_.__value_.__r.__words[0];
                v287.__r_.__value_.__r.__words[0] = (std::string::size_type)v117;
                v12 = v113;
                if (v110)
                  CFRelease((CFTypeRef)v110);
LABEL_132:
                ACFULogging::getLogInstance((ACFULogging *)v110);
                *((_BYTE *)&v289.__r_.__value_.__s + 23) = 15;
                strcpy((char *)&v289, "BasebandRestore");
                v118 = std::string::append(&v289, "::", 2uLL);
                v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
                v290.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v119;
                v118->__r_.__value_.__l.__size_ = 0;
                v118->__r_.__value_.__r.__words[2] = 0;
                v118->__r_.__value_.__r.__words[0] = 0;
                v120 = std::string::append(&v290, "init", 4uLL);
                v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
                *(_QWORD *)&v294 = *((_QWORD *)&v120->__r_.__value_.__l + 2);
                *(_OWORD *)v293 = v121;
                v120->__r_.__value_.__l.__size_ = 0;
                v120->__r_.__value_.__r.__words[2] = 0;
                v120->__r_.__value_.__r.__words[0] = 0;
                v122 = (ACFULogging *)ACFULogging::handleMessageCFType();
                if (SBYTE7(v294) < 0)
                {
                  operator delete(*(void **)v293);
                  if ((SHIBYTE(v290.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_134:
                    if ((SHIBYTE(v289.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_135;
LABEL_140:
                    operator delete(v289.__r_.__value_.__l.__data_);
LABEL_135:
                    ACFULogging::getLogInstance(v122);
                    ACFULogging::handleMessage();
                    ACFUDiagnostics::create((ACFUDiagnostics *)v287.__r_.__value_.__l.__data_, 0);
                    v125 = *(_QWORD *)v293;
                    if (*(_QWORD *)v293)
                    {
                      v126 = operator new(0x20uLL);
                      *v126 = off_24CE82EC0;
                      v126[1] = 0;
                      v126[2] = 0;
                      v126[3] = v125;
                      *(_QWORD *)v293 = 0;
                      v127 = (std::__shared_weak_count *)*((_QWORD *)v26 + 24);
                      *((_QWORD *)v26 + 23) = v125;
                      *((_QWORD *)v26 + 24) = v126;
                      if (!v127)
                        goto LABEL_146;
                    }
                    else
                    {
                      *(_QWORD *)v293 = 0;
                      v127 = (std::__shared_weak_count *)*((_QWORD *)v26 + 24);
                      *((_QWORD *)v26 + 23) = 0;
                      *((_QWORD *)v26 + 24) = 0;
                      if (!v127)
                      {
LABEL_146:
                        v130 = *(ACFULogging **)v293;
                        *(_QWORD *)v293 = 0;
                        if (v130)
                        {
                          v131 = (void *)MEMORY[0x212BF9854](v130, v123, v124);
                          operator delete(v131);
                        }
                        if (*((_QWORD *)v26 + 23))
                          goto LABEL_149;
                        ACFULogging::getLogInstance(v130);
                        ACFULogging::handleMessage();
                        goto LABEL_439;
                      }
                    }
                    v128 = (unint64_t *)&v127->__shared_owners_;
                    do
                      v129 = __ldaxr(v128);
                    while (__stlxr(v129 - 1, v128));
                    if (!v129)
                    {
                      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                      std::__shared_weak_count::__release_weak(v127);
                    }
                    goto LABEL_146;
                  }
                }
                else if ((SHIBYTE(v290.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  goto LABEL_134;
                }
                operator delete(v290.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v289.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_135;
                goto LABEL_140;
              }
LABEL_149:
              v40 = 0;
              v132 = 1;
              goto LABEL_150;
            }
            v107 = (const __CFBoolean *)CFDictionaryGetValue(*((CFDictionaryRef *)v26 + 15), CFSTR("coreDumpPathNoTimestamp"));
            v108 = v107;
            if (v107)
            {
              v109 = CFGetTypeID(v107);
              v37 = (ACFULogging *)CFBooleanGetTypeID();
              if ((ACFULogging *)v109 == v37)
              {
                v110 = CFBooleanGetValue(v108);
                if (v35)
                  v111 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
                else
                  v111 = 0;
                if (v111)
                {
                  if ((_DWORD)v110)
                    goto LABEL_132;
                  goto LABEL_130;
                }
                goto LABEL_149;
              }
LABEL_437:
              ACFULogging::getLogInstance(v37);
              ACFULogging::handleMessage();
              v132 = 0;
              v40 = 4002;
              goto LABEL_150;
            }
LABEL_435:
            ACFULogging::getLogInstance(0);
            ACFULogging::handleMessage();
            v132 = 0;
            v40 = 1005;
            goto LABEL_150;
          }
LABEL_34:
          v40 = 0;
          goto LABEL_35;
        }
LABEL_413:
        ACFULogging::getLogInstance(v24);
        ACFULogging::handleMessage();
LABEL_421:
        v102 = 0;
        v81 = 0;
        v50 = 0;
        v40 = 4002;
        goto LABEL_393;
      }
LABEL_412:
      ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage();
LABEL_419:
      v102 = 0;
      v81 = 0;
      v50 = 0;
      v40 = 1005;
      goto LABEL_393;
    }
    ACFULogging::getLogInstance(Value);
  }
  else
  {
    ACFULogging::getLogInstance(TypeID);
  }
  ACFULogging::handleMessage();
  v50 = 0;
  v81 = 0;
  v102 = 0;
  v40 = 4002;
LABEL_394:
  CFRelease(cf);
LABEL_395:
  if (v81)
    CFRelease(v81);
  if (v102)
    CFRelease(v102);
  if (v50)
    CFRelease(v50);
  if (v12)
    goto LABEL_402;
LABEL_403:
  if (v291)
    CFRelease(v291);
  return v40;
}

void sub_212AE42D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44)
{
  uint64_t v44;

  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)(v44 - 176));
  ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef((const void **)(v44 - 192));
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<ACFUDiagnostics>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)MEMORY[0x212BF9854]();
    operator delete(v3);
  }
  return a1;
}

uint64_t ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t std::pair<ACFURestore::UpdateSteps const,RestoreStep>::~pair(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t BasebandRestore::initBBUCapabilities(BasebandRestore *this)
{
  const __CFDictionary *v1;
  ACFULogging *v2;
  _QWORD *v3;
  BBUPartitionManager *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  void **v14;
  void **v15;
  size_t v16;
  unint64_t *v17;
  unint64_t v18;
  char *__p;
  void *v21[3];
  _QWORD v22[2];

  v1 = (const __CFDictionary *)*((_QWORD *)this + 16);
  if (v1)
  {
    v22[0] = 0xAAAAAAAAAAAAAAAALL;
    v22[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v22, v1);
    memset(v21, 170, sizeof(v21));
    __p = (char *)operator new(0x28uLL);
    strcpy(__p, "/private/var/wireless/baseband_data");
    ctu::cf::map_adapter::getString();
    operator delete(__p);
    ACFULogging::getLogInstance(v2);
    ACFULogging::handleMessage();
    pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
    v3 = off_253D31E68;
    if (!off_253D31E68)
    {
      v4 = (BBUPartitionManager *)operator new(0x18uLL);
      BBUPartitionManager::BBUPartitionManager(v4);
      v5 = operator new(0x20uLL);
      *v5 = &unk_24CE85728;
      v5[1] = 0;
      v5[2] = 0;
      v5[3] = v4;
      v6 = (std::__shared_weak_count *)off_253D31E70;
      off_253D31E68 = v4;
      off_253D31E70 = v5;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v3 = off_253D31E68;
    }
    v9 = (std::__shared_weak_count *)off_253D31E70;
    if (off_253D31E70)
    {
      v10 = (unint64_t *)((char *)off_253D31E70 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
    v12 = (uint64_t *)v3[1];
    if (!v12)
LABEL_18:
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    while (1)
    {
      while (1)
      {
        v13 = *((_DWORD *)v12 + 8);
        if (v13 < 3)
          break;
        v12 = (uint64_t *)*v12;
        if (!v12)
          goto LABEL_18;
      }
      if (v13 == 2)
        break;
      v12 = (uint64_t *)v12[1];
      if (!v12)
        goto LABEL_18;
    }
    v14 = (void **)(v12 + 5);
    if (v12 + 5 != (uint64_t *)v21)
    {
      if (*((char *)v12 + 63) < 0)
      {
        if (SHIBYTE(v21[2]) >= 0)
          v15 = v21;
        else
          v15 = (void **)v21[0];
        if (SHIBYTE(v21[2]) >= 0)
          v16 = HIBYTE(v21[2]);
        else
          v16 = (size_t)v21[1];
        std::string::__assign_no_alias<false>(v14, v15, v16);
      }
      else if ((HIBYTE(v21[2]) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v14, v21[0], (size_t)v21[1]);
      }
      else
      {
        *(_OWORD *)v14 = *(_OWORD *)v21;
        v12[7] = (uint64_t)v21[2];
      }
    }
    if (!v9)
      goto LABEL_35;
    v17 = (unint64_t *)&v9->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if ((SHIBYTE(v21[2]) & 0x80000000) == 0)
        goto LABEL_37;
    }
    else
    {
LABEL_35:
      if ((SHIBYTE(v21[2]) & 0x80000000) == 0)
      {
LABEL_37:
        MEMORY[0x212BF9A70](v22);
        return 0;
      }
    }
    operator delete(v21[0]);
    goto LABEL_37;
  }
  return 0;
}

void sub_212AE4968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  char **v24;
  uint64_t v25;

  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v24, v24[1]);
  operator delete(v24);
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  if (a24 < 0)
    operator delete(__p);
  MEMORY[0x212BF9A70](v25 - 48);
  _Unwind_Resume(a1);
}

CFComparisonResult BasebandRestore::basebandRestoreCommand(CFStringRef theString2, const __CFString *a2)
{
  CFComparisonResult result;

  result = CFStringCompare(CFSTR("performBootup"), theString2, 0);
  if (result)
  {
    if (CFStringCompare(CFSTR("performCoreDump"), theString2, 0))
    {
      if (CFStringCompare(CFSTR("requireSystemPartitionMount"), theString2, 0)
        && CFStringCompare(CFSTR("requirePartitionMount"), theString2, 0))
      {
        if (CFStringCompare(CFSTR("copyBasebandMigrationData"), theString2, 0))
        {
          if (CFStringCompare(CFSTR("restoreBasebandMigrationData"), theString2, 0))
          {
            if (CFStringCompare(CFSTR("CopyIdentifier"), theString2, 0))
            {
              if (CFStringCompare(CFSTR("ping"), theString2, 0))
              {
                if (CFStringCompare(CFSTR("performManifestCheck"), theString2, 0))
                {
                  if (CFStringCompare(CFSTR("provision"), theString2, 0))
                  {
                    if (CFStringCompare(CFSTR("performFusing"), theString2, 0))
                    {
                      if (CFStringCompare(CFSTR("verifyFusing"), theString2, 0))
                      {
                        if (CFStringCompare(CFSTR("downloadFusingProgram"), theString2, 0))
                          return 0xFFFFFFFFLL;
                        else
                          return 11;
                      }
                      else
                      {
                        return 10;
                      }
                    }
                    else
                    {
                      return 9;
                    }
                  }
                  else
                  {
                    return 8;
                  }
                }
                else
                {
                  return 7;
                }
              }
              else
              {
                return 5;
              }
            }
            else
            {
              return 6;
            }
          }
          else
          {
            return 4;
          }
        }
        else
        {
          return 3;
        }
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BasebandRestore *BasebandRestore::gatherPreflightParameters(BasebandRestore *this)
{
  _QWORD *(***v1)(ACFUCommon::PersonalizeParams **__return_ptr, _QWORD, uint64_t, uint64_t);
  ACFULogging *v2;
  ACFUCommon::PersonalizeParams *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t (*v11)(const __CFString *, _QWORD);
  BasebandRestore *v12;
  CFTypeID v13;
  ACFULogging *TypeID;
  ACFUCommon::PersonalizeParams *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  ACFULogging *ParametersDictionary;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *__p;
  char v27;
  ACFUCommon::PersonalizeParams *v28;
  std::__shared_weak_count *v29;
  int v30;
  ACFUCommon::PersonalizeParams *v31;
  std::__shared_weak_count *v32;
  unint64_t v33;

  v32 = 0;
  v33 = 0xAAAAAAAAAAAAAAAALL;
  v31 = 0;
  if (*((_BYTE *)this + 464))
  {
    v1 = (_QWORD *(***)(ACFUCommon::PersonalizeParams **__return_ptr, _QWORD, uint64_t, uint64_t))*((_QWORD *)this + 21);
    if (v1)
    {
      v2 = (ACFULogging *)(**v1)(&v28, v1, 1, 1);
      v3 = v28;
      v4 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
        v7 = v29;
        v31 = v3;
        v32 = v4;
        v8 = v30;
        LODWORD(v33) = v30;
        if (v29)
        {
          v9 = (unint64_t *)&v29->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          v8 = v33;
        }
      }
      else
      {
        v31 = v28;
        v32 = 0;
        v8 = v30;
        LODWORD(v33) = v30;
      }
      if (v8)
      {
        ACFULogging::getLogInstance(v2);
        ACFULogging::handleMessage();
      }
      else
      {
        ACFULogging::getLogInstance(v2);
        ACFULogging::handleMessage();
        v15 = v31;
        v16 = v32;
        v28 = v31;
        v29 = v32;
        if (v32)
        {
          v17 = (unint64_t *)&v32->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        ParametersDictionary = (ACFULogging *)ACFUCommon::PersonalizeParams::getParametersDictionary(v15);
        v12 = ParametersDictionary;
        if (v16)
        {
          v20 = (unint64_t *)&v16->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        if (v12)
          goto LABEL_28;
        ACFULogging::getLogInstance(ParametersDictionary);
        ACFULogging::handleMessage();
        std::string::basic_string[abi:ne180100]<0>(&__p, "Failed to create personalization parameters dictionary");
        ACFUError::addError();
        if (v27 < 0)
        {
          operator delete(__p);
          v12 = 0;
          goto LABEL_28;
        }
      }
LABEL_41:
      v12 = 0;
      goto LABEL_28;
    }
    ACFULogging::getLogInstance(0);
LABEL_40:
    ACFULogging::handleMessage();
    goto LABEL_41;
  }
  if (BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken == -1)
  {
    v11 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
    {
LABEL_39:
      ACFULogging::getLogInstance(this);
      goto LABEL_40;
    }
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken, &__block_literal_global_4);
    v11 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
      goto LABEL_39;
  }
  this = (BasebandRestore *)v11(CFSTR("FirmwarePreflightInfo"), 0);
  v12 = this;
  if (!this)
    goto LABEL_39;
  v13 = CFGetTypeID(this);
  TypeID = (ACFULogging *)CFDictionaryGetTypeID();
  if ((ACFULogging *)v13 != TypeID)
  {
    ACFULogging::getLogInstance(TypeID);
    ACFULogging::handleMessage();
  }
LABEL_28:
  v22 = v32;
  if (v32)
  {
    v23 = (unint64_t *)&v32->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return v12;
}

void sub_212AE4F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a17 < 0)
  {
    operator delete(__p);
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t BasebandRestore::performCmd(BasebandRestore *this)
{
  int CurrentUpdateStep;
  void *__p;
  char v5;

  ACFULogging::getLogInstance(this);
  ACFURestore::getCurrentUpdateStep(this);
  ACFURestore::getCurrentUpdateStep(this);
  ACFURestore::getStepName();
  ACFULogging::handleMessage();
  if ((v5 & 0x80000000) == 0)
  {
    CurrentUpdateStep = ACFURestore::getCurrentUpdateStep(this);
    if (CurrentUpdateStep)
      goto LABEL_3;
    return (*(uint64_t (**)(BasebandRestore *))(*(_QWORD *)this + 112))(this);
  }
  operator delete(__p);
  CurrentUpdateStep = ACFURestore::getCurrentUpdateStep(this);
  if (!CurrentUpdateStep)
    return (*(uint64_t (**)(BasebandRestore *))(*(_QWORD *)this + 112))(this);
LABEL_3:
  if (CurrentUpdateStep == 3)
    return 1;
  else
    return ACFURestore::performCmd(this);
}

void sub_212AE5070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BasebandRestore::FWUpdatePerform(BasebandRestore *this)
{
  uint64_t result;
  const __CFBoolean *v3;
  CFTypeID v4;
  void *v5;
  BBUPartitionManager *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  ACFULogging *v14;
  unint64_t *v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CFTypeID ValueIfPresent;
  int *v32;
  CFTypeID v33;
  const __CFNumber *v34;
  int v35;
  ACFULogging *v36;
  void *v37;
  int v38;
  CFTypeID TypeID;
  int *v40;
  CFTypeID v41;
  const __CFNumber *v42;
  ACFULogging *v43;
  ACFULogging *v44;
  void *v45;
  ACFULogging *Svn;
  ACFULogging *v47;
  ACFULogging *HardwareConfig;
  ACFULogging *v49;
  int v50;
  ACFULogging *v51;
  BBUPartitionManager *v52;
  _QWORD *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  ACFULogging *v60;
  unint64_t *v61;
  unint64_t v62;
  std::string *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(const char *, const char *, char *);
  capabilities::radio *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(void);
  uint64_t (*v89)(void);
  uint64_t (*v90)(void);
  uint64_t (*v91)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v93)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  ACFULogging *v127;
  void *v128;
  std::__shared_weak_count *v129;
  ACFULogging *v130;
  void *v131;
  __int128 v132;
  char NvItemsSetting;
  ACFULogging *v134;
  char v135;
  ACFULogging *v136;
  __int128 v137;
  uint64_t isPostSealing;
  ACFULogging *v139;
  uint64_t v140;
  const __CFData *Manifest;
  const __CFData *v142;
  ACFULogging *Length;
  ACFULogging *v144;
  std::string *v145;
  __int128 v146;
  std::string *v147;
  __int128 v148;
  const UInt8 *BytePtr;
  CFIndex v150;
  ACFULogging *inited;
  ACFULogging *v152;
  ACFULogging *v153;
  void *v154;
  char *v155;
  const UInt8 *v156;
  CFIndex v157;
  ACFULogging *v158;
  ACFULogging *v159;
  std::string *v160;
  __int128 v161;
  std::string *v162;
  __int128 v163;
  ACFULogging *v164;
  uint64_t (*v165)(uint64_t);
  int v166;
  const __CFDictionary *v167;
  const void *v168;
  CFTypeID v169;
  ACFULogging *v170;
  CFTypeID v171;
  const void *v172;
  CFTypeID v173;
  uint64_t (*v174)(uint64_t);
  _BOOL4 v175;
  uint64_t v176;
  void *v177;
  ACFULogging *v178;
  int v179;
  ACFULogging *v180;
  int v181;
  ACFULogging *v182;
  unint64_t *v183;
  unint64_t *v184;
  unint64_t v185;
  std::string::size_type v186;
  unint64_t *v187;
  unint64_t v188;
  char v189;
  std::__shared_weak_count *size;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  const void *v196;
  ACFULogging *v197;
  unint64_t *v198;
  unint64_t *v199;
  unint64_t v200;
  std::string::size_type v201;
  unint64_t *v202;
  unint64_t v203;
  char v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::string::size_type v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t *v214;
  unint64_t *v215;
  unint64_t v216;
  char v217;
  ACFULogging *v218;
  std::string::size_type v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t *v222;
  unint64_t *v223;
  unint64_t v224;
  char v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  __CFDictionary *Mutable;
  uint64_t *v239;
  uint64_t **v240;
  uint64_t **v241;
  int v242;
  _DWORD *v243;
  uint64_t v244;
  uint64_t *v245;
  char v246;
  CFTypeRef v247;
  const char *v248;
  char v249;
  const char *v250;
  std::string v251;
  std::string v252;
  __CFDictionary *v253;
  CFTypeRef *p_cf;
  ACFULogging *v255;
  std::__shared_weak_count *v256;
  BOOL v257;
  CFTypeRef cf;
  __CFDictionary *v259;
  CFTypeRef v260;
  CFTypeRef v261;
  void *v262[46];
  void *value[46];
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  unint64_t v269;
  uint64_t v270;

  v270 = *MEMORY[0x24BDAC8D0];
  result = ACFURestore::performCmd(this);
  if ((_DWORD)result)
  {
    if (*((_BYTE *)this + 377)
      || (result = *((_QWORD *)this + 16)) != 0
      && (result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)result, CFSTR("BypassNVMSync"))) != 0
      && (v3 = (const __CFBoolean *)result,
          v4 = CFGetTypeID((CFTypeRef)result),
          result = CFBooleanGetTypeID(),
          v4 == result)
      && (result = CFBooleanGetValue(v3), (_DWORD)result == 1))
    {
      ACFULogging::getLogInstance((ACFULogging *)result);
      ACFULogging::handleMessage();
      goto LABEL_138;
    }
    ACFULogging::getLogInstance((ACFULogging *)result);
    ACFULogging::handleMessage();
    memset(&v251, 170, sizeof(v251));
    pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
    v5 = off_253D31E68;
    if (!off_253D31E68)
    {
      v6 = (BBUPartitionManager *)operator new(0x18uLL);
      BBUPartitionManager::BBUPartitionManager(v6);
      v7 = operator new(0x20uLL);
      *v7 = &unk_24CE85728;
      v7[1] = 0;
      v7[2] = 0;
      v7[3] = v6;
      v8 = (std::__shared_weak_count *)off_253D31E70;
      off_253D31E68 = v6;
      off_253D31E70 = v7;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v5 = off_253D31E68;
    }
    v11 = (std::__shared_weak_count *)off_253D31E70;
    value[0] = v5;
    value[1] = off_253D31E70;
    if (off_253D31E70)
    {
      v12 = (unint64_t *)((char *)off_253D31E70 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
    BBUPartitionManager::getBBUFSPath((BBUPartitionManager *)v5, &v251);
    if (v11)
    {
      v15 = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    ACFULogging::getLogInstance(v14);
    ACFULogging::handleMessage();
    if ((v251.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v251;
    else
      v24 = (std::string *)v251.__r_.__value_.__r.__words[0];
    if (!v24)
    {
      HardwareConfig = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v18, v19, v20, v21, v22, v23, 0);
      goto LABEL_56;
    }
    if ((bbufs::prepareDestination((bbufs *)v24, v17) & 1) == 0)
    {
      HardwareConfig = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v25, v26, v27, v28, v29, v30, (char)"BasebandRestore");
      goto LABEL_56;
    }
    ValueIfPresent = *((_QWORD *)this + 16);
    value[0] = 0;
    if (ValueIfPresent
      && (ValueIfPresent = CFDictionaryGetValueIfPresent((CFDictionaryRef)ValueIfPresent, CFSTR("NVRestoreSetting"), (const void **)value), (_DWORD)ValueIfPresent)&& (LODWORD(v262[0]) = -1431655766, (v32 = (int *)value[0]) != 0)&& (v33 = CFGetTypeID(value[0]), ValueIfPresent = CFNumberGetTypeID(), v33 == ValueIfPresent)&& (ValueIfPresent = ctu::cf::assign((ctu::cf *)v262, v32, v34), (ValueIfPresent & 1) != 0)&& (v35 = (int)v262[0], (LODWORD(v262[0]) - 6) > 0xFFFFFFFA))
    {
      ACFULogging::getLogInstance((ACFULogging *)ValueIfPresent);
      switch(v35)
      {
        case 1:
        case 2:
        case 4:
        case 5:
          break;
        case 3:
          goto LABEL_35;
        default:
          v35 = 5;
          break;
      }
    }
    else
    {
      ACFULogging::getLogInstance((ACFULogging *)ValueIfPresent);
LABEL_35:
      v35 = 3;
    }
    ACFULogging::handleMessage();
    value[0] = (void *)0xAAAAAAAAAAAAAAAALL;
    support::transport::ARI::create((support::transport::ARI *)"BasebandRestore", (dispatch_queue_s *)0x2710, 0, 0, (char **)value);
    v37 = value[0];
    if (!value[0])
    {
      ACFULogging::getLogInstance(v36);
      HardwareConfig = (ACFULogging *)ACFULogging::handleMessage();
      goto LABEL_56;
    }
    switch(v35)
    {
      case 1:
      case 2:
      case 4:
      case 5:
        ACFULogging::getLogInstance(v36);
        ACFULogging::handleMessage();
        v36 = (ACFULogging *)KTLBspSetNvItemsToState();
        if ((_DWORD)v36)
          goto LABEL_40;
        ACFULogging::getLogInstance(v36);
        ACFULogging::handleMessage();
        HardwareConfig = (ACFULogging *)(*(uint64_t (**)(void *))(*(_QWORD *)v37 + 8))(v37);
        goto LABEL_56;
      default:
LABEL_40:
        ACFULogging::getLogInstance(v36);
        ACFULogging::handleMessage();
        (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
        v38 = -1;
        LODWORD(v262[0]) = -1;
        TypeID = *((_QWORD *)this + 16);
        if (TypeID)
        {
          value[0] = (void *)0xAAAAAAAAAAAAAAAALL;
          TypeID = CFDictionaryGetValueIfPresent((CFDictionaryRef)TypeID, CFSTR("IMEISwVersion"), (const void **)value);
          if ((_DWORD)TypeID
            && (v40 = (int *)value[0]) != 0
            && (v41 = CFGetTypeID(value[0]), TypeID = CFNumberGetTypeID(), v41 == TypeID))
          {
            TypeID = ctu::cf::assign((ctu::cf *)v262, v40, v42);
            if ((_DWORD)TypeID)
              v38 = (int)v262[0];
            else
              v38 = -1;
          }
          else
          {
            v38 = -1;
          }
        }
        ACFULogging::getLogInstance((ACFULogging *)TypeID);
        v43 = (ACFULogging *)ACFULogging::handleMessage();
        ACFULogging::getLogInstance(v43);
        v44 = (ACFULogging *)ACFULogging::handleMessage();
        if (v38 == -1
          || (v38 - 99) <= 0xFFFFFF9D
          || (LOBYTE(v262[0]) = -86,
              v252.__r_.__value_.__s.__data_[0] = v38,
              ACFULogging::getLogInstance(v44),
              ACFULogging::handleMessage(),
              support::transport::ARI::create((support::transport::ARI *)"BasebandRestore", (dispatch_queue_s *)0x2710, 0, 0, (char **)value), (v45 = value[0]) == 0))
        {
          ACFULogging::getLogInstance(v44);
          ACFULogging::handleMessage();
LABEL_60:
          HardwareConfig = (ACFULogging *)TelephonyRadiosGetHardwareConfig();
          if ((_DWORD)HardwareConfig == 2 && !*((_BYTE *)this + 400))
            goto LABEL_56;
          ACFULogging::getLogInstance(HardwareConfig);
          ACFULogging::handleMessage();
LABEL_63:
          *(_QWORD *)&v266 = 0;
          v264 = 0u;
          v265 = 0u;
          memset(value, 0, sizeof(value));
          memset(v262, 0, sizeof(v262));
          memset(&v252, 170, sizeof(v252));
          pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
          v51 = (ACFULogging *)off_253D31E68;
          if (!off_253D31E68)
          {
            v52 = (BBUPartitionManager *)operator new(0x18uLL);
            BBUPartitionManager::BBUPartitionManager(v52);
            v53 = operator new(0x20uLL);
            *v53 = &unk_24CE85728;
            v53[1] = 0;
            v53[2] = 0;
            v53[3] = v52;
            v54 = (std::__shared_weak_count *)off_253D31E70;
            off_253D31E68 = v52;
            off_253D31E70 = v53;
            if (v54)
            {
              v55 = (unint64_t *)&v54->__shared_owners_;
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            v51 = (ACFULogging *)off_253D31E68;
          }
          v57 = (std::__shared_weak_count *)off_253D31E70;
          v255 = v51;
          v256 = (std::__shared_weak_count *)off_253D31E70;
          if (off_253D31E70)
          {
            v58 = (unint64_t *)((char *)off_253D31E70 + 8);
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
          }
          pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
          BBUPartitionManager::getBBUFSPath(v51, &v252);
          if (v57)
          {
            v61 = (unint64_t *)&v57->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          ACFULogging::getLogInstance(v60);
          v63 = &v252;
          v248 = "BasebandRestore";
          ACFULogging::handleMessage();
          if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v63 = (std::string *)v252.__r_.__value_.__r.__words[0];
          if (!v63)
          {
            v87 = (uint64_t)_BBUFSDebugPrint("BBUFSServerParametersInit", "invalid parameters specified: parameters = %p, destination = %s\n", v64, v65, v66, v67, v68, v69, (char)v262);
            goto LABEL_110;
          }
          memset(v262, 0, sizeof(v262));
          v70 = strnlen((const char *)v63, 0x100uLL);
          v71 = TelephonyUtilStrlcpy();
          if (v71 != v70 || (unint64_t)(v71 + 1) >= 0x101)
          {
            v87 = (uint64_t)_BBUFSDebugPrint("BBUFSServerParametersInit", "required path length = %zu, copied = %zu, max length = %zu\n", v72, v73, v74, v75, v76, v77, v70 + 1);
            v262[45] = 0;
            goto LABEL_110;
          }
          v262[45] = 0;
          v78 = (uint64_t (*)(const char *, const char *, char *))v262[0];
          v264 = 0u;
          v265 = 0u;
          *(_QWORD *)&v266 = 0;
          value[0] = v262[0];
          v79 = (capabilities::radio *)memcpy(&value[1], &v262[1], 0x168uLL);
          v80 = capabilities::radio::vendor(v79);
          switch(v80)
          {
            case 3:
              v88 = (uint64_t (*)(void))INTStateMachineSetConfigDefaults;
              v89 = (uint64_t (*)(void))INTStateMachineSetConfig;
              v90 = (uint64_t (*)(void))INTStateMachineSnapshotInProgress;
              v91 = INTStateMachinePerformSnapshot;
              v92 = INTStateMachineStop;
              v93 = INTStateMachineStart;
              break;
            case 2:
              v88 = (uint64_t (*)(void))ICEStateMachineSetConfigDefaults;
              v89 = (uint64_t (*)(void))ICEStateMachineSetConfig;
              v90 = (uint64_t (*)(void))ICEStateMachineSnapshotInProgress;
              v91 = ICEStateMachinePerformSnapshot;
              v92 = ICEStateMachineStop;
              v93 = ICEStateMachineStart;
              break;
            case 1:
              sBBUFSServerStart = EURStateMachineStart;
              sBBUFSServerStop = (uint64_t (*)(_QWORD))EURStateMachineStop;
              sBBUFSServerFlush = (uint64_t (*)(_QWORD))EURStateMachinePerformFlush;
              sBBUFSServerFlushInProgress = (uint64_t (*)(void))EURStateMachineFlushInProgress;
              sBBUFSServerSetConfig = (uint64_t (*)(void))EURStateMachineSetConfig;
              sBBUFSServerSetConfigDefaults = 0;
LABEL_93:
              if (v78)
                sDelegate = v78;
              v94 = 1;
              v95 = "BBUFSServer created successfully\n";
LABEL_97:
              v87 = (uint64_t)_BBUFSDebugPrint("BBUFSServerCreate", v95, v81, v82, v83, v84, v85, v86, (char)v248);
              if ((v94 & 1) != 0)
              {
                if (sBBUFSServerSetConfig)
                {
                  v87 = ((uint64_t (*)(void **, const char *, unint64_t))sBBUFSServerSetConfig)(value, "ForceSync", 0xAAAAAAAA00000000);
                  if ((v87 & 1) != 0)
                  {
                    if (sBBUFSServerSetConfig)
                    {
                      v87 = ((uint64_t (*)(void **, const char *, unint64_t))sBBUFSServerSetConfig)(value, "ShutdownSync", 0xAAAAAAAA00000000);
                      if ((v87 & 1) != 0)
                      {
                        if (sBBUFSServerStart)
                        {
                          v87 = sBBUFSServerStart(value);
                          if ((v87 & 1) != 0)
                          {
                            if (sBBUFSServerFlush)
                            {
                              v87 = sBBUFSServerFlush(value);
                              if ((_BYTE)v264 && (v87 & 1) != 0)
                              {
                                ACFULogging::getLogInstance((ACFULogging *)v87);
                                v250 = "BasebandRestore";
                                ACFULogging::handleMessage();
                                v126 = 1;
                                if (!(_BYTE)v264)
                                  goto LABEL_116;
LABEL_111:
                                if (sBBUFSServerStop)
                                {
                                  v127 = (ACFULogging *)sBBUFSServerStop(value);
                                  if ((v127 & 1) != 0)
                                  {
LABEL_116:
                                    if (value[45])
                                    {
                                      _BBUFSDebugPrint("BBUFSServerRelease", "BBUFSServer releasing registry\n", v120, v121, v122, v123, v124, v125, (char)"BasebandRestore");
                                      v128 = value[45];
                                      if (value[45])
                                      {
                                        v129 = (std::__shared_weak_count *)*((_QWORD *)value[45] + 1);
                                        if (v129)
                                          std::__shared_weak_count::__release_weak(v129);
                                        operator delete(v128);
                                      }
                                      value[45] = 0;
                                    }
                                    sBBUFSServerStart = 0;
                                    sBBUFSServerStop = 0;
                                    sBBUFSServerFlush = 0;
                                    sBBUFSServerFlushInProgress = 0;
                                    sBBUFSServerSetConfig = 0;
                                    sBBUFSServerSetConfigDefaults = 0;
                                    HardwareConfig = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerRelease", "BBUFSServer destroyed\n", v120, v121, v122, v123, v124, v125, (char)v250);
                                    if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(v252.__r_.__value_.__l.__data_);
                                    if ((v126 & 1) != 0)
                                    {
                                      v262[0] = (void *)0xAAAAAAAAAAAAAAAALL;
                                      support::transport::ARI::create((support::transport::ARI *)"BasebandRestore", (dispatch_queue_s *)0x2710, 0, 0, (char **)v262);
                                      v131 = v262[0];
                                      if (!v262[0])
                                      {
                                        ACFULogging::getLogInstance(v130);
                                        HardwareConfig = (ACFULogging *)ACFULogging::handleMessage();
                                        goto LABEL_56;
                                      }
                                      v252.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
                                      Bsp::ARICommandDriver::ARICommandDriver();
                                      *(_QWORD *)&v132 = 0xAAAAAAAAAAAAAAAALL;
                                      *((_QWORD *)&v132 + 1) = 0xAAAAAAAAAAAAAAAALL;
                                      *(_OWORD *)&value[4] = v132;
                                      *(_OWORD *)&value[6] = v132;
                                      *(_OWORD *)value = v132;
                                      *(_OWORD *)&value[2] = v132;
                                      AriSdk::ARI_FactoryGetNvItemsSettingReq_SDK::ARI_FactoryGetNvItemsSettingReq_SDK((AriSdk::ARI_FactoryGetNvItemsSettingReq_SDK *)value);
                                      v255 = 0;
                                      NvItemsSetting = Bsp::ARICommandDriver::GetNvItemsSetting();
                                      v134 = v255;
                                      if (v255)
                                        v135 = NvItemsSetting;
                                      else
                                        v135 = 0;
                                      if ((v135 & 1) != 0)
                                      {
                                        if (!**((_DWORD **)v255 + 8) && **((int **)v255 + 9) < 4)
                                        {
                                          NvItemsSetting = 1;
                                          goto LABEL_133;
                                        }
                                        ACFULogging::getLogInstance(v255);
                                        ACFULogging::handleMessage();
                                        NvItemsSetting = 0;
                                      }
                                      else
                                      {
                                        ACFULogging::getLogInstance(v255);
                                        ACFULogging::handleMessage();
                                      }
                                      v134 = v255;
                                      if (!v255)
                                      {
LABEL_134:
                                        AriSdk::ARI_FactoryGetNvItemsSettingReq_SDK::~ARI_FactoryGetNvItemsSettingReq_SDK((AriSdk::ARI_FactoryGetNvItemsSettingReq_SDK *)value);
                                        Bsp::ARICommandDriver::~ARICommandDriver((Bsp::ARICommandDriver *)&v252);
                                        HardwareConfig = (ACFULogging *)(*(uint64_t (**)(void *))(*(_QWORD *)v131 + 8))(v131);
                                        if ((NvItemsSetting & 1) == 0)
                                          goto LABEL_56;
                                        ACFULogging::getLogInstance(HardwareConfig);
                                        v136 = (ACFULogging *)ACFULogging::handleMessage();
                                        ACFULogging::getLogInstance(v136);
                                        v49 = (ACFULogging *)ACFULogging::handleMessage();
                                        v50 = 1;
                                        if ((SHIBYTE(v251.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                        {
LABEL_137:
                                          if (!v50)
                                            goto LABEL_310;
LABEL_138:
                                          v255 = 0;
                                          if (!*((_QWORD *)this + 18))
                                            goto LABEL_160;
                                          v269 = 0xAAAAAAAAAAAAAAAALL;
                                          *(_QWORD *)&v137 = 0xAAAAAAAAAAAAAAAALL;
                                          *((_QWORD *)&v137 + 1) = 0xAAAAAAAAAAAAAAAALL;
                                          v267 = v137;
                                          v268 = v137;
                                          v265 = v137;
                                          v266 = v137;
                                          *(_OWORD *)&value[44] = v137;
                                          v264 = v137;
                                          *(_OWORD *)&value[40] = v137;
                                          *(_OWORD *)&value[42] = v137;
                                          *(_OWORD *)&value[36] = v137;
                                          *(_OWORD *)&value[38] = v137;
                                          *(_OWORD *)&value[32] = v137;
                                          *(_OWORD *)&value[34] = v137;
                                          *(_OWORD *)&value[28] = v137;
                                          *(_OWORD *)&value[30] = v137;
                                          *(_OWORD *)&value[24] = v137;
                                          *(_OWORD *)&value[26] = v137;
                                          *(_OWORD *)&value[20] = v137;
                                          *(_OWORD *)&value[22] = v137;
                                          *(_OWORD *)&value[16] = v137;
                                          *(_OWORD *)&value[18] = v137;
                                          *(_OWORD *)&value[12] = v137;
                                          *(_OWORD *)&value[14] = v137;
                                          *(_OWORD *)&value[8] = v137;
                                          *(_OWORD *)&value[10] = v137;
                                          *(_OWORD *)&value[4] = v137;
                                          *(_OWORD *)&value[6] = v137;
                                          *(_OWORD *)value = v137;
                                          *(_OWORD *)&value[2] = v137;
                                          isPostSealing = ACFURestore::isPostSealing(this);
                                          if ((isPostSealing & 1) != 0)
                                            goto LABEL_160;
                                          ACFULogging::getLogInstance((ACFULogging *)isPostSealing);
                                          v139 = (ACFULogging *)ACFULogging::handleMessage();
                                          *((_QWORD *)this + 25) = 0;
                                          v140 = *((_QWORD *)this + 18);
                                          *((_QWORD *)this + 26) = v140;
                                          *((_QWORD *)this + 27) = CFSTR("Baseband");
                                          *((_QWORD *)this + 28) = CFSTR("scrt");
                                          *((_DWORD *)this + 58) = 2;
                                          *((_QWORD *)this + 31) = 0;
                                          *((_QWORD *)this + 32) = 0;
                                          *((_QWORD *)this + 30) = 0;
                                          if (!v140)
                                            goto LABEL_305;
                                          if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
                                          {
                                            if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
                                              goto LABEL_143;
                                          }
                                          else
                                          {
                                            dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
                                            if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
                                            {
LABEL_143:
                                              if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)
                                              {
LABEL_144:
                                                Manifest = (const __CFData *)ACFUFirmware::getManifest(*((ACFUFirmware **)this + 19));
                                                v142 = Manifest;
                                                if (Manifest)
                                                {
                                                  Length = (ACFULogging *)CFDataGetLength(Manifest);
                                                  if ((uint64_t)Length <= 0)
                                                  {
                                                    ACFULogging::getLogInstance(Length);
                                                    CFDataGetLength(v142);
                                                    v49 = (ACFULogging *)ACFULogging::handleMessage();
                                                    goto LABEL_310;
                                                  }
                                                  ACFULogging::getLogInstance(Length);
                                                  v144 = (ACFULogging *)ACFULogging::handleMessage();
                                                  ACFULogging::getLogInstance(v144);
                                                  *((_BYTE *)&v251.__r_.__value_.__s + 23) = 15;
                                                  strcpy((char *)&v251, "BasebandRestore");
                                                  v145 = std::string::append(&v251, "::", 2uLL);
                                                  v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
                                                  v252.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
                                                  *(_OWORD *)&v252.__r_.__value_.__l.__data_ = v146;
                                                  v145->__r_.__value_.__l.__size_ = 0;
                                                  v145->__r_.__value_.__r.__words[2] = 0;
                                                  v145->__r_.__value_.__r.__words[0] = 0;
                                                  v147 = std::string::append(&v252, "handleCertification", 0x13uLL);
                                                  v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
                                                  v262[2] = (void *)v147->__r_.__value_.__r.__words[2];
                                                  *(_OWORD *)v262 = v148;
                                                  v147->__r_.__value_.__l.__size_ = 0;
                                                  v147->__r_.__value_.__r.__words[2] = 0;
                                                  v147->__r_.__value_.__r.__words[0] = 0;
                                                  CFDataGetBytePtr(v142);
                                                  CFDataGetLength(v142);
                                                  ACFULogging::handleMessageBinary();
                                                  if (SHIBYTE(v262[2]) < 0)
                                                  {
                                                    operator delete(v262[0]);
                                                    if ((SHIBYTE(v252.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                    {
LABEL_148:
                                                      if ((SHIBYTE(v251.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                        goto LABEL_149;
LABEL_230:
                                                      operator delete(v251.__r_.__value_.__l.__data_);
LABEL_149:
                                                      BytePtr = CFDataGetBytePtr(v142);
                                                      v150 = CFDataGetLength(v142);
                                                      inited = (ACFULogging *)Img4DecodeInitManifest((uint64_t)BytePtr, v150, (uint64_t)value);
                                                      if ((_DWORD)inited)
                                                      {
                                                        ACFULogging::getLogInstance(inited);
                                                        v49 = (ACFULogging *)ACFULogging::handleMessage();
                                                        goto LABEL_310;
                                                      }
                                                      v152 = (ACFULogging *)CFDataGetLength(v142);
                                                      ACFULogging::getLogInstance(v152);
                                                      ACFULogging::handleMessage();
                                                      v153 = (ACFULogging *)CFDataGetBytePtr(v142);
                                                      v154 = value[33];
                                                      v155 = (char *)value[34];
                                                      ACFULogging::getLogInstance(v153);
                                                      v156 = (const UInt8 *)&v155[(_QWORD)v154];
                                                      v157 = (CFIndex)v152 + v153 - (ACFULogging *)v156;
                                                      v158 = (ACFULogging *)ACFULogging::handleMessage();
                                                      ACFULogging::getLogInstance(v158);
                                                      v159 = (ACFULogging *)ACFULogging::handleMessage();
                                                      ACFULogging::getLogInstance(v159);
                                                      *((_BYTE *)&v251.__r_.__value_.__s + 23) = 15;
                                                      strcpy((char *)&v251, "BasebandRestore");
                                                      v160 = std::string::append(&v251, "::", 2uLL);
                                                      v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
                                                      v252.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
                                                      *(_OWORD *)&v252.__r_.__value_.__l.__data_ = v161;
                                                      v160->__r_.__value_.__l.__size_ = 0;
                                                      v160->__r_.__value_.__r.__words[2] = 0;
                                                      v160->__r_.__value_.__r.__words[0] = 0;
                                                      v162 = std::string::append(&v252, "handleCertification", 0x13uLL);
                                                      v163 = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
                                                      v262[2] = (void *)v162->__r_.__value_.__r.__words[2];
                                                      *(_OWORD *)v262 = v163;
                                                      v162->__r_.__value_.__l.__size_ = 0;
                                                      v162->__r_.__value_.__r.__words[2] = 0;
                                                      v162->__r_.__value_.__r.__words[0] = 0;
                                                      ACFULogging::handleMessageBinary();
                                                      if (SHIBYTE(v262[2]) < 0)
                                                      {
                                                        operator delete(v262[0]);
                                                        if ((SHIBYTE(v252.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                        {
LABEL_152:
                                                          if ((SHIBYTE(v251.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                            goto LABEL_153;
LABEL_233:
                                                          operator delete(v251.__r_.__value_.__l.__data_);
LABEL_153:
                                                          v49 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v156, v157);
                                                          v164 = v49;
                                                          v255 = v49;
                                                          v165 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
                                                          if (!v49)
                                                            v165 = 0;
                                                          if (!v165
                                                            || (*((_QWORD *)this + 32) = v49,
                                                                v49 = (ACFULogging *)(*(uint64_t (**)(_QWORD, char *, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 51) + 32))(*((_QWORD *)this + 51), (char *)this + 200, *((_QWORD *)this + 17), *((_QWORD *)this + 15), 1), (_DWORD)v49))
                                                          {
                                                            ACFULogging::getLogInstance(v49);
                                                            v49 = (ACFULogging *)ACFULogging::handleMessage();
                                                            v166 = 0;
                                                            if (!v164)
                                                            {
LABEL_159:
                                                              if (!v166)
                                                                goto LABEL_310;
LABEL_160:
                                                              v260 = 0;
                                                              v261 = 0;
                                                              cf = 0;
                                                              v259 = 0;
                                                              memset(value, 0, 272);
                                                              v257 = 0;
                                                              v167 = (const __CFDictionary *)*((_QWORD *)this + 17);
                                                              if (v167)
                                                              {
                                                                v167 = (const __CFDictionary *)CFDictionaryGetValue(v167, CFSTR("BasebandEnableProvisioning"));
                                                                v168 = v167;
                                                                if (v167)
                                                                {
                                                                  v169 = CFGetTypeID(v167);
                                                                  v170 = (ACFULogging *)CFBooleanGetTypeID();
                                                                  if ((ACFULogging *)v169 != v170)
                                                                    goto LABEL_251;
                                                                  CFRetain(v168);
                                                                  v261 = v168;
                                                                  v167 = (const __CFDictionary *)CFBooleanGetValue((CFBooleanRef)v168);
                                                                  LODWORD(v168) = (_DWORD)v167 != 0;
                                                                }
                                                              }
                                                              else
                                                              {
                                                                LODWORD(v168) = 0;
                                                              }
                                                              ACFULogging::getLogInstance(v167);
                                                              ACFULogging::handleMessage();
                                                              if (!(_DWORD)v168)
                                                                goto LABEL_289;
                                                              v171 = (CFTypeID)CFDictionaryGetValue(*((CFDictionaryRef *)this + 17), CFSTR("ForceServerProvisioning"));
                                                              v172 = (const void *)v171;
                                                              if (v171)
                                                              {
                                                                v173 = CFGetTypeID((CFTypeRef)v171);
                                                                v171 = CFBooleanGetTypeID();
                                                                if (v173 != v171)
                                                                {
                                                                  v260 = 0;
                                                                  goto LABEL_174;
                                                                }
                                                                v171 = (CFTypeID)CFRetain(v172);
                                                              }
                                                              v260 = v172;
                                                              v174 = ctu::SharedRef<__CFBoolean const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFBoolean const>::get;
                                                              if (!v172)
                                                                v174 = 0;
                                                              if (v174)
                                                              {
                                                                v171 = CFBooleanGetValue((CFBooleanRef)v172);
                                                                v175 = v171 != 0;
LABEL_175:
                                                                ACFULogging::getLogInstance((ACFULogging *)v171);
                                                                ACFULogging::handleMessage();
                                                                v262[0] = (void *)0xAAAAAAAAAAAAAAAALL;
                                                                support::transport::ARI::create((support::transport::ARI *)"BasebandRestore", (dispatch_queue_s *)0x2710, 0, 0, (char **)v262);
                                                                v177 = v262[0];
                                                                if (!v262[0]
                                                                  || (v176 = KTLGetManifestStatus(), (v176 & 1) == 0))
                                                                {
                                                                  ACFULogging::getLogInstance((ACFULogging *)v176);
                                                                  ACFULogging::handleMessage();
                                                                  if (v177)
                                                                    (*(void (**)(void *))(*(_QWORD *)v177 + 8))(v177);
LABEL_329:
                                                                  v246 = 0;
                                                                  v247 = cf;
                                                                  if (!cf)
                                                                    goto LABEL_291;
                                                                  goto LABEL_290;
                                                                }
                                                                logManifestStatus((unsigned __int16 *)value);
                                                                v178 = (ACFULogging *)(*(uint64_t (**)(void *))(*(_QWORD *)v177 + 8))(v177);
                                                                v179 = WORD2(value[0]);
                                                                ACFULogging::getLogInstance(v178);
                                                                v180 = (ACFULogging *)ACFULogging::handleMessage();
                                                                if (v179)
                                                                  v181 = 1;
                                                                else
                                                                  v181 = v175;
                                                                if (v181 == 1)
                                                                {
                                                                  ACFULogging::getLogInstance(v180);
                                                                  ACFULogging::handleMessage();
                                                                  v182 = (ACFULogging *)*((_QWORD *)this + 17);
                                                                  v183 = (unint64_t *)*((_QWORD *)this + 52);
                                                                  v262[0] = *((void **)this + 51);
                                                                  v262[1] = v183;
                                                                  if (v183)
                                                                  {
                                                                    v184 = v183 + 1;
                                                                    do
                                                                      v185 = __ldxr(v184);
                                                                    while (__stxr(v185 + 1, v184));
                                                                  }
                                                                  v186 = *((_QWORD *)this + 20);
                                                                  v252.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 19);
                                                                  v252.__r_.__value_.__l.__size_ = v186;
                                                                  if (v186)
                                                                  {
                                                                    v187 = (unint64_t *)(v186 + 8);
                                                                    do
                                                                      v188 = __ldxr(v187);
                                                                    while (__stxr(v188 + 1, v187));
                                                                  }
                                                                  v170 = (ACFULogging *)provisionBaseband(v182, (uint64_t *)v262, (ACFUFirmware **)&v252, &v259);
                                                                  v189 = (char)v170;
                                                                  size = (std::__shared_weak_count *)v252.__r_.__value_.__l.__size_;
                                                                  if (v252.__r_.__value_.__l.__size_)
                                                                  {
                                                                    v191 = (unint64_t *)(v252.__r_.__value_.__l.__size_
                                                                                              + 8);
                                                                    do
                                                                      v192 = __ldaxr(v191);
                                                                    while (__stlxr(v192 - 1, v191));
                                                                    if (!v192)
                                                                    {
                                                                      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                                                                      std::__shared_weak_count::__release_weak(size);
                                                                    }
                                                                  }
                                                                  v193 = (std::__shared_weak_count *)v262[1];
                                                                  if (v262[1])
                                                                  {
                                                                    v194 = (unint64_t *)((char *)v262[1] + 8);
                                                                    do
                                                                      v195 = __ldaxr(v194);
                                                                    while (__stlxr(v195 - 1, v194));
                                                                    if (!v195)
                                                                    {
                                                                      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                                                                      std::__shared_weak_count::__release_weak(v193);
                                                                    }
                                                                  }
                                                                  if ((v189 & 1) != 0)
                                                                  {
LABEL_198:
                                                                    if (v259)
                                                                    {
                                                                      v196 = (const void *)*((_QWORD *)this + 59);
                                                                      *((_QWORD *)this + 59) = v259;
                                                                      if (!v196)
                                                                      {
LABEL_269:
                                                                        v240 = (uint64_t **)((char *)this + 32);
                                                                        v239 = (uint64_t *)*((_QWORD *)this + 4);
                                                                        if (v239)
                                                                        {
                                                                          while (1)
                                                                          {
                                                                            while (1)
                                                                            {
                                                                              v241 = (uint64_t **)v239;
                                                                              v242 = *((_DWORD *)v239 + 8);
                                                                              if (v242 < 4)
                                                                                break;
                                                                              v239 = *v241;
                                                                              v240 = v241;
                                                                              if (!*v241)
                                                                                goto LABEL_276;
                                                                            }
                                                                            if (v242 == 3)
                                                                              break;
                                                                            v239 = v241[1];
                                                                            if (!v239)
                                                                            {
                                                                              v240 = v241 + 1;
                                                                              goto LABEL_276;
                                                                            }
                                                                          }
                                                                          v243 = v241;
                                                                        }
                                                                        else
                                                                        {
                                                                          v241 = (uint64_t **)((char *)this + 32);
LABEL_276:
                                                                          v243 = operator new(0x40uLL);
                                                                          v243[8] = 3;
                                                                          *((_QWORD *)v243 + 6) = 0;
                                                                          *((_QWORD *)v243 + 7) = 0;
                                                                          *((_QWORD *)v243 + 5) = 0;
                                                                          *(_QWORD *)v243 = 0;
                                                                          *((_QWORD *)v243 + 1) = 0;
                                                                          *((_QWORD *)v243 + 2) = v241;
                                                                          *v240 = (uint64_t *)v243;
                                                                          v244 = **((_QWORD **)this + 3);
                                                                          v245 = (uint64_t *)v243;
                                                                          if (v244)
                                                                          {
                                                                            *((_QWORD *)this + 3) = v244;
                                                                            v245 = *v240;
                                                                          }
                                                                          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 4), v245);
                                                                          ++*((_QWORD *)this + 5);
                                                                        }
                                                                        v246 = 1;
                                                                        *((_BYTE *)v243 + 58) = 1;
                                                                        v247 = cf;
                                                                        if (!cf)
                                                                        {
LABEL_291:
                                                                          if (v260)
                                                                            CFRelease(v260);
                                                                          v49 = (ACFULogging *)v261;
                                                                          if (v261)
                                                                            CFRelease(v261);
                                                                          if ((v246 & 1) != 0)
                                                                            return 1;
LABEL_310:
                                                                          ACFULogging::getLogInstance(v49);
                                                                          ACFULogging::handleMessage();
                                                                          return 0;
                                                                        }
LABEL_290:
                                                                        CFRelease(v247);
                                                                        goto LABEL_291;
                                                                      }
LABEL_268:
                                                                      CFRelease(v196);
                                                                      goto LABEL_269;
                                                                    }
                                                                    ACFULogging::getLogInstance(v170);
                                                                    ACFULogging::handleMessage();
LABEL_289:
                                                                    v246 = 1;
                                                                    v247 = cf;
                                                                    if (!cf)
                                                                      goto LABEL_291;
                                                                    goto LABEL_290;
                                                                  }
                                                                  goto LABEL_251;
                                                                }
                                                                ACFULogging::getLogInstance(v180);
                                                                ACFULogging::handleMessage();
                                                                v197 = (ACFULogging *)*((_QWORD *)this + 17);
                                                                v198 = (unint64_t *)*((_QWORD *)this + 52);
                                                                v262[0] = *((void **)this + 51);
                                                                v262[1] = v198;
                                                                if (v198)
                                                                {
                                                                  v199 = v198 + 1;
                                                                  do
                                                                    v200 = __ldxr(v199);
                                                                  while (__stxr(v200 + 1, v199));
                                                                }
                                                                v201 = *((_QWORD *)this + 20);
                                                                v252.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 19);
                                                                v252.__r_.__value_.__l.__size_ = v201;
                                                                if (v201)
                                                                {
                                                                  v202 = (unint64_t *)(v201 + 8);
                                                                  do
                                                                    v203 = __ldxr(v202);
                                                                  while (__stxr(v203 + 1, v202));
                                                                }
                                                                v170 = (ACFULogging *)sendProvisionPing(v197, (uint64_t *)v262, (ACFUFirmware **)&v252, &v257);
                                                                v204 = (char)v170;
                                                                v205 = (std::__shared_weak_count *)v252.__r_.__value_.__l.__size_;
                                                                if (v252.__r_.__value_.__l.__size_)
                                                                {
                                                                  v206 = (unint64_t *)(v252.__r_.__value_.__l.__size_
                                                                                            + 8);
                                                                  do
                                                                    v207 = __ldaxr(v206);
                                                                  while (__stlxr(v207 - 1, v206));
                                                                  if (!v207)
                                                                  {
                                                                    ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                                                                    std::__shared_weak_count::__release_weak(v205);
                                                                  }
                                                                }
                                                                v208 = (std::__shared_weak_count *)v262[1];
                                                                if (v262[1])
                                                                {
                                                                  v209 = (unint64_t *)((char *)v262[1] + 8);
                                                                  do
                                                                    v210 = __ldaxr(v209);
                                                                  while (__stlxr(v210 - 1, v209));
                                                                  if (!v210)
                                                                  {
                                                                    ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                                                                    std::__shared_weak_count::__release_weak(v208);
                                                                  }
                                                                }
                                                                if ((v204 & 1) == 0)
                                                                {
LABEL_251:
                                                                  ACFULogging::getLogInstance(v170);
LABEL_328:
                                                                  ACFULogging::handleMessage();
                                                                  goto LABEL_329;
                                                                }
                                                                if (!v257)
                                                                {
                                                                  ACFULogging::getLogInstance(v170);
                                                                  ACFULogging::handleMessage();
                                                                  v218 = (ACFULogging *)*((_QWORD *)this + 17);
                                                                  v219 = *((_QWORD *)this + 52);
                                                                  v251.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 51);
                                                                  v251.__r_.__value_.__l.__size_ = v219;
                                                                  if (v219)
                                                                  {
                                                                    v220 = (unint64_t *)(v219 + 8);
                                                                    do
                                                                      v221 = __ldxr(v220);
                                                                    while (__stxr(v221 + 1, v220));
                                                                  }
                                                                  v222 = (unint64_t *)*((_QWORD *)this + 20);
                                                                  v255 = (ACFULogging *)*((_QWORD *)this + 19);
                                                                  v256 = (std::__shared_weak_count *)v222;
                                                                  if (v222)
                                                                  {
                                                                    v223 = v222 + 1;
                                                                    do
                                                                      v224 = __ldxr(v223);
                                                                    while (__stxr(v224 + 1, v223));
                                                                  }
                                                                  v170 = (ACFULogging *)provisionBaseband(v218, (uint64_t *)&v251, &v255, &v259);
                                                                  v225 = (char)v170;
                                                                  v226 = v256;
                                                                  if (v256)
                                                                  {
                                                                    v227 = (unint64_t *)&v256->__shared_owners_;
                                                                    do
                                                                      v228 = __ldaxr(v227);
                                                                    while (__stlxr(v228 - 1, v227));
                                                                    if (!v228)
                                                                    {
                                                                      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                                                                      std::__shared_weak_count::__release_weak(v226);
                                                                    }
                                                                  }
                                                                  v229 = (std::__shared_weak_count *)v251.__r_.__value_.__l.__size_;
                                                                  if (v251.__r_.__value_.__l.__size_)
                                                                  {
                                                                    v230 = (unint64_t *)(v251.__r_.__value_.__l.__size_
                                                                                              + 8);
                                                                    do
                                                                      v231 = __ldaxr(v230);
                                                                    while (__stlxr(v231 - 1, v230));
                                                                    if (!v231)
                                                                    {
                                                                      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                                                                      std::__shared_weak_count::__release_weak(v229);
                                                                    }
                                                                  }
                                                                  if ((v225 & 1) != 0)
                                                                    goto LABEL_198;
                                                                  goto LABEL_251;
                                                                }
                                                                v211 = *((_QWORD *)this + 52);
                                                                v251.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 51);
                                                                v251.__r_.__value_.__l.__size_ = v211;
                                                                if (v211)
                                                                {
                                                                  v212 = (unint64_t *)(v211 + 8);
                                                                  do
                                                                    v213 = __ldxr(v212);
                                                                  while (__stxr(v213 + 1, v212));
                                                                }
                                                                v214 = (unint64_t *)*((_QWORD *)this + 20);
                                                                v255 = (ACFULogging *)*((_QWORD *)this + 19);
                                                                v256 = (std::__shared_weak_count *)v214;
                                                                if (v214)
                                                                {
                                                                  v215 = v214 + 1;
                                                                  do
                                                                    v216 = __ldxr(v215);
                                                                  while (__stxr(v216 + 1, v215));
                                                                }
                                                                v253 = 0;
                                                                p_cf = &cf;
                                                                v217 = createBasebandProvInfo(0, &v251, &v255, &v253);
                                                                v170 = (ACFULogging *)*p_cf;
                                                                if (v253)
                                                                {
                                                                  *p_cf = v253;
                                                                  if (v170)
                                                                    goto LABEL_253;
                                                                }
                                                                else
                                                                {
                                                                  *p_cf = 0;
                                                                  if (v170)
LABEL_253:
                                                                    CFRelease(v170);
                                                                }
                                                                v232 = v256;
                                                                if (v256)
                                                                {
                                                                  v233 = (unint64_t *)&v256->__shared_owners_;
                                                                  do
                                                                    v234 = __ldaxr(v233);
                                                                  while (__stlxr(v234 - 1, v233));
                                                                  if (!v234)
                                                                  {
                                                                    ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                                                                    std::__shared_weak_count::__release_weak(v232);
                                                                  }
                                                                }
                                                                v235 = (std::__shared_weak_count *)v251.__r_.__value_.__l.__size_;
                                                                if (v251.__r_.__value_.__l.__size_)
                                                                {
                                                                  v236 = (unint64_t *)(v251.__r_.__value_.__l.__size_
                                                                                            + 8);
                                                                  do
                                                                    v237 = __ldaxr(v236);
                                                                  while (__stlxr(v237 - 1, v236));
                                                                  if (!v237)
                                                                  {
                                                                    ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                                                                    std::__shared_weak_count::__release_weak(v235);
                                                                  }
                                                                }
                                                                if ((v217 & 1) != 0 && cf)
                                                                {
                                                                  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                                                                  v259 = Mutable;
                                                                  if (Mutable)
                                                                  {
                                                                    CFDictionaryAddValue(Mutable, CFSTR("BasebandProvInfo"), cf);
                                                                    v196 = (const void *)*((_QWORD *)this + 59);
                                                                    *((_QWORD *)this + 59) = v259;
                                                                    if (!v196)
                                                                      goto LABEL_269;
                                                                    goto LABEL_268;
                                                                  }
                                                                  ACFULogging::getLogInstance(0);
                                                                  goto LABEL_328;
                                                                }
                                                                goto LABEL_251;
                                                              }
LABEL_174:
                                                              v175 = 0;
                                                              goto LABEL_175;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            v166 = 1;
                                                            if (!v164)
                                                              goto LABEL_159;
                                                          }
                                                          CFRelease(v164);
                                                          goto LABEL_159;
                                                        }
                                                      }
                                                      else if ((SHIBYTE(v252.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                      {
                                                        goto LABEL_152;
                                                      }
                                                      operator delete(v252.__r_.__value_.__l.__data_);
                                                      if ((SHIBYTE(v251.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                        goto LABEL_153;
                                                      goto LABEL_233;
                                                    }
                                                  }
                                                  else if ((SHIBYTE(v252.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                  {
                                                    goto LABEL_148;
                                                  }
                                                  operator delete(v252.__r_.__value_.__l.__data_);
                                                  if ((SHIBYTE(v251.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                    goto LABEL_149;
                                                  goto LABEL_230;
                                                }
                                                ACFULogging::getLogInstance(0);
LABEL_307:
                                                v49 = (ACFULogging *)ACFULogging::handleMessage();
                                                goto LABEL_310;
                                              }
LABEL_305:
                                              ACFULogging::getLogInstance(v139);
                                              goto LABEL_307;
                                            }
                                          }
                                          dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
                                          if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)
                                            goto LABEL_144;
                                          goto LABEL_305;
                                        }
LABEL_136:
                                        operator delete(v251.__r_.__value_.__l.__data_);
                                        goto LABEL_137;
                                      }
LABEL_133:
                                      (*(void (**)(ACFULogging *))(*(_QWORD *)v134 + 16))(v134);
                                      goto LABEL_134;
                                    }
LABEL_56:
                                    ACFULogging::getLogInstance(HardwareConfig);
                                    v49 = (ACFULogging *)ACFULogging::handleMessage();
                                    v50 = 0;
                                    if ((SHIBYTE(v251.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                      goto LABEL_137;
                                    goto LABEL_136;
                                  }
                                }
                                else
                                {
                                  v127 = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerStop", "sBBUFSServerStop function not initialized\n", v120, v121, v122, v123, v124, v125, (char)"BasebandRestore");
                                }
                                ACFULogging::getLogInstance(v127);
                                v250 = "BasebandRestore";
                                ACFULogging::handleMessage();
                                goto LABEL_116;
                              }
                            }
                            else
                            {
                              v87 = (uint64_t)_BBUFSDebugPrint("BBUFSServerFlush", "sBBUFSServerFlush function not initialized\n", v114, v115, v116, v117, v118, v119, v249);
                            }
                          }
                        }
                        else
                        {
                          v87 = (uint64_t)_BBUFSDebugPrint("BBUFSServerStart", "sBBUFSServerStart function not initialized\n", v108, v109, v110, v111, v112, v113, v249);
                        }
                      }
                    }
                    else
                    {
                      v87 = (uint64_t)_BBUFSDebugPrint("BBUFSServerSetConfig", "sBBUFSServerSetConfig function not initialized\n", v102, v103, v104, v105, v106, v107, v249);
                    }
                  }
                }
                else
                {
                  v87 = (uint64_t)_BBUFSDebugPrint("BBUFSServerSetConfig", "sBBUFSServerSetConfig function not initialized\n", v96, v97, v98, v99, v100, v101, v249);
                }
              }
LABEL_110:
              ACFULogging::getLogInstance((ACFULogging *)v87);
              v250 = "BasebandRestore";
              ACFULogging::handleMessage();
              v126 = 0;
              if (!(_BYTE)v264)
                goto LABEL_116;
              goto LABEL_111;
            default:
              _BBUFSDebugPrint("BBUFSServerCreate", "invalid state machine type %u\n", v81, v82, v83, v84, v85, v86, v80);
              v88 = sBBUFSServerSetConfigDefaults;
              if (!sBBUFSServerSetConfigDefaults)
              {
LABEL_96:
                v94 = 0;
                v95 = "BBUFSServer create failed\n";
                goto LABEL_97;
              }
LABEL_92:
              if (((unsigned int (*)(void **))v88)(value))
                goto LABEL_93;
              goto LABEL_96;
          }
          sBBUFSServerStart = (uint64_t (*)(_QWORD))v93;
          sBBUFSServerStop = (uint64_t (*)(_QWORD))v92;
          sBBUFSServerFlush = (uint64_t (*)(_QWORD))v91;
          sBBUFSServerFlushInProgress = v90;
          sBBUFSServerSetConfig = v89;
          sBBUFSServerSetConfigDefaults = v88;
          goto LABEL_92;
        }
        Svn = (ACFULogging *)KTLCpsGetSvn();
        if ((_DWORD)Svn)
        {
          ACFULogging::getLogInstance(Svn);
          v47 = (ACFULogging *)ACFULogging::handleMessage();
          if (v38 != LOBYTE(v262[0]))
          {
            ACFULogging::getLogInstance(v47);
            ACFULogging::handleMessage();
            v47 = (ACFULogging *)KTLCpsSetSvn();
            if (!(_DWORD)v47)
              goto LABEL_59;
          }
        }
        else
        {
          ACFULogging::getLogInstance(Svn);
          ACFULogging::handleMessage();
          v47 = (ACFULogging *)KTLCpsSetSvn();
          if (!(_DWORD)v47)
          {
LABEL_59:
            ACFULogging::getLogInstance(v47);
            ACFULogging::handleMessage();
            (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
            goto LABEL_60;
          }
        }
        ACFULogging::getLogInstance(v47);
        ACFULogging::handleMessage();
        (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
        goto LABEL_63;
    }
  }
  return result;
}

void sub_212AE7018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25,uint64_t a26,const void *a27,const void *a28)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a25);
  ctu::cf::CFSharedRef<__CFBoolean const>::~CFSharedRef(&a27);
  ctu::cf::CFSharedRef<__CFBoolean const>::~CFSharedRef(&a28);
  _Unwind_Resume(a1);
}

uint64_t BasebandRestore::addEntitlements(CFDictionaryRef *this, __CFDictionary *a2)
{
  const __CFBoolean *Value;
  const __CFBoolean *v5;
  CFTypeID v6;
  const __CFBoolean *v7;
  const __CFBoolean *v8;
  CFTypeID v9;
  const __CFBoolean *v10;
  const __CFBoolean *v11;
  CFTypeID v12;
  const __CFBoolean *v13;
  const __CFBoolean *v14;
  CFTypeID v15;
  ACFULogging *v16;
  ACFULogging *v17;
  CFTypeID v18;
  const __CFData **v19;
  int v20;
  const void *v21;
  char *data;
  uint64_t (*v23)(uint64_t);
  const __CFBoolean *v24;
  const __CFBoolean *v25;
  CFTypeID v26;
  const __CFBoolean *v27;
  const __CFBoolean *v28;
  CFTypeID v29;
  const void *v30;
  const void *v31;
  CFTypeID v32;
  const __CFBoolean *v33;
  const __CFBoolean *v34;
  CFTypeID v35;
  const __CFBoolean *v36;
  const __CFBoolean *v37;
  CFTypeID v38;
  CFTypeID v39;
  ACFULogging *TypeID;
  __CFString v42;

  Value = (const __CFBoolean *)CFDictionaryGetValue(this[17], CFSTR("BasebandEnableCalibration"));
  if (Value)
  {
    v5 = Value;
    v6 = CFGetTypeID(Value);
    if (v6 == CFBooleanGetTypeID() && CFBooleanGetValue(v5) == 1)
      CFDictionarySetValue(a2, CFSTR("Cellular1,BbCalibrationEnable"), (const void *)*MEMORY[0x24BDBD270]);
  }
  v7 = (const __CFBoolean *)CFDictionaryGetValue(this[17], CFSTR("BasebandEnableFactoryDebug"));
  if (v7)
  {
    v8 = v7;
    v9 = CFGetTypeID(v7);
    if (v9 == CFBooleanGetTypeID() && CFBooleanGetValue(v8) == 1)
      CFDictionarySetValue(a2, CFSTR("Cellular1,BbFactoryDebugEnable"), (const void *)*MEMORY[0x24BDBD270]);
  }
  v10 = (const __CFBoolean *)CFDictionaryGetValue(this[17], CFSTR("BasebandEnableActivationBypass"));
  if (v10)
  {
    v11 = v10;
    v12 = CFGetTypeID(v10);
    if (v12 == CFBooleanGetTypeID() && CFBooleanGetValue(v11) == 1)
      CFDictionarySetValue(a2, CFSTR("Cellular1,BbActivationBypassEnable"), (const void *)*MEMORY[0x24BDBD270]);
  }
  v13 = (const __CFBoolean *)CFDictionaryGetValue(this[16], CFSTR("BasebandHardwareConfigLockOverride"));
  if (v13)
  {
    v14 = v13;
    v15 = CFGetTypeID(v13);
    if (v15 == CFBooleanGetTypeID() && CFBooleanGetValue(v14) == 1)
      CFDictionarySetValue(a2, CFSTR("Cellular1,HardwareConfigLockOverride"), (const void *)*MEMORY[0x24BDBD270]);
  }
  v16 = (ACFULogging *)CFDictionaryGetValue(this[17], CFSTR("BasebandFactoryActivationKeyID"));
  if (v16)
  {
    v17 = v16;
    ACFULogging::getLogInstance(v16);
    ACFULogging::handleMessage();
    v18 = CFGetTypeID(v17);
    if (v18 == CFStringGetTypeID())
    {
      v42.isa = 0;
      v42.info = (uint64_t)&v42.data;
      v42.data = 0;
      v20 = support::cf::copyDataFromHexString(v17, &v42, v19);
      v21 = *(const void **)v42.info;
      if (v42.isa)
      {
        *(_QWORD *)v42.info = v42.isa;
        if (v21)
          goto LABEL_23;
      }
      else
      {
        *(_QWORD *)v42.info = 0;
        if (v21)
LABEL_23:
          CFRelease(v21);
      }
      data = v42.data;
      if (v20)
      {
        v23 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
        if (!v42.data)
          v23 = 0;
        if (v23)
        {
          ACFULogging::getLogInstance((ACFULogging *)v42.data);
          ACFULogging::handleMessage();
          CFDictionarySetValue(a2, CFSTR("Cellular1,BbFactoryActivationManifestKeyHash"), v42.data);
          data = v42.data;
        }
      }
      if (data)
        CFRelease(data);
    }
  }
  v24 = (const __CFBoolean *)CFDictionaryGetValue(this[17], CFSTR("FDRAllowUnsealedData"));
  if (v24)
  {
    v25 = v24;
    v26 = CFGetTypeID(v24);
    if (v26 == CFBooleanGetTypeID() && CFBooleanGetValue(v25) == 1)
      CFDictionarySetValue(a2, CFSTR("Cellular1,FDRAllowUnsealed"), (const void *)*MEMORY[0x24BDBD270]);
  }
  v27 = (const __CFBoolean *)CFDictionaryGetValue(this[17], CFSTR("FDRSkipSealing"));
  if (v27)
  {
    v28 = v27;
    v29 = CFGetTypeID(v27);
    if (v29 == CFBooleanGetTypeID() && CFBooleanGetValue(v28) == 1)
      CFDictionarySetValue(a2, CFSTR("Cellular1,FDRAllowUnsealed"), (const void *)*MEMORY[0x24BDBD270]);
  }
  v30 = CFDictionaryGetValue(this[17], CFSTR("BbRequestEntries"));
  if (!v30)
  {
    ACFULogging::getLogInstance(0);
    goto LABEL_53;
  }
  v31 = v30;
  v32 = CFGetTypeID(v30);
  if (v32 != CFDictionaryGetTypeID())
  {
    v39 = CFGetTypeID(v31);
    TypeID = (ACFULogging *)CFDictionaryGetTypeID();
    if ((ACFULogging *)v39 == TypeID)
      goto LABEL_54;
    ACFULogging::getLogInstance(TypeID);
LABEL_53:
    ACFULogging::handleMessage();
    goto LABEL_54;
  }
  AMSupportSafeRetain();
  v33 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v31, CFSTR("BbFATPCalibrationEnable"));
  if (v33)
  {
    v34 = v33;
    v35 = CFGetTypeID(v33);
    if (v35 == CFBooleanGetTypeID() && CFBooleanGetValue(v34) == 1)
      CFDictionarySetValue(a2, CFSTR("Cellular1,BbFATPCalibrationEnable"), (const void *)*MEMORY[0x24BDBD270]);
  }
  v36 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v31, CFSTR("BbProvisioningEnable"));
  if (v36)
  {
    v37 = v36;
    v38 = CFGetTypeID(v36);
    if (v38 == CFBooleanGetTypeID() && CFBooleanGetValue(v37) == 1)
      CFDictionarySetValue(a2, CFSTR("Cellular1,BbProvisioningEnable"), (const void *)*MEMORY[0x24BDBD270]);
  }
  CFRelease(v31);
LABEL_54:
  CFDictionarySetValue(a2, CFSTR("LocalSigningID"), (const void *)*MEMORY[0x24BDBD268]);
  return 1;
}

void sub_212AE77B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212AE77C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const void *v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, const void *);
  v7 = va_arg(va1, _QWORD);
  ctu::cf::detail::TakeOwnershipProxy<__CFData const>::~TakeOwnershipProxy((const void **)va);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void BasebandRestore::queryCmd(const __CFDictionary **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t CurrentUpdateStep;
  __int128 *v5;
  ACFULogging *v6;
  const __CFDictionary *v7;
  uint64_t (*v8)(uint64_t);
  __CFDictionary *MutableCopy;
  __CFDictionary *v10;
  ACFULogging *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  char v16;
  unint64_t v17;
  CFStringRef v18;
  CFStringRef v19;
  uint64_t ValueForKeyPathInDict;
  const void *v21;
  CFTypeID TypeID;
  ACFULogging *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  char v28;
  __int128 *v29;
  std::string v30;
  std::string v31;
  __int128 v32;
  int64_t v33;

  ACFULogging::getLogInstance((ACFULogging *)this);
  CurrentUpdateStep = ACFURestore::getCurrentUpdateStep((ACFURestore *)this);
  ACFURestore::getCurrentUpdateStep((ACFURestore *)this);
  ACFURestore::getStepName();
  if (v33 >= 0)
    v5 = &v32;
  else
    v5 = (__int128 *)v32;
  v29 = v5;
  ACFULogging::handleMessage();
  if (SHIBYTE(v33) < 0)
  {
    operator delete((void *)v32);
    v6 = (ACFULogging *)ACFURestore::getCurrentUpdateStep((ACFURestore *)this);
    if (!(_DWORD)v6)
      goto LABEL_19;
  }
  else
  {
    v6 = (ACFULogging *)ACFURestore::getCurrentUpdateStep((ACFURestore *)this);
    if (!(_DWORD)v6)
    {
LABEL_19:
      ACFURestore::queryCmd((ACFURestore *)this);
      v17 = 0xAAAAAAAAAAAAAAAALL;
      v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%@.%@"), CFSTR("BundleOverrides"), CFSTR("BasebandFirmware"), CurrentUpdateStep, v29);
      if (!v18)
      {
        ACFULogging::getLogInstance(0);
        ACFULogging::handleMessage();
LABEL_49:
        v28 = 0;
        v19 = (CFStringRef)0xAAAAAAAAAAAAAAAALL;
        v17 = 0;
        goto LABEL_32;
      }
      v19 = v18;
      ValueForKeyPathInDict = AMSupportGetValueForKeyPathInDict();
      if (ValueForKeyPathInDict)
      {
        v21 = (const void *)ValueForKeyPathInDict;
        TypeID = CFStringGetTypeID();
        v23 = (ACFULogging *)CFGetTypeID(v21);
        if ((ACFULogging *)TypeID != v23)
        {
          ACFULogging::getLogInstance(v23);
          CFGetTypeID(v21);
LABEL_48:
          ACFULogging::handleMessage();
          CFRelease(v19);
          goto LABEL_49;
        }
        CFDictionarySetValue((CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL, CFSTR("ACFUFirmware"), v21);
      }
      if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
      {
        if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
          goto LABEL_25;
      }
      else
      {
        dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
        if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
        {
LABEL_25:
          if (!(BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS))
            goto LABEL_28;
LABEL_26:
          if (this[17])
          {
            ValueForKeyPathInDict = (*((uint64_t (**)(const __CFDictionary **, unint64_t))*this + 12))(this, 0xAAAAAAAAAAAAAAAALL);
            if ((ValueForKeyPathInDict & 1) != 0)
            {
LABEL_28:
              ACFULogging::getLogInstance((ACFULogging *)ValueForKeyPathInDict);
              *((_BYTE *)&v30.__r_.__value_.__s + 23) = 15;
              strcpy((char *)&v30, "BasebandRestore");
              v24 = std::string::append(&v30, "::", 2uLL);
              v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
              v31.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v25;
              v24->__r_.__value_.__l.__size_ = 0;
              v24->__r_.__value_.__r.__words[2] = 0;
              v24->__r_.__value_.__r.__words[0] = 0;
              v26 = std::string::append(&v31, "FWUpdateQuery", 0xDuLL);
              v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
              v33 = v26->__r_.__value_.__r.__words[2];
              v32 = v27;
              v26->__r_.__value_.__l.__size_ = 0;
              v26->__r_.__value_.__r.__words[2] = 0;
              v26->__r_.__value_.__r.__words[0] = 0;
              ACFULogging::handleMessageCFType();
              if (SHIBYTE(v33) < 0)
              {
                operator delete((void *)v32);
                if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_30:
                  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_31:
                    v28 = 1;
LABEL_32:
                    CFRelease(v19);
                    *(_QWORD *)a2 = v17;
                    *(_BYTE *)(a2 + 8) = v28;
                    return;
                  }
LABEL_36:
                  operator delete(v30.__r_.__value_.__l.__data_);
                  goto LABEL_31;
                }
              }
              else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_30;
              }
              operator delete(v31.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_31;
              goto LABEL_36;
            }
          }
          ACFULogging::getLogInstance((ACFULogging *)ValueForKeyPathInDict);
          goto LABEL_48;
        }
      }
      dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
      if (!(BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS))
        goto LABEL_28;
      goto LABEL_26;
    }
  }
  if ((_DWORD)v6 == 2)
    goto LABEL_19;
  if ((_DWORD)v6 == 3)
  {
    v7 = this[59];
    v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    if (!v7)
      v8 = 0;
    if (!v8)
    {
      ACFULogging::getLogInstance(v6);
      ACFULogging::handleMessage();
      v10 = 0;
      v16 = 0;
      goto LABEL_18;
    }
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, v7);
    v10 = MutableCopy;
    if (!MutableCopy)
    {
      ACFULogging::getLogInstance(0);
      ACFULogging::handleMessage();
      v16 = 0;
      goto LABEL_18;
    }
    CFDictionaryAddValue(MutableCopy, CFSTR("LocalSigningID"), (const void *)*MEMORY[0x24BDBD270]);
    ACFULogging::getLogInstance(v11);
    *((_BYTE *)&v30.__r_.__value_.__s + 23) = 15;
    strcpy((char *)&v30, "BasebandRestore");
    v12 = std::string::append(&v30, "::", 2uLL);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v31, "ProvisionQuery", 0xEuLL);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v33 = v14->__r_.__value_.__r.__words[2];
    v32 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    ACFULogging::handleMessageCFType();
    if (SHIBYTE(v33) < 0)
    {
      operator delete((void *)v32);
      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_16:
        if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_17:
          v16 = 1;
LABEL_18:
          *(_QWORD *)a2 = v10;
          *(_BYTE *)(a2 + 8) = v16;
          return;
        }
LABEL_39:
        operator delete(v30.__r_.__value_.__l.__data_);
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
  ACFURestore::queryCmd((ACFURestore *)this);
}

void sub_212AE7D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 - 73) < 0)
  {
    operator delete(*(void **)(v27 - 96));
    if ((a27 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a16);
      goto LABEL_8;
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a21 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL BasebandRestore::bootInternal(ACFURTKitROM **this)
{
  ACFULogging *v2;
  _BOOL8 v3;
  const __CFData *Length;
  const __CFData *v5;
  uint64_t (*v6)(uint64_t);
  const std::string::value_type *BytePtr;
  unsigned __int8 *v8;
  std::string::size_type size;
  std::string *v10;
  std::string *v11;
  std::string::size_type v12;
  int64_t v13;
  unsigned __int8 *v14;
  unint64_t v16;
  char v17;
  void *v18;
  std::string::size_type v19;
  std::string *p_p;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::string *v24;
  unsigned __int8 *v25;
  size_t v26;
  std::string *v27;
  uint64_t v28;
  uint64_t v29;
  std::string::size_type v30;
  _QWORD *v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  os_unfair_lock_s *v41;
  std::string *v42;
  const void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::string::size_type v47;
  std::string::size_type v48;
  int v49;
  std::string *v50;
  uint64_t v51;
  std::string *p_s1;
  int v53;
  int v54;
  int v55;
  _BOOL4 v56;
  std::string::size_type v58;
  _QWORD *v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::string *v69;
  const void *v70;
  CFStringRef *v71;
  const __CFString *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  __int128 v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  _OWORD *v87;
  const char *p_cf;
  const __CFString *v89;
  CFPropertyListRef v90;
  const __CFString *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  ACFULogging *v95;
  ACFURTKitROM *v96;
  unint64_t *v97;
  unint64_t v98;
  ACFURTKitROM *v99;
  unint64_t *v100;
  unint64_t v101;
  ACFURTKitROM *v102;
  ACFULogging *v103;
  int v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  _OWORD v112[2];
  __int128 v113;
  ACFURTKitROM *v114;
  std::__shared_weak_count *v115;
  ACFURTKitROM *v116;
  std::__shared_weak_count *v117;
  std::string v118;
  CFTypeRef cf;
  __int128 v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  std::string __s1;
  std::string __p;
  std::string v125;
  const __CFString *v126;
  std::string v127;
  CFPropertyListRef v128;
  CFPropertyListRef v129;

  __s1.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  __s1.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
  __s1.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
  ACFULogging::getLogInstance((ACFULogging *)this);
  ACFULogging::handleMessage();
  v2 = this[19];
  if (!v2)
  {
    ACFULogging::getLogInstance(0);
LABEL_238:
    ACFULogging::handleMessage();
    v3 = 0;
    goto LABEL_228;
  }
  if (!this[21] || !this[51])
  {
    ACFULogging::getLogInstance(v2);
    goto LABEL_238;
  }
  v3 = *((_BYTE *)this + 465) != 0;
  if (!*((_BYTE *)this + 465))
    goto LABEL_207;
  memset(&v127, 0, sizeof(v127));
  v125.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  v125.__r_.__value_.__r.__words[2] = 0x5AAAAAAAAAAAAAALL;
  v125.__r_.__value_.__r.__words[0] = 0xAAAA003A57464242;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&__p, "bver");
  Length = (const __CFData *)ACFUFirmware::copyFWDataByFileName();
  v5 = Length;
  cf = Length;
  v6 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  if (!Length)
    v6 = 0;
  if (!v6)
    goto LABEL_8;
  BytePtr = (const std::string::value_type *)CFDataGetBytePtr(Length);
  if (!BytePtr)
  {
    ACFULogging::getLogInstance(0);
    goto LABEL_32;
  }
  Length = (const __CFData *)CFDataGetLength(v5);
  if ((uint64_t)Length <= 0)
  {
LABEL_8:
    ACFULogging::getLogInstance(Length);
    goto LABEL_32;
  }
  v8 = (unsigned __int8 *)std::string::__assign_external(&v127, BytePtr);
  size = v127.__r_.__value_.__l.__size_;
  v10 = (std::string *)v127.__r_.__value_.__r.__words[0];
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v127;
  else
    v11 = (std::string *)v127.__r_.__value_.__r.__words[0];
  v12 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  else
    v13 = v127.__r_.__value_.__l.__size_;
  if (v13 < 5)
    goto LABEL_31;
  v14 = (unsigned __int8 *)v11 + v13;
  v8 = (unsigned __int8 *)v11;
  while (1)
  {
    v8 = (unsigned __int8 *)memchr(v8, v125.__r_.__value_.__s.__data_[0], v13 - 4);
    if (!v8)
      goto LABEL_31;
    if (*(_DWORD *)v8 == LODWORD(v125.__r_.__value_.__l.__data_)
      && v8[4] == v125.__r_.__value_.__s.__data_[4])
    {
      break;
    }
    ++v8;
    v13 = v14 - v8;
    if (v14 - v8 < 5)
      goto LABEL_31;
  }
  if (v8 == v14 || v8 - (unsigned __int8 *)v11 == -1)
  {
LABEL_31:
    ACFULogging::getLogInstance((ACFULogging *)v8);
    goto LABEL_32;
  }
  v16 = v8 - (unsigned __int8 *)v11 + 5;
  if ((v12 & 0x80) == 0)
  {
    if (v16 <= v12)
    {
      v10 = &v127;
      size = v12;
      goto LABEL_37;
    }
LABEL_242:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (size < v16)
    goto LABEL_242;
LABEL_37:
  v19 = size - v16;
  if (size - v16 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v19 >= 0x17)
  {
    v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v21 = v19 | 7;
    v22 = v21 + 1;
    p_p = (std::string *)operator new(v21 + 1);
    __p.__r_.__value_.__l.__size_ = v19;
    __p.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = size - v16;
    p_p = &__p;
    if (size == v16)
      goto LABEL_45;
  }
  v8 = (unsigned __int8 *)memmove(p_p, (char *)v10 + v16, v19);
LABEL_45:
  p_p->__r_.__value_.__s.__data_[v19] = 0;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  v127 = __p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = v127.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v127;
  else
    v24 = (std::string *)v127.__r_.__value_.__r.__words[0];
  if ((uint64_t)v23 >= 1)
  {
    v25 = (unsigned __int8 *)v24 + v23;
    v26 = v23;
    v8 = (unsigned __int8 *)v24;
    while (1)
    {
      v8 = (unsigned __int8 *)memchr(v8, 124, v26);
      if (!v8)
        goto LABEL_67;
      if (*v8 == 124)
        break;
      ++v8;
      v26 = v25 - v8;
      if (v25 - v8 < 1)
        goto LABEL_67;
    }
    if (v8 == v25 || v8 - (unsigned __int8 *)v24 == -1)
      goto LABEL_67;
    if (v23 >= v8 - (unsigned __int8 *)v24)
      v23 = v8 - (unsigned __int8 *)v24;
    if (v23 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v23 >= 0x17)
    {
      v28 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17)
        v28 = v23 | 7;
      v29 = v28 + 1;
      v27 = (std::string *)operator new(v28 + 1);
      __p.__r_.__value_.__l.__size_ = v23;
      __p.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v23;
      v27 = &__p;
      if (!v23)
      {
LABEL_72:
        v27->__r_.__value_.__s.__data_[v23] = 0;
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
        __s1 = __p;
        v17 = 1;
        if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_33;
        goto LABEL_75;
      }
    }
    memmove(v27, v24, v23);
    goto LABEL_72;
  }
LABEL_67:
  ACFULogging::getLogInstance((ACFULogging *)v8);
LABEL_32:
  ACFULogging::handleMessage();
  v17 = 0;
  if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_34;
LABEL_76:
    operator delete(v127.__r_.__value_.__l.__data_);
    v18 = (void *)cf;
    if (!cf)
      goto LABEL_78;
    goto LABEL_77;
  }
LABEL_75:
  operator delete(v125.__r_.__value_.__l.__data_);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_76;
LABEL_34:
  v18 = (void *)cf;
  if (cf)
LABEL_77:
    CFRelease(v18);
LABEL_78:
  if ((v17 & 1) == 0)
  {
    ACFULogging::getLogInstance((ACFULogging *)v18);
    goto LABEL_238;
  }
  v127.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  v127.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
  v127.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v30 = off_254B60208;
  if (!off_254B60208)
  {
    v31 = operator new(0x30uLL);
    MEMORY[0x212BF9A7C](v31, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x24BDBD590]);
    v31[3] = 0;
    v31[4] = 0;
    *((_DWORD *)v31 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&v125, (uint64_t)v31);
    v32 = *(_OWORD *)&v125.__r_.__value_.__l.__data_;
    *(_OWORD *)&v125.__r_.__value_.__l.__data_ = 0uLL;
    v33 = (std::__shared_weak_count *)*(&off_254B60208 + 1);
    off_254B60208 = v32;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = (std::__shared_weak_count *)v125.__r_.__value_.__l.__size_;
    if (v125.__r_.__value_.__l.__size_)
    {
      v37 = (unint64_t *)(v125.__r_.__value_.__l.__size_ + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v30 = off_254B60208;
  }
  __p.__r_.__value_.__r.__words[0] = v30;
  __p.__r_.__value_.__l.__size_ = *(&off_254B60208 + 1);
  if (*(&off_254B60208 + 1))
  {
    v39 = (unint64_t *)(*(&off_254B60208 + 1) + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  v113 = xmmword_212B549E0;
  *(_OWORD *)&v125.__r_.__value_.__r.__words[1] = xmmword_212B549E0;
  strcpy(v125.__r_.__value_.__l.__data_, "Baseband firmware version");
  qmemcpy(v112, "firmware versionBaseband firmwar", sizeof(v112));
  v41 = (os_unfair_lock_s *)(v30 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
  if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = &v125;
  else
    v42 = (std::string *)v125.__r_.__value_.__r.__words[0];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&cf, (const char *)v42);
  v43 = (const void *)(**(uint64_t (***)(std::string::size_type, CFTypeRef))v30)(v30, cf);
  if (v43)
  {
    ctu::cf::assign();
    CFRelease(v43);
  }
  MEMORY[0x212BF9A34](&cf);
  os_unfair_lock_unlock(v41);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v125.__r_.__value_.__l.__data_);
  v44 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v45 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    v47 = __s1.__r_.__value_.__l.__size_;
  v48 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  v49 = SHIBYTE(v127.__r_.__value_.__r.__words[2]);
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v48 = v127.__r_.__value_.__l.__size_;
  if (v47 != v48)
  {
    v56 = 1;
    if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_128;
    goto LABEL_131;
  }
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = &v127;
  else
    v50 = (std::string *)v127.__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v56 = memcmp(__s1.__r_.__value_.__l.__data_, v50, __s1.__r_.__value_.__l.__size_) != 0;
    goto LABEL_127;
  }
  if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
  {
    v51 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
    p_s1 = &__s1;
    do
    {
      v54 = p_s1->__r_.__value_.__s.__data_[0];
      p_s1 = (std::string *)((char *)p_s1 + 1);
      v53 = v54;
      v55 = v50->__r_.__value_.__s.__data_[0];
      v50 = (std::string *)((char *)v50 + 1);
      v56 = v53 != v55;
    }
    while (v53 == v55 && v51-- != 0);
LABEL_127:
    if ((v49 & 0x80000000) == 0)
      goto LABEL_128;
    goto LABEL_131;
  }
  v56 = 0;
  if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_128:
    if (!v56)
      goto LABEL_207;
    goto LABEL_132;
  }
LABEL_131:
  operator delete(v127.__r_.__value_.__l.__data_);
  if (!v56)
    goto LABEL_207;
LABEL_132:
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v58 = off_254B60208;
  if (!off_254B60208)
  {
    v59 = operator new(0x30uLL);
    MEMORY[0x212BF9A7C](v59, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x24BDBD590]);
    v59[3] = 0;
    v59[4] = 0;
    *((_DWORD *)v59 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&v127, (uint64_t)v59);
    v60 = *(_OWORD *)&v127.__r_.__value_.__l.__data_;
    *(_OWORD *)&v127.__r_.__value_.__l.__data_ = 0uLL;
    v61 = (std::__shared_weak_count *)*(&off_254B60208 + 1);
    off_254B60208 = v60;
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v64 = (std::__shared_weak_count *)v127.__r_.__value_.__l.__size_;
    if (v127.__r_.__value_.__l.__size_)
    {
      v65 = (unint64_t *)(v127.__r_.__value_.__l.__size_ + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v58 = off_254B60208;
  }
  v125.__r_.__value_.__r.__words[0] = v58;
  v125.__r_.__value_.__l.__size_ = *(&off_254B60208 + 1);
  if (*(&off_254B60208 + 1))
  {
    v67 = (unint64_t *)(*(&off_254B60208 + 1) + 8);
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v127.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&v127.__r_.__value_.__r.__words[1] = xmmword_212B549F0;
  strcpy(v127.__r_.__value_.__l.__data_, "Firmware version changed since last commcenter launch");
  os_unfair_lock_lock((os_unfair_lock_t)(v58 + 40));
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v69 = &v127;
  else
    v69 = (std::string *)v127.__r_.__value_.__r.__words[0];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&cf, (const char *)v69);
  v70 = (const void *)*MEMORY[0x24BDBD270];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
  v71 = (CFStringRef *)MEMORY[0x24BDBD588];
  if (v70)
  {
    v72 = (const __CFString *)*MEMORY[0x24BDBD588];
    CFPreferencesSetValue((CFStringRef)cf, v70, *(CFStringRef *)(v58 + 8), *(CFStringRef *)(v58 + 16), (CFStringRef)*MEMORY[0x24BDBD588]);
    CFPreferencesSynchronize(*(CFStringRef *)(v58 + 8), *(CFStringRef *)(v58 + 16), v72);
    CFRelease(v70);
  }
  MEMORY[0x212BF9A34](&cf);
  os_unfair_lock_unlock((os_unfair_lock_t)(v58 + 40));
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  v73 = (std::__shared_weak_count *)v125.__r_.__value_.__l.__size_;
  if (v125.__r_.__value_.__l.__size_)
  {
    v74 = (unint64_t *)(v125.__r_.__value_.__l.__size_ + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v76 = off_254B60208;
  if (!off_254B60208)
  {
    v77 = operator new(0x30uLL);
    MEMORY[0x212BF9A7C](v77, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x24BDBD590]);
    v77[3] = 0;
    v77[4] = 0;
    *((_DWORD *)v77 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&v127, (uint64_t)v77);
    v78 = *(_OWORD *)&v127.__r_.__value_.__l.__data_;
    *(_OWORD *)&v127.__r_.__value_.__l.__data_ = 0uLL;
    v79 = (std::__shared_weak_count *)*(&off_254B60208 + 1);
    off_254B60208 = v78;
    if (v79)
    {
      v80 = (unint64_t *)&v79->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v82 = (std::__shared_weak_count *)v127.__r_.__value_.__l.__size_;
    if (v127.__r_.__value_.__l.__size_)
    {
      v83 = (unint64_t *)(v127.__r_.__value_.__l.__size_ + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v76 = off_254B60208;
  }
  v121 = v76;
  v122 = (std::__shared_weak_count *)*(&off_254B60208 + 1);
  if (*(&off_254B60208 + 1))
  {
    v85 = (unint64_t *)(*(&off_254B60208 + 1) + 8);
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v87 = operator new(0x20uLL);
  cf = v87;
  v120 = v113;
  *v87 = v112[1];
  *(_OWORD *)((char *)v87 + 9) = v112[0];
  *((_BYTE *)v87 + 25) = 0;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v118, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
  else
    v118 = __s1;
  os_unfair_lock_lock((os_unfair_lock_t)(v76 + 40));
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
  else
    __p = v118;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v125, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v125 = __p;
  if (v120 >= 0)
    p_cf = (const char *)&cf;
  else
    p_cf = (const char *)cf;
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v127, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
  else
    v127 = v125;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v126, p_cf);
  v89 = v126;
  v129 = 0;
  ctu::cf::convert_copy();
  v90 = v129;
  v128 = v129;
  if (v129)
  {
    v91 = *v71;
    CFPreferencesSetValue(v89, v129, *(CFStringRef *)(v76 + 8), *(CFStringRef *)(v76 + 16), *v71);
    CFPreferencesSynchronize(*(CFStringRef *)(v76 + 8), *(CFStringRef *)(v76 + 16), v91);
    CFRelease(v90);
  }
  MEMORY[0x212BF9A34](&v126);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v127.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_193:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_194;
      goto LABEL_200;
    }
  }
  else if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_193;
  }
  operator delete(v125.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_194:
    os_unfair_lock_unlock((os_unfair_lock_t)(v76 + 40));
    if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_195;
LABEL_201:
    operator delete(v118.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v120) & 0x80000000) == 0)
    {
LABEL_196:
      v92 = v122;
      if (!v122)
        goto LABEL_207;
LABEL_203:
      v93 = (unint64_t *)&v92->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
      goto LABEL_207;
    }
    goto LABEL_202;
  }
LABEL_200:
  operator delete(__p.__r_.__value_.__l.__data_);
  os_unfair_lock_unlock((os_unfair_lock_t)(v76 + 40));
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_201;
LABEL_195:
  if ((SHIBYTE(v120) & 0x80000000) == 0)
    goto LABEL_196;
LABEL_202:
  operator delete((void *)cf);
  v92 = v122;
  if (v122)
    goto LABEL_203;
LABEL_207:
  v95 = (ACFULogging *)(*(uint64_t (**)(ACFURTKitROM *))(*(_QWORD *)this[21] + 32))(this[21]);
  if ((_DWORD)v95)
  {
    ACFULogging::getLogInstance(v95);
  }
  else
  {
    v96 = this[22];
    v116 = this[21];
    v117 = (std::__shared_weak_count *)v96;
    if (v96)
    {
      v97 = (unint64_t *)((char *)v96 + 8);
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    v99 = this[20];
    v114 = this[19];
    v115 = (std::__shared_weak_count *)v99;
    if (v99)
    {
      v100 = (unint64_t *)((char *)v99 + 8);
      do
        v101 = __ldxr(v100);
      while (__stxr(v101 + 1, v100));
    }
    v102 = this[36];
    if (!v102)
      std::__throw_bad_function_call[abi:ne180100]();
    v103 = (ACFULogging *)(*(uint64_t (**)(ACFURTKitROM *, ACFURTKitROM **, ACFURTKitROM **))(*(_QWORD *)v102 + 48))(v102, &v116, &v114);
    v104 = (int)v103;
    v105 = v115;
    if (v115)
    {
      v106 = (unint64_t *)&v115->__shared_owners_;
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    v108 = v117;
    if (v117)
    {
      v109 = (unint64_t *)&v117->__shared_owners_;
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
    if (!v104)
    {
      v103 = (ACFULogging *)ACFURTKitROM::bootFirmware(this[51]);
      if (!(_DWORD)v103)
      {
        ACFULogging::getLogInstance(v103);
        ACFULogging::handleMessage();
        v3 = 1;
        goto LABEL_228;
      }
    }
    ACFULogging::getLogInstance(v103);
  }
  ACFULogging::handleMessage();
LABEL_228:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  return v3;
}

void sub_212AE8C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (*(char *)(v46 - 153) < 0)
  {
    operator delete(*(void **)(v46 - 176));
    if ((*(char *)(v46 - 121) & 0x80000000) == 0)
      goto LABEL_4;
  }
  else if ((*(char *)(v46 - 121) & 0x80000000) == 0)
  {
LABEL_4:
    ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)&a26);
    if (a39 < 0)
      operator delete(__p);
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v46 - 144));
  goto LABEL_4;
}

BOOL BasebandRestore::bootCmd(BasebandRestore *this)
{
  _BOOL8 v2;

  ACFULogging::getLogInstance(this);
  ACFULogging::handleMessage();
  v2 = BasebandRestore::bootInternal((ACFURTKitROM **)this);
  ACFULogging::getLogInstance((ACFULogging *)v2);
  ACFULogging::handleMessage();
  if (!v2)
    BasebandRestore::coredumpInternal((ACFUDiagnostics **)this);
  return v2;
}

uint64_t BasebandRestore::coredumpInternal(ACFUDiagnostics **this)
{
  ACFULogging *v2;
  ACFUDiagnostics *v3;
  ACFUDiagnostics *v4;
  unint64_t *v5;
  unint64_t v6;
  ACFULogging *v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  ACFULogging *v12;
  ACFUDiagnostics *v14;
  std::__shared_weak_count *v15;

  ACFULogging::getLogInstance((ACFULogging *)this);
  v2 = (ACFULogging *)ACFULogging::handleMessage();
  if (this[19])
  {
    v3 = this[21];
    if (v3)
    {
      v4 = this[20];
      v14 = this[19];
      v15 = (std::__shared_weak_count *)v4;
      if (v4)
      {
        v5 = (unint64_t *)((char *)v4 + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
      }
      v7 = (ACFULogging *)(*(uint64_t (**)(ACFUDiagnostics *, ACFUDiagnostics **, uint64_t))(*(_QWORD *)v3 + 40))(v3, &v14, 1);
      v8 = (int)v7;
      v9 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (!v8)
      {
        v12 = (ACFULogging *)ACFUDiagnostics::perform(this[23]);
        ACFULogging::getLogInstance(v12);
        ACFULogging::handleMessage();
        return 1;
      }
      ACFULogging::getLogInstance(v7);
    }
    else
    {
      ACFULogging::getLogInstance(0);
    }
  }
  else
  {
    ACFULogging::getLogInstance(v2);
  }
  ACFULogging::handleMessage();
  return 0;
}

void sub_212AE90C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

ACFULogging *BasebandRestore::coredumpCmd(BasebandRestore *this)
{
  ACFULogging *v2;

  ACFULogging::getLogInstance(this);
  ACFULogging::handleMessage();
  v2 = (ACFULogging *)BasebandRestore::coredumpInternal((ACFUDiagnostics **)this);
  ACFULogging::getLogInstance(v2);
  ACFULogging::handleMessage();
  return v2;
}

uint64_t BasebandRestore::performFusingCmd(BasebandRestore *this)
{
  ACFULogging *v1;

  ACFULogging::getLogInstance(this);
  v1 = (ACFULogging *)ACFULogging::handleMessage();
  ACFULogging::getLogInstance(v1);
  ACFULogging::handleMessage();
  return 0;
}

uint64_t BasebandRestore::verifyFusingCmd(BasebandRestore *this)
{
  ACFULogging *v1;

  ACFULogging::getLogInstance(this);
  v1 = (ACFULogging *)ACFULogging::handleMessage();
  ACFULogging::getLogInstance(v1);
  ACFULogging::handleMessage();
  return 0;
}

uint64_t BasebandRestore::downloadFusingProgramCmd(BasebandRestore *this)
{
  ACFULogging *v1;

  ACFULogging::getLogInstance(this);
  v1 = (ACFULogging *)ACFULogging::handleMessage();
  ACFULogging::getLogInstance(v1);
  ACFULogging::handleMessage();
  return 0;
}

BOOL BasebandRestore::requirePartitionMountsCmd(BasebandRestore *this, const __CFDictionary **a2)
{
  ACFULogging *v3;
  ACFULogging *v4;
  const __CFAllocator *v5;
  __CFDictionary *Mutable;
  ACFULogging *v7;
  ACFULogging *v8;
  ACFULogging *v9;
  CFNumberRef v10;
  ACFULogging *v11;
  ACFULogging *v12;
  uint64_t valuePtr;

  v3 = (ACFULogging *)capabilities::updater::BBUFSPartitionSizeMB(this);
  ACFULogging::getLogInstance(v3);
  v4 = (ACFULogging *)ACFULogging::handleMessage();
  if (a2)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    v7 = (ACFULogging *)ctu::cf::insert<__CFString const*,BOOL>(Mutable, CFSTR("requireSystemPartitionMount"), 1);
    ACFULogging::getLogInstance(v7);
    CFStringGetCStringPtr(CFSTR("requireSystemPartitionMount"), 0x8000100u);
    v8 = (ACFULogging *)ACFULogging::handleMessage();
    ACFULogging::getLogInstance(v8);
    ACFULogging::handleMessage();
    v9 = (ACFULogging *)ctu::cf::insert<__CFString const*,BOOL>(Mutable, CFSTR("requireUserPartitionMount"), 1);
    ACFULogging::getLogInstance(v9);
    CFStringGetCStringPtr(CFSTR("requireUserPartitionMount"), 0x8000100u);
    ACFULogging::handleMessage();
    CFRetain(CFSTR("requestedBasebandFSPartitionMountSize"));
    valuePtr = v3;
    v10 = CFNumberCreate(v5, kCFNumberLongLongType, &valuePtr);
    if (v10)
    {
      CFDictionaryAddValue(Mutable, CFSTR("requestedBasebandFSPartitionMountSize"), v10);
      CFRelease(v10);
    }
    CFRelease(CFSTR("requestedBasebandFSPartitionMountSize"));
    ACFULogging::getLogInstance(v11);
    CFStringGetCStringPtr(CFSTR("requestedBasebandFSPartitionMountSize"), 0x8000100u);
    v12 = (ACFULogging *)ACFULogging::handleMessage();
    *a2 = Mutable;
    ACFULogging::getLogInstance(v12);
  }
  else
  {
    ACFULogging::getLogInstance(v4);
  }
  ACFULogging::handleMessage();
  return a2 != 0;
}

void sub_212AE94C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  const void *v7;
  va_list va;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_212AE94E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t BasebandRestore::copyBasebandMigrationDataCmd(BasebandRestore *this, const __CFDictionary **a2)
{
  BBUPartitionManager *v3;
  BBUPartitionManager *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  ACFULogging *v12;
  unint64_t *v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  BBUPartitionManager *v17;
  BBUPartitionManager *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  bbufs *p_p;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t *v41;
  unint64_t v42;
  const __CFAllocator *v43;
  CFMutableDictionaryRef Mutable;
  uint64_t *v45;
  uint64_t *v46;
  BBUPartitionManager *v47;
  char *v48;
  BBUPartitionManager *v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  const char *v56;
  size_t v57;
  std::string::size_type v58;
  std::string *p_dst;
  std::__shared_weak_count *v60;
  uint64_t *v61;
  const __CFAllocator *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  const std::string::value_type *v69;
  std::string::size_type v70;
  std::string *v71;
  ACFUCommon *v72;
  timespec v73;
  std::string *v74;
  ACFULogging *v75;
  const __CFString *v76;
  const void *FileDatafromFilePath;
  uint64_t v78;
  char v79;
  uint64_t *v80;
  uint64_t *v81;
  BOOL v82;
  uint64_t v83;
  const __CFDictionary **v85;
  uint64_t v86;
  std::string v87;
  ACFUCommon *v88;
  std::__shared_weak_count *v89;
  std::string __dst;
  uint64_t *v91;
  uint64_t v92[2];
  std::string v93;
  stat __p;

  memset(&v93, 170, sizeof(v93));
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v3 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v4 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v4);
    v5 = operator new(0x20uLL);
    *v5 = &unk_24CE85728;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v4;
    v6 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v4;
    off_253D31E70 = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v3 = (BBUPartitionManager *)off_253D31E68;
  }
  v9 = (std::__shared_weak_count *)off_253D31E70;
  *(_QWORD *)&__p.st_dev = v3;
  __p.st_ino = (__darwin_ino64_t)off_253D31E70;
  if (off_253D31E70)
  {
    v10 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v3, &v93);
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  ACFULogging::getLogInstance(v12);
  v15 = "copyBasebandMigrationDataCmd";
  v16 = ACFULogging::handleMessage();
  if (!a2)
    goto LABEL_118;
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v17 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v18 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v18);
    v19 = operator new(0x20uLL);
    *v19 = &unk_24CE85728;
    v19[1] = 0;
    v19[2] = 0;
    v19[3] = v18;
    v20 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v18;
    off_253D31E70 = v19;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v17 = (BBUPartitionManager *)off_253D31E68;
  }
  v23 = (std::__shared_weak_count *)off_253D31E70;
  v91 = (uint64_t *)v17;
  v92[0] = (uint64_t)off_253D31E70;
  if (off_253D31E70)
  {
    v24 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v17, (std::string *)&__p);
  if ((__p.st_gid & 0x80000000) == 0)
    p_p = (bbufs *)&__p;
  else
    p_p = *(bbufs **)&__p.st_dev;
  if (!p_p)
  {
    v16 = (uint64_t)_BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v27, v28, v29, v30, v31, v32, 0);
    goto LABEL_36;
  }
  v16 = bbufs::prepareDestination(p_p, v26);
  if ((v16 & 1) == 0)
  {
    v16 = (uint64_t)_BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v34, v35, v36, v37, v38, v39, (char)"BasebandRestore");
LABEL_36:
    v40 = 0;
    if (SHIBYTE(__p.st_gid) < 0)
      goto LABEL_39;
LABEL_37:
    if (!v23)
      goto LABEL_43;
    goto LABEL_40;
  }
  v40 = 1;
  if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
    goto LABEL_37;
LABEL_39:
  operator delete(*(void **)&__p.st_dev);
  if (!v23)
    goto LABEL_43;
LABEL_40:
  v41 = (unint64_t *)&v23->__shared_owners_;
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if (v40)
      goto LABEL_44;
LABEL_118:
    ACFULogging::getLogInstance((ACFULogging *)v16);
    goto LABEL_120;
  }
LABEL_43:
  if (!v40)
    goto LABEL_118;
LABEL_44:
  v43 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
  {
    v85 = a2;
    v86 = (uint64_t)Mutable;
    GetBasebandNVM4ccToFileNameMap(&v91);
    v45 = v91;
    v46 = v92;
    if (v91 != v92)
    {
      do
      {
        memset(&__dst, 170, sizeof(__dst));
        pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
        v47 = (BBUPartitionManager *)off_253D31E68;
        if (off_253D31E68)
        {
          v48 = (char *)off_253D31E70;
          v88 = (ACFUCommon *)off_253D31E68;
          v89 = (std::__shared_weak_count *)off_253D31E70;
          if (off_253D31E70)
            goto LABEL_56;
        }
        else
        {
          v49 = (BBUPartitionManager *)operator new(0x18uLL);
          BBUPartitionManager::BBUPartitionManager(v49);
          v50 = operator new(0x20uLL);
          *v50 = &unk_24CE85728;
          v50[1] = 0;
          v50[2] = 0;
          v50[3] = v49;
          v51 = (std::__shared_weak_count *)off_253D31E70;
          off_253D31E68 = v49;
          off_253D31E70 = v50;
          if (!v51)
            goto LABEL_55;
          v52 = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
            v47 = (BBUPartitionManager *)off_253D31E68;
            v48 = (char *)off_253D31E70;
            v88 = (ACFUCommon *)off_253D31E68;
            v89 = (std::__shared_weak_count *)off_253D31E70;
            if (off_253D31E70)
            {
LABEL_56:
              v54 = (unint64_t *)(v48 + 8);
              do
                v55 = __ldxr(v54);
              while (__stxr(v55 + 1, v54));
            }
          }
          else
          {
LABEL_55:
            v47 = (BBUPartitionManager *)off_253D31E68;
            v48 = (char *)off_253D31E70;
            v88 = (ACFUCommon *)off_253D31E68;
            v89 = (std::__shared_weak_count *)off_253D31E70;
            if (off_253D31E70)
              goto LABEL_56;
          }
        }
        pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
        BBUPartitionManager::getBBUFSPath(v47, (std::string *)&__p);
        if ((__p.st_gid & 0x80000000) == 0)
          v56 = (const char *)&__p;
        else
          v56 = *(const char **)&__p.st_dev;
        v57 = strlen(v56);
        if (v57 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v58 = v57;
        if (v57 >= 0x17)
        {
          v61 = v46;
          v62 = v43;
          v63 = v15;
          v64 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v57 | 7) != 0x17)
            v64 = v57 | 7;
          v65 = v64 + 1;
          p_dst = (std::string *)operator new(v64 + 1);
          __dst.__r_.__value_.__l.__size_ = v58;
          __dst.__r_.__value_.__r.__words[2] = v65 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          v15 = v63;
          v43 = v62;
          v46 = v61;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v57;
          p_dst = &__dst;
          if (!v57)
          {
            __dst.__r_.__value_.__s.__data_[0] = 0;
            if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
              goto LABEL_65;
            goto LABEL_71;
          }
        }
        memmove(p_dst, v56, v58);
        p_dst->__r_.__value_.__s.__data_[v58] = 0;
        if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
        {
LABEL_65:
          v60 = v89;
          if (!v89)
            goto LABEL_76;
          goto LABEL_72;
        }
LABEL_71:
        operator delete(*(void **)&__p.st_dev);
        v60 = v89;
        if (!v89)
          goto LABEL_76;
LABEL_72:
        v66 = (unint64_t *)&v60->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
LABEL_76:
        v68 = *((char *)v45 + 79);
        if (v68 >= 0)
          v69 = (const std::string::value_type *)(v45 + 7);
        else
          v69 = (const std::string::value_type *)v45[7];
        if (v68 >= 0)
          v70 = *((unsigned __int8 *)v45 + 79);
        else
          v70 = v45[8];
        std::string::append(&__dst, v69, v70);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v71 = &__dst;
        else
          v71 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v72 = (ACFUCommon *)CFStringCreateWithCString(v43, (const char *)v71, 0x8000100u);
        v88 = v72;
        v73.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v73.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        *(timespec *)&__p.st_blksize = v73;
        *(timespec *)__p.st_qspare = v73;
        __p.st_birthtimespec = v73;
        *(timespec *)&__p.st_size = v73;
        __p.st_mtimespec = v73;
        __p.st_ctimespec = v73;
        *(timespec *)&__p.st_uid = v73;
        __p.st_atimespec = v73;
        *(timespec *)&__p.st_dev = v73;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v74 = &__dst;
        else
          v74 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v75 = (ACFULogging *)stat((const char *)v74, &__p);
        if ((_DWORD)v75)
        {
          ACFULogging::getLogInstance(v75);
LABEL_90:
          ACFULogging::handleMessage();
          goto LABEL_104;
        }
        FileDatafromFilePath = (const void *)ACFUCommon::createFileDatafromFilePath(v72, v76);
        *(_QWORD *)&__p.st_dev = FileDatafromFilePath;
        if (!FileDatafromFilePath)
        {
          ACFULogging::getLogInstance(0);
          goto LABEL_90;
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v87, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v87 = __dst;
        v78 = ctu::cf::insert<std::string,__CFData const*>(v86, (uint64_t)&v87, FileDatafromFilePath);
        v79 = v78;
        if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if ((v78 & 1) != 0)
            goto LABEL_103;
LABEL_102:
          ACFULogging::getLogInstance((ACFULogging *)v78);
          ACFULogging::handleMessage();
          goto LABEL_103;
        }
        operator delete(v87.__r_.__value_.__l.__data_);
        if ((v79 & 1) == 0)
          goto LABEL_102;
LABEL_103:
        CFRelease(FileDatafromFilePath);
LABEL_104:
        if (v72)
          CFRelease(v72);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v80 = (uint64_t *)v45[1];
          if (v80)
          {
            do
            {
LABEL_110:
              v81 = v80;
              v80 = (uint64_t *)*v80;
            }
            while (v80);
            goto LABEL_47;
          }
        }
        else
        {
          v80 = (uint64_t *)v45[1];
          if (v80)
            goto LABEL_110;
        }
        do
        {
          v81 = (uint64_t *)v45[2];
          v82 = *v81 == (_QWORD)v45;
          v45 = v81;
        }
        while (!v82);
LABEL_47:
        v45 = v81;
      }
      while (v81 != v46);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v91, v92[0]);
    v83 = 1;
    *v85 = (const __CFDictionary *)v86;
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_121;
    return v83;
  }
  ACFULogging::getLogInstance(0);
LABEL_120:
  ACFULogging::handleMessage();
  v83 = 0;
  *a2 = 0;
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
LABEL_121:
    operator delete(v93.__r_.__value_.__l.__data_);
  return v83;
}

void sub_212AE9CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a37 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BasebandRestore::restoreBasebandMigrationDataCmd(BasebandRestore *this, const __CFDictionary **a2)
{
  ACFULogging *v3;
  BBUPartitionManager *v4;
  BBUPartitionManager *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  ACFULogging *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t *v29;
  unint64_t v30;
  ACFULogging *v31;
  ACFULogging *v32;
  CFTypeID v33;
  const __CFDictionary *v34;
  __int128 v35;
  std::string::size_type v36;
  std::string::size_type v37;
  BOOL v38;
  __int128 *v39;
  std::string *v40;
  _OWORD *v41;
  const void *v42;
  ACFULogging *URLFromString;
  uint64_t (*v44)(uint64_t);
  _QWORD *v45;
  _OWORD *v46;
  std::string v48;
  CFTypeRef cf;
  _QWORD v50[2];
  __int128 v51;
  std::string::size_type v52;
  uint64_t v53;
  std::string context;
  std::string v55;
  const void *v56;

  *((_QWORD *)&v51 + 1) = 0;
  v52 = 0;
  *(_QWORD *)&v51 = (char *)&v51 + 8;
  ACFULogging::getLogInstance(this);
  v3 = (ACFULogging *)ACFULogging::handleMessage();
  if (!a2)
  {
    ACFULogging::getLogInstance(v3);
    ACFULogging::handleMessage();
    v28 = 0;
    goto LABEL_79;
  }
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v4 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v5 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v5);
    v6 = operator new(0x20uLL);
    *v6 = &unk_24CE85728;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v5;
    v7 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v5;
    off_253D31E70 = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v4 = (BBUPartitionManager *)off_253D31E68;
  }
  v10 = (std::__shared_weak_count *)off_253D31E70;
  context.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  context.__r_.__value_.__l.__size_ = (std::string::size_type)off_253D31E70;
  if (off_253D31E70)
  {
    v11 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v4, &v55);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v55;
  else
    v20 = (std::string *)v55.__r_.__value_.__r.__words[0];
  if (v20)
  {
    v21 = (ACFULogging *)bbufs::prepareDestination((bbufs *)v20, v13);
    if ((v21 & 1) != 0)
    {
      v28 = 1;
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_23;
      goto LABEL_24;
    }
    v21 = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v22, v23, v24, v25, v26, v27, (char)"BasebandRestore");
  }
  else
  {
    v21 = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v14, v15, v16, v17, v18, v19, 0);
  }
  v28 = 0;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
LABEL_23:
    operator delete(v55.__r_.__value_.__l.__data_);
LABEL_24:
  if (!v10)
    goto LABEL_28;
  v29 = (unint64_t *)&v10->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (v30)
  {
LABEL_28:
    if ((v28 & 1) != 0)
      goto LABEL_30;
    goto LABEL_29;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if ((v28 & 1) == 0)
  {
LABEL_29:
    ACFULogging::getLogInstance(v21);
    ACFULogging::handleMessage();
  }
LABEL_30:
  v50[0] = 0xAAAAAAAAAAAAAAAALL;
  v50[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v50, *a2);
  v31 = (ACFULogging *)(*(uint64_t (**)(_QWORD *, const __CFString *))v50[0])(v50, CFSTR("MigrationData"));
  v32 = v31;
  if (v31
    && ((v33 = CFGetTypeID(v31), v33 != CFDictionaryGetTypeID()) ? (v34 = 0) : (v34 = v32), CFRelease(v32), v34))
  {
    *(_OWORD *)&v55.__r_.__value_.__r.__words[1] = 0uLL;
    v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55.__r_.__value_.__l.__size_;
    context.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
    context.__r_.__value_.__l.__size_ = (std::string::size_type)&v55.__r_.__value_.__l.__size_;
    CFDictionaryApplyFunction(v34, (CFDictionaryApplierFunction)ctu::cf::_Applier_InsertMapDefault<std::string,__CFData const*,std::insert_iterator<std::map<std::string,__CFData const*>>>, &context);
    v35 = v51;
    v51 = *(_OWORD *)&v55.__r_.__value_.__l.__data_;
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v35;
    v36 = v52;
    v52 = v55.__r_.__value_.__r.__words[2];
    v37 = v55.__r_.__value_.__r.__words[2];
    v55.__r_.__value_.__r.__words[2] = v36;
    v38 = v37 == 0;
    v39 = &v51;
    if (!v38)
      v39 = (__int128 *)(*((_QWORD *)&v51 + 1) + 16);
    *(_QWORD *)v39 = (char *)&v51 + 8;
    if (v36)
      v40 = (std::string *)(*((_QWORD *)&v35 + 1) + 16);
    else
      v40 = &v55;
    v40->__r_.__value_.__r.__words[0] = (std::string::size_type)&v55.__r_.__value_.__l.__size_;
    std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy((uint64_t)&v55, *((char **)&v35 + 1));
    v41 = (_OWORD *)v51;
    if ((__int128 *)v51 != (__int128 *)((char *)&v51 + 8))
    {
      do
      {
        if (*((char *)v41 + 55) < 0)
          std::string::__init_copy_ctor_external(&v48, *((const std::string::value_type **)v41 + 4), *((_QWORD *)v41 + 5));
        else
          v48 = *(std::string *)(v41 + 2);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&context, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
        else
          context = v48;
        v53 = 0;
        if (SHIBYTE(context.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v55, context.__r_.__value_.__l.__data_, context.__r_.__value_.__l.__size_);
        else
          v55 = context;
        v56 = 0;
        if (ctu::cf::convert_copy())
          v42 = v56;
        else
          v42 = 0;
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v55.__r_.__value_.__l.__data_);
          cf = v42;
          if ((SHIBYTE(context.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_57:
            if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_76;
            goto LABEL_58;
          }
        }
        else
        {
          cf = v42;
          if ((SHIBYTE(context.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_57;
        }
        operator delete(context.__r_.__value_.__l.__data_);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
LABEL_76:
          operator delete(v48.__r_.__value_.__l.__data_);
LABEL_58:
        URLFromString = (ACFULogging *)AMSupportCreateURLFromString();
        v55.__r_.__value_.__r.__words[0] = (std::string::size_type)URLFromString;
        if (URLFromString)
          v44 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get;
        else
          v44 = 0;
        if (!v44 || (URLFromString = (ACFULogging *)AMSupportWriteDataToFileURL(), (_DWORD)URLFromString))
        {
          ACFULogging::getLogInstance(URLFromString);
          ACFULogging::handleMessage();
          v28 = 0;
        }
        if (v55.__r_.__value_.__r.__words[0])
          CFRelease(v55.__r_.__value_.__l.__data_);
        if (cf)
          CFRelease(cf);
        v45 = (_QWORD *)*((_QWORD *)v41 + 1);
        if (v45)
        {
          do
          {
            v46 = v45;
            v45 = (_QWORD *)*v45;
          }
          while (v45);
        }
        else
        {
          do
          {
            v46 = (_OWORD *)*((_QWORD *)v41 + 2);
            v38 = *(_QWORD *)v46 == (_QWORD)v41;
            v41 = v46;
          }
          while (!v38);
        }
        v41 = v46;
      }
      while (v46 != (__int128 *)((char *)&v51 + 8));
    }
  }
  else
  {
    ACFULogging::getLogInstance(v31);
    ACFULogging::handleMessage();
    v28 = 1;
  }
  MEMORY[0x212BF9A70](v50);
LABEL_79:
  std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy((uint64_t)&v51, *((char **)&v51 + 1));
  return v28 & 1;
}

void sub_212AEA3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,char *a26,uint64_t a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy(v34 - 128, *(char **)(v34 - 120));
  MEMORY[0x212BF9A70](&a21);
  std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t BasebandRestore::pingCmd(std::__shared_weak_count **this, const __CFDictionary **a2)
{
  std::__shared_weak_count *v4;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  ACFULogging *FWVersion;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  ACFULogging *v14;

  ACFULogging::getLogInstance((ACFULogging *)this);
  ACFULogging::handleMessage();
  v4 = this[21];
  if (!v4)
  {
    ACFULogging::getLogInstance(0);
LABEL_14:
    ACFULogging::handleMessage();
    return 0;
  }
  if (v5)
  {
    v6 = this[22];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  else
  {
    v6 = 0;
  }
  FWVersion = (ACFULogging *)BasebandUpdaterTransport::pingAndGetFWVersion(v5, a2);
  v10 = (int)FWVersion;
  if (!v6)
    goto LABEL_13;
  v11 = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    ACFULogging::getLogInstance(v14);
    if (v10)
      goto LABEL_14;
  }
  else
  {
LABEL_13:
    ACFULogging::getLogInstance(FWVersion);
    if (v10)
      goto LABEL_14;
  }
  ACFULogging::handleMessage();
  return 1;
}

void sub_212AEA670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t BasebandRestore::performManifestCheckCmd(BasebandRestore *this)
{
  _BOOL8 v2;
  char *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  char *v8;
  _OWORD v9[17];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, sizeof(v9));
  ACFULogging::getLogInstance(this);
  ACFULogging::handleMessage();
  v2 = BasebandRestore::bootInternal((ACFURTKitROM **)this);
  if (!v2
    || (support::transport::ARI::create((support::transport::ARI *)"BasebandUpdaterTransport", (dispatch_queue_s *)0x2710, 0, 0, &v8), (v3 = v8) == 0))
  {
    ACFULogging::getLogInstance((ACFULogging *)v2);
    ACFULogging::handleMessage();
    v3 = 0;
LABEL_11:
    BasebandRestore::coredumpInternal((ACFUDiagnostics **)this);
    v6 = 0;
    result = 0;
    if (!v3)
      return result;
    goto LABEL_12;
  }
  v4 = KTLGetManifestStatus();
  if ((v4 & 1) == 0
    || (logManifestStatus((unsigned __int16 *)v9), WORD2(v9[0]) | WORD4(v9[0]))
    || ((v4 = capabilities::updater::supportsFATPCalibrationManifestStatus((capabilities::updater *)v4), WORD3(v9[0]))
      ? (v5 = v4)
      : (v5 = 0),
        v5 == 1))
  {
    ACFULogging::getLogInstance((ACFULogging *)v4);
    ACFULogging::handleMessage();
    goto LABEL_11;
  }
  v6 = 1;
LABEL_12:
  (*(void (**)(char *))(*(_QWORD *)v3 + 8))(v3);
  return v6;
}

void sub_212AEA834(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (!v1)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void logManifestStatus(unsigned __int16 *a1)
{
  ACFULogging *v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void *__p;
  char v14;

  ACFULogging::getLogInstance((ACFULogging *)a1);
  if (a1)
  {
    v2 = (ACFULogging *)ACFULogging::handleMessage();
    LODWORD(v3) = a1[5];
    if (a1[5])
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v6 = v4 + v3;
        if (v6 >= 0x10)
          v7 = 16;
        else
          v7 = v6;
        ACFULogging::getLogInstance(v2);
        ctu::hex((ctu *)&a1[v5 / 2 + 6], (const void *)v7);
        v2 = (ACFULogging *)ACFULogging::handleMessage();
        if (v14 < 0)
          operator delete(__p);
        v5 += 16;
        v3 = a1[5];
        v4 -= 16;
      }
      while (v5 < v3);
    }
    LODWORD(v8) = a1[70];
    if (a1[70])
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = v9 + v8;
        if (v11 >= 0x10)
          v12 = 16;
        else
          v12 = v11;
        ACFULogging::getLogInstance(v2);
        ctu::hex((ctu *)&a1[v10 / 2 + 71], (const void *)v12);
        v2 = (ACFULogging *)ACFULogging::handleMessage();
        if (v14 < 0)
          operator delete(__p);
        v10 += 16;
        v8 = a1[70];
        v9 -= 16;
      }
      while (v10 < v8);
    }
  }
  else
  {
    ACFULogging::handleMessage();
  }
}

void sub_212AEAA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BasebandRestore::copyIdentifierCmd(std::__shared_weak_count **this, const __CFDictionary **a2)
{
  uint64_t Controller;
  std::__shared_weak_count *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t Reset;
  uint64_t (*v11)(uint64_t);
  ACFULogging *v12;
  uint64_t (***v13)(_QWORD);
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t (***v23)(_QWORD);
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t TypeID;
  const __CFDictionary *v28;
  unint64_t *v29;
  unint64_t v30;
  ACFULogging *Value;
  ACFULogging *v32;
  CFTypeID v33;
  const __CFData *v34;
  const __CFData *v35;
  CFTypeID v36;
  ACFULogging *v37;
  uint64_t (*v38)(uint64_t);
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  ACFULogging *v43;
  unint64_t *v44;
  unint64_t v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  ACFULogging *v51;
  std::string v52;
  std::string v53;
  void *__p[2];
  std::string::size_type v55;
  char v56;
  void *v57;
  std::__shared_weak_count *v58;
  const void *v59;
  CFTypeRef v60;
  CFDataRef v61;
  const void *v62;
  uint64_t (***v63)(_QWORD);
  std::__shared_weak_count *v64;
  unint64_t v65;

  v64 = 0;
  v65 = 0xAAAAAAAAAAAAAAAALL;
  v62 = 0;
  v63 = 0;
  v60 = 0;
  v61 = 0;
  v59 = 0;
  v57 = 0;
  v58 = 0;
  v56 = 1;
  ACFULogging::getLogInstance((ACFULogging *)this);
  Controller = ACFULogging::handleMessage();
  if (!a2)
    goto LABEL_80;
  v5 = this[21];
  if (!v5)
  {
    ACFULogging::getLogInstance(0);
    goto LABEL_22;
  }
  if (!v6)
  {
    v57 = 0;
    v58 = 0;
    ACFULogging::getLogInstance(0);
    goto LABEL_22;
  }
  v7 = this[22];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v57 = v6;
  v58 = v7;
  Reset = TelephonyBasebandGetReset();
  if ((Reset & 1) == 0)
  {
    ACFULogging::getLogInstance((ACFULogging *)Reset);
    v51 = (ACFULogging *)ACFULogging::handleMessage();
    ACFULogging::getLogInstance(v51);
    goto LABEL_22;
  }
  Controller = TelephonyBasebandCreateController();
  v60 = (CFTypeRef)Controller;
  v11 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
  if (!Controller)
    v11 = 0;
  if (v11
    && (ACFULogging::getLogInstance((ACFULogging *)Controller),
        ACFULogging::handleMessage(),
        Controller = TelephonyBasebandPowercycleModem(),
        (Controller & 1) != 0))
  {
    v12 = (ACFULogging *)((ACFULogging *(*)(void **__return_ptr, std::__shared_weak_count *, _QWORD, _QWORD))this[21]->~__shared_weak_count)(__p, this[21], 0, 0);
    v13 = (uint64_t (***)(_QWORD))__p[0];
    v14 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v15 = (unint64_t *)((char *)__p[1] + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      v17 = (std::__shared_weak_count *)__p[1];
      v63 = v13;
      v64 = v14;
      v18 = v55;
      LODWORD(v65) = v55;
      if (__p[1])
      {
        v19 = (unint64_t *)((char *)__p[1] + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        v18 = v65;
      }
    }
    else
    {
      v63 = (uint64_t (***)(_QWORD))__p[0];
      v64 = 0;
      v18 = v55;
      LODWORD(v65) = v55;
    }
    if (!v18)
    {
      ACFULogging::getLogInstance(v12);
      ACFULogging::handleMessage();
      v23 = v63;
      v24 = v64;
      __p[0] = v63;
      __p[1] = v64;
      if (v64)
      {
        v25 = (unint64_t *)&v64->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      TypeID = (**v23)(v23);
      v28 = (const __CFDictionary *)TypeID;
      if (v24)
      {
        v29 = (unint64_t *)&v24->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (v28)
      {
        Value = (ACFULogging *)CFDictionaryGetValue(v28, CFSTR("Cellular1,ChipID"));
        v32 = Value;
        if (!Value)
          goto LABEL_75;
        v33 = CFGetTypeID(Value);
        TypeID = CFDataGetTypeID();
        if (v33 == TypeID)
        {
          TypeID = support::cf::createNum64Num32FromData(v32, &v62);
          if ((TypeID & 1) != 0)
          {
            CFDictionaryAddValue(v28, CFSTR("ChipID"), v62);
            v34 = (const __CFData *)CFDictionaryGetValue(v28, CFSTR("Cellular1,ECID"));
            v35 = v34;
            if (v34)
            {
              v36 = CFGetTypeID(v34);
              TypeID = CFDataGetTypeID();
              if (v36 == TypeID)
              {
                TypeID = support::cf::createByteSwappedData(v35, &v61);
                if ((TypeID & 1) != 0)
                {
                  CFDictionaryAddValue(v28, CFSTR("ChipSerialNo"), v61);
                  v38 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
                  if (!v59)
                    v38 = 0;
                  if (v38)
                    CFDictionaryAddValue(v28, CFSTR("CertificationPublicKey"), v59);
                  ACFULogging::getLogInstance(v37);
                  *((_BYTE *)&v52.__r_.__value_.__s + 23) = 15;
                  strcpy((char *)&v52, "BasebandRestore");
                  v39 = std::string::append(&v52, "::", 2uLL);
                  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
                  v53.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v40;
                  v39->__r_.__value_.__l.__size_ = 0;
                  v39->__r_.__value_.__r.__words[2] = 0;
                  v39->__r_.__value_.__r.__words[0] = 0;
                  v41 = std::string::append(&v53, "copyIdentifierCmd", 0x11uLL);
                  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
                  v55 = v41->__r_.__value_.__r.__words[2];
                  *(_OWORD *)__p = v42;
                  v41->__r_.__value_.__l.__size_ = 0;
                  v41->__r_.__value_.__r.__words[2] = 0;
                  v41->__r_.__value_.__r.__words[0] = 0;
                  v43 = (ACFULogging *)ACFULogging::handleMessageCFType();
                  if (SHIBYTE(v55) < 0)
                  {
                    operator delete(__p[0]);
                    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_47:
                      if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_48;
LABEL_70:
                      operator delete(v52.__r_.__value_.__l.__data_);
LABEL_48:
                      *a2 = v28;
                      ACFULogging::getLogInstance(v43);
                      ACFULogging::handleMessage();
                      v21 = 1;
                      v22 = v58;
                      if (!v58)
                        goto LABEL_52;
                      goto LABEL_49;
                    }
                  }
                  else if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
                    goto LABEL_47;
                  }
                  operator delete(v53.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_48;
                  goto LABEL_70;
                }
              }
              goto LABEL_76;
            }
LABEL_75:
            ACFULogging::getLogInstance(0);
            goto LABEL_22;
          }
        }
      }
LABEL_76:
      ACFULogging::getLogInstance((ACFULogging *)TypeID);
      goto LABEL_22;
    }
    ACFULogging::getLogInstance(v12);
  }
  else
  {
LABEL_80:
    ACFULogging::getLogInstance((ACFULogging *)Controller);
  }
LABEL_22:
  ACFULogging::handleMessage();
  v21 = 0;
  v22 = v58;
  if (!v58)
    goto LABEL_52;
LABEL_49:
  v44 = (unint64_t *)&v22->__shared_owners_;
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (v45)
  {
LABEL_52:
    v46 = v59;
    if (!v59)
      goto LABEL_54;
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  v46 = v59;
  if (v59)
LABEL_53:
    CFRelease(v46);
LABEL_54:
  if (v60)
    CFRelease(v60);
  if (v61)
    CFRelease(v61);
  if (v62)
    CFRelease(v62);
  v47 = v64;
  if (v64)
  {
    v48 = (unint64_t *)&v64->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  return v21;
}

void sub_212AEB1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)(v35 - 120));
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef((const void **)(v35 - 112));
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)(v35 - 104));
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef((const void **)(v35 - 96));
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v35 - 88);
  _Unwind_Resume(a1);
}

uint64_t BasebandRestore::provisionCmd(const __CFDictionary **this, const __CFDictionary **a2)
{
  const __CFDictionary *v4;
  const __CFBoolean *Value;
  const __CFBoolean *v6;
  CFTypeID v7;
  ACFULogging *v8;
  ACFULogging *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  ACFULogging *v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  ACFULogging *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  ACFULogging *v31;
  char v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  std::string v44;
  std::string v45;
  void *__p[2];
  std::string::size_type v47;
  ACFUFirmware *v48;
  std::__shared_weak_count *v49;
  const __CFDictionary *v50;
  std::__shared_weak_count *v51;
  ACFUFirmware *v52;
  std::__shared_weak_count *v53;
  const __CFDictionary *v54;
  std::__shared_weak_count *v55;
  BOOL v56;

  v56 = 0;
  ACFULogging::getLogInstance((ACFULogging *)this);
  ACFULogging::handleMessage();
  v4 = this[17];
  if (!v4)
  {
    ACFULogging::getLogInstance(0);
    goto LABEL_48;
  }
  Value = (const __CFBoolean *)CFDictionaryGetValue(v4, CFSTR("EnablePing"));
  if (!Value || (v6 = Value, v7 = CFGetTypeID(Value), v7 != CFBooleanGetTypeID()))
  {
    v24 = this[17];
    v25 = (std::__shared_weak_count *)this[52];
    v50 = this[51];
    v51 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(p_shared_owners);
      while (__stxr(v27 + 1, p_shared_owners));
    }
    v28 = (std::__shared_weak_count *)this[20];
    v48 = this[19];
    v49 = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = (ACFULogging *)provisionBaseband(v24, (uint64_t *)&v50, &v48, a2);
    v32 = (char)v31;
    v33 = v49;
    if (v49)
    {
      v34 = (unint64_t *)&v49->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = v51;
    if (v51)
    {
      v37 = (unint64_t *)&v51->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    ACFULogging::getLogInstance(v31);
    if ((v32 & 1) == 0)
      goto LABEL_48;
    *((_BYTE *)&v44.__r_.__value_.__s + 23) = 15;
    strcpy((char *)&v44, "BasebandRestore");
    v39 = std::string::append(&v44, "::", 2uLL);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    v41 = std::string::append(&v45, "provisionCmd", 0xCuLL);
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v47 = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    ACFULogging::handleMessageCFType();
    if (SHIBYTE(v47) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_42:
        if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return 1;
LABEL_46:
        operator delete(v44.__r_.__value_.__l.__data_);
        return 1;
      }
    }
    else if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_42;
    }
    operator delete(v45.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 1;
    goto LABEL_46;
  }
  v8 = (ACFULogging *)CFBooleanGetValue(v6);
  if ((_DWORD)v8 != 1)
    return 1;
  ACFULogging::getLogInstance(v8);
  ACFULogging::handleMessage();
  v9 = this[17];
  v10 = (std::__shared_weak_count *)this[52];
  v54 = this[51];
  v55 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (std::__shared_weak_count *)this[20];
  v52 = this[19];
  v53 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (ACFULogging *)sendProvisionPing(v9, (uint64_t *)&v54, &v52, &v56);
  v17 = (char)v16;
  v18 = v53;
  if (v53)
  {
    v19 = (unint64_t *)&v53->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v55;
  if (v55)
  {
    v22 = (unint64_t *)&v55->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  ACFULogging::getLogInstance(v16);
  if ((v17 & 1) != 0)
  {
    ACFULogging::handleMessage();
    return 1;
  }
LABEL_48:
  ACFULogging::handleMessage();
  return 0;
}

void sub_212AEB67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  uint64_t v31;

  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v31 - 88);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v31 - 72);
  _Unwind_Resume(a1);
}

void BasebandRestore::handleRTIClientImage(ACFULogging *a1@<X0>, uint64_t a2@<X1>, std::string::size_type *a3@<X8>)
{
  ACFULogging *v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;

  ACFULogging::getLogInstance(a1);
  v6 = (ACFULogging *)ACFULogging::handleMessage();
  v7 = *(unsigned __int8 *)(a2 + 23);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (v7 != 4)
    goto LABEL_13;
  if (v8 >= 0)
    v9 = (_DWORD *)a2;
  else
    v9 = *(_DWORD **)a2;
  switch(*v9)
  {
    case 0x6D72766E:
      BasebandRestore::handleRTIClientNVRAMFile(a1, a3);
      break;
    case 0x74736262:
    case 0x79646262:
      BasebandRestore::handleRTIClientNVMFile((uint64_t)a1, (const void **)a2, a3);
      break;
    case 0x6C636262:
    case 0x63706262:
    case 0x76706262:
      BasebandRestore::handleRTIClientFDRFile(a1, a2, a3);
      break;
    default:
LABEL_13:
      ACFULogging::getLogInstance(v6);
      ACFULogging::handleMessage();
      BasebandRestore::createZeroSizeContainer(a3);
      return;
  }
}

void BasebandRestore::handleRTIClientNVRAMFile(BasebandRestore *this@<X0>, _QWORD *a2@<X8>)
{
  ACFURTKitNVRMGenerator *v3;
  ACFUDataContainer *v4;
  const __CFData *v5;
  ACFULogging *v6;

  v3 = (ACFURTKitNVRMGenerator *)*((_QWORD *)this + 53);
  if (v3)
  {
    v4 = (ACFUDataContainer *)ACFURTKitNVRMGenerator::copy(v3);
    *a2 = 0xAAAAAAAAAAAAAAAALL;
    v6 = (ACFULogging *)ACFUDataContainer::create(v4, v5);
    ACFULogging::getLogInstance(v6);
    ACFULogging::handleMessage();
    if (v4)
      CFRelease(v4);
  }
  else
  {
    ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage();
    *a2 = 0;
  }
}

void sub_212AEB9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212AEB9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t *v4;
  va_list va;

  va_start(va, a4);
  std::unique_ptr<ACFUDataContainer>::~unique_ptr[abi:ne180100](v4);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void BasebandRestore::handleRTIClientNVMFile(uint64_t a1@<X0>, const void **a2@<X1>, std::string::size_type *a3@<X8>)
{
  ACFULogging *v6;
  uint64_t v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t *v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  size_t v21;
  size_t v22;
  const __CFDictionary *v23;
  const __CFBoolean *Value;
  const __CFBoolean *v25;
  CFTypeID v26;
  ACFULogging *v27;
  BBUPartitionManager *v28;
  BBUPartitionManager *v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  ACFULogging *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  const void *v42;
  size_t v43;
  int v44;
  const void *v45;
  size_t v46;
  size_t v47;
  int v48;
  int v49;
  int v50;
  std::string::size_type size;
  int v52;
  size_t v53;
  unint64_t v54;
  std::string *p_dst;
  std::string *v56;
  char *v57;
  const void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  bbufs *p_p;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  ACFULogging *v75;
  int v76;
  __CFString *Mutable;
  std::string *v78;
  uint64_t v79;
  uint64_t v80;
  std::string::size_type v81;
  ACFULogging *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  std::string::size_type v88;
  void *v89;
  ACFULogging *v90;
  ACFULogging *v91;
  void *v92;
  std::string __dst;
  std::__fs::filesystem::path v94;
  std::string __p;
  uint64_t v96[3];
  ACFULogging *v97;

  v97 = 0;
  memset(v96, 170, sizeof(v96));
  GetBasebandNVM4ccToFileNameMap(v96);
  v7 = v96[1];
  if (!v96[1])
    goto LABEL_105;
  v8 = *((char *)a2 + 23);
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  v11 = &v96[1];
  do
  {
    while (1)
    {
      v12 = *(char *)(v7 + 55);
      v13 = v12 >= 0 ? (const void *)(v7 + 32) : *(const void **)(v7 + 32);
      v14 = v12 >= 0 ? *(unsigned __int8 *)(v7 + 55) : *(_QWORD *)(v7 + 40);
      v15 = v10 >= v14 ? v14 : v10;
      v6 = (ACFULogging *)memcmp(v13, v9, v15);
      if ((_DWORD)v6)
        break;
      if (v14 >= v10)
        goto LABEL_23;
LABEL_9:
      v7 = *(_QWORD *)(v7 + 8);
      if (!v7)
        goto LABEL_24;
    }
    if ((v6 & 0x80000000) != 0)
      goto LABEL_9;
LABEL_23:
    v11 = (uint64_t *)v7;
    v7 = *(_QWORD *)v7;
  }
  while (v7);
LABEL_24:
  if (v11 == &v96[1])
    goto LABEL_105;
  v18 = v11[4];
  v17 = v11 + 4;
  v16 = (uint64_t *)v18;
  v19 = *((char *)v17 + 23);
  if (v19 >= 0)
    v20 = v17;
  else
    v20 = v16;
  if (v19 >= 0)
    v21 = *((unsigned __int8 *)v17 + 23);
  else
    v21 = v17[1];
  if (v21 >= v10)
    v22 = v10;
  else
    v22 = v21;
  v6 = (ACFULogging *)memcmp(v9, v20, v22);
  if (!(_DWORD)v6)
  {
    if (v10 >= v21)
      goto LABEL_36;
    goto LABEL_105;
  }
  if ((v6 & 0x80000000) != 0)
  {
LABEL_105:
    ACFULogging::getLogInstance(v6);
    ACFULogging::handleMessage();
    *a3 = 0;
    goto LABEL_106;
  }
LABEL_36:
  v23 = *(const __CFDictionary **)(a1 + 128);
  if (v23)
  {
    Value = (const __CFBoolean *)CFDictionaryGetValue(v23, CFSTR("BypassNVMDownload"));
    v25 = Value;
    if (Value)
    {
      v26 = CFGetTypeID(Value);
      if (v26 == CFBooleanGetTypeID())
      {
        v27 = (ACFULogging *)CFBooleanGetValue(v25);
        if ((_DWORD)v27 == 1)
        {
          ACFULogging::getLogInstance(v27);
          ACFULogging::handleMessage();
          BasebandRestore::createZeroSizeContainer(a3);
LABEL_106:
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v96, v96[1]);
          return;
        }
      }
    }
  }
  memset(&__p, 170, sizeof(__p));
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v28 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v29 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v29);
    v30 = operator new(0x20uLL);
    *v30 = &unk_24CE85728;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v29;
    v31 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v29;
    off_253D31E70 = v30;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v28 = (BBUPartitionManager *)off_253D31E68;
  }
  v34 = (std::__shared_weak_count *)off_253D31E70;
  v94.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  v94.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)off_253D31E70;
  if (off_253D31E70)
  {
    v35 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v28, &__p);
  if (v34)
  {
    v38 = (unint64_t *)&v34->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (*(_BYTE *)(a1 + 480))
  {
    memset(&v94, 170, sizeof(v94));
    v40 = v96[1];
    if (v96[1])
      goto LABEL_58;
LABEL_83:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  ACFULogging::getLogInstance(v37);
  ACFULogging::handleMessage();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = (bbufs *)&__p;
  else
    p_p = (bbufs *)__p.__r_.__value_.__r.__words[0];
  if (!p_p)
  {
    v90 = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v60, v61, v62, v63, v64, v65, 0);
    goto LABEL_148;
  }
  if ((bbufs::prepareDestination(p_p, v59) & 1) == 0)
  {
    v90 = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v67, v68, v69, v70, v71, v72, (char)"BasebandRestore");
LABEL_148:
    ACFULogging::getLogInstance(v90);
    ACFULogging::handleMessage();
    *a3 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_144;
    goto LABEL_145;
  }
  *(_BYTE *)(a1 + 480) = 1;
  memset(&v94, 170, sizeof(v94));
  v40 = v96[1];
  if (!v96[1])
    goto LABEL_83;
LABEL_58:
  v41 = *((char *)a2 + 23);
  if (v41 >= 0)
    v42 = a2;
  else
    v42 = *a2;
  if (v41 >= 0)
    v43 = *((unsigned __int8 *)a2 + 23);
  else
    v43 = (size_t)a2[1];
  while (2)
  {
    while (2)
    {
      v44 = *(char *)(v40 + 55);
      if (v44 >= 0)
        v45 = (const void *)(v40 + 32);
      else
        v45 = *(const void **)(v40 + 32);
      if (v44 >= 0)
        v46 = *(unsigned __int8 *)(v40 + 55);
      else
        v46 = *(_QWORD *)(v40 + 40);
      if (v46 >= v43)
        v47 = v43;
      else
        v47 = v46;
      v48 = memcmp(v42, v45, v47);
      if (v48)
      {
        if (v48 < 0)
          goto LABEL_64;
      }
      else if (v43 < v46)
      {
LABEL_64:
        v40 = *(_QWORD *)v40;
        if (!v40)
          goto LABEL_83;
        continue;
      }
      break;
    }
    v49 = memcmp(v45, v42, v47);
    if (v49)
    {
      if ((v49 & 0x80000000) == 0)
        goto LABEL_84;
LABEL_82:
      v40 = *(_QWORD *)(v40 + 8);
      if (!v40)
        goto LABEL_83;
      continue;
    }
    break;
  }
  if (v46 < v43)
    goto LABEL_82;
LABEL_84:
  v50 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v52 = *(char *)(v40 + 79);
  if (v52 >= 0)
    v53 = *(unsigned __int8 *)(v40 + 79);
  else
    v53 = *(_QWORD *)(v40 + 64);
  v54 = v53 + size;
  memset(&__dst, 170, sizeof(__dst));
  if (v53 + size >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v54 > 0x16)
  {
    v73 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v54 | 7) != 0x17)
      v73 = v54 | 7;
    v74 = v73 + 1;
    p_dst = (std::string *)operator new(v73 + 1);
    __dst.__r_.__value_.__l.__size_ = v53 + size;
    __dst.__r_.__value_.__r.__words[2] = v74 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    if (size)
    {
LABEL_93:
      if (v50 >= 0)
        v56 = &__p;
      else
        v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
      memmove(p_dst, v56, size);
    }
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v53 + size;
    if (size)
      goto LABEL_93;
  }
  v57 = (char *)p_dst + size;
  if (v53)
  {
    if (v52 >= 0)
      v58 = (const void *)(v40 + 56);
    else
      v58 = *(const void **)(v40 + 56);
    memmove(v57, v58, v53);
  }
  v57[v53] = 0;
  v94.__pn_ = __dst;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__dst, v94.__pn_.__r_.__value_.__l.__data_, v94.__pn_.__r_.__value_.__l.__size_);
  else
    __dst = v94.__pn_;
  v75 = (ACFULogging *)ctu::fs::file_exists();
  v76 = (int)v75;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!v76)
      goto LABEL_133;
LABEL_122:
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
    std::__fs::filesystem::path::lexically_normal((std::__fs::filesystem::path *)&__dst, &v94);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v78 = &__dst;
    else
      v78 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    CFStringAppendCString(Mutable, (const char *)v78, 0x8000100u);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    ACFUDataContainer::create((ACFUDataContainer *)Mutable, (const __CFString *)1);
    v81 = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = 0;
    v82 = v97;
    v97 = (ACFULogging *)v81;
    if (v82)
    {
      v83 = (void *)MEMORY[0x212BF9890](v82, v79, v80);
      operator delete(v83);
      v82 = (ACFULogging *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (v82)
      {
        v86 = (void *)MEMORY[0x212BF9890](v82, v84, v85);
        operator delete(v86);
      }
    }
    if (v81)
    {
      ACFULogging::getLogInstance(v82);
      ACFULogging::handleMessage();
    }
    else
    {
      ACFULogging::getLogInstance(v82);
      std::__fs::filesystem::path::lexically_normal((std::__fs::filesystem::path *)&__dst, &v94);
      ACFULogging::handleMessage();
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    if ((_DWORD)v75)
      goto LABEL_122;
LABEL_133:
    ACFULogging::getLogInstance(v75);
    ACFULogging::handleMessage();
    BasebandRestore::createZeroSizeContainer(&__dst);
    v81 = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = 0;
    if (v97)
    {
      v87 = (void *)MEMORY[0x212BF9890]();
      operator delete(v87);
      v88 = __dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (v88)
      {
        v89 = (void *)MEMORY[0x212BF9890]();
        operator delete(v89);
      }
    }
  }
  v97 = 0;
  *a3 = v81;
  if (SHIBYTE(v94.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_144:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_145:
  v91 = v97;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v96, v96[1]);
  if (v91)
  {
    v92 = (void *)MEMORY[0x212BF9890](v91);
    operator delete(v92);
  }
}

void sub_212AEC218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a20 < 0)
    operator delete(__p);
  ctu::cf::CFSharedRef<__CFString>::~CFSharedRef(&a14);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((a34 & 0x80000000) == 0)
    {
LABEL_8:
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v34 - 120, *(_QWORD *)(v34 - 112));
      std::unique_ptr<ACFUDataContainer>::~unique_ptr[abi:ne180100]((uint64_t *)(v34 - 96));
      _Unwind_Resume(a1);
    }
  }
  else if ((a34 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(a29);
  goto LABEL_8;
}

void BasebandRestore::handleRTIClientFDRFile(ACFUDataContainer *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v5;
  _DWORD *v6;
  ACFULogging *v7;
  uint64_t v8;

  *a3 = 0;
  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4 != 4)
    goto LABEL_15;
  if (v5 >= 0)
    v6 = (_DWORD *)a2;
  else
    v6 = *(_DWORD **)a2;
  switch(*v6)
  {
    case 0x6C636262:
      a1 = (ACFUDataContainer *)*((_QWORD *)a1 + 55);
      if (a1)
        goto LABEL_13;
      break;
    case 0x63706262:
      a1 = (ACFUDataContainer *)*((_QWORD *)a1 + 56);
      if (a1)
        goto LABEL_13;
      break;
    case 0x76706262:
      a1 = (ACFUDataContainer *)*((_QWORD *)a1 + 57);
      if (!a1)
        break;
LABEL_13:
      v7 = (ACFULogging *)ACFUDataContainer::create(a1, (const __CFData *)a2);
      *a3 = v8;
      ACFULogging::getLogInstance(v7);
      ACFULogging::handleMessage();
      return;
    default:
      break;
  }
LABEL_15:
  ACFULogging::getLogInstance(a1);
  ACFULogging::handleMessage();
  BasebandRestore::createZeroSizeContainer(&v8);
  *a3 = v8;
}

void sub_212AEC4C4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<ACFUDataContainer>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_212AEC4D8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<ACFUDataContainer>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_212AEC4EC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<ACFUDataContainer>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BasebandRestore::createZeroSizeContainer(_QWORD *a1@<X8>)
{
  ACFUDataContainer *v3;
  const __CFData *v4;
  ACFULogging *v5;

  v3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, 0);
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  v5 = (ACFULogging *)ACFUDataContainer::create(v3, v4);
  if (!*a1)
  {
    ACFULogging::getLogInstance(v5);
    ACFULogging::handleMessage();
  }
  if (v3)
    CFRelease(v3);
}

void sub_212AEC594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t *v4;
  va_list va;

  va_start(va, a4);
  std::unique_ptr<ACFUDataContainer>::~unique_ptr[abi:ne180100](v4);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212AEC5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<ACFUDataContainer>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)MEMORY[0x212BF9890]();
    operator delete(v3);
  }
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFString>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t ctu::SharedRef<__CFBoolean const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFBoolean const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

const void **ctu::cf::detail::TakeOwnershipProxy<__CFDictionary>::~TakeOwnershipProxy(const void **a1)
{
  const void **v2;
  const void *v3;
  const void *v4;

  v3 = *a1;
  v2 = (const void **)a1[1];
  v4 = *v2;
  if (v3)
  {
    *v2 = v3;
    if (v4)
      goto LABEL_5;
  }
  else
  {
    *v2 = 0;
    if (v4)
LABEL_5:
      CFRelease(v4);
  }
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFBoolean const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t BasebandRestore::getBasebandCrashReason(uint64_t a1, uint64_t a2, BOOL *a3)
{
  __CFString *v5;
  __CFString *v6;
  uint64_t (*v7)(uint64_t);
  const char *CStringPtr;
  uint64_t CoredumpCrashReport;
  uint64_t v10;
  int v11;
  size_t v12;
  uint64_t v13;
  void **v14;
  std::string v16;
  void *__p[2];
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v22 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v18 = 0;
  memset(&v16, 0, sizeof(v16));
  v5 = (__CFString *)ACFUDiagnostics::copyDiagnosticsPath(*(ACFUDiagnostics **)(a1 + 184));
  v6 = v5;
  v7 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  if (!v5)
    v7 = 0;
  if (v7)
  {
    CStringPtr = CFStringGetCStringPtr(v5, 0x8000100u);
    std::string::__assign_external(&v16, CStringPtr);
    CoredumpCrashReport = support::parsers::getCoredumpCrashReport((const void **)&v16.__r_.__value_.__l.__data_, (uint64_t)&v19, (uint64_t)__p, &v22);
    if ((CoredumpCrashReport & 1) != 0)
    {
      v10 = HIBYTE(v21);
      if (v21 < 0)
        v10 = v20;
      if (v10)
      {
        ACFULogging::getLogInstance((ACFULogging *)CoredumpCrashReport);
        CoredumpCrashReport = ACFULogging::handleMessage();
        v11 = v22;
        *a3 = v22 == 1;
        if (v11 == 1)
        {
          ACFULogging::getLogInstance((ACFULogging *)CoredumpCrashReport);
          ACFULogging::handleMessage();
          goto LABEL_24;
        }
        if (v11 == 2)
        {
          v12 = HIBYTE(v18);
          if (v18 < 0)
            v12 = (size_t)__p[1];
          if (v12)
          {
            if (__p != (void **)a2)
            {
              if (*(char *)(a2 + 23) < 0)
              {
                if (v18 >= 0)
                  v14 = __p;
                else
                  v14 = (void **)__p[0];
                std::string::__assign_no_alias<false>((void **)a2, v14, v12);
              }
              else
              {
                if ((SHIBYTE(v18) & 0x80000000) == 0)
                {
                  *(_OWORD *)a2 = *(_OWORD *)__p;
                  *(_QWORD *)(a2 + 16) = v18;
                  v13 = 1;
                  if (!v6)
                    goto LABEL_26;
LABEL_25:
                  CFRelease(v6);
                  goto LABEL_26;
                }
                std::string::__assign_no_alias<true>((_QWORD *)a2, __p[0], (size_t)__p[1]);
              }
            }
LABEL_24:
            v13 = 1;
            if (!v6)
              goto LABEL_26;
            goto LABEL_25;
          }
        }
      }
    }
    ACFULogging::getLogInstance((ACFULogging *)CoredumpCrashReport);
  }
  else
  {
    ACFULogging::getLogInstance((ACFULogging *)v5);
  }
  ACFULogging::handleMessage();
  v13 = 0;
  if (v6)
    goto LABEL_25;
LABEL_26:
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      goto LABEL_28;
LABEL_31:
    operator delete(__p[0]);
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      return v13;
LABEL_32:
    operator delete(v19);
    return v13;
  }
  operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18) < 0)
    goto LABEL_31;
LABEL_28:
  if (SHIBYTE(v21) < 0)
    goto LABEL_32;
  return v13;
}

void sub_212AEC948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v26 - 57) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v26 - 57) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v26 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__shared_ptr_pointer<BasebandRestore *,std::shared_ptr<BasebandRestore>::__shared_ptr_default_delete<BasebandRestore,BasebandRestore>,std::allocator<BasebandRestore>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<BasebandRestore *,std::shared_ptr<BasebandRestore>::__shared_ptr_default_delete<BasebandRestore,BasebandRestore>,std::allocator<BasebandRestore>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<BasebandRestore *,std::shared_ptr<BasebandRestore>::__shared_ptr_default_delete<BasebandRestore,BasebandRestore>,std::allocator<BasebandRestore>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B54B02)
    return a1 + 24;
  if (((v3 & 0x8000000212B54B02 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B54B02))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B54B02 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_emplace<ACFUError>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24CE82E70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ACFUError>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24CE82E70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<ACFUError>::__on_zero_shared()
{
  JUMPOUT(0x212BF9FD4);
}

void std::__shared_ptr_pointer<ACFUDiagnostics  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ACFUDiagnostics  *>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  if (*(_QWORD *)(a1 + 24))
  {
    v1 = (void *)MEMORY[0x212BF9854]();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<ACFUDiagnostics  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B54BECLL)
    return a1 + 24;
  if (((v3 & 0x8000000212B54BECLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B54BECLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B54BECLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<RTKitFirmware  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<RTKitFirmware  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<RTKitFirmware  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B54C75)
    return a1 + 24;
  if (((v3 & 0x8000000212B54C75 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B54C75))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B54C75 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<BasebandUpdaterTransport  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<BasebandUpdaterTransport  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<BasebandUpdaterTransport  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B54D07)
    return a1 + 24;
  if (((v3 & 0x8000000212B54D07 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B54D07))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B54D07 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

_QWORD *std::__function::__func<BasebandRestore::init(__CFDictionary const*,void const*)::$_0,std::allocator<BasebandRestore::init(__CFDictionary const*,void const*)::$_0>,ACFUErrorCode ()(std::shared_ptr<ACFUTransport>,std::shared_ptr<ACFUFirmware>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_24CE82FB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandRestore::init(__CFDictionary const*,void const*)::$_0,std::allocator<BasebandRestore::init(__CFDictionary const*,void const*)::$_0>,ACFUErrorCode ()(std::shared_ptr<ACFUTransport>,std::shared_ptr<ACFUFirmware>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_24CE82FB0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BasebandRestore::init(__CFDictionary const*,void const*)::$_0,std::allocator<BasebandRestore::init(__CFDictionary const*,void const*)::$_0>,ACFUErrorCode ()(std::shared_ptr<ACFUTransport>,std::shared_ptr<ACFUFirmware>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  const void *v4;
  std::__shared_weak_count *v5;
  ACFUFirmware *v6;
  uint64_t v7;
  BasebandUpdaterTransport *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  ACFULogging *v11;
  ACFULogging *v12;
  BasebandUpdaterTransport *v13;
  unint64_t *v14;
  unint64_t v15;
  ACFULogging *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  CFTypeID ValueIfPresent;
  BOOL *v21;
  CFTypeID v22;
  const __CFBoolean *v23;
  BBUPartitionManager *v24;
  BBUPartitionManager *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  ACFULogging *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t is_directory;
  ACFULogging *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  bbufs *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  ACFULogging *v54;
  const __CFData *v55;
  const __CFData *v56;
  const UInt8 *BytePtr;
  CFIndex Length;
  __int128 v59;
  uint64_t v60;
  char v61;
  char v62;
  const __CFDictionary *v63;
  __CFString *v64;
  const __CFString *v65;
  CFTypeID v66;
  ACFULogging *TypeID;
  const char *CStringPtr;
  std::string *v69;
  int v70;
  _BOOL4 v71;
  ACFULogging *v72;
  size_t v73;
  std::string *v74;
  std::string::size_type v75;
  std::string::size_type size;
  BOOL v77;
  std::string *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  const char *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  int v87;
  size_t v88;
  size_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  void **v94;
  std::string *v95;
  unint64_t *v96;
  unint64_t v97;
  int v98;
  ACFULogging *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t (***v102)(void *, std::string::size_type);
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  void **v108;
  const __CFString *v109;
  const __CFString *v110;
  CFTypeID v111;
  const __CFString *v112;
  std::string *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  CFTypeRef v117;
  CFTypeID v118;
  const char *v119;
  ACFULogging *v120;
  void *v121;
  size_t v122;
  const __CFDictionary *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  ACFULogging *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  CFTypeRef v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  BBUPartitionManager *v140;
  BBUPartitionManager *v141;
  _QWORD *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  ACFULogging *v149;
  unint64_t *v150;
  unint64_t v151;
  const char *v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void **v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  const __CFDictionary *v167;
  ACFULogging *v168;
  ACFULogging *v169;
  CFTypeID v170;
  ACFULogging *v171;
  void *v172;
  ACFULogging *v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  ACFULogging *v181;
  std::string::size_type v182;
  std::string::size_type v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  int v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  __int128 v193;
  unint64_t *v194;
  unint64_t v195;
  int v196;
  unint64_t v197;
  const __CFData *v198;
  __int128 v199;
  unint64_t *v200;
  unint64_t v201;
  const UInt8 *v202;
  unint64_t *v203;
  unint64_t v204;
  capabilities::radio *LogInstance;
  ACFULogging *v206;
  std::string::size_type v207;
  capabilities::radio *v208;
  __int128 v209;
  ACFULogging *DataLocalCopy;
  CFTypeRef v211;
  uint64_t (*v212)(uint64_t);
  const char *v213;
  uint64_t v214;
  uint64_t *v215;
  char v216;
  const std::string::value_type *v217;
  size_t v218;
  _BYTE *v219;
  uint64_t *v220;
  int v221;
  const void *v222;
  size_t v223;
  size_t v224;
  size_t *v225;
  size_t *v226;
  size_t *v227;
  int v228;
  size_t *v229;
  size_t v230;
  size_t v231;
  int v232;
  const void *v233;
  size_t v234;
  size_t v235;
  int v236;
  ACFULogging *v237;
  char v238;
  void *v239;
  size_t v240;
  ACFULogging *v241;
  int v242;
  size_t v243;
  int v244;
  std::string::size_type v245;
  unint64_t v246;
  std::string *v247;
  void **v248;
  char *v249;
  std::string *v250;
  std::string *v251;
  CFStringRef v252;
  void *v253;
  CFURLRef v254;
  ACFULogging *v255;
  uint64_t v256;
  int v257;
  const std::string::value_type *v258;
  CFTypeRef v259;
  CFTypeRef v260;
  uint64_t v261;
  uint64_t v262;
  CFTypeRef v263;
  CFTypeRef v264;
  unint64_t *v265;
  unint64_t v266;
  std::string::size_type v267;
  std::string::size_type v268;
  void *v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  unint64_t *v277;
  unint64_t v278;
  CFTypeRef *v280;
  CFTypeRef *v281;
  CFTypeRef *v282;
  std::string::size_type v283;
  const __CFAllocator *alloc;
  std::__shared_weak_count *v285;
  std::__shared_weak_count *v286;
  std::__shared_weak_count *v287;
  std::string v288;
  unsigned __int8 v289;
  CFTypeRef v290;
  std::__shared_weak_count *v291;
  std::string v292;
  ACFULogging *v293;
  std::__shared_weak_count *v294;
  std::string v295;
  std::string v296;
  uint64_t __dst;
  CFTypeRef cf;
  CFTypeRef v299;
  std::string v300;
  std::string v301;
  void *__p[2];
  uint64_t v303;
  std::string __s2;
  _BYTE value[32];
  __int128 v306;
  void *v307[2];
  __int128 v308;
  uint64_t v309;
  uint64_t v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;

  v316 = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v6 = *(ACFUFirmware **)a3;
  v5 = *(std::__shared_weak_count **)(a3 + 8);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v7 = *(_QWORD *)(a1 + 8);
  v285 = v5;
  v286 = v3;
  if (v4)
  {
    if (v8)
    {
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
    }
    else
    {
      v3 = 0;
    }
  }
  else
  {
    v3 = 0;
    v8 = 0;
  }
  v287 = v3;
  v289 = -1;
  v11 = (ACFULogging *)BasebandUpdaterTransport::retrieveChipRev(v8, &v289);
  if ((_DWORD)v11)
  {
    ACFULogging::getLogInstance(v11);
    v12 = (ACFULogging *)ACFULogging::handleMessage();
    goto LABEL_11;
  }
  v55 = (const __CFData *)ACFUFirmware::copyFWDataByTag(v6, CFSTR("Cellular1,Recipe"));
  v56 = v55;
  if (!v55)
  {
    ACFULogging::getLogInstance(0);
    v12 = (ACFULogging *)ACFULogging::handleMessage();
    goto LABEL_11;
  }
  __s2.__r_.__value_.__r.__words[2] = 0x200000000000000;
  *(_OWORD *)&__s2.__r_.__value_.__l.__data_ = v289 & 0xF | 0x30u;
  *(_DWORD *)((char *)&__s2.__r_.__value_.__l.__data_ + 1) = ((v289 >> 4) + 65);
  __p[1] = 0;
  v303 = 0x200000000000000;
  __p[0] = (void *)((v289 >> 4) + 65);
  *(_DWORD *)((char *)__p + 1) = v289 & 0xF | 0x30;
  BytePtr = CFDataGetBytePtr(v55);
  Length = CFDataGetLength(v56);
  *(_QWORD *)&v59 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v59 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v310 = 2863311530;
  v311 = 0xAAAAAAAAAAAAAAAALL;
  v313 = 0xAAAAAAAAAAAAAAAALL;
  v315 = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v307 = v59;
  v308 = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&value[16] = v59;
  v306 = v59;
  *(_QWORD *)value = BytePtr;
  *(_QWORD *)&value[8] = Length;
  v309 = 0;
  v312 = 0uLL;
  v314 = 0;
  v60 = RecipeUtil::_parseVariables((RecipeUtil *)value);
  if ((_DWORD)v60)
  {
    ACFULogging::getLogInstance((ACFULogging *)v60);
    ACFULogging::handleMessage();
    goto LABEL_57;
  }
  v79 = *((_QWORD *)&v312 + 1);
  if (*((_QWORD *)&v312 + 1))
  {
    v80 = v313;
    if ((_QWORD)v313)
    {
      v81 = 0;
      v82 = 1;
      while (1)
      {
        v83 = *(const char **)(v79 + 8 * v81);
        v60 = strncmp(v83, (const char *)&__s2, 4uLL);
        if (!(_DWORD)v60)
          break;
        v81 = v82++;
        if (v80 <= v81)
          goto LABEL_86;
      }
      *((_QWORD *)&v313 + 1) = v83;
      ACFULogging::getLogInstance((ACFULogging *)v60);
      ACFULogging::handleMessage();
LABEL_57:
      v17 = 1;
      v61 = 1;
      v12 = (ACFULogging *)RecipeUtil::uninit((RecipeUtil *)value);
      if ((SHIBYTE(v303) & 0x80000000) == 0)
        goto LABEL_59;
      goto LABEL_58;
    }
  }
LABEL_86:
  ACFULogging::getLogInstance((ACFULogging *)v60);
  ACFULogging::handleMessage();
  v84 = *(std::__shared_weak_count **)(v7 + 360);
  if (v84)
  {
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
  }
  v87 = SHIBYTE(v303);
  if (v303 >= 0)
    v88 = HIBYTE(v303);
  else
    v88 = (size_t)__p[1];
  v89 = v88 + 23;
  memset(&v301, 170, sizeof(v301));
  if (v88 + 23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v88 >= 0xFFFFFFFFFFFFFFE9)
  {
    v90 = (char *)&v301.__r_.__value_.__r.__words[2] + 7;
    *((_BYTE *)&v301.__r_.__value_.__s + 23) = v88 + 23;
    qmemcpy(&v301, "Baseband chip revision ", 23);
LABEL_105:
    if (v87 >= 0)
      v94 = __p;
    else
      v94 = (void **)__p[0];
    memmove(v90, v94, v88);
    goto LABEL_109;
  }
  v91 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v89 | 7) != 0x17)
    v91 = v89 | 7;
  v92 = v91 + 1;
  v93 = (char *)operator new(v91 + 1);
  v301.__r_.__value_.__l.__size_ = v88 + 23;
  v301.__r_.__value_.__r.__words[2] = v92 | 0x8000000000000000;
  v301.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
  qmemcpy(v93, "Baseband chip revision ", 23);
  v90 = v93 + 23;
  if (v88)
    goto LABEL_105;
LABEL_109:
  v90[v88] = 0;
  v95 = std::string::append(&v301, " is not supported by the baseband firmware", 0x2AuLL);
  v288 = *v95;
  v95->__r_.__value_.__l.__size_ = 0;
  v95->__r_.__value_.__r.__words[2] = 0;
  v95->__r_.__value_.__r.__words[0] = 0;
  ACFUError::addError();
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v288.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v301.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_111:
      if (!v84)
        goto LABEL_119;
      goto LABEL_115;
    }
  }
  else if ((SHIBYTE(v301.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_111;
  }
  operator delete(v301.__r_.__value_.__l.__data_);
  if (!v84)
    goto LABEL_119;
LABEL_115:
  v96 = (unint64_t *)&v84->__shared_owners_;
  do
    v97 = __ldaxr(v96);
  while (__stlxr(v97 - 1, v96));
  if (!v97)
  {
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
  }
LABEL_119:
  v61 = 0;
  v17 = 3006;
  v12 = (ACFULogging *)RecipeUtil::uninit((RecipeUtil *)value);
  if (SHIBYTE(v303) < 0)
LABEL_58:
    operator delete(__p[0]);
LABEL_59:
  if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s2.__r_.__value_.__l.__data_);
    if ((v61 & 1) == 0)
      goto LABEL_508;
  }
  else if ((v61 & 1) == 0)
  {
    goto LABEL_508;
  }
LABEL_11:
  if (!v4)
  {
    ACFULogging::getLogInstance(v12);
    ACFULogging::handleMessage();
    goto LABEL_75;
  }
  if (!ACFURestore::isPreflighted((ACFURestore *)v7))
    goto LABEL_24;
  if (!v13)
  {
    ACFULogging::getLogInstance(0);
    ACFULogging::handleMessage();
LABEL_75:
    v17 = 1005;
    goto LABEL_508;
  }
  if (v286)
  {
    v14 = (unint64_t *)&v286->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (ACFULogging *)BasebandUpdaterTransport::setPreflightMode(v13);
  v17 = (uint64_t)v16;
  if ((_DWORD)v16)
  {
    ACFULogging::getLogInstance(v16);
    ACFULogging::handleMessage();
  }
  if (!v286)
    goto LABEL_23;
  v18 = (unint64_t *)&v286->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
    std::__shared_weak_count::__release_weak(v286);
    if ((_DWORD)v17)
      goto LABEL_508;
  }
  else
  {
LABEL_23:
    if ((_DWORD)v17)
      goto LABEL_508;
  }
LABEL_24:
  ValueIfPresent = *(_QWORD *)(v7 + 128);
  *(_QWORD *)value = 0;
  __s2.__r_.__value_.__s.__data_[0] = 0;
  if (ValueIfPresent)
  {
    ValueIfPresent = CFDictionaryGetValueIfPresent((CFDictionaryRef)ValueIfPresent, CFSTR("EraseEFS"), (const void **)value);
    if ((_DWORD)ValueIfPresent)
    {
      v21 = *(BOOL **)value;
      if (*(_QWORD *)value)
      {
        v22 = CFGetTypeID(*(CFTypeRef *)value);
        ValueIfPresent = CFBooleanGetTypeID();
        if (v22 == ValueIfPresent)
          ValueIfPresent = ctu::cf::assign((ctu::cf *)&__s2, v21, v23);
      }
    }
  }
  ACFULogging::getLogInstance((ACFULogging *)ValueIfPresent);
  ACFULogging::handleMessage();
  if (!__s2.__r_.__value_.__s.__data_[0])
    goto LABEL_66;
  memset(value, 170, 24);
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v24 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v25 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v25);
    v26 = operator new(0x20uLL);
    *v26 = &unk_24CE85728;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v25;
    v27 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v25;
    off_253D31E70 = v26;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v24 = (BBUPartitionManager *)off_253D31E68;
  }
  v30 = (std::__shared_weak_count *)off_253D31E70;
  __s2.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
  __s2.__r_.__value_.__l.__size_ = (std::string::size_type)off_253D31E70;
  if (off_253D31E70)
  {
    v31 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v24, (std::string *)value);
  if (v30)
  {
    v34 = (unint64_t *)&v30->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  ACFULogging::getLogInstance(v33);
  ACFULogging::handleMessage();
  v36 = ctu::fs::file_exists();
  if ((v36 & 1) == 0)
  {
    ACFULogging::getLogInstance((ACFULogging *)v36);
    v47 = ACFULogging::handleMessage();
    goto LABEL_63;
  }
  is_directory = ctu::fs::is_directory();
  if ((is_directory & 1) != 0)
  {
    is_directory = ctu::fs::remove_directory_contents();
    if ((_DWORD)is_directory)
    {
      ACFULogging::getLogInstance((ACFULogging *)is_directory);
      v38 = (ACFULogging *)ACFULogging::handleMessage();
      ACFULogging::getLogInstance(v38);
      ACFULogging::handleMessage();
      if (value[23] >= 0)
        v46 = (bbufs *)value;
      else
        v46 = *(bbufs **)value;
      if (!v46)
      {
        v54 = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v40, v41, v42, v43, v44, v45, 0);
LABEL_123:
        ACFULogging::getLogInstance(v54);
        v47 = ACFULogging::handleMessage();
        v62 = 0;
        v17 = 1;
        if ((value[23] & 0x80000000) != 0)
          goto LABEL_64;
        goto LABEL_65;
      }
      v47 = bbufs::prepareDestination(v46, v39);
      if ((v47 & 1) == 0)
      {
        v54 = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v48, v49, v50, v51, v52, v53, (char)"BasebandRestore");
        goto LABEL_123;
      }
LABEL_63:
      v17 = 0;
      v62 = 1;
      if ((value[23] & 0x80000000) == 0)
        goto LABEL_65;
      goto LABEL_64;
    }
  }
  ACFULogging::getLogInstance((ACFULogging *)is_directory);
  v47 = ACFULogging::handleMessage();
  v62 = 0;
  v17 = 1004;
  if ((value[23] & 0x80000000) != 0)
LABEL_64:
    operator delete(*(void **)value);
LABEL_65:
  if ((v62 & 1) == 0)
    goto LABEL_507;
LABEL_66:
  *(_QWORD *)&value[8] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&value[16] = 0xAAAAAAAAAAAAAALL;
  *(_QWORD *)value = 0xAAAAAAAAAAAAAA00;
  __s2.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  __s2.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
  __s2.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
  __p[1] = (void *)0xAAAAAAAAAA00736DLL;
  v303 = 0xAAAAAAAAAAAAAAALL;
  cf = 0;
  v299 = 0;
  v293 = 0;
  v294 = 0;
  __p[0] = *(void **)"NvramItems";
  v301.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v301.__r_.__value_.__r.__words[1] = xmmword_212B54A00;
  strcpy(v301.__r_.__value_.__l.__data_, "auto-boot='1', bootdelay='0', sdd-vers='20015'");
  v300.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
  *(_OWORD *)&v300.__r_.__value_.__r.__words[1] = xmmword_212B54A10;
  strcpy(v300.__r_.__value_.__l.__data_, "auto-boot='1', bootdelay='0', host-env='1', sdd-vers='20015'");
  v296.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
  *(_OWORD *)&v296.__r_.__value_.__r.__words[1] = xmmword_212B54A10;
  strcpy(v296.__r_.__value_.__l.__data_, "auto-boot='1', bootdelay='0', host-env='0', sdd-vers='20015'");
  v63 = *(const __CFDictionary **)(v7 + 128);
  if (!v63)
  {
    ACFULogging::getLogInstance(0);
LABEL_537:
    ACFULogging::handleMessage();
    v17 = 1;
    goto LABEL_208;
  }
  v64 = (__CFString *)CFDictionaryGetValue(v63, CFSTR("NVRAMItems"));
  v65 = v64;
  if (v64)
  {
    CFRetain(v64);
    v299 = v65;
    v66 = CFGetTypeID(v65);
    TypeID = (ACFULogging *)CFStringGetTypeID();
    if ((ACFULogging *)v66 != TypeID)
    {
LABEL_536:
      ACFULogging::getLogInstance(TypeID);
      goto LABEL_537;
    }
    CStringPtr = CFStringGetCStringPtr(v65, 0x8000100u);
    v69 = std::string::__assign_external((std::string *)value, CStringPtr);
    ACFULogging::getLogInstance((ACFULogging *)v69);
    v64 = (__CFString *)ACFULogging::handleMessage();
  }
  if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
  {
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
      goto LABEL_72;
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
    {
LABEL_72:
      v70 = BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS;
      v71 = v70 != 0;
      if (v70)
        goto LABEL_73;
LABEL_129:
      if (*(_BYTE *)(v7 + 464))
      {
        ACFULogging::getLogInstance((ACFULogging *)v64);
        v99 = (ACFULogging *)ACFULogging::handleMessage();
        v100 = value[23];
        if (value[23] < 0)
          v100 = *(_QWORD *)&value[8];
        if (v100)
        {
          ACFULogging::getLogInstance(v99);
          ACFULogging::handleMessage();
        }
        else
        {
          ACFULogging::getLogInstance(v99);
          ACFULogging::handleMessage();
          TypeID = (ACFULogging *)readStickyNvramItems((uint64_t *)value);
          v17 = (uint64_t)TypeID;
          if ((_DWORD)TypeID)
            goto LABEL_229;
        }
        v73 = HIBYTE(v300.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
        {
          size = v300.__r_.__value_.__l.__size_;
          v75 = v300.__r_.__value_.__r.__words[0];
          v77 = (v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
          v78 = &v300;
          goto LABEL_174;
        }
        v74 = &v300;
        if ((*((_BYTE *)&v300.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_79;
LABEL_140:
        std::string::__assign_no_alias<true>(&__s2, v74->__r_.__value_.__l.__data_, v74->__r_.__value_.__l.__size_);
        goto LABEL_181;
      }
      pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      if (!(_QWORD)xmmword_254B60258)
      {
        v102 = (uint64_t (***)(void *, std::string::size_type))operator new(0x18uLL);
        MEMORY[0x212BF9A7C](v102, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x24BDBD590]);
        v101 = operator new(0x20uLL);
        *v101 = off_24CE83090;
        v101[1] = 0;
        v101[2] = 0;
        v101[3] = v102;
        v103 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_254B60258 + 1);
        *(_QWORD *)&xmmword_254B60258 = v102;
        *((_QWORD *)&xmmword_254B60258 + 1) = v101;
        if (!v103)
        {
          v295.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
          v295.__r_.__value_.__l.__size_ = (std::string::size_type)v101;
          goto LABEL_148;
        }
        v104 = (unint64_t *)&v103->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v101 = (_QWORD *)*((_QWORD *)&xmmword_254B60258 + 1);
      v102 = (uint64_t (***)(void *, std::string::size_type))xmmword_254B60258;
      *(_OWORD *)&v295.__r_.__value_.__l.__data_ = xmmword_254B60258;
      if (!*((_QWORD *)&xmmword_254B60258 + 1))
      {
LABEL_150:
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        if (v303 >= 0)
          v108 = __p;
        else
          v108 = (void **)__p[0];
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v292, (const char *)v108);
        v109 = (const __CFString *)(**v102)(v102, v292.__r_.__value_.__r.__words[0]);
        v110 = v109;
        if (v109)
        {
          v111 = CFGetTypeID(v109);
          if (v111 == CFStringGetTypeID())
            v112 = v110;
          else
            v112 = 0;
          CFRelease(v110);
          v113 = (std::string *)MEMORY[0x212BF9A34](&v292);
          v114 = (std::__shared_weak_count *)v295.__r_.__value_.__l.__size_;
          if (!v295.__r_.__value_.__l.__size_)
            goto LABEL_164;
        }
        else
        {
          v112 = 0;
          v113 = (std::string *)MEMORY[0x212BF9A34](&v292);
          v114 = (std::__shared_weak_count *)v295.__r_.__value_.__l.__size_;
          if (!v295.__r_.__value_.__l.__size_)
          {
LABEL_164:
            if (v112)
            {
              CFRetain(v112);
              v117 = cf;
              cf = v112;
              if (v117)
                CFRelease(v117);
              v118 = CFGetTypeID(v112);
              TypeID = (ACFULogging *)CFStringGetTypeID();
              if ((ACFULogging *)v118 != TypeID)
                goto LABEL_536;
              ACFULogging::getLogInstance(TypeID);
              ACFULogging::handleMessage();
              v119 = CFStringGetCStringPtr(v112, 0x8000100u);
              v113 = std::string::__assign_external(&v296, v119);
            }
            ACFULogging::getLogInstance((ACFULogging *)v113);
            v120 = (ACFULogging *)ACFULogging::handleMessage();
            ACFULogging::getLogInstance(v120);
            ACFULogging::handleMessage();
            TypeID = (ACFULogging *)readStickyNvramItems((uint64_t *)value);
            v17 = (uint64_t)TypeID;
            if ((_DWORD)TypeID)
              goto LABEL_229;
            v73 = HIBYTE(v296.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
            {
              size = v296.__r_.__value_.__l.__size_;
              v75 = v296.__r_.__value_.__r.__words[0];
              v77 = (v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
              v78 = &v296;
              goto LABEL_174;
            }
            v74 = &v296;
            if ((*((_BYTE *)&v296.__r_.__value_.__s + 23) & 0x80) == 0)
              goto LABEL_79;
            goto LABEL_140;
          }
        }
        v115 = (unint64_t *)&v114->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
        goto LABEL_164;
      }
LABEL_148:
      v106 = v101 + 1;
      do
        v107 = __ldxr(v106);
      while (__stxr(v107 + 1, v106));
      goto LABEL_150;
    }
  }
  dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
  v98 = BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS;
  v71 = v98 != 0;
  if (!v98)
    goto LABEL_129;
LABEL_73:
  ACFULogging::getLogInstance((ACFULogging *)v64);
  v72 = (ACFULogging *)ACFULogging::handleMessage();
  ACFULogging::getLogInstance(v72);
  ACFULogging::handleMessage();
  v73 = HIBYTE(v301.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v74 = &v301;
    if ((*((_BYTE *)&v301.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_79:
      __s2 = *v74;
      goto LABEL_181;
    }
    goto LABEL_140;
  }
  size = v301.__r_.__value_.__l.__size_;
  v75 = v301.__r_.__value_.__r.__words[0];
  v77 = (v301.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  v78 = &v301;
LABEL_174:
  if (v77)
    v121 = (void *)v75;
  else
    v121 = v78;
  if (v77)
    v122 = size;
  else
    v122 = v73;
  std::string::__assign_no_alias<false>((void **)&__s2.__r_.__value_.__l.__data_, v121, v122);
LABEL_181:
  if ((value[23] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&v295, *(const std::string::value_type **)value, *(std::string::size_type *)&value[8]);
  else
    v295 = *(std::string *)value;
  if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v292, __s2.__r_.__value_.__l.__data_, __s2.__r_.__value_.__l.__size_);
  else
    v292 = __s2;
  TypeID = (ACFULogging *)createNVData((uint64_t)&v295, (uint64_t)&v292, v71, &v293);
  v17 = (uint64_t)TypeID;
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v292.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v295.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_189:
      if (!(_DWORD)v17)
        goto LABEL_190;
LABEL_229:
      ACFULogging::getLogInstance(TypeID);
      ACFULogging::handleMessage();
      goto LABEL_208;
    }
  }
  else if ((SHIBYTE(v295.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_189;
  }
  operator delete(v295.__r_.__value_.__l.__data_);
  if ((_DWORD)v17)
    goto LABEL_229;
LABEL_190:
  if (!v293)
    goto LABEL_536;
  v123 = *(const __CFDictionary **)(v7 + 128);
  v290 = v293;
  v291 = v294;
  if (v294)
  {
    v124 = (unint64_t *)&v294->__shared_owners_;
    do
      v125 = __ldxr(v124);
    while (__stxr(v125 + 1, v124));
  }
  saveNVRAMFile(v123, (ACFURTKitNVRMGenerator **)&v290);
  v126 = v291;
  if (v291)
  {
    v127 = (unint64_t *)&v291->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v130 = v293;
  v129 = v294;
  if (v294)
  {
    v131 = (unint64_t *)&v294->__shared_owners_;
    do
      v132 = __ldxr(v131);
    while (__stxr(v132 + 1, v131));
  }
  v133 = *(std::__shared_weak_count **)(v7 + 432);
  *(_QWORD *)(v7 + 424) = v130;
  *(_QWORD *)(v7 + 432) = v129;
  if (v133)
  {
    v134 = (unint64_t *)&v133->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v17 = 0;
LABEL_208:
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v296.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_210:
      if ((SHIBYTE(v301.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_211;
      goto LABEL_216;
    }
  }
  else if ((SHIBYTE(v300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_210;
  }
  operator delete(v300.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v301.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_211:
    if ((SHIBYTE(v303) & 0x80000000) == 0)
      goto LABEL_212;
    goto LABEL_217;
  }
LABEL_216:
  operator delete(v301.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v303) & 0x80000000) == 0)
  {
LABEL_212:
    v136 = cf;
    if (!cf)
      goto LABEL_219;
    goto LABEL_218;
  }
LABEL_217:
  operator delete(__p[0]);
  v136 = cf;
  if (cf)
LABEL_218:
    CFRelease(v136);
LABEL_219:
  v137 = v294;
  if (!v294)
    goto LABEL_223;
  v138 = (unint64_t *)&v294->__shared_owners_;
  do
    v139 = __ldaxr(v138);
  while (__stlxr(v139 - 1, v138));
  if (!v139)
  {
    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
    std::__shared_weak_count::__release_weak(v137);
    if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_224:
      if ((value[23] & 0x80000000) == 0)
        goto LABEL_225;
LABEL_232:
      operator delete(*(void **)value);
      v47 = (uint64_t)v299;
      if (!v299)
        goto LABEL_234;
      goto LABEL_233;
    }
  }
  else
  {
LABEL_223:
    if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_224;
  }
  operator delete(__s2.__r_.__value_.__l.__data_);
  if ((value[23] & 0x80000000) != 0)
    goto LABEL_232;
LABEL_225:
  v47 = (uint64_t)v299;
  if (v299)
LABEL_233:
    CFRelease((CFTypeRef)v47);
LABEL_234:
  if ((_DWORD)v17)
    goto LABEL_507;
  v290 = 0;
  __s2.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&__s2.__r_.__value_.__l.__data_ = 0uLL;
  __p[0] = 0;
  __p[1] = 0;
  v303 = 0;
  memset(&v301, 0, sizeof(v301));
  memset(&v300, 0, sizeof(v300));
  cf = 0;
  v299 = 0;
  v296.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAA01;
  __dst = 0;
  *(_OWORD *)&v296.__r_.__value_.__l.__data_ = 0xAAAAAAAAAAAA0100;
  memset(&v295, 170, sizeof(v295));
  value[23] = 4;
  strcpy(value, "bbcl");
  HIBYTE(v306) = 4;
  strcpy(&value[24], "bbpc");
  BYTE7(v308) = 4;
  strcpy((char *)v307, "bbpv");
  std::vector<std::string>::vector[abi:ne180100](&v295, (uint64_t)value, 3uLL);
  if ((SBYTE7(v308) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v306) & 0x80000000) == 0)
      goto LABEL_237;
LABEL_269:
    operator delete(*(void **)&value[24]);
    if ((value[23] & 0x80000000) == 0)
      goto LABEL_238;
    goto LABEL_270;
  }
  operator delete(v307[0]);
  if (SHIBYTE(v306) < 0)
    goto LABEL_269;
LABEL_237:
  if ((value[23] & 0x80000000) == 0)
    goto LABEL_238;
LABEL_270:
  operator delete(*(void **)value);
LABEL_238:
  v293 = 0;
  v294 = 0;
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v140 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v141 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v141);
    v142 = operator new(0x20uLL);
    *v142 = &unk_24CE85728;
    v142[1] = 0;
    v142[2] = 0;
    v142[3] = v141;
    v143 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v141;
    off_253D31E70 = v142;
    if (v143)
    {
      v144 = (unint64_t *)&v143->__shared_owners_;
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    v140 = (BBUPartitionManager *)off_253D31E68;
  }
  v146 = (std::__shared_weak_count *)off_253D31E70;
  v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
  v292.__r_.__value_.__l.__size_ = (std::string::size_type)off_253D31E70;
  if (off_253D31E70)
  {
    v147 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v148 = __ldxr(v147);
    while (__stxr(v148 + 1, v147));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v140, (std::string *)value);
  if (SHIBYTE(v303) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = *(_OWORD *)value;
  v303 = *(_QWORD *)&value[16];
  value[23] = 0;
  value[0] = 0;
  if (v146)
  {
    v150 = (unint64_t *)&v146->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  ACFULogging::getLogInstance(v149);
  v152 = "handleFDRForNonBridgeSetup";
  ACFULogging::handleMessage();
  if (v303 >= 0)
    v160 = __p;
  else
    v160 = (void **)__p[0];
  if (!v160)
  {
    v173 = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v154, v155, v156, v157, v158, v159, 0);
    goto LABEL_274;
  }
  if ((bbufs::prepareDestination((bbufs *)v160, v153) & 1) == 0)
  {
    v173 = (ACFULogging *)_BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v161, v162, v163, v164, v165, v166, (char)"BasebandRestore");
LABEL_274:
    ACFULogging::getLogInstance(v173);
    ACFULogging::handleMessage();
    v17 = 1004;
    v174 = v294;
    if (v294)
      goto LABEL_477;
    goto LABEL_481;
  }
  if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
  {
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
      goto LABEL_262;
LABEL_277:
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
    if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)
      goto LABEL_263;
LABEL_278:
    v169 = 0;
    v172 = *(void **)(v7 + 168);
    if (!v172)
      goto LABEL_285;
LABEL_279:
    if (v172)
    {
      v175 = *(std::__shared_weak_count **)(v7 + 176);
      if (v175)
      {
        v176 = (unint64_t *)&v175->__shared_owners_;
        do
          v177 = __ldxr(v176);
        while (__stxr(v177 + 1, v176));
      }
      v178 = v294;
      v293 = (ACFULogging *)v172;
      v294 = v175;
      if (!v178)
      {
LABEL_291:
        if (v172)
        {
          v181 = (ACFULogging *)(**(_QWORD *(***)(_BYTE *__return_ptr, void *, _QWORD, _QWORD))v172)(value, v172, 0, 0);
          v183 = *(_QWORD *)value;
          v182 = *(_QWORD *)&value[8];
          if (*(_QWORD *)&value[8])
          {
            v184 = (unint64_t *)(*(_QWORD *)&value[8] + 8);
            do
              v185 = __ldxr(v184);
            while (__stxr(v185 + 1, v184));
          }
          v186 = (std::__shared_weak_count *)__s2.__r_.__value_.__l.__size_;
          __s2.__r_.__value_.__r.__words[0] = v183;
          __s2.__r_.__value_.__l.__size_ = v182;
          if (v186)
          {
            v187 = (unint64_t *)&v186->__shared_owners_;
            do
              v188 = __ldaxr(v187);
            while (__stlxr(v188 - 1, v187));
            if (!v188)
            {
              ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
              std::__shared_weak_count::__release_weak(v186);
            }
          }
          v189 = *(_DWORD *)&value[16];
          LODWORD(__s2.__r_.__value_.__r.__words[2]) = *(_DWORD *)&value[16];
          v190 = *(std::__shared_weak_count **)&value[8];
          if (*(_QWORD *)&value[8])
          {
            v191 = (unint64_t *)(*(_QWORD *)&value[8] + 8);
            do
              v192 = __ldaxr(v191);
            while (__stlxr(v192 - 1, v191));
            if (!v192)
            {
              ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
              std::__shared_weak_count::__release_weak(v190);
            }
            v189 = __s2.__r_.__value_.__r.__words[2];
          }
          if (v189)
          {
            ACFULogging::getLogInstance(v181);
            ACFULogging::handleMessage();
LABEL_533:
            v17 = 1;
            if (!v169)
              goto LABEL_476;
            goto LABEL_475;
          }
          v193 = *(_OWORD *)&__s2.__r_.__value_.__l.__data_;
          if (__s2.__r_.__value_.__l.__size_)
          {
            v194 = (unint64_t *)(__s2.__r_.__value_.__l.__size_ + 8);
            do
              v195 = __ldxr(v194);
            while (__stxr(v195 + 1, v194));
            v196 = *(unsigned __int8 *)(v193 + 48);
            do
              v197 = __ldaxr(v194);
            while (__stlxr(v197 - 1, v194));
            if (!v197)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v193 + 1) + 16))(*((_QWORD *)&v193 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v193 + 1));
            }
            if (v196)
            {
LABEL_315:
              ACFULogging::getLogInstance(v181);
              v198 = (const __CFData *)ACFULogging::handleMessage();
              v199 = *(_OWORD *)&__s2.__r_.__value_.__l.__data_;
              *(_OWORD *)value = *(_OWORD *)&__s2.__r_.__value_.__l.__data_;
              if (__s2.__r_.__value_.__l.__size_)
              {
                v200 = (unint64_t *)(__s2.__r_.__value_.__l.__size_ + 8);
                do
                  v201 = __ldxr(v200);
                while (__stxr(v201 + 1, v200));
              }
              if (*(_BYTE *)(v199 + 48))
              {
                v198 = *(const __CFData **)(v199 + 40);
                if (v198)
                {
                  v202 = CFDataGetBytePtr(v198);
                  v198 = (const __CFData *)CFDataGetLength(*(CFDataRef *)(v199 + 40));
                  if ((unint64_t)v198 <= 8)
                  {
                    __dst = 0;
                    v198 = (const __CFData *)memcpy(&__dst, v202, (size_t)v198);
                  }
                }
              }
              if (*((_QWORD *)&v199 + 1))
              {
                v203 = (unint64_t *)(*((_QWORD *)&v199 + 1) + 8);
                do
                  v204 = __ldaxr(v203);
                while (__stlxr(v204 - 1, v203));
                if (!v204)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v199 + 1) + 16))(*((_QWORD *)&v199 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v199 + 1));
                }
              }
              LogInstance = (capabilities::radio *)ACFULogging::getLogInstance(v198);
              capabilities::radio::chipID(LogInstance);
              v206 = (ACFULogging *)ACFULogging::handleMessage();
              v283 = v295.__r_.__value_.__l.__size_;
              v207 = v295.__r_.__value_.__r.__words[0];
              if (v295.__r_.__value_.__r.__words[0] == v295.__r_.__value_.__l.__size_)
              {
LABEL_474:
                v17 = 0;
                if (!v169)
                  goto LABEL_476;
                goto LABEL_475;
              }
              alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              v280 = (CFTypeRef *)(v7 + 448);
              v281 = (CFTypeRef *)(v7 + 440);
              v282 = (CFTypeRef *)(v7 + 456);
LABEL_331:
              ACFULogging::getLogInstance(v206);
              v208 = (capabilities::radio *)ACFULogging::handleMessage();
              if (*(char *)(v207 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)value, *(const std::string::value_type **)v207, *(_QWORD *)(v207 + 8));
              }
              else
              {
                v209 = *(_OWORD *)v207;
                *(_QWORD *)&value[16] = *(_QWORD *)(v207 + 16);
                *(_OWORD *)value = v209;
              }
              HIBYTE(v306) = 0;
              value[24] = 0;
              capabilities::radio::chipID(v208);
              DataLocalCopy = (ACFULogging *)ACFUFDR::getDataLocalCopy();
              v211 = (CFTypeRef)v292.__r_.__value_.__r.__words[0];
              if (SHIBYTE(v306) < 0)
              {
                operator delete(*(void **)&value[24]);
                if ((value[23] & 0x80000000) == 0)
                  goto LABEL_336;
              }
              else if ((value[23] & 0x80000000) == 0)
              {
LABEL_336:
                ACFULogging::getLogInstance(DataLocalCopy);
                ACFULogging::handleMessage();
                v206 = (ACFULogging *)v290;
                v290 = v211;
                if (v206)
                {
                  CFRelease(v206);
                  v211 = v290;
                }
                v212 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
                if (!v211)
                  v212 = 0;
                if (!v212)
                  goto LABEL_330;
                v213 = v152;
                memset(value, 170, 24);
                GetBasebandFDR4ccToFileNameMap(value);
                v215 = *(uint64_t **)&value[8];
                if (!*(_QWORD *)&value[8])
                {
LABEL_471:
                  ACFULogging::getLogInstance((ACFULogging *)v214);
                  ACFULogging::handleMessage();
                  v17 = 1;
                  goto LABEL_472;
                }
                v216 = *(_BYTE *)(v207 + 23);
                if (v216 >= 0)
                  v217 = (const std::string::value_type *)v207;
                else
                  v217 = *(const std::string::value_type **)v207;
                if (v216 >= 0)
                  v218 = *(unsigned __int8 *)(v207 + 23);
                else
                  v218 = *(_QWORD *)(v207 + 8);
                v219 = &value[8];
                v220 = *(uint64_t **)&value[8];
                while (1)
                {
                  v221 = *((char *)v220 + 55);
                  if (v221 >= 0)
                    v222 = v220 + 4;
                  else
                    v222 = (const void *)v220[4];
                  if (v221 >= 0)
                    v223 = *((unsigned __int8 *)v220 + 55);
                  else
                    v223 = v220[5];
                  if (v218 >= v223)
                    v224 = v223;
                  else
                    v224 = v218;
                  v214 = memcmp(v222, v217, v224);
                  if ((_DWORD)v214)
                  {
                    if ((v214 & 0x80000000) != 0)
                      goto LABEL_349;
LABEL_363:
                    v219 = v220;
                    v220 = (uint64_t *)*v220;
                    if (!v220)
                    {
LABEL_364:
                      if (v219 == &value[8])
                        goto LABEL_471;
                      v227 = (size_t *)*((_QWORD *)v219 + 4);
                      v226 = (size_t *)(v219 + 32);
                      v225 = v227;
                      v228 = *((char *)v226 + 23);
                      if (v228 >= 0)
                        v229 = v226;
                      else
                        v229 = v225;
                      if (v228 >= 0)
                        v230 = *((unsigned __int8 *)v226 + 23);
                      else
                        v230 = v226[1];
                      if (v230 >= v218)
                        v231 = v218;
                      else
                        v231 = v230;
                      v214 = memcmp(v217, v229, v231);
                      if ((_DWORD)v214)
                      {
                        if ((v214 & 0x80000000) == 0)
                          goto LABEL_382;
                        goto LABEL_471;
                      }
                      if (v218 < v230)
                        goto LABEL_471;
LABEL_382:
                      while (2)
                      {
                        while (2)
                        {
                          v232 = *((char *)v215 + 55);
                          if (v232 >= 0)
                            v233 = v215 + 4;
                          else
                            v233 = (const void *)v215[4];
                          if (v232 >= 0)
                            v234 = *((unsigned __int8 *)v215 + 55);
                          else
                            v234 = v215[5];
                          if (v234 >= v218)
                            v235 = v218;
                          else
                            v235 = v234;
                          v236 = memcmp(v217, v233, v235);
                          if (v236)
                          {
                            if (v236 < 0)
                              goto LABEL_381;
                          }
                          else if (v218 < v234)
                          {
LABEL_381:
                            v215 = (uint64_t *)*v215;
                            if (!v215)
                              goto LABEL_546;
                            continue;
                          }
                          break;
                        }
                        v237 = (ACFULogging *)memcmp(v233, v217, v235);
                        if ((_DWORD)v237)
                        {
                          if ((v237 & 0x80000000) == 0)
                            break;
                          goto LABEL_399;
                        }
                        if (v234 < v218)
                        {
LABEL_399:
                          v215 = (uint64_t *)v215[1];
                          if (!v215)
LABEL_546:
                            std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
                          continue;
                        }
                        break;
                      }
                      if (&v301 != (std::string *)(v215 + 7))
                      {
                        v238 = *((_BYTE *)v215 + 79);
                        if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0)
                        {
                          if (v238 >= 0)
                            v239 = v215 + 7;
                          else
                            v239 = (void *)v215[7];
                          if (v238 >= 0)
                            v240 = *((unsigned __int8 *)v215 + 79);
                          else
                            v240 = v215[8];
                          v237 = (ACFULogging *)std::string::__assign_no_alias<false>((void **)&v301.__r_.__value_.__l.__data_, v239, v240);
                        }
                        else if ((*((_BYTE *)v215 + 79) & 0x80) != 0)
                        {
                          v237 = (ACFULogging *)std::string::__assign_no_alias<true>(&v301, (void *)v215[7], v215[8]);
                        }
                        else
                        {
                          v301 = *(std::string *)(v215 + 7);
                        }
                      }
                      ACFULogging::getLogInstance(v237);
                      v241 = (ACFULogging *)ACFULogging::handleMessage();
                      v242 = SHIBYTE(v303);
                      if (v303 >= 0)
                        v243 = HIBYTE(v303);
                      else
                        v243 = (size_t)__p[1];
                      v244 = SHIBYTE(v301.__r_.__value_.__r.__words[2]);
                      if ((v301.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v245 = HIBYTE(v301.__r_.__value_.__r.__words[2]);
                      else
                        v245 = v301.__r_.__value_.__l.__size_;
                      v246 = v245 + v243;
                      memset(&v292, 170, sizeof(v292));
                      if (v245 + v243 > 0x7FFFFFFFFFFFFFF7)
                        std::string::__throw_length_error[abi:ne180100]();
                      if (v246 > 0x16)
                      {
                        v261 = (v246 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v246 | 7) != 0x17)
                          v261 = v246 | 7;
                        v262 = v261 + 1;
                        v241 = (ACFULogging *)operator new(v261 + 1);
                        v247 = (std::string *)v241;
                        v292.__r_.__value_.__l.__size_ = v245 + v243;
                        v292.__r_.__value_.__r.__words[2] = v262 | 0x8000000000000000;
                        v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v241;
                        if (v243)
                        {
LABEL_422:
                          if (v242 >= 0)
                            v248 = __p;
                          else
                            v248 = (void **)__p[0];
                          v241 = (ACFULogging *)memmove(v247, v248, v243);
                        }
                      }
                      else
                      {
                        memset(&v292, 0, sizeof(v292));
                        v247 = &v292;
                        *((_BYTE *)&v292.__r_.__value_.__s + 23) = v245 + v243;
                        if (v243)
                          goto LABEL_422;
                      }
                      v249 = (char *)v247 + v243;
                      if (v245)
                      {
                        if (v244 >= 0)
                          v250 = &v301;
                        else
                          v250 = (std::string *)v301.__r_.__value_.__r.__words[0];
                        v241 = (ACFULogging *)memmove(v249, v250, v245);
                      }
                      v249[v245] = 0;
                      if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v300.__r_.__value_.__l.__data_);
                      v300 = v292;
                      ACFULogging::getLogInstance(v241);
                      v152 = v213;
                      ACFULogging::handleMessage();
                      if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v251 = &v300;
                      else
                        v251 = (std::string *)v300.__r_.__value_.__r.__words[0];
                      v252 = CFStringCreateWithCString(alloc, (const char *)v251, 0x8000100u);
                      v253 = (void *)v299;
                      v299 = v252;
                      if (v253)
                        CFRelease(v253);
                      if (!v252)
                        goto LABEL_538;
                      v254 = CFURLCreateWithString(alloc, v252, 0);
                      v253 = (void *)cf;
                      cf = v254;
                      if (v253)
                        CFRelease(v253);
                      if (v254)
                      {
                        v255 = (ACFULogging *)AMSupportWriteDataToFileURL();
                        if (!(_DWORD)v255)
                        {
                          ACFULogging::getLogInstance(v255);
                          v214 = ACFULogging::handleMessage();
                          v256 = *(unsigned __int8 *)(v207 + 23);
                          v257 = (char)v256;
                          if ((v256 & 0x80u) != 0)
                            v256 = *(_QWORD *)(v207 + 8);
                          if (v256 != 4)
                            goto LABEL_471;
                          if (v257 >= 0)
                            v258 = (const std::string::value_type *)v207;
                          else
                            v258 = *(const std::string::value_type **)v207;
                          switch(*(_DWORD *)v258)
                          {
                            case 0x6C636262:
                              if (v281 == &v290)
                                goto LABEL_329;
                              v263 = v290;
                              if (v290)
                                CFRetain(v290);
                              v260 = *v281;
                              *v281 = v263;
                              if (!v260)
                                goto LABEL_329;
                              break;
                            case 0x63706262:
                              if (v280 == &v290)
                                goto LABEL_329;
                              v264 = v290;
                              if (v290)
                                CFRetain(v290);
                              v260 = *v280;
                              *v280 = v264;
                              if (!v260)
                                goto LABEL_329;
                              break;
                            case 0x76706262:
                              if (v282 != &v290)
                              {
                                v259 = v290;
                                if (v290)
                                  CFRetain(v290);
                                v260 = *v282;
                                *v282 = v259;
                                if (v260)
                                  break;
                              }
LABEL_329:
                              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)value, *(uint64_t *)&value[8]);
LABEL_330:
                              v207 += 24;
                              if (v207 == v283)
                                goto LABEL_474;
                              goto LABEL_331;
                            default:
                              goto LABEL_471;
                          }
                          CFRelease(v260);
                          goto LABEL_329;
                        }
                        ACFULogging::getLogInstance(v255);
                        ACFULogging::handleMessage();
                        v17 = 1004;
                      }
                      else
                      {
LABEL_538:
                        ACFULogging::getLogInstance((ACFULogging *)v253);
                        ACFULogging::handleMessage();
                        v17 = 4000;
                      }
LABEL_472:
                      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)value, *(uint64_t *)&value[8]);
                      if (!v169)
                      {
LABEL_476:
                        v174 = v294;
                        if (v294)
                          goto LABEL_477;
                        goto LABEL_481;
                      }
LABEL_475:
                      CFRelease(v169);
                      goto LABEL_476;
                    }
                  }
                  else
                  {
                    if (v223 >= v218)
                      goto LABEL_363;
LABEL_349:
                    v220 = (uint64_t *)v220[1];
                    if (!v220)
                      goto LABEL_364;
                  }
                }
              }
              operator delete(*(void **)value);
              goto LABEL_336;
            }
          }
          else if (*(_BYTE *)(__s2.__r_.__value_.__r.__words[0] + 48))
          {
            goto LABEL_315;
          }
          ACFULogging::getLogInstance(v181);
        }
        else
        {
          ACFULogging::getLogInstance(0);
        }
        ACFULogging::handleMessage();
        goto LABEL_533;
      }
LABEL_286:
      v179 = (unint64_t *)&v178->__shared_owners_;
      do
        v180 = __ldaxr(v179);
      while (__stlxr(v180 - 1, v179));
      if (!v180)
      {
        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
        std::__shared_weak_count::__release_weak(v178);
      }
      v172 = v293;
      goto LABEL_291;
    }
LABEL_285:
    v178 = v294;
    v293 = (ACFULogging *)v172;
    v294 = 0;
    if (!v178)
      goto LABEL_291;
    goto LABEL_286;
  }
  dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
  if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS != -1)
    goto LABEL_277;
LABEL_262:
  if (!(BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS))
    goto LABEL_278;
LABEL_263:
  v167 = *(const __CFDictionary **)(v7 + 128);
  if (v167)
  {
    v168 = (ACFULogging *)CFDictionaryGetValue(v167, CFSTR("APTicket"));
    v169 = v168;
    if (v168)
    {
      ACFULogging::getLogInstance(v168);
      ACFULogging::handleMessage();
      AMSupportSafeRetain();
      v170 = CFGetTypeID(v169);
      v171 = (ACFULogging *)CFDataGetTypeID();
      if ((ACFULogging *)v170 != v171)
      {
        ACFULogging::getLogInstance(v171);
        ACFULogging::handleMessage();
        v17 = 1;
        goto LABEL_475;
      }
      v296.__r_.__value_.__l.__size_ = (std::string::size_type)v169;
      v172 = *(void **)(v7 + 168);
      if (!v172)
        goto LABEL_285;
      goto LABEL_279;
    }
  }
  ACFULogging::getLogInstance(0);
  ACFULogging::handleMessage();
  v17 = 1;
  v174 = v294;
  if (v294)
  {
LABEL_477:
    v265 = (unint64_t *)&v174->__shared_owners_;
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
LABEL_481:
  v267 = v295.__r_.__value_.__r.__words[0];
  if (v295.__r_.__value_.__r.__words[0])
  {
    v268 = v295.__r_.__value_.__l.__size_;
    v269 = (void *)v295.__r_.__value_.__r.__words[0];
    if (v295.__r_.__value_.__l.__size_ != v295.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v268 - 1) < 0)
          operator delete(*(void **)(v268 - 24));
        v268 -= 24;
      }
      while (v268 != v267);
      v269 = (void *)v295.__r_.__value_.__r.__words[0];
    }
    v295.__r_.__value_.__l.__size_ = v267;
    operator delete(v269);
  }
  if (cf)
    CFRelease(cf);
  if (v299)
    CFRelease(v299);
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v300.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v301.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_495:
      if ((SHIBYTE(v303) & 0x80000000) == 0)
        goto LABEL_496;
LABEL_500:
      operator delete(__p[0]);
      v270 = (std::__shared_weak_count *)__s2.__r_.__value_.__l.__size_;
      if (!__s2.__r_.__value_.__l.__size_)
        goto LABEL_504;
      goto LABEL_501;
    }
  }
  else if ((SHIBYTE(v301.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_495;
  }
  operator delete(v301.__r_.__value_.__l.__data_);
  if (SHIBYTE(v303) < 0)
    goto LABEL_500;
LABEL_496:
  v270 = (std::__shared_weak_count *)__s2.__r_.__value_.__l.__size_;
  if (!__s2.__r_.__value_.__l.__size_)
    goto LABEL_504;
LABEL_501:
  v271 = (unint64_t *)&v270->__shared_owners_;
  do
    v272 = __ldaxr(v271);
  while (__stlxr(v272 - 1, v271));
  if (v272)
  {
LABEL_504:
    v47 = (uint64_t)v290;
    if (!v290)
      goto LABEL_506;
    goto LABEL_505;
  }
  ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
  std::__shared_weak_count::__release_weak(v270);
  v47 = (uint64_t)v290;
  if (v290)
LABEL_505:
    CFRelease((CFTypeRef)v47);
LABEL_506:
  if ((_DWORD)v17)
  {
LABEL_507:
    ACFULogging::getLogInstance((ACFULogging *)v47);
    ACFULogging::handleMessage();
  }
LABEL_508:
  if (v287)
  {
    v273 = (unint64_t *)&v287->__shared_owners_;
    do
      v274 = __ldaxr(v273);
    while (__stlxr(v274 - 1, v273));
    if (!v274)
    {
      ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
      std::__shared_weak_count::__release_weak(v287);
    }
  }
  if (v285)
  {
    v275 = (unint64_t *)&v285->__shared_owners_;
    do
      v276 = __ldaxr(v275);
    while (__stlxr(v276 - 1, v275));
    if (!v276)
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
    }
  }
  if (v286)
  {
    v277 = (unint64_t *)&v286->__shared_owners_;
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 - 1, v277));
    if (!v278)
    {
      ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
      std::__shared_weak_count::__release_weak(v286);
    }
  }
  return v17;
}

void sub_212AEF2E8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BasebandRestore::init(__CFDictionary const*,void const*)::$_0,std::allocator<BasebandRestore::init(__CFDictionary const*,void const*)::$_0>,ACFUErrorCode ()(std::shared_ptr<ACFUTransport>,std::shared_ptr<ACFUFirmware>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN15BasebandRestore4initEPK14__CFDictionaryPKvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN15BasebandRestore4initEPK14__CFDictionaryPKvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN15BasebandRestore4initEPK14__CFDictionaryPKvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN15BasebandRestore4initEPK14__CFDictionaryPKvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BasebandRestore::init(__CFDictionary const*,void const*)::$_0,std::allocator<BasebandRestore::init(__CFDictionary const*,void const*)::$_0>,ACFUErrorCode ()(std::shared_ptr<ACFUTransport>,std::shared_ptr<ACFUFirmware>)>::target_type()
{
}

void std::__tree<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::__map_value_compare<ACFURestore::UpdateSteps,std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::less<ACFURestore::UpdateSteps>,true>,std::allocator<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::__map_value_compare<ACFURestore::UpdateSteps,std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::less<ACFURestore::UpdateSteps>,true>,std::allocator<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>>>::destroy(*a1);
    std::__tree<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::__map_value_compare<ACFURestore::UpdateSteps,std::__value_type<ACFURestore::UpdateSteps,RestoreStep>,std::less<ACFURestore::UpdateSteps>,true>,std::allocator<std::__value_type<ACFURestore::UpdateSteps,RestoreStep>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[6];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(a1);
    }
    else
    {
LABEL_6:
      operator delete(a1);
    }
  }
}

_QWORD *std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_24CE83040;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (a2)
  {
    v6 = *(std::__shared_weak_count **)(a2 + 32);
    if (v6)
    {
      if (v6->__shared_owners_ != -1)
        return a1;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      *(_QWORD *)(a2 + 24) = a2;
      *(_QWORD *)(a2 + 32) = v4;
      std::__shared_weak_count::__release_weak(v6);
    }
    else
    {
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      *(_QWORD *)(a2 + 24) = a2;
      *(_QWORD *)(a2 + 32) = v4;
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_212AEFACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v4 = (void *)MEMORY[0x212BF9A88](v2);
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v3;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 32);
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
    v3 = (void *)MEMORY[0x212BF9A88](v1);
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B54EFBLL)
    return a1 + 24;
  if (((v3 & 0x8000000212B54EFBLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B54EFBLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B54EFBLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  if (*(_QWORD *)(a1 + 24))
  {
    v1 = (void *)MEMORY[0x212BF9A88]();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B54FC1)
    return a1 + 24;
  if (((v3 & 0x8000000212B54FC1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B54FC1))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B54FC1 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t __cxx_global_var_init_14()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_212A4D000);
  }
  return result;
}

uint64_t __cxx_global_var_init_455()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUPartitionManager>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance, &dword_212A4D000);
  }
  return result;
}

uint64_t __cxx_global_var_init_456()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_212A4D000);
  }
  return result;
}

uint64_t __cxx_global_var_init_457()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_212A4D000);
  }
  return result;
}

uint64_t BBUEURUpdateSource::containsFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v6;
  size_t v7;
  unint64_t v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  std::string __dst;
  void *__p[2];
  std::string::size_type v21;

  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    return BBUZipFile::containsFile(v4, (_QWORD *)a2);
  v6 = *(char *)(a1 + 103);
  if (v6 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 103);
  else
    v7 = *(_QWORD *)(a1 + 88);
  v8 = v7 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7 + 1;
    if (!v7)
      goto LABEL_17;
  }
  if (v6 >= 0)
    v12 = (const void *)(a1 + 80);
  else
    v12 = *(const void **)(a1 + 80);
  memmove(p_dst, v12, v7);
LABEL_17:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v7) = 47;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v21 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = ctu::fs::file_exists();
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v18;
LABEL_27:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return v18;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_27;
  return v18;
}

void sub_212AEFF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *BBUEURUpdateSource::createDataSource(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  size_t v14;
  unint64_t v15;
  std::string *p_dst;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string __dst;
  void *__p[2];
  std::string::size_type v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v6 = *(_QWORD *)(a1 + 64);
  if (!v6)
  {
    v13 = *(char *)(a1 + 103);
    if (v13 >= 0)
      v14 = *(unsigned __int8 *)(a1 + 103);
    else
      v14 = *(_QWORD *)(a1 + 88);
    v15 = v14 + 1;
    memset(&__dst, 170, sizeof(__dst));
    if (v14 + 1 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v15 >= 0x17)
    {
      v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v17 = v15 | 7;
      v18 = v17 + 1;
      p_dst = (std::string *)operator new(v17 + 1);
      __dst.__r_.__value_.__l.__size_ = v14 + 1;
      __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14 + 1;
      if (!v14)
        goto LABEL_26;
    }
    if (v13 >= 0)
      v19 = (const void *)(a1 + 80);
    else
      v19 = *(const void **)(a1 + 80);
    memmove(p_dst, v19, v14);
LABEL_26:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v14) = 47;
    v20 = *(char *)(a2 + 23);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)a2;
    else
      v21 = *(const std::string::value_type **)a2;
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a2 + 23);
    else
      v22 = *(_QWORD *)(a2 + 8);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v28 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v10 = operator new(0x30uLL);
    *v10 = off_24CE7FC78;
    *(_OWORD *)(v10 + 1) = 0u;
    *(_OWORD *)(v10 + 3) = 0u;
    if (BBUFileDataSource::init((uint64_t)v10, (const char *)__p, a3))
    {
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
      v10 = 0;
    }
    if (SHIBYTE(v28) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v10;
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return v10;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    return v10;
  }
  v7 = *(std::__shared_weak_count **)(a1 + 72);
  v29 = *(_QWORD *)(a1 + 64);
  v30 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = operator new(0x38uLL);
  *v10 = off_24CE81588;
  v10[1] = v6;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  if (BBUZipDataSource::init((uint64_t)v10, (_QWORD *)a2, a3))
  {
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    v10 = 0;
  }
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v10;
}

void sub_212AF01C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUEURUpdateSource::saveFile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::ios_base *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *exception;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *__p[2];
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  void *v48[2];
  __int128 v49;
  unint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  std::__shared_weak_count *v62;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x17Du, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Firmware data source error.\")", v38, v39, v40, (char)__p[0]);
  }
  if (!BBUZipFile::containsFile(v4, (_QWORD *)a2))
    return 35;
  v8 = *(_QWORD *)(a1 + 64);
  v7 = *(std::__shared_weak_count **)(a1 + 72);
  v61 = v8;
  v62 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = operator new(0x38uLL);
  *v11 = off_24CE81588;
  v11[1] = v8;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  if (BBUZipDataSource::init((uint64_t)v11, (_QWORD *)a2, 0))
  {
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    v11 = 0;
  }
  if (!v7)
    goto LABEL_12;
  v12 = (unint64_t *)&v7->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
  {
LABEL_12:
    if (v11)
      goto LABEL_13;
    return 35;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!v11)
    return 35;
LABEL_13:
  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v50 = 0xAAAAAAAAAAAAAAAALL;
  v60 = v14;
  v59 = v14;
  v58 = v14;
  v57 = v14;
  v56 = v14;
  v55 = v14;
  v54 = v14;
  v53 = v14;
  v52 = v14;
  *(_OWORD *)v48 = v14;
  v49 = v14;
  v46 = v14;
  v47 = v14;
  v44 = v14;
  v45 = v14;
  v15 = MEMORY[0x24BEDB870];
  v16 = MEMORY[0x24BEDB870] + 64;
  v51 = MEMORY[0x24BEDB870] + 64;
  v17 = (uint64_t *)MEMORY[0x24BEDB800];
  v18 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v43 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v43 + *(_QWORD *)(v43 - 24)) = v18;
  v19 = (std::ios_base *)((char *)&v43 + *(_QWORD *)(v43 - 24));
  std::ios_base::init(v19, &v44);
  v19[1].__vftable = 0;
  v19[1].__fmtflags_ = -1;
  v43 = v15 + 24;
  v51 = v16;
  std::streambuf::basic_streambuf();
  v20 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v44 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)v48 = 0u;
  v49 = 0u;
  LODWORD(v50) = 16;
  v21 = *(char *)(a3 + 23);
  if (v21 >= 0)
    v22 = a3;
  else
    v22 = *(_QWORD *)a3;
  if (v21 >= 0)
    v23 = *(unsigned __int8 *)(a3 + 23);
  else
    v23 = *(_QWORD *)(a3 + 8);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, v22, v23);
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"/", 1);
  v26 = *(char *)(a2 + 23);
  if (v26 >= 0)
    v27 = a2;
  else
    v27 = *(_QWORD *)a2;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(a2 + 23);
  else
    v28 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
  if ((v50 & 0x10) != 0)
  {
    v31 = *((_QWORD *)&v49 + 1);
    if (*((_QWORD *)&v49 + 1) < (unint64_t)v47)
    {
      *((_QWORD *)&v49 + 1) = v47;
      v31 = v47;
    }
    v32 = (const void *)*((_QWORD *)&v46 + 1);
    v29 = v31 - *((_QWORD *)&v46 + 1);
    if ((unint64_t)(v31 - *((_QWORD *)&v46 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_47;
  }
  else
  {
    if ((v50 & 8) == 0)
    {
      v29 = 0;
      HIBYTE(v42) = 0;
      v30 = __p;
      goto LABEL_40;
    }
    v32 = (const void *)v45;
    v29 = v46 - v45;
    if ((_QWORD)v46 - (_QWORD)v45 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_47:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v29 >= 0x17)
  {
    v34 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v34 = v29 | 7;
    v35 = v34 + 1;
    v30 = operator new(v34 + 1);
    __p[1] = (void *)v29;
    v42 = v35 | 0x8000000000000000;
    __p[0] = v30;
  }
  else
  {
    HIBYTE(v42) = v29;
    v30 = __p;
    if (!v29)
      goto LABEL_40;
  }
  memmove(v30, v32, v29);
LABEL_40:
  *((_BYTE *)v30 + v29) = 0;
  v33 = (*(uint64_t (**)(_QWORD *, void **, _QWORD))(*v11 + 48))(v11, __p, 0);
  if (SHIBYTE(v42) < 0)
    operator delete(__p[0]);
  v43 = *v17;
  *(uint64_t *)((char *)&v43 + *(_QWORD *)(v43 - 24)) = v17[3];
  *(_QWORD *)&v44 = v20 + 16;
  if (SBYTE7(v49) < 0)
    operator delete(v48[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v51);
  return v33;
}

void sub_212AF05BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_212AF0650(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::saveImages(BBUEURUpdateSource *this)
{
  const char *v2;
  unint64_t v3;
  timespec v4;
  char *v5;
  const char *v6;
  int v7;
  size_t v8;
  char *v9;
  void *v10;
  void **v11;
  void **v12;
  _BYTE *v13;
  BOOL v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void *exception;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void *__dst[3];
  stat v38;
  void *__src[5];

  if (!*((_QWORD *)this + 8))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x195u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Firmware data source error.\")", v29, v30, v31, v36);
  }
  memset(__src, 170, 24);
  capabilities::radio::personalizedFirmwarePath(this);
  if (SHIBYTE(__src[2]) < 0)
  {
    if (__src[1])
    {
      v2 = (const char *)__src[0];
      goto LABEL_7;
    }
LABEL_79:
    v32 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v32, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x198u, (ctu::LogMessageBuffer *)"Assertion failure(folder.empty() != true && \"Failed finding the bbfw path.\")", v33, v34, v35, v36);
  }
  if (!HIBYTE(__src[2]))
    goto LABEL_79;
  v2 = (const char *)__src;
LABEL_7:
  BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Saving image to %s", v2);
  v3 = 0;
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v38.st_blksize = v4;
  *(timespec *)v38.st_qspare = v4;
  v38.st_birthtimespec = v4;
  *(timespec *)&v38.st_size = v4;
  v38.st_mtimespec = v4;
  v38.st_ctimespec = v4;
  *(timespec *)&v38.st_uid = v4;
  v38.st_atimespec = v4;
  *(timespec *)&v38.st_dev = v4;
  while (1)
  {
    if (SHIBYTE(__src[2]) >= 0)
      v6 = (const char *)__src;
    else
      v6 = (const char *)__src[0];
    v7 = stat(v6, &v38);
    if (v3 == -1 || !v7)
    {
      v20 = (const char *)__src;
      if (SHIBYTE(__src[2]) < 0)
        v20 = (const char *)__src[0];
      BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Saving image to %s, success", v20);
      v21 = 0;
      if (SHIBYTE(__src[2]) < 0)
        goto LABEL_63;
      return v21;
    }
    v8 = HIBYTE(__src[2]);
    v9 = (char *)__src[1];
    if (SHIBYTE(__src[2]) >= 0)
      v10 = (void *)HIBYTE(__src[2]);
    else
      v10 = __src[1];
    if ((unint64_t)v10 <= v3
      || ((v11 = (void **)__src[0], SHIBYTE(__src[2]) >= 0) ? (v12 = __src) : (v12 = (void **)__src[0]),
          (v13 = memchr((char *)v12 + v3, 47, (size_t)v10 - v3), v5 = (char *)(v13 - (_BYTE *)v12), v13)
        ? (v14 = v5 + 1 == 0)
        : (v14 = 1),
          v14))
    {
      if ((v8 & 0x80) != 0)
      {
        if (!v9)
        {
LABEL_8:
          v5 = 0;
          goto LABEL_9;
        }
        memset(__dst, 170, sizeof(__dst));
        v5 = v9;
        v11 = (void **)__src[0];
        v8 = (size_t)v9;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_59;
      }
      else
      {
        if (!(_DWORD)v8)
          goto LABEL_8;
        v5 = (char *)v8;
        memset(__dst, 170, sizeof(__dst));
        v11 = __src;
      }
    }
    else
    {
      if (!v5)
        goto LABEL_9;
      memset(__dst, 170, sizeof(__dst));
      if ((v8 & 0x80) != 0)
      {
        if (v9 >= v5)
          v8 = (size_t)v5;
        else
          v8 = (size_t)v9;
        if (v8 >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_59;
      }
      else
      {
        v11 = __src;
        if (v8 >= (unint64_t)v5)
          v8 = (size_t)v5;
        if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_59:
          std::string::__throw_length_error[abi:ne180100]();
      }
    }
    if (v8 >= 0x17)
    {
      v16 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v16 = v8 | 7;
      v17 = v16 + 1;
      v15 = (void **)operator new(v16 + 1);
      __dst[1] = (void *)v8;
      __dst[2] = (void *)(v17 | 0x8000000000000000);
      __dst[0] = v15;
LABEL_44:
      memmove(v15, v11, v8);
      goto LABEL_45;
    }
    HIBYTE(__dst[2]) = v8;
    v15 = __dst;
    if (v8)
      goto LABEL_44;
LABEL_45:
    *((_BYTE *)v15 + v8) = 0;
    v18 = SHIBYTE(__dst[2]) >= 0 ? (const char *)__dst : (const char *)__dst[0];
    if (stat(v18, &v38))
    {
      v19 = SHIBYTE(__dst[2]) >= 0 ? (const char *)__dst : (const char *)__dst[0];
      if (mkdir(v19, 0x1EDu))
        break;
    }
    if (SHIBYTE(__dst[2]) < 0)
    {
      operator delete(__dst[0]);
      v3 = (unint64_t)(v5 + 1);
    }
    else
    {
LABEL_9:
      v3 = (unint64_t)(v5 + 1);
    }
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
    {
LABEL_67:
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        v23 = (const char *)(**(uint64_t (***)(BBUEURUpdateSource *))this)(this);
        v27 = __dst;
        if (SHIBYTE(__dst[2]) < 0)
          LOBYTE(v27) = __dst[0];
        _BBULog(3, 0, v23, "", "Failed to create path %s", v24, v25, v26, (char)v27);
      }
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
      goto LABEL_67;
  }
  if (SHIBYTE(__dst[2]) < 0)
  {
    operator delete(__dst[0]);
    v21 = 35;
    if (SHIBYTE(__src[2]) < 0)
      goto LABEL_63;
  }
  else
  {
    v21 = 35;
    if (SHIBYTE(__src[2]) < 0)
LABEL_63:
      operator delete(__src[0]);
  }
  return v21;
}

void sub_212AF0A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 - 97) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 - 97) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v15 - 120));
  _Unwind_Resume(exception_object);
}

uint64_t BBUEURUpdateSource::cleanupFirmwareImage(uint64_t a1, uint64_t a2)
{
  void *v4;
  size_t v5;
  unint64_t v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  const char *v16;
  void **v17;
  char v18;
  void **v19;
  BBUFeedback *v20;
  int v21;
  int *v22;
  char *v23;
  void *exception;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  std::string __dst;
  void *__p[2];
  int64_t v36;
  void *v37[3];

  if (!*(_QWORD *)(a1 + 64))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x1C0u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Firmware data source error.\")", v26, v27, v28, v33);
  }
  memset(v37, 170, sizeof(v37));
  capabilities::radio::personalizedFirmwarePath((capabilities::radio *)a1);
  if ((SHIBYTE(v37[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v37[2]))
    {
      v4 = v37[1];
      goto LABEL_6;
    }
LABEL_44:
    v29 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v29, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x1C5u, (ctu::LogMessageBuffer *)"Assertion failure(dirPath.empty() != true && \"Failed finding the bbfw path.\")", v30, v31, v32, v33);
  }
  v4 = v37[1];
  if (!v37[1])
    goto LABEL_44;
LABEL_6:
  if (SHIBYTE(v37[2]) >= 0)
    v5 = HIBYTE(v37[2]);
  else
    v5 = (size_t)v4;
  v6 = v5 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v6 >= 0x17)
  {
    v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v8 = v6 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5 + 1;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5 + 1;
    if (!v5)
      goto LABEL_20;
  }
  if (SHIBYTE(v37[2]) >= 0)
    v10 = v37;
  else
    v10 = (void **)v37[0];
  memmove(p_dst, v10, v5);
LABEL_20:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v5) = 47;
  v11 = *(char *)(a2 + 23);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)a2;
  else
    v12 = *(const std::string::value_type **)a2;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  v14 = std::string::append(&__dst, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v36 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (*(char *)(a2 + 23) >= 0)
    v16 = (const char *)a2;
  else
    v16 = *(const char **)a2;
  v17 = v37;
  if (SHIBYTE(v37[2]) < 0)
    v17 = (void **)v37[0];
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Removing Firmware image [%s] in path [%s]\n", v16, (const char *)v17);
  v18 = HIBYTE(v36);
  if (v36 >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  if (unlink((const char *)v19))
  {
    v20 = *(BBUFeedback **)(a1 + 8);
    v21 = *__error();
    v22 = __error();
    v23 = strerror(*v22);
    BBUFeedback::handleComment(v20, "Unable to remove Firmware image [%s]. Error[%d][%s]\n", (const char *)v19, v21, v23);
    v18 = HIBYTE(v36);
  }
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v37[2]) & 0x80000000) == 0)
      return 0;
LABEL_42:
    operator delete(v37[0]);
    return 0;
  }
  if (SHIBYTE(v37[2]) < 0)
    goto LABEL_42;
  return 0;
}

void sub_212AF0DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BBUEURUpdateSource::saveFirmwareImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  void **v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  void *exception;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void *__dst[2];
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void *__p[2];
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  void *v58[4];

  if (!*(_QWORD *)(a1 + 64))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x1D7u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Firmware data source error.\")", v34, v35, v36, v37);
  }
  memset(v58, 170, 24);
  capabilities::radio::personalizedFirmwarePath((capabilities::radio *)a1);
  if ((SHIBYTE(v58[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v58[2]))
      goto LABEL_4;
LABEL_21:
    v22 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v22, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x1DEu, (ctu::LogMessageBuffer *)"Assertion failure(dirPath.empty() != true && \"Failed finding the bbfw path.\")", v23, v24, v25, v37);
  }
  if (!v58[1])
    goto LABEL_21;
LABEL_4:
  v4 = BBUEURUpdateSource::saveImages((BBUEURUpdateSource *)a1);
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47 = 0xAAAAAAAAAAAAAAAALL;
  v57 = v5;
  v56 = v5;
  v55 = v5;
  v54 = v5;
  v53 = v5;
  v52 = v5;
  v51 = v5;
  v50 = v5;
  v49 = v5;
  *(_OWORD *)__p = v5;
  v46 = v5;
  v43 = v5;
  v44 = v5;
  v41 = v5;
  v42 = v5;
  v6 = MEMORY[0x24BEDB870];
  v7 = MEMORY[0x24BEDB870] + 64;
  v48 = MEMORY[0x24BEDB870] + 64;
  v8 = (uint64_t *)MEMORY[0x24BEDB800];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v40 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v40 + *(_QWORD *)(v40 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v40 + *(_QWORD *)(v40 - 24));
  std::ios_base::init(v10, &v41);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v40 = v6 + 24;
  v48 = v7;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v41 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v46 = 0u;
  LODWORD(v47) = 16;
  if (SHIBYTE(v58[2]) >= 0)
    v12 = v58;
  else
    v12 = (void **)v58[0];
  if (SHIBYTE(v58[2]) >= 0)
    v13 = HIBYTE(v58[2]);
  else
    v13 = (uint64_t)v58[1];
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)v12, v13);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/", 1);
  v16 = *(char *)(a2 + 23);
  if (v16 >= 0)
    v17 = a2;
  else
    v17 = *(_QWORD *)a2;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a2 + 23);
  else
    v18 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
  if ((_DWORD)v4)
    goto LABEL_40;
  v19 = *(_QWORD *)(a1 + 64);
  if ((v47 & 0x10) != 0)
  {
    v26 = *((_QWORD *)&v46 + 1);
    if (*((_QWORD *)&v46 + 1) < (unint64_t)v44)
    {
      *((_QWORD *)&v46 + 1) = v44;
      v26 = v44;
    }
    v27 = (const void *)*((_QWORD *)&v43 + 1);
    v20 = v26 - *((_QWORD *)&v43 + 1);
    if ((unint64_t)(v26 - *((_QWORD *)&v43 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_46;
  }
  else
  {
    if ((v47 & 8) == 0)
    {
      v20 = 0;
      HIBYTE(v39) = 0;
      v21 = __dst;
      goto LABEL_32;
    }
    v27 = (const void *)v42;
    v20 = v43 - v42;
    if ((_QWORD)v43 - (_QWORD)v42 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_46:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v20 >= 0x17)
  {
    v28 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v28 = v20 | 7;
    v29 = v28 + 1;
    v21 = (void **)operator new(v28 + 1);
    __dst[1] = (void *)v20;
    v39 = v29 | 0x8000000000000000;
    __dst[0] = v21;
    v11 = MEMORY[0x24BEDB848];
  }
  else
  {
    HIBYTE(v39) = v20;
    v21 = __dst;
    if (!v20)
      goto LABEL_32;
  }
  memmove(v21, v27, v20);
LABEL_32:
  *((_BYTE *)v21 + v20) = 0;
  v4 = BBUZipFile::saveDataToFile(v19, (uint64_t)__dst);
  if (SHIBYTE(v39) < 0)
    operator delete(__dst[0]);
  if (*(char *)(a2 + 23) >= 0)
    v30 = (const char *)a2;
  else
    v30 = *(const char **)a2;
  v31 = (const char *)v58;
  if (SHIBYTE(v58[2]) < 0)
    v31 = (const char *)v58[0];
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Saving Firmware image [%s] in path [%s]\n", v30, v31);
LABEL_40:
  v40 = *v8;
  *(uint64_t *)((char *)&v40 + *(_QWORD *)(v40 - 24)) = v8[3];
  *(_QWORD *)&v41 = v11 + 16;
  if (SBYTE7(v46) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v48);
  if (SHIBYTE(v58[2]) < 0)
    operator delete(v58[0]);
  return v4;
}

void sub_212AF11E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;

  if (a16 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a17);
  if (*(char *)(v17 - 89) < 0)
    operator delete(*(void **)(v17 - 112));
  _Unwind_Resume(a1);
}

void BBUEURUpdateSource::loadProvisioningData(BBUEURUpdateSource *this)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t *v36;
  unint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *exception;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  std::string v56;
  std::string v57;
  std::string v58;
  _OWORD v59[2];

  memset(v59, 170, 24);
  *((_BYTE *)&v58.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v58, "provisioning/");
  v2 = std::string::append(&v58, "info.plist", 0xAuLL);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  *(_QWORD *)&v59[1] = *((_QWORD *)&v2->__r_.__value_.__l + 2);
  v59[0] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  memset(&v58, 170, sizeof(v58));
  *((_BYTE *)&v57.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v57, "provisioning/");
  v4 = std::string::append(&v57, "puk.pem", 7uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  *((_BYTE *)&v56.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v56, "provisioning/");
  v6 = std::string::append(&v56, "manifest.bin", 0xCuLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  v8 = *((_QWORD *)this + 8);
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x1F8u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Firmware data source error.\")", v43, v44, v45, v55);
    goto LABEL_75;
  }
  *((_BYTE *)&v56.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v56, "provisioning/");
  if (BBUZipFile::containsFile(v8, &v56))
    *((_BYTE *)this + 120) = 1;
  if (BBUZipFile::containsFile(*((_QWORD *)this + 8), v59))
  {
    if (*((_QWORD *)this + 16))
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 86, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x203u, (ctu::LogMessageBuffer *)"Provisioning Dictionary Source is not NULL", v46, v47, v48, v55);
      goto LABEL_75;
    }
    v10 = *((_QWORD *)this + 8);
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = operator new(0x38uLL);
    *v13 = off_24CE81588;
    v13[1] = v10;
    v13[4] = 0;
    v13[5] = 0;
    v13[3] = 0;
    if (BBUZipDataSource::init((uint64_t)v13, v59, 0))
    {
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
      v13 = 0;
    }
    *((_QWORD *)this + 16) = v13;
    if (v9)
    {
      v14 = (unint64_t *)&v9->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_26;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_26;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      v16 = (const char *)(**(uint64_t (***)(BBUEURUpdateSource *))this)(this);
      _BBULog(3, 0, v16, "", "Loaded provisioning dictionary\n", v17, v18, v19, v55);
    }
  }
LABEL_26:
  if (!BBUZipFile::containsFile(*((_QWORD *)this + 8), &v58))
    goto LABEL_42;
  if (*((_QWORD *)this + 17))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 86, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x20Du, (ctu::LogMessageBuffer *)"Provisioning Public Key Source is not NULL", v49, v50, v51, v55);
    goto LABEL_75;
  }
  v21 = *((_QWORD *)this + 8);
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = operator new(0x38uLL);
  *v24 = off_24CE81588;
  v24[1] = v21;
  v24[4] = 0;
  v24[5] = 0;
  v24[3] = 0;
  if (BBUZipDataSource::init((uint64_t)v24, &v58, 0))
  {
    (*(void (**)(_QWORD *))(*v24 + 8))(v24);
    v24 = 0;
  }
  *((_QWORD *)this + 17) = v24;
  if (v20)
  {
    v25 = (unint64_t *)&v20->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_42;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_42;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v27 = (const char *)(**(uint64_t (***)(BBUEURUpdateSource *))this)(this);
    _BBULog(3, 0, v27, "", "Loaded public key source\n", v28, v29, v30, v55);
  }
LABEL_42:
  if (!BBUZipFile::containsFile(*((_QWORD *)this + 8), &v57))
    goto LABEL_58;
  if (*((_QWORD *)this + 18))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 86, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x216u, (ctu::LogMessageBuffer *)"Provisioning Manifest Source is not NULL", v52, v53, v54, v55);
LABEL_75:
  }
  v32 = *((_QWORD *)this + 8);
  v31 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v31)
  {
    v33 = (unint64_t *)&v31->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = operator new(0x38uLL);
  *v35 = off_24CE81588;
  v35[1] = v32;
  v35[4] = 0;
  v35[5] = 0;
  v35[3] = 0;
  if (BBUZipDataSource::init((uint64_t)v35, &v57, 0))
  {
    (*(void (**)(_QWORD *))(*v35 + 8))(v35);
    v35 = 0;
  }
  *((_QWORD *)this + 18) = v35;
  if (v31)
  {
    v36 = (unint64_t *)&v31->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_58;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_58;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v38 = (const char *)(**(uint64_t (***)(BBUEURUpdateSource *))this)(this);
    _BBULog(3, 0, v38, "", "Loaded provisioning manifest\n", v39, v40, v41, v55);
  }
LABEL_58:
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_60:
      if ((SBYTE7(v59[1]) & 0x80000000) == 0)
        return;
LABEL_64:
      operator delete(*(void **)&v59[0]);
      return;
    }
  }
  else if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_60;
  }
  operator delete(v58.__r_.__value_.__l.__data_);
  if (SBYTE7(v59[1]) < 0)
    goto LABEL_64;
}

void sub_212AF18C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  uint64_t v28;

  __cxa_free_exception(v27);
  if (a27 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 73) < 0)
    operator delete(*(void **)(v28 - 96));
  if (*(char *)(v28 - 41) < 0)
    operator delete(*(void **)(v28 - 64));
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::copyProvisioningData(uint64_t a1, int a2, BBUMatureProvisioningData **a3)
{
  BBUDataSource *v5;
  BBUMatureProvisioningData *v6;
  void *exception;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (a2 != 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 70, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x22Bu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized provisoning support type.\")", v9, v10, v11, v12);
  }
  v5 = *(BBUDataSource **)(a1 + 136);
  if (!v5 && !*(_QWORD *)(a1 + 144))
    return 0;
  v6 = (BBUMatureProvisioningData *)operator new(0x18uLL);
  BBUMatureProvisioningData::BBUMatureProvisioningData(v6, v5, *(BBUDataSource **)(a1 + 144));
  *a3 = v6;
  return 1;
}

void sub_212AF1A40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AF1A54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getFusingSource(BBUEURUpdateSource *this)
{
  uint64_t v2;
  int v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *exception;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char __p[20];
  char v31;

  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    v3 = *((_DWORD *)this + 26);
    if ((v3 & 4) != 0)
      return *((_QWORD *)this + 14);
    *((_DWORD *)this + 26) = v3 | 4;
    v31 = 19;
    v29 = aFusingprogramP[0];
    strcpy(__p, "fusingprogram.plist");
    if (!BBUZipFile::containsFile(v2, __p))
      return *((_QWORD *)this + 14);
    if (*((_QWORD *)this + 14))
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 24, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x240u, (ctu::LogMessageBuffer *)"Fusing Source had read once", v25, v26, v27, aFusingprogramP[0]);
    }
    v5 = *((_QWORD *)this + 8);
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v31 = 19;
    strcpy(__p, "fusingprogram.plist");
    v8 = operator new(0x38uLL);
    *v8 = off_24CE81588;
    v8[1] = v5;
    v8[4] = 0;
    v8[5] = 0;
    v8[3] = 0;
    if (BBUZipDataSource::init((uint64_t)v8, __p, 0))
    {
      (*(void (**)(_QWORD *))(*v8 + 8))(v8);
      v8 = 0;
    }
    *((_QWORD *)this + 14) = v8;
    if (v31 < 0)
      operator delete(*(void **)__p);
    if (v4)
    {
      v9 = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_21;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_21;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      v11 = (const char *)(**(uint64_t (***)(BBUEURUpdateSource *))this)(this);
      _BBULog(3, 0, v11, "", "Loaded Fusing program \n", v12, v13, v14, aFusingprogramP[0]);
    }
LABEL_21:
    if (!*((_QWORD *)this + 14))
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
          goto LABEL_24;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
        {
LABEL_24:
          if ((gBBULogVerbosity & 0x80000000) == 0)
          {
            v15 = (const char *)(**(uint64_t (***)(BBUEURUpdateSource *))this)(this);
            _BBULog(3, 0, v15, "", "loading failed\n", v16, v17, v18, v29);
          }
        }
      }
    }
    return *((_QWORD *)this + 14);
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    result = 0;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      return result;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    result = 0;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      return result;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v20 = (const char *)(**(uint64_t (***)(BBUEURUpdateSource *))this)(this);
    _BBULog(3, 0, v20, "", "Fusing Source cannot be non-zipped source.\n", v21, v22, v23, v28);
    return 0;
  }
  return result;
}

void sub_212AF1DB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AF1DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::getManifestSource(BBUEURUpdateSource *this)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  char v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  char **v16;
  std::string *p_dst;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  int v25;
  int v26;
  size_t v27;
  unint64_t v28;
  std::string *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  char *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *exception;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  std::string::size_type v55;
  unsigned __int8 v56;
  std::string __dst;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *__p[2];
  std::string::size_type v61;

  v2 = *((_DWORD *)this + 26);
  if ((v2 & 1) != 0)
    goto LABEL_85;
  *((_DWORD *)this + 26) = v2 | 1;
  v3 = *((_QWORD *)this + 8);
  if (v3)
  {
    (*(void (**)(void **__return_ptr, BBUEURUpdateSource *))(*(_QWORD *)this + 56))(__p, this);
    v4 = BBUZipFile::containsFile(v3, __p);
    v5 = v4;
    if (SHIBYTE(v61) < 0)
    {
      operator delete(__p[0]);
      if (!v5)
        goto LABEL_85;
    }
    else if (!v4)
    {
      goto LABEL_85;
    }
    if (!*((_QWORD *)this + 19))
    {
      v8 = *((_QWORD *)this + 8);
      v7 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
      v58 = v8;
      v59 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      (*(void (**)(void **__return_ptr, BBUEURUpdateSource *))(*(_QWORD *)this + 56))(__p, this);
      v11 = operator new(0x38uLL);
      *v11 = off_24CE81588;
      v11[1] = v8;
      v11[4] = 0;
      v11[5] = 0;
      v11[3] = 0;
      if (BBUZipDataSource::init((uint64_t)v11, __p, 0))
      {
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
        v11 = 0;
      }
      *((_QWORD *)this + 19) = v11;
      if (SHIBYTE(v61) < 0)
        operator delete(__p[0]);
      if (v7)
      {
        v12 = (unint64_t *)&v7->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
          goto LABEL_85;
        goto LABEL_83;
      }
LABEL_94:
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_85;
      goto LABEL_83;
    }
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 26, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x255u, (ctu::LogMessageBuffer *)"Root Manifest Source is not NULL", v48, v49, v50, (char)v54);
LABEL_101:
  }
  v6 = *((_BYTE *)this + 103);
  if (v6 < 0)
  {
    if (!*((_QWORD *)this + 11))
      goto LABEL_85;
  }
  else if (!*((_BYTE *)this + 103))
  {
    goto LABEL_85;
  }
  if (v6 >= 0)
    v14 = *((unsigned __int8 *)this + 103);
  else
    v14 = *((_QWORD *)this + 11);
  v15 = v14 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v14 + 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_98:
    std::string::__throw_length_error[abi:ne180100]();
  v16 = (char **)((char *)this + 80);
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    p_dst = (std::string *)operator new(v18 + 1);
    __dst.__r_.__value_.__l.__size_ = v14 + 1;
    __dst.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14 + 1;
    if (!v14)
      goto LABEL_41;
  }
  if (v6 >= 0)
    v20 = (char *)this + 80;
  else
    v20 = *v16;
  memmove(p_dst, v20, v14);
LABEL_41:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v14) = 47;
  (*(void (**)(void **__return_ptr, BBUEURUpdateSource *))(*(_QWORD *)this + 56))(&v54, this);
  if ((v56 & 0x80u) == 0)
    v21 = (const std::string::value_type *)&v54;
  else
    v21 = (const std::string::value_type *)v54;
  if ((v56 & 0x80u) == 0)
    v22 = v56;
  else
    v22 = v55;
  v23 = std::string::append(&__dst, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v61 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = ctu::fs::file_exists();
  if (SHIBYTE(v61) < 0)
  {
    operator delete(__p[0]);
    if (((char)v56 & 0x80000000) == 0)
    {
LABEL_49:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_50;
LABEL_54:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (!v25)
        goto LABEL_85;
      goto LABEL_55;
    }
  }
  else if (((char)v56 & 0x80000000) == 0)
  {
    goto LABEL_49;
  }
  operator delete(v54);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_54;
LABEL_50:
  if (!v25)
    goto LABEL_85;
LABEL_55:
  if (*((_QWORD *)this + 19))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 26, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x25Eu, (ctu::LogMessageBuffer *)"Root Manifest Source is not NULL", v51, v52, v53, (char)v54);
    goto LABEL_101;
  }
  v26 = *((char *)this + 103);
  if (v26 >= 0)
    v27 = *((unsigned __int8 *)this + 103);
  else
    v27 = *((_QWORD *)this + 11);
  v28 = v27 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v27 + 1 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_98;
  if (v28 >= 0x17)
  {
    v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v30 = v28 | 7;
    v31 = v30 + 1;
    v29 = (std::string *)operator new(v30 + 1);
    __dst.__r_.__value_.__l.__size_ = v27 + 1;
    __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    v29 = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v27 + 1;
    if (!v27)
      goto LABEL_70;
  }
  if (v26 >= 0)
    v32 = (char *)this + 80;
  else
    v32 = *v16;
  memmove(v29, v32, v27);
LABEL_70:
  *(_WORD *)((char *)&v29->__r_.__value_.__l.__data_ + v27) = 47;
  (*(void (**)(void **__return_ptr, BBUEURUpdateSource *))(*(_QWORD *)this + 56))(&v54, this);
  if ((v56 & 0x80u) == 0)
    v33 = (const std::string::value_type *)&v54;
  else
    v33 = (const std::string::value_type *)v54;
  if ((v56 & 0x80u) == 0)
    v34 = v56;
  else
    v34 = v55;
  v35 = std::string::append(&__dst, v33, v34);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v61 = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v37 = (char *)operator new(0x30uLL);
  *(_QWORD *)v37 = off_24CE7FC78;
  *(_OWORD *)(v37 + 8) = 0u;
  *(_OWORD *)(v37 + 24) = 0u;
  if (BBUFileDataSource::init((uint64_t)v37, (const char *)__p, 0))
  {
    (*(void (**)(char *))(*(_QWORD *)v37 + 8))(v37);
    v37 = 0;
  }
  *((_QWORD *)this + 19) = v37;
  if (SHIBYTE(v61) < 0)
  {
    operator delete(__p[0]);
    if (((char)v56 & 0x80000000) == 0)
    {
LABEL_80:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_81;
      goto LABEL_93;
    }
  }
  else if (((char)v56 & 0x80000000) == 0)
  {
    goto LABEL_80;
  }
  operator delete(v54);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_81:
    if (gBBULogMaskGet(void)::once != -1)
      goto LABEL_94;
    goto LABEL_82;
  }
LABEL_93:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (gBBULogMaskGet(void)::once != -1)
    goto LABEL_94;
LABEL_82:
  if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
    goto LABEL_85;
LABEL_83:
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v38 = (const char *)(**(uint64_t (***)(BBUEURUpdateSource *))this)(this);
    _BBULog(3, 0, v38, "", "Loaded Manifest\n", v39, v40, v41, (char)v54);
  }
LABEL_85:
  if (!*((_QWORD *)this + 19))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        return *((_QWORD *)this + 19);
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        return *((_QWORD *)this + 19);
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      v42 = (const char *)(**(uint64_t (***)(BBUEURUpdateSource *))this)(this);
      _BBULog(3, 0, v42, "", "loading failed\n", v43, v44, v45, (char)v54);
    }
  }
  return *((_QWORD *)this + 19);
}

void sub_212AF241C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AF2430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::hasManifestSource(BBUEURUpdateSource *this)
{
  uint64_t result;
  uint64_t v3;
  void *__p[2];
  char v5;

  if ((*((_BYTE *)this + 104) & 1) != 0)
    return *((_QWORD *)this + 19) != 0;
  (*(void (**)(void **__return_ptr, BBUEURUpdateSource *))(*(_QWORD *)this + 56))(__p, this);
  result = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)__p);
  v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_212AF25B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BBUEURUpdateSource::getManifestFilename(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "bbticket.der");
}

uint64_t BBUEURUpdateSource::generateHash(BBUEURUpdateSource *this, unsigned __int8 *a2)
{
  uint64_t v2;
  const void *v4;
  _DWORD *v5;
  void *exception;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = *((_QWORD *)this + 8);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x283u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Firmware data source error.\")", v8, v9, v10, v11);
  }
  v4 = *(const void **)(v2 + 144);
  v5 = operator new(0x18uLL);
  v5[4] = 0;
  *(_QWORD *)v5 = off_24CE84890;
  *((_QWORD *)v5 + 1) = v4;
  if (v4)
    CFRetain(v4);
  BBUDataSource::generateHash((uint64_t)v5, a2, 0);
  (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
  return 1;
}

void sub_212AF26C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURUpdateSource::validateCoredumpItems(BBUEURUpdateSource *this)
{
  return 0;
}

uint64_t eUICC::Options::Options(uint64_t a1, const __CFDictionary **a2)
{
  void **v3;
  int Bool;
  const __CFString *v5;
  int v6;
  void **v7;
  void *v8;
  char *v9;
  void **v10;
  char *v11;
  char *v12;
  void **v13;
  char *v14;
  char *v15;
  BOOL v16;
  void **v17;
  char *v18;
  char *v19;
  void **v20;
  uint64_t v21;
  void **v22;
  char *v23;
  char *v24;
  char *v25;
  void **v26;
  char *v27;
  void *v28;
  char v29;
  void *v31;
  char *v32;
  const char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  _QWORD *v38;
  const char *v39;
  int v40;
  uint64_t *v41;
  int v42;
  _QWORD *v43;
  const char *v44;
  uint64_t *v45;
  void *exception;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void **v51;
  _QWORD *v52;
  _QWORD v53[2];
  void *__p[3];
  _QWORD v55[2];
  void *v56[3];
  int v57;
  _DWORD v58[5];
  char v59;
  int v60;
  char v61[24];
  int v62;
  char v63[24];
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)a1 = 255;
  *(_BYTE *)(a1 + 16) = 0;
  v3 = (void **)(a1 + 16);
  *(_QWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  v55[0] = 0xAAAAAAAAAAAAAAAALL;
  v55[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v55, *a2);
  *(_BYTE *)(a1 + 11) = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v55, CFSTR("VinylForceGold"));
  *(_BYTE *)(a1 + 10) = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v55, CFSTR("VinylForceMain"));
  ctu::cf::map_adapter::getString();
  if (*(char *)(a1 + 39) < 0)
    operator delete(*v3);
  *(_OWORD *)v3 = *(_OWORD *)v56;
  v3[2] = v56[2];
  Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v55, CFSTR("restoredInternal"));
  *(_BYTE *)(a1 + 42) = Bool;
  if (Bool)
  {
    *(_BYTE *)(a1 + 8) = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v55, CFSTR("VinylSkipAll"));
    *(_BYTE *)(a1 + 9) = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v55, CFSTR("VinylOnlyPerso"));
    if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v55, CFSTR("VinylUse4FF")))
      *(_DWORD *)a1 = 1;
    memset(v56, 170, sizeof(v56));
    memset(__p, 0, sizeof(__p));
    ctu::cf::map_adapter::getString();
    v6 = SHIBYTE(v56[2]);
    v7 = v56;
    v8 = v56[0];
    if (SHIBYTE(v56[2]) < 0)
      v7 = (void **)v56[0];
    v9 = (char *)HIBYTE(v56[2]);
    if (SHIBYTE(v56[2]) < 0)
      v9 = (char *)v56[1];
    if (v9)
    {
      v10 = (void **)&v9[(_QWORD)v7];
      v11 = v9 - 1;
      v12 = v11;
      v13 = v7;
      do
      {
        v14 = 0;
        while (v14[(_QWORD)v13] == aEuiccforcepers[(_QWORD)v14])
        {
          v15 = v14 + 1;
          if (v12 != v14)
          {
            v16 = v14++ == (char *)15;
            if (!v16)
              continue;
          }
          v17 = (void **)&v15[(_QWORD)v13];
          if (&aEuiccforcepers[(_QWORD)v15] == "")
            goto LABEL_22;
          goto LABEL_20;
        }
        v18 = &aEuiccforcepers[(_QWORD)v14];
        v17 = (void **)&v14[(_QWORD)v13];
        if (v18 == "")
          goto LABEL_22;
LABEL_20:
        v13 = (void **)((char *)v13 + 1);
        --v12;
      }
      while (v13 != v10);
      v13 = v10;
      v17 = v10;
LABEL_22:
      *(_BYTE *)(a1 + 40) = v13 != v17;
      v19 = v11;
      v20 = v7;
      do
      {
        v21 = 0;
        while (1)
        {
          v5 = (const __CFString *)aEuiccpersostat[v21];
          if (*((unsigned __int8 *)v20 + v21) != (_DWORD)v5)
            break;
          v5 = (const __CFString *)(v21 + 1);
          if (v19 != (char *)v21)
          {
            v16 = v21++ == 16;
            if (!v16)
              continue;
          }
          v22 = (void **)((char *)&v5->isa + (_QWORD)v20);
          if (&aEuiccpersostat[(_QWORD)v5] == "")
            goto LABEL_33;
          goto LABEL_31;
        }
        v23 = &aEuiccpersostat[v21];
        v22 = (void **)((char *)v20 + v21);
        if (v23 == "")
          goto LABEL_33;
LABEL_31:
        v20 = (void **)((char *)v20 + 1);
        --v19;
      }
      while (v20 != v10);
      v20 = v10;
      v22 = v10;
LABEL_33:
      *(_BYTE *)(a1 + 41) = v20 != v22;
      while (2)
      {
        v24 = 0;
        do
        {
          if (v24[(_QWORD)v7] != aEuiccforcecust[(_QWORD)v24])
          {
            v27 = &aEuiccforcecust[(_QWORD)v24];
            v26 = (void **)&v24[(_QWORD)v7];
            if (v27 == "")
              goto LABEL_45;
            goto LABEL_42;
          }
          v25 = v24 + 1;
          if (v11 == v24)
            break;
          v16 = v24++ == (char *)18;
        }
        while (!v16);
        v26 = (void **)&v25[(_QWORD)v7];
        if (&aEuiccforcecust[(_QWORD)v25] == "")
        {
LABEL_45:
          if (v7 != v26)
            *(_BYTE *)(a1 + 42) = 0;
          break;
        }
LABEL_42:
        v7 = (void **)((char *)v7 + 1);
        --v11;
        if (v7 != v10)
          continue;
        break;
      }
    }
    else
    {
      *(_WORD *)(a1 + 40) = 0;
    }
    if (v6 < 0)
      operator delete(v8);
  }
  if (BBUpdaterCommon::isNVRAMKeyPresent((BBUpdaterCommon *)CFSTR("BBUForceVinylUpdate"), v5))
    *(_WORD *)(a1 + 10) = 257;
  memset(__p, 170, sizeof(__p));
  memset(v56, 0, sizeof(v56));
  ctu::cf::map_adapter::getString();
  if (SHIBYTE(v56[2]) < 0)
  {
    operator delete(v56[0]);
    v31 = (void *)HIBYTE(__p[2]);
    v29 = HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) < 0)
      v31 = __p[1];
    if (!v31)
    {
LABEL_55:
      if ((v29 & 0x80) == 0)
        goto LABEL_56;
LABEL_86:
      operator delete(__p[0]);
      goto LABEL_56;
    }
  }
  else
  {
    v28 = (void *)HIBYTE(__p[2]);
    v29 = HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) < 0)
      v28 = __p[1];
    if (!v28)
      goto LABEL_55;
  }
  HIBYTE(v56[2]) = 9;
  strcpy((char *)v56, "Bootstrap");
  v59 = 3;
  v57 = 1;
  v58[0] = 7105601;
  v60 = 2;
  v61[23] = 21;
  strcpy(v61, "Bootstrap Preferences");
  v62 = 3;
  v63[23] = 15;
  strcpy(v63, "All Preferences");
  v64 = 4;
  v53[0] = 0;
  v53[1] = 0;
  v52 = v53;
  std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,eUICC::VinylPostProcess> const&>((uint64_t *)&v52, (uint64_t)v53, (uint64_t)v56, (uint64_t)v56);
  std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,eUICC::VinylPostProcess> const&>((uint64_t *)&v52, (uint64_t)v53, (uint64_t)v58, (uint64_t)v58);
  std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,eUICC::VinylPostProcess> const&>((uint64_t *)&v52, (uint64_t)v53, (uint64_t)v61, (uint64_t)v61);
  std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,eUICC::VinylPostProcess> const&>((uint64_t *)&v52, (uint64_t)v53, (uint64_t)v63, (uint64_t)v63);
  v32 = (char *)v53[0];
  if (!v53[0])
    goto LABEL_87;
  v33 = SHIBYTE(__p[2]) >= 0 ? (const char *)__p : (const char *)__p[0];
  v34 = v53;
  v35 = v53[0];
  do
  {
    v36 = (uint64_t *)v35;
    v37 = v34;
    v38 = (_QWORD *)(v35 + 32);
    if (*(char *)(v35 + 55) >= 0)
      v39 = (const char *)(v35 + 32);
    else
      v39 = *(const char **)(v35 + 32);
    v40 = strcasecmp(v39, v33);
    if (v40 >= 0)
      v41 = v36;
    else
      v41 = v36 + 1;
    if (v40 >= 0)
      v34 = v36;
    else
      v34 = v37;
    v35 = *v41;
  }
  while (v35);
  if (v34 == v53)
    goto LABEL_87;
  v42 = v40;
  v43 = v37 + 4;
  if (v40 >= 0)
    v43 = v38;
  v44 = *((char *)v34 + 55) >= 0 ? (const char *)v43 : (const char *)*v43;
  if (strcasecmp(v33, v44) < 0)
  {
LABEL_87:
    exception = __cxa_allocate_exception(0x210uLL);
    v50 = exception;
    v51 = __p;
    if (SHIBYTE(__p[2]) < 0)
      LOBYTE(v51) = __p[0];
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/eUICC/Public/eUICCOptions.cpp", 0x48u, (ctu::LogMessageBuffer *)"Invalid Refurb Option %s", v47, v48, v49, (char)v51);
  }
  if (v42 >= 0)
    v45 = v36;
  else
    v45 = v37;
  *(_DWORD *)(a1 + 4) = *((_DWORD *)v45 + 14);
  std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::destroy(v32);
  if ((HIBYTE(__p[2]) & 0x80) != 0)
    goto LABEL_86;
LABEL_56:
  MEMORY[0x212BF9A70](v55);
  return a1;
}

void sub_212AF2D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void **v27;

  if (a18 < 0)
    operator delete(__p);
  MEMORY[0x212BF9A70](&a19);
  if (*(char *)(v26 + 39) < 0)
    operator delete(*v27);
  _Unwind_Resume(a1);
}

uint64_t eUICC::Options::ToString@<X0>(eUICC::Options *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  _BYTE *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  char v41;
  size_t v42;
  uint64_t v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  void *__p[3];
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void *v55[2];
  __int128 v56;
  unint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v57 = 0xAAAAAAAAAAAAAAAALL;
  v67 = v4;
  v66 = v4;
  v65 = v4;
  v64 = v4;
  v63 = v4;
  v62 = v4;
  v61 = v4;
  v60 = v4;
  v59 = v4;
  *(_OWORD *)v55 = v4;
  v56 = v4;
  v53 = v4;
  v54 = v4;
  v51 = v4;
  v52 = v4;
  v5 = MEMORY[0x24BEDB870];
  v6 = MEMORY[0x24BEDB870] + 64;
  v58 = MEMORY[0x24BEDB870] + 64;
  v7 = (uint64_t *)MEMORY[0x24BEDB800];
  v8 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v50 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v50 + *(_QWORD *)(v50 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v50 + *(_QWORD *)(v50 - 24));
  std::ios_base::init(v9, &v51);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v50 = v5 + 24;
  v58 = v6;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v51 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)v55 = 0u;
  v56 = 0u;
  LODWORD(v57) = 16;
  v11 = v50;
  *(_DWORD *)((char *)&v50 + *(_QWORD *)(v50 - 24) + 8) |= 1u;
  *(_DWORD *)((char *)&v50 + *(_QWORD *)(v11 - 24) + 8) = *(_DWORD *)((_BYTE *)&v50 + *(_QWORD *)(v11 - 24) + 8) & 0xFFFFFFB5 | 8;
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"=========== eUICC Options ============\n", 39);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"uimSlot       ", 14);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"skipAll       ", 14);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"onlyPerso     ", 14);
  v17 = (_QWORD *)std::ostream::operator<<();
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"forceMain     ", 14);
  v19 = (_QWORD *)std::ostream::operator<<();
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"forceGold     ", 14);
  v21 = (_QWORD *)std::ostream::operator<<();
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"forcePerso    ", 14);
  v23 = (_QWORD *)std::ostream::operator<<();
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"alderHost     ", 14);
  v26 = *((char *)this + 39);
  if (v26 >= 0)
    v27 = (char *)this + 16;
  else
    v27 = (char *)*((_QWORD *)this + 2);
  if (v26 >= 0)
    v28 = *((unsigned __int8 *)this + 39);
  else
    v28 = *((_QWORD *)this + 3);
  v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"persoStatic   ", 14);
  v31 = (_QWORD *)std::ostream::operator<<();
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"internalBuild ", 14);
  v33 = (_QWORD *)std::ostream::operator<<();
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"\n", 1);
  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"postProcess   ", 14);
  switch(*((_DWORD *)this + 1))
  {
    case 1:
      v36 = (char *)operator new(0x28uLL);
      __p[0] = v36;
      *(_OWORD *)&__p[1] = xmmword_212B55040;
      qmemcpy(v36, "Delete All Non-Bootstrap Profiles", 33);
      v37 = v36 + 33;
      v38 = 33;
      break;
    case 2:
      v38 = 19;
      HIBYTE(__p[2]) = 19;
      qmemcpy(__p, "Delete All Profiles", 19);
      goto LABEL_13;
    case 3:
      v36 = (char *)operator new(0x28uLL);
      __p[0] = v36;
      *(_OWORD *)&__p[1] = xmmword_212B52800;
      qmemcpy(v36, "Clear Bootstrap eSIM Preferences", 32);
      v37 = v36 + 32;
      v38 = 32;
      break;
    case 4:
      v36 = (char *)operator new(0x20uLL);
      __p[0] = v36;
      *(_OWORD *)&__p[1] = xmmword_212B55030;
      qmemcpy(v36, "Clear All eSIM Preferences", 26);
      v37 = v36 + 26;
      v38 = 26;
      break;
    default:
      v38 = 9;
      HIBYTE(__p[2]) = 9;
      qmemcpy(__p, "No Action", 9);
LABEL_13:
      v36 = (char *)__p;
      v37 = (char *)__p + v38;
      break;
  }
  *v37 = 0;
  v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v38);
  v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"======================================\n", 39);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    v41 = v57;
    if ((v57 & 0x10) == 0)
      goto LABEL_16;
LABEL_19:
    v43 = *((_QWORD *)&v56 + 1);
    if (*((_QWORD *)&v56 + 1) < (unint64_t)v54)
    {
      *((_QWORD *)&v56 + 1) = v54;
      v43 = v54;
    }
    v44 = (const void *)*((_QWORD *)&v53 + 1);
    v42 = v43 - *((_QWORD *)&v53 + 1);
    if ((unint64_t)(v43 - *((_QWORD *)&v53 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_33;
    goto LABEL_22;
  }
  operator delete(__p[0]);
  v41 = v57;
  if ((v57 & 0x10) != 0)
    goto LABEL_19;
LABEL_16:
  if ((v41 & 8) == 0)
  {
    v42 = 0;
    a2[23] = 0;
    goto LABEL_29;
  }
  v44 = (const void *)v52;
  v42 = v53 - v52;
  if ((_QWORD)v53 - (_QWORD)v52 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_33:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_22:
  if (v42 >= 0x17)
  {
    v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17)
      v45 = v42 | 7;
    v46 = v45 + 1;
    v47 = operator new(v45 + 1);
    *((_QWORD *)a2 + 1) = v42;
    *((_QWORD *)a2 + 2) = v46 | 0x8000000000000000;
    *(_QWORD *)a2 = v47;
    a2 = v47;
    goto LABEL_28;
  }
  a2[23] = v42;
  if (v42)
LABEL_28:
    memmove(a2, v44, v42);
LABEL_29:
  a2[v42] = 0;
  v50 = *v7;
  *(uint64_t *)((char *)&v50 + *(_QWORD *)(v50 - 24)) = v7[3];
  *(_QWORD *)&v51 = v10 + 16;
  if (SBYTE7(v56) < 0)
    operator delete(v55[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212BFA3D0](&v58);
}

void sub_212AF3318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212AF332C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,eUICC::VinylPostProcess> const&>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  const char *v19;
  const char *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  const char *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  const char *v31;
  _QWORD *v32;
  char *v33;
  std::string *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  const char *v38;
  uint64_t v39;

  v6 = (_QWORD *)a2;
  v7 = result;
  v8 = result + 1;
  if (result + 1 == (uint64_t *)a2
    || (*(char *)(a3 + 23) >= 0 ? (v9 = (const char *)a3) : (v9 = *(const char **)a3),
        *(char *)(a2 + 55) >= 0 ? (v10 = (const char *)(a2 + 32)) : (v10 = *(const char **)(a2 + 32)),
        result = (uint64_t *)strcasecmp(v9, v10),
        (result & 0x80000000) != 0))
  {
    v11 = *v6;
    if ((_QWORD *)*v7 == v6)
    {
      v13 = v6;
LABEL_28:
      if (v11)
        v21 = v13;
      else
        v21 = v6;
      if (v11)
        v15 = v13 + 1;
      else
        v15 = v6;
      if (*v15)
        return result;
      v6 = v21;
LABEL_55:
      v33 = (char *)operator new(0x40uLL);
      v34 = (std::string *)(v33 + 32);
      if (*(char *)(a4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
      }
      else
      {
        *(_OWORD *)&v34->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
        *((_QWORD *)v33 + 6) = *(_QWORD *)(a4 + 16);
      }
      *((_DWORD *)v33 + 14) = *(_DWORD *)(a4 + 24);
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v6;
      *v15 = v33;
      v39 = *(_QWORD *)*v7;
      if (v39)
      {
        *v7 = v39;
        v33 = (char *)*v15;
      }
      result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], (uint64_t *)v33);
      ++v7[2];
      return result;
    }
    if (v11)
    {
      v12 = (_QWORD *)*v6;
      do
      {
        v13 = v12;
        v12 = (_QWORD *)v12[1];
      }
      while (v12);
    }
    else
    {
      v17 = v6;
      do
      {
        v13 = (_QWORD *)v17[2];
        v18 = *v13 == (_QWORD)v17;
        v17 = v13;
      }
      while (v18);
    }
    if (*((char *)v13 + 55) >= 0)
      v19 = (const char *)(v13 + 4);
    else
      v19 = (const char *)v13[4];
    if (*(char *)(a3 + 23) >= 0)
      v20 = (const char *)a3;
    else
      v20 = *(const char **)a3;
    result = (uint64_t *)strcasecmp(v19, v20);
    if ((result & 0x80000000) != 0)
      goto LABEL_28;
    v22 = (_QWORD *)*v8;
    v15 = v8;
    v6 = v8;
    if (!*v8)
      goto LABEL_55;
    while (1)
    {
      while (1)
      {
        v6 = v22;
        v25 = (_QWORD *)v22[4];
        v23 = v22 + 4;
        v24 = v25;
        v26 = (const char *)(*((char *)v23 + 23) >= 0 ? v23 : v24);
        if ((strcasecmp(v20, v26) & 0x80000000) == 0)
          break;
        v22 = (_QWORD *)*v6;
        v15 = v6;
        if (!*v6)
          goto LABEL_55;
      }
      result = (uint64_t *)strcasecmp(v26, v20);
      if ((result & 0x80000000) == 0)
        break;
      v22 = (_QWORD *)v6[1];
      if (!v22)
        goto LABEL_45;
    }
  }
  else
  {
    result = (uint64_t *)strcasecmp(v10, v9);
    if ((result & 0x80000000) == 0)
      return result;
    v15 = v6 + 1;
    v14 = (_QWORD *)v6[1];
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
        v6 = v15;
        v16 = v15;
      }
      while (v14);
    }
    else
    {
      v16 = v6;
      do
      {
        v27 = v16;
        v16 = (_QWORD *)v16[2];
      }
      while ((_QWORD *)*v16 != v27);
    }
    if (v16 == v8)
      goto LABEL_55;
    v30 = (_QWORD *)v16[4];
    v28 = v16 + 4;
    v29 = v30;
    v31 = (const char *)(*((char *)v28 + 23) >= 0 ? v28 : v29);
    if (strcasecmp(v9, v31) < 0)
      goto LABEL_55;
    v32 = (_QWORD *)*v8;
    v15 = v8;
    v6 = v8;
    if (!*v8)
      goto LABEL_55;
    while (1)
    {
      while (1)
      {
        v6 = v32;
        v37 = (_QWORD *)v32[4];
        v35 = v32 + 4;
        v36 = v37;
        v38 = (const char *)(*((char *)v35 + 23) >= 0 ? v35 : v36);
        if ((strcasecmp(v9, v38) & 0x80000000) == 0)
          break;
        v32 = (_QWORD *)*v6;
        v15 = v6;
        if (!*v6)
          goto LABEL_55;
      }
      result = (uint64_t *)strcasecmp(v38, v9);
      if ((result & 0x80000000) == 0)
        break;
      v32 = (_QWORD *)v6[1];
      if (!v32)
      {
LABEL_45:
        v15 = v6 + 1;
        goto LABEL_55;
      }
    }
  }
  return result;
}

void sub_212AF366C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t BBUICE16PersonalizationParameters::getFusingState(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  const unsigned int *v4;
  int v6;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    *a2 = ctu::TelephonyUtilRadioFusingInferFusingStateFromCertID((ctu *)&v6, v4);
    return 0;
  }
  else
  {
    *a2 = 0;
    return 3;
  }
}

uint64_t BBUICE16PersonalizationParameters::setPublicKeyHash(uint64_t a1, CFDataRef a2)
{
  uint64_t v4;
  const __CFData *v5;
  const __CFData *v6;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *(_QWORD *)(a1 + 40) = a2;
  if (a2)
  {
    v5 = (const __CFData *)(*(uint64_t (**)(CFDataRef))(*(_QWORD *)a2 + 16))(a2);
    a2 = BBUICEPersonalizationParameters::ICECertID::createFromPublicKeyHashData(v5, v6);
  }
  result = *(_QWORD *)(a1 + 24);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 24) = a2;
  return result;
}

void BBUICE16PersonalizationParameters::~BBUICE16PersonalizationParameters(BBUICE16PersonalizationParameters *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &unk_24CE83520;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 4);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 5);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 6);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 7);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &unk_24CE83520;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 4);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 5);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 6);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 7);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  operator delete(this);
}

uint64_t BBUPersonalizationParameters::setSerialNumber(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 32) = a2;
  return result;
}

std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(std::regex_token_iterator<std::__wrap_iter<const char *>, char> *this)
{
  std::vector<std::ssub_match>::pointer end;
  std::vector<std::ssub_match>::pointer begin;
  size_t v4;
  unint64_t v5;
  void *v6;
  std::vector<int>::pointer v7;
  unint64_t v8;
  unint64_t v9;
  std::match_results<std::__wrap_iter<const char *>>::value_type *p_unmatched;
  std::match_results<std::__wrap_iter<const char *>>::value_type *p_prefix;
  std::vector<std::ssub_match>::pointer v12;
  std::vector<std::ssub_match>::pointer v13;
  uint64_t v14;
  unint64_t v15;
  std::match_results<std::__wrap_iter<const char *>>::value_type *v16;
  std::vector<int>::pointer v17;
  __int32 *v18;
  std::match_results<std::__wrap_iter<const char *>>::value_type *v19;
  int *v20;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22;
  __int128 v23;

  begin = this->__position_.__match_.__matches_.__begin_;
  end = this->__position_.__match_.__matches_.__end_;
  v4 = (char *)end - (char *)begin;
  v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
  if (end == begin)
  {
    v6 = 0;
  }
  else
  {
    if (v5 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v6 = operator new(v4);
    memcpy(v6, begin, 24 * ((v4 - 24) / 0x18) + 24);
  }
  v22 = this->__position_.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  v23 = *(_OWORD *)&this->__position_.__match_.__suffix_.matched;
  if (this->__result_ == &this->__suffix_)
    goto LABEL_28;
  v7 = this->__subs_.__begin_;
  v8 = this->__n_ + 1;
  if (v8 < this->__subs_.__end_ - v7)
  {
    this->__n_ = v8;
    v9 = v7[v8];
    p_unmatched = &begin[(int)v9];
    if (v5 <= v9)
      p_unmatched = &this->__position_.__match_.__unmatched_;
    if ((_DWORD)v9 == -1)
      p_prefix = &this->__position_.__match_.__prefix_;
    else
      p_prefix = p_unmatched;
    this->__result_ = p_prefix;
    if (!v6)
      return this;
LABEL_32:
    operator delete(v6);
    return this;
  }
  this->__n_ = 0;
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&this->__position_);
  v12 = this->__position_.__match_.__matches_.__begin_;
  v13 = this->__position_.__match_.__matches_.__end_;
  v14 = (char *)v13 - (char *)v12;
  if (v13 == v12)
  {
    v17 = this->__subs_.__end_;
    v18 = wmemchr(this->__subs_.__begin_, -1, v17 - this->__subs_.__begin_);
    v19 = 0;
    if (v18)
      v20 = v18;
    else
      v20 = v17;
    if (v20 == this->__subs_.__end_ || !(_BYTE)v23)
    {
LABEL_31:
      this->__result_ = v19;
      if (!v6)
        return this;
      goto LABEL_32;
    }
    if (v22.second.__i_ != v22.first.__i_)
    {
      this->__suffix_.matched = 1;
      this->__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v22;
      this->__result_ = &this->__suffix_;
      if (!v6)
        return this;
      goto LABEL_32;
    }
LABEL_28:
    this->__result_ = 0;
    if (!v6)
      return this;
    goto LABEL_32;
  }
  v15 = this->__subs_.__begin_[this->__n_];
  if ((_DWORD)v15 == -1)
  {
    v19 = &this->__position_.__match_.__prefix_;
    goto LABEL_31;
  }
  v16 = &v12[(int)v15];
  if (0xAAAAAAAAAAAAAAABLL * (v14 >> 3) <= v15)
    v16 = &this->__position_.__match_.__unmatched_;
  this->__result_ = v16;
  if (v6)
    goto LABEL_32;
  return this;
}

void sub_212AF3BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;

  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

void ResetReasonEncoder::ParsedReason::~ParsedReason(ResetReasonEncoder::ParsedReason *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  if (*((_BYTE *)this + 32))
  {
    if (*((char *)this + 31) < 0)
      operator delete(*((void **)this + 1));
  }
}

double ResetReasonEncoder::encode@<D0>(ResetReasonEncoder *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  double result;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  __int128 v23;
  __int128 v24;
  __int128 *v25;
  _OWORD *v26;
  unint64_t v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  _OWORD v33[4];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 33) = v4;
  *(_OWORD *)(a2 + 17) = v4;
  *(_OWORD *)(a2 + 1) = v4;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 64) = 0;
  memset((char *)v33 + 2, 0, 62);
  v5 = *((_QWORD *)this + 5);
  v6 = *((_QWORD *)this + 6);
  v7 = v6 - v5;
  v8 = (v6 - v5) >> 2;
  LOBYTE(v33[0]) = *(_BYTE *)this;
  BYTE1(v33[0]) = v8;
  if ((unint64_t)(v6 - v5) >= 0x3F)
  {
    v9 = _MergedGlobals_3;
    if (os_log_type_enabled((os_log_t)_MergedGlobals_3, OS_LOG_TYPE_ERROR))
    {
      v29 = 134218240;
      v30 = v7;
      v31 = 1024;
      v32 = 62;
      _os_log_error_impl(&dword_212A4D000, v9, OS_LOG_TYPE_ERROR, "Failed to encode parsed reason because the size of the numeric arguments (%zu bytes) exceeds the maximum size (%d bytes) of the reset reason", (uint8_t *)&v29, 0x12u);
    }
    return result;
  }
  if (v6 != v5)
  {
    if (v8 <= 1)
      v11 = 1;
    else
      v11 = (v6 - v5) >> 2;
    if (v11 >= 0x14
      && (v8 <= 1 ? (v12 = 1) : (v12 = (v6 - v5) >> 2),
          (v13 = v12 - 1, v15 = (_DWORD)v13 == -1, v14 = HIDWORD(v13), !v15) ? (v15 = v14 == 0) : (v15 = 0),
          v15 && (unint64_t)v33 - v5 + 2 >= 0x20))
    {
      v16 = v11 & 0xFFFFFFFFFFFFFFF8;
      v17 = v11 & 0xFFFFFFF8;
      v25 = (__int128 *)(v5 + 16);
      v26 = (_OWORD *)((char *)&v33[1] + 2);
      v27 = v11 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v28 = *v25;
        *(v26 - 1) = *(v25 - 1);
        *v26 = v28;
        v25 += 2;
        v26 += 2;
        v27 -= 8;
      }
      while (v27);
      if (v11 == v16)
        goto LABEL_21;
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v18 = v17 + 1;
    do
    {
      *(_DWORD *)((char *)v33 + 4 * v16 + 2) = *(_DWORD *)(v5 + 4 * v16);
      v16 = v18++;
    }
    while (v8 > v16);
  }
LABEL_21:
  if (*((_BYTE *)this + 32))
  {
    v21 = (const char *)*((_QWORD *)this + 1);
    v19 = (char *)this + 8;
    v20 = v21;
    if (v19[23] >= 0)
      v22 = v19;
    else
      v22 = v20;
    strlcpy((char *)v33 + v7 + 2, v22, 62 - v7);
  }
  v23 = v33[1];
  *(_OWORD *)a2 = v33[0];
  *(_OWORD *)(a2 + 16) = v23;
  result = *(double *)&v33[2];
  v24 = v33[3];
  *(_OWORD *)(a2 + 32) = v33[2];
  *(_OWORD *)(a2 + 48) = v24;
  *(_BYTE *)(a2 + 64) = 1;
  return result;
}

_QWORD *std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x38E38E38E38E38FLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = 72 * a3;
    v6 = operator new(72 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    while (1)
    {
      v9 = (std::string *)&v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v11 = *v10;
        v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
      }
      v12 = &v6[v7];
      v13 = a2 + v7;
      *((_DWORD *)v12 + 6) = *(_DWORD *)(a2 + v7 + 24);
      v6[v7 + 32] = 0;
      v14 = (uint64_t)&v6[v7 + 32];
      v12[64] = 0;
      if (!*(_BYTE *)(a2 + v7 + 64))
        goto LABEL_7;
      v15 = *(_QWORD *)(v13 + 56);
      if (v15)
      {
        if (v13 + 32 == v15)
        {
          *(_QWORD *)&v6[v7 + 56] = v14;
          (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 32) + 24))(v13 + 32);
          goto LABEL_6;
        }
        v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v14);
      }
      else
      {
        v8 = 0;
      }
      *(_QWORD *)&v6[v7 + 56] = v8;
LABEL_6:
      v12[64] = 1;
LABEL_7:
      v7 += 72;
      if (v5 == v7)
      {
        a1[1] = &v6[v7];
        return a1;
      }
    }
  }
  return a1;
}

void sub_212AF3F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<ResetReasonEncoder::SubmatchInfo>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_212AF3FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  if (!v11)
  {
LABEL_2:
    *(_QWORD *)(v9 + 8) = v10;
    std::__exception_guard_exceptions<std::vector<ResetReasonEncoder::SubmatchInfo>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v13 = v10 + v11;
    if (*(_BYTE *)(v10 + v11 - 8))
    {
      v14 = *(_QWORD **)(v13 - 16);
      if ((_QWORD *)(v13 - 40) == v14)
      {
        v14 = (_QWORD *)(v13 - 40);
        v15 = 4;
        goto LABEL_9;
      }
      if (v14)
      {
        v15 = 5;
LABEL_9:
        (*(void (**)(void))(*v14 + 8 * v15))();
      }
    }
    if (*(char *)(v13 - 49) < 0)
      operator delete(*(void **)(v13 - 72));
    v11 -= 72;
    if (!v11)
      goto LABEL_2;
  }
}

void ***std::__exception_guard_exceptions<std::vector<ResetReasonEncoder::SubmatchInfo>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  uint64_t v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 == v3)
      {
LABEL_16:
        v2[1] = v3;
        operator delete(v5);
        return v1;
      }
      while (1)
      {
        if (*(v4 - 8))
        {
          v6 = (char *)*((_QWORD *)v4 - 2);
          if (v4 - 40 == v6)
          {
            v6 = v4 - 40;
            v7 = 4;
            goto LABEL_12;
          }
          if (v6)
          {
            v7 = 5;
LABEL_12:
            (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
          }
        }
        if (*(v4 - 49) < 0)
          operator delete(*((void **)v4 - 9));
        v4 -= 72;
        if (v4 == v3)
        {
          v5 = **v1;
          goto LABEL_16;
        }
      }
    }
  }
  return result;
}

_QWORD *std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_24CE832E8;
  return result;
}

void std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24CE832E8;
}

void std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  char *v7;
  std::sub_match<const char *> *v8;
  int v9;
  char *v10;
  void **v11;
  _BYTE *p_end_cap;
  std::vector<std::ssub_match>::pointer begin;
  std::__wrap_iter<const char *>::iterator_type i;
  const char **p_i;
  const char *v16;
  unint64_t v17;
  const char *p_p;
  char *v19;
  const char *v20;
  __int128 *v21;
  _OWORD *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  std::__wrap_iter<const char *> v33;
  std::__wrap_iter<const char *> v34;
  int *v35;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *p_suffix;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v37;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v38;
  std::__wrap_iter<const char *>::iterator_type v39;
  std::__wrap_iter<const char *>::iterator_type v40;
  unint64_t v41;
  __int128 *v42;
  __int128 *v43;
  _BYTE *v44;
  __int128 *v45;
  _OWORD *v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58[2];
  uint64_t v59;
  void *v60[2];
  uint64_t v61;
  __int128 v62;
  unint64_t v63;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v64;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v65;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> __p;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type __re;
  std::vector<std::ssub_match> v68[2];
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  std::locale v76[2];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *pregex;

  *(_OWORD *)v60 = *(_OWORD *)a1;
  v61 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_OWORD *)v58 = *(_OWORD *)a2;
  v59 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v80 = 0uLL;
  pregex = 0;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v78 = v4;
  v79 = v4;
  *(_OWORD *)&v76[0].__locale_ = v4;
  v77 = v4;
  v5 = std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v76, (uint64_t)v58, 0);
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v71 = 0xAAAAAAAAAAAAAA00;
  v68[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
  v74 = v6;
  v69 = 0;
  v70 = 0;
  v72 = 0;
  v73 = 0;
  LOBYTE(v74) = 0;
  BYTE8(v74) = 0;
  v75 = 0;
  memset(v68, 0, 41);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  __p.__position_.__match_.__unmatched_.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  __p.__position_.__match_.__matches_.__end_ = (std::vector<std::ssub_match>::pointer)0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&__p.__position_.__match_.__prefix_.second.__i_ = v6;
  memset(&__p.__position_.__match_.__matches_.__end_cap_, 0, 17);
  memset(&__p.__position_.__match_.__unmatched_.matched, 0, 17);
  __p.__position_.__match_.__prefix_.matched = 0;
  __p.__position_.__match_.__suffix_.first.__i_ = 0;
  v7 = (char *)HIBYTE(v61);
  if (v61 < 0)
    v7 = (char *)v60[1];
  memset(&__p, 0, 32);
  if (v61 >= 0)
    v8 = (std::sub_match<const char *> *)v60;
  else
    v8 = (std::sub_match<const char *> *)v60[0];
  *(_OWORD *)((char *)&__p.__position_.__flags_ + 1) = 0uLL;
  v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v5, v8, (std::sub_match<const char *> *)&v7[(_QWORD)v8], (std::vector<std::csub_match> *)&__p, 0);
  v10 = (char *)HIBYTE(v61);
  if (v61 >= 0)
    v11 = v60;
  else
    v11 = (void **)v60[0];
  if (v61 < 0)
    v10 = (char *)v60[1];
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v68, (uint64_t)v11, (std::sub_match<std::__wrap_iter<const char *>> *)&v10[(_QWORD)v11], (uint64_t *)&__p, 0);
  if (__p.__position_.__begin_.__i_)
  {
    __p.__position_.__end_.__i_ = __p.__position_.__begin_.__i_;
    operator delete((void *)__p.__position_.__begin_.__i_);
  }
  if (v9)
  {
    p_end_cap = &v68[1].__end_cap_;
    if (v68[0].__end_ != v68[0].__begin_)
      p_end_cap = &v68[0].__begin_->matched;
    if (!*p_end_cap)
    {
      memset(&__p, 0, 24);
      if (SHIBYTE(pregex) < 0)
        goto LABEL_41;
      goto LABEL_42;
    }
    if (v68[0].__end_ == v68[0].__begin_)
      begin = (std::vector<std::ssub_match>::pointer)&v68[1];
    else
      begin = v68[0].__begin_;
    i = begin->first.__i_;
    p_i = &v68[0].__begin_->second.__i_;
    if (v68[0].__end_ == v68[0].__begin_)
      p_i = (const char **)&v68[1].__end_;
    v16 = *p_i;
    v17 = *p_i - i;
    if (v17 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v17 > 0x16)
    {
      v25 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v25 = v17 | 7;
      v26 = v25 + 1;
      p_p = (const char *)operator new(v25 + 1);
      __p.__position_.__end_.__i_ = (std::__wrap_iter<const char *>::iterator_type)v17;
      __p.__position_.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)(v26 | 0x8000000000000000);
      __p.__position_.__begin_.__i_ = p_p;
      if (i != v16)
      {
LABEL_25:
        if (v17 < 0x20 || (unint64_t)(p_p - i) < 0x20)
        {
          v19 = (char *)p_p;
          v20 = i;
        }
        else
        {
          v19 = (char *)&p_p[v17 & 0xFFFFFFFFFFFFFFE0];
          v20 = &i[v17 & 0xFFFFFFFFFFFFFFE0];
          v21 = (__int128 *)(i + 16);
          v22 = p_p + 16;
          v23 = v17 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v24 = *v21;
            *(v22 - 1) = *(v21 - 1);
            *v22 = v24;
            v21 += 2;
            v22 += 2;
            v23 -= 32;
          }
          while (v23);
          if (v17 == (v17 & 0x7FFFFFFFFFFFFFE0))
          {
LABEL_40:
            *v19 = 0;
            if (SHIBYTE(pregex) < 0)
LABEL_41:
              operator delete((void *)v80);
LABEL_42:
            v80 = *(_OWORD *)&__p.__position_.__begin_.__i_;
            pregex = __p.__position_.__pregex_;
            goto LABEL_43;
          }
        }
        do
        {
          v27 = *v20++;
          *v19++ = v27;
        }
        while (v20 != v16);
        goto LABEL_40;
      }
    }
    else
    {
      HIBYTE(__p.__position_.__pregex_) = *(_BYTE *)p_i - (_BYTE)i;
      p_p = (const char *)&__p;
      if (i != v16)
        goto LABEL_25;
    }
    *p_p = 0;
    if (SHIBYTE(pregex) < 0)
      goto LABEL_41;
    goto LABEL_42;
  }
LABEL_43:
  *(_QWORD *)&v28 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&__re.__loop_count_ = v28;
  *(_OWORD *)&__re.__start_.__cntrl_ = v28;
  *(_OWORD *)&__re.__traits_.__loc_.__locale_ = v28;
  *(_OWORD *)&__re.__traits_.__col_ = v28;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&__re, "\\s+", 0);
  v29.first.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  v29.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__n_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__subs_.__end_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__result_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__suffix_.second.__i_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__position_.__match_.__suffix_.second.__i_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__position_.__match_.__ready_ = v29;
  __p.__position_.__match_.__prefix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__position_.__match_.__prefix_.matched = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__position_.__match_.__matches_.__end_cap_.__value_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__position_.__match_.__unmatched_.second.__i_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__position_.__pregex_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__position_.__match_.__matches_.__begin_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__position_.__begin_.__i_ = v29;
  v30 = HIBYTE(pregex);
  if (SHIBYTE(pregex) >= 0)
    v31 = (const char *)&v80;
  else
    v31 = (const char *)v80;
  if (SHIBYTE(pregex) < 0)
    v30 = *((_QWORD *)&v80 + 1);
  v32 = &v31[v30];
  v33.__i_ = v31;
  v34.__i_ = &v31[v30];
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&__p.__position_, v33, v34, &__re, match_default);
  memset(&__p.__suffix_, 0, 17);
  memset(&__p.__n_, 0, 32);
  v35 = (int *)operator new(4uLL);
  __p.__subs_.__begin_ = v35;
  *v35 = -1;
  __p.__subs_.__end_cap_.__value_ = v35 + 1;
  __p.__subs_.__end_ = v35 + 1;
  if (__p.__position_.__match_.__matches_.__end_ == __p.__position_.__match_.__matches_.__begin_)
  {
    __p.__suffix_.matched = 1;
    p_suffix = &__p.__suffix_;
    __p.__suffix_.first.__i_ = v31;
    __p.__suffix_.second.__i_ = v32;
  }
  else
  {
    p_suffix = &__p.__position_.__match_.__prefix_;
  }
  __p.__result_ = p_suffix;
  v37.first.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  v37.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__position_.__begin_.__i_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__position_.__pregex_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__position_.__match_.__matches_.__begin_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__position_.__match_.__matches_.__end_cap_.__value_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__position_.__match_.__unmatched_.second.__i_ = v37;
  v65.__position_.__match_.__prefix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__position_.__match_.__prefix_.matched = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__position_.__match_.__suffix_.second.__i_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__position_.__match_.__ready_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__result_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__suffix_.second.__i_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__n_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__subs_.__end_ = v37;
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v65, &__p);
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&__p);
  if (v65.__subs_.__begin_)
  {
    v65.__subs_.__end_ = v65.__subs_.__begin_;
    operator delete(v65.__subs_.__begin_);
  }
  if (v65.__position_.__match_.__matches_.__begin_)
  {
    v65.__position_.__match_.__matches_.__end_ = v65.__position_.__match_.__matches_.__begin_;
    operator delete(v65.__position_.__match_.__matches_.__begin_);
  }
  v38.first.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  v38.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__n_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__subs_.__end_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__result_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__suffix_.second.__i_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__position_.__match_.__suffix_.second.__i_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__position_.__match_.__ready_ = v38;
  v64.__position_.__match_.__prefix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__position_.__match_.__prefix_.matched = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__position_.__match_.__matches_.__end_cap_.__value_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__position_.__match_.__unmatched_.second.__i_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__position_.__pregex_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__position_.__match_.__matches_.__begin_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__position_.__begin_.__i_ = v38;
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v64, &__p);
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&__p);
  if (v64.__subs_.__begin_)
  {
    v64.__subs_.__end_ = v64.__subs_.__begin_;
    operator delete(v64.__subs_.__begin_);
  }
  if (v64.__position_.__match_.__matches_.__begin_)
  {
    v64.__position_.__match_.__matches_.__end_ = v64.__position_.__match_.__matches_.__begin_;
    operator delete(v64.__position_.__match_.__matches_.__begin_);
  }
  if (__p.__result_)
  {
    if (__p.__result_->matched)
    {
      v40 = __p.__result_->first.__i_;
      v39 = __p.__result_->second.__i_;
      v41 = v39 - __p.__result_->first.__i_;
      if (v41 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v41 > 0x16)
      {
        v49 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v41 | 7) != 0x17)
          v49 = v41 | 7;
        v50 = v49 + 1;
        v42 = (__int128 *)operator new(v49 + 1);
        *((_QWORD *)&v62 + 1) = v41;
        v63 = v50 | 0x8000000000000000;
        *(_QWORD *)&v62 = v42;
        if (v40 != v39)
        {
LABEL_64:
          if (v41 < 0x20 || (unint64_t)((char *)v42 - v40) < 0x20)
          {
            v43 = v42;
            v44 = v40;
          }
          else
          {
            v43 = (__int128 *)((char *)v42 + (v41 & 0xFFFFFFFFFFFFFFE0));
            v44 = &v40[v41 & 0xFFFFFFFFFFFFFFE0];
            v45 = (__int128 *)(v40 + 16);
            v46 = v42 + 1;
            v47 = v41 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v48 = *v45;
              *(v46 - 1) = *(v45 - 1);
              *v46 = v48;
              v45 += 2;
              v46 += 2;
              v47 -= 32;
            }
            while (v47);
            if (v41 == (v41 & 0x7FFFFFFFFFFFFFE0))
              goto LABEL_77;
          }
          do
          {
            v51 = *v44++;
            *(_BYTE *)v43 = v51;
            v43 = (__int128 *)((char *)v43 + 1);
          }
          while (v44 != v39);
LABEL_77:
          *(_BYTE *)v43 = 0;
          goto LABEL_78;
        }
      }
      else
      {
        HIBYTE(v63) = (_BYTE)v39 - (unint64_t)__p.__result_->first.__i_;
        v42 = &v62;
        if (v40 != v39)
          goto LABEL_64;
      }
      *(_BYTE *)v42 = 0;
    }
    else
    {
      v62 = 0uLL;
      v63 = 0;
    }
LABEL_78:
    *(_OWORD *)a3 = v62;
    a3[2] = v63;
  }
  if (__p.__subs_.__begin_)
  {
    __p.__subs_.__end_ = __p.__subs_.__begin_;
    operator delete(__p.__subs_.__begin_);
  }
  if (__p.__position_.__match_.__matches_.__begin_)
  {
    __p.__position_.__match_.__matches_.__end_ = __p.__position_.__match_.__matches_.__begin_;
    operator delete(__p.__position_.__match_.__matches_.__begin_);
  }
  cntrl = __re.__start_.__cntrl_;
  if (__re.__start_.__cntrl_)
  {
    p_shared_owners = &__re.__start_.__cntrl_->__shared_owners_;
    do
      v54 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v54 - 1, (unint64_t *)p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  std::locale::~locale(&__re.__traits_.__loc_);
  if (v68[0].__begin_)
  {
    v68[0].__end_ = v68[0].__begin_;
    operator delete(v68[0].__begin_);
  }
  v55 = (std::__shared_weak_count *)v79;
  if (!(_QWORD)v79)
    goto LABEL_94;
  v56 = (unint64_t *)(v79 + 8);
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
    std::locale::~locale(v76);
    if ((SHIBYTE(pregex) & 0x80000000) == 0)
    {
LABEL_95:
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_96;
      goto LABEL_100;
    }
  }
  else
  {
LABEL_94:
    std::locale::~locale(v76);
    if ((SHIBYTE(pregex) & 0x80000000) == 0)
      goto LABEL_95;
  }
  operator delete((void *)v80);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_96:
    if ((SHIBYTE(v61) & 0x80000000) == 0)
      return;
LABEL_101:
    operator delete(v60[0]);
    return;
  }
LABEL_100:
  operator delete(v58[0]);
  if (SHIBYTE(v61) < 0)
    goto LABEL_101;
}

void sub_212AF480C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  v23 = *(void **)(v21 - 256);
  if (v23)
  {
    *(_QWORD *)(v21 - 248) = v23;
    operator delete(v23);
    v24 = *(std::__shared_weak_count **)(v21 - 96);
    if (!v24)
      goto LABEL_9;
  }
  else
  {
    v24 = *(std::__shared_weak_count **)(v21 - 96);
    if (!v24)
      goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_9:
  std::locale::~locale((std::locale *)(v21 - 144));
  if (*(char *)(v21 - 57) < 0)
  {
    operator delete(*(void **)(v21 - 80));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_11:
      if ((a21 & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(__p);
  if ((a21 & 0x80000000) == 0)
LABEL_12:
    _Unwind_Resume(a1);
LABEL_15:
  operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_212AF49C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  if (__p)
    operator delete(__p);
  JUMPOUT(0x212AF4918);
}

uint64_t std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::target_type()
{
}

std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(std::regex_token_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_token_iterator<std::__wrap_iter<const char *>, char> *a2)
{
  __int128 v4;
  std::vector<std::ssub_match>::pointer end;
  std::vector<std::ssub_match>::pointer begin;
  int64_t v7;
  std::sub_match<std::__wrap_iter<const char *>> *v8;
  size_t v9;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v10;
  __int128 v11;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v12;
  __int128 v13;
  const std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *v14;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v15;
  ptrdiff_t n;
  std::vector<int>::pointer v17;
  std::vector<int>::pointer v18;
  int64_t v19;
  int *v20;
  int *v21;
  unint64_t v22;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *p_suffix;
  char *v25;

  v4 = *(_OWORD *)&a2->__position_.__begin_.__i_;
  *(_OWORD *)((char *)&this->__position_.__end_.__i_ + 4) = *(_OWORD *)((char *)&a2->__position_.__end_.__i_ + 4);
  this->__position_.__match_.__matches_.__begin_ = 0;
  *(_OWORD *)&this->__position_.__begin_.__i_ = v4;
  this->__position_.__match_.__matches_.__end_ = 0;
  this->__position_.__match_.__matches_.__end_cap_.__value_ = 0;
  begin = a2->__position_.__match_.__matches_.__begin_;
  end = a2->__position_.__match_.__matches_.__end_;
  v7 = (char *)end - (char *)begin;
  if (end == begin)
  {
    v8 = 0;
    v25 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = (std::sub_match<std::__wrap_iter<const char *>> *)operator new(v7);
    this->__position_.__match_.__matches_.__begin_ = v8;
    this->__position_.__match_.__matches_.__end_ = v8;
    this->__position_.__match_.__matches_.__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v8 + 8 * (v7 >> 3));
    v9 = 24 * ((v7 - 24) / 0x18uLL) + 24;
    memcpy(v8, begin, v9);
    v25 = (char *)v8 + v9;
    this->__position_.__match_.__matches_.__end_ = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v8 + v9);
  }
  v10 = a2->__position_.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  *(_OWORD *)&this->__position_.__match_.__unmatched_.matched = *(_OWORD *)&a2->__position_.__match_.__unmatched_.matched;
  this->__position_.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v10;
  v11 = *(_OWORD *)&a2->__position_.__match_.__prefix_.second.__i_;
  v12 = a2->__position_.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  v13 = *(_OWORD *)&a2->__position_.__match_.__suffix_.matched;
  this->__position_.__match_.__position_start_.__i_ = a2->__position_.__match_.__position_start_.__i_;
  *(_OWORD *)&this->__position_.__match_.__suffix_.matched = v13;
  this->__position_.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v12;
  *(_OWORD *)&this->__position_.__match_.__prefix_.second.__i_ = v11;
  v14 = a2->__result_;
  this->__result_ = v14;
  v15 = a2->__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  *(_QWORD *)&this->__suffix_.matched = *(_QWORD *)&a2->__suffix_.matched;
  this->__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v15;
  n = a2->__n_;
  this->__subs_.__begin_ = 0;
  this->__n_ = n;
  this->__subs_.__end_ = 0;
  this->__subs_.__end_cap_.__value_ = 0;
  v18 = a2->__subs_.__begin_;
  v17 = a2->__subs_.__end_;
  v19 = (char *)v17 - (char *)v18;
  if (v17 == v18)
  {
    v20 = 0;
    if (a2->__result_ != &a2->__suffix_)
      goto LABEL_8;
LABEL_14:
    p_suffix = &this->__suffix_;
LABEL_16:
    this->__result_ = p_suffix;
    return this;
  }
  if (v19 < 0)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v20 = (int *)operator new((char *)v17 - (char *)v18);
  this->__subs_.__begin_ = v20;
  this->__subs_.__end_ = v20;
  v21 = &v20[v19 >> 2];
  this->__subs_.__end_cap_.__value_ = v21;
  memcpy(v20, v18, v19);
  this->__subs_.__end_ = v21;
  if (a2->__result_ == &a2->__suffix_)
    goto LABEL_14;
LABEL_8:
  if (v14)
  {
    v22 = v20[n];
    if ((_DWORD)v22 == -1)
    {
      p_suffix = &this->__position_.__match_.__prefix_;
    }
    else if (0xAAAAAAAAAAAAAAABLL * ((v25 - (char *)v8) >> 3) <= v22)
    {
      p_suffix = &this->__position_.__match_.__unmatched_;
    }
    else
    {
      p_suffix = &v8[(int)v22];
    }
    goto LABEL_16;
  }
  return this;
}

void sub_212AF4C68(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v1;
  if (*v1)
  {
    *(_QWORD *)(v2 + 192) = v5;
    operator delete(v5);
  }
  v6 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ResetReasonEncoder::Mapping>,ResetReasonEncoder::Mapping*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  void ***v2;
  void ***v3;
  void **v4;
  void **v5;
  char *v7;
  char *v8;
  void *v9;
  char *v10;
  uint64_t v11;
  void **v12;

  if (*(_BYTE *)(a1 + 24))
    return a1;
  v2 = *(void ****)(a1 + 8);
  v3 = *(void ****)(a1 + 16);
  v4 = *v2;
  v5 = *v3;
  if (*v3 == *v2)
    return a1;
  do
  {
    v7 = (char *)*(v5 - 3);
    if (!v7)
      goto LABEL_19;
    v8 = (char *)*(v5 - 2);
    v9 = *(v5 - 3);
    if (v8 != v7)
    {
      while (1)
      {
        if (*(v8 - 8))
        {
          v10 = (char *)*((_QWORD *)v8 - 2);
          if (v8 - 40 == v10)
          {
            v10 = v8 - 40;
            v11 = 4;
            goto LABEL_14;
          }
          if (v10)
          {
            v11 = 5;
LABEL_14:
            (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
          }
        }
        if (*(v8 - 49) < 0)
          operator delete(*((void **)v8 - 9));
        v8 -= 72;
        if (v8 == v7)
        {
          v9 = *(v5 - 3);
          break;
        }
      }
    }
    *(v5 - 2) = v7;
    operator delete(v9);
LABEL_19:
    v12 = v5 - 7;
    if (*((char *)v5 - 33) < 0)
      operator delete(*v12);
    v5 -= 7;
  }
  while (v12 != v4);
  return a1;
}

void std::vector<ResetReasonEncoder::Mapping>::__clear[abi:ne180100]()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;

  v0 = qword_253D372B8;
  v1 = qword_253D372C0;
  if (qword_253D372C0 == qword_253D372B8)
    goto LABEL_2;
  do
  {
    v2 = *(_QWORD *)(v1 - 24);
    if (!v2)
      goto LABEL_18;
    v3 = *(_QWORD *)(v1 - 16);
    v4 = *(void **)(v1 - 24);
    if (v3 != v2)
    {
      while (1)
      {
        if (*(_BYTE *)(v3 - 8))
        {
          v5 = *(_QWORD **)(v3 - 16);
          if ((_QWORD *)(v3 - 40) == v5)
          {
            v5 = (_QWORD *)(v3 - 40);
            v6 = 4;
            goto LABEL_13;
          }
          if (v5)
          {
            v6 = 5;
LABEL_13:
            (*(void (**)(void))(*v5 + 8 * v6))();
          }
        }
        if (*(char *)(v3 - 49) < 0)
          operator delete(*(void **)(v3 - 72));
        v3 -= 72;
        if (v3 == v2)
        {
          v4 = *(void **)(v1 - 24);
          break;
        }
      }
    }
    *(_QWORD *)(v1 - 16) = v2;
    operator delete(v4);
LABEL_18:
    v7 = (void **)(v1 - 56);
    if (*(char *)(v1 - 33) < 0)
      operator delete(*v7);
    v1 -= 56;
  }
  while (v7 != (void **)v0);
LABEL_2:
  qword_253D372C0 = v0;
}

void _GLOBAL__sub_I_ResetReasonEncoder_cpp()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  std::string *v5;
  char **v6;
  __int128 v7;
  char **v8;
  std::string::value_type v9;
  char *v10;
  char *v11;
  int64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  void **v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *__p[2];
  char v59;
  int v60;
  _BYTE v61[24];
  _BYTE *v62;
  char v63;
  void *v64[2];
  char v65;
  int v66;
  _BYTE v67[24];
  _BYTE *v68;
  char v69;
  void *v70;
  __int128 v71;
  int v72;
  _QWORD v73[2];
  _QWORD *v74;
  char v75;
  void *v76[3];
  int v77;
  _BYTE v78[24];
  _BYTE *v79;
  char v80;
  void *v81;
  __int128 v82;
  int v83;
  _BYTE v84[9];
  _BYTE *v85;
  char v86;
  void *v87;
  __int128 v88;
  int v89;
  _BYTE v90[24];
  _BYTE *v91;
  char v92;
  void *v93;
  __int128 v94;
  int v95;
  _BYTE v96[9];
  _BYTE *v97;
  char v98;
  void *v99;
  __int128 v100;
  int v101;
  _BYTE v102[24];
  _BYTE *v103;
  char v104;
  void *v105;
  __int128 v106;
  int v107;
  _BYTE v108[24];
  _BYTE *v109;
  char v110;
  void *v111;
  uint64_t v112;
  unint64_t v113;
  int v114;
  _BYTE v115[24];
  _BYTE *v116;
  char v117;
  void *v118;
  __int128 v119;
  int v120;
  _BYTE v121[24];
  _BYTE *v122;
  char v123;
  void *v124;
  __int128 v125;
  int v126;
  char v127;
  char *v128;
  char v129;
  void *v130[3];
  int v131;
  _BYTE v132[24];
  _BYTE *v133;
  char v134;
  void *v135[2];
  char v136;
  int v137;
  _BYTE v138[24];
  _BYTE *v139;
  char v140;
  char *v141;
  __int128 v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  __int128 v148;
  char v149;
  uint64_t v150[3];
  char *v151;
  __int128 v152;
  char v153;
  uint64_t v154;
  char *v155;
  __int128 v156;
  char v157;
  uint64_t v158[3];
  char *v159;
  __int128 v160;
  char v161;
  uint64_t v162;
  char *v163;
  __int128 v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  __int128 v177;
  char v178;
  _QWORD v179[6];
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  __int128 v185;
  char v186;
  uint64_t v187[3];
  char v188[23];
  __int16 v189;
  uint64_t v190[3];
  char v191[23];
  __int16 v192;
  uint64_t v193[3];
  uint64_t v194;

  v194 = *MEMORY[0x24BDAC8D0];
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&_MergedGlobals_3, "com.apple.telephony.abm", "ResetReasonEncoder");
  v141 = (char *)operator new(0x48uLL);
  v142 = xmmword_212B550B0;
  strcpy(v141, "AP forced coredump via SPMI - Please analyze reason from AP perspective");
  v143 = 0;
  v146 = 0;
  v144 = 0;
  v145 = 0;
  v147 = (char *)operator new(0x60uLL);
  v148 = xmmword_212B550C0;
  strcpy(v147, "ARI_CLI_ERR - All transaction IDs exhausted for msg\\(.*\\), for client\\(0[xX][0-9a-fA-F]+\\)");
  v149 = 1;
  strcpy((char *)v130, "(msg\\(|\\), for client)");
  HIBYTE(v130[2]) = 22;
  v131 = 0;
  v132[0] = 0;
  v134 = 0;
  v136 = 12;
  strcpy((char *)v135, "for client\\(");
  v137 = 2;
  v138[0] = 0;
  v140 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v150, (uint64_t)v130, 2uLL);
  v151 = (char *)operator new(0x50uLL);
  v152 = xmmword_212B550D0;
  strcpy(v151, "ARI_CLI_ERR - Tracking receipt of unrecognized transaction 0[xX][0-9a-fA-F]+");
  v153 = 2;
  v124 = operator new(0x40uLL);
  v125 = xmmword_212B550E0;
  strcpy((char *)v124, "ARI_CLI_ERR - Tracking receipt of unrecognized transaction ");
  v126 = 2;
  v127 = 0;
  v129 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](&v154, (uint64_t)&v124, 1uLL);
  v155 = (char *)operator new(0xA8uLL);
  v156 = xmmword_212B550F0;
  strcpy(v155, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\([0-9]+\\) TRX\\(0x[0-9a-f]+\\) AP\\.SEQ\\(0x[0-9a-f]+\\).*");
  v157 = 3;
  v87 = operator new(0xB0uLL);
  v88 = xmmword_212B55100;
  strcpy((char *)v87, "(ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\(([a-zA-Z]+\\.){0,}|\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\([0-9]+\\) TRX\\(0x[0-9a-f]+\\) AP\\.SEQ\\(0x[0-9a-f]+\\).*)");
  v89 = 0;
  v90[0] = 0;
  v92 = 0;
  v93 = operator new(0x68uLL);
  v94 = xmmword_212B55110;
  strcpy((char *)v93, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\(|-[0-9a-fA-F]+\\).*");
  v95 = 1;
  v96[0] = 0;
  v98 = 0;
  v99 = operator new(0x60uLL);
  v100 = xmmword_212B55120;
  strcpy((char *)v99, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-|\\).*");
  v101 = 2;
  v102[0] = 0;
  v104 = 0;
  v105 = operator new(0xA0uLL);
  v106 = xmmword_212B55130;
  strcpy((char *)v105, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\(|\\) TRX\\(0x[0-9a-f]+\\) AP\\.SEQ\\(0x[0-9a-f]+\\).*");
  v107 = 1;
  v108[0] = 0;
  v110 = 0;
  v113 = 0x8000000000000098;
  v111 = operator new(0x98uLL);
  v112 = 151;
  strcpy((char *)v111, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\([0-9]+\\) TRX\\(|\\) AP\\.SEQ\\(0x[0-9a-f]+\\).*");
  v114 = 2;
  v115[0] = 0;
  v117 = 0;
  v118 = operator new(0x98uLL);
  v119 = xmmword_212B55140;
  strcpy((char *)v118, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\([0-9]+\\) TRX\\(0x[0-9a-f]+\\) AP\\.SEQ\\(|\\).*");
  v120 = 2;
  v121[0] = 0;
  v123 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v158, (uint64_t)&v87, 6uLL);
  v159 = (char *)operator new(0x40uLL);
  v160 = xmmword_212B55150;
  strcpy(v159, "Baseband got stuck in data context .* state: resetting baseband");
  v161 = 4;
  v81 = operator new(0x48uLL);
  v82 = xmmword_212B55160;
  strcpy((char *)v81, "(Baseband got stuck in data context | state: resetting baseband)");
  v83 = 0;
  v84[0] = 0;
  v86 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](&v162, (uint64_t)&v81, 1uLL);
  v163 = (char *)operator new(0x20uLL);
  v164 = xmmword_212B52FE0;
  strcpy(v163, "Baseband ARI engage timeout");
  v165 = 5;
  v168 = 0;
  v166 = 0;
  v167 = 0;
  v0 = (char *)operator new(0x38uLL);
  v171 = 0x8000000000000038;
  v169 = v0;
  v170 = 55;
  strcpy(v0, "Failed to open transport to communicate with baseband.*");
  v172 = 6;
  v175 = 0;
  v173 = 0;
  v174 = 0;
  v176 = (char *)operator new(0x20uLL);
  v177 = xmmword_212B55170;
  strcpy(v176, "PCI-EVENT: pci error: .*");
  v178 = 7;
  strcpy((char *)v76, "PCI-EVENT: pci error: ");
  HIBYTE(v76[2]) = 22;
  v77 = 0;
  v78[0] = 0;
  v80 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v179, (uint64_t)v76, 1uLL);
  v1 = (char *)operator new(0x40uLL);
  v179[5] = 0x8000000000000040;
  v179[3] = v1;
  v179[4] = 62;
  strcpy(v1, "filesystem flush operation failed -- check ARI and BB state --");
  v180 = 8;
  v183 = 0;
  v181 = 0;
  v182 = 0;
  v184 = (char *)operator new(0x20uLL);
  v185 = xmmword_212B52FF0;
  strcpy(v184, "modem boot up failure \\[.+\\]");
  v186 = 9;
  v70 = operator new(0x19uLL);
  v71 = xmmword_212B50730;
  strcpy((char *)v70, "BBUpdater error  [0-9]+");
  v72 = 1;
  v73[0] = off_24CE832E8;
  v74 = v73;
  v75 = 1;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v187, (uint64_t)&v70, 1uLL);
  v189 = 2574;
  strcpy(v188, "^\\[abmtool\\].*");
  v65 = 13;
  strcpy((char *)v64, "^\\[abmtool\\] ");
  v66 = 0;
  v67[0] = 0;
  v69 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v190, (uint64_t)v64, 1uLL);
  v192 = 2829;
  strcpy(v191, "^\\[bbutil\\].*");
  v59 = 12;
  strcpy((char *)__p, "^\\[bbutil\\] ");
  v60 = 0;
  v61[0] = 0;
  v63 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v193, (uint64_t)__p, 1uLL);
  qword_253D372B8 = 0;
  qword_253D372C0 = 0;
  qword_253D372C8 = 0;
  v2 = 0;
  qword_253D372B8 = (uint64_t)operator new(0x2A0uLL);
  qword_253D372C0 = qword_253D372B8;
  qword_253D372C8 = qword_253D372B8 + 672;
  v4 = &v194;
  v57 = qword_253D372B8;
  v5 = (std::string *)qword_253D372B8;
  do
  {
    v6 = &(&v141)[7 * v2];
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *v6, (std::string::size_type)v6[1]);
    }
    else
    {
      v7 = *(_OWORD *)v6;
      v5->__r_.__value_.__r.__words[2] = (std::string::size_type)v6[2];
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v7;
    }
    v8 = &(&v141)[7 * v2];
    v9 = *((_BYTE *)v8 + 24);
    v5[1].__r_.__value_.__l.__size_ = 0;
    v5[1].__r_.__value_.__s.__data_[0] = v9;
    v5[1].__r_.__value_.__r.__words[2] = 0;
    v5[2].__r_.__value_.__r.__words[0] = 0;
    v11 = v8[4];
    v10 = v8[5];
    v12 = v10 - v11;
    if (v10 != v11)
    {
      v13 = 0x8E38E38E38E38E39 * (v12 >> 3);
      if (v13 >= 0x38E38E38E38E38FLL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = operator new(v12);
      v15 = 0;
      v5[1].__r_.__value_.__l.__size_ = (std::string::size_type)v14;
      v5[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v14;
      v5[2].__r_.__value_.__r.__words[0] = (std::string::size_type)&v14[72 * v13];
      while (1)
      {
        v17 = (std::string *)&v14[v15];
        v18 = &v11[v15];
        if (v11[v15 + 23] < 0)
        {
          std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
        }
        else
        {
          v19 = *(_OWORD *)v18;
          v17->__r_.__value_.__r.__words[2] = *((_QWORD *)v18 + 2);
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
        }
        v20 = &v14[v15];
        v21 = &v11[v15];
        *((_DWORD *)v20 + 6) = *(_DWORD *)&v11[v15 + 24];
        v14[v15 + 32] = 0;
        v3 = (uint64_t)&v14[v15 + 32];
        v20[64] = 0;
        if (!v11[v15 + 64])
          goto LABEL_13;
        v22 = (char *)*((_QWORD *)v21 + 7);
        if (v22)
        {
          if (v21 + 32 == v22)
          {
            *(_QWORD *)&v14[v15 + 56] = v3;
            (*(void (**)(char *))(*((_QWORD *)v21 + 4) + 24))(v21 + 32);
            goto LABEL_12;
          }
          v16 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v22 + 16))(v22, v3);
        }
        else
        {
          v16 = 0;
        }
        *(_QWORD *)&v14[v15 + 56] = v16;
LABEL_12:
        v20[64] = 1;
LABEL_13:
        v15 += 72;
        if (&v11[v15] == v10)
        {
          v5[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v14[v15];
          break;
        }
      }
    }
    ++v2;
    v5 = (std::string *)(v57 + 56);
    v57 += 56;
  }
  while (v2 != 12);
  qword_253D372C0 = (uint64_t)v5;
  v23 = &v127;
  v25 = v96;
  v24 = v90;
  v27 = v108;
  v26 = v102;
  do
  {
    v28 = *(v4 - 3);
    if (!v28)
      goto LABEL_38;
    v29 = *(v4 - 2);
    v30 = (void *)*(v4 - 3);
    if (v29 != v28)
    {
      while (1)
      {
        if (*(_BYTE *)(v29 - 8))
        {
          v31 = *(_QWORD **)(v29 - 16);
          if ((_QWORD *)(v29 - 40) == v31)
          {
            v31 = (_QWORD *)(v29 - 40);
            v32 = 4;
            goto LABEL_33;
          }
          if (v31)
          {
            v32 = 5;
LABEL_33:
            (*(void (**)(_QWORD *))(*v31 + 8 * v32))(v31);
          }
        }
        if (*(char *)(v29 - 49) < 0)
          operator delete(*(void **)(v29 - 72));
        v29 -= 72;
        if (v29 == v28)
        {
          v30 = (void *)*(v4 - 3);
          break;
        }
      }
    }
    *(v4 - 2) = v28;
    operator delete(v30);
LABEL_38:
    v33 = (void **)(v4 - 7);
    if (*((char *)v4 - 33) < 0)
      operator delete(*v33);
    v4 -= 7;
  }
  while (v33 != (void **)&v141);
  v35 = v138;
  v34 = v132;
  v37 = v121;
  v36 = v115;
  v38 = v84;
  if (!v63)
    goto LABEL_46;
  v39 = v61;
  if (v62 == v61)
  {
    v40 = 4;
  }
  else
  {
    if (!v62)
      goto LABEL_46;
    v40 = 5;
    v39 = v62;
  }
  (*(void (**)(_QWORD *))(*v39 + 8 * v40))(v39);
LABEL_46:
  if (v59 < 0)
    operator delete(__p[0]);
  if (v69)
  {
    v41 = v67;
    if (v68 == v67)
    {
      v42 = 4;
    }
    else
    {
      if (!v68)
        goto LABEL_54;
      v42 = 5;
      v41 = v68;
    }
    (*(void (**)(_QWORD *))(*v41 + 8 * v42))(v41);
  }
LABEL_54:
  if (v65 < 0)
    operator delete(v64[0]);
  if (v75)
  {
    v43 = v73;
    if (v74 == v73)
    {
      v44 = 4;
    }
    else
    {
      if (!v74)
        goto LABEL_62;
      v44 = 5;
      v43 = v74;
    }
    (*(void (**)(_QWORD *))(*v43 + 8 * v44))(v43);
  }
LABEL_62:
  if (SHIBYTE(v71) < 0)
    operator delete(v70);
  if (v80)
  {
    v45 = v78;
    if (v79 == v78)
    {
      v46 = 4;
    }
    else
    {
      if (!v79)
        goto LABEL_70;
      v46 = 5;
      v45 = v79;
    }
    (*(void (**)(_QWORD *))(*v45 + 8 * v46))(v45);
  }
LABEL_70:
  if (SHIBYTE(v76[2]) < 0)
    operator delete(v76[0]);
  if (v86)
  {
    if (v85 == v84)
    {
      v47 = 4;
    }
    else
    {
      if (!v85)
        goto LABEL_78;
      v47 = 5;
      v38 = v85;
    }
    (*(void (**)(_QWORD *, uint64_t))(*v38 + 8 * v47))(v38, v3);
  }
LABEL_78:
  if (SHIBYTE(v82) < 0)
    operator delete(v81);
  if (v123)
  {
    if (v122 == v121)
    {
      v48 = 4;
    }
    else
    {
      if (!v122)
        goto LABEL_86;
      v48 = 5;
      v37 = v122;
    }
    (*(void (**)(_QWORD *, uint64_t))(*v37 + 8 * v48))(v37, v3);
  }
LABEL_86:
  if (SHIBYTE(v119) < 0)
    operator delete(v118);
  if (v117)
  {
    if (v116 == v115)
    {
      v49 = 4;
    }
    else
    {
      if (!v116)
        goto LABEL_94;
      v49 = 5;
      v36 = v116;
    }
    (*(void (**)(_QWORD *, uint64_t))(*v36 + 8 * v49))(v36, v3);
  }
LABEL_94:
  if (SHIBYTE(v113) < 0)
    operator delete(v111);
  if (v110)
  {
    if (v109 == v108)
    {
      v50 = 4;
    }
    else
    {
      if (!v109)
        goto LABEL_102;
      v50 = 5;
      v27 = v109;
    }
    (*(void (**)(_QWORD *, uint64_t))(*v27 + 8 * v50))(v27, v3);
  }
LABEL_102:
  if (SHIBYTE(v106) < 0)
    operator delete(v105);
  if (v104)
  {
    if (v103 == v102)
    {
      v51 = 4;
    }
    else
    {
      if (!v103)
        goto LABEL_110;
      v51 = 5;
      v26 = v103;
    }
    (*(void (**)(_QWORD *, uint64_t))(*v26 + 8 * v51))(v26, v3);
  }
LABEL_110:
  if (SHIBYTE(v100) < 0)
    operator delete(v99);
  if (v98)
  {
    if (v97 == v96)
    {
      v52 = 4;
    }
    else
    {
      if (!v97)
        goto LABEL_118;
      v52 = 5;
      v25 = v97;
    }
    (*(void (**)(_QWORD *, uint64_t))(*v25 + 8 * v52))(v25, v3);
  }
LABEL_118:
  if (SHIBYTE(v94) < 0)
    operator delete(v93);
  if (v92)
  {
    if (v91 == v90)
    {
      v53 = 4;
    }
    else
    {
      if (!v91)
        goto LABEL_126;
      v53 = 5;
      v24 = v91;
    }
    (*(void (**)(_QWORD *, uint64_t))(*v24 + 8 * v53))(v24, v3);
  }
LABEL_126:
  if (SHIBYTE(v88) < 0)
    operator delete(v87);
  if (v129)
  {
    if (v128 == &v127)
    {
      v54 = 4;
    }
    else
    {
      if (!v128)
        goto LABEL_134;
      v54 = 5;
      v23 = v128;
    }
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v23 + 8 * v54))(v23, v3);
  }
LABEL_134:
  if (SHIBYTE(v125) < 0)
    operator delete(v124);
  if (v140)
  {
    if (v139 == v138)
    {
      v55 = 4;
    }
    else
    {
      if (!v139)
        goto LABEL_142;
      v55 = 5;
      v35 = v139;
    }
    (*(void (**)(_QWORD *, uint64_t))(*v35 + 8 * v55))(v35, v3);
  }
LABEL_142:
  if (v136 < 0)
    operator delete(v135[0]);
  if (v134)
  {
    if (v133 == v132)
    {
      v56 = 4;
    }
    else
    {
      if (!v133)
        goto LABEL_150;
      v56 = 5;
      v34 = v133;
    }
    (*(void (**)(_QWORD *, uint64_t))(*v34 + 8 * v56))(v34, v3);
  }
LABEL_150:
  if (SHIBYTE(v130[2]) < 0)
    operator delete(v130[0]);
}

void sub_212AF5EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,_QWORD *a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,_QWORD *a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  _QWORD *a66;
  char a67;
  void *a68;
  char a72;
  _QWORD *a73;
  char a74;
  void *a75;
  char a76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  void *v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;

  v78 = a15;
  v77 = a16;
  v80 = a22;
  v79 = a23;
  v81 = STACK[0x740];
  if (!STACK[0x740])
  {
    if ((SLOBYTE(STACK[0x737]) & 0x80000000) == 0)
      goto LABEL_3;
    goto LABEL_40;
  }
  v93 = STACK[0x748];
  v94 = (void *)STACK[0x740];
  if (STACK[0x748] == v81)
  {
LABEL_39:
    STACK[0x748] = v81;
    operator delete(v94);
    if ((SLOBYTE(STACK[0x737]) & 0x80000000) == 0)
    {
LABEL_3:
      v82 = STACK[0x708];
      if (!STACK[0x708])
        goto LABEL_4;
LABEL_41:
      v97 = STACK[0x710];
      v98 = (void *)v82;
      if (STACK[0x710] == v82)
      {
LABEL_53:
        STACK[0x710] = v82;
        operator delete(v98);
        if ((SLOBYTE(STACK[0x6FF]) & 0x80000000) == 0)
        {
LABEL_5:
          v83 = STACK[0x6D0];
          if (!STACK[0x6D0])
            goto LABEL_6;
LABEL_55:
          v101 = STACK[0x6D8];
          v102 = (void *)v83;
          if (STACK[0x6D8] == v83)
          {
LABEL_67:
            STACK[0x6D8] = v83;
            operator delete(v102);
            if ((SLOBYTE(STACK[0x6C7]) & 0x80000000) == 0)
            {
LABEL_7:
              v84 = STACK[0x698];
              if (!STACK[0x698])
                goto LABEL_8;
LABEL_69:
              v105 = STACK[0x6A0];
              v106 = (void *)v84;
              if (STACK[0x6A0] == v84)
              {
LABEL_81:
                STACK[0x6A0] = v84;
                operator delete(v106);
                if ((SLOBYTE(STACK[0x68F]) & 0x80000000) == 0)
                {
LABEL_9:
                  v85 = STACK[0x660];
                  if (!STACK[0x660])
                    goto LABEL_10;
LABEL_83:
                  v109 = STACK[0x668];
                  v110 = (void *)v85;
                  if (STACK[0x668] == v85)
                  {
LABEL_95:
                    STACK[0x668] = v85;
                    operator delete(v110);
                    if ((SLOBYTE(STACK[0x657]) & 0x80000000) == 0)
                    {
LABEL_11:
                      v86 = STACK[0x628];
                      if (!STACK[0x628])
                        goto LABEL_12;
LABEL_97:
                      v113 = STACK[0x630];
                      v114 = (void *)v86;
                      if (STACK[0x630] == v86)
                      {
LABEL_109:
                        STACK[0x630] = v86;
                        operator delete(v114);
                        if ((SLOBYTE(STACK[0x61F]) & 0x80000000) == 0)
                        {
LABEL_13:
                          v87 = STACK[0x5F0];
                          if (!STACK[0x5F0])
                            goto LABEL_14;
LABEL_111:
                          v117 = STACK[0x5F8];
                          v118 = (void *)v87;
                          if (STACK[0x5F8] == v87)
                          {
LABEL_123:
                            STACK[0x5F8] = v87;
                            operator delete(v118);
                            if ((SLOBYTE(STACK[0x5E7]) & 0x80000000) == 0)
                            {
LABEL_15:
                              v88 = STACK[0x5B8];
                              if (!STACK[0x5B8])
                                goto LABEL_16;
LABEL_125:
                              v121 = STACK[0x5C0];
                              v122 = (void *)v88;
                              if (STACK[0x5C0] == v88)
                              {
LABEL_137:
                                STACK[0x5C0] = v88;
                                operator delete(v122);
                                if ((SLOBYTE(STACK[0x5AF]) & 0x80000000) == 0)
                                {
LABEL_17:
                                  v89 = STACK[0x580];
                                  if (!STACK[0x580])
                                    goto LABEL_18;
LABEL_139:
                                  v125 = STACK[0x588];
                                  v126 = (void *)v89;
                                  if (STACK[0x588] == v89)
                                  {
LABEL_151:
                                    STACK[0x588] = v89;
                                    operator delete(v126);
                                    if ((SLOBYTE(STACK[0x577]) & 0x80000000) == 0)
                                    {
LABEL_19:
                                      v90 = STACK[0x548];
                                      if (!STACK[0x548])
                                        goto LABEL_20;
LABEL_153:
                                      v129 = STACK[0x550];
                                      v130 = (void *)v90;
                                      if (STACK[0x550] == v90)
                                      {
LABEL_165:
                                        STACK[0x550] = v90;
                                        operator delete(v130);
                                        if ((SLOBYTE(STACK[0x53F]) & 0x80000000) == 0)
                                        {
LABEL_21:
                                          v91 = STACK[0x510];
                                          if (!STACK[0x510])
                                            goto LABEL_22;
LABEL_167:
                                          v133 = STACK[0x518];
                                          v134 = (void *)v91;
                                          if (STACK[0x518] == v91)
                                          {
LABEL_179:
                                            STACK[0x518] = v91;
                                            operator delete(v134);
                                            if ((SLOBYTE(STACK[0x507]) & 0x80000000) == 0)
                                            {
LABEL_23:
                                              v92 = STACK[0x4D8];
                                              if (!STACK[0x4D8])
                                                goto LABEL_24;
LABEL_181:
                                              v137 = STACK[0x4E0];
                                              v138 = (void *)v92;
                                              if (STACK[0x4E0] == v92)
                                              {
LABEL_193:
                                                STACK[0x4E0] = v92;
                                                operator delete(v138);
                                                if ((SLOBYTE(STACK[0x4CF]) & 0x80000000) == 0)
                                                {
LABEL_25:
                                                  if (!a43)
                                                    goto LABEL_200;
                                                  goto LABEL_195;
                                                }
LABEL_194:
                                                operator delete((void *)STACK[0x4B8]);
                                                if (!a43)
                                                  goto LABEL_200;
LABEL_195:
                                                if (a42 == a10)
                                                {
                                                  v141 = 4;
                                                }
                                                else
                                                {
                                                  if (!a42)
                                                    goto LABEL_200;
                                                  v141 = 5;
                                                  a10 = a42;
                                                }
                                                (*(void (**)(void))(*a10 + 8 * v141))();
LABEL_200:
                                                if (a37 < 0)
                                                  operator delete(a32);
                                                if (a55)
                                                {
                                                  if (a54 == a11)
                                                  {
                                                    v142 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!a54)
                                                      goto LABEL_208;
                                                    v142 = 5;
                                                    a11 = a54;
                                                  }
                                                  (*(void (**)(void))(*a11 + 8 * v142))();
                                                }
LABEL_208:
                                                if (a49 < 0)
                                                  operator delete(a44);
                                                if (a67)
                                                {
                                                  if (a66 == a12)
                                                  {
                                                    v143 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!a66)
                                                      goto LABEL_216;
                                                    v143 = 5;
                                                    a12 = a66;
                                                  }
                                                  (*(void (**)(void))(*a12 + 8 * v143))();
                                                }
LABEL_216:
                                                if (a61 < 0)
                                                  operator delete(a56);
                                                if (a74)
                                                {
                                                  if (a73 == a13)
                                                  {
                                                    v144 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!a73)
                                                      goto LABEL_224;
                                                    v144 = 5;
                                                    a13 = a73;
                                                  }
                                                  (*(void (**)(void))(*a13 + 8 * v144))();
                                                }
LABEL_224:
                                                if (a72 < 0)
                                                  operator delete(a68);
                                                if (LOBYTE(STACK[0x220]))
                                                {
                                                  if ((_QWORD *)STACK[0x218] == a17)
                                                  {
                                                    v145 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!STACK[0x218])
                                                      goto LABEL_232;
                                                    v145 = 5;
                                                    a17 = (_QWORD *)STACK[0x218];
                                                  }
                                                  (*(void (**)(void))(*a17 + 8 * v145))();
                                                }
LABEL_232:
                                                if (a76 < 0)
                                                  operator delete(a75);
                                                if (LOBYTE(STACK[0x3D0]))
                                                {
                                                  if ((_QWORD *)STACK[0x3C8] == a18)
                                                  {
                                                    v146 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!STACK[0x3C8])
                                                      goto LABEL_240;
                                                    v146 = 5;
                                                    a18 = (_QWORD *)STACK[0x3C8];
                                                  }
                                                  (*(void (**)(void))(*a18 + 8 * v146))();
                                                }
LABEL_240:
                                                if (SLOBYTE(STACK[0x3A7]) < 0)
                                                  operator delete((void *)STACK[0x390]);
                                                if (LOBYTE(STACK[0x388]))
                                                {
                                                  if ((_QWORD *)STACK[0x380] == a19)
                                                  {
                                                    v147 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!STACK[0x380])
                                                      goto LABEL_248;
                                                    v147 = 5;
                                                    a19 = (_QWORD *)STACK[0x380];
                                                  }
                                                  (*(void (**)(void))(*a19 + 8 * v147))();
                                                }
LABEL_248:
                                                if (SLOBYTE(STACK[0x35F]) < 0)
                                                  operator delete((void *)STACK[0x348]);
                                                if (LOBYTE(STACK[0x340]))
                                                {
                                                  if ((_QWORD *)STACK[0x338] == a20)
                                                  {
                                                    v148 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!STACK[0x338])
                                                      goto LABEL_256;
                                                    v148 = 5;
                                                    a20 = (_QWORD *)STACK[0x338];
                                                  }
                                                  (*(void (**)(void))(*a20 + 8 * v148))();
                                                }
LABEL_256:
                                                if (SLOBYTE(STACK[0x317]) < 0)
                                                  operator delete((void *)STACK[0x300]);
                                                if (LOBYTE(STACK[0x2F8]))
                                                {
                                                  if ((_QWORD *)STACK[0x2F0] == a21)
                                                  {
                                                    v149 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!STACK[0x2F0])
                                                      goto LABEL_264;
                                                    v149 = 5;
                                                    a21 = (_QWORD *)STACK[0x2F0];
                                                  }
                                                  (*(void (**)(void))(*a21 + 8 * v149))();
                                                }
LABEL_264:
                                                if (SLOBYTE(STACK[0x2CF]) < 0)
                                                  operator delete((void *)STACK[0x2B8]);
                                                if (LOBYTE(STACK[0x2B0]))
                                                {
                                                  if ((_QWORD *)STACK[0x2A8] == a22)
                                                  {
                                                    v150 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!STACK[0x2A8])
                                                      goto LABEL_272;
                                                    v150 = 5;
                                                    v80 = (_QWORD *)STACK[0x2A8];
                                                  }
                                                  (*(void (**)(_QWORD *))(*v80 + 8 * v150))(v80);
                                                }
LABEL_272:
                                                if (SLOBYTE(STACK[0x287]) < 0)
                                                  operator delete((void *)STACK[0x270]);
                                                if (LOBYTE(STACK[0x268]))
                                                {
                                                  if ((_QWORD *)STACK[0x260] == a23)
                                                  {
                                                    v151 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!STACK[0x260])
                                                      goto LABEL_280;
                                                    v151 = 5;
                                                    v79 = (_QWORD *)STACK[0x260];
                                                  }
                                                  (*(void (**)(_QWORD *))(*v79 + 8 * v151))(v79);
                                                }
LABEL_280:
                                                if (SLOBYTE(STACK[0x23F]) < 0)
                                                  operator delete((void *)STACK[0x228]);
                                                if (LOBYTE(STACK[0x418]))
                                                {
                                                  v152 = a14;
                                                  if ((_QWORD *)STACK[0x410] == a14)
                                                  {
                                                    v153 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!STACK[0x410])
                                                      goto LABEL_288;
                                                    v153 = 5;
                                                    v152 = (_QWORD *)STACK[0x410];
                                                  }
                                                  (*(void (**)(void))(*v152 + 8 * v153))();
                                                }
LABEL_288:
                                                if (SLOBYTE(STACK[0x3EF]) < 0)
                                                  operator delete((void *)STACK[0x3D8]);
                                                if (LOBYTE(STACK[0x4A8]))
                                                {
                                                  if ((_QWORD *)STACK[0x4A0] == a15)
                                                  {
                                                    v154 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!STACK[0x4A0])
                                                      goto LABEL_296;
                                                    v154 = 5;
                                                    v78 = (_QWORD *)STACK[0x4A0];
                                                  }
                                                  (*(void (**)(_QWORD *))(*v78 + 8 * v154))(v78);
                                                }
LABEL_296:
                                                if (SLOBYTE(STACK[0x47F]) < 0)
                                                  operator delete((void *)STACK[0x468]);
                                                if (LOBYTE(STACK[0x460]))
                                                {
                                                  if ((_QWORD *)STACK[0x458] == a16)
                                                  {
                                                    v155 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!STACK[0x458])
                                                      goto LABEL_304;
                                                    v155 = 5;
                                                    v77 = (_QWORD *)STACK[0x458];
                                                  }
                                                  (*(void (**)(_QWORD *))(*v77 + 8 * v155))(v77);
                                                }
LABEL_304:
                                                if (SLOBYTE(STACK[0x437]) < 0)
                                                  operator delete((void *)STACK[0x420]);
                                                _Unwind_Resume(a1);
                                              }
                                              while (1)
                                              {
                                                if (*(_BYTE *)(v137 - 8))
                                                {
                                                  v139 = *(_QWORD **)(v137 - 16);
                                                  if ((_QWORD *)(v137 - 40) == v139)
                                                  {
                                                    v139 = (_QWORD *)(v137 - 40);
                                                    v140 = 4;
                                                    goto LABEL_189;
                                                  }
                                                  if (v139)
                                                  {
                                                    v140 = 5;
LABEL_189:
                                                    (*(void (**)(void))(*v139 + 8 * v140))();
                                                  }
                                                }
                                                if (*(char *)(v137 - 49) < 0)
                                                  operator delete(*(void **)(v137 - 72));
                                                v137 -= 72;
                                                if (v137 == v92)
                                                {
                                                  v138 = (void *)STACK[0x4D8];
                                                  goto LABEL_193;
                                                }
                                              }
                                            }
LABEL_180:
                                            operator delete((void *)STACK[0x4F0]);
                                            v92 = STACK[0x4D8];
                                            if (!STACK[0x4D8])
                                            {
LABEL_24:
                                              if ((SLOBYTE(STACK[0x4CF]) & 0x80000000) == 0)
                                                goto LABEL_25;
                                              goto LABEL_194;
                                            }
                                            goto LABEL_181;
                                          }
                                          while (1)
                                          {
                                            if (*(_BYTE *)(v133 - 8))
                                            {
                                              v135 = *(_QWORD **)(v133 - 16);
                                              if ((_QWORD *)(v133 - 40) == v135)
                                              {
                                                v135 = (_QWORD *)(v133 - 40);
                                                v136 = 4;
                                                goto LABEL_175;
                                              }
                                              if (v135)
                                              {
                                                v136 = 5;
LABEL_175:
                                                (*(void (**)(void))(*v135 + 8 * v136))();
                                              }
                                            }
                                            if (*(char *)(v133 - 49) < 0)
                                              operator delete(*(void **)(v133 - 72));
                                            v133 -= 72;
                                            if (v133 == v91)
                                            {
                                              v134 = (void *)STACK[0x510];
                                              goto LABEL_179;
                                            }
                                          }
                                        }
LABEL_166:
                                        operator delete((void *)STACK[0x528]);
                                        v91 = STACK[0x510];
                                        if (!STACK[0x510])
                                        {
LABEL_22:
                                          if ((SLOBYTE(STACK[0x507]) & 0x80000000) == 0)
                                            goto LABEL_23;
                                          goto LABEL_180;
                                        }
                                        goto LABEL_167;
                                      }
                                      while (1)
                                      {
                                        if (*(_BYTE *)(v129 - 8))
                                        {
                                          v131 = *(_QWORD **)(v129 - 16);
                                          if ((_QWORD *)(v129 - 40) == v131)
                                          {
                                            v131 = (_QWORD *)(v129 - 40);
                                            v132 = 4;
                                            goto LABEL_161;
                                          }
                                          if (v131)
                                          {
                                            v132 = 5;
LABEL_161:
                                            (*(void (**)(void))(*v131 + 8 * v132))();
                                          }
                                        }
                                        if (*(char *)(v129 - 49) < 0)
                                          operator delete(*(void **)(v129 - 72));
                                        v129 -= 72;
                                        if (v129 == v90)
                                        {
                                          v130 = (void *)STACK[0x548];
                                          goto LABEL_165;
                                        }
                                      }
                                    }
LABEL_152:
                                    operator delete((void *)STACK[0x560]);
                                    v90 = STACK[0x548];
                                    if (!STACK[0x548])
                                    {
LABEL_20:
                                      if ((SLOBYTE(STACK[0x53F]) & 0x80000000) == 0)
                                        goto LABEL_21;
                                      goto LABEL_166;
                                    }
                                    goto LABEL_153;
                                  }
                                  while (1)
                                  {
                                    if (*(_BYTE *)(v125 - 8))
                                    {
                                      v127 = *(_QWORD **)(v125 - 16);
                                      if ((_QWORD *)(v125 - 40) == v127)
                                      {
                                        v127 = (_QWORD *)(v125 - 40);
                                        v128 = 4;
                                        goto LABEL_147;
                                      }
                                      if (v127)
                                      {
                                        v128 = 5;
LABEL_147:
                                        (*(void (**)(void))(*v127 + 8 * v128))();
                                      }
                                    }
                                    if (*(char *)(v125 - 49) < 0)
                                      operator delete(*(void **)(v125 - 72));
                                    v125 -= 72;
                                    if (v125 == v89)
                                    {
                                      v126 = (void *)STACK[0x580];
                                      goto LABEL_151;
                                    }
                                  }
                                }
LABEL_138:
                                operator delete((void *)STACK[0x598]);
                                v89 = STACK[0x580];
                                if (!STACK[0x580])
                                {
LABEL_18:
                                  if ((SLOBYTE(STACK[0x577]) & 0x80000000) == 0)
                                    goto LABEL_19;
                                  goto LABEL_152;
                                }
                                goto LABEL_139;
                              }
                              while (1)
                              {
                                if (*(_BYTE *)(v121 - 8))
                                {
                                  v123 = *(_QWORD **)(v121 - 16);
                                  if ((_QWORD *)(v121 - 40) == v123)
                                  {
                                    v123 = (_QWORD *)(v121 - 40);
                                    v124 = 4;
                                    goto LABEL_133;
                                  }
                                  if (v123)
                                  {
                                    v124 = 5;
LABEL_133:
                                    (*(void (**)(void))(*v123 + 8 * v124))();
                                  }
                                }
                                if (*(char *)(v121 - 49) < 0)
                                  operator delete(*(void **)(v121 - 72));
                                v121 -= 72;
                                if (v121 == v88)
                                {
                                  v122 = (void *)STACK[0x5B8];
                                  goto LABEL_137;
                                }
                              }
                            }
LABEL_124:
                            operator delete((void *)STACK[0x5D0]);
                            v88 = STACK[0x5B8];
                            if (!STACK[0x5B8])
                            {
LABEL_16:
                              if ((SLOBYTE(STACK[0x5AF]) & 0x80000000) == 0)
                                goto LABEL_17;
                              goto LABEL_138;
                            }
                            goto LABEL_125;
                          }
                          while (1)
                          {
                            if (*(_BYTE *)(v117 - 8))
                            {
                              v119 = *(_QWORD **)(v117 - 16);
                              if ((_QWORD *)(v117 - 40) == v119)
                              {
                                v119 = (_QWORD *)(v117 - 40);
                                v120 = 4;
                                goto LABEL_119;
                              }
                              if (v119)
                              {
                                v120 = 5;
LABEL_119:
                                (*(void (**)(void))(*v119 + 8 * v120))();
                              }
                            }
                            if (*(char *)(v117 - 49) < 0)
                              operator delete(*(void **)(v117 - 72));
                            v117 -= 72;
                            if (v117 == v87)
                            {
                              v118 = (void *)STACK[0x5F0];
                              goto LABEL_123;
                            }
                          }
                        }
LABEL_110:
                        operator delete((void *)STACK[0x608]);
                        v87 = STACK[0x5F0];
                        if (!STACK[0x5F0])
                        {
LABEL_14:
                          if ((SLOBYTE(STACK[0x5E7]) & 0x80000000) == 0)
                            goto LABEL_15;
                          goto LABEL_124;
                        }
                        goto LABEL_111;
                      }
                      while (1)
                      {
                        if (*(_BYTE *)(v113 - 8))
                        {
                          v115 = *(_QWORD **)(v113 - 16);
                          if ((_QWORD *)(v113 - 40) == v115)
                          {
                            v115 = (_QWORD *)(v113 - 40);
                            v116 = 4;
                            goto LABEL_105;
                          }
                          if (v115)
                          {
                            v116 = 5;
LABEL_105:
                            (*(void (**)(void))(*v115 + 8 * v116))();
                          }
                        }
                        if (*(char *)(v113 - 49) < 0)
                          operator delete(*(void **)(v113 - 72));
                        v113 -= 72;
                        if (v113 == v86)
                        {
                          v114 = (void *)STACK[0x628];
                          goto LABEL_109;
                        }
                      }
                    }
LABEL_96:
                    operator delete((void *)STACK[0x640]);
                    v86 = STACK[0x628];
                    if (!STACK[0x628])
                    {
LABEL_12:
                      if ((SLOBYTE(STACK[0x61F]) & 0x80000000) == 0)
                        goto LABEL_13;
                      goto LABEL_110;
                    }
                    goto LABEL_97;
                  }
                  while (1)
                  {
                    if (*(_BYTE *)(v109 - 8))
                    {
                      v111 = *(_QWORD **)(v109 - 16);
                      if ((_QWORD *)(v109 - 40) == v111)
                      {
                        v111 = (_QWORD *)(v109 - 40);
                        v112 = 4;
                        goto LABEL_91;
                      }
                      if (v111)
                      {
                        v112 = 5;
LABEL_91:
                        (*(void (**)(void))(*v111 + 8 * v112))();
                      }
                    }
                    if (*(char *)(v109 - 49) < 0)
                      operator delete(*(void **)(v109 - 72));
                    v109 -= 72;
                    if (v109 == v85)
                    {
                      v110 = (void *)STACK[0x660];
                      goto LABEL_95;
                    }
                  }
                }
LABEL_82:
                operator delete((void *)STACK[0x678]);
                v85 = STACK[0x660];
                if (!STACK[0x660])
                {
LABEL_10:
                  if ((SLOBYTE(STACK[0x657]) & 0x80000000) == 0)
                    goto LABEL_11;
                  goto LABEL_96;
                }
                goto LABEL_83;
              }
              while (1)
              {
                if (*(_BYTE *)(v105 - 8))
                {
                  v107 = *(_QWORD **)(v105 - 16);
                  if ((_QWORD *)(v105 - 40) == v107)
                  {
                    v107 = (_QWORD *)(v105 - 40);
                    v108 = 4;
                    goto LABEL_77;
                  }
                  if (v107)
                  {
                    v108 = 5;
LABEL_77:
                    (*(void (**)(void))(*v107 + 8 * v108))();
                  }
                }
                if (*(char *)(v105 - 49) < 0)
                  operator delete(*(void **)(v105 - 72));
                v105 -= 72;
                if (v105 == v84)
                {
                  v106 = (void *)STACK[0x698];
                  goto LABEL_81;
                }
              }
            }
LABEL_68:
            operator delete((void *)STACK[0x6B0]);
            v84 = STACK[0x698];
            if (!STACK[0x698])
            {
LABEL_8:
              if ((SLOBYTE(STACK[0x68F]) & 0x80000000) == 0)
                goto LABEL_9;
              goto LABEL_82;
            }
            goto LABEL_69;
          }
          while (1)
          {
            if (*(_BYTE *)(v101 - 8))
            {
              v103 = *(_QWORD **)(v101 - 16);
              if ((_QWORD *)(v101 - 40) == v103)
              {
                v103 = (_QWORD *)(v101 - 40);
                v104 = 4;
                goto LABEL_63;
              }
              if (v103)
              {
                v104 = 5;
LABEL_63:
                (*(void (**)(void))(*v103 + 8 * v104))();
              }
            }
            if (*(char *)(v101 - 49) < 0)
              operator delete(*(void **)(v101 - 72));
            v101 -= 72;
            if (v101 == v83)
            {
              v102 = (void *)STACK[0x6D0];
              goto LABEL_67;
            }
          }
        }
LABEL_54:
        operator delete((void *)STACK[0x6E8]);
        v83 = STACK[0x6D0];
        if (!STACK[0x6D0])
        {
LABEL_6:
          if ((SLOBYTE(STACK[0x6C7]) & 0x80000000) == 0)
            goto LABEL_7;
          goto LABEL_68;
        }
        goto LABEL_55;
      }
      while (1)
      {
        if (*(_BYTE *)(v97 - 8))
        {
          v99 = *(_QWORD **)(v97 - 16);
          if ((_QWORD *)(v97 - 40) == v99)
          {
            v99 = (_QWORD *)(v97 - 40);
            v100 = 4;
            goto LABEL_49;
          }
          if (v99)
          {
            v100 = 5;
LABEL_49:
            (*(void (**)(void))(*v99 + 8 * v100))();
          }
        }
        if (*(char *)(v97 - 49) < 0)
          operator delete(*(void **)(v97 - 72));
        v97 -= 72;
        if (v97 == v82)
        {
          v98 = (void *)STACK[0x708];
          goto LABEL_53;
        }
      }
    }
LABEL_40:
    operator delete((void *)STACK[0x720]);
    v82 = STACK[0x708];
    if (!STACK[0x708])
    {
LABEL_4:
      if ((SLOBYTE(STACK[0x6FF]) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_54;
    }
    goto LABEL_41;
  }
  while (1)
  {
    if (*(_BYTE *)(v93 - 8))
    {
      v95 = *(_QWORD **)(v93 - 16);
      if ((_QWORD *)(v93 - 40) == v95)
      {
        v95 = (_QWORD *)(v93 - 40);
        v96 = 4;
        goto LABEL_35;
      }
      if (v95)
      {
        v96 = 5;
LABEL_35:
        (*(void (**)(void))(*v95 + 8 * v96))();
      }
    }
    if (*(char *)(v93 - 49) < 0)
      operator delete(*(void **)(v93 - 72));
    v93 -= 72;
    if (v93 == v81)
    {
      v94 = (void *)STACK[0x740];
      goto LABEL_39;
    }
  }
}

BBUEUR10FirmwareVersion *BBUFirmwareVersion::createFromVersionString(capabilities::updater *a1)
{
  BBUEUR10FirmwareVersion *v2;
  void *exception;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  switch(capabilities::updater::getFirmwareVersion(a1))
  {
    case 0u:
      v2 = (BBUEUR10FirmwareVersion *)operator new(0x60uLL);
      BBUEUR10FirmwareVersion::BBUEUR10FirmwareVersion(v2);
      goto LABEL_5;
    case 1u:
      v2 = (BBUEUR10FirmwareVersion *)operator new(0x60uLL);
      BBUEUR13FirmwareVersion::BBUEUR13FirmwareVersion(v2);
      goto LABEL_5;
    case 2u:
      v2 = (BBUEUR10FirmwareVersion *)operator new(0x60uLL);
      BBUEUR16FirmwareVersion::BBUEUR16FirmwareVersion(v2);
LABEL_5:
      if (((*(uint64_t (**)(BBUEUR10FirmwareVersion *, capabilities::updater *))(*(_QWORD *)v2 + 56))(v2, a1) & 1) != 0)return v2;
      (*(void (**)(BBUEUR10FirmwareVersion *))(*(_QWORD *)v2 + 8))(v2);
      return 0;
    case 3u:
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/FirmwareVersion/Common/BBUFirmwareVersion.cpp", 0x1Cu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized radio type.\")", v5, v6, v7, v8);
    default:
      return 0;
  }
}

void sub_212AF7154(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AF7168(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212AF717C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212AF7190(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void BBUEUR4Fusing::~BBUEUR4Fusing(void **this)
{
  *this = off_24CE82C48;
  if ((*((char *)this + 79) & 0x80000000) == 0)
  {
    if ((*((char *)this + 55) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(this[4]);
    return;
  }
  operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    goto LABEL_5;
}

{
  *this = off_24CE82C48;
  if (*((char *)this + 79) < 0)
  {
    operator delete(this[7]);
    if ((*((char *)this + 55) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(this[4]);
    operator delete(this);
    return;
  }
  if (*((char *)this + 55) < 0)
    goto LABEL_6;
LABEL_3:
  operator delete(this);
}

uint64_t BBUEUR4Fusing::verifyFuse(_BYTE *a1, char a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  TelephonyUtilLogBinaryToBuffer();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      goto LABEL_5;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v4 = (const char *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 32))(a1);
    _BBULog(13, 0, v4, "", "Verifying %d: %s  %u\n", v5, v6, v7, a2);
  }
LABEL_5:
  if (!a1[24])
    return 1;
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
  if ((ETLFusingVerifyQfpromFuse() & 1) != 0)
    return 1;
  if (gBBULogMaskGet(void)::once == -1)
  {
    result = 0;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      return result;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    result = 0;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      return result;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v9 = (const char *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 32))(a1);
    _BBULog(13, 0, v9, "", "ETLFusingVerifyQfpromFuse failed\n", v10, v11, v12, v13);
    return 0;
  }
  return result;
}

const char *BBUEUR4Fusing::getDebugName(BBUEUR4Fusing *this)
{
  return "BBUEUR4Fusing";
}

uint64_t BBUFDRUtilities::connect(uint64_t *a1, uint64_t *a2)
{
  BBUPartitionManager *v4;
  BBUPartitionManager *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  const __CFAllocator *v13;
  CFURLRef v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  __CFDictionary *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  char v24;
  std::string __p;
  void *value;
  uint64_t v27;
  std::string v28;
  std::string v29;
  std::string v30;
  CFStringRef v31;

  value = (void *)0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v4 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v5 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v5);
    v6 = operator new(0x20uLL);
    *v6 = &unk_24CE85728;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v5;
    v7 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v5;
    off_253D31E70 = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v4 = (BBUPartitionManager *)off_253D31E68;
  }
  v10 = (std::__shared_weak_count *)off_253D31E70;
  if (off_253D31E70)
  {
    v11 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFDRCacheLocation(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v28, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v28 = __p;
  v27 = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v29, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    v29 = v28;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v30, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  else
    v30 = v29;
  v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v31 = (CFStringRef)0xAAAAAAAAAAAAAAAALL;
  if (ctu::cf::convert_copy())
  {
    v14 = CFURLCreateWithString(v13, v31, 0);
    CFRelease(v31);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_22;
  }
  else
  {
    v14 = 0;
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_23;
      goto LABEL_29;
    }
  }
  operator delete(v30.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_23:
    value = v14;
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v29.__r_.__value_.__l.__data_);
  value = v14;
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
LABEL_31:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v10)
      goto LABEL_35;
    goto LABEL_32;
  }
LABEL_30:
  operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_31;
LABEL_25:
  if (!v10)
    goto LABEL_35;
LABEL_32:
  v15 = (unint64_t *)&v10->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_35:
    v17 = value;
    v18 = (__CFDictionary *)*a2;
    if (!value)
      goto LABEL_37;
    goto LABEL_36;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  v17 = value;
  v18 = (__CFDictionary *)*a2;
  if (value)
  {
LABEL_36:
    CFDictionaryAddValue(v18, CFSTR("DataDirectory"), v17);
    v18 = (__CFDictionary *)*a2;
  }
LABEL_37:
  CFDictionaryAddValue(v18, CFSTR("SignData"), (const void *)*MEMORY[0x24BDBD268]);
  if (v17)
    CFRelease(v17);
  v19 = AMFDRCreateWithOptions((uint64_t)v13, *a2);
  *a1 = v19;
  if (v19)
    return 0;
  if (gBBULogMaskGet(void)::once == -1)
  {
    result = 11;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      return result;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    result = 11;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      return result;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "failed creating reference to fdr\n", v20, v21, v22, v24);
    return 11;
  }
  return result;
}

void sub_212AF7814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, const void *a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef(&a20);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef(&a20);
    if ((a26 & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(a21);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t BBUFDRUtilities::copy(CFStringRef *a1, CFStringRef *a2, const void **a3, const void **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v11;
  CFStringRef v13;
  CFStringRef v14;
  const void *v15;
  capabilities::radio *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char Length;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const __CFAllocator *v26;
  CFStringRef v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CFTypeRef v33;
  const void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **p_p;
  char v40;
  char v41;
  void *__p;
  char v43;
  CFTypeRef cf;
  uint64_t v45[3];
  CFTypeRef v46;

  v11 = *a1;
  if (!v11 || !*a2 || !*a4)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
        return 2;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
        return 2;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
      _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "invalid arguments:  dataClass = %p, serial = %p, options = %p", a6, a7, a8, (char)*a1);
    return 2;
  }
  if (!CFStringGetLength(v11) || !CFStringGetLength(*a2))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
        goto LABEL_31;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
      {
LABEL_31:
        if ((gBBULogVerbosity & 0x80000000) == 0)
        {
          Length = CFStringGetLength(*a1);
          CFStringGetLength(*a2);
          _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "invalid field length:  dataClass = %li, serial = %li\n", v23, v24, v25, Length);
        }
      }
    }
    return 2;
  }
  v46 = 0;
  v13 = *a1;
  v45[2] = (uint64_t)v13;
  if (v13)
    CFRetain(v13);
  v14 = *a2;
  v45[1] = (uint64_t)v14;
  if (v14)
    CFRetain(v14);
  v15 = *a4;
  v45[0] = (uint64_t)v15;
  if (v15)
    CFRetain(v15);
  v16 = (capabilities::radio *)BBUFDRUtilities::connect((uint64_t *)&v46, v45);
  v20 = (uint64_t)v16;
  if (v15)
    CFRelease(v15);
  if (v14)
    CFRelease(v14);
  if (v13)
    CFRelease(v13);
  if (!(_DWORD)v20)
  {
    cf = 0;
    v26 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v41 = capabilities::radio::chipID(v16);
    v27 = CFStringCreateWithFormat(v26, 0, CFSTR("%08X-%@"));
    v28 = AMFDRDataCopy((uint64_t)v46, (uint64_t)*a1, (uint64_t)v27, (uint64_t)&cf);
    if (v27 && v28)
    {
      v33 = cf;
      v34 = *a3;
      *a3 = (const void *)v28;
      if (v34)
        CFRelease(v34);
      if (!v33)
      {
        v20 = 0;
LABEL_52:
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (v27)
          CFRelease(v27);
        goto LABEL_56;
      }
    }
    else
    {
      v35 = *a3;
      *a3 = (const void *)v28;
      if (v35)
        CFRelease(v35);
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
        goto LABEL_45;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
        goto LABEL_45;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "failed copying data from FDR\n", v30, v31, v32, v41);
      if (gBBULogMaskGet(void)::once != -1)
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        v20 = 11;
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
          goto LABEL_52;
        goto LABEL_46;
      }
    }
LABEL_45:
    v20 = 11;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      goto LABEL_52;
LABEL_46:
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      ctu::cf::show((ctu::cf *)cf, v29);
      if (v43 >= 0)
        p_p = &__p;
      else
        LOBYTE(p_p) = (_BYTE)__p;
      _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "%s\n", v36, v37, v38, (char)p_p);
      if (v43 < 0)
        operator delete(__p);
    }
    goto LABEL_52;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
      goto LABEL_21;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
    {
LABEL_21:
      if ((gBBULogVerbosity & 0x80000000) == 0)
        _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "failed establish connection to FDR\n", v17, v18, v19, v40);
    }
  }
LABEL_56:
  if (v46)
    CFRelease(v46);
  return v20;
}

void sub_212AF7DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUFDRUtilities::validateAndCopy(capabilities::radio *a1, _QWORD *a2, const void **a3, uint64_t *a4, ctu::cf **a5, char a6)
{
  const __CFAllocator *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  ctu::cf *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  ctu::cf *v34;
  BOOL v35;
  char v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  void *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  void *__p;
  char v59;
  ctu::cf *v60;
  void *v61[2];
  char v62;

  v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v56 = capabilities::radio::chipID(a1);
  v16 = (ctu::cf *)CFStringCreateWithFormat(v11, 0, CFSTR("%08X-%@"));
  if (*(_QWORD *)a1 && *a2 && *a4)
  {
    v60 = 0;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
        goto LABEL_13;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
        goto LABEL_13;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      ctu::cf::show(*(ctu::cf **)a1, v12);
      ctu::cf::show(v16, v17);
      v21 = v61;
      if (v62 < 0)
        LOBYTE(v21) = v61[0];
      _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "DataClass: %s, DataInstance: %s\n", v18, v19, v20, (char)v21);
      if (v59 < 0)
        operator delete(__p);
      if (v62 < 0)
        operator delete(v61[0]);
    }
LABEL_13:
    if (!AMFDRIsSupported())
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 109, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUFDRUtilities.cpp", 0x101u, (ctu::LogMessageBuffer *)"Assertion failure(( AMFDRIsSupported() == true) && \"AMFDR calls are made but dyn libFDR is NOT linked\")", v53, v54, v55, v56);
    }
    if ((a6 & 1) != 0)
    {
LABEL_20:
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
          goto LABEL_24;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
          goto LABEL_24;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
        _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "Calling AMFDRSealingMapCopyLocalData which does the unsealing/validation.\n", v22, v23, v24, v56);
LABEL_24:
      v29 = AMFDRSealingMapCopyLocalData(*(_QWORD *)a1, (uint64_t)v16, *a4, (uint64_t)&v60);
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
          goto LABEL_32;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
          goto LABEL_32;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        ctu::cf::show(v60, v25);
        if (v62 >= 0)
          v33 = v61;
        else
          LOBYTE(v33) = v61[0];
        _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "AMFDRSealingMapCopyLocalData error: %s\n", v30, v31, v32, (char)v33);
        if (v62 < 0)
          operator delete(v61[0]);
      }
LABEL_32:
      if (v29)
        goto LABEL_37;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
          goto LABEL_37;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
          goto LABEL_37;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
        _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "AMFDRSealingMapCopyLocalData returned NULL data \n", v26, v27, v28, v56);
LABEL_37:
      if (v60)
        goto LABEL_42;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
          goto LABEL_42;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
          goto LABEL_42;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
        _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "AMFDRSealingMapCopyLocalData returned NULL error \n", v26, v27, v28, v56);
LABEL_42:
      v34 = v60;
      *a5 = v60;
      if (v29)
        v35 = v34 == 0;
      else
        v35 = 0;
      v36 = v35;
      v37 = *a3;
      *a3 = (const void *)v29;
      if (v37)
        CFRelease(v37);
      if ((v36 & 1) != 0)
      {
        v38 = 0;
        goto LABEL_84;
      }
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
          goto LABEL_76;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
          goto LABEL_76;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "hit an error while copying data from FDR\n", v26, v27, v28, v56);
        if (gBBULogMaskGet(void)::once != -1)
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          v38 = 11;
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
          {
LABEL_77:
            if ((gBBULogVerbosity & 0x80000000) == 0)
            {
              ctu::cf::show(v60, v25);
              if (v62 >= 0)
                v50 = v61;
              else
                LOBYTE(v50) = v61[0];
              _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "%s\n", v47, v48, v49, (char)v50);
              if (v62 < 0)
                operator delete(v61[0]);
              v38 = 11;
            }
          }
LABEL_84:
          if (v16)
            CFRelease(v16);
          return v38;
        }
      }
LABEL_76:
      v38 = 11;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
        goto LABEL_77;
      goto LABEL_84;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
        goto LABEL_17;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
      {
LABEL_17:
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "Setting AMFDR Log Handler\n", v22, v23, v24, v56);
      }
    }
    AMFDRLogSetHandler((uint64_t)BBUFDRLogHandler);
    goto LABEL_20;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      goto LABEL_56;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      goto LABEL_56;
  }
  if (gBBULogVerbosity < 0
    || (_BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "invalid arguments:  dataClass = %p, serial = %p\n, options = %p", v13, v14, v15, *(_QWORD *)a1), gBBULogMaskGet(void)::once == -1))
  {
LABEL_56:
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      goto LABEL_64;
    goto LABEL_57;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
    goto LABEL_64;
LABEL_57:
  if (gBBULogVerbosity < 0)
    goto LABEL_64;
  ctu::cf::show(*(ctu::cf **)a1, v12);
  if (v62 >= 0)
    v42 = v61;
  else
    LOBYTE(v42) = v61[0];
  _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "DataClass: %s\n", v39, v40, v41, (char)v42);
  if (v62 < 0)
    operator delete(v61[0]);
  if (gBBULogMaskGet(void)::once == -1)
  {
LABEL_64:
    v38 = 2;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      return v38;
    goto LABEL_65;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v38 = 2;
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
    return v38;
LABEL_65:
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    ctu::cf::show(v16, v12);
    if (v62 >= 0)
      v46 = v61;
    else
      LOBYTE(v46) = v61[0];
    _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "DataInstance: %s\n", v43, v44, v45, (char)v46);
    if (v62 < 0)
      operator delete(v61[0]);
    return 2;
  }
  return v38;
}

void sub_212AF856C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL BBUFDRUtilities::isTrustErrorAcceptable(BBUFDRUtilities *this, __CFError *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  const char *v8;
  char v10;

  v5 = AMFDRGetTrustError((uint64_t)this);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      goto LABEL_5;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "FDR TrustError: %llu\n", v2, v3, v4, v5);
LABEL_5:
  if (!v5)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v7 = 0;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
        return v7;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v7 = 0;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
        return v7;
    }
    if (gBBULogVerbosity < 0)
      return v7;
    v8 = "Fatal error in FDR data validation/decode \n";
LABEL_18:
    _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, v8, v2, v3, v4, v10);
    return v7;
  }
  v6 = v5 & 0xFFFD9FFFFFFFFEFFLL;
  v7 = (v5 & 0xFFFD9FFFFFFFFEFFLL) == 0;
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if (v6)
    v8 = "Fatal error in FDR data validation/decode \n";
  else
    v8 = "We only have acceptable errors, so we can ignore these errors \n";
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0 && (gBBULogVerbosity & 0x80000000) == 0)
    goto LABEL_18;
  return v7;
}

BOOL BBUFDRUtilities::isErrorImageNotFound(BBUFDRUtilities *this, __CFError *a2)
{
  const __CFDictionary *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFDictionary *v6;
  const void *v7;
  ctu::cf *Value;
  const void *v9;
  ctu::cf *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **p_p;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFIndex Code;
  const __CFDictionary *v19;
  _BOOL8 v20;
  const char *v21;
  char v23;
  void *__p;
  char v25;

  if (!this)
    return 0;
  v2 = CFErrorCopyUserInfo(this);
  if (v2)
  {
    v6 = v2;
    v7 = (const void *)*MEMORY[0x24BDBD3B0];
    Value = (ctu::cf *)CFDictionaryGetValue(v2, (const void *)*MEMORY[0x24BDBD3B0]);
    if (Value)
    {
      v10 = Value;
      while (1)
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
            goto LABEL_12;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
            goto LABEL_12;
        }
        if ((gBBULogVerbosity & 0x80000000) == 0)
        {
          ctu::cf::show(v10, v9);
          p_p = &__p;
          if (v25 < 0)
            LOBYTE(p_p) = (_BYTE)__p;
          _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "AMFDRSealingMapCopyLocalData error: %s\n", v11, v12, v13, (char)p_p);
          if (v25 < 0)
            operator delete(__p);
        }
LABEL_12:
        Code = CFErrorGetCode(v10);
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
            goto LABEL_14;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0)
          {
LABEL_14:
            if ((gBBULogVerbosity & 0x80000000) == 0)
              _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "ErrorCode from isErrorImageNotFound: 0x%lx\n", v15, v16, v17, Code);
          }
        }
        CFRelease(v6);
        v19 = CFErrorCopyUserInfo(v10);
        if (!v19)
          goto LABEL_27;
        v6 = v19;
        v10 = (ctu::cf *)CFDictionaryGetValue(v19, v7);
        if (!v10)
          goto LABEL_26;
      }
    }
    Code = 0;
LABEL_26:
    CFRelease(v6);
  }
  else
  {
    Code = 0;
  }
LABEL_27:
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      goto LABEL_33;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) == 0)
      goto LABEL_33;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, "ErrorCode from isErrorImageNotFound: 0x%lx\n", v3, v4, v5, Code);
    v20 = Code == 4;
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    goto LABEL_34;
  }
LABEL_33:
  v20 = Code == 4;
LABEL_34:
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x80) != 0 && (gBBULogVerbosity & 0x80000000) == 0)
  {
    if (v20)
      v21 = "The root cause of the AMFDR failure IS missing bbxx file \n";
    else
      v21 = "The root cause of the AMFDR failure is NOT missing bbxx file \n";
    _BBULog(15, 0, "BBUFDRUtilities", (const char *)&str_5_9, v21, v3, v4, v5, v23);
  }
  return v20;
}

void sub_212AF8A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init_15()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUPartitionManager>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance, &dword_212A4D000);
  }
  return result;
}

uint64_t BBUICEProvisioner::determineSupport(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 16))
  {
    BBUFeedback::handleBeginQuickStep(*(BBUFeedback **)(a1 + 8), "Assuming mature provisioning supported.");
    *(_DWORD *)(a1 + 16) = 1;
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), 0);
  }
  return 0;
}

uint64_t BBUICEProvisioner::handleBeginMature(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v3;
  UInt8 *v6;
  unsigned __int16 *v7;
  unsigned __int16 Length;
  uint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t valid;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  std::string *v19;
  std::string *v20;
  uint64_t v21;
  _DWORD *v22;
  size_t v23;
  void *v24;
  void **v25;
  void *exception;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void *__p[7];
  _BYTE __dst[1024];
  uint64_t v34;
  CFRange v35;

  v34 = *MEMORY[0x24BDAC8D0];
  v3 = *(void **)(a2 + 8);
  __p[6] = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 56, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUICEProvisioner.cpp", 0x32u, (ctu::LogMessageBuffer *)"Assertion failure(d.get() && \"Error: Unable retrieve public key to start provisioning.\")", v28, v29, v30, v31);
  }
  CFRetain(v3);
  v6 = (UInt8 *)operator new(0xFA0uLL);
  bzero(v6, 0xFA0uLL);
  v7 = (unsigned __int16 *)operator new(0x4C4uLL);
  bzero(v7, 0x4C4uLL);
  Length = CFDataGetLength((CFDataRef)v3);
  *(_WORD *)v6 = Length;
  if (Length <= 0xF9Eu)
  {
    v35.length = CFDataGetLength((CFDataRef)v3);
    v35.location = 0;
    CFDataGetBytes((CFDataRef)v3, v35, v6 + 2);
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Start provisioning by sending pubkey, size %d", *(unsigned __int16 *)v6);
    IceAriGetContext();
    if (KTLStartProvision())
    {
      if (v7[14] >= 0x400u)
        v10 = 1024;
      else
        v10 = v7[14];
      if (v10 <= 0x3FF)
        v11 = 1024 - v10;
      else
        v11 = 0;
      bzero(&__dst[v10], v11);
      memcpy(__dst, v7 + 15, v10);
      memset(&__p[3], 170, 24);
      ctu::hex((ctu *)__dst, (const void *)v10);
      valid = KTLIsValidIMEIString();
      if ((_DWORD)valid)
      {
        valid = (uint64_t)operator new(0x18uLL);
        v13 = valid;
        if (SHIBYTE(__p[5]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)valid, (const std::string::value_type *)__p[3], (std::string::size_type)__p[4]);
        }
        else
        {
          *(_OWORD *)valid = *(_OWORD *)&__p[3];
          *(void **)(valid + 16) = __p[5];
        }
        v14 = *a3;
        if (*a3)
        {
          if (*(char *)(v14 + 23) < 0)
            operator delete(*(void **)v14);
          operator delete((void *)v14);
        }
        *a3 = v13;
      }
      v15 = capabilities::updater::supportsDualIMEIProvision((capabilities::updater *)valid);
      if ((_DWORD)v15)
      {
        memcpy(__dst, v7 + 554, v10);
        memset(__p, 170, 24);
        ctu::hex((ctu *)__dst, (const void *)v10);
        v15 = KTLIsValidIMEIString();
        if ((_DWORD)v15)
        {
          BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "IMEI2 is valid. Populating provisioning params!");
          v15 = (uint64_t)operator new(0x18uLL);
          v16 = v15;
          if (SHIBYTE(__p[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v15, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            *(_OWORD *)v15 = *(_OWORD *)__p;
            *(void **)(v15 + 16) = __p[2];
          }
          v17 = a3[1];
          if (v17)
          {
            if (*(char *)(v17 + 23) < 0)
              operator delete(*(void **)v17);
            operator delete((void *)v17);
          }
          a3[1] = v16;
        }
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
      }
      if (capabilities::updater::hasMEID((capabilities::updater *)v15))
      {
        if (v7[536] >= 0x400u)
          v18 = 1024;
        else
          v18 = v7[536];
        memcpy(__dst, v7 + 537, v18);
        memset(__p, 170, 24);
        ctu::hex((ctu *)__dst, (const void *)v18);
        if (KTLIsValidMEIDString())
        {
          BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "MEID is valid. Populating provisioning params!");
          v19 = (std::string *)operator new(0x18uLL);
          v20 = v19;
          if (SHIBYTE(__p[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
            v19->__r_.__value_.__r.__words[2] = (std::string::size_type)__p[2];
          }
          v21 = a3[2];
          if (v21)
          {
            if (*(char *)(v21 + 23) < 0)
              operator delete(*(void **)v21);
            operator delete((void *)v21);
          }
          a3[2] = (uint64_t)v20;
        }
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
      }
      v22 = operator new(0x10uLL);
      v23 = v7[23];
      v22[2] = v23;
      v24 = operator new[](v23);
      *(_QWORD *)v22 = v24;
      memcpy(v24, v7 + 24, v23);
      v25 = (void **)a3[4];
      if (v25)
      {
        if (*v25)
          operator delete(*v25);
        operator delete(v25);
      }
      a3[4] = (uint64_t)v22;
      if (SHIBYTE(__p[5]) < 0)
        operator delete(__p[3]);
      v9 = 0;
    }
    else
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed to retrieve mature provisioning parameters.");
      v9 = 56;
    }
  }
  else
  {
    v9 = 19;
  }
  operator delete(v7);
  operator delete(v6);
  CFRelease(v3);
  return v9;
}

void sub_212AF8F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,const void *a23)
{
  void *v23;
  void *v24;
  void *v25;

  operator delete(v25);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  operator delete(v24);
  operator delete(v23);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a23);
  _Unwind_Resume(a1);
}

uint64_t BBUICEProvisioner::handleFinishMature(uint64_t a1, uint64_t a2)
{
  const void *v2;
  UInt8 *v4;
  _OWORD *v5;
  unsigned __int16 Length;
  uint64_t v7;
  void *exception;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  CFRange v14;

  v2 = *(const void **)(a2 + 16);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 57, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Provisioning/BBUICEProvisioner.cpp", 0x85u, (ctu::LogMessageBuffer *)"Assertion failure(d.get() && \"Error: Unable retrieve public key to finish provisioning.\")", v10, v11, v12, v13);
  }
  CFRetain(v2);
  v4 = (UInt8 *)operator new(0xC02uLL);
  v5 = operator new(0xACuLL);
  bzero(v4, 0xC02uLL);
  *(_OWORD *)((char *)v5 + 156) = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  *v5 = 0u;
  v5[1] = 0u;
  Length = CFDataGetLength((CFDataRef)v2);
  *(_WORD *)v4 = Length;
  if (Length <= 0xC00u)
  {
    v14.length = CFDataGetLength((CFDataRef)v2);
    v14.location = 0;
    CFDataGetBytes((CFDataRef)v2, v14, v4 + 2);
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Sending manifest, size %d", *(unsigned __int16 *)v4);
    IceAriGetContext();
    if ((KTLFinishProvision() & 1) != 0)
    {
      v7 = 0;
    }
    else
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Finish provision failed, rsp status: 0x%x", *((_DWORD *)v5 + 5));
      v7 = 57;
    }
  }
  else
  {
    v7 = 19;
  }
  operator delete(v5);
  operator delete(v4);
  CFRelease(v2);
  return v7;
}

void sub_212AF91BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212AF91D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void sub_212AF91F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  operator delete(v10);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void sub_212AF920C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212AF9224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;
  void *v11;

  operator delete(v11);
  operator delete(v10);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_16()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ICEARIContext>::~PthreadMutexGuardPolicy, &ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance, &dword_212A4D000);
  }
  return result;
}

_QWORD *BasebandUpdaterCreate(const __CFDictionary *a1, void (*a2)(void *, const char *), void *a3, uint64_t *a4)
{
  __int128 v7;
  const __CFDictionary *Value;
  const __CFDictionary *v9;
  const __CFAllocator *v10;
  ACFULogging *v11;
  ACFULogging *v12;
  uint64_t (*v13)(uint64_t);
  ACFULogging *MutableCopy;
  __CFDictionary *v15;
  uint64_t (*v16)(uint64_t);
  const __CFDictionary *v17;
  CFTypeID v18;
  ACFULogging *v19;
  ACFULogging *v20;
  uint64_t (*v21)(uint64_t);
  int v22;
  int v23;
  ACFULogging *LogInstance;
  _QWORD *Instance;
  _QWORD *v26;
  BasebandUpdater *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  void **v34;
  ACFULogging *v35;
  char *v37;
  __int128 v38;
  _QWORD v39[2];
  char v40;
  _QWORD v41[2];
  char v42;
  _QWORD v43[2];
  char v44;
  _QWORD v45[2];
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  ACFULogging *v49;
  ACFULogging *v50;
  __CFDictionary *v51;

  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v46 = v7;
  v47 = v7;
  v48 = 0xAAAAAAAAAA000000;
  LOBYTE(v46) = 0;
  DWORD1(v46) = 0;
  WORD4(v46) = 0;
  LOBYTE(v47) = 0;
  BYTE8(v47) = 0;
  v45[0] = 0xAAAAAAAAAAAAAAAALL;
  v45[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x212BF9FC8](v45, CFSTR("BasebandUpdaterCreate"));
  ParseUpdaterDebugArgs(a1, (UpdaterDebugArgs *)&v46);
  v51 = 0;
  if (!a1)
  {
    v9 = 0;
    goto LABEL_26;
  }
  v9 = a1;
  if (!DWORD1(v46))
    goto LABEL_26;
  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v11 = (ACFULogging *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("logLevel=%d"), DWORD1(v46));
  v12 = v11;
  v50 = v11;
  v13 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  if (!v11)
    v13 = 0;
  if (!v13)
  {
    ACFULogging::getLogInstance(v11);
    Value = (const __CFDictionary *)ACFULogging::handleMessage();
    v15 = 0;
LABEL_61:
    v9 = 0;
    v22 = 4;
    goto LABEL_20;
  }
  MutableCopy = CFDictionaryCreateMutableCopy(v10, 0, a1);
  v15 = MutableCopy;
  v51 = MutableCopy;
  if (MutableCopy)
    v16 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  else
    v16 = 0;
  if (!v16)
  {
    ACFULogging::getLogInstance(MutableCopy);
    Value = (const __CFDictionary *)ACFULogging::handleMessage();
    goto LABEL_61;
  }
  Value = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, CFSTR("Options"));
  v17 = Value;
  if (!Value)
    goto LABEL_19;
  v18 = CFGetTypeID(Value);
  Value = (const __CFDictionary *)CFDictionaryGetTypeID();
  if ((const __CFDictionary *)v18 != Value)
    goto LABEL_19;
  v49 = 0;
  v19 = CFDictionaryCreateMutableCopy(v10, 0, v17);
  v20 = v19;
  v49 = v19;
  if (v19)
    v21 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  else
    v21 = 0;
  if (!v21)
  {
    ACFULogging::getLogInstance(v19);
    Value = (const __CFDictionary *)ACFULogging::handleMessage();
    v22 = 4;
    if (!v20)
      goto LABEL_18;
    goto LABEL_17;
  }
  CFDictionaryAddValue(v19, CFSTR("ACFUDebugArgs"), v12);
  CFDictionaryReplaceValue(v15, CFSTR("Options"), v20);
  v22 = 0;
  if (v20)
LABEL_17:
    CFRelease(v20);
LABEL_18:
  if (v21)
  {
LABEL_19:
    v22 = 0;
    v9 = v15;
    goto LABEL_20;
  }
  v9 = 0;
LABEL_20:
  if (v12)
    CFRelease(v12);
  if (!v22)
  {
LABEL_26:
    LogInstance = (ACFULogging *)ACFULogging::getLogInstance(Value);
    Value = (const __CFDictionary *)ACFULogging::initLog(LogInstance, v9, a2, a3);
    v23 = (int)Value;
    v15 = v51;
    if (!v51)
      goto LABEL_28;
    goto LABEL_27;
  }
  v23 = 1;
  if (v15)
LABEL_27:
    CFRelease(v15);
LABEL_28:
  if (v23)
  {
    ACFULogging::getLogInstance(Value);
    ACFULogging::handleMessage();
    std::string::basic_string[abi:ne180100]<0>(v43, "Failed to init logging");
    v35 = (ACFULogging *)ACFUError::addError();
    v26 = 0;
    if ((v44 & 0x80000000) == 0)
      goto LABEL_46;
    v34 = (void **)v43;
    goto LABEL_45;
  }
  if (a2)
  {
    qword_253D372D8 = (uint64_t)a2;
    unk_253D372E0 = a3;
  }
  if (_MergedGlobals_4 == -1)
  {
    if (qword_253D372E8)
      goto LABEL_33;
    goto LABEL_55;
  }
  dispatch_once(&_MergedGlobals_4, &__block_literal_global_2);
  if (!qword_253D372E8)
  {
LABEL_55:
    ACFULogging::getLogInstance(Value);
    ACFULogging::handleMessage();
    std::string::basic_string[abi:ne180100]<0>(v41, "Failed to register BasebandUpdater CFRuntimeClass");
    v35 = (ACFULogging *)ACFUError::addError();
    v26 = 0;
    if ((v42 & 0x80000000) == 0)
      goto LABEL_46;
    v34 = (void **)v41;
LABEL_45:
    operator delete(*v34);
    goto LABEL_46;
  }
LABEL_33:
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  v26 = Instance;
  if (Instance)
  {
    if (!a1)
    {
LABEL_41:
      ACFULogging::getLogInstance((ACFULogging *)Instance);
      ACFULogging::handleMessage();
      goto LABEL_42;
    }
    v27 = (BasebandUpdater *)operator new(0x20uLL);
    BasebandUpdater::BasebandUpdater(v27, v26, a1);
    v26[2] = v27;
    v28 = Instance[2];
    v29 = (std::__shared_weak_count *)Instance[3];
    if (!v29)
      goto LABEL_40;
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      if (v28)
        goto LABEL_41;
    }
    else
    {
LABEL_40:
      if (v28)
        goto LABEL_41;
    }
    ACFULogging::getLogInstance((ACFULogging *)Instance);
    ACFULogging::handleMessage();
    v37 = (char *)operator new(0x30uLL);
    v38 = xmmword_212B55290;
    strcpy(v37, "Failed to create BasebandUpdater instance");
    ACFUError::addError();
    v34 = (void **)&v37;
    goto LABEL_45;
  }
  ACFULogging::getLogInstance(0);
  ACFULogging::handleMessage();
  std::string::basic_string[abi:ne180100]<0>(v39, "Failed to create BasebandUpdater CFRuntime object");
  v35 = (ACFULogging *)ACFUError::addError();
  v26 = 0;
  if (v40 < 0)
  {
    v34 = (void **)v39;
    goto LABEL_45;
  }
LABEL_46:
  ACFULogging::getLogInstance(v35);
  ACFULogging::handleMessage();
  if (a4 && ACFUError::hasError((ACFUError *)v45))
    *a4 = ACFUError::getCFError((ACFUError *)v45);
  if (v26)
  {
    CFRelease(v26);
    v26 = 0;
  }
LABEL_42:
  MEMORY[0x212BF9FD4](v45);
  return v26;
}

void sub_212AF9858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a24 < 0)
  {
    operator delete(__p);
    MEMORY[0x212BF9FD4](&a37);
    _Unwind_Resume(a1);
  }
  MEMORY[0x212BF9FD4](&a37);
  _Unwind_Resume(a1);
}

_QWORD *BasebandUpdaterObjDestroy(_QWORD *result)
{
  _QWORD *v1;
  ACFULogging *v2;

  if (result)
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      v2 = (ACFULogging *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      ACFULogging::getLogInstance(v2);
      result = (_QWORD *)ACFULogging::handleMessage();
      v1[2] = 0;
    }
  }
  return result;
}

CFStringRef BasebandUpdaterObjDescribe(CFStringRef result)
{
  CFStringRef v1;
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  if (result)
  {
    v1 = result;
    v2 = CFGetAllocator(result);
    v3 = CFGetAllocator(v1);
    return CFStringCreateWithFormat(v2, 0, CFSTR("<BasebandUpdater %p [%p]>{}"), v1, v3);
  }
  return result;
}

uint64_t BasebandUpdaterExecCommand(uint64_t a1, ACFURestore *a2, uint64_t a3, const __CFDictionary **a4, uint64_t *a5)
{
  ACFULogging *v9;
  ACFULogging *v10;
  const __CFString *v11;
  ACFULogging *v12;
  const __CFString *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t CFError;
  uint64_t v22;
  ACFULogging *v23;
  int v24;
  char *CStringPtr;
  std::string::size_type v26;
  std::string::size_type v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 v30;
  BasebandRestore *v31;
  std::string::size_type v32;
  unint64_t *v33;
  unint64_t v34;
  std::string::size_type v35;
  std::string::size_type v36;
  unint64_t *v37;
  unint64_t v38;
  const __CFDictionary **v39;
  std::string::size_type v40;
  unint64_t *v41;
  unint64_t v42;
  BasebandRestore *v43;
  std::string::size_type v44;
  unint64_t *v45;
  unint64_t v46;
  std::string::size_type v47;
  std::string::size_type v48;
  unint64_t *v49;
  unint64_t v50;
  std::string::size_type v51;
  std::string::size_type v52;
  unint64_t *v53;
  unint64_t v54;
  BasebandRestore *v55;
  std::string::size_type v56;
  unint64_t *v57;
  unint64_t v58;
  BasebandRestore *v59;
  std::string::size_type v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count **v63;
  std::string::size_type v64;
  unint64_t *v65;
  unint64_t v66;
  std::string::size_type v67;
  std::string::size_type v68;
  unint64_t *v69;
  unint64_t v70;
  std::string::size_type v71;
  std::string::size_type v72;
  unint64_t *v73;
  unint64_t v74;
  unsigned __int8 v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  ACFURestore *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  ACFUError *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  int BasebandCrashReason;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  ACFUError *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  ACFUError *v106;
  uint64_t *v107;
  unint64_t v108;
  int v109;
  std::string::size_type size;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  char *v119;
  unint64_t v120;
  void *__p;
  __int128 v122;
  ACFUError *v123;
  std::__shared_weak_count *v124;
  BOOL v125;
  ACFUError *v126;
  unint64_t v127;
  std::string v128;
  std::string v129;
  std::string v130;
  char *v131;
  __int128 v132;
  char v133[32];
  _QWORD v134[2];

  v134[0] = 0xAAAAAAAAAAAAAAAALL;
  v134[1] = 0xAAAAAAAAAAAAAAAALL;
  v9 = (ACFULogging *)MEMORY[0x212BF9FC8](v134, CFSTR("BasebandUpdaterExecCommand"));
  if (!a1)
  {
    ACFULogging::getLogInstance(v9);
    ACFULogging::handleMessage();
    v133[23] = 21;
    strcpy(v133, "NULL updater argument");
    ACFUError::addError();
    if (!a5)
      goto LABEL_156;
    goto LABEL_18;
  }
  v10 = *(ACFULogging **)(a1 + 16);
  if (!v10
  {
    ACFULogging::getLogInstance(v10);
    ACFULogging::handleMessage();
    v131 = (char *)operator new(0x20uLL);
    v132 = xmmword_212B52FE0;
    strcpy(v131, "NULL BasebandUpdater object");
    ACFUError::addError();
    operator delete(v131);
    if (!a5)
      goto LABEL_156;
LABEL_18:
    CFError = ACFUError::getCFError((ACFUError *)v134);
    goto LABEL_19;
  }
  v12 = v10;
  v13 = (const __CFString *)ACFURestore::restoreCommand(a2, v11);
  if ((_DWORD)v13 != -1)
  {
    v14 = (std::__shared_weak_count *)*((_QWORD *)v12 + 3);
    v129.__r_.__value_.__r.__words[0] = *((_QWORD *)v12 + 2);
    v129.__r_.__value_.__l.__size_ = (std::string::size_type)v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v17 = ACFURestore::executeCommand();
    v18 = v17;
    if (!v14)
      goto LABEL_12;
    v19 = (unint64_t *)&v14->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if ((v18 & 1) != 0)
      {
LABEL_87:
        v22 = 1;
        goto LABEL_157;
      }
    }
    else
    {
LABEL_12:
      if ((v17 & 1) != 0)
        goto LABEL_87;
    }
LABEL_80:
    v76 = *((_QWORD *)v12 + 2);
    v77 = (std::__shared_weak_count *)*((_QWORD *)v12 + 3);
    if (v77)
    {
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
      v80 = *(unsigned __int8 *)(v76 + 376);
      do
        v81 = __ldaxr(v78);
      while (__stlxr(v81 - 1, v78));
      if (v81)
      {
        if (v80)
          goto LABEL_87;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
        if (v80)
          goto LABEL_87;
      }
    }
    else if (*(_BYTE *)(v76 + 376))
    {
      goto LABEL_87;
    }
    ACFULogging::getLogInstance((ACFULogging *)v17);
    CFStringGetCStringPtr((CFStringRef)a2, 0x8000100u);
    ACFULogging::handleMessage();
    if (a5)
    {
      v126 = (ACFUError *)0xAAAAAAAAAAAAAAAALL;
      v127 = 0xAAAAAAAAAAAAAAAALL;
      v82 = (ACFURestore *)*((_QWORD *)v12 + 2);
      v83 = (std::__shared_weak_count *)*((_QWORD *)v12 + 3);
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
      v129.__r_.__value_.__l.__size_ = (std::string::size_type)v83;
      if (v83)
      {
        v84 = (unint64_t *)&v83->__shared_owners_;
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      ACFURestore::getErrorHandle(v82);
      if (v83)
      {
        v86 = (unint64_t *)&v83->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      memset(&v129, 0, sizeof(v129));
      v125 = 0;
      v88 = (ACFUError *)*((_QWORD *)v12 + 2);
      v89 = (std::__shared_weak_count *)*((_QWORD *)v12 + 3);
      v123 = v88;
      v124 = v89;
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
      }
      BasebandCrashReason = BasebandRestore::getBasebandCrashReason((uint64_t)v88, (uint64_t)&v129, &v125);
      if (v89)
      {
        v93 = (unint64_t *)&v89->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      if (BasebandCrashReason)
      {
        if (v125)
        {
          ACFUError::clearError(v126);
          __p = operator new(0x60uLL);
          v122 = xmmword_212B550C0;
          strcpy((char *)__p, "Emergency coredump detected; route this failure to the baseband firmware team for analysis");
          ACFUError::addError();
          operator delete(__p);
          v95 = ACFUError::getCFError(v126);
LABEL_148:
          *a5 = v95;
LABEL_149:
          if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v129.__r_.__value_.__l.__data_);
          v115 = (std::__shared_weak_count *)v127;
          if (v127)
          {
            v116 = (unint64_t *)(v127 + 8);
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
              std::__shared_weak_count::__release_weak(v115);
            }
          }
          goto LABEL_156;
        }
        ACFUError::clearError(v126);
        v109 = SHIBYTE(v129.__r_.__value_.__r.__words[2]);
        if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v129.__r_.__value_.__r.__words[2]);
        else
          size = v129.__r_.__value_.__l.__size_;
        v111 = size + 18;
        v120 = 0xAAAAAAAAAAAAAAAALL;
        if (size + 18 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        if (v111 >= 0x17)
        {
          v113 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v111 | 7) != 0x17)
            v113 = v111 | 7;
          v120 = (v113 + 1) | 0x8000000000000000;
          v119 = (char *)operator new(v113 + 1);
          *((_WORD *)v119 + 8) = 8250;
          *(_OWORD *)v119 = *(_OWORD *)"Baseband crashed: ";
          v112 = v119 + 18;
        }
        else
        {
          v120 = 8250;
          v119 = *(char **)"Baseband crashed: ";
          v112 = (char *)&v120 + 2;
          if (!size)
          {
LABEL_145:
            v112[size] = 0;
            ACFUError::addError();
            if (SHIBYTE(v120) < 0)
              operator delete(v119);
            v95 = ACFUError::getCFError(v126);
            goto LABEL_148;
          }
        }
        if (v109 >= 0)
          v114 = &v129;
        else
          v114 = (std::string *)v129.__r_.__value_.__r.__words[0];
        memmove(v112, v114, size);
        goto LABEL_145;
      }
      v96 = *((_QWORD *)v12 + 2);
      v97 = (std::__shared_weak_count *)*((_QWORD *)v12 + 3);
      if (v97)
      {
        v98 = (unint64_t *)&v97->__shared_owners_;
        do
          v99 = __ldxr(v98);
        while (__stxr(v99 + 1, v98));
      }
      v101 = *(ACFUError **)(v96 + 352);
      v100 = *(std::__shared_weak_count **)(v96 + 360);
      v123 = v101;
      v124 = v100;
      if (v100)
      {
        v102 = (unint64_t *)&v100->__shared_owners_;
        do
          v103 = __ldxr(v102);
        while (__stxr(v103 + 1, v102));
      }
      if (v97)
      {
        v104 = (unint64_t *)&v97->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      v106 = v123;
      if ((ACFUError::hasError(v123) & 1) == 0)
      {
        if (!ACFUError::hasError(v126))
        {
LABEL_126:
          if (v124)
          {
            v107 = &v124->__shared_owners_;
            do
              v108 = __ldaxr((unint64_t *)v107);
            while (__stlxr(v108 - 1, (unint64_t *)v107));
            if (!v108)
            {
              ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
              std::__shared_weak_count::__release_weak(v124);
            }
          }
          goto LABEL_149;
        }
        v106 = v126;
      }
      *a5 = ACFUError::getCFError(v106);
      goto LABEL_126;
    }
LABEL_156:
    v22 = 0;
    goto LABEL_157;
  }
  v23 = (ACFULogging *)BasebandRestore::basebandRestoreCommand((CFStringRef)a2, v13);
  v24 = (int)v23;
  switch((int)v23)
  {
    case -1:
      ACFULogging::getLogInstance(v23);
      CFStringGetCStringPtr((CFStringRef)a2, 0x8000100u);
      ACFULogging::handleMessage();
      CStringPtr = (char *)CFStringGetCStringPtr((CFStringRef)a2, 0x8000100u);
      std::string::basic_string[abi:ne180100]<0>(&v129, CStringPtr);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("BasebandUpdater unsupported command: ", &v129, &v128);
      ACFUError::addError();
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v128.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_23:
          if (!a5)
            goto LABEL_156;
LABEL_163:
          CFError = ACFUError::getCFError((ACFUError *)v134);
          break;
        }
      }
      else if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_23;
      }
      operator delete(v129.__r_.__value_.__l.__data_);
      if (!a5)
        goto LABEL_156;
      goto LABEL_163;
    case 0:
      v55 = (BasebandRestore *)*((_QWORD *)v12 + 2);
      v56 = *((_QWORD *)v12 + 3);
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
      v129.__r_.__value_.__l.__size_ = v56;
      if (v56)
      {
        v57 = (unint64_t *)(v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v30 = BasebandRestore::bootCmd(v55);
      goto LABEL_79;
    case 1:
      v43 = (BasebandRestore *)*((_QWORD *)v12 + 2);
      v44 = *((_QWORD *)v12 + 3);
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      v129.__r_.__value_.__l.__size_ = v44;
      if (v44)
      {
        v45 = (unint64_t *)(v44 + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v30 = BasebandRestore::coredumpCmd(v43);
      goto LABEL_79;
    case 2:
      v47 = *((_QWORD *)v12 + 2);
      v48 = *((_QWORD *)v12 + 3);
      v129.__r_.__value_.__r.__words[0] = v47;
      v129.__r_.__value_.__l.__size_ = v48;
      if (v48)
      {
        v49 = (unint64_t *)(v48 + 8);
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      v30 = (*(uint64_t (**)(std::string::size_type, const __CFDictionary **))(*(_QWORD *)v47 + 48))(v47, a4);
      goto LABEL_79;
    case 3:
      v31 = (BasebandRestore *)*((_QWORD *)v12 + 2);
      v32 = *((_QWORD *)v12 + 3);
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
      v129.__r_.__value_.__l.__size_ = v32;
      if (v32)
      {
        v33 = (unint64_t *)(v32 + 8);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      v30 = BasebandRestore::copyBasebandMigrationDataCmd(v31, a4);
      goto LABEL_79;
    case 4:
      v59 = (BasebandRestore *)*((_QWORD *)v12 + 2);
      v60 = *((_QWORD *)v12 + 3);
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
      v129.__r_.__value_.__l.__size_ = v60;
      if (v60)
      {
        v61 = (unint64_t *)(v60 + 8);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      v30 = BasebandRestore::restoreBasebandMigrationDataCmd(v59, a4);
      goto LABEL_79;
    case 5:
      v63 = (std::__shared_weak_count **)*((_QWORD *)v12 + 2);
      v64 = *((_QWORD *)v12 + 3);
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
      v129.__r_.__value_.__l.__size_ = v64;
      if (v64)
      {
        v65 = (unint64_t *)(v64 + 8);
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      v30 = BasebandRestore::pingCmd(v63, a4);
      goto LABEL_79;
    case 6:
      v51 = *((_QWORD *)v12 + 2);
      v52 = *((_QWORD *)v12 + 3);
      v129.__r_.__value_.__r.__words[0] = v51;
      v129.__r_.__value_.__l.__size_ = v52;
      if (v52)
      {
        v53 = (unint64_t *)(v52 + 8);
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      v30 = (*(uint64_t (**)(std::string::size_type, const __CFDictionary **))(*(_QWORD *)v51 + 56))(v51, a4);
      goto LABEL_79;
    case 7:
      v71 = *((_QWORD *)v12 + 2);
      v72 = *((_QWORD *)v12 + 3);
      v129.__r_.__value_.__r.__words[0] = v71;
      v129.__r_.__value_.__l.__size_ = v72;
      if (v72)
      {
        v73 = (unint64_t *)(v72 + 8);
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      v30 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v71 + 64))(v71);
      goto LABEL_79;
    case 8:
      v39 = (const __CFDictionary **)*((_QWORD *)v12 + 2);
      v40 = *((_QWORD *)v12 + 3);
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
      v129.__r_.__value_.__l.__size_ = v40;
      if (v40)
      {
        v41 = (unint64_t *)(v40 + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      v30 = BasebandRestore::provisionCmd(v39, a4);
      goto LABEL_79;
    case 9:
      v67 = *((_QWORD *)v12 + 2);
      v68 = *((_QWORD *)v12 + 3);
      v129.__r_.__value_.__r.__words[0] = v67;
      v129.__r_.__value_.__l.__size_ = v68;
      if (v68)
      {
        v69 = (unint64_t *)(v68 + 8);
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      v30 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v67 + 72))(v67);
      goto LABEL_79;
    case 10:
      v26 = *((_QWORD *)v12 + 2);
      v27 = *((_QWORD *)v12 + 3);
      v129.__r_.__value_.__r.__words[0] = v26;
      v129.__r_.__value_.__l.__size_ = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v26 + 80))(v26);
      goto LABEL_79;
    case 11:
      v35 = *((_QWORD *)v12 + 2);
      v36 = *((_QWORD *)v12 + 3);
      v129.__r_.__value_.__r.__words[0] = v35;
      v129.__r_.__value_.__l.__size_ = v36;
      if (v36)
      {
        v37 = (unint64_t *)(v36 + 8);
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v30 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v35 + 88))(v35);
LABEL_79:
      v75 = v30;
      v17 = std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&v129);
      if ((v75 & 1) == 0)
        goto LABEL_80;
      goto LABEL_87;
    default:
      ACFULogging::getLogInstance(v23);
      ACFULogging::handleMessage();
      std::to_string(&v129, v24);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Logic error: invalid BasebandUpdater command: ", &v129, &v130);
      ACFUError::addError();
      if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v130.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_65:
          if (!a5)
            goto LABEL_156;
          goto LABEL_160;
        }
      }
      else if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_65;
      }
      operator delete(v129.__r_.__value_.__l.__data_);
      if (!a5)
        goto LABEL_156;
LABEL_160:
      CFError = ACFUError::getCFError((ACFUError *)v134);
      break;
  }
LABEL_19:
  v22 = 0;
  *a5 = CFError;
LABEL_157:
  MEMORY[0x212BF9FD4](v134);
  return v22;
}

void sub_212AFA4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a18 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  MEMORY[0x212BF9FD4](v42 - 80);
  _Unwind_Resume(a1);
}

void sub_212AFA5F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
  {
    operator delete(*(void **)(v1 - 112));
    MEMORY[0x212BF9FD4](v1 - 80);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x212AFA63CLL);
}

void sub_212AFA614(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 113) < 0)
  {
    operator delete(*(void **)(v1 - 136));
    MEMORY[0x212BF9FD4](v1 - 80);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x212AFA63CLL);
}

uint64_t BasebandUpdaterIsDone(uint64_t a1, uint64_t *a2)
{
  ACFULogging *v4;
  ACFULogging *v5;
  ACFURestore *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  ACFULogging *isRestoreComplete;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  ACFURestore *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *__p;
  _QWORD v24[2];

  v24[0] = 0xAAAAAAAAAAAAAAAALL;
  v24[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x212BF9FC8](v24, CFSTR("BasebandUpdaterIsDone"));
  if (!a1)
    goto LABEL_30;
  v4 = *(ACFULogging **)(a1 + 16);
  if (!v4
  {
    ACFULogging::getLogInstance(v4);
    ACFULogging::handleMessage();
    __p = (char *)operator new(0x20uLL);
    strcpy(__p, "NULL BasebandUpdater object");
    ACFUError::addError();
    operator delete(__p);
    if (a2)
      *a2 = ACFUError::getCFError((ACFUError *)v24);
    goto LABEL_28;
  }
  v5 = v4;
  v6 = (ACFURestore *)*((_QWORD *)v4 + 2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 3);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  isRestoreComplete = (ACFULogging *)ACFURestore::isRestoreComplete(v6);
  v11 = (int)isRestoreComplete;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v11)
        goto LABEL_12;
LABEL_30:
      v21 = 0;
      goto LABEL_31;
    }
  }
  if (!(_DWORD)isRestoreComplete)
    goto LABEL_30;
LABEL_12:
  ACFULogging::getLogInstance(isRestoreComplete);
  ACFULogging::handleMessage();
  v14 = (ACFURestore *)*((_QWORD *)v5 + 2);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v5 + 3);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  ACFURestore::getErrorHandle(v14);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (a2 && ACFUError::hasError((ACFUError *)0xAAAAAAAAAAAAAAAALL))
    *a2 = ACFUError::getCFError((ACFUError *)0xAAAAAAAAAAAAAAAALL);
  do
    v20 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v20 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v20)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
LABEL_28:
  v21 = 1;
LABEL_31:
  MEMORY[0x212BF9FD4](v24);
  return v21;
}

void sub_212AFA8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x212BF9FD4](v6 - 48);
  _Unwind_Resume(a1);
}

void sub_212AFA8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x212BF9FD4](v4 - 48);
  _Unwind_Resume(a1);
}

void sub_212AFA8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x212BF9FD4](v6 - 48);
  _Unwind_Resume(a1);
}

void sub_212AFA910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
  {
    operator delete(__p);
    MEMORY[0x212BF9FD4](v21 - 48);
    _Unwind_Resume(a1);
  }
  MEMORY[0x212BF9FD4](v21 - 48);
  _Unwind_Resume(a1);
}

uint64_t BasebandUpdaterSetOptions(_QWORD *a1, const __CFDictionary *a2, uint64_t *a3)
{
  ACFULogging *v6;
  const void *v7;
  void *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const void *v13;
  ACFULogging *v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  void **v18;
  ACFULogging *LogInstance;
  ACFULogging *inited;
  BasebandUpdater *v21;
  uint64_t v22;
  _QWORD v24[2];
  char v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  _QWORD v28[2];
  char v29;
  _QWORD v30[2];
  char v31;
  _QWORD v32[2];

  v32[0] = 0xAAAAAAAAAAAAAAAALL;
  v32[1] = 0xAAAAAAAAAAAAAAAALL;
  v6 = (ACFULogging *)MEMORY[0x212BF9FC8](v32, CFSTR("BasebandUpdaterSetOptions"));
  if (a1 && a2)
  {
    v7 = (const void *)a1[2];
    if (v7)
    {
      v10 = (_QWORD *)*((_QWORD *)v8 + 2);
      v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 3);
      v26 = v10;
      v27 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v13 = (const void *)v10[15];
      if (v13)
        CFRelease(v13);
      v10[15] = a2;
      AMSupportSafeRetain();
      v14 = (ACFULogging *)(*(uint64_t (**)(_QWORD *))(*v10 + 104))(v10);
      v15 = (int)v14;
      if ((_DWORD)v14)
      {
        ACFULogging::getLogInstance(v14);
        v14 = (ACFULogging *)ACFULogging::handleMessage();
      }
      if (v9)
      {
        v16 = (unint64_t *)&v9->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (v15)
      {
        ACFULogging::getLogInstance(v14);
        ACFULogging::handleMessage();
        std::string::basic_string[abi:ne180100]<0>(v24, "Failed to setOptions on BasebandUpdater obj");
        ACFUError::addError();
        if (v25 < 0)
        {
          v18 = (void **)v24;
LABEL_27:
          operator delete(*v18);
          goto LABEL_28;
        }
        goto LABEL_28;
      }
    }
    else
    {
      LogInstance = (ACFULogging *)ACFULogging::getLogInstance(0);
      inited = (ACFULogging *)ACFULogging::initLog(LogInstance, a2, (void (*)(void *, const char *))qword_253D372D8, unk_253D372E0);
      if ((_DWORD)inited)
      {
        ACFULogging::getLogInstance(inited);
        ACFULogging::handleMessage();
        std::string::basic_string[abi:ne180100]<0>(v28, "Failed to init logging");
        ACFUError::addError();
        if (v29 < 0)
        {
          v18 = (void **)v28;
          goto LABEL_27;
        }
        goto LABEL_28;
      }
      v21 = (BasebandUpdater *)operator new(0x20uLL);
      BasebandUpdater::BasebandUpdater(v21, a1, a2);
      a1[2] = v21;
    }
    v22 = 1;
    goto LABEL_22;
  }
  ACFULogging::getLogInstance(v6);
  ACFULogging::handleMessage();
  std::string::basic_string[abi:ne180100]<0>(v30, "NULL updater and/or options arguments");
  ACFUError::addError();
  if (v31 < 0)
  {
    v18 = (void **)v30;
    goto LABEL_27;
  }
LABEL_28:
  if (a3 && ACFUError::hasError((ACFUError *)v32))
  {
    v22 = 0;
    *a3 = ACFUError::getCFError((ACFUError *)v32);
  }
  else
  {
    v22 = 0;
  }
LABEL_22:
  MEMORY[0x212BF9FD4](v32);
  return v22;
}

void sub_212AFABFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
  {
    operator delete(__p);
    MEMORY[0x212BF9FD4](v25 - 48);
    _Unwind_Resume(a1);
  }
  MEMORY[0x212BF9FD4](v25 - 48);
  _Unwind_Resume(a1);
}

ACFULogging *BasebandUpdaterRegisterLogSink(uint64_t a1, void *a2, void (*a3)(void *, const char *))
{
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const __CFDictionary *v10;
  unint64_t v11;
  ACFULogging *v12;
  ACFULogging *v13;
  ACFULogging *result;
  ACFULogging *v15;
  const __CFDictionary *v16;
  ACFULogging *LogInstance;

  if (!a1)
  {
    ACFULogging::getLogInstance(0);
    return (ACFULogging *)ACFULogging::handleMessage();
  }
  v5 = *(_QWORD **)(a1 + 16);
  if (v5)
  {
    v6 = v5[2];
    v7 = (std::__shared_weak_count *)v5[3];
    if (!v7)
    {
      v16 = *(const __CFDictionary **)(v6 + 120);
      LogInstance = (ACFULogging *)ACFULogging::getLogInstance((ACFULogging *)v5);
      result = (ACFULogging *)ACFULogging::initLog(LogInstance, v16, a3, a2);
      if ((_DWORD)result)
        goto LABEL_14;
      goto LABEL_17;
    }
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = *(const __CFDictionary **)(v6 + 120);
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      v13 = (ACFULogging *)ACFULogging::getLogInstance(v12);
      result = (ACFULogging *)ACFULogging::initLog(v13, v10, a3, a2);
      if (!(_DWORD)result)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    v10 = 0;
  }
  v15 = (ACFULogging *)ACFULogging::getLogInstance((ACFULogging *)v5);
  result = (ACFULogging *)ACFULogging::initLog(v15, v10, a3, a2);
  if ((_DWORD)result)
  {
LABEL_14:
    ACFULogging::getLogInstance(result);
    return (ACFULogging *)ACFULogging::handleMessage();
  }
LABEL_17:
  qword_253D372D8 = (uint64_t)a3;
  unk_253D372E0 = a2;
  return result;
}

double BBUPersonalizationParameters::create(BBUPersonalizationParameters *this)
{
  int PersonalizationParameters;
  double result;
  char *v3;
  char *v4;
  void *exception;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  PersonalizationParameters = capabilities::updater::getPersonalizationParameters(this);
  if (PersonalizationParameters)
  {
    if (PersonalizationParameters == 1)
    {
      v4 = (char *)operator new(0x60uLL);
      result = 0.0;
      *(_OWORD *)(v4 + 8) = 0u;
      *(_OWORD *)(v4 + 24) = 0u;
      *(_OWORD *)(v4 + 40) = 0u;
      *(_OWORD *)(v4 + 56) = 0u;
      *(_OWORD *)(v4 + 72) = 0u;
      *((_DWORD *)v4 + 22) = 0;
      *(_QWORD *)v4 = &unk_24CE832B0;
    }
    else if (PersonalizationParameters == 2)
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Personalization/Common/BBUPersonalizationParameters.cpp", 0x15u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized radio type.\")", v6, v7, v8, v9);
    }
  }
  else
  {
    v3 = (char *)operator new(0x60uLL);
    result = 0.0;
    *(_OWORD *)(v3 + 8) = 0u;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *((_DWORD *)v3 + 22) = 0;
    *(_QWORD *)v3 = &unk_24CE85A30;
  }
  return result;
}

void sub_212AFAF20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUPersonalizationParameters::setPublicKeyHash(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 40) = a2;
  return result;
}

uint64_t BBUEUR2Programmer::BBUEUR2Programmer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void *exception;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v5 = BBUEURProgrammer::BBUEURProgrammer(a1, a2, a3, a4);
  *(_QWORD *)v5 = off_24CE83568;
  pthread_mutex_init((pthread_mutex_t *)(v5 + 88), 0);
  *(_QWORD *)(a1 + 4284) = 0x4000000000000;
  *(_BYTE *)(a1 + 4292) = 0;
  if ((TelephonyUtilRingBufferInitialize() & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 95, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x60u, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Failed to initialize ring buffer.\")", v8, v9, v10, v11);
  }
  return a1;
}

void sub_212AFB028(_Unwind_Exception *a1)
{
  BBUICEProgrammer *v1;
  pthread_mutex_t *v2;
  void *v3;

  __cxa_free_exception(v3);
  pthread_mutex_destroy(v2);
  BBUICEProgrammer::~BBUICEProgrammer(v1);
  _Unwind_Resume(a1);
}

void BBUEUR2Programmer::~BBUEUR2Programmer(BBUEUR2Programmer *this)
{
  char *v2;
  uint64_t i;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  *(_QWORD *)this = off_24CE83568;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 88));
  *(_QWORD *)this = off_24CE84B60;
  v2 = (char *)this + 40;
  for (i = *((_QWORD *)this + 6); (char *)i != v2; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_QWORD *)(i + 16);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*((_QWORD *)this + 7))
  {
    v6 = *((_QWORD *)this + 5);
    v5 = (char *)*((_QWORD *)this + 6);
    v7 = *(_QWORD *)v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    *((_QWORD *)this + 7) = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (char *)*((_QWORD *)v5 + 1);
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
}

{
  char *v2;
  uint64_t i;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  *(_QWORD *)this = off_24CE83568;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 88));
  *(_QWORD *)this = off_24CE84B60;
  v2 = (char *)this + 40;
  for (i = *((_QWORD *)this + 6); (char *)i != v2; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_QWORD *)(i + 16);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*((_QWORD *)this + 7))
  {
    v6 = *((_QWORD *)this + 5);
    v5 = (char *)*((_QWORD *)this + 6);
    v7 = *(_QWORD *)v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    *((_QWORD *)this + 7) = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (char *)*((_QWORD *)v5 + 1);
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
}

{
  char *v2;
  uint64_t i;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  *(_QWORD *)this = off_24CE83568;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 88));
  *(_QWORD *)this = off_24CE84B60;
  v2 = (char *)this + 40;
  for (i = *((_QWORD *)this + 6); (char *)i != v2; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_QWORD *)(i + 16);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*((_QWORD *)this + 7))
  {
    v6 = *((_QWORD *)this + 5);
    v5 = (char *)*((_QWORD *)this + 6);
    v7 = *(_QWORD *)v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    *((_QWORD *)this + 7) = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (char *)*((_QWORD *)v5 + 1);
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  operator delete(this);
}

uint64_t BBUEUR2Programmer::connectForImage_nl(uint64_t a1, int *a2)
{
  int v4;
  __int128 v6;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **p_p;
  void *exception;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void *__p;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  BBUFeedback::handleBeginQuickStep(*(BBUFeedback **)(a1 + 8), "Waiting for Hello");
  v33 = -1431655766;
  __p = 0;
  v31 = 0;
  v32 = 0;
  v4 = -8;
  do
  {
    *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v40 = v6;
    v41 = v6;
    v38 = v6;
    v39 = v6;
    v36 = v6;
    v37 = v6;
    v34 = v6;
    v35 = v6;
    if (ETLSAHCommandReceive() && ETLSAHCommandParseHello())
    {
      if (v33 != 256 && *(_DWORD *)(a1 + 4284) == 2)
        v8 = 2;
      else
        v8 = v33;
      *a2 = v8;
      if ((ETLSAHCommandCreateHelloResponse() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0xA7u, (ctu::LogMessageBuffer *)"Assertion failure(success)", v26, v27, v28, v29);
      }
      if ((ETLSAHCommandSend() & 1) != 0)
      {
        v9 = 0;
        v10 = 0;
        goto LABEL_15;
      }
    }
  }
  while (!__CFADD__(v4++, 1));
  v10 = 3;
  v9 = 1;
LABEL_15:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v10);
  if ((v9 & 1) != 0)
    goto LABEL_32;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      goto LABEL_20;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      goto LABEL_20;
  }
  if (gBBULogVerbosity >= 1)
  {
    v14 = ETLSAHModeAsString();
    _BBULog(13, 1, "BBUProgrammer", (const char *)&str_8_5, "Hello received boot mode:  %s\n", v15, v16, v17, v14);
    if (gBBULogMaskGet(void)::once != -1)
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_23;
      goto LABEL_21;
    }
  }
LABEL_20:
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
    goto LABEL_23;
LABEL_21:
  if (gBBULogVerbosity >= 1)
  {
    v18 = ETLSAHModeAsString();
    _BBULog(13, 1, "BBUProgrammer", (const char *)&str_8_5, "Hello response boot mode:  %s\n", v19, v20, v21, v18);
  }
LABEL_23:
  v22 = HIBYTE(v32);
  if (v32 < 0)
    v22 = v31;
  if (v22)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_32;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_32;
    }
    if (gBBULogVerbosity >= 1)
    {
      p_p = &__p;
      if (v32 < 0)
        LOBYTE(p_p) = (_BYTE)__p;
      _BBULog(13, 1, "BBUProgrammer", (const char *)&str_8_5, "Hello reserved fields:  %s\n", v11, v12, v13, (char)p_p);
    }
  }
LABEL_32:
  if (SHIBYTE(v32) < 0)
    operator delete(__p);
  return v10;
}

void sub_212AFB6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BBUEUR2Programmer::disconnect(BBUEUR2Programmer *this)
{
  void *exception;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (!*((_BYTE *)this + 32))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 74, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBUProgrammer.cpp", 0x10Fu, (ctu::LogMessageBuffer *)"Assertion failure(fConnected && \"Cannot finish disconnection, since BBU programmer is already (falsely) recognized as disconnected!\")", v3, v4, v5, v6);
  }
  *((_BYTE *)this + 32) = 0;
  if (*((_BYTE *)this + 65))
    *((_BYTE *)this + 65) = 0;
  return 0;
}

void sub_212AFB750(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR2Programmer::disconnectForImage_nl(BBUFeedback **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  BBUFeedback::handleBeginQuickStep(this[1], "Disconnecting");
  if (ETLSAHCommandCreateDone())
    ETLSAHCommandSend();
  if (!ETLSAHCommandReceive() || !ETLSAHCommandParseDoneResponse())
  {
    v5 = 3;
    goto LABEL_10;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    v5 = 0;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      goto LABEL_10;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v5 = 0;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      goto LABEL_10;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    _BBULog(13, 0, "BBUProgrammer", (const char *)&str_8_5, "Status was %u\n", v2, v3, v4, 170);
    v5 = 0;
  }
LABEL_10:
  (*(void (**)(BBUFeedback *, uint64_t))(*(_QWORD *)this[1] + 24))(this[1], v5);
  return v5;
}

uint64_t BBUEUR2Programmer::gatherPersonalizationParameters(BBUFeedback **this, char a2, char a3, unsigned int *a4, BBUPersonalizationParameters *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t Nonce_nl;
  UInt8 *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BBUFeedback *v20;
  void **v21;
  BBUFeedback *v22;
  const char *v23;
  void **v24;
  const char *v25;
  BBUFeedback *v26;
  int v27;
  BBUFeedback *v28;
  int v29;
  char v30;
  void *__p[2];
  char v32;
  int v33;

  if ((a3 & 1) != 0)
  {
    v33 = -1431655766;
    BBUFeedback::handleBeginPhase(this[1], "Gathering Personalization parameters...");
    if ((*((unsigned int (**)(BBUFeedback **, int *))*this + 23))(this, &v33))
    {
      Nonce_nl = 48;
    }
    else if (v33 == 2)
    {
      Nonce_nl = 28;
    }
    else if (v33 == 256)
    {
      v14 = (UInt8 *)operator new(0x20uLL);
      Nonce_nl = BBUEUR2Programmer::handleMaverickGetNonce_nl((uint64_t)this, a2);
      if (!(_DWORD)Nonce_nl)
      {
        v15 = operator new(0x10uLL);
        *v15 = off_24CE848F8;
        v15[1] = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v14 + 4, 20);
        v16 = BBUEURPersonalizationParameters::EURChipID::createFromChipID((BBUEURPersonalizationParameters::EURChipID *)*((unsigned int *)v14 + 7));
        v17 = BBUEURPersonalizationParameters::EURSerialNumber::createFromSerialNumber((BBUEURPersonalizationParameters::EURSerialNumber *)(v14 + 24), (const unsigned __int8 *)0x20);
        *a4 = *(_DWORD *)v14;
        operator delete(v14);
        v18 = *((_QWORD *)a5 + 1);
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        *((_QWORD *)a5 + 1) = v15;
        v19 = *((_QWORD *)a5 + 2);
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        *((_QWORD *)a5 + 2) = v16;
        (*(void (**)(BBUPersonalizationParameters *, _QWORD *))(*(_QWORD *)a5 + 16))(a5, v17);
        v20 = this[1];
        (*(void (**)(void **__return_ptr, _QWORD *))(*v15 + 24))(__p, v15);
        if (v32 >= 0)
          v21 = __p;
        else
          v21 = (void **)__p[0];
        BBUFeedback::handleComment(v20, "   NONCE: %s", (const char *)v21);
        if (v32 < 0)
          operator delete(__p[0]);
        if (v17)
        {
          v22 = this[1];
          (*(void (**)(void **__return_ptr, _QWORD *))(*v17 + 24))(__p, v17);
          if (v32 >= 0)
            v24 = __p;
          else
            v24 = (void **)__p[0];
          v25 = BBUpdaterCommon::redactedString((BBUpdaterCommon *)v24, v23);
          BBUFeedback::handleComment(v22, "   SNUM: 0x%s", v25);
          if (v32 < 0)
            operator delete(__p[0]);
          v26 = this[1];
          v27 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a5 + 3) + 24))(*((_QWORD *)a5 + 3));
          BBUFeedback::handleComment(v26, "   CertID: %u", v27);
        }
        v28 = this[1];
        v29 = (*(uint64_t (**)(_QWORD *))(*v16 + 24))(v16);
        BBUFeedback::handleComment(v28, "   CHIPID: 0x%08x", v29);
        Nonce_nl = 0;
      }
    }
    else
    {
      Nonce_nl = 12;
    }
    (*(void (**)(BBUFeedback *, uint64_t))(*(_QWORD *)this[1] + 16))(this[1], Nonce_nl);
  }
  else
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      Nonce_nl = 0;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        return Nonce_nl;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      Nonce_nl = 0;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        return Nonce_nl;
    }
    if (gBBULogVerbosity >= 1)
    {
      _BBULog(13, 1, "BBUProgrammer", (const char *)&str_8_5, "Not in restore mode - skipping gathering Personalization parameters...\n", a6, a7, a8, v30);
      return 0;
    }
  }
  return Nonce_nl;
}

void sub_212AFBBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BBUEUR2Programmer::handleMaverickGetNonce_nl(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;

  v7 = operator new[](0x400uLL);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      goto LABEL_5;
  }
  if (gBBULogVerbosity >= 1)
    _BBULog(13, 1, "BBUProgrammer", (const char *)&str_8_5, "Starting Maverick Protocol\n", v4, v5, v6, v16);
LABEL_5:
  if (ETLSAHCommandReceive()
    && ETLSAHCommandParseMaverickEraseQuery()
    && ETLSAHCommandCreateMaverickEraseResponse())
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
        goto LABEL_10;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
      {
LABEL_10:
        if (gBBULogVerbosity >= 1)
          _BBULog(13, 1, "BBUProgrammer", (const char *)&str_8_5, "Sending Erase Response: Length %u Type %u  Erase EFS %u\n", v8, v9, v10, v7[1]);
      }
    }
    ETLSAHCommandSend();
    *(_BYTE *)(a1 + 65) = a2;
  }
  if (!ETLSAHCommandReceive())
  {
    v14 = 3;
    goto LABEL_22;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
      goto LABEL_16;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
    {
LABEL_16:
      if (gBBULogVerbosity >= 1)
        _BBULog(13, 1, "BBUProgrammer", (const char *)&str_8_5, "Checking Manifest Request: Length %u Type %u\n", v11, v12, v13, v7[1]);
    }
  }
  if (ETLSAHCommandParseMaverickRootManifestQuery())
    v14 = 0;
  else
    v14 = 3;
LABEL_22:
  operator delete[](v7);
  return v14;
}

uint64_t BBUEUR2Programmer::program(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, int a11, int a12)
{
  pthread_mutex_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  void *exception;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v19 = (pthread_mutex_t *)(a1 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  *(_DWORD *)(a1 + 4284) = a11;
  pthread_mutex_unlock(v19);
  if (BBUProgrammer::addItemsFromList(a1, (uint64_t)a6))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x177u, (ctu::LogMessageBuffer *)"Assertion failure(( ret == kBBUReturnSuccess) && \"Failed to add Programmer items from list.\")", v27, v28, v29, v30);
  }
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, int))(*(_QWORD *)a1 + 160))(a1, a2, a3, a4, a5, a7, a9, a10, a12);
  pthread_mutex_lock(v19);
  if (a6)
  {
    if (a6[2])
    {
      v22 = *a6;
      v21 = (uint64_t *)a6[1];
      v23 = *v21;
      *(_QWORD *)(v23 + 8) = *(_QWORD *)(*a6 + 8);
      **(_QWORD **)(v22 + 8) = v23;
      a6[2] = 0;
      if (v21 != a6)
      {
        do
        {
          v24 = (uint64_t *)v21[1];
          operator delete(v21);
          v21 = v24;
        }
        while (v24 != a6);
      }
    }
    operator delete(a6);
  }
  pthread_mutex_unlock(v19);
  return v20;
}

void sub_212AFBFF4(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;
  void *v2;

  __cxa_free_exception(v2);
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR2Programmer::sendImage_nl(BBUFeedback **a1, void *lpsrc, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  int v23;
  int v24;
  BBUFeedback *v25;
  __int128 v26;
  uint64_t Nonce_nl;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  char v38;
  int v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (lpsrc)
  else
    v15 = 0;
  (*(void (**)(_QWORD *))(*v15[2] + 16))(v15[2]);
  v39 = -1431655766;
  if ((a5 & 1) == 0)
  {
    while (1)
    {
      v22 = (*((uint64_t (**)(BBUFeedback **, int *))*a1 + 23))(a1, &v39);
      if ((_DWORD)v22)
        return v22;
      if (v39 != 256)
      {
        if (v39 == 2)
          return 28;
        v23 = *((_DWORD *)v15 + 2);
        if (v23 == 0x2000)
        {
          v24 = 2;
          v25 = a1[1];
          if (!*((_BYTE *)v25 + 44))
            goto LABEL_29;
        }
        else
        {
          if (v23 != 8193)
          {
            v33 = 0;
LABEL_31:
            v20 = (*((uint64_t (**)(BBUFeedback **, _QWORD *, uint64_t))*a1 + 22))(a1, v15[2], v33);
            if ((_DWORD)v33)
              BBUFeedback::endProgressBarItem(a1[1]);
            v34 = 1;
            if ((_DWORD)v20)
              return v20;
            goto LABEL_41;
          }
          v24 = 5;
          v25 = a1[1];
          if (!*((_BYTE *)v25 + 44))
          {
LABEL_29:
            v33 = 1;
            goto LABEL_31;
          }
        }
        *((_DWORD *)v25 + 10) = v24;
        goto LABEL_29;
      }
      *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v40 = v26;
      v41 = v26;
      Nonce_nl = BBUEUR2Programmer::handleMaverickGetNonce_nl((uint64_t)a1, a7);
      if ((_DWORD)Nonce_nl)
      {
        v20 = Nonce_nl;
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
            goto LABEL_40;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
            goto LABEL_40;
        }
        v31 = "failed getting nonce\n";
        if ((gBBULogVerbosity & 0x80000000) == 0)
          goto LABEL_39;
      }
      else
      {
        v32 = (*((uint64_t (**)(BBUFeedback **, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t))*a1 + 24))(a1, a3, v40, a6, a7, 0, a8);
        if ((_DWORD)v32)
        {
          v20 = v32;
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
              goto LABEL_40;
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
              goto LABEL_40;
          }
          v31 = "failed handling sahara send hashes command\n";
          if ((gBBULogVerbosity & 0x80000000) == 0)
            goto LABEL_39;
        }
        else
        {
          v20 = (*((uint64_t (**)(BBUFeedback **))*a1 + 25))(a1);
          if (!(_DWORD)v20)
            goto LABEL_40;
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
              goto LABEL_40;
LABEL_38:
            v31 = "failed handling maverick end\n";
            if (gBBULogVerbosity < 0)
              goto LABEL_40;
LABEL_39:
            _BBULog(5, 0, "BBUProgrammer", (const char *)&str_8_5, v31, v28, v29, v30, v38);
            goto LABEL_40;
          }
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
            goto LABEL_38;
        }
      }
LABEL_40:
      v34 = 0;
      if ((_DWORD)v20)
        return v20;
LABEL_41:
      v22 = BBUEUR2Programmer::disconnectForImage_nl(a1);
      if ((_DWORD)v22)
        v35 = 1;
      else
        v35 = v34;
      if (v35 == 1)
        return v22;
    }
  }
  v16 = (*((uint64_t (**)(BBUFeedback **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*a1 + 24))(a1, a3, a4, a6, a7, 1, a8);
  if ((_DWORD)v16)
  {
    v20 = v16;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
        return v20;
      goto LABEL_8;
    }
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
    {
LABEL_8:
      if (gBBULogVerbosity < 0)
        return v20;
      v21 = "failed handling sahara send hashes command\n";
LABEL_58:
      _BBULog(5, 0, "BBUProgrammer", (const char *)&str_8_5, v21, v17, v18, v19, v38);
      return v20;
    }
    return v20;
  }
  v36 = (*((uint64_t (**)(BBUFeedback **))*a1 + 25))(a1);
  if ((_DWORD)v36)
  {
    v20 = v36;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
        return v20;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
        return v20;
    }
    if (gBBULogVerbosity < 0)
      return v20;
    v21 = "failed handling maverick end\n";
    goto LABEL_58;
  }
  return BBUEUR2Programmer::disconnectForImage_nl(a1);
}

uint64_t BBUEUR2Programmer::collectCoreDump(BBUFeedback **a1, uint64_t a2)
{
  void *v4;
  size_t v5;
  int v6;
  int v7;
  BBUFeedback *v8;
  const char *v9;
  uint64_t v10;
  void *v12;
  std::string v13;
  std::string v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = operator new[](0x8000uLL);
  v15 = -1431655766;
  BBUFeedback::handleBeginPhase(a1[1], "Collecting core dump...");
  if ((ETLSAHGetDebugRecordCount() & 1) != 0)
  {
    if (is_mul_ok(v15, 0x34uLL))
      v5 = 52 * v15;
    else
      v5 = -1;
    v12 = operator new[](v5);
    v6 = ETLSAHGetDebugTable();
  }
  else
  {
    BBUFeedback::handleComment(a1[1], "Failed to get debug table\n");
    v12 = 0;
    v6 = 0;
  }
  if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
  {
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
      goto LABEL_9;
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
    {
LABEL_9:
      if (!(BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS))
        goto LABEL_15;
      goto LABEL_10;
    }
  }
  dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
  if (!(BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS))
    goto LABEL_15;
LABEL_10:
  BBUFeedback::handleComment(a1[1], "Parsing crash reason...");
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v14 = *(std::string *)a2;
  (*((void (**)(BBUFeedback **, std::string *))*a1 + 26))(a1, &v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
LABEL_15:
  if (v6 && ETLSAHCommandCreateReset())
  {
    v7 = ETLSAHCommandSend();
    v8 = a1[1];
    v9 = (const char *)a2;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_21;
  }
  else
  {
    v7 = 0;
    v8 = a1[1];
    v9 = (const char *)a2;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_21;
  }
  v9 = *(const char **)a2;
LABEL_21:
  BBUFeedback::handleComment(v8, "Final coredump at %s:", v9);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v13 = *(std::string *)a2;
  ctu::fs::iterate_folder();
  if (v7)
    v10 = 0;
  else
    v10 = 3;
  operator delete[](v4);
  if (v12)
    operator delete[](v12);
  (*(void (**)(BBUFeedback *, uint64_t))(*(_QWORD *)a1[1] + 16))(a1[1], v10);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v10;
}

void sub_212AFCCFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a33 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN17BBUEUR2Programmer15collectCoreDumpENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  timespec v4;
  const char *v5;
  int v6;
  std::string *v7;
  std::string v8;
  stat v9;

  v3 = *(_QWORD *)(a1 + 32);
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v9.st_blksize = v4;
  *(timespec *)v9.st_qspare = v4;
  v9.st_birthtimespec = v4;
  *(timespec *)&v9.st_size = v4;
  v9.st_mtimespec = v4;
  v9.st_ctimespec = v4;
  *(timespec *)&v9.st_uid = v4;
  v9.st_atimespec = v4;
  *(timespec *)&v9.st_dev = v4;
  v5 = (const char *)(a2 + 21);
  memset(&v8, 170, sizeof(v8));
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    v8 = *(std::string *)(a1 + 40);
  ctu::path_join_impl();
  v6 = *(unsigned __int8 *)(a2 + 20);
  if (v6 == 4)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(v3 + 8), "\t%-30s  <DIR>", v5);
  }
  else if (v6 == 10 || v6 == 8)
  {
    memset(&v9, 0, sizeof(v9));
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v8;
    else
      v7 = (std::string *)v8.__r_.__value_.__r.__words[0];
    stat((const char *)v7, &v9);
    BBUFeedback::handleComment(*(BBUFeedback **)(v3 + 8), "\t%-30s  0x%-10llx", v5, v9.st_size);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_212AFCEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void ___ZN17BBUEUR2Programmer16captureRecord_nlENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPK28ETLSAHDebugDataFieldRecord_t_block_invoke(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      return;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      return;
  }
  if (gBBULogVerbosity >= 1)
    _BBULog(13, 1, "BBUProgrammer", (const char *)&str_8_5, "%s: ... %0.1f%c\n", a6, a7, a8, a3 + 32);
}

uint64_t BBUEUR2Programmer::sendImageInternal_nl(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  size_t v8;
  size_t v9;
  void **p_dst;
  uint64_t v11;
  uint64_t v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  void *v19;
  double Current;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char Data;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  double v57;
  char i;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  CFAbsoluteTime v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *exception;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  unsigned int v79;
  std::string::value_type __s[8];
  char v82;
  void **__dst;
  std::string::size_type v84;
  int64_t v85;
  std::string v86;
  std::string v87;
  __int128 v88;
  std::string::size_type v89;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v6 = *(_QWORD *)(a1 + 8);
  *((_BYTE *)&v86.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v86, "Sending Image '");
  v7 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    v84 = v9;
    v85 = v12 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v85) = v8;
  p_dst = (void **)&__dst;
  if (v8)
LABEL_8:
    memmove(p_dst, v7, v9);
  *((_BYTE *)p_dst + v9) = 0;
  if (v85 >= 0)
    v13 = (const std::string::value_type *)&__dst;
  else
    v13 = (const std::string::value_type *)__dst;
  if (v85 >= 0)
    v14 = HIBYTE(v85);
  else
    v14 = v84;
  v15 = std::string::append(&v86, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v87.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v82 = 1;
  strcpy(__s, "'");
  v17 = std::string::append(&v87, __s, 1uLL);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v89 = v17->__r_.__value_.__r.__words[2];
  v88 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)v6 + 32))(v6, &v88, 0, v5);
  if (SHIBYTE(v89) < 0)
  {
    operator delete((void *)v88);
    if ((v82 & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_18;
      goto LABEL_34;
    }
  }
  else if ((v82 & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(*(void **)__s);
  if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v85) & 0x80000000) == 0)
      goto LABEL_19;
LABEL_35:
    operator delete(__dst);
    if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_34:
  operator delete(v87.__r_.__value_.__l.__data_);
  if (SHIBYTE(v85) < 0)
    goto LABEL_35;
LABEL_19:
  if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_20;
LABEL_36:
  operator delete(v86.__r_.__value_.__l.__data_);
LABEL_20:
  v19 = operator new[](0x100000uLL);
  LODWORD(v88) = -1431655766;
  LODWORD(v87.__r_.__value_.__l.__data_) = -1431655766;
  LODWORD(v86.__r_.__value_.__l.__data_) = -1431655766;
  Current = CFAbsoluteTimeGetCurrent();
  if ((ETLSAHCommandReceive() & 1) == 0)
    goto LABEL_26;
  Data = ETLSAHCommandParseReadData();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
      goto LABEL_25;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
      goto LABEL_25;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(5, 0, "BBUProgrammer", (const char *)&str_8_5, "First request image ID %u, data offset %u, data length %u\n", v21, v22, v23, v88);
LABEL_25:
  if ((Data & 1) != 0)
    goto LABEL_89;
LABEL_26:
  if (!ETLSAHCommandReceive())
    goto LABEL_41;
  v28 = ETLSAHCommandParseReadData();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
      goto LABEL_40;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
    {
LABEL_40:
      if ((v28 & 1) != 0)
        goto LABEL_89;
      goto LABEL_41;
    }
  }
  if (gBBULogVerbosity < 0)
    goto LABEL_40;
  _BBULog(5, 0, "BBUProgrammer", (const char *)&str_8_5, "First request image ID %u, data offset %u, data length %u\n", v25, v26, v27, v88);
  if ((v28 & 1) != 0)
    goto LABEL_89;
LABEL_41:
  if (!ETLSAHCommandReceive())
    goto LABEL_49;
  v32 = ETLSAHCommandParseReadData();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
      goto LABEL_48;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
    {
LABEL_48:
      if ((v32 & 1) != 0)
        goto LABEL_89;
      goto LABEL_49;
    }
  }
  if (gBBULogVerbosity < 0)
    goto LABEL_48;
  _BBULog(5, 0, "BBUProgrammer", (const char *)&str_8_5, "First request image ID %u, data offset %u, data length %u\n", v29, v30, v31, v88);
  if ((v32 & 1) != 0)
    goto LABEL_89;
LABEL_49:
  if (!ETLSAHCommandReceive())
    goto LABEL_57;
  v36 = ETLSAHCommandParseReadData();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
      goto LABEL_56;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
    {
LABEL_56:
      if ((v36 & 1) != 0)
        goto LABEL_89;
      goto LABEL_57;
    }
  }
  if (gBBULogVerbosity < 0)
    goto LABEL_56;
  _BBULog(5, 0, "BBUProgrammer", (const char *)&str_8_5, "First request image ID %u, data offset %u, data length %u\n", v33, v34, v35, v88);
  if ((v36 & 1) != 0)
    goto LABEL_89;
LABEL_57:
  if (!ETLSAHCommandReceive())
    goto LABEL_65;
  v40 = ETLSAHCommandParseReadData();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
      goto LABEL_64;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
    {
LABEL_64:
      if ((v40 & 1) != 0)
        goto LABEL_89;
      goto LABEL_65;
    }
  }
  if (gBBULogVerbosity < 0)
    goto LABEL_64;
  _BBULog(5, 0, "BBUProgrammer", (const char *)&str_8_5, "First request image ID %u, data offset %u, data length %u\n", v37, v38, v39, v88);
  if ((v40 & 1) != 0)
    goto LABEL_89;
LABEL_65:
  if (!ETLSAHCommandReceive())
    goto LABEL_73;
  v44 = ETLSAHCommandParseReadData();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
      goto LABEL_72;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
    {
LABEL_72:
      if ((v44 & 1) != 0)
        goto LABEL_89;
      goto LABEL_73;
    }
  }
  if (gBBULogVerbosity < 0)
    goto LABEL_72;
  _BBULog(5, 0, "BBUProgrammer", (const char *)&str_8_5, "First request image ID %u, data offset %u, data length %u\n", v41, v42, v43, v88);
  if ((v44 & 1) != 0)
    goto LABEL_89;
LABEL_73:
  if (!ETLSAHCommandReceive())
    goto LABEL_81;
  v48 = ETLSAHCommandParseReadData();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
      goto LABEL_80;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
    {
LABEL_80:
      if ((v48 & 1) != 0)
        goto LABEL_89;
LABEL_81:
      if (!ETLSAHCommandReceive())
        goto LABEL_86;
      v52 = ETLSAHCommandParseReadData();
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
          goto LABEL_88;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
          goto LABEL_88;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        _BBULog(5, 0, "BBUProgrammer", (const char *)&str_8_5, "First request image ID %u, data offset %u, data length %u\n", v49, v50, v51, v88);
        if (v52)
          goto LABEL_89;
        goto LABEL_86;
      }
LABEL_88:
      if ((v52 & 1) != 0)
        goto LABEL_89;
LABEL_86:
      v53 = 0;
      v54 = 3;
      goto LABEL_126;
    }
  }
  if (gBBULogVerbosity < 0)
    goto LABEL_80;
  _BBULog(5, 0, "BBUProgrammer", (const char *)&str_8_5, "First request image ID %u, data offset %u, data length %u\n", v45, v46, v47, v88);
  if ((v48 & 1) == 0)
    goto LABEL_81;
LABEL_89:
  v55 = v86.__r_.__value_.__l.__data_;
  v56 = LODWORD(v86.__r_.__value_.__l.__data_) + LODWORD(v87.__r_.__value_.__l.__data_);
  if (v5 < LODWORD(v86.__r_.__value_.__l.__data_) + LODWORD(v87.__r_.__value_.__l.__data_))
    goto LABEL_140;
  v57 = 1.0 / (double)v5;
  v79 = v5;
  while (2)
  {
    if ((_DWORD)v5 == v56)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v55 = v86.__r_.__value_.__l.__data_;
    }
    for (i = 0; ; i = v64 ^ 1)
    {
      v60 = v55 >= 0x100000 ? 0x100000 : v55;
      (*(void (**)(uint64_t, void *, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, v19, v60, LODWORD(v87.__r_.__value_.__l.__data_));
      v64 = ETLSAHSendReadData();
      if (!v64)
        break;
      if (a3)
      {
        LODWORD(v65) = v87.__r_.__value_.__l.__data_;
        BBUFeedback::updateProgressBarItem(*(BBUFeedback **)(a1 + 8), (double)v65 * v57);
      }
      v59 = LODWORD(v87.__r_.__value_.__l.__data_) + v60;
      LODWORD(v87.__r_.__value_.__l.__data_) += v60;
      v55 = LODWORD(v86.__r_.__value_.__l.__data_) - v60;
      LODWORD(v86.__r_.__value_.__l.__data_) -= v60;
      if (!LODWORD(v86.__r_.__value_.__l.__data_))
        goto LABEL_111;
LABEL_95:
      ;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
        goto LABEL_106;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
        goto LABEL_106;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
      _BBULog(5, 0, "BBUProgrammer", (const char *)&str_8_5, "Failed to send read data at offset 0x%x, chunk %u\n", v61, v62, v63, v87.__r_.__value_.__s.__data_[0]);
LABEL_106:
    if ((i & 1) != 0)
      break;
    sched_yield();
    usleep(0x64u);
    v55 = v86.__r_.__value_.__l.__data_;
    if (LODWORD(v86.__r_.__value_.__l.__data_))
      goto LABEL_95;
    v59 = v87.__r_.__value_.__l.__data_;
LABEL_111:
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), v59);
    if (ETLSAHCommandReceive())
    {
      LODWORD(v5) = v79;
      if (v79 != v56)
      {
        if (ETLSAHCommandParseReadData())
        {
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
            {
LABEL_116:
              if ((gBBULogVerbosity & 0x80000000) == 0)
                _BBULog(5, 0, "BBUProgrammer", (const char *)&str_8_5, "request image ID %u, data offset 0x%x, data length %u\n", v66, v67, v68, v88);
            }
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
              goto LABEL_116;
          }
          v55 = v86.__r_.__value_.__l.__data_;
          v56 = LODWORD(v86.__r_.__value_.__l.__data_) + LODWORD(v87.__r_.__value_.__l.__data_);
          if (v79 < LODWORD(v86.__r_.__value_.__l.__data_) + LODWORD(v87.__r_.__value_.__l.__data_))
          {
LABEL_140:
            exception = __cxa_allocate_exception(0x210uLL);
            _BBUException::_BBUException((uint64_t)exception, 72, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x317u, (ctu::LogMessageBuffer *)"Assertion failure(( imagePayloadDataLength >=(dataOffset + dataLength)) && \"Error: Chunk size is not sufficient to write payload data!\")", v75, v76, v77, v78);
          }
          continue;
        }
LABEL_135:
        v53 = 0;
        v54 = 12;
        goto LABEL_126;
      }
      LODWORD(__dst) = -1431655766;
      *(_DWORD *)__s = -1431655766;
      if (!ETLSAHCommandParseEndOfImageTransfer())
        goto LABEL_135;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
        {
LABEL_132:
          if ((gBBULogVerbosity & 0x80000000) == 0)
            _BBULog(5, 0, "BBUProgrammer", (const char *)&str_8_5, "end of image %u\n", v71, v72, v73, v88);
        }
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
          goto LABEL_132;
      }
      v54 = 0;
      v53 = 1;
      goto LABEL_126;
    }
    break;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    v53 = 0;
    v54 = 12;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      goto LABEL_126;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v53 = 0;
    v54 = 12;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      goto LABEL_126;
  }
  if (gBBULogVerbosity >= 1)
  {
    _BBULog(13, 1, "BBUProgrammer", (const char *)&str_8_5, "Timeout on receiving read request\n", v61, v62, v63, v78);
    v53 = 0;
  }
LABEL_126:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v54);
  if (v53)
  {
    v69 = CFAbsoluteTimeGetCurrent();
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Took %f seconds", v69 - Current);
  }
  operator delete[](v19);
  return v54;
}

void sub_212AFDD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (*(char *)(v39 - 105) < 0)
  {
    operator delete(*(void **)(v39 - 128));
    if (a21 < 0)
    {
LABEL_5:
      operator delete(__p);
      if ((a39 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  if ((a39 & 0x80000000) == 0)
  {
LABEL_6:
    if (a27 < 0)
      goto LABEL_7;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a34);
  if (a27 < 0)
  {
LABEL_7:
    operator delete(a22);
    if ((a33 & 0x80000000) == 0)
LABEL_13:
      _Unwind_Resume(a1);
LABEL_12:
    operator delete(a28);
    goto LABEL_13;
  }
LABEL_11:
  if ((a33 & 0x80000000) == 0)
    goto LABEL_13;
  goto LABEL_12;
}

uint64_t BBUEUR2Programmer::processItems(_QWORD **a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  pthread_mutex_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *exception;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;

  if (!*((_BYTE *)a1 + 32))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 74, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x3AEu, (ctu::LogMessageBuffer *)"Assertion failure(fConnected && \"Not connected to programmer.\")", v26, v27, v28, v29);
  }
  v15 = (pthread_mutex_t *)(a1 + 11);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 11));
  BBUFeedback::handleBeginPhase((BBUFeedback *)a1[1], "Sending %zu Images", (size_t)a1[7] - 1);
  v16 = a1[6];
  if (v16 == a1 + 5)
  {
LABEL_9:
    v18 = 0;
    goto LABEL_10;
  }
  if ((a4 & 1) == 0)
  {
    while (1)
    {
      v19 = v16[2];
      if (!v19)
        break;
      v18 = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*a1)[21])(a1, v19, a2, a3, 0, a5, a7, a8);
      if ((_DWORD)v18)
        goto LABEL_10;
      v16 = (_QWORD *)v16[1];
      if (v16 == a1 + 5)
        goto LABEL_9;
    }
LABEL_11:
    v21 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v21, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x3BCu, (ctu::LogMessageBuffer *)"Assertion failure(item && \"Unable to create programmer item.\")", v22, v23, v24, v30);
  }
  v17 = v16[2];
  if (!v17)
    goto LABEL_11;
  v18 = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1)[21])(a1, v17, a2, a3, 1, a5, a7, a8);
LABEL_10:
  (*(void (**)(_QWORD *, uint64_t))(*a1[1] + 16))(a1[1], v18);
  pthread_mutex_unlock(v15);
  return v18;
}

void sub_212AFDF8C(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void BBUEUR2Programmer::setDebugParameters(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  uint64_t v5;
  unsigned int v6;
  _BYTE *v7;
  void **v8;
  void **v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  std::string::size_type size;
  int v14;
  std::string *v15;
  void **v16;
  std::string v17;
  std::string v18;
  void *__p[3];
  std::string v20;
  _QWORD v21[3];

  memset(v21, 170, sizeof(v21));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v20 = *(std::string *)a2;
  ctu::tokenize();
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    v4 = (void **)v21[0];
    v3 = (void **)v21[1];
    if (v21[1] != v21[0])
      goto LABEL_6;
  }
  else
  {
    v4 = (void **)v21[0];
    v3 = (void **)v21[1];
    if (v21[1] != v21[0])
    {
LABEL_6:
      v5 = 0;
      v6 = 0;
      v7 = (_BYTE *)(a1 + 4292);
      while (1)
      {
        v9 = &v4[3 * v5];
        memset(__p, 170, sizeof(__p));
        if (*((char *)v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v18, (const std::string::value_type *)*v9, (std::string::size_type)v9[1]);
        }
        else
        {
          v10 = *(_OWORD *)v9;
          v18.__r_.__value_.__r.__words[2] = (std::string::size_type)v9[2];
          *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v10;
        }
        ctu::tokenize();
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v18.__r_.__value_.__l.__data_);
          v11 = (void **)__p[0];
          if ((void *)((char *)__p[1] - (char *)__p[0]) != (void *)24)
          {
LABEL_15:
            if (v11)
              goto LABEL_32;
            goto LABEL_9;
          }
        }
        else
        {
          v11 = (void **)__p[0];
          if ((void *)((char *)__p[1] - (char *)__p[0]) != (void *)24)
            goto LABEL_15;
        }
        memset(&v17, 170, sizeof(v17));
        if (*((char *)v11 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v17, (const std::string::value_type *)*v11, (std::string::size_type)v11[1]);
        }
        else
        {
          v12 = *(_OWORD *)v11;
          v17.__r_.__value_.__r.__words[2] = (std::string::size_type)v11[2];
          *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
        }
        size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
        v14 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v17.__r_.__value_.__l.__size_;
        if (size != 4)
          goto LABEL_27;
        v15 = (std::string *)v17.__r_.__value_.__r.__words[0];
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &v17;
        if (LODWORD(v15->__r_.__value_.__l.__data_) == 1953068401)
        {
          *v7 = 1;
          if ((v14 & 0x80000000) == 0)
          {
LABEL_28:
            v11 = (void **)__p[0];
            if (__p[0])
              goto LABEL_32;
            goto LABEL_9;
          }
        }
        else
        {
LABEL_27:
          if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_28;
        }
        operator delete(v17.__r_.__value_.__l.__data_);
        v11 = (void **)__p[0];
        if (__p[0])
        {
LABEL_32:
          v16 = (void **)__p[1];
          v8 = v11;
          if (__p[1] != v11)
          {
            do
            {
              if (*((char *)v16 - 1) < 0)
                operator delete(*(v16 - 3));
              v16 -= 3;
            }
            while (v16 != v11);
            v8 = (void **)__p[0];
          }
          __p[1] = v11;
          operator delete(v8);
        }
LABEL_9:
        v4 = (void **)v21[0];
        v3 = (void **)v21[1];
        v5 = ++v6;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21[1] - v21[0]) >> 3) <= v6)
          goto LABEL_39;
      }
    }
  }
  v4 = v3;
LABEL_39:
  if (v4)
  {
    if (v3 != v4)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v4);
      v3 = (void **)v21[0];
    }
    v21[1] = v4;
    operator delete(v3);
  }
}

void sub_212AFE274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUEUR2Programmer::handleHashesQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  char *v9;
  size_t HashSize;
  size_t v11;
  size_t v12;
  __int128 v14;
  __int128 v15;
  _BYTE v16[28];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v16[12] = v7;
  v15 = v7;
  *(_OWORD *)v16 = v7;
  v14 = v7;
  if (!ETLSAHCommandParseMaverickSendHashesQuery())
    return 3;
  v8 = 0;
  if (a3 && a4)
  {
    v9 = (char *)operator new(0x68uLL);
    *(_QWORD *)v9 = &unk_24CE80BE0;
    HashSize = BBUEURHashData::getHashSize((BBUEURHashData *)v9);
    memcpy(v9 + 8, &v14, HashSize);
    v11 = (*(uint64_t (**)(char *))(*(_QWORD *)v9 + 32))(v9);
    memcpy(v9 + 40, (char *)&v15 + 4, v11);
    v12 = (*(uint64_t (**)(char *))(*(_QWORD *)v9 + 32))(v9);
    memcpy(v9 + 72, &v16[8], v12);
    (*(void (**)(char *, _QWORD))(*(_QWORD *)v9 + 24))(v9, *(_QWORD *)(a1 + 8));
    if ((*(unsigned int (**)(uint64_t, _QWORD, char *))(*(_QWORD *)a4 + 16))(a4, *(_QWORD *)(a1 + 8), v9))
      v8 = 0;
    else
      v8 = 33;
    (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
  }
  return v8;
}

void sub_212AFE424(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR2Programmer::handleMaverickHashData_nl(BBUFeedback **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned __int8 *a7)
{
  int DigestType;
  int v14;
  size_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  BBUFeedback *v26;
  const char *v27;
  NSObject *v28;
  BBUError *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count_vtbl *v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  NSObject *v53;
  unint64_t *v54;
  char MaverickHashResponse;
  BBUFeedback *v56;
  void *exception;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  void *v70;
  __int128 v71;
  uint64_t v72;
  void *v73;
  void *__p;
  char *v75;
  char *v76;
  _BYTE v77[24];
  void *v78;
  uint64_t v79;
  void **v80;
  int v81;
  _BYTE *v82;
  NSObject *block;
  uint64_t v84;
  _QWORD *(*v85)(uint64_t);
  void *v86;
  uint64_t v87;
  _QWORD *v88;

  DigestType = capabilities::updater::getDigestType((capabilities::updater *)a1);
  v14 = DigestType;
  if (DigestType == 1)
  {
    v15 = 32;
    if (!a6)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (DigestType != 2)
  {
    BBUFeedback::handleComment(a1[1], "Capabilities returned invalid hash_length");
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 1, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x45Bu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unsupported hash digest type.\")", v58, v59, v60, v69);
  }
  v15 = 48;
  if (a6)
LABEL_6:
    BBUFeedback::handleComment(a1[1], "Resuming Maverick Protocol");
LABEL_7:
  v16 = a3;
  if (a2)
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v17 = (char *)operator new(v15);
  v18 = &v17[v15];
  __p = v17;
  v76 = &v17[v15];
  bzero(v17, v15);
  v75 = v18;
  if (v16 <= a3)
  {
    v22 = operator new[](v16);
    if (a2)
    {
      *(_DWORD *)v77 = 0;
      v19 = (*(uint64_t (**)(uint64_t, void *, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)a2 + 16))(a2, v22, v16, v77, 0);
      if (v14 == 2)
        CC_SHA384(v22, v16, (unsigned __int8 *)__p);
      else
        CC_SHA256(v22, v16, (unsigned __int8 *)__p);
      if ((_DWORD)v19)
      {
        BBUFeedback::handleComment(a1[1], "failed copying root manifest to buffer\n");
        if (*(_DWORD *)v77 == (_DWORD)v16)
        {
          v23 = v22;
          goto LABEL_84;
        }
LABEL_94:
        v61 = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)v61, 76, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x48Bu, (ctu::LogMessageBuffer *)"Assertion failure(( copied == rootManifestSize) && \"Copied data size does not match root manifest size!\")", v62, v63, v64, v69);
      }
      if (*(_DWORD *)v77 != (_DWORD)v16)
        goto LABEL_94;
    }
    else
    {
      BBUFeedback::handleComment(a1[1], "No root manifest present\n");
      bzero(v22, v16);
    }
    v24 = (v16 + 1024) << 31 >> 31;
    if (v24 != v16 + 1024 || v24 < 0)
    {
      v65 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v65, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x49Du, (ctu::LogMessageBuffer *)"Assertion failure(success)", v66, v67, v68, v69);
    }
    v23 = operator new[](v24 & 0x1FFFFFFFFLL);
    if ((ETLSAHCommandCreateMaverickRootManifestResponse() & 1) == 0)
    {
      BBUFeedback::handleComment(a1[1], "failed createing maverick root manifest response\n");
      operator delete[](v22);
      v19 = 11;
      goto LABEL_84;
    }
    operator delete[](v22);
    v25 = ETLSAHCommandSend();
    v26 = a1[1];
    if (!v25)
    {
      BBUFeedback::handleComment(v26, "failed sending maverick root manifest response\n");
      goto LABEL_57;
    }
    ctu::hex();
    if (v77[23] >= 0)
      v27 = v77;
    else
      v27 = *(const char **)v77;
    BBUFeedback::handleComment(v26, "Sent Manifest with length %u, %s", v16, v27);
    if ((v77[23] & 0x80000000) != 0)
      operator delete(*(void **)v77);
    if ((int)v16 + 1024 >= v16 && (ETLSAHCommandReceive() & 1) != 0)
    {
      if ((*((unsigned int (**)(BBUFeedback **, void *, uint64_t, uint64_t))*a1 + 19))(a1, v23, a2, a4))
      {
        BBUFeedback::handleComment(a1[1], "failed handling hash query\n");
        pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        v28 = qword_253D31DC8;
        if (!qword_253D31DC8)
        {
          v29 = (BBUError *)operator new(0x38uLL);
          BBUError::BBUError(v29);
          std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)v77, (std::__shared_weak_count_vtbl *)v29);
          v30 = *(_OWORD *)v77;
          *(_QWORD *)v77 = 0;
          *(_QWORD *)&v77[8] = 0;
          v31 = (std::__shared_weak_count *)off_253D31DD0;
          *(_OWORD *)&qword_253D31DC8 = v30;
          if (v31)
          {
            p_shared_owners = (unint64_t *)&v31->__shared_owners_;
            do
              v33 = __ldaxr(p_shared_owners);
            while (__stlxr(v33 - 1, p_shared_owners));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          v34 = *(std::__shared_weak_count **)&v77[8];
          if (*(_QWORD *)&v77[8])
          {
            v35 = (unint64_t *)(*(_QWORD *)&v77[8] + 8);
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          v28 = qword_253D31DC8;
        }
        v37 = (std::__shared_weak_count *)off_253D31DD0;
        block = v28;
        v84 = (uint64_t)off_253D31DD0;
        if (off_253D31DD0)
        {
          v38 = (unint64_t *)((char *)off_253D31DD0 + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        *(_QWORD *)v77 = operator new(0x20uLL);
        *(_OWORD *)&v77[8] = xmmword_212B55030;
        strcpy(*(char **)v77, "Failed handling hash query");
        BBUError::addError((uint64_t)v28, (uint64_t)v77, 47);
        if ((v77[23] & 0x80000000) != 0)
          operator delete(*(void **)v77);
        if (!v37)
          goto LABEL_83;
        v40 = (unint64_t *)&v37->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        goto LABEL_81;
      }
      *a7 = 1;
      MaverickHashResponse = ETLSAHCommandCreateMaverickHashResponse();
      v56 = a1[1];
      if ((MaverickHashResponse & 1) == 0)
      {
        BBUFeedback::handleComment(v56, "failed creating maverick hash response\n");
        v19 = 11;
LABEL_84:
        operator delete[](v23);
        v20 = (char *)__p;
        if (!__p)
          return v19;
        goto LABEL_11;
      }
      BBUFeedback::handleComment(v56, "Sending Hash Response: value %u  success %u", *a7, 1);
      if ((ETLSAHCommandSend() & 1) != 0)
      {
        v19 = 0;
        goto LABEL_84;
      }
      BBUFeedback::handleComment(a1[1], "failed sending maverick hash response\n");
LABEL_57:
      v19 = 3;
      goto LABEL_84;
    }
    BBUFeedback::handleComment(a1[1], "failed reading hash query results\n");
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    v42 = qword_253D31DC8;
    if (!qword_253D31DC8)
    {
      v43 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
      block = 0;
      ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v43, "BBUError", QOS_CLASS_UTILITY, &block);
      if (block)
        dispatch_release(block);
      v43->__on_zero_shared_weak = 0;
      v43[1].~__shared_weak_count = 0;
      v43[1].~__shared_weak_count_0 = 0;
      std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)v77, v43);
      v44 = *(_OWORD *)v77;
      *(_QWORD *)v77 = 0;
      *(_QWORD *)&v77[8] = 0;
      v45 = (std::__shared_weak_count *)off_253D31DD0;
      *(_OWORD *)&qword_253D31DC8 = v44;
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = *(std::__shared_weak_count **)&v77[8];
      if (*(_QWORD *)&v77[8])
      {
        v49 = (unint64_t *)(*(_QWORD *)&v77[8] + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v42 = qword_253D31DC8;
    }
    v37 = (std::__shared_weak_count *)off_253D31DD0;
    v72 = v42;
    v73 = off_253D31DD0;
    if (off_253D31DD0)
    {
      v51 = (unint64_t *)((char *)off_253D31DD0 + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    v70 = operator new(0x28uLL);
    v71 = xmmword_212B55040;
    strcpy((char *)v70, "Failed reading hash query results");
    *(_QWORD *)v77 = MEMORY[0x24BDAC760];
    *(_QWORD *)&v77[8] = 0x40000000;
    *(_QWORD *)&v77[16] = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
    v78 = &__block_descriptor_tmp_6;
    v79 = v42;
    v80 = &v70;
    v81 = 47;
    v82 = v77;
    block = MEMORY[0x24BDAC760];
    v84 = 0x40000000;
    v85 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    v86 = &__block_descriptor_tmp_10;
    v87 = v42;
    v88 = &v82;
    v53 = *(NSObject **)(v42 + 16);
    if (*(_QWORD *)(v42 + 24))
    {
      dispatch_async_and_wait(v53, &block);
      if ((SHIBYTE(v71) & 0x80000000) == 0)
      {
LABEL_78:
        if (!v37)
        {
LABEL_83:
          v19 = 47;
          goto LABEL_84;
        }
        v54 = (unint64_t *)&v37->__shared_owners_;
        do
          v41 = __ldaxr(v54);
        while (__stlxr(v41 - 1, v54));
LABEL_81:
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
        goto LABEL_83;
      }
    }
    else
    {
      dispatch_sync(v53, &block);
      if ((SHIBYTE(v71) & 0x80000000) == 0)
        goto LABEL_78;
    }
    operator delete(v70);
    goto LABEL_78;
  }
  BBUFeedback::handleComment(a1[1], "root manifest larger than protocol specification, size = %u bytes", v16);
  v19 = 12;
  v20 = (char *)__p;
  if (__p)
  {
LABEL_11:
    v75 = v20;
    operator delete(v20);
  }
  return v19;
}

void sub_212AFEC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  operator delete(v24);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR2Programmer::handleMaverickEnd_nl(BBUFeedback **this)
{
  void *v2;
  uint64_t v3;

  v2 = operator new[](0x400uLL);
  if (ETLSAHCommandReceive())
  {
    if ((ETLSAHCommandMaverickParseEnd() & 1) != 0)
    {
      v3 = 0;
    }
    else
    {
      v3 = 11;
      BBUFeedback::handleComment(this[1], "failed parsing maverick end\n");
    }
  }
  else
  {
    v3 = 3;
    BBUFeedback::handleComment(this[1], "failed receiving maverick end\n");
  }
  operator delete[](v2);
  return v3;
}

void BBUEUR2Programmer::postCrashReason(uint64_t a1, const void **a2)
{
  int folder;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __darwin_ino64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  const void **v14;
  uint64_t v15;
  size_t v16;
  const void *v17;
  int v18;
  int v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  size_t v27;
  std::string *v28;
  __int128 v29;
  __darwin_ino64_t st_ino;
  void *v31;
  std::string *v32;
  char v33;
  int v34;
  size_t v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  int v41;
  const std::string::value_type *v42;
  std::string::size_type size;
  std::string *v44;
  __int128 v45;
  timespec v46;
  void **v47;
  void **v48;
  char v49;
  void **v50;
  int v51;
  off_t st_size;
  size_t st_size_low;
  void *v54;
  void **v55;
  __int128 v56;
  char v57;
  BBUFeedback *v58;
  void **v59;
  void **v60;
  std::string *v61;
  void *v62;
  void *exception;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  stat __p;
  void *v70[3];
  void *v71;
  std::string *v72;
  unint64_t v73;
  _BYTE __s2[32];
  __int128 v75;
  __int128 v76;
  _OWORD v77[16];
  unint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 8))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR2Programmer.cpp", 0x52Eu, (ctu::LogMessageBuffer *)"Assertion failure(fFeedback)", v64, v65, v66, v67);
  }
  v71 = 0;
  v72 = 0;
  v73 = 0;
  memset(&__p, 0, 24);
  folder = ctu::fs::read_folder();
  v7 = folder;
  v8 = 0;
  if (folder)
  {
    v9 = -1431655765 * ((__p.st_ino - *(_QWORD *)&__p.st_dev) >> 3);
    if ((_DWORD)v9)
    {
      v10 = folder;
      v11 = 0;
      v12 = 24 * v9;
      while (1)
      {
        v14 = (const void **)(*(_QWORD *)&__p.st_dev + v11);
        __s2[23] = 8;
        strcpy(__s2, "mav_core");
        v15 = *(unsigned __int8 *)(*(_QWORD *)&__p.st_dev + v11 + 23);
        if (*(char *)(*(_QWORD *)&__p.st_dev + v11 + 23) < 0)
        {
          v17 = *v14;
          if ((unint64_t)v14[1] >= 8)
            v16 = 8;
          else
            v16 = (size_t)v14[1];
        }
        else
        {
          if (v15 >= 8)
            v16 = 8;
          else
            v16 = *(unsigned __int8 *)(*(_QWORD *)&__p.st_dev + v11 + 23);
          v17 = (const void *)(*(_QWORD *)&__p.st_dev + v11);
        }
        v18 = memcmp(v17, __s2, v16);
        if (v16 != 8 || v18 != 0)
          goto LABEL_7;
        if ((v15 & 0x80) != 0)
        {
          v21 = *(_QWORD *)(*(_QWORD *)&__p.st_dev + v11 + 8);
          v22 = v21 > 4;
          v23 = v21 - 4;
          if (!v22)
          {
            v28 = v72;
            if ((unint64_t)v72 < v73)
              goto LABEL_39;
            goto LABEL_5;
          }
          __s2[23] = 4;
          strcpy(__s2, ".bin");
          v24 = *(_QWORD *)(*(_QWORD *)&__p.st_dev + v11 + 8);
          v25 = v24 >= v23;
          v26 = v24 - v23;
          if (!v25)
            std::string::__throw_out_of_range[abi:ne180100]();
          if (v26 >= 4)
            v27 = 4;
          else
            v27 = v26;
          v20 = memcmp((char *)*v14 + v23, __s2, v27);
          if (v27 != 4)
            goto LABEL_7;
        }
        else
        {
          if (v15 <= 4)
          {
            v28 = v72;
            if ((unint64_t)v72 < v73)
              goto LABEL_37;
            goto LABEL_5;
          }
          __s2[23] = 4;
          strcpy(__s2, ".bin");
          v20 = memcmp((char *)v14 + v15 - 4, __s2, 4uLL);
        }
        if (v20)
          goto LABEL_7;
        v28 = v72;
        if ((unint64_t)v72 < v73)
        {
          if ((v15 & 0x80) != 0)
          {
LABEL_39:
            std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)(*(_QWORD *)&__p.st_dev + v11), *(_QWORD *)(*(_QWORD *)&__p.st_dev + v11 + 8));
          }
          else
          {
LABEL_37:
            v29 = *(_OWORD *)v14;
            v28->__r_.__value_.__r.__words[2] = (std::string::size_type)v14[2];
            *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
          }
          v13 = v28 + 1;
          goto LABEL_6;
        }
LABEL_5:
        v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v71, (uint64_t)v14);
LABEL_6:
        v72 = v13;
LABEL_7:
        v11 += 24;
        if (v12 == v11)
        {
          v8 = *(_QWORD *)&__p.st_dev;
          v7 = v10;
          break;
        }
      }
    }
  }
  if (v8)
  {
    st_ino = __p.st_ino;
    v31 = (void *)v8;
    if (__p.st_ino != v8)
    {
      do
      {
        if (*(char *)(st_ino - 1) < 0)
          operator delete(*(void **)(st_ino - 24));
        st_ino -= 24;
      }
      while (st_ino != v8);
      v31 = *(void **)&__p.st_dev;
    }
    __p.st_ino = v8;
    operator delete(v31);
  }
  if ((v7 & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_124;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_124:
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(1, 0, "BBUProgrammer", (const char *)&str_8_5, "failed scanning coredump folder\n", v4, v5, v6, v67);
      }
    }
LABEL_126:
    v32 = (std::string *)v71;
    goto LABEL_127;
  }
  v32 = (std::string *)v71;
  if (v71 != v72)
  {
    while (1)
    {
      memset(v70, 170, sizeof(v70));
      v34 = *((char *)a2 + 23);
      if (v34 >= 0)
        v35 = *((unsigned __int8 *)a2 + 23);
      else
        v35 = (size_t)a2[1];
      v36 = v35 + 1;
      memset(__s2, 170, 24);
      if (v35 + 1 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v36 >= 0x17)
      {
        v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17)
          v38 = v36 | 7;
        v39 = v38 + 1;
        v37 = operator new(v38 + 1);
        *(_QWORD *)&__s2[8] = v35 + 1;
        *(_QWORD *)&__s2[16] = v39 | 0x8000000000000000;
        *(_QWORD *)__s2 = v37;
      }
      else
      {
        memset(__s2, 0, 24);
        v37 = __s2;
        __s2[23] = v35 + 1;
        if (!v35)
          goto LABEL_72;
      }
      if (v34 >= 0)
        v40 = a2;
      else
        v40 = *a2;
      memmove(v37, v40, v35);
LABEL_72:
      *(_WORD *)&v37[v35] = 47;
      v41 = SHIBYTE(v32->__r_.__value_.__r.__words[2]);
      if (v41 >= 0)
        v42 = (const std::string::value_type *)v32;
      else
        v42 = (const std::string::value_type *)v32->__r_.__value_.__r.__words[0];
      if (v41 >= 0)
        size = HIBYTE(v32->__r_.__value_.__r.__words[2]);
      else
        size = v32->__r_.__value_.__l.__size_;
      v44 = std::string::append((std::string *)__s2, v42, size);
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v70[2] = (void *)v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)v70 = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      if ((__s2[23] & 0x80000000) != 0)
        operator delete(*(void **)__s2);
      v46.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v46.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)__p.st_qspare = v46;
      *(timespec *)&__p.st_size = v46;
      *(timespec *)&__p.st_blksize = v46;
      __p.st_ctimespec = v46;
      __p.st_birthtimespec = v46;
      __p.st_atimespec = v46;
      __p.st_mtimespec = v46;
      *(timespec *)&__p.st_dev = v46;
      *(timespec *)&__p.st_uid = v46;
      if (SHIBYTE(v70[2]) >= 0)
        v47 = v70;
      else
        v47 = (void **)v70[0];
      if (stat((const char *)v47, &__p))
      {
        if (SHIBYTE(v70[2]) >= 0)
          v48 = v70;
        else
          v48 = (void **)v70[0];
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed on getting file status from (%s) \n", (const char *)v48);
        goto LABEL_88;
      }
      if (SHIBYTE(v70[2]) >= 0)
        v50 = v70;
      else
        v50 = (void **)v70[0];
      v51 = open((const char *)v50, 0);
      if (v51 < 0)
      {
        if (SHIBYTE(v70[2]) >= 0)
          v55 = v70;
        else
          v55 = (void **)v70[0];
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed on opening a file (%s).\n", (const char *)v55);
LABEL_88:
        v49 = 1;
        if ((SHIBYTE(v70[2]) & 0x80000000) == 0)
          goto LABEL_54;
        goto LABEL_53;
      }
      st_size = __p.st_size;
      st_size_low = LODWORD(__p.st_size);
      if (LODWORD(__p.st_size))
      {
        v54 = operator new(LODWORD(__p.st_size));
        bzero(v54, st_size_low);
      }
      else
      {
        v54 = 0;
      }
      if (read(v51, v54, st_size) < 0)
      {
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed on reading the file.\n");
      }
      else if ((ETLEFSDumpInterpret() & 1) != 0)
      {
        v78 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v56 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v56 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v77[14] = v56;
        v77[15] = v56;
        v77[12] = v56;
        v77[13] = v56;
        v77[10] = v56;
        v77[11] = v56;
        v77[8] = v56;
        v77[9] = v56;
        v77[6] = v56;
        v77[7] = v56;
        v77[4] = v56;
        v77[5] = v56;
        v77[2] = v56;
        v77[3] = v56;
        v77[0] = v56;
        v77[1] = v56;
        v75 = v56;
        v76 = v56;
        *(_OWORD *)__s2 = v56;
        *(_OWORD *)&__s2[16] = v56;
        v57 = ETLEFSDUmpCopyCrashLocationDetails();
        v58 = *(BBUFeedback **)(a1 + 8);
        if ((v57 & 1) != 0)
        {
          if (SHIBYTE(v70[2]) >= 0)
            v59 = v70;
          else
            v59 = (void **)v70[0];
          BBUFeedback::handleComment(v58, "File: %s", (const char *)v59);
          BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "\tCrash at %s:%d, Reason '%s', TID %d\n", &__s2[8], *(_DWORD *)&__s2[4], (const char *)v77 + 8, *(_DWORD *)__s2);
        }
        else
        {
          BBUFeedback::handleComment(v58, "Failed on parsing the information.\n");
        }
        if ((ETLEFSDumpInfoFree() & 1) == 0)
          BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed on freeing dumpInfo.\n");
      }
      else
      {
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed on interpreting the file.\n");
      }
      if (close(v51))
      {
        if (SHIBYTE(v70[2]) >= 0)
          v60 = v70;
        else
          v60 = (void **)v70[0];
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed on closing a file (%s).\n", (const char *)v60);
      }
      if (v54)
        operator delete(v54);
      v49 = 0;
      if ((SHIBYTE(v70[2]) & 0x80000000) == 0)
        goto LABEL_54;
LABEL_53:
      operator delete(v70[0]);
LABEL_54:
      if (++v32 == v72)
        v33 = 1;
      else
        v33 = v49;
      if ((v33 & 1) != 0)
        goto LABEL_126;
    }
  }
LABEL_127:
  if (v32)
  {
    v61 = v72;
    v62 = v32;
    if (v72 != v32)
    {
      do
      {
        if (SHIBYTE(v61[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v61[-1].__r_.__value_.__l.__data_);
        --v61;
      }
      while (v61 != v32);
      v62 = v71;
    }
    v72 = v32;
    operator delete(v62);
  }
}

void sub_212AFF51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  std::vector<std::string>::~vector[abi:ne180100](&a38);
  _Unwind_Resume(a1);
}

void sub_212AFF530(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212AFF544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  std::vector<std::string>::~vector[abi:ne180100](&a38);
  _Unwind_Resume(a1);
}

void sub_212AFF564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41)
{
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  std::vector<std::string>::~vector[abi:ne180100](&a41);
  _Unwind_Resume(a1);
}

void sub_212AFF58C()
{
  void *v0;

  if (v0)
    operator delete(v0);
  JUMPOUT(0x212AFF600);
}

void sub_212AFF5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  std::vector<std::string>::~vector[abi:ne180100](&a38);
  _Unwind_Resume(a1);
}

void sub_212AFF5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  std::vector<std::string>::~vector[abi:ne180100](&a38);
  _Unwind_Resume(a1);
}

void sub_212AFF5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](&a38);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x212AFF610);
}

void sub_212AFF5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41)
{
  if (a40 < 0)
    operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a41);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_17()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUError>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance, &dword_212A4D000);
  }
  return result;
}

uint64_t readStickyNvramItems(uint64_t *a1)
{
  _QWORD *v2;
  BBUPartitionManager *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  int v12;
  std::string *v13;
  void *v14;
  char v15;
  unint64_t *v16;
  unint64_t v17;
  timespec v18;
  const char *p_p;
  ACFULogging *v20;
  const char *v21;
  const void *v22;
  CFTypeRef v23;
  const void *v24;
  ACFULogging *v25;
  _QWORD v27[2];
  CFTypeRef cf;
  void *__p;
  __int128 v30;
  stat v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v30 = 0uLL;
  cf = 0;
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v2 = off_253D31E68;
  if (!off_253D31E68)
  {
    v3 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v3);
    v4 = operator new(0x20uLL);
    *v4 = &unk_24CE85728;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v3;
    v5 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v3;
    off_253D31E70 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v2 = off_253D31E68;
  }
  v8 = (std::__shared_weak_count *)off_253D31E70;
  v27[0] = v2;
  v27[1] = off_253D31E70;
  if (off_253D31E70)
  {
    v9 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v11 = (uint64_t *)v2[1];
  if (!v11)
LABEL_17:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v12 = *((_DWORD *)v11 + 8);
      if (v12 < 3)
        break;
      v11 = (uint64_t *)*v11;
      if (!v11)
        goto LABEL_17;
    }
    if (v12 == 2)
      break;
    v11 = (uint64_t *)v11[1];
    if (!v11)
      goto LABEL_17;
  }
  if (*((char *)v11 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v31, (const std::string::value_type *)v11[5], v11[6]);
  }
  else
  {
    *(_OWORD *)&v31.st_dev = *(_OWORD *)(v11 + 5);
    *(_QWORD *)&v31.st_uid = v11[7];
  }
  v13 = std::string::append((std::string *)&v31, "/sticky_nvram_items.plist", 0x19uLL);
  v14 = (void *)v13->__r_.__value_.__r.__words[0];
  v32[0] = v13->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v32 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
  v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30) < 0)
    operator delete(__p);
  __p = v14;
  *(_QWORD *)&v30 = v32[0];
  *(_QWORD *)((char *)&v30 + 7) = *(_QWORD *)((char *)v32 + 7);
  HIBYTE(v30) = v15;
  if (SHIBYTE(v31.st_gid) < 0)
    operator delete(*(void **)&v31.st_dev);
  if (v8)
  {
    v16 = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v18.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v18.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v31.st_blksize = v18;
  *(timespec *)v31.st_qspare = v18;
  v31.st_birthtimespec = v18;
  *(timespec *)&v31.st_size = v18;
  v31.st_mtimespec = v18;
  v31.st_ctimespec = v18;
  *(timespec *)&v31.st_uid = v18;
  v31.st_atimespec = v18;
  *(timespec *)&v31.st_dev = v18;
  if (v30 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v20 = (ACFULogging *)stat(p_p, &v31);
  if ((_DWORD)v20)
  {
    if (*((char *)a1 + 23) < 0)
    {
      a1[1] = 0;
      a1 = (uint64_t *)*a1;
    }
    else
    {
      *((_BYTE *)a1 + 23) = 0;
    }
    *(_BYTE *)a1 = 0;
    ACFULogging::getLogInstance(v20);
    ACFULogging::handleMessage();
    v22 = cf;
    if (!cf)
      goto LABEL_48;
    goto LABEL_47;
  }
  if (v30 >= 0)
    v21 = (const char *)&__p;
  else
    v21 = (const char *)__p;
  v22 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v21, 0x8000100u);
  v23 = cf;
  cf = v22;
  if (v23)
    CFRelease(v23);
  memset(&v31, 170, 24);
  MEMORY[0x212BF9A7C](&v31, v22, *MEMORY[0x24BDBD590]);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v27, "NvramItems");
  v24 = (const void *)(**(uint64_t (***)(stat *, _QWORD))&v31.st_dev)(&v31, v27[0]);
  if (v24)
  {
    ctu::cf::assign();
    CFRelease(v24);
  }
  v25 = (ACFULogging *)MEMORY[0x212BF9A34](v27);
  ACFULogging::getLogInstance(v25);
  ACFULogging::handleMessage();
  MEMORY[0x212BF9A88](&v31);
  if (v22)
LABEL_47:
    CFRelease(v22);
LABEL_48:
  if (SHIBYTE(v30) < 0)
    operator delete(__p);
  return 0;
}

void sub_212AFFA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t createNVData(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  ACFULogging *NVRAMKeyValPairs;
  uint64_t v6;
  ACFULogging *v7;
  std::pair<std::string, std::string> *begin;
  std::vector<std::pair<std::string, std::string>>::pointer end;
  std::vector<std::pair<std::string, std::string>>::pointer v10;
  std::vector<std::pair<std::string, std::string>>::pointer v11;
  ACFULogging *v12;
  ACFULogging *v13;
  std::pair<std::string, std::string> *v14;
  std::vector<std::pair<std::string, std::string>>::pointer v15;
  std::vector<std::pair<std::string, std::string>>::pointer v16;
  std::vector<std::pair<std::string, std::string>>::pointer v17;
  std::vector<std::pair<std::string, std::string>> *v18;
  __int128 *v19;
  __int128 *v20;
  size_t v21;
  uint64_t v22;
  std::vector<std::pair<std::string, std::string>>::pointer v23;
  std::vector<std::pair<std::string, std::string>>::pointer i;
  __int128 v25;
  std::vector<std::pair<std::string, std::string>>::pointer v26;
  std::vector<std::pair<std::string, std::string>>::pointer v27;
  std::string::size_type size;
  unsigned __int8 *v29;
  uint64_t v30;
  std::string::size_type v31;
  uint64_t v32;
  uint64_t v33;
  std::string::size_type v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  std::string::value_type *v38;
  size_t v39;
  char v40;
  __int128 v41;
  std::string *p_second;
  size_t v43;
  std::vector<std::pair<std::string, std::string>>::pointer v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  char v48;
  std::pair<std::string, std::string> *v49;
  std::vector<std::pair<std::string, std::string>>::pointer v50;
  std::pair<std::string, std::string> *v51;
  std::vector<std::pair<std::string, std::string>>::pointer v52;
  std::vector<std::pair<std::string, std::string>>::pointer v53;
  uint64_t v54;
  std::vector<std::pair<std::string, std::string>>::pointer v55;
  std::vector<std::pair<std::string, std::string>>::pointer v56;
  ACFULogging *v57;
  __int128 v58;
  std::string *v59;
  ACFULogging *v60;
  const __CFNumber **v61;
  ACFULogging *v62;
  std::string::size_type v63;
  std::string *v64;
  char Num32FromString;
  ACFULogging *v66;
  __int128 v67;
  uint64_t *v68;
  uint64_t **v69;
  uint64_t **v70;
  char v71;
  _BYTE *v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  int v77;
  uint64_t *v78;
  unint64_t v79;
  size_t v80;
  int v81;
  _OWORD *v82;
  uint64_t v83;
  std::string *v84;
  int data;
  int v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  ACFULogging *v96;
  void *v97;
  char *v98;
  std::vector<std::pair<std::string, std::string>>::pointer v99;
  char v100;
  __int128 v101;
  std::vector<std::pair<std::string, std::string>>::pointer v102;
  size_t v103;
  uint64_t v104;
  int v105;
  std::string::size_type v106;
  int v107;
  size_t v108;
  unint64_t v109;
  std::string *p_dst;
  std::string *p_p;
  char *v112;
  __int128 *v113;
  std::string *v114;
  __int128 v115;
  int v116;
  const std::string::value_type *v117;
  std::string::size_type v118;
  std::string *v119;
  __int128 v120;
  std::string::size_type v121;
  char v122;
  uint64_t v123;
  std::string::size_type v124;
  uint64_t v125;
  int v126;
  __int128 *v127;
  unsigned __int8 *v128;
  uint64_t v129;
  int v130;
  char v131;
  void *v132;
  size_t v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 v138;
  std::string::size_type v139;
  std::string *v140;
  std::string *v141;
  std::string::value_type *v142;
  unint64_t v143;
  int8x8_t v144;
  std::string *v145;
  std::string::size_type v146;
  std::string *v147;
  int v148;
  std::string *v149;
  std::string *v150;
  std::string *v151;
  std::string *v152;
  std::string *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  char *v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  unint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  char *v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char *v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  unint64_t v206;
  char *v207;
  unint64_t v208;
  char *v209;
  int64_t v210;
  unint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  __int128 *v217;
  char *v218;
  uint64_t v219;
  __int128 v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  char *v224;
  void *v225;
  void *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  unint64_t v233;
  _BYTE *v234;
  unint64_t v235;
  char *v236;
  int64_t v237;
  unint64_t v238;
  char *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  __int128 *v245;
  _OWORD *v246;
  uint64_t v247;
  __int128 v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  char *v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  char *v263;
  unint64_t v264;
  char *v265;
  unint64_t v266;
  unint64_t v267;
  char *v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  __int128 *v273;
  char *v274;
  uint64_t v275;
  __int128 v276;
  uint64_t v277;
  unint64_t v278;
  _BYTE *v279;
  unint64_t v280;
  char *v281;
  int64_t v282;
  unint64_t v283;
  char *v284;
  char *v285;
  char *v286;
  void *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  char *v292;
  unint64_t v293;
  char *v294;
  char *v295;
  unint64_t v296;
  char *v297;
  char *v298;
  int64_t v299;
  unint64_t v300;
  uint64_t v301;
  char *v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  __int128 *v307;
  char *v308;
  uint64_t v309;
  __int128 v310;
  uint64_t v311;
  uint64_t *v312;
  void *v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  char *v319;
  uint64_t v320;
  unint64_t v321;
  char *v322;
  char *v323;
  unint64_t v324;
  int64_t v325;
  unint64_t v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  __int128 *v333;
  char *v334;
  uint64_t v335;
  __int128 v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  char *v342;
  char *v343;
  char *v344;
  unint64_t v345;
  char *v346;
  char *v347;
  unint64_t v348;
  int64_t v349;
  unint64_t v350;
  uint64_t v351;
  char *v352;
  char *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  __int128 *v358;
  char *v359;
  uint64_t v360;
  __int128 v361;
  char *v362;
  char *v363;
  void *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  char *v368;
  char *v369;
  char *v370;
  unint64_t v371;
  char *v372;
  char *v373;
  unint64_t v374;
  char *v375;
  int64_t v376;
  unint64_t v377;
  uint64_t v378;
  char *v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  __int128 *v384;
  char *v385;
  uint64_t v386;
  __int128 v387;
  _QWORD *k;
  uint64_t v389;
  void *v390;
  char *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  char *v395;
  char *v396;
  unint64_t v397;
  char *v398;
  char *v399;
  unint64_t v400;
  int64_t v401;
  unint64_t v402;
  uint64_t v403;
  char *v404;
  char *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  __int128 *v409;
  char *v410;
  uint64_t v411;
  __int128 v412;
  char *v413;
  char *v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  unint64_t v418;
  char *v419;
  unint64_t v420;
  int64_t v421;
  unint64_t v422;
  char *v423;
  char *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  __int128 *v428;
  char *v429;
  uint64_t v430;
  __int128 v431;
  uint64_t v432;
  unint64_t v433;
  char *v434;
  unint64_t v435;
  char *v436;
  unint64_t v437;
  unint64_t v438;
  char *v439;
  char *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  __int128 *v444;
  char *v445;
  uint64_t v446;
  __int128 v447;
  uint64_t v448;
  char *v449;
  char *v450;
  char **v451;
  uint64_t v452;
  char *v453;
  char *v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  char *v458;
  char *v459;
  void **v460;
  char *v461;
  unint64_t v462;
  std::string *v463;
  char *v464;
  uint64_t v465;
  const void **v466;
  char *v467;
  uint64_t v468;
  size_t v469;
  uint64_t v470;
  char v471;
  uint64_t v472;
  char *v473;
  unint64_t v474;
  size_t v475;
  char *v476;
  char *v477;
  const void **j;
  uint64_t v479;
  char *v480;
  size_t v481;
  char *v482;
  char *v483;
  char *v484;
  uint64_t v485;
  size_t v486;
  char *v487;
  char *v488;
  void **v489;
  char *v490;
  uint64_t v491;
  size_t v492;
  char *v493;
  uint64_t v494;
  char *v495;
  uint64_t v496;
  void *v497;
  char *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  char *v502;
  unint64_t v503;
  char *v504;
  unint64_t v505;
  char *v506;
  int64_t v507;
  unint64_t v508;
  char *v509;
  char *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  __int128 *v514;
  char *v515;
  uint64_t v516;
  __int128 v517;
  uint64_t v518;
  char *v519;
  uint64_t v520;
  char *v521;
  uint64_t v522;
  void *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  char *v527;
  int64_t v528;
  unint64_t v529;
  _BYTE *v530;
  unint64_t v531;
  char *v532;
  int64_t v533;
  unint64_t v534;
  char *v535;
  uint64_t v536;
  unint64_t v537;
  uint64_t v538;
  uint64_t v539;
  __int128 *v540;
  _OWORD *v541;
  uint64_t v542;
  __int128 v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  __int128 *v549;
  _OWORD *v550;
  uint64_t v551;
  __int128 v552;
  uint64_t v553;
  char *v554;
  _BYTE *v555;
  unint64_t v556;
  unint64_t v557;
  char *v558;
  _BYTE *v559;
  _BYTE *v560;
  unint64_t v561;
  char *v562;
  uint64_t v563;
  char *v564;
  _BYTE *v565;
  char *v566;
  _BYTE *v567;
  unint64_t v568;
  std::string *v569;
  _BYTE *v570;
  uint64_t v571;
  char *v572;
  _BYTE *v573;
  _BYTE *v574;
  char *v575;
  size_t v576;
  _BYTE *v577;
  _BYTE *v578;
  _BYTE *v579;
  unint64_t v580;
  char *v581;
  size_t v582;
  _BYTE *v583;
  _BYTE *v584;
  _BYTE *v585;
  char *v586;
  char *v587;
  size_t v588;
  _BYTE *v589;
  char *v590;
  uint64_t v591;
  char *v592;
  size_t v593;
  uint64_t v594;
  _BYTE *v595;
  char *v596;
  uint64_t v597;
  char *v598;
  size_t v599;
  char *v600;
  uint64_t v601;
  std::string::size_type v602;
  std::string *v603;
  std::string *v604;
  std::string *v605;
  int v606;
  _BYTE *v607;
  std::string::size_type v608;
  char *v609;
  std::string::value_type *v610;
  char *v611;
  uint64_t v612;
  std::string *v613;
  std::string::size_type v614;
  std::string::size_type v615;
  unint64_t v616;
  std::string::size_type v617;
  std::string::value_type *v618;
  std::string::size_type v619;
  std::string *p_s2;
  std::string::size_type v621;
  std::string::size_type v622;
  unint64_t v623;
  std::string *v624;
  std::string::size_type v625;
  uint64_t v626;
  size_t v627;
  std::string *v628;
  std::string *v629;
  std::string::size_type v630;
  std::string::value_type *v631;
  std::string *v632;
  unint64_t v633;
  std::string::size_type *v634;
  _OWORD *v635;
  unint64_t v636;
  __int128 v637;
  uint64_t *v638;
  _QWORD *v639;
  unint64_t v640;
  uint64_t v641;
  std::string::value_type v642;
  void **v643;
  void **v644;
  unint64_t v645;
  unint64_t v646;
  uint64_t v647;
  void *v648;
  std::pair<std::string, std::string> *v649;
  std::vector<std::pair<std::string, std::string>>::pointer v650;
  std::vector<std::pair<std::string, std::string>>::pointer v651;
  _QWORD *v652;
  BBUPartitionManager *v653;
  _QWORD *v654;
  std::__shared_weak_count *v655;
  unint64_t *v656;
  unint64_t v657;
  std::__shared_weak_count *v658;
  unint64_t *v659;
  unint64_t v660;
  uint64_t *v661;
  int v662;
  std::string *v663;
  void *v664;
  char v665;
  unint64_t *v666;
  unint64_t v667;
  const __CFAllocator *v668;
  const char *v669;
  CFStringRef v670;
  void *v671;
  uint64_t (*v672)(uint64_t);
  const void *v673;
  void *v674;
  uint64_t (*v675)(uint64_t);
  CFMutableDictionaryRef Mutable;
  uint64_t (*v677)(uint64_t);
  std::string *v678;
  CFStringRef v679;
  uint64_t (*v680)(uint64_t);
  std::pair<std::string, std::string> *v681;
  std::vector<std::pair<std::string, std::string>>::pointer v682;
  std::vector<std::pair<std::string, std::string>>::pointer v683;
  uint64_t **v684;
  std::pair<std::string, std::string> *v685;
  std::vector<std::pair<std::string, std::string>>::pointer v686;
  std::vector<std::pair<std::string, std::string>>::pointer v687;
  __int128 v688;
  uint64_t *v689;
  uint64_t *v690;
  uint64_t **v691;
  std::pair<std::string, std::string> *v692;
  std::vector<std::pair<std::string, std::string>>::pointer v693;
  std::vector<std::pair<std::string, std::string>>::pointer v694;
  std::pair<std::string, std::string> *v695;
  std::vector<std::pair<std::string, std::string>>::pointer v696;
  std::vector<std::pair<std::string, std::string>>::pointer v697;
  unint64_t v699;
  uint64_t v700;
  unint64_t v701;
  uint64_t v702;
  uint64_t v703;
  std::string *v704;
  std::string *v705;
  std::string *v707;
  unint64_t v709;
  const __CFAllocator *alloc;
  std::vector<std::pair<std::string, std::string>>::pointer alloca;
  std::vector<std::pair<std::string, std::string>> v712;
  std::string second;
  std::string v714;
  std::vector<std::pair<std::string, std::string>> v715;
  std::vector<std::pair<std::string, std::string>> v716;
  std::vector<std::pair<std::string, std::string>> v717;
  std::string v718;
  std::vector<std::pair<std::string, std::string>> v719;
  std::string __s;
  std::vector<std::pair<std::string, std::string>> v721;
  std::vector<std::pair<std::string, std::string>> v722;
  std::vector<std::pair<std::string, std::string>> __x;
  uint64_t **v724;
  uint64_t *v725;
  uint64_t v726;
  std::vector<std::pair<std::string, std::string>> v727;
  CFTypeRef v728;
  CFTypeRef v729;
  CFTypeRef v730;
  CFTypeRef cf;
  std::string __p;
  void *v733;
  __int128 v734;
  std::string __dst;
  _BYTE v736[48];
  std::string __s2;
  _QWORD v738[2];
  __int128 v739;
  int64_t v740;
  uint64_t v741;

  v741 = *MEMORY[0x24BDAC8D0];
  v725 = 0;
  v726 = 0;
  v724 = &v725;
  memset(&__x, 0, sizeof(__x));
  memset(&v722, 0, sizeof(v722));
  memset(&v721, 0, sizeof(v721));
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
      goto LABEL_7;
  }
  else if (*(_BYTE *)(a1 + 23))
  {
    goto LABEL_7;
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a2 + 23))
      goto LABEL_7;
LABEL_138:
    ACFULogging::getLogInstance((ACFULogging *)a1);
    ACFULogging::handleMessage();
    v6 = 1;
    goto LABEL_1138;
  }
  if (!*(_QWORD *)(a2 + 8))
    goto LABEL_138;
LABEL_7:
  if ((*(_BYTE *)(a1 + 23) & 0x80) != 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __s = *(std::string *)a1;
  NVRAMKeyValPairs = (ACFULogging *)sGetNVRAMKeyValPairs(&__s, (uint64_t)&__x);
  v6 = (uint64_t)NVRAMKeyValPairs;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if ((_DWORD)v6)
  {
    ACFULogging::getLogInstance(NVRAMKeyValPairs);
    ACFULogging::handleMessage();
    goto LABEL_1138;
  }
  if (__x.__end_ != __x.__begin_)
  {
    ACFULogging::getLogInstance(NVRAMKeyValPairs);
    ACFULogging::handleMessage();
    v7 = (ACFULogging *)std::vector<std::pair<std::string,std::string>>::vector(&v719, &__x);
    begin = v719.__begin_;
    end = v719.__end_;
    if (v719.__begin_ != v719.__end_)
    {
      do
      {
        ACFULogging::getLogInstance(v7);
        v7 = (ACFULogging *)ACFULogging::handleMessage();
        ++begin;
      }
      while (begin != end);
      begin = v719.__begin_;
    }
    if (begin)
    {
      v10 = v719.__end_;
      v11 = begin;
      if (v719.__end_ == begin)
      {
LABEL_26:
        v719.__end_ = begin;
        operator delete(v11);
        goto LABEL_27;
      }
      while (1)
      {
        if (SHIBYTE(v10[-1].second.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v10[-1].second.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v10[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_21;
LABEL_24:
          operator delete(v10[-1].first.__r_.__value_.__l.__data_);
          if (--v10 == begin)
          {
LABEL_25:
            v11 = v719.__begin_;
            goto LABEL_26;
          }
        }
        else
        {
          if (SHIBYTE(v10[-1].first.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_24;
LABEL_21:
          if (--v10 == begin)
            goto LABEL_25;
        }
      }
    }
  }
LABEL_27:
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v718, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v718 = *(std::string *)a2;
  v12 = (ACFULogging *)sGetNVRAMKeyValPairs(&v718, (uint64_t)&v722);
  v6 = (uint64_t)v12;
  if (SHIBYTE(v718.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v718.__r_.__value_.__l.__data_);
  if ((_DWORD)v6)
  {
    ACFULogging::getLogInstance(v12);
    ACFULogging::handleMessage();
    goto LABEL_1138;
  }
  if (v722.__end_ != v722.__begin_)
  {
    ACFULogging::getLogInstance(v12);
    ACFULogging::handleMessage();
    v13 = (ACFULogging *)std::vector<std::pair<std::string,std::string>>::vector(&v717, &v722);
    v14 = v717.__begin_;
    v15 = v717.__end_;
    if (v717.__begin_ != v717.__end_)
    {
      do
      {
        ACFULogging::getLogInstance(v13);
        v13 = (ACFULogging *)ACFULogging::handleMessage();
        ++v14;
      }
      while (v14 != v15);
      v14 = v717.__begin_;
    }
    if (v14)
    {
      v16 = v717.__end_;
      v17 = v14;
      if (v717.__end_ == v14)
      {
LABEL_46:
        v717.__end_ = v14;
        operator delete(v17);
        goto LABEL_47;
      }
      while (1)
      {
        if (SHIBYTE(v16[-1].second.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v16[-1].second.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v16[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_41;
LABEL_44:
          operator delete(v16[-1].first.__r_.__value_.__l.__data_);
          if (--v16 == v14)
          {
LABEL_45:
            v17 = v717.__begin_;
            goto LABEL_46;
          }
        }
        else
        {
          if (SHIBYTE(v16[-1].first.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_44;
LABEL_41:
          if (--v16 == v14)
            goto LABEL_45;
        }
      }
    }
  }
LABEL_47:
  std::vector<std::pair<std::string,std::string>>::vector(&v716, &__x);
  v18 = std::vector<std::pair<std::string,std::string>>::vector(&v715, &v722);
  memset(v736, 0, sizeof(v736));
  v19 = (__int128 *)v716.__begin_;
  v20 = (__int128 *)v716.__end_;
  if (v716.__end_ != v716.__begin_)
  {
    v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v716.__end_ - (char *)v716.__begin_) >> 4);
    if (v715.__end_ != v715.__begin_)
    {
      std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)&v721, (__int128 *)v716.__begin_, (__int128 *)v716.__end_, v21);
      v23 = v715.__begin_;
      for (i = v715.__end_; v23 != i; ++v23)
      {
        while (1)
        {
          memset(&__s2, 170, sizeof(__s2));
          if (SHIBYTE(v23->first.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&__s2, v23->first.__r_.__value_.__l.__data_, v23->first.__r_.__value_.__l.__size_);
          }
          else
          {
            v25 = *(_OWORD *)&v23->first.__r_.__value_.__l.__data_;
            __s2.__r_.__value_.__r.__words[2] = v23->first.__r_.__value_.__r.__words[2];
            *(_OWORD *)&__s2.__r_.__value_.__l.__data_ = v25;
          }
          v26 = v721.__begin_;
          v27 = v721.__end_;
          if (v721.__begin_ != v721.__end_)
          {
            if ((__s2.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
            else
              size = __s2.__r_.__value_.__l.__size_;
            if ((*((_BYTE *)&__s2.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              v29 = (unsigned __int8 *)__s2.__r_.__value_.__r.__words[0];
              while (1)
              {
                v33 = HIBYTE(v26->first.__r_.__value_.__r.__words[2]);
                if ((v33 & 0x80u) == 0)
                  v34 = HIBYTE(v26->first.__r_.__value_.__r.__words[2]);
                else
                  v34 = v26->first.__r_.__value_.__l.__size_;
                if (v34 == size)
                {
                  if ((v33 & 0x80) != 0)
                  {
                    v22 = memcmp(v26->first.__r_.__value_.__l.__data_, v29, v26->first.__r_.__value_.__l.__size_);
                    if (!(_DWORD)v22)
                      goto LABEL_51;
                  }
                  else
                  {
                    if (!*((_BYTE *)&v26->first.__r_.__value_.__s + 23))
                      goto LABEL_51;
                    v35 = 0;
                    while (v26->first.__r_.__value_.__s.__data_[v35] == v29[v35])
                    {
                      if (v33 == ++v35)
                        goto LABEL_51;
                    }
                  }
                }
                if (++v26 == v27)
                  goto LABEL_89;
              }
            }
            while (1)
            {
              v30 = HIBYTE(v26->first.__r_.__value_.__r.__words[2]);
              if ((v30 & 0x80u) == 0)
                v31 = HIBYTE(v26->first.__r_.__value_.__r.__words[2]);
              else
                v31 = v26->first.__r_.__value_.__l.__size_;
              if (v31 == size)
              {
                if ((v30 & 0x80) != 0)
                {
                  v22 = memcmp(v26->first.__r_.__value_.__l.__data_, &__s2, v26->first.__r_.__value_.__l.__size_);
                  if (!(_DWORD)v22)
                    break;
                }
                else
                {
                  if (!*((_BYTE *)&v26->first.__r_.__value_.__s + 23))
                    break;
                  v32 = 0;
                  while (v26->first.__r_.__value_.__s.__data_[v32] == __s2.__r_.__value_.__s.__data_[v32])
                  {
                    if (v30 == ++v32)
                      goto LABEL_51;
                  }
                }
              }
              if (++v26 == v27)
                goto LABEL_89;
            }
          }
LABEL_51:
          if (v26 == v27)
          {
LABEL_89:
            if (v736 != (_BYTE *)v23)
            {
              v36 = HIBYTE(v23->first.__r_.__value_.__r.__words[2]);
              if ((v736[23] & 0x80000000) != 0)
              {
                if (v36 >= 0)
                  v38 = (std::string::value_type *)v23;
                else
                  v38 = (std::string::value_type *)v23->first.__r_.__value_.__r.__words[0];
                if (v36 >= 0)
                  v39 = HIBYTE(v23->first.__r_.__value_.__r.__words[2]);
                else
                  v39 = v23->first.__r_.__value_.__l.__size_;
                std::string::__assign_no_alias<false>((void **)v736, v38, v39);
              }
              else if ((*((_BYTE *)&v23->first.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>(v736, v23->first.__r_.__value_.__l.__data_, v23->first.__r_.__value_.__l.__size_);
              }
              else
              {
                v37 = *(_OWORD *)&v23->first.__r_.__value_.__l.__data_;
                *(_QWORD *)&v736[16] = *((_QWORD *)&v23->first.__r_.__value_.__l + 2);
                *(_OWORD *)v736 = v37;
              }
              v40 = HIBYTE(v23->second.__r_.__value_.__r.__words[2]);
              if ((v736[47] & 0x80000000) != 0)
              {
                if (v40 >= 0)
                  p_second = &v23->second;
                else
                  p_second = (std::string *)v23->second.__r_.__value_.__l.__data_;
                if (v40 >= 0)
                  v43 = HIBYTE(v23->second.__r_.__value_.__r.__words[2]);
                else
                  v43 = v23->second.__r_.__value_.__l.__size_;
                std::string::__assign_no_alias<false>((void **)&v736[24], p_second, v43);
              }
              else if ((*((_BYTE *)&v23->second.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>(&v736[24], v23->second.__r_.__value_.__l.__data_, v23->second.__r_.__value_.__l.__size_);
              }
              else
              {
                v41 = *(_OWORD *)&v23->second.__r_.__value_.__l.__data_;
                *(_QWORD *)&v736[40] = *((_QWORD *)&v23->second.__r_.__value_.__l + 2);
                *(_OWORD *)&v736[24] = v41;
              }
            }
            v44 = v721.__end_;
            if (v721.__end_ >= v721.__end_cap_.__value_)
            {
              v22 = (uint64_t)std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>((void **)&v721.__begin_, (uint64_t)v736);
              v721.__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)v22;
            }
            else
            {
              if ((v736[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(&v721.__end_->first, *(const std::string::value_type **)v736, *(std::string::size_type *)&v736[8]);
              }
              else
              {
                v45 = *(_OWORD *)v736;
                v721.__end_->first.__r_.__value_.__r.__words[2] = *(_QWORD *)&v736[16];
                *(_OWORD *)&v44->first.__r_.__value_.__l.__data_ = v45;
              }
              v46 = &v44->second;
              if ((v736[47] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v46, *(const std::string::value_type **)&v736[24], *(std::string::size_type *)&v736[32]);
              }
              else
              {
                v47 = *(_OWORD *)&v736[24];
                v44->second.__r_.__value_.__r.__words[2] = *(_QWORD *)&v736[40];
                *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
              }
              v22 = (uint64_t)&v44[1];
              v721.__end_ = v44 + 1;
            }
          }
          if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
            break;
          if (++v23 == i)
            goto LABEL_124;
        }
        operator delete(__s2.__r_.__value_.__l.__data_);
      }
LABEL_124:
      v6 = 0;
      v48 = 1;
      if ((v736[47] & 0x80000000) == 0)
        goto LABEL_125;
      goto LABEL_142;
    }
LABEL_123:
    std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)&v721, v19, v20, v21);
    goto LABEL_124;
  }
  if (v715.__end_ != v715.__begin_)
  {
    v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v715.__end_ - (char *)v715.__begin_) >> 4);
    v19 = (__int128 *)v715.__begin_;
    v20 = (__int128 *)v715.__end_;
    goto LABEL_123;
  }
  ACFULogging::getLogInstance((ACFULogging *)v18);
  v22 = ACFULogging::handleMessage();
  v48 = 0;
  v6 = 1;
  if ((v736[47] & 0x80000000) == 0)
  {
LABEL_125:
    if ((v736[23] & 0x80000000) == 0)
      goto LABEL_126;
    goto LABEL_143;
  }
LABEL_142:
  operator delete(*(void **)&v736[24]);
  if ((v736[23] & 0x80000000) == 0)
  {
LABEL_126:
    v49 = v715.__begin_;
    if (v715.__begin_)
      goto LABEL_127;
LABEL_144:
    v51 = v716.__begin_;
    if (!v716.__begin_)
      goto LABEL_154;
LABEL_145:
    v52 = v716.__end_;
    v53 = v51;
    if (v716.__end_ == v51)
    {
LABEL_153:
      v716.__end_ = v51;
      operator delete(v53);
      goto LABEL_154;
    }
    while (1)
    {
      if (SHIBYTE(v52[-1].second.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v52[-1].second.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v52[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_148;
LABEL_151:
        operator delete(v52[-1].first.__r_.__value_.__l.__data_);
        if (--v52 == v51)
        {
LABEL_152:
          v53 = v716.__begin_;
          goto LABEL_153;
        }
      }
      else
      {
        if (SHIBYTE(v52[-1].first.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_151;
LABEL_148:
        if (--v52 == v51)
          goto LABEL_152;
      }
    }
  }
LABEL_143:
  operator delete(*(void **)v736);
  v49 = v715.__begin_;
  if (!v715.__begin_)
    goto LABEL_144;
LABEL_127:
  v50 = v715.__end_;
  if (v715.__end_ == v49)
  {
    v715.__end_ = v49;
    operator delete(v49);
    v51 = v716.__begin_;
    if (!v716.__begin_)
      goto LABEL_154;
    goto LABEL_145;
  }
  do
  {
    while (SHIBYTE(v50[-1].second.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50[-1].second.__r_.__value_.__l.__data_);
      if (SHIBYTE(v50[-1].first.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_134;
LABEL_131:
      if (--v50 == v49)
        goto LABEL_135;
    }
    if ((SHIBYTE(v50[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_131;
LABEL_134:
    operator delete(v50[-1].first.__r_.__value_.__l.__data_);
    --v50;
  }
  while (v50 != v49);
LABEL_135:
  v715.__end_ = v49;
  operator delete(v715.__begin_);
  v51 = v716.__begin_;
  if (v716.__begin_)
    goto LABEL_145;
LABEL_154:
  if ((v48 & 1) == 0)
  {
    ACFULogging::getLogInstance((ACFULogging *)v22);
    ACFULogging::handleMessage();
    goto LABEL_1138;
  }
  ACFULogging::getLogInstance((ACFULogging *)v22);
  v54 = ACFULogging::handleMessage();
  v55 = v721.__begin_;
  v56 = v721.__end_;
  if (v721.__begin_ != v721.__end_)
  {
    v57 = 0;
    alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    while (1)
    {
      ACFULogging::getLogInstance((ACFULogging *)v54);
      ACFULogging::handleMessage();
      if (SHIBYTE(v55->first.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v714, v55->first.__r_.__value_.__l.__data_, v55->first.__r_.__value_.__l.__size_);
      }
      else
      {
        v58 = *(_OWORD *)&v55->first.__r_.__value_.__l.__data_;
        v714.__r_.__value_.__r.__words[2] = v55->first.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v714.__r_.__value_.__l.__data_ = v58;
      }
      if (SHIBYTE(v55->second.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&second, v55->second.__r_.__value_.__l.__data_, v55->second.__r_.__value_.__l.__size_);
      else
        second = v55->second;
      v59 = (second.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &second
          : (std::string *)second.__r_.__value_.__r.__words[0];
      v60 = (ACFULogging *)CFStringCreateWithCString(alloc, (const char *)v59, 0x600u);
      v62 = v60;
      if (v60)
        break;
      v6 = 1007;
      if (SHIBYTE(second.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_181;
LABEL_182:
      if (SHIBYTE(v714.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v714.__r_.__value_.__l.__data_);
        if ((_DWORD)v6)
        {
LABEL_955:
          ACFULogging::getLogInstance(v60);
          ACFULogging::handleMessage();
          goto LABEL_1138;
        }
      }
      else if ((_DWORD)v6)
      {
        goto LABEL_955;
      }
      if (SHIBYTE(v55->first.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v736, v55->first.__r_.__value_.__l.__data_, v55->first.__r_.__value_.__l.__size_);
      }
      else
      {
        v67 = *(_OWORD *)&v55->first.__r_.__value_.__l.__data_;
        *(_QWORD *)&v736[16] = *((_QWORD *)&v55->first.__r_.__value_.__l + 2);
        *(_OWORD *)v736 = v67;
      }
      *(_QWORD *)&v736[24] = v57;
      v68 = v725;
      v69 = &v725;
      v70 = &v725;
      if (!v725)
        goto LABEL_216;
      v71 = v736[23];
      if (v736[23] >= 0)
        v72 = v736;
      else
        v72 = *(_BYTE **)v736;
      if (v736[23] >= 0)
        v73 = v736[23];
      else
        v73 = *(_QWORD *)&v736[8];
      do
      {
        while (1)
        {
          v69 = (uint64_t **)v68;
          v76 = v68[4];
          v74 = v68 + 4;
          v75 = (uint64_t *)v76;
          v77 = *((char *)v74 + 23);
          v78 = v77 >= 0 ? v74 : v75;
          v79 = v77 >= 0 ? *((unsigned __int8 *)v74 + 23) : v74[1];
          v80 = v79 >= v73 ? v73 : v79;
          v81 = memcmp(v72, v78, v80);
          if (v81)
            break;
          if (v73 >= v79)
            goto LABEL_210;
LABEL_196:
          v68 = *v69;
          v70 = v69;
          if (!*v69)
            goto LABEL_216;
        }
        if (v81 < 0)
          goto LABEL_196;
LABEL_210:
        v54 = memcmp(v78, v72, v80);
        if ((_DWORD)v54)
        {
          if ((v54 & 0x80000000) == 0)
            goto LABEL_219;
        }
        else if (v79 >= v73)
        {
          goto LABEL_219;
        }
        v68 = v69[1];
      }
      while (v68);
      v70 = v69 + 1;
LABEL_216:
      v82 = operator new(0x40uLL);
      v82[2] = *(_OWORD *)v736;
      v83 = *(_QWORD *)&v736[16];
      memset(v736, 0, 24);
      *((_QWORD *)v82 + 6) = v83;
      *((_QWORD *)v82 + 7) = v57;
      *(_QWORD *)v82 = 0;
      *((_QWORD *)v82 + 1) = 0;
      *((_QWORD *)v82 + 2) = v69;
      *v70 = (uint64_t *)v82;
      if (*v724)
      {
        v724 = (uint64_t **)*v724;
        v82 = *v70;
      }
      v54 = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v725, (uint64_t *)v82);
      ++v726;
      v71 = v736[23];
LABEL_219:
      if (v71 < 0)
        operator delete(*(void **)v736);
      if (++v55 == v56)
        goto LABEL_234;
    }
    v63 = HIBYTE(v714.__r_.__value_.__r.__words[2]);
    if ((v714.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v63 = v714.__r_.__value_.__l.__size_;
    if (v63 == 7)
    {
      v84 = &v714;
      if ((v714.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v84 = (std::string *)v714.__r_.__value_.__r.__words[0];
      data = (int)v84->__r_.__value_.__l.__data_;
      v86 = *(_DWORD *)((char *)v84->__r_.__value_.__r.__words + 3);
      v87 = data == 1752462689 && v86 == 1734501480;
      if (v87)
        goto LABEL_178;
    }
    else if (v63 == 8)
    {
      v64 = &v714;
      if ((v714.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v64 = (std::string *)v714.__r_.__value_.__r.__words[0];
      if (v64->__r_.__value_.__r.__words[0] == 0x79616C64746F6F62
        || v64->__r_.__value_.__r.__words[0] == 0x7374726175676264
        || v64->__r_.__value_.__r.__words[0] == 0x6B636F6C72727463
        || v64->__r_.__value_.__r.__words[0] == 0x746F6F626F747561)
      {
LABEL_178:
        *(_QWORD *)v736 = 0;
        Num32FromString = support::cf::createNum32FromString(v60, (const __CFString *)v736, v61);
        v66 = *(ACFULogging **)v736;
        if ((Num32FromString & 1) != 0)
        {
          v6 = 0;
        }
        else
        {
          if (*(_QWORD *)v736)
          {
            CFRelease(*(CFTypeRef *)v736);
            *(_QWORD *)v736 = 0;
          }
          v6 = 1;
          v66 = v57;
        }
        CFRelease(v62);
        v57 = v66;
        if ((SHIBYTE(second.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_182;
LABEL_181:
        operator delete(second.__r_.__value_.__l.__data_);
        goto LABEL_182;
      }
    }
    v6 = 0;
    v57 = v60;
    if ((SHIBYTE(second.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_182;
    goto LABEL_181;
  }
LABEL_234:
  ACFURTKitNVRMGenerator::create();
  v91 = *(_QWORD *)v736;
  if (*(_QWORD *)v736)
  {
    v92 = operator new(0x20uLL);
    *v92 = off_24CE83730;
    v92[1] = 0;
    v92[2] = 0;
    v92[3] = v91;
    *(_QWORD *)v736 = 0;
    v93 = (std::__shared_weak_count *)a4[1];
    *a4 = v91;
    a4[1] = v92;
    if (!v93)
      goto LABEL_242;
  }
  else
  {
    *(_QWORD *)v736 = 0;
    v93 = (std::__shared_weak_count *)a4[1];
    *a4 = 0;
    a4[1] = 0;
    if (!v93)
      goto LABEL_242;
  }
  p_shared_owners = (unint64_t *)&v93->__shared_owners_;
  do
    v95 = __ldaxr(p_shared_owners);
  while (__stlxr(v95 - 1, p_shared_owners));
  if (!v95)
  {
    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
    std::__shared_weak_count::__release_weak(v93);
  }
LABEL_242:
  v96 = *(ACFULogging **)v736;
  *(_QWORD *)v736 = 0;
  if (v96)
  {
    v97 = (void *)MEMORY[0x212BF9920](v96, v88, v89, v90);
    operator delete(v97);
  }
  if (!*a4)
  {
    ACFULogging::getLogInstance(v96);
    ACFULogging::handleMessage();
    v6 = 1007;
    goto LABEL_1138;
  }
  if (!a3)
    goto LABEL_1137;
  std::vector<std::pair<std::string,std::string>>::vector(&v712, &v721);
  v734 = 0uLL;
  v733 = 0;
  memset(&__p, 0, sizeof(__p));
  v730 = 0;
  cf = 0;
  v728 = 0;
  v729 = 0;
  v98 = (char *)std::vector<std::pair<std::string,std::string>>::vector(&v727, &v712);
  v99 = v727.__begin_;
  v739 = 0uLL;
  v740 = 0;
  alloca = v727.__end_;
  if (v727.__begin_ == v727.__end_)
  {
    v138 = 0;
    goto LABEL_340;
  }
  while (2)
  {
    while (2)
    {
      ACFULogging::getLogInstance((ACFULogging *)v98);
      ACFULogging::handleMessage();
      if (&v739 != (__int128 *)v99)
      {
        v100 = HIBYTE(v99->first.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v740) < 0)
        {
          if (v100 >= 0)
            v102 = v99;
          else
            v102 = (std::vector<std::pair<std::string, std::string>>::pointer)v99->first.__r_.__value_.__r.__words[0];
          if (v100 >= 0)
            v103 = HIBYTE(v99->first.__r_.__value_.__r.__words[2]);
          else
            v103 = v99->first.__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>((void **)&v739, v102, v103);
        }
        else if ((*((_BYTE *)&v99->first.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(&v739, v99->first.__r_.__value_.__l.__data_, v99->first.__r_.__value_.__l.__size_);
        }
        else
        {
          v101 = *(_OWORD *)&v99->first.__r_.__value_.__l.__data_;
          v740 = v99->first.__r_.__value_.__r.__words[2];
          v739 = v101;
        }
      }
      v104 = mNVRAMItems;
      if ((uint64_t *)mNVRAMItems != &qword_253D37F80)
      {
        do
        {
          v123 = HIBYTE(v99->first.__r_.__value_.__r.__words[2]);
          if ((v123 & 0x80u) == 0)
            v124 = HIBYTE(v99->first.__r_.__value_.__r.__words[2]);
          else
            v124 = v99->first.__r_.__value_.__l.__size_;
          v125 = *(unsigned __int8 *)(v104 + 79);
          v126 = (char)v125;
          if ((v125 & 0x80u) != 0)
            v125 = *(_QWORD *)(v104 + 64);
          if (v124 != v125)
            goto LABEL_322;
          v127 = (__int128 *)(v104 + 32);
          if (v126 >= 0)
            v128 = (unsigned __int8 *)(v104 + 56);
          else
            v128 = *(unsigned __int8 **)(v104 + 56);
          if ((v123 & 0x80) != 0)
          {
            v130 = memcmp(v99->first.__r_.__value_.__l.__data_, v128, v99->first.__r_.__value_.__l.__size_);
            if (&v739 != v127 && !v130)
              goto LABEL_311;
          }
          else
          {
            if (*((_BYTE *)&v99->first.__r_.__value_.__s + 23))
            {
              v129 = 0;
              while (v99->first.__r_.__value_.__s.__data_[v129] == v128[v129])
              {
                if (v123 == ++v129)
                  goto LABEL_307;
              }
              goto LABEL_322;
            }
LABEL_307:
            if (&v739 != v127)
            {
LABEL_311:
              v131 = *(_BYTE *)(v104 + 55);
              if (SHIBYTE(v740) < 0)
              {
                if (v131 >= 0)
                  v132 = (void *)(v104 + 32);
                else
                  v132 = *(void **)(v104 + 32);
                if (v131 >= 0)
                  v133 = *(unsigned __int8 *)(v104 + 55);
                else
                  v133 = *(_QWORD *)(v104 + 40);
                std::string::__assign_no_alias<false>((void **)&v739, v132, v133);
              }
              else if ((*(_BYTE *)(v104 + 55) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>(&v739, *(void **)(v104 + 32), *(_QWORD *)(v104 + 40));
              }
              else
              {
                v739 = *v127;
                v740 = *(_QWORD *)(v104 + 48);
              }
            }
          }
LABEL_322:
          v134 = *(uint64_t **)(v104 + 8);
          if (v134)
          {
            do
            {
              v135 = v134;
              v134 = (uint64_t *)*v134;
            }
            while (v134);
          }
          else
          {
            do
            {
              v135 = *(uint64_t **)(v104 + 16);
              v87 = *v135 == v104;
              v104 = (uint64_t)v135;
            }
            while (!v87);
          }
          v104 = (uint64_t)v135;
        }
        while (v135 != &qword_253D37F80);
      }
      v105 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v106 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v106 = __p.__r_.__value_.__l.__size_;
      v107 = SHIBYTE(v740);
      if (v740 >= 0)
        v108 = HIBYTE(v740);
      else
        v108 = *((_QWORD *)&v739 + 1);
      v109 = v108 + v106;
      memset(&__dst, 170, sizeof(__dst));
      if (v108 + v106 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v109 > 0x16)
      {
        v136 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v109 | 7) != 0x17)
          v136 = v109 | 7;
        v137 = v136 + 1;
        p_dst = (std::string *)operator new(v136 + 1);
        __dst.__r_.__value_.__l.__size_ = v108 + v106;
        __dst.__r_.__value_.__r.__words[2] = v137 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        if (v106)
        {
LABEL_272:
          if (v105 >= 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          memmove(p_dst, p_p, v106);
        }
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v108 + v106;
        if (v106)
          goto LABEL_272;
      }
      v112 = (char *)p_dst + v106;
      if (v108)
      {
        if (v107 >= 0)
          v113 = &v739;
        else
          v113 = (__int128 *)v739;
        memmove(v112, v113, v108);
      }
      v112[v108] = 0;
      v114 = std::string::append(&__dst, "='", 2uLL);
      v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
      __s2.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s2.__r_.__value_.__l.__data_ = v115;
      v114->__r_.__value_.__l.__size_ = 0;
      v114->__r_.__value_.__r.__words[2] = 0;
      v114->__r_.__value_.__r.__words[0] = 0;
      v116 = SHIBYTE(v99->second.__r_.__value_.__r.__words[2]);
      if (v116 >= 0)
        v117 = (const std::string::value_type *)&v99->second;
      else
        v117 = v99->second.__r_.__value_.__l.__data_;
      if (v116 >= 0)
        v118 = HIBYTE(v99->second.__r_.__value_.__r.__words[2]);
      else
        v118 = v99->second.__r_.__value_.__l.__size_;
      v119 = std::string::append(&__s2, v117, v118);
      v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
      *(_QWORD *)&v736[16] = *((_QWORD *)&v119->__r_.__value_.__l + 2);
      *(_OWORD *)v736 = v120;
      v119->__r_.__value_.__l.__size_ = 0;
      v119->__r_.__value_.__r.__words[2] = 0;
      v119->__r_.__value_.__r.__words[0] = 0;
      v98 = (char *)std::string::append((std::string *)v736, "',", 2uLL);
      v121 = *(_QWORD *)v98;
      v738[0] = *((_QWORD *)v98 + 1);
      *(_QWORD *)((char *)v738 + 7) = *(_QWORD *)(v98 + 15);
      v122 = v98[23];
      *((_QWORD *)v98 + 1) = 0;
      *((_QWORD *)v98 + 2) = 0;
      *(_QWORD *)v98 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p.__r_.__value_.__r.__words[0] = v121;
      __p.__r_.__value_.__l.__size_ = v738[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v738 + 7);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v122;
      if ((v736[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v736);
        if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_333;
LABEL_248:
        operator delete(__s2.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_334;
LABEL_249:
        if (++v99 == alloca)
          goto LABEL_335;
        continue;
      }
      break;
    }
    if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_248;
LABEL_333:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_249;
LABEL_334:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (++v99 != alloca)
      continue;
    break;
  }
LABEL_335:
  v138 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_363;
    --__p.__r_.__value_.__l.__size_;
    *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_) = 0;
    v138 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_953;
    goto LABEL_340;
  }
  if (!*((_BYTE *)&__p.__r_.__value_.__s + 23)
    || (--*((_BYTE *)&__p.__r_.__value_.__s + 23),
        __p.__r_.__value_.__s.__data_[v138 - 1] = 0,
        v138 = HIBYTE(__p.__r_.__value_.__r.__words[2]),
        (SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0))
  {
LABEL_340:
    v139 = v138;
    v140 = &__p;
    if (v138)
      goto LABEL_341;
    goto LABEL_363;
  }
LABEL_953:
  v139 = __p.__r_.__value_.__l.__size_;
  v140 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_363;
LABEL_341:
  v141 = v140;
  if (v139 >= 8)
  {
    v141 = (std::string *)((char *)v140 + (v139 & 0xFFFFFFFFFFFFFFF8));
    v142 = &v140->__r_.__value_.__s.__data_[3];
    v143 = v139 & 0xFFFFFFFFFFFFFFF8;
    while (1)
    {
      v144 = vceq_s8(*(int8x8_t *)(v142 - 3), (int8x8_t)0x2020202020202020);
      if ((v144.i8[0] & 1) != 0)
      {
        *(v142 - 3) = 44;
        if ((v144.i8[1] & 1) == 0)
          goto LABEL_346;
      }
      else if ((v144.i8[1] & 1) == 0)
      {
LABEL_346:
        if ((v144.i8[2] & 1) != 0)
          goto LABEL_347;
        goto LABEL_355;
      }
      *(v142 - 2) = 44;
      if ((v144.i8[2] & 1) != 0)
      {
LABEL_347:
        *(v142 - 1) = 44;
        if ((v144.i8[3] & 1) == 0)
          goto LABEL_348;
        goto LABEL_356;
      }
LABEL_355:
      if ((v144.i8[3] & 1) == 0)
      {
LABEL_348:
        if ((v144.i8[4] & 1) != 0)
          goto LABEL_349;
        goto LABEL_357;
      }
LABEL_356:
      *v142 = 44;
      if ((v144.i8[4] & 1) != 0)
      {
LABEL_349:
        v142[1] = 44;
        if ((v144.i8[5] & 1) == 0)
          goto LABEL_350;
        goto LABEL_358;
      }
LABEL_357:
      if ((v144.i8[5] & 1) == 0)
      {
LABEL_350:
        if ((v144.i8[6] & 1) != 0)
          goto LABEL_351;
        goto LABEL_359;
      }
LABEL_358:
      v142[2] = 44;
      if ((v144.i8[6] & 1) != 0)
      {
LABEL_351:
        v142[3] = 44;
        if ((v144.i8[7] & 1) != 0)
          goto LABEL_360;
        goto LABEL_343;
      }
LABEL_359:
      if ((v144.i8[7] & 1) != 0)
LABEL_360:
        v142[4] = 44;
LABEL_343:
      v142 += 8;
      v143 -= 8;
      if (!v143)
      {
        if (v139 == (v139 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_362;
        break;
      }
    }
  }
  v149 = (std::string *)((char *)v140 + v139);
  do
  {
    if (v141->__r_.__value_.__s.__data_[0] == 32)
      v141->__r_.__value_.__s.__data_[0] = 44;
    v141 = (std::string *)((char *)v141 + 1);
  }
  while (v141 != v149);
LABEL_362:
  v138 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_363:
  if ((v138 & 0x80u) == 0)
    v145 = &__p;
  else
    v145 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v146 = v138;
  if ((v138 & 0x80u) != 0)
    v146 = __p.__r_.__value_.__l.__size_;
  if (!v146)
    goto LABEL_1044;
  v147 = v145;
  while (1)
  {
    v148 = v147->__r_.__value_.__s.__data_[0];
    v147 = (std::string *)((char *)v147 + 1);
    if (v148 == 44)
      break;
    v145 = v147;
    if (!--v146)
      goto LABEL_1044;
  }
  memset(v736, 0, sizeof(v736));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v150 = &__p;
  else
    v150 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v151 = (std::string *)((char *)&v145->__r_.__value_.__l.__data_ + 1);
  v152 = v150;
  while (2)
  {
    v153 = (std::string *)boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((uint64_t)v736, v150, v152, v145);
    v155 = *(_QWORD *)&v736[32];
    v154 = *(_QWORD *)&v736[40];
    v156 = *(_QWORD *)&v736[32] + *(_QWORD *)&v736[40];
    v157 = (*(_QWORD *)&v736[32] + *(_QWORD *)&v736[40]) >> 12;
    v159 = *(char **)&v736[16];
    v158 = *(char **)&v736[8];
    v160 = (char *)(*(_QWORD *)&v736[8] + 8 * v157);
    v161 = *(_QWORD *)&v736[16] - *(_QWORD *)&v736[8];
    if (*(_QWORD *)&v736[16] == *(_QWORD *)&v736[8])
    {
      v163 = *(_QWORD *)&v736[32] >> 12;
      goto LABEL_394;
    }
    v162 = *(_QWORD *)v160 + (v156 & 0xFFF);
    v163 = *(_QWORD *)&v736[32] >> 12;
    v164 = (char *)(*(_QWORD *)&v736[8] + 8 * (*(_QWORD *)&v736[32] >> 12));
    v165 = *(_QWORD *)v164 + (*(_WORD *)&v736[32] & 0xFFF);
    if (v162 == v165)
    {
LABEL_394:
      v707 = v153;
      v709 = 0;
      if (!*(_QWORD *)&v736[40])
        goto LABEL_395;
LABEL_384:
      if (*(_QWORD *)&v736[32] > 1uLL)
      {
LABEL_709:
        v449 = &v158[8 * v163];
        if (v159 == v158)
        {
          v450 = 0;
          if (v709 <= 1)
          {
LABEL_711:
            v451 = (char **)&v158[8 * v163];
            v452 = (uint64_t)v450;
            if (*(char **)v449 == v450)
            {
              v451 = (char **)(v449 - 8);
              v452 = *((_QWORD *)v449 - 1) + 4096;
            }
            v453 = &asc_212B62F6A[-v709 + 2];
            *(_BYTE *)(v452 - 1) = asc_212B62F6A[-v709 + 1];
            v454 = (char *)(v452 - 1);
            *(int64x2_t *)&v736[32] = vaddq_s64(*(int64x2_t *)&v736[32], (int64x2_t)xmmword_212B55300);
            if (&asc_212B62F6A[-v709 + 1] != ", ")
            {
              if (v454 == *v451)
              {
                v455 = (uint64_t)*--v451;
                v454 = (char *)(v455 + 4096);
              }
              *--v454 = asc_212B62F6A[-v709];
              *(int64x2_t *)&v736[32] = vaddq_s64(*(int64x2_t *)&v736[32], (int64x2_t)xmmword_212B55300);
            }
            v456 = v709;
            if (!v709)
              goto LABEL_943;
            v457 = (uint64_t)&v450[v709 - *(_QWORD *)v449];
            if (v457 >= 1)
              goto LABEL_719;
LABEL_723:
            v462 = 4095 - v457;
            v458 = &v449[-8 * (v462 >> 12)];
            v459 = (char *)(*(_QWORD *)v458 + (~(_WORD)v462 & 0xFFF));
            v460 = (void **)v458;
            v461 = v459;
            if (v459 == v450)
              goto LABEL_724;
            while (1)
            {
LABEL_735:
              if (v454 == *v451)
              {
                v470 = (uint64_t)*--v451;
                v454 = (char *)(v470 + 4096);
                if (v461 == *v460)
                  goto LABEL_737;
              }
              else if (v461 == *v460)
              {
LABEL_737:
                v472 = (uint64_t)*--v460;
                v461 = (char *)(v472 + 4096);
              }
              v471 = *--v461;
              *--v454 = v471;
              *(int64x2_t *)&v736[32] = vaddq_s64(*(int64x2_t *)&v736[32], (int64x2_t)xmmword_212B55300);
              if (v461 == v450)
                goto LABEL_724;
            }
          }
        }
        else
        {
          v450 = (char *)(*(_QWORD *)v449 + (v155 & 0xFFF));
          if (v709 <= 1)
            goto LABEL_711;
        }
        v456 = 2;
        v453 = ", ";
        v451 = (char **)&v158[8 * v163];
        v454 = v450;
        v457 = (uint64_t)&v450[-*(_QWORD *)v449 + 2];
        if (v457 >= 1)
        {
LABEL_719:
          v458 = &v449[8 * ((unint64_t)v457 >> 12)];
          v459 = (char *)(*(_QWORD *)v458 + (v457 & 0xFFF));
          v460 = (void **)v458;
          v461 = v459;
          if (v459 != v450)
            goto LABEL_735;
LABEL_724:
          if (v456 >= v709)
          {
            if (v453 == "")
              goto LABEL_943;
            goto LABEL_795;
          }
          v463 = v151;
          v464 = *(char **)v449;
          v465 = (uint64_t)&v450[v709 - *(_QWORD *)v449];
          if (v465 < 1)
          {
            v474 = 4095 - v465;
            v466 = (const void **)&v449[-8 * (v474 >> 12)];
            v467 = (char *)*v466 + (~(_WORD)v474 & 0xFFF);
            if (v458 != (char *)v466)
            {
LABEL_727:
              v468 = *(_QWORD *)v458 + 4096;
              if ((char *)v468 != v459)
              {
                v449 = &v158[8 * v163 + 8];
                if (v468 - (uint64_t)v459 >= v464 - v450 + 4096)
                  v469 = v464 - v450 + 4096;
                else
                  v469 = v468 - (_QWORD)v459;
                if (v469)
                  goto LABEL_742;
                while (1)
                {
                  v459 += v469;
                  if (v459 == (char *)v468)
                    break;
                  v473 = *(char **)v449;
                  v449 += 8;
                  v450 = v473;
                  if (v468 - (uint64_t)v459 >= 4096)
                    v469 = 4096;
                  else
                    v469 = v468 - (_QWORD)v459;
                  if (v469)
LABEL_742:
                    memmove(v450, v459, v469);
                }
                v450 += v469;
                v464 = (char *)*((_QWORD *)v449 - 1);
                if (v464 + 4096 == v450)
                {
                  v464 = *(char **)v449;
                  v450 = *(char **)v449;
                }
                else
                {
                  v449 -= 8;
                }
              }
              for (j = (const void **)(v458 + 8); j != v466; ++j)
              {
                v479 = 0;
                v480 = (char *)*j;
                for (v449 += 8; ; v449 += 8)
                {
                  if (4096 - v479 >= v464 - v450 + 4096)
                    v481 = v464 - v450 + 4096;
                  else
                    v481 = 4096 - v479;
                  if (v481)
                    memmove(v450, &v480[v479], v481);
                  v479 += v481;
                  if (v479 == 4096)
                    break;
                  v482 = *(char **)v449;
                  v464 = v482;
                  v450 = v482;
                }
                v450 += v481;
                v464 = (char *)*((_QWORD *)v449 - 1);
                if (v464 + 4096 == v450)
                {
                  v464 = *(char **)v449;
                  v450 = *(char **)v449;
                }
                else
                {
                  v449 -= 8;
                }
              }
              v483 = (char *)*v466;
              if (*v466 != v467)
              {
                v484 = *(char **)v449;
                v449 += 8;
                v485 = v484 - v450 + 4096;
                if (v467 - v483 >= v485)
                  v486 = v485;
                else
                  v486 = v467 - v483;
                if (v486)
                  goto LABEL_788;
                while (1)
                {
                  v483 += v486;
                  if (v483 == v467)
                    break;
                  v487 = *(char **)v449;
                  v449 += 8;
                  v450 = v487;
                  if (v467 - v483 >= 4096)
                    v486 = 4096;
                  else
                    v486 = v467 - v483;
                  if (v486)
LABEL_788:
                    memmove(v450, v483, v486);
                }
                v450 += v486;
                v477 = v449 - 8;
                if ((char *)(*((_QWORD *)v449 - 1) + 4096) != v450)
                {
LABEL_791:
                  v449 = v477;
LABEL_792:
                  v151 = v463;
                  if (v453 == "")
                    goto LABEL_943;
                  goto LABEL_795;
                }
LABEL_762:
                v450 = *(char **)v449;
                goto LABEL_792;
              }
LABEL_794:
              v151 = v463;
              if (v453 == "")
                goto LABEL_943;
LABEL_795:
              v490 = *(char **)v449;
              v489 = (void **)(v449 + 8);
              v488 = v490;
              while (1)
              {
                v491 = v488 - v450 + 4096;
                if (", " - v453 + 2 >= v491)
                  v492 = v491;
                else
                  v492 = ", " - v453 + 2;
                if (v492)
                  memcpy(v450, v453, v492);
                v453 += v492;
                if (v453 == "")
                  break;
                v493 = (char *)*v489++;
                v488 = v493;
                v450 = v493;
              }
              goto LABEL_943;
            }
          }
          else
          {
            v466 = (const void **)&v449[8 * ((unint64_t)v465 >> 12)];
            v467 = (char *)*v466 + (v465 & 0xFFF);
            if (v458 != (char *)v466)
              goto LABEL_727;
          }
          if (v459 != v467)
          {
            v449 = &v158[8 * v163 + 8];
            if (v467 - v459 >= v464 - v450 + 4096)
              v475 = v464 - v450 + 4096;
            else
              v475 = v467 - v459;
            if (v475)
              goto LABEL_759;
            while (1)
            {
              v459 += v475;
              if (v459 == v467)
                break;
              v476 = *(char **)v449;
              v449 += 8;
              v450 = v476;
              if (v467 - v459 >= 4096)
                v475 = 4096;
              else
                v475 = v467 - v459;
              if (v475)
LABEL_759:
                memmove(v450, v459, v475);
            }
            v450 += v475;
            v477 = v449 - 8;
            if ((char *)(*((_QWORD *)v449 - 1) + 4096) != v450)
              goto LABEL_791;
            goto LABEL_762;
          }
          goto LABEL_794;
        }
        goto LABEL_723;
      }
      v704 = v151;
      v166 = (v161 << 9) - 1;
      if (*(_QWORD *)&v736[16] == *(_QWORD *)&v736[8])
        v166 = 0;
      v167 = ((unint64_t)(*(_QWORD *)&v736[16] == *(_QWORD *)&v736[8]) - *(_QWORD *)&v736[32] + 2) >> 12;
      v168 = v167 + 1;
      v169 = (unint64_t)(v166 - v156) >> 12;
      if (v167 + 1 < v169)
        v170 = v167 + 1;
      else
        v170 = v169;
      if (v167 < v169)
      {
        v155 = *(_QWORD *)&v736[32] + (v170 << 12);
        *(_QWORD *)&v736[32] = v155;
        v172 = *(_QWORD *)&v736[16] - 8;
        v171 = *(_QWORD *)(*(_QWORD *)&v736[16] - 8);
        *(_QWORD *)&v736[16] -= 8;
        if (*(_QWORD *)&v736[8] == *(_QWORD *)v736)
        {
          if (v172 >= *(_QWORD *)&v736[24])
          {
            if (*(_QWORD *)&v736[24] == *(_QWORD *)&v736[8])
              v433 = 1;
            else
              v433 = (uint64_t)(*(_QWORD *)&v736[24] - *(_QWORD *)&v736[8]) >> 2;
            if (v433 >> 61)
              goto LABEL_1191;
            v434 = (char *)operator new(8 * v433);
            v435 = (v433 + 3) >> 2;
            v173 = &v434[8 * v435];
            v436 = v173;
            v437 = v172 - (_QWORD)v158;
            if ((char *)v172 != v158)
            {
              v436 = &v173[v437 & 0xFFFFFFFFFFFFFFF8];
              v438 = v437 - 8;
              v439 = &v434[8 * v435];
              v440 = v158;
              if (v438 < 0x38)
                goto LABEL_1205;
              v441 = 8 * v435;
              v439 = &v434[8 * v435];
              v440 = v158;
              if ((unint64_t)(v439 - v158) < 0x20)
                goto LABEL_1205;
              v442 = (v438 >> 3) + 1;
              v443 = 8 * (v442 & 0x3FFFFFFFFFFFFFFCLL);
              v439 = &v173[v443];
              v440 = &v158[v443];
              v444 = (__int128 *)(v158 + 16);
              v445 = &v434[v441 + 16];
              v446 = v442 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v447 = *v444;
                *((_OWORD *)v445 - 1) = *(v444 - 1);
                *(_OWORD *)v445 = v447;
                v444 += 2;
                v445 += 32;
                v446 -= 4;
              }
              while (v446);
              if (v442 != (v442 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1205:
                do
                {
                  v448 = *(_QWORD *)v440;
                  v440 += 8;
                  *(_QWORD *)v439 = v448;
                  v439 += 8;
                }
                while (v439 != v436);
              }
            }
            *(_QWORD *)v736 = v434;
            *(_QWORD *)&v736[8] = v173;
            *(_QWORD *)&v736[16] = v436;
            *(_QWORD *)&v736[24] = &v434[8 * v433];
            if (v158)
              operator delete(v158);
          }
          else
          {
            v251 = (uint64_t)(*(_QWORD *)&v736[24] - v172) >> 3;
            if (v251 >= -1)
              v252 = v251 + 1;
            else
              v252 = v251 + 2;
            v253 = v252 >> 1;
            v254 = v172 + 8 * (v252 >> 1);
            v173 = (char *)(v254 - (v172 - *(_QWORD *)&v736[8]));
            if (v172 != *(_QWORD *)&v736[8])
            {
              memmove((void *)(v254 - (v172 - *(_QWORD *)&v736[8])), *(const void **)&v736[8], v172 - *(_QWORD *)&v736[8]);
              v158 = (char *)v172;
            }
            *(_QWORD *)&v736[8] = v173;
            *(_QWORD *)&v736[16] = &v158[8 * v253];
          }
        }
        else
        {
          v173 = *(char **)&v736[8];
        }
        v151 = v704;
        *((_QWORD *)v173 - 1) = v171;
        v158 = (char *)(*(_QWORD *)&v736[8] - 8);
        *(_QWORD *)&v736[8] -= 8;
LABEL_708:
        v159 = *(char **)&v736[16];
        v163 = v155 >> 12;
        goto LABEL_709;
      }
      v190 = v168 - v170;
      v191 = *(char **)v736;
      v192 = (uint64_t)(*(_QWORD *)&v736[16] - *(_QWORD *)&v736[8]) >> 3;
      if (v168 - v170 > ((uint64_t)(*(_QWORD *)&v736[24] - *(_QWORD *)v736) >> 3) - v192)
      {
        if (*(_QWORD *)&v736[16] == *(_QWORD *)&v736[8])
          v193 = -1;
        else
          v193 = 0;
        v194 = v190 + v192;
        if ((uint64_t)(*(_QWORD *)&v736[24] - *(_QWORD *)v736) >> 2 <= v194)
          v195 = v194;
        else
          v195 = (uint64_t)(*(_QWORD *)&v736[24] - *(_QWORD *)v736) >> 2;
        v700 = v193;
        v702 = *(_QWORD *)&v736[32];
        if (v195)
        {
          if (v195 >> 61)
            goto LABEL_1191;
          v196 = (char *)operator new(8 * v195);
        }
        else
        {
          v196 = 0;
        }
        v699 = v168 << 12;
        v285 = v196;
        v158 = v196;
        v286 = &v196[8 * v195];
        while (1)
        {
          while (1)
          {
            v287 = operator new(0x1000uLL);
            if (v285 == v286)
              break;
LABEL_528:
            *(_QWORD *)v285 = v287;
            v285 += 8;
            if (!--v190)
              goto LABEL_553;
          }
          if (v158 > v196)
          {
            v288 = (v158 - v196) >> 3;
            if (v288 >= -1)
              v289 = v288 + 1;
            else
              v289 = v288 + 2;
            v290 = v289 >> 1;
            v291 = &v158[-8 * (v289 >> 1)];
            v292 = v286;
            if (v286 != v158)
            {
              memmove(v291, v158, v286 - v158);
              v292 = v158;
            }
            v285 = &v291[v286 - v158];
            v158 = &v292[-8 * v290];
            goto LABEL_528;
          }
          if (v286 == v196)
            v293 = 1;
          else
            v293 = (v286 - v196) >> 2;
          if (v293 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v294 = (char *)operator new(8 * v293);
          v295 = v294;
          v296 = v293 >> 2;
          v297 = &v294[8 * (v293 >> 2)];
          v298 = v297;
          v299 = v286 - v158;
          if (v286 != v158)
          {
            v298 = &v297[v299 & 0xFFFFFFFFFFFFFFF8];
            v300 = v299 - 8;
            if (v300 >= 0x38 && (v301 = 8 * v296, (unint64_t)(&v294[8 * v296] - v158) >= 0x20))
            {
              v305 = (v300 >> 3) + 1;
              v306 = 8 * (v305 & 0x3FFFFFFFFFFFFFFCLL);
              v302 = &v297[v306];
              v303 = &v158[v306];
              v307 = (__int128 *)(v158 + 16);
              v308 = &v294[v301 + 16];
              v309 = v305 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v310 = *v307;
                *((_OWORD *)v308 - 1) = *(v307 - 1);
                *(_OWORD *)v308 = v310;
                v307 += 2;
                v308 += 32;
                v309 -= 4;
              }
              while (v309);
              if (v305 == (v305 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_545;
            }
            else
            {
              v302 = &v294[8 * (v293 >> 2)];
              v303 = v158;
            }
            do
            {
              v304 = *(_QWORD *)v303;
              v303 += 8;
              *(_QWORD *)v302 = v304;
              v302 += 8;
            }
            while (v302 != v298);
          }
LABEL_545:
          v286 = &v294[8 * v293];
          if (v196)
            operator delete(v196);
          v158 = v297;
          v196 = v295;
          *(_QWORD *)v298 = v287;
          v285 = v298 + 8;
          if (!--v190)
          {
LABEL_553:
            v311 = *(_QWORD *)&v736[16];
            if (!v170)
            {
LABEL_554:
              v312 = *(uint64_t **)&v736[8];
              if (*(_QWORD *)&v736[8] == v311)
              {
LABEL_555:
                v313 = *(void **)v736;
                *(_QWORD *)v736 = v196;
                *(_QWORD *)&v736[8] = v158;
                *(_QWORD *)&v736[16] = v285;
                *(_QWORD *)&v736[24] = v286;
                v155 = v702 + v700 + v699;
                *(_QWORD *)&v736[32] = v155;
                if (v313)
                  operator delete(v313);
                goto LABEL_557;
              }
              while (2)
              {
                while (v285 != v286)
                {
                  v337 = *v312++;
                  *(_QWORD *)v285 = v337;
                  v285 += 8;
                  if (v312 == *(uint64_t **)&v736[16])
                    goto LABEL_555;
                }
                if (v158 > v196)
                {
                  v338 = (v158 - v196) >> 3;
                  if (v338 >= -1)
                    v339 = v338 + 1;
                  else
                    v339 = v338 + 2;
                  v340 = v339 >> 1;
                  v341 = &v158[-8 * (v339 >> 1)];
                  v342 = v286;
                  if (v286 != v158)
                  {
                    memmove(v341, v158, v286 - v158);
                    v342 = v158;
                  }
                  v343 = &v341[v286 - v158];
                  v344 = &v342[-8 * v340];
                  goto LABEL_605;
                }
                if (v286 == v196)
                  v345 = 1;
                else
                  v345 = (v286 - v196) >> 2;
                if (v345 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v346 = (char *)operator new(8 * v345);
                v347 = v346;
                v348 = v345 >> 2;
                v344 = &v346[8 * (v345 >> 2)];
                v343 = v344;
                v349 = v286 - v158;
                if (v286 != v158)
                {
                  v343 = &v344[v349 & 0xFFFFFFFFFFFFFFF8];
                  v350 = v349 - 8;
                  if (v350 < 0x38 || (v351 = 8 * v348, (unint64_t)(&v346[8 * v348] - v158) < 0x20))
                  {
                    v352 = &v346[8 * (v345 >> 2)];
                    v353 = v158;
                    goto LABEL_601;
                  }
                  v356 = (v350 >> 3) + 1;
                  v357 = 8 * (v356 & 0x3FFFFFFFFFFFFFFCLL);
                  v352 = &v344[v357];
                  v353 = &v158[v357];
                  v358 = (__int128 *)(v158 + 16);
                  v359 = &v346[v351 + 16];
                  v360 = v356 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v361 = *v358;
                    *((_OWORD *)v359 - 1) = *(v358 - 1);
                    *(_OWORD *)v359 = v361;
                    v358 += 2;
                    v359 += 32;
                    v360 -= 4;
                  }
                  while (v360);
                  if (v356 != (v356 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    do
                    {
LABEL_601:
                      v354 = *(_QWORD *)v353;
                      v353 += 8;
                      *(_QWORD *)v352 = v354;
                      v352 += 8;
                    }
                    while (v352 != v343);
                  }
                }
                v286 = &v346[8 * v345];
                if (v196)
                  operator delete(v196);
                v196 = v347;
LABEL_605:
                v355 = *v312++;
                *(_QWORD *)v343 = v355;
                v285 = v343 + 8;
                v158 = v344;
                if (v312 == *(uint64_t **)&v736[16])
                  goto LABEL_555;
                continue;
              }
            }
            while (2)
            {
              if (v285 != v286)
              {
                v314 = v158;
                goto LABEL_559;
              }
              if (v158 > v196)
              {
                v315 = (v158 - v196) >> 3;
                if (v315 >= -1)
                  v316 = v315 + 1;
                else
                  v316 = v315 + 2;
                v317 = v316 >> 1;
                v318 = &v158[-8 * (v316 >> 1)];
                v319 = v286;
                if (v286 != v158)
                {
                  memmove(v318, v158, v286 - v158);
                  v319 = v158;
                }
                v320 = -v317;
                v285 = &v318[v286 - v158];
                v314 = &v319[8 * v320];
                goto LABEL_559;
              }
              if (v286 == v196)
                v321 = 1;
              else
                v321 = (v286 - v196) >> 2;
              if (v321 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v322 = (char *)operator new(8 * v321);
              v323 = v322;
              v324 = v321 >> 2;
              v314 = &v322[8 * (v321 >> 2)];
              v285 = v314;
              v325 = v286 - v158;
              if (v286 != v158)
              {
                v285 = &v314[v325 & 0xFFFFFFFFFFFFFFF8];
                v326 = v325 - 8;
                if (v326 < 0x38 || (v327 = 8 * v324, (unint64_t)(&v322[8 * v324] - v158) < 0x20))
                {
                  v328 = &v322[8 * (v321 >> 2)];
                  v329 = v158;
                  goto LABEL_576;
                }
                v331 = (v326 >> 3) + 1;
                v332 = 8 * (v331 & 0x3FFFFFFFFFFFFFFCLL);
                v328 = &v314[v332];
                v329 = &v158[v332];
                v333 = (__int128 *)(v158 + 16);
                v334 = &v322[v327 + 16];
                v335 = v331 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v336 = *v333;
                  *((_OWORD *)v334 - 1) = *(v333 - 1);
                  *(_OWORD *)v334 = v336;
                  v333 += 2;
                  v334 += 32;
                  v335 -= 4;
                }
                while (v335);
                if (v331 != (v331 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_576:
                    v330 = *(_QWORD *)v329;
                    v329 += 8;
                    *(_QWORD *)v328 = v330;
                    v328 += 8;
                  }
                  while (v328 != v285);
                }
              }
              v286 = &v322[8 * v321];
              if (v196)
                operator delete(v196);
              v196 = v323;
LABEL_559:
              *(_QWORD *)v285 = *(_QWORD *)(v311 - 8);
              v285 += 8;
              v311 = *(_QWORD *)&v736[16] - 8;
              *(_QWORD *)&v736[16] -= 8;
              v158 = v314;
              if (!--v170)
                goto LABEL_554;
              continue;
            }
          }
        }
      }
      if (!v190)
        goto LABEL_493;
      if (*(_QWORD *)&v736[8] != *(_QWORD *)v736)
      {
        while (1)
        {
          v201 = operator new(0x1000uLL);
          if (v158 == v191)
          {
            if ((unint64_t)v159 >= *(_QWORD *)&v736[24])
            {
              if (*(char **)&v736[24] == v191)
                v206 = 1;
              else
                v206 = (uint64_t)(*(_QWORD *)&v736[24] - (_QWORD)v191) >> 2;
              if (v206 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v207 = (char *)operator new(8 * v206);
              v208 = (v206 + 3) >> 2;
              v158 = &v207[8 * v208];
              v209 = v158;
              v210 = v159 - v191;
              if (v159 != v191)
              {
                v209 = &v158[v210 & 0xFFFFFFFFFFFFFFF8];
                v211 = v210 - 8;
                v212 = &v207[8 * v208];
                v213 = v191;
                if (v211 < 0x38)
                  goto LABEL_1206;
                v214 = 8 * v208;
                v212 = &v207[8 * v208];
                v213 = v191;
                if ((unint64_t)(v212 - v191) < 0x20)
                  goto LABEL_1206;
                v215 = (v211 >> 3) + 1;
                v216 = 8 * (v215 & 0x3FFFFFFFFFFFFFFCLL);
                v212 = &v158[v216];
                v213 = &v191[v216];
                v217 = (__int128 *)(v191 + 16);
                v218 = &v207[v214 + 16];
                v219 = v215 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v220 = *v217;
                  *((_OWORD *)v218 - 1) = *(v217 - 1);
                  *(_OWORD *)v218 = v220;
                  v217 += 2;
                  v218 += 32;
                  v219 -= 4;
                }
                while (v219);
                if (v215 != (v215 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_1206:
                  do
                  {
                    v221 = *(_QWORD *)v213;
                    v213 += 8;
                    *(_QWORD *)v212 = v221;
                    v212 += 8;
                  }
                  while (v212 != v209);
                }
              }
              *(_QWORD *)v736 = v207;
              *(_QWORD *)&v736[8] = v158;
              *(_QWORD *)&v736[16] = v209;
              *(_QWORD *)&v736[24] = &v207[8 * v206];
              if (v191)
              {
                operator delete(v191);
                v158 = *(char **)&v736[8];
              }
            }
            else
            {
              v202 = (uint64_t)(*(_QWORD *)&v736[24] - (_QWORD)v159) >> 3;
              if (v202 >= -1)
                v203 = v202 + 1;
              else
                v203 = v202 + 2;
              v204 = v203 >> 1;
              v205 = &v159[8 * (v203 >> 1)];
              v158 = &v205[-(v159 - v191)];
              if (v159 != v191)
              {
                memmove(&v205[-(v159 - v191)], v191, v159 - v191);
                v159 = *(char **)&v736[16];
              }
              *(_QWORD *)&v736[8] = v158;
              *(_QWORD *)&v736[16] = &v159[8 * v204];
            }
          }
          *((_QWORD *)v158 - 1) = v201;
          v159 = *(char **)&v736[16];
          v158 = (char *)(*(_QWORD *)&v736[8] - 8);
          v222 = 4095;
          if (*(_QWORD *)&v736[16] - (*(_QWORD *)&v736[8] - 8) != 8)
            v222 = 4096;
          v155 = v222 + *(_QWORD *)&v736[32];
          *(_QWORD *)&v736[8] -= 8;
          *(_QWORD *)&v736[32] += v222;
          if (!--v190)
            break;
          v191 = *(char **)v736;
          if (v158 == *(char **)v736)
            goto LABEL_456;
        }
LABEL_493:
        v155 += v170 << 12;
        for (*(_QWORD *)&v736[32] = v155; v170; --v170)
        {
          v257 = *(_QWORD *)&v736[16] - 8;
          v256 = *(_QWORD *)(*(_QWORD *)&v736[16] - 8);
          *(_QWORD *)&v736[16] -= 8;
          if (v158 == *(char **)v736)
          {
            if (v257 >= *(_QWORD *)&v736[24])
            {
              if (*(char **)&v736[24] == v158)
                v262 = 1;
              else
                v262 = (uint64_t)(*(_QWORD *)&v736[24] - (_QWORD)v158) >> 2;
              if (v262 >> 61)
                goto LABEL_1191;
              v263 = (char *)operator new(8 * v262);
              v264 = (v262 + 3) >> 2;
              v255 = &v263[8 * v264];
              v265 = v255;
              v266 = v257 - (_QWORD)v158;
              if ((char *)v257 != v158)
              {
                v265 = &v255[v266 & 0xFFFFFFFFFFFFFFF8];
                v267 = v266 - 8;
                v268 = &v263[8 * v264];
                v269 = v158;
                if (v267 < 0x38)
                  goto LABEL_1207;
                v270 = 8 * v264;
                v268 = &v263[8 * v264];
                v269 = v158;
                if ((unint64_t)(v268 - v158) < 0x20)
                  goto LABEL_1207;
                v271 = (v267 >> 3) + 1;
                v272 = 8 * (v271 & 0x3FFFFFFFFFFFFFFCLL);
                v268 = &v255[v272];
                v269 = &v158[v272];
                v273 = (__int128 *)(v158 + 16);
                v274 = &v263[v270 + 16];
                v275 = v271 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v276 = *v273;
                  *((_OWORD *)v274 - 1) = *(v273 - 1);
                  *(_OWORD *)v274 = v276;
                  v273 += 2;
                  v274 += 32;
                  v275 -= 4;
                }
                while (v275);
                if (v271 != (v271 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_1207:
                  do
                  {
                    v277 = *(_QWORD *)v269;
                    v269 += 8;
                    *(_QWORD *)v268 = v277;
                    v268 += 8;
                  }
                  while (v268 != v265);
                }
              }
              *(_QWORD *)v736 = v263;
              *(_QWORD *)&v736[8] = v255;
              *(_QWORD *)&v736[16] = v265;
              *(_QWORD *)&v736[24] = &v263[8 * v262];
              if (v158)
                operator delete(v158);
            }
            else
            {
              v258 = (uint64_t)(*(_QWORD *)&v736[24] - v257) >> 3;
              if (v258 >= -1)
                v259 = v258 + 1;
              else
                v259 = v258 + 2;
              v260 = v259 >> 1;
              v261 = v257 + 8 * (v259 >> 1);
              v255 = (char *)(v261 - (v257 - (_QWORD)v158));
              if ((char *)v257 != v158)
              {
                memmove((void *)(v261 - (v257 - (_QWORD)v158)), v158, v257 - (_QWORD)v158);
                v158 = (char *)v257;
              }
              *(_QWORD *)&v736[8] = v255;
              *(_QWORD *)&v736[16] = &v158[8 * v260];
            }
          }
          else
          {
            v255 = v158;
          }
          *((_QWORD *)v255 - 1) = v256;
          v158 = (char *)(*(_QWORD *)&v736[8] - 8);
          *(_QWORD *)&v736[8] -= 8;
        }
LABEL_557:
        v151 = v704;
        goto LABEL_708;
      }
LABEL_456:
      v223 = v190;
      while (1)
      {
        v225 = operator new(0x1000uLL);
        if (v159 == *(char **)&v736[24])
        {
          v227 = *(char **)&v736[8];
          v226 = *(void **)v736;
          if (*(_QWORD *)&v736[8] <= *(_QWORD *)v736)
          {
            if (v159 == *(char **)v736)
              v233 = 1;
            else
              v233 = (uint64_t)&v159[-*(_QWORD *)v736] >> 2;
            if (v233 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v234 = operator new(8 * v233);
            v235 = v233 >> 2;
            v236 = &v234[8 * (v233 >> 2)];
            v237 = v159 - v227;
            v87 = v159 == v227;
            v159 = v236;
            if (!v87)
            {
              v159 = &v236[v237 & 0xFFFFFFFFFFFFFFF8];
              v238 = v237 - 8;
              if (v238 < 0x38)
              {
                v239 = &v234[8 * (v233 >> 2)];
                goto LABEL_477;
              }
              v240 = 8 * v235;
              v241 = &v234[8 * v235] - v227;
              v239 = &v234[8 * (v233 >> 2)];
              if (v241 < 0x20)
                goto LABEL_1208;
              v242 = (v238 >> 3) + 1;
              v243 = 8 * (v242 & 0x3FFFFFFFFFFFFFFCLL);
              v239 = &v236[v243];
              v244 = &v227[v243];
              v245 = (__int128 *)(v227 + 16);
              v246 = &v234[v240 + 16];
              v247 = v242 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v248 = *v245;
                *(v246 - 1) = *(v245 - 1);
                *v246 = v248;
                v245 += 2;
                v246 += 2;
                v247 -= 4;
              }
              while (v247);
              v227 = v244;
              if (v242 != (v242 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1208:
                do
                {
LABEL_477:
                  v249 = *(_QWORD *)v227;
                  v227 += 8;
                  *(_QWORD *)v239 = v249;
                  v239 += 8;
                }
                while (v239 != v159);
              }
            }
            *(_QWORD *)v736 = v234;
            *(_QWORD *)&v736[8] = &v234[8 * (v233 >> 2)];
            *(_QWORD *)&v736[16] = v159;
            *(_QWORD *)&v736[24] = &v234[8 * v233];
            if (v226)
            {
              operator delete(v226);
              v159 = *(char **)&v736[16];
            }
            goto LABEL_458;
          }
          v228 = (uint64_t)(*(_QWORD *)&v736[8] - *(_QWORD *)v736) >> 3;
          if (v228 >= -1)
            v229 = v228 + 1;
          else
            v229 = v228 + 2;
          v230 = v229 >> 1;
          v231 = *(_QWORD *)&v736[8] - 8 * (v229 >> 1);
          v232 = &v159[-*(_QWORD *)&v736[8]];
          if (v159 != *(char **)&v736[8])
          {
            memmove((void *)(*(_QWORD *)&v736[8] - 8 * (v229 >> 1)), *(const void **)&v736[8], (size_t)&v159[-*(_QWORD *)&v736[8]]);
            v159 = *(char **)&v736[8];
          }
          v224 = &v159[-8 * v230];
          v159 = &v232[v231];
          *(_QWORD *)&v736[8] = v224;
          *(_QWORD *)&v736[16] = &v232[v231];
        }
LABEL_458:
        *(_QWORD *)v159 = v225;
        v159 = (char *)(*(_QWORD *)&v736[16] + 8);
        *(_QWORD *)&v736[16] += 8;
        if (!--v223)
        {
          v170 += v190;
          v155 = *(_QWORD *)&v736[32];
          v158 = *(char **)&v736[8];
          goto LABEL_493;
        }
      }
    }
    v707 = v153;
    v709 = v162 + ((v160 - v164) << 9) - (v165 + *(_QWORD *)v160) + *(_QWORD *)v164;
    if (v709 < *(_QWORD *)&v736[40] - v709)
      goto LABEL_384;
LABEL_395:
    v174 = (v161 << 9) - 1;
    v175 = *(_QWORD *)&v736[16] - *(_QWORD *)&v736[8];
    if (*(_QWORD *)&v736[16] == *(_QWORD *)&v736[8])
      v174 = 0;
    v176 = v174 - v156;
    if (v176 > 1)
      goto LABEL_866;
    v705 = v151;
    v177 = 2;
    if (*(_QWORD *)&v736[16] == *(_QWORD *)&v736[8])
      v177 = 3;
    v178 = (v177 - v176) >> 12;
    if (v178 + 1 < v163)
      v179 = v178 + 1;
    else
      v179 = v163;
    if (v178 < v163)
    {
      v180 = *(_QWORD *)&v736[32] - (v179 << 12);
      *(_QWORD *)&v736[32] = v180;
      v182 = (char *)(*(_QWORD *)&v736[8] + 8);
      v181 = **(_QWORD **)&v736[8];
      *(_QWORD *)&v736[8] += 8;
      if (*(_QWORD *)&v736[16] != *(_QWORD *)&v736[24])
        goto LABEL_863;
      v183 = *(void **)v736;
      if ((unint64_t)v182 > *(_QWORD *)v736)
      {
        v184 = (uint64_t)&v182[-*(_QWORD *)v736] >> 3;
        if (v184 >= -1)
          v185 = v184 + 1;
        else
          v185 = v184 + 2;
        v186 = v185 >> 1;
        v187 = &v182[-8 * (v185 >> 1)];
        v188 = *(_QWORD *)&v736[16] - (_QWORD)v182;
        if (*(char **)&v736[16] != v182)
        {
          memmove(&v182[-8 * (v185 >> 1)], v182, *(_QWORD *)&v736[16] - (_QWORD)v182);
          v159 = v182;
        }
        v189 = &v159[-8 * v186];
        v159 = &v187[v188];
        *(_QWORD *)&v736[8] = v189;
        *(_QWORD *)&v736[16] = &v187[v188];
        goto LABEL_863;
      }
      if (*(_QWORD *)&v736[16] == *(_QWORD *)v736)
        v278 = 1;
      else
        v278 = (uint64_t)(*(_QWORD *)&v736[16] - *(_QWORD *)v736) >> 2;
      if (v278 >> 61)
        goto LABEL_1191;
      v279 = operator new(8 * v278);
      v280 = v278 >> 2;
      v281 = &v279[8 * (v278 >> 2)];
      v282 = v159 - v182;
      v87 = v159 == v182;
      v159 = v281;
      if (!v87)
      {
        v159 = &v281[v282 & 0xFFFFFFFFFFFFFFF8];
        v283 = v282 - 8;
        if (v283 < 0x38)
        {
          v284 = &v279[8 * (v278 >> 2)];
          goto LABEL_860;
        }
        v545 = 8 * v280;
        v546 = &v279[8 * v280] - v182;
        v284 = &v279[8 * (v278 >> 2)];
        if (v546 < 0x20)
          goto LABEL_1209;
        v547 = (v283 >> 3) + 1;
        v548 = 8 * (v547 & 0x3FFFFFFFFFFFFFFCLL);
        v284 = &v281[v548];
        v182 += v548;
        v549 = (__int128 *)(v158 + 24);
        v550 = &v279[v545 + 16];
        v551 = v547 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v552 = *v549;
          *(v550 - 1) = *(v549 - 1);
          *v550 = v552;
          v549 += 2;
          v550 += 2;
          v551 -= 4;
        }
        while (v551);
        if (v547 != (v547 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1209:
          do
          {
LABEL_860:
            v553 = *(_QWORD *)v182;
            v182 += 8;
            *(_QWORD *)v284 = v553;
            v284 += 8;
          }
          while (v284 != v159);
        }
      }
      *(_QWORD *)v736 = v279;
      *(_QWORD *)&v736[8] = &v279[8 * (v278 >> 2)];
      *(_QWORD *)&v736[16] = v159;
      *(_QWORD *)&v736[24] = &v279[8 * v278];
      if (v183)
        operator delete(v183);
LABEL_863:
      *(_QWORD *)v159 = v181;
      v159 = (char *)(*(_QWORD *)&v736[16] + 8);
      *(_QWORD *)&v736[16] += 8;
LABEL_864:
      v151 = v705;
      goto LABEL_865;
    }
    v197 = v178 + 1 - v179;
    v198 = v175 >> 3;
    if (v197 <= ((uint64_t)(*(_QWORD *)&v736[24] - *(_QWORD *)v736) >> 3) - (v175 >> 3))
    {
      if (v197)
      {
        v250 = ~v178;
        while (*(char **)&v736[24] != v159)
        {
          *(_QWORD *)v159 = operator new(0x1000uLL);
          v159 = (char *)(*(_QWORD *)&v736[16] + 8);
          *(_QWORD *)&v736[16] += 8;
          if (-(uint64_t)v179 == ++v250)
            goto LABEL_831;
        }
        if (v179 + v250)
        {
          v494 = -(uint64_t)(v179 + v250);
          do
          {
            v497 = operator new(0x1000uLL);
            v498 = *(char **)&v736[8];
            if (*(_QWORD *)&v736[8] == *(_QWORD *)v736)
            {
              if ((unint64_t)v159 >= *(_QWORD *)&v736[24])
              {
                if (*(_QWORD *)&v736[24] == *(_QWORD *)&v736[8])
                  v503 = 1;
                else
                  v503 = (uint64_t)(*(_QWORD *)&v736[24] - *(_QWORD *)&v736[8]) >> 2;
                if (v503 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v504 = (char *)operator new(8 * v503);
                v505 = (v503 + 3) >> 2;
                v495 = &v504[8 * v505];
                v506 = v495;
                v507 = v159 - v498;
                if (v159 != v498)
                {
                  v506 = &v495[v507 & 0xFFFFFFFFFFFFFFF8];
                  v508 = v507 - 8;
                  v509 = &v504[8 * v505];
                  v510 = v498;
                  if (v508 < 0x38)
                    goto LABEL_1210;
                  v511 = 8 * v505;
                  v509 = &v504[8 * v505];
                  v510 = v498;
                  if ((unint64_t)(v509 - v498) < 0x20)
                    goto LABEL_1210;
                  v512 = (v508 >> 3) + 1;
                  v513 = 8 * (v512 & 0x3FFFFFFFFFFFFFFCLL);
                  v509 = &v495[v513];
                  v510 = &v498[v513];
                  v514 = (__int128 *)(v498 + 16);
                  v515 = &v504[v511 + 16];
                  v516 = v512 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v517 = *v514;
                    *((_OWORD *)v515 - 1) = *(v514 - 1);
                    *(_OWORD *)v515 = v517;
                    v514 += 2;
                    v515 += 32;
                    v516 -= 4;
                  }
                  while (v516);
                  if (v512 != (v512 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_1210:
                    do
                    {
                      v518 = *(_QWORD *)v510;
                      v510 += 8;
                      *(_QWORD *)v509 = v518;
                      v509 += 8;
                    }
                    while (v509 != v506);
                  }
                }
                *(_QWORD *)v736 = v504;
                *(_QWORD *)&v736[8] = v495;
                *(_QWORD *)&v736[16] = v506;
                *(_QWORD *)&v736[24] = &v504[8 * v503];
                if (v498)
                {
                  operator delete(v498);
                  v495 = *(char **)&v736[8];
                }
              }
              else
              {
                v499 = (uint64_t)(*(_QWORD *)&v736[24] - (_QWORD)v159) >> 3;
                if (v499 >= -1)
                  v500 = v499 + 1;
                else
                  v500 = v499 + 2;
                v501 = v500 >> 1;
                v502 = &v159[8 * (v500 >> 1)];
                v495 = (char *)(v502 - &v159[-*(_QWORD *)&v736[8]]);
                if (v159 != *(char **)&v736[8])
                {
                  memmove((void *)(v502 - &v159[-*(_QWORD *)&v736[8]]), *(const void **)&v736[8], (size_t)&v159[-*(_QWORD *)&v736[8]]);
                  v159 = *(char **)&v736[16];
                }
                *(_QWORD *)&v736[8] = v495;
                *(_QWORD *)&v736[16] = &v159[8 * v501];
              }
            }
            else
            {
              v495 = *(char **)&v736[8];
            }
            *((_QWORD *)v495 - 1) = v497;
            v159 = *(char **)&v736[16];
            v496 = 4095;
            if (*(_QWORD *)&v736[16] - (*(_QWORD *)&v736[8] - 8) != 8)
              v496 = 4096;
            v155 = v496 + *(_QWORD *)&v736[32];
            *(_QWORD *)&v736[8] -= 8;
            *(_QWORD *)&v736[32] += v496;
            --v494;
          }
          while (v494);
          v179 = -(uint64_t)v250;
        }
      }
LABEL_831:
      v180 = v155 - (v179 << 12);
      *(_QWORD *)&v736[32] = v180;
      if (!v179)
        goto LABEL_864;
      while (1)
      {
        v520 = *(_QWORD *)&v736[8];
        v521 = (char *)(*(_QWORD *)&v736[8] + 8);
        v522 = **(_QWORD **)&v736[8];
        *(_QWORD *)&v736[8] += 8;
        if (v159 == *(char **)&v736[24])
        {
          v523 = *(void **)v736;
          if ((unint64_t)v521 <= *(_QWORD *)v736)
          {
            if (v159 == *(char **)v736)
              v529 = 1;
            else
              v529 = (uint64_t)&v159[-*(_QWORD *)v736] >> 2;
            if (v529 >> 61)
LABEL_1191:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v530 = operator new(8 * v529);
            v531 = v529 >> 2;
            v532 = &v530[8 * (v529 >> 2)];
            v533 = v159 - v521;
            v87 = v159 == v521;
            v159 = v532;
            if (!v87)
            {
              v159 = &v532[v533 & 0xFFFFFFFFFFFFFFF8];
              v534 = v533 - 8;
              if (v534 < 0x38)
              {
                v535 = &v530[8 * (v529 >> 2)];
                goto LABEL_853;
              }
              v536 = 8 * v531;
              v537 = &v530[8 * v531] - v521;
              v535 = &v530[8 * (v529 >> 2)];
              if (v537 < 0x20)
                goto LABEL_1211;
              v538 = (v534 >> 3) + 1;
              v539 = 8 * (v538 & 0x3FFFFFFFFFFFFFFCLL);
              v535 = &v532[v539];
              v521 += v539;
              v540 = (__int128 *)(v520 + 24);
              v541 = &v530[v536 + 16];
              v542 = v538 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v543 = *v540;
                *(v541 - 1) = *(v540 - 1);
                *v541 = v543;
                v540 += 2;
                v541 += 2;
                v542 -= 4;
              }
              while (v542);
              if (v538 != (v538 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1211:
                do
                {
LABEL_853:
                  v544 = *(_QWORD *)v521;
                  v521 += 8;
                  *(_QWORD *)v535 = v544;
                  v535 += 8;
                }
                while (v535 != v159);
              }
            }
            *(_QWORD *)v736 = v530;
            *(_QWORD *)&v736[8] = &v530[8 * (v529 >> 2)];
            *(_QWORD *)&v736[16] = v159;
            *(_QWORD *)&v736[24] = &v530[8 * v529];
            if (v523)
              operator delete(v523);
            goto LABEL_834;
          }
          v524 = (uint64_t)&v521[-*(_QWORD *)v736] >> 3;
          if (v524 >= -1)
            v525 = v524 + 1;
          else
            v525 = v524 + 2;
          v526 = v525 >> 1;
          v527 = &v521[-8 * (v525 >> 1)];
          v528 = v159 - v521;
          if (v159 != v521)
          {
            memmove(&v521[-8 * (v525 >> 1)], v521, v159 - v521);
            v159 = v521;
          }
          v519 = &v159[-8 * v526];
          v159 = &v527[v528];
          *(_QWORD *)&v736[8] = v519;
          *(_QWORD *)&v736[16] = &v527[v528];
        }
LABEL_834:
        *(_QWORD *)v159 = v522;
        v159 = (char *)(*(_QWORD *)&v736[16] + 8);
        *(_QWORD *)&v736[16] += 8;
        if (!--v179)
          goto LABEL_643;
      }
    }
    if ((uint64_t)(*(_QWORD *)&v736[24] - *(_QWORD *)v736) >> 2 <= v197 + v198)
      v199 = v197 + v198;
    else
      v199 = (uint64_t)(*(_QWORD *)&v736[24] - *(_QWORD *)v736) >> 2;
    v703 = *(_QWORD *)&v736[32];
    if (v199)
    {
      if (v199 >> 61)
        goto LABEL_1191;
      v200 = (char *)operator new(8 * v199);
    }
    else
    {
      v200 = 0;
    }
    v701 = v179 << 12;
    v159 = &v200[8 * (v198 - v179)];
    v362 = &v200[8 * v199];
    v363 = v159;
    while (2)
    {
      while (1)
      {
        v364 = operator new(0x1000uLL);
        if (v159 == v362)
          break;
LABEL_614:
        *(_QWORD *)v159 = v364;
        v159 += 8;
        if (!--v197)
          goto LABEL_639;
      }
      if (v363 <= v200)
      {
        if (v362 == v200)
          v371 = 1;
        else
          v371 = (v362 - v200) >> 2;
        if (v371 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v372 = (char *)operator new(8 * v371);
        v373 = v372;
        v374 = v371 >> 2;
        v375 = &v372[8 * (v371 >> 2)];
        v159 = v375;
        v376 = v362 - v363;
        if (v362 == v363)
          goto LABEL_633;
        v159 = &v375[v376 & 0xFFFFFFFFFFFFFFF8];
        v377 = v376 - 8;
        if (v377 >= 0x38 && (v378 = 8 * v374, (unint64_t)(&v372[8 * v374] - v363) >= 0x20))
        {
          v382 = (v377 >> 3) + 1;
          v383 = 8 * (v382 & 0x3FFFFFFFFFFFFFFCLL);
          v379 = &v375[v383];
          v380 = &v363[v383];
          v384 = (__int128 *)(v363 + 16);
          v385 = &v372[v378 + 16];
          v386 = v382 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v387 = *v384;
            *((_OWORD *)v385 - 1) = *(v384 - 1);
            *(_OWORD *)v385 = v387;
            v384 += 2;
            v385 += 32;
            v386 -= 4;
          }
          while (v386);
          if (v382 == (v382 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_633;
        }
        else
        {
          v379 = &v372[8 * (v371 >> 2)];
          v380 = v363;
        }
        do
        {
          v381 = *(_QWORD *)v380;
          v380 += 8;
          *(_QWORD *)v379 = v381;
          v379 += 8;
        }
        while (v379 != v159);
LABEL_633:
        v362 = &v372[8 * v371];
        if (v200)
          operator delete(v200);
        v200 = v373;
        v363 = v375;
        goto LABEL_614;
      }
      v365 = (v363 - v200) >> 3;
      if (v365 >= -1)
        v366 = v365 + 1;
      else
        v366 = v365 + 2;
      v367 = v366 >> 1;
      v368 = &v363[-8 * (v366 >> 1)];
      v369 = v362;
      if (v362 != v363)
      {
        memmove(v368, v363, v362 - v363);
        v369 = v363;
      }
      v370 = &v368[v362 - v363];
      v363 = &v369[-8 * v367];
      *(_QWORD *)v370 = v364;
      v159 = v370 + 8;
      if (--v197)
        continue;
      break;
    }
LABEL_639:
    for (k = *(_QWORD **)&v736[8]; v179; --v179)
    {
      if (v159 == v362)
      {
        if (v363 <= v200)
        {
          if (v362 == v200)
            v397 = 1;
          else
            v397 = (v362 - v200) >> 2;
          if (v397 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v398 = (char *)operator new(8 * v397);
          v399 = v398;
          v400 = v397 >> 2;
          v391 = &v398[8 * (v397 >> 2)];
          v159 = v391;
          v401 = v362 - v363;
          if (v362 != v363)
          {
            v159 = &v391[v401 & 0xFFFFFFFFFFFFFFF8];
            v402 = v401 - 8;
            if (v402 < 0x38 || (v403 = 8 * v400, (unint64_t)(&v398[8 * v400] - v363) < 0x20))
            {
              v404 = &v398[8 * (v397 >> 2)];
              v405 = v363;
              goto LABEL_662;
            }
            v407 = (v402 >> 3) + 1;
            v408 = 8 * (v407 & 0x3FFFFFFFFFFFFFFCLL);
            v404 = &v391[v408];
            v405 = &v363[v408];
            v409 = (__int128 *)(v363 + 16);
            v410 = &v398[v403 + 16];
            v411 = v407 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v412 = *v409;
              *((_OWORD *)v410 - 1) = *(v409 - 1);
              *(_OWORD *)v410 = v412;
              v409 += 2;
              v410 += 32;
              v411 -= 4;
            }
            while (v411);
            if (v407 != (v407 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_662:
                v406 = *(_QWORD *)v405;
                v405 += 8;
                *(_QWORD *)v404 = v406;
                v404 += 8;
              }
              while (v404 != v159);
            }
          }
          v362 = &v398[8 * v397];
          if (v200)
            operator delete(v200);
          v200 = v399;
          goto LABEL_645;
        }
        v392 = (v363 - v200) >> 3;
        if (v392 >= -1)
          v393 = v392 + 1;
        else
          v393 = v392 + 2;
        v394 = v393 >> 1;
        v395 = &v363[-8 * (v393 >> 1)];
        v396 = v362;
        if (v362 != v363)
        {
          memmove(v395, v363, v362 - v363);
          v396 = v363;
        }
        v159 = &v395[v362 - v363];
        v391 = &v396[-8 * v394];
      }
      else
      {
        v391 = v363;
      }
LABEL_645:
      *(_QWORD *)v159 = *k;
      v159 += 8;
      k = (_QWORD *)(*(_QWORD *)&v736[8] + 8);
      *(_QWORD *)&v736[8] += 8;
      v363 = v391;
    }
    v389 = *(_QWORD *)&v736[16];
    if (*(_QWORD **)&v736[16] != k)
    {
      do
      {
        if (v363 == v200)
        {
          if (v159 >= v362)
          {
            if (v362 == v363)
              v418 = 1;
            else
              v418 = (v362 - v363) >> 2;
            if (v418 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v419 = (char *)operator new(8 * v418);
            v200 = v419;
            v420 = (v418 + 3) >> 2;
            v413 = &v419[8 * v420];
            v414 = v413;
            v421 = v159 - v363;
            if (v159 != v363)
            {
              v414 = &v413[v421 & 0xFFFFFFFFFFFFFFF8];
              v422 = v421 - 8;
              v423 = &v419[8 * v420];
              v424 = v363;
              if (v422 < 0x38)
                goto LABEL_1212;
              v425 = 8 * v420;
              v423 = &v419[8 * v420];
              v424 = v363;
              if ((unint64_t)(v423 - v363) < 0x20)
                goto LABEL_1212;
              v426 = (v422 >> 3) + 1;
              v427 = 8 * (v426 & 0x3FFFFFFFFFFFFFFCLL);
              v423 = &v413[v427];
              v424 = &v363[v427];
              v428 = (__int128 *)(v363 + 16);
              v429 = &v419[v425 + 16];
              v430 = v426 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v431 = *v428;
                *((_OWORD *)v429 - 1) = *(v428 - 1);
                *(_OWORD *)v429 = v431;
                v428 += 2;
                v429 += 32;
                v430 -= 4;
              }
              while (v430);
              if (v426 != (v426 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1212:
                do
                {
                  v432 = *(_QWORD *)v424;
                  v424 += 8;
                  *(_QWORD *)v423 = v432;
                  v423 += 8;
                }
                while (v423 != v414);
              }
            }
            v362 = &v419[8 * v418];
            if (v363)
              operator delete(v363);
          }
          else
          {
            v416 = (v362 - v159) >> 3;
            if (v416 >= -1)
              v417 = v416 + 1;
            else
              v417 = v416 + 2;
            v414 = &v159[8 * (v417 >> 1)];
            v413 = &v363[8 * (v417 >> 1)];
            if (v159 == v363)
            {
              v200 = v159;
            }
            else
            {
              memmove(&v363[8 * (v417 >> 1)], v363, v159 - v363);
              v200 = v363;
            }
          }
        }
        else
        {
          v413 = v363;
          v414 = v159;
        }
        v415 = *(_QWORD *)(v389 - 8);
        v389 -= 8;
        *((_QWORD *)v413 - 1) = v415;
        v363 = v413 - 8;
        v159 = v414;
      }
      while (v389 != *(_QWORD *)&v736[8]);
    }
    v390 = *(void **)v736;
    *(_QWORD *)v736 = v200;
    *(_QWORD *)&v736[8] = v363;
    *(_QWORD *)&v736[16] = v159;
    *(_QWORD *)&v736[24] = v362;
    v180 = v703 - v701;
    *(_QWORD *)&v736[32] = v703 - v701;
    if (v390)
      operator delete(v390);
LABEL_643:
    v151 = v705;
LABEL_865:
    v154 = *(_QWORD *)&v736[40];
    v158 = *(char **)&v736[8];
    LOWORD(v156) = *(_WORD *)&v736[40] + v180;
    v157 = (*(_QWORD *)&v736[40] + v180) >> 12;
LABEL_866:
    v554 = &v158[8 * v157];
    if (v159 == v158)
    {
      v555 = 0;
      v556 = v154 - v709;
      if (v556 <= 1)
        goto LABEL_868;
LABEL_873:
      v561 = 2;
      v562 = "";
      v558 = v554;
      v559 = v555;
      v563 = (uint64_t)&v555[-*(_QWORD *)v554 - 2];
      if (v563 < 1)
        goto LABEL_878;
      goto LABEL_874;
    }
    v555 = (_BYTE *)(*(_QWORD *)v554 + (v156 & 0xFFF));
    v556 = v154 - v709;
    if (v556 > 1)
      goto LABEL_873;
LABEL_868:
    v557 = v556;
    v558 = v554;
    v559 = v555;
    do
    {
      *v559++ = asc_212B62F6A[v557];
      if (&v559[-*(_QWORD *)v558] == (_BYTE *)4096)
      {
        v560 = (_BYTE *)*((_QWORD *)v558 + 1);
        v558 += 8;
        v559 = v560;
      }
      ++*(_QWORD *)&v736[40];
      ++v557;
    }
    while (v557 != 2);
    if (!v556)
      goto LABEL_943;
    v562 = &asc_212B62F6A[v556];
    v561 = v556;
    v563 = (uint64_t)&v555[-v556 - *(_QWORD *)v554];
    if (v563 < 1)
    {
LABEL_878:
      v568 = 4095 - v563;
      v564 = &v554[-8 * (v568 >> 12)];
      v565 = (_BYTE *)(*(_QWORD *)v564 + (~(_WORD)v568 & 0xFFF));
      v566 = v564;
      v567 = v565;
      if (v565 == v555)
        goto LABEL_879;
LABEL_891:
      while (2)
      {
        *v559++ = *v567;
        if (&v559[-*(_QWORD *)v558] == (_BYTE *)4096)
        {
          v578 = (_BYTE *)*((_QWORD *)v558 + 1);
          v558 += 8;
          v559 = v578;
          if (&(++v567)[-*(_QWORD *)v566] == (_BYTE *)4096)
          {
LABEL_895:
            v579 = (_BYTE *)*((_QWORD *)v566 + 1);
            v566 += 8;
            v567 = v579;
          }
        }
        else if (&(++v567)[-*(_QWORD *)v566] == (_BYTE *)4096)
        {
          goto LABEL_895;
        }
        ++*(_QWORD *)&v736[40];
        if (v567 == v555)
          goto LABEL_879;
        continue;
      }
    }
LABEL_874:
    v564 = &v554[8 * ((unint64_t)v563 >> 12)];
    v565 = (_BYTE *)(*(_QWORD *)v564 + (v563 & 0xFFF));
    v566 = v564;
    v567 = v565;
    if (v565 != v555)
      goto LABEL_891;
LABEL_879:
    if (v561 >= v556)
    {
      if (v562 == ", ")
        goto LABEL_943;
LABEL_932:
      v597 = *(_QWORD *)v554;
      v596 = v554 - 8;
      v598 = &v555[-v597];
      if (v562 - ", " >= (uint64_t)&v555[-v597])
        v599 = (size_t)v598;
      else
        v599 = v562 - ", ";
      v600 = &v562[-v599];
      if (v599)
        goto LABEL_941;
      while (1)
      {
        do
        {
          if (v600 == ", ")
            goto LABEL_943;
          v601 = *(_QWORD *)v596;
          v596 -= 8;
          v555 = (_BYTE *)(v601 + 4096);
          if (v600 - ", " >= 4096)
            v599 = 4096;
          else
            v599 = v600 - ", ";
          v600 -= v599;
        }
        while (!v599);
LABEL_941:
        memcpy(&v555[-v599], v600, v599);
      }
    }
    v569 = v151;
    v570 = *(_BYTE **)v554;
    v571 = (uint64_t)&v555[-v556 - *(_QWORD *)v554];
    if (v571 < 1)
    {
      v580 = 4095 - v571;
      v572 = &v554[-8 * (v580 >> 12)];
      v573 = (_BYTE *)(*(_QWORD *)v572 + (~(_WORD)v580 & 0xFFF));
      if (v572 == v564)
        goto LABEL_899;
LABEL_882:
      v574 = *(_BYTE **)v564;
      if (*(_BYTE **)v564 != v565)
      {
        while (1)
        {
          v575 = (char *)(v555 - v570);
          if (v565 - v574 >= (uint64_t)v575)
            v576 = (size_t)v575;
          else
            v576 = v565 - v574;
          v565 -= v576;
          v555 -= v576;
          if (v576)
            memmove(v555, v565, v576);
          if (v565 == v574)
            break;
          v577 = (_BYTE *)*((_QWORD *)v554 - 1);
          v554 -= 8;
          v570 = v577;
          v555 = v577 + 4096;
        }
        goto LABEL_907;
      }
      while (1)
      {
        v564 -= 8;
        if (v564 == v572)
          break;
        v585 = *(_BYTE **)v564;
        v586 = (char *)(*(_QWORD *)v564 + 4096);
        while (1)
        {
          v587 = (char *)(v555 - v570);
          if (v586 - v585 >= (uint64_t)v587)
            v588 = (size_t)v587;
          else
            v588 = v586 - v585;
          v586 -= v588;
          v555 -= v588;
          if (v588)
            memmove(v555, v586, v588);
          if (v586 == v585)
            break;
          v589 = (_BYTE *)*((_QWORD *)v554 - 1);
          v554 -= 8;
          v570 = v589;
          v555 = v589 + 4096;
        }
LABEL_907:
        v570 = *(_BYTE **)v554;
        if ((_BYTE *)(*(_QWORD *)v554 + 4096) == v555)
        {
          v584 = (_BYTE *)*((_QWORD *)v554 + 1);
          v554 += 8;
          v570 = v584;
          v555 = v584;
        }
      }
      v590 = (char *)(*(_QWORD *)v572 + 4096);
      if (v590 != v573)
      {
        v591 = *(_QWORD *)v554;
        while (1)
        {
          v592 = &v555[-v591];
          if (v590 - v573 >= (uint64_t)v592)
            v593 = (size_t)v592;
          else
            v593 = v590 - v573;
          v590 -= v593;
          v555 -= v593;
          if (v593)
            memmove(v555, v590, v593);
          if (v590 == v573)
            break;
          v594 = *((_QWORD *)v554 - 1);
          v554 -= 8;
          v591 = v594;
          v555 = (_BYTE *)(v594 + 4096);
        }
        goto LABEL_927;
      }
LABEL_931:
      v151 = v569;
      if (v562 == ", ")
        goto LABEL_943;
      goto LABEL_932;
    }
    v572 = &v554[8 * ((unint64_t)v571 >> 12)];
    v573 = (_BYTE *)(*(_QWORD *)v572 + (v571 & 0xFFF));
    if (v572 != v564)
      goto LABEL_882;
LABEL_899:
    if (v573 == v565)
      goto LABEL_931;
    while (1)
    {
      v581 = (char *)(v555 - v570);
      if (v565 - v573 >= (uint64_t)v581)
        v582 = (size_t)v581;
      else
        v582 = v565 - v573;
      v565 -= v582;
      v555 -= v582;
      if (v582)
        memmove(v555, v565, v582);
      if (v565 == v573)
        break;
      v583 = (_BYTE *)*((_QWORD *)v554 - 1);
      v554 -= 8;
      v570 = v583;
      v555 = v583 + 4096;
    }
LABEL_927:
    if ((_BYTE *)(*(_QWORD *)v554 + 4096) == v555)
    {
      v595 = (_BYTE *)*((_QWORD *)v554 + 1);
      v554 += 8;
      v555 = v595;
    }
    v151 = v569;
    if (v562 != ", ")
      goto LABEL_932;
LABEL_943:
    v602 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v603 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v602 = __p.__r_.__value_.__l.__size_;
      v603 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v604 = (std::string *)((char *)v603 + v602);
    if (v151 != v604)
    {
      v145 = v151;
      v605 = v151;
      v150 = v707;
      while (1)
      {
        v606 = v605->__r_.__value_.__s.__data_[0];
        v605 = (std::string *)((char *)v605 + 1);
        if (v606 == 44)
          break;
        v145 = v605;
        if (v605 == v604)
          goto LABEL_957;
      }
      v152 = v151;
      v151 = (std::string *)((char *)&v145->__r_.__value_.__l.__data_ + 1);
      continue;
    }
    break;
  }
  v604 = v151;
  v150 = v707;
LABEL_957:
  v607 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((uint64_t)v736, v150, v151, v604);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v608 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v608 = __p.__r_.__value_.__l.__size_;
  if (*(_QWORD *)&v736[40])
  {
    v609 = (char *)(*(_QWORD *)&v736[8] + 8 * (*(_QWORD *)&v736[32] >> 12));
    if (*(_QWORD *)&v736[16] != *(_QWORD *)&v736[8])
    {
      v610 = (std::string::value_type *)(*(_QWORD *)v609 + (*(_WORD *)&v736[32] & 0xFFF));
      v611 = (char *)(*(_QWORD *)&v736[8] + 8 * ((*(_QWORD *)&v736[32] + *(_QWORD *)&v736[40]) >> 12));
      v612 = *(_QWORD *)v611 + ((*(_QWORD *)&v736[32] + *(_QWORD *)&v736[40]) & 0xFFFLL);
      if ((std::string::value_type *)v612 != v610)
      {
        v616 = v612 + ((v611 - v609) << 9) - (_QWORD)&v610[*(_QWORD *)v611] + *(_QWORD *)v609;
        if (v616)
        {
          v617 = v608;
          memset(&__s2, 0, sizeof(__s2));
          do
          {
            std::string::push_back(&__s2, *v610++);
            if (&v610[-*(_QWORD *)v609] == (std::string::value_type *)4096)
            {
              v618 = (std::string::value_type *)*((_QWORD *)v609 + 1);
              v609 += 8;
              v610 = v618;
            }
          }
          while (v610 != (std::string::value_type *)v612);
          LOBYTE(v619) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
          if ((__s2.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_s2 = &__s2;
          else
            p_s2 = (std::string *)__s2.__r_.__value_.__r.__words[0];
          if ((__s2.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v621 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
          else
            v621 = __s2.__r_.__value_.__l.__size_;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            v622 = __p.__r_.__value_.__l.__size_;
            v625 = (__p.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if (v625 - __p.__r_.__value_.__l.__size_ >= v616)
            {
              v619 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              v629 = (std::string *)__p.__r_.__value_.__r.__words[0];
              goto LABEL_1007;
            }
            v623 = __p.__r_.__value_.__l.__size_ + v616;
            if (0x7FFFFFFFFFFFFFF8 - (__p.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) < __p.__r_.__value_.__l.__size_ + v616 - v625)
              goto LABEL_1201;
            v624 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if (v625 > 0x3FFFFFFFFFFFFFF2)
            {
              v627 = 0x7FFFFFFFFFFFFFF7;
            }
            else
            {
LABEL_990:
              if (v623 <= 2 * v625)
                v623 = 2 * v625;
              v626 = (v623 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v623 | 7) != 0x17)
                v626 = v623 | 7;
              if (v623 >= 0x17)
                v627 = v626 + 1;
              else
                v627 = 23;
            }
            v628 = (std::string *)operator new(v627);
            v629 = v628;
            if (v608)
              memmove(v628, v624, v608);
            if (v622 != v608)
              memmove((char *)v629 + v608 + v616, (char *)v624 + v608, v622 - v608);
            if (v625 != 22)
              operator delete(v624);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v629;
            __p.__r_.__value_.__r.__words[2] = v627 | 0x8000000000000000;
            v630 = v622 + v616;
          }
          else
          {
            v622 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if (22 - (unint64_t)HIBYTE(__p.__r_.__value_.__r.__words[2]) < v616)
            {
              v623 = v616 + HIBYTE(__p.__r_.__value_.__r.__words[2]);
              if (v623 - 0x7FFFFFFFFFFFFFF8 >= 0x800000000000001ELL)
              {
                v624 = &__p;
                v625 = 22;
                goto LABEL_990;
              }
LABEL_1201:
              std::string::__throw_length_error[abi:ne180100]();
            }
            v629 = &__p;
LABEL_1007:
            if (v622 != v608)
            {
              memmove((char *)v629 + v608 + v616, (char *)v629 + v608, v622 - v608);
              LOBYTE(v619) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
              v617 = v622;
            }
            v630 = v617 + v616;
            if ((v619 & 0x80) == 0)
            {
              *((_BYTE *)&__p.__r_.__value_.__s + 23) = v630 & 0x7F;
              goto LABEL_1012;
            }
          }
          __p.__r_.__value_.__l.__size_ = v630;
LABEL_1012:
          v629->__r_.__value_.__s.__data_[v630] = 0;
          if (v621)
          {
            v631 = (char *)v629 + v608;
            if (v621 < 8)
            {
              v632 = p_s2;
              goto LABEL_1028;
            }
            v632 = p_s2;
            if ((unint64_t)((char *)v629 + v608 - (char *)p_s2) < 0x20)
              goto LABEL_1028;
            if (v621 >= 0x20)
            {
              v633 = v621 & 0xFFFFFFFFFFFFFFE0;
              v634 = &p_s2->__r_.__value_.__r.__words[2];
              v635 = (_OWORD *)((char *)&v629->__r_.__value_.__r.__words[2] + v608);
              v636 = v621 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v637 = *(_OWORD *)v634;
                *(v635 - 1) = *((_OWORD *)v634 - 1);
                *v635 = v637;
                v634 += 4;
                v635 += 2;
                v636 -= 32;
              }
              while (v636);
              if (v621 != v633)
              {
                if ((v621 & 0x18) == 0)
                {
                  v632 = (std::string *)((char *)p_s2 + v633);
                  v631 += v633;
                  goto LABEL_1028;
                }
                goto LABEL_1023;
              }
            }
            else
            {
              v633 = 0;
LABEL_1023:
              v631 += v621 & 0xFFFFFFFFFFFFFFF8;
              v632 = (std::string *)((char *)p_s2 + (v621 & 0xFFFFFFFFFFFFFFF8));
              v638 = (uint64_t *)((char *)p_s2 + v633);
              v639 = (std::string::size_type *)((char *)v629->__r_.__value_.__r.__words + v608 + v633);
              v640 = v633 - (v621 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v641 = *v638++;
                *v639++ = v641;
                v640 += 8;
              }
              while (v640);
              if (v621 != (v621 & 0xFFFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_1028:
                  v642 = v632->__r_.__value_.__s.__data_[0];
                  v632 = (std::string *)((char *)v632 + 1);
                  *v631++ = v642;
                }
                while (v632 != (std::string *)((char *)p_s2 + v621));
              }
            }
          }
          if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s2.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  else
  {
    v613 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v613 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v614 = v607 - (_BYTE *)v613;
    if (v608 < v607 - (_BYTE *)v613)
      std::string::__throw_out_of_range[abi:ne180100]();
    v615 = (char *)v613 + v608 - v607;
    if (v615 == -1)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        __p.__r_.__value_.__l.__size_ = v607 - (_BYTE *)v613;
        *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + v614) = 0;
      }
      else
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v614 & 0x7F;
        __p.__r_.__value_.__s.__data_[v614] = 0;
      }
    }
    else
    {
      std::string::__erase_external_with_move(&__p, v614, v615);
    }
  }
  v644 = *(void ***)&v736[16];
  v643 = *(void ***)&v736[8];
  *(_QWORD *)&v736[40] = 0;
  v645 = *(_QWORD *)&v736[16] - *(_QWORD *)&v736[8];
  if (*(_QWORD *)&v736[16] - *(_QWORD *)&v736[8] >= 0x11uLL)
  {
    do
    {
      operator delete(*v643);
      v644 = *(void ***)&v736[16];
      v643 = (void **)(*(_QWORD *)&v736[8] + 8);
      *(_QWORD *)&v736[8] = v643;
      v645 = *(_QWORD *)&v736[16] - (_QWORD)v643;
    }
    while (*(_QWORD *)&v736[16] - (_QWORD)v643 > 0x10uLL);
  }
  v646 = v645 >> 3;
  if (v646 == 1)
  {
    v647 = 2048;
LABEL_1037:
    *(_QWORD *)&v736[32] = v647;
  }
  else if (v646 == 2)
  {
    v647 = 4096;
    goto LABEL_1037;
  }
  if (v643 != v644)
  {
    do
    {
      v648 = *v643++;
      operator delete(v648);
    }
    while (v643 != v644);
    if (*(_QWORD *)&v736[16] != *(_QWORD *)&v736[8])
      *(_QWORD *)&v736[16] += (*(_QWORD *)&v736[8] - *(_QWORD *)&v736[16] + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  v98 = *(char **)v736;
  if (*(_QWORD *)v736)
    operator delete(*(void **)v736);
LABEL_1044:
  ACFULogging::getLogInstance((ACFULogging *)v98);
  ACFULogging::handleMessage();
  if (SHIBYTE(v740) < 0)
    operator delete((void *)v739);
  v649 = v727.__begin_;
  if (v727.__begin_)
  {
    v650 = v727.__end_;
    v651 = v727.__begin_;
    if (v727.__end_ == v727.__begin_)
    {
LABEL_1055:
      v727.__end_ = v649;
      operator delete(v651);
      goto LABEL_1056;
    }
    while (1)
    {
      if (SHIBYTE(v650[-1].second.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v650[-1].second.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v650[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_1050;
      }
      else if ((SHIBYTE(v650[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_1050:
        if (--v650 == v649)
          goto LABEL_1054;
        continue;
      }
      operator delete(v650[-1].first.__r_.__value_.__l.__data_);
      if (--v650 == v649)
      {
LABEL_1054:
        v651 = v727.__begin_;
        goto LABEL_1055;
      }
    }
  }
LABEL_1056:
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v652 = off_253D31E68;
  if (!off_253D31E68)
  {
    v653 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v653);
    v654 = operator new(0x20uLL);
    *v654 = &unk_24CE85728;
    v654[1] = 0;
    v654[2] = 0;
    v654[3] = v653;
    v655 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v653;
    off_253D31E70 = v654;
    if (v655)
    {
      v656 = (unint64_t *)&v655->__shared_owners_;
      do
        v657 = __ldaxr(v656);
      while (__stlxr(v657 - 1, v656));
      if (!v657)
      {
        ((void (*)(std::__shared_weak_count *))v655->__on_zero_shared)(v655);
        std::__shared_weak_count::__release_weak(v655);
      }
    }
    v652 = off_253D31E68;
  }
  v658 = (std::__shared_weak_count *)off_253D31E70;
  __s2.__r_.__value_.__r.__words[0] = (std::string::size_type)v652;
  __s2.__r_.__value_.__l.__size_ = (std::string::size_type)off_253D31E70;
  if (off_253D31E70)
  {
    v659 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v660 = __ldxr(v659);
    while (__stxr(v660 + 1, v659));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v661 = (uint64_t *)v652[1];
  if (!v661)
LABEL_1072:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v662 = *((_DWORD *)v661 + 8);
      if (v662 < 3)
        break;
      v661 = (uint64_t *)*v661;
      if (!v661)
        goto LABEL_1072;
    }
    if (v662 == 2)
      break;
    v661 = (uint64_t *)v661[1];
    if (!v661)
      goto LABEL_1072;
  }
  if (*((char *)v661 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v736, (const std::string::value_type *)v661[5], v661[6]);
  }
  else
  {
    *(_OWORD *)v736 = *(_OWORD *)(v661 + 5);
    *(_QWORD *)&v736[16] = v661[7];
  }
  v663 = std::string::append((std::string *)v736, "/sticky_nvram_items.plist", 0x19uLL);
  v664 = (void *)v663->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v739 = v663->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&v739 + 7) = *(std::string::size_type *)((char *)&v663->__r_.__value_.__r.__words[1] + 7);
  v665 = HIBYTE(v663->__r_.__value_.__r.__words[2]);
  v663->__r_.__value_.__l.__size_ = 0;
  v663->__r_.__value_.__r.__words[2] = 0;
  v663->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v734) < 0)
    operator delete(v733);
  v733 = v664;
  *(_QWORD *)&v734 = v739;
  *(_QWORD *)((char *)&v734 + 7) = *(_QWORD *)((char *)&v739 + 7);
  HIBYTE(v734) = v665;
  if ((v736[23] & 0x80000000) != 0)
    operator delete(*(void **)v736);
  if (v658)
  {
    v666 = (unint64_t *)&v658->__shared_owners_;
    do
      v667 = __ldaxr(v666);
    while (__stlxr(v667 - 1, v666));
    if (!v667)
    {
      ((void (*)(std::__shared_weak_count *))v658->__on_zero_shared)(v658);
      std::__shared_weak_count::__release_weak(v658);
    }
  }
  ACFULogging::getLogInstance((ACFULogging *)v663);
  ACFULogging::handleMessage();
  v668 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (v734 >= 0)
    v669 = (const char *)&v733;
  else
    v669 = (const char *)v733;
  v670 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v669, 0x8000100u);
  v671 = (void *)cf;
  cf = v670;
  if (v671)
    CFRelease(v671);
  if (v670)
    v672 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  else
    v672 = 0;
  if (v672)
  {
    v673 = CFURLCreateWithString(v668, v670, 0);
    v674 = (void *)v728;
    v728 = v673;
    if (v674)
      CFRelease(v674);
    v675 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get;
    if (!v673)
      v675 = 0;
    if (!v675)
      goto LABEL_1188;
    Mutable = CFDictionaryCreateMutable(v668, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    v674 = (void *)v730;
    v730 = Mutable;
    if (v674)
      CFRelease(v674);
    v677 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
    if (!Mutable)
      v677 = 0;
    if (!v677)
      goto LABEL_1188;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v678 = &__p;
    else
      v678 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v679 = CFStringCreateWithCString(v668, (const char *)v678, 0x8000100u);
    v674 = (void *)v729;
    v729 = v679;
    if (v674)
      CFRelease(v674);
    v680 = v679
         ? ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get
         : 0;
    if (!v680
      || (CFDictionarySetValue(Mutable, CFSTR("NvramItems"), v679),
          v674 = (void *)AMSupportWriteDictionarytoFileURL(),
          (_DWORD)v674))
    {
LABEL_1188:
      ACFULogging::getLogInstance((ACFULogging *)v674);
      ACFULogging::handleMessage();
    }
  }
  else
  {
    ACFULogging::getLogInstance((ACFULogging *)v671);
    ACFULogging::handleMessage();
    v673 = v728;
  }
  if (v673)
    CFRelease(v673);
  if (v729)
    CFRelease(v729);
  if (v730)
    CFRelease(v730);
  if (v670)
    CFRelease(v670);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v734) < 0)
      goto LABEL_1127;
LABEL_1124:
    v681 = v712.__begin_;
    if (!v712.__begin_)
      goto LABEL_1137;
LABEL_1128:
    v682 = v712.__end_;
    v683 = v681;
    if (v712.__end_ == v681)
    {
LABEL_1136:
      v712.__end_ = v681;
      operator delete(v683);
      goto LABEL_1137;
    }
    while (1)
    {
      if (SHIBYTE(v682[-1].second.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v682[-1].second.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v682[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_1131;
LABEL_1134:
        operator delete(v682[-1].first.__r_.__value_.__l.__data_);
        if (--v682 == v681)
        {
LABEL_1135:
          v683 = v712.__begin_;
          goto LABEL_1136;
        }
      }
      else
      {
        if (SHIBYTE(v682[-1].first.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_1134;
LABEL_1131:
        if (--v682 == v681)
          goto LABEL_1135;
      }
    }
  }
  if ((SHIBYTE(v734) & 0x80000000) == 0)
    goto LABEL_1124;
LABEL_1127:
  operator delete(v733);
  v681 = v712.__begin_;
  if (v712.__begin_)
    goto LABEL_1128;
LABEL_1137:
  v6 = 0;
LABEL_1138:
  v684 = v724;
  if (v724 != &v725)
  {
    do
    {
      *(_QWORD *)&v688 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v688 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)v736 = v688;
      *(_OWORD *)&v736[16] = v688;
      if (*((char *)v684 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v736, (const std::string::value_type *)v684[4], (std::string::size_type)v684[5]);
      }
      else
      {
        *(_OWORD *)v736 = *((_OWORD *)v684 + 2);
        *(_QWORD *)&v736[16] = v684[6];
      }
      v689 = v684[7];
      *(_QWORD *)&v736[24] = v689;
      if (v689)
      {
        CFRelease(v689);
        *(_QWORD *)&v736[24] = 0;
      }
      if ((v736[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v736);
        v690 = v684[1];
        if (v690)
        {
          do
          {
LABEL_1152:
            v691 = (uint64_t **)v690;
            v690 = (uint64_t *)*v690;
          }
          while (v690);
          goto LABEL_1142;
        }
      }
      else
      {
        v690 = v684[1];
        if (v690)
          goto LABEL_1152;
      }
      do
      {
        v691 = (uint64_t **)v684[2];
        v87 = *v691 == (uint64_t *)v684;
        v684 = v691;
      }
      while (!v87);
LABEL_1142:
      v684 = v691;
    }
    while (v691 != &v725);
  }
  v685 = v721.__begin_;
  if (!v721.__begin_)
    goto LABEL_1164;
  v686 = v721.__end_;
  v687 = v721.__begin_;
  if (v721.__end_ != v721.__begin_)
  {
    while (1)
    {
      if (SHIBYTE(v686[-1].second.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v686[-1].second.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v686[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_1158;
LABEL_1161:
        operator delete(v686[-1].first.__r_.__value_.__l.__data_);
        if (--v686 == v685)
        {
LABEL_1162:
          v687 = v721.__begin_;
          break;
        }
      }
      else
      {
        if (SHIBYTE(v686[-1].first.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_1161;
LABEL_1158:
        if (--v686 == v685)
          goto LABEL_1162;
      }
    }
  }
  v721.__end_ = v685;
  operator delete(v687);
LABEL_1164:
  v692 = v722.__begin_;
  if (v722.__begin_)
  {
    v693 = v722.__end_;
    v694 = v722.__begin_;
    if (v722.__end_ == v722.__begin_)
    {
LABEL_1173:
      v722.__end_ = v692;
      operator delete(v694);
      goto LABEL_1174;
    }
    while (1)
    {
      if (SHIBYTE(v693[-1].second.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v693[-1].second.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v693[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_1168;
      }
      else if ((SHIBYTE(v693[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_1168:
        if (--v693 == v692)
          goto LABEL_1172;
        continue;
      }
      operator delete(v693[-1].first.__r_.__value_.__l.__data_);
      if (--v693 == v692)
      {
LABEL_1172:
        v694 = v722.__begin_;
        goto LABEL_1173;
      }
    }
  }
LABEL_1174:
  v695 = __x.__begin_;
  if (__x.__begin_)
  {
    v696 = __x.__end_;
    v697 = __x.__begin_;
    if (__x.__end_ == __x.__begin_)
    {
LABEL_1183:
      __x.__end_ = v695;
      operator delete(v697);
      goto LABEL_1184;
    }
    while (1)
    {
      if (SHIBYTE(v696[-1].second.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v696[-1].second.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v696[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_1178;
      }
      else if ((SHIBYTE(v696[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_1178:
        if (--v696 == v695)
          goto LABEL_1182;
        continue;
      }
      operator delete(v696[-1].first.__r_.__value_.__l.__data_);
      if (--v696 == v695)
      {
LABEL_1182:
        v697 = __x.__begin_;
        goto LABEL_1183;
      }
    }
  }
LABEL_1184:
  std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::destroy((char *)v725);
  return v6;
}

void sub_212B03B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  const void *a66;
  const void *a67;
  const void *a68;
  const void *a69;
  void *__p;
  char a73;
  uint64_t v73;

  std::deque<char>::~deque[abi:ne180100](v73 - 224);
  if (*(char *)(v73 - 105) < 0)
    operator delete(*(void **)(v73 - 128));
  std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a63);
  ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef(&a66);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a67);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a68);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a69);
  if (a73 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a22);
  JUMPOUT(0x212B03F64);
}

void sub_212B03C24()
{
  uint64_t v0;

  if (*(char *)(v0 - 201) < 0)
    operator delete(*(void **)(v0 - 224));
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v0 - 176);
  JUMPOUT(0x212B03F14);
}

void sub_212B03C44()
{
  uint64_t v0;

  std::unique_ptr<ACFURTKitNVRMGenerator>::~unique_ptr[abi:ne180100]((uint64_t *)(v0 - 224));
  JUMPOUT(0x212B03F64);
}

void sub_212B03C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t v52;
  uint64_t v53;

  if (*(char *)(v52 + 23) < 0)
    operator delete(*(void **)v52);
  a52 = v52;
  if (*(char *)(v53 - 153) < 0)
    operator delete(*(void **)(v53 - 176));
  std::pair<std::string const,std::string>::~pair(v53 - 224);
  std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a32);
  std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a35);
  JUMPOUT(0x212B03F64);
}

void sub_212B03C7C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x212B03C88);
  JUMPOUT(0x212B03F84);
}

void sub_212B03CB0()
{
  void *v0;

  __cxa_end_catch();
  if (v0)
    operator delete(v0);
  JUMPOUT(0x212B03D84);
}

void sub_212B03CC0(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x212B03CCCLL);
  JUMPOUT(0x212B03F84);
}

void sub_212B03CF4()
{
  __cxa_end_catch();
  JUMPOUT(0x212B03CFCLL);
}

void sub_212B03D18()
{
  JUMPOUT(0x212B03DDCLL);
}

void sub_212B03D24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
    operator delete(__p);
  JUMPOUT(0x212B03F64);
}

void sub_212B03D3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0)
    operator delete(__p);
  JUMPOUT(0x212B03F64);
}

void sub_212B03D54(void *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (*(char *)(v2 - 153) < 0)
      operator delete(*(void **)(v2 - 176));
    __cxa_rethrow();
  }
  JUMPOUT(0x212B03F84);
}

void sub_212B03D7C()
{
  __cxa_end_catch();
  JUMPOUT(0x212B03D84);
}

void sub_212B03D98(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x212B03F84);
}

void sub_212B03DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  uint64_t a67;
  uint64_t a68;
  uint64_t a69;
  void *a70;
  char a73;

  ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef(&a66);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a67);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a68);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a69);
  if (a73 < 0)
    operator delete(a70);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a22);
  JUMPOUT(0x212B03F64);
}

void sub_212B03DB0()
{
  JUMPOUT(0x212B03DCCLL);
}

void sub_212B03DF0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  JUMPOUT(0x212B03F64);
}

void sub_212B03E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  uint64_t v63;

  if (*(char *)(v63 - 225) < 0)
  {
    operator delete(*(void **)(v63 - 248));
    if ((*(char *)(v63 - 105) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((*(char *)(v63 - 105) & 0x80000000) == 0)
  {
LABEL_6:
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a63);
    JUMPOUT(0x212B03F14);
  }
  operator delete(*(void **)(v63 - 128));
  goto LABEL_6;
}

void sub_212B03E90()
{
  uint64_t v0;

  if (*(char *)(v0 - 201) < 0)
    operator delete(*(void **)(v0 - 224));
  JUMPOUT(0x212B03F64);
}

void sub_212B03EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a38);
  JUMPOUT(0x212B03F64);
}

void sub_212B03EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44)
{
  std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a44);
  JUMPOUT(0x212B03F64);
}

void sub_212B03ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;

  if (*(char *)(v63 - 105) < 0)
    operator delete(*(void **)(v63 - 128));
  std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a63);
  JUMPOUT(0x212B03F14);
}

void sub_212B03EE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a30 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  JUMPOUT(0x212B03F64);
}

void sub_212B03F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,char *a61)
{
  std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a51);
  std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a54);
  std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a57);
  std::__tree<std::__value_type<std::string,eUICC::VinylPostProcess>,std::__map_value_compare<std::string,std::__value_type<std::string,eUICC::VinylPostProcess>,BBUpdaterCommon::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,eUICC::VinylPostProcess>>>::destroy(a61);
  _Unwind_Resume(a1);
}

uint64_t sGetNVRAMKeyValPairs(std::string *__s, uint64_t a2)
{
  int v4;
  size_t size;
  std::string *v6;
  _BYTE *v7;
  unint64_t v8;
  std::string *v9;
  char *v11;
  int v12;
  char *v13;
  std::string::size_type v14;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  std::string::size_type v26;
  int64_t v27;
  std::string *v28;
  size_t v29;
  std::string::size_type v30;
  _BYTE *v31;
  uint64_t v32;
  int64_t v33;
  std::string *v34;
  size_t v35;
  std::string::size_type v36;
  __int128 *p_dst;
  uint64_t *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  size_t v44;
  unint64_t v45;
  std::string::size_type v46;
  std::string *v47;
  unint64_t v48;
  size_t v49;
  __int128 *v50;
  void *v51;
  void **v52;
  unint64_t v53;
  size_t v54;
  void **v55;
  unint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  unint64_t v59;
  int8x8_t v60;
  uint64_t v61;
  uint64_t v62;
  void **v63;
  void *v64;
  _QWORD *v65;
  void **v66;
  size_t v67;
  _BYTE *v68;
  unint64_t v69;
  __int128 v70;
  std::string *v71;
  __int128 v72;
  void *v74;
  __int128 __dst;
  unint64_t v76;
  void *v77[2];
  uint64_t v78;
  void *__p[2];
  uint64_t v80;
  void *v81[2];
  void *v82[2];
  __int128 v83;

  *(_OWORD *)v82 = 0u;
  v83 = 0u;
  *(_OWORD *)v81 = 0u;
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v80 = 0xAAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAA00;
  v77[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v78 = 0xAAAAAAAAAAAAAALL;
  v77[0] = (void *)0xAAAAAAAAAAAAAA00;
  v4 = SHIBYTE(__s->__r_.__value_.__r.__words[2]);
  if (v4 < 0)
  {
    v6 = (std::string *)__s->__r_.__value_.__r.__words[0];
    size = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    v6 = __s;
  }
  v7 = memchr(v6, 32, size);
  if (v7)
    v8 = (unint64_t)v7;
  else
    v8 = (unint64_t)v6 + size;
  v9 = (std::string *)(v8 + 1);
  if (v8 - (_QWORD)v6 != size && v9 != (std::string *)((char *)v6 + size))
  {
    v11 = (char *)v6 + size + ~v8;
    do
    {
      v12 = v9->__r_.__value_.__s.__data_[0];
      if (v12 != 32)
        *(_BYTE *)v8++ = v12;
      v9 = (std::string *)((char *)v9 + 1);
      --v11;
    }
    while (v11);
    LOBYTE(v4) = *((_BYTE *)&__s->__r_.__value_.__s + 23);
  }
  if ((v4 & 0x80) != 0)
  {
    v15 = __s->__r_.__value_.__l.__size_;
    v13 = (char *)(__s->__r_.__value_.__r.__words[0] + v15);
    v14 = v8 - __s->__r_.__value_.__r.__words[0];
    if (v15 >= v14)
      goto LABEL_18;
LABEL_21:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  v13 = (char *)__s + v4;
  v14 = v8 - (_QWORD)__s;
  if (v4 < v8 - (unint64_t)__s)
    goto LABEL_21;
LABEL_18:
  if (&v13[-v8] == (char *)-1)
  {
    if ((v4 & 0x80) != 0)
    {
      v16 = __s->__r_.__value_.__r.__words[0];
      __s->__r_.__value_.__l.__size_ = v14;
      *(_BYTE *)(v16 + v14) = 0;
    }
    else
    {
      *((_BYTE *)&__s->__r_.__value_.__s + 23) = v14 & 0x7F;
      __s->__r_.__value_.__s.__data_[v14] = 0;
    }
  }
  else
  {
    std::string::__erase_external_with_move(__s, v14, (std::string::size_type)&v13[-v8]);
  }
  v17 = 0;
  v74 = &v82[1];
  while (1)
  {
    v19 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = __s->__r_.__value_.__l.__size_;
      if (v17 >= v21)
      {
LABEL_175:
        v32 = 0;
        if ((SHIBYTE(v78) & 0x80000000) == 0)
          goto LABEL_179;
        goto LABEL_184;
      }
      v20 = (std::string *)__s->__r_.__value_.__r.__words[0];
    }
    else
    {
      v20 = __s;
      v21 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
      if (v17 >= v19)
        goto LABEL_175;
    }
    v22 = (char *)v20 + v17;
    v23 = (char *)v20 + v21;
    v24 = v21 - v17;
    if (v24 >= 2)
    {
      do
      {
        v25 = (char *)memchr(v22, 39, v24 - 1);
        if (!v25)
          break;
        if (*(_WORD *)v25 == 11303)
        {
          if (v25 != v23)
          {
            v27 = v25 - (char *)v20;
            if (v25 - (char *)v20 != -1)
              goto LABEL_41;
          }
          break;
        }
        v22 = v25 + 1;
        v24 = v23 - v22;
      }
      while (v23 - v22 >= 2);
    }
    if ((v19 & 0x80) != 0)
      v26 = __s->__r_.__value_.__l.__size_;
    else
      v26 = v19;
    v27 = v26 - 1;
LABEL_41:
    if ((v19 & 0x80) != 0)
    {
      v28 = (std::string *)__s->__r_.__value_.__r.__words[0];
      v30 = __s->__r_.__value_.__l.__size_;
      v29 = v30 - v17;
      if (v30 > v17)
        goto LABEL_45;
LABEL_177:
      v32 = 1005;
LABEL_178:
      if ((SHIBYTE(v78) & 0x80000000) == 0)
        goto LABEL_179;
LABEL_184:
      operator delete(v77[0]);
      if ((SHIBYTE(v80) & 0x80000000) == 0)
        goto LABEL_180;
      goto LABEL_185;
    }
    v28 = __s;
    v29 = v19 - v17;
    if (v19 <= v17)
      goto LABEL_177;
LABEL_45:
    v31 = memchr((char *)v28 + v17, 61, v29);
    v32 = 1005;
    if (!v31)
      goto LABEL_178;
    v33 = v31 - (_BYTE *)v28;
    if (v31 - (_BYTE *)v28 == -1)
      goto LABEL_178;
    if ((v19 & 0x80) != 0)
    {
      v36 = __s->__r_.__value_.__l.__size_;
      if (v36 < v17)
LABEL_188:
        std::string::__throw_out_of_range[abi:ne180100]();
      v34 = (std::string *)__s->__r_.__value_.__r.__words[0];
      if (v36 - v17 >= v33 - v17)
        v35 = v33 - v17;
      else
        v35 = v36 - v17;
      if (v35 > 0x7FFFFFFFFFFFFFF7)
LABEL_189:
        std::string::__throw_length_error[abi:ne180100]();
    }
    else
    {
      v34 = __s;
      if (v17 > v19)
        goto LABEL_188;
      if (v19 - v17 >= v33 - v17)
        v35 = v33 - v17;
      else
        v35 = v19 - v17;
      if (v35 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_189;
    }
    if (v35 >= 0x17)
    {
      v40 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v40 = v35 | 7;
      v41 = v40 + 1;
      p_dst = (__int128 *)operator new(v40 + 1);
      *((_QWORD *)&__dst + 1) = v35;
      v76 = v41 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
LABEL_70:
      memmove(p_dst, (char *)v34 + v17, v35);
      *((_BYTE *)p_dst + v35) = 0;
      if ((SHIBYTE(v80) & 0x80000000) == 0)
        goto LABEL_62;
      goto LABEL_71;
    }
    HIBYTE(v76) = v35;
    p_dst = &__dst;
    if (v35)
      goto LABEL_70;
    LOBYTE(__dst) = 0;
    if ((SHIBYTE(v80) & 0x80000000) == 0)
      goto LABEL_62;
LABEL_71:
    operator delete(__p[0]);
LABEL_62:
    *(_OWORD *)__p = __dst;
    v80 = v76;
    v38 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((const void **)__p);
    if (v38 != &qword_253D37F80)
    {
      if (__p != (void **)(v38 + 7))
      {
        v39 = *((_BYTE *)v38 + 79);
        if (SHIBYTE(v80) < 0)
        {
          if (v39 >= 0)
            v43 = v38 + 7;
          else
            v43 = (void *)v38[7];
          if (v39 >= 0)
            v44 = *((unsigned __int8 *)v38 + 79);
          else
            v44 = v38[8];
          std::string::__assign_no_alias<false>(__p, v43, v44);
        }
        else if ((*((_BYTE *)v38 + 79) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(__p, (void *)v38[7], v38[8]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)(v38 + 7);
          v80 = v38[9];
        }
      }
      goto LABEL_87;
    }
    v42 = HIBYTE(v80);
    if (v80 < 0)
      v42 = (unint64_t)__p[1];
    if (v42 > 8)
      break;
LABEL_87:
    v45 = v33 + 2;
    if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
    {
      v46 = __s->__r_.__value_.__l.__size_;
      if (v46 < v45)
LABEL_190:
        std::string::__throw_out_of_range[abi:ne180100]();
      v47 = (std::string *)__s->__r_.__value_.__r.__words[0];
    }
    else
    {
      v46 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
      v47 = __s;
      if (v45 > v46)
        goto LABEL_190;
    }
    v48 = v46 - v45;
    if (v48 >= v27 - v33 - 2)
      v49 = v27 - v33 - 2;
    else
      v49 = v48;
    if (v49 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v49 >= 0x17)
    {
      v61 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17)
        v61 = v49 | 7;
      v62 = v61 + 1;
      v50 = (__int128 *)operator new(v61 + 1);
      *((_QWORD *)&__dst + 1) = v49;
      v76 = v62 | 0x8000000000000000;
      *(_QWORD *)&__dst = v50;
LABEL_137:
      memmove(v50, (char *)v47 + v45, v49);
      *((_BYTE *)v50 + v49) = 0;
      if ((SHIBYTE(v78) & 0x80000000) == 0)
        goto LABEL_99;
      goto LABEL_138;
    }
    HIBYTE(v76) = v49;
    v50 = &__dst;
    if (v49)
      goto LABEL_137;
    LOBYTE(__dst) = 0;
    if ((SHIBYTE(v78) & 0x80000000) == 0)
      goto LABEL_99;
LABEL_138:
    operator delete(v77[0]);
LABEL_99:
    *(_OWORD *)v77 = __dst;
    v78 = v76;
    HIBYTE(v76) = 8;
    strcpy((char *)&__dst, "bootargs");
    v51 = (void *)HIBYTE(v80);
    if (v80 >= 0)
      v52 = __p;
    else
      v52 = (void **)__p[0];
    if (v80 >= 0)
      v53 = HIBYTE(v80);
    else
      v53 = (unint64_t)__p[1];
    if (v53 >= 8)
      v54 = 8;
    else
      v54 = v53;
    if (!memcmp(v52, &__dst, v54) && v53 == 8)
    {
      v55 = v77;
      if (v78 >= 0)
      {
        v56 = HIBYTE(v78);
      }
      else
      {
        v55 = (void **)v77[0];
        v56 = (unint64_t)v77[1];
      }
      if (v56)
      {
        v57 = v55;
        if (v56 >= 8)
        {
          v57 = (char *)v55 + (v56 & 0xFFFFFFFFFFFFFFF8);
          v58 = (char *)v55 + 3;
          v59 = v56 & 0xFFFFFFFFFFFFFFF8;
          while (1)
          {
            v60 = vceq_s8(*(int8x8_t *)(v58 - 3), (int8x8_t)0x2C2C2C2C2C2C2C2CLL);
            if ((v60.i8[0] & 1) != 0)
            {
              *(v58 - 3) = 32;
              if ((v60.i8[1] & 1) == 0)
              {
LABEL_119:
                if ((v60.i8[2] & 1) == 0)
                  goto LABEL_120;
                goto LABEL_128;
              }
            }
            else if ((v60.i8[1] & 1) == 0)
            {
              goto LABEL_119;
            }
            *(v58 - 2) = 32;
            if ((v60.i8[2] & 1) == 0)
            {
LABEL_120:
              if ((v60.i8[3] & 1) == 0)
                goto LABEL_121;
              goto LABEL_129;
            }
LABEL_128:
            *(v58 - 1) = 32;
            if ((v60.i8[3] & 1) == 0)
            {
LABEL_121:
              if ((v60.i8[4] & 1) == 0)
                goto LABEL_122;
              goto LABEL_130;
            }
LABEL_129:
            *v58 = 32;
            if ((v60.i8[4] & 1) == 0)
            {
LABEL_122:
              if ((v60.i8[5] & 1) == 0)
                goto LABEL_123;
              goto LABEL_131;
            }
LABEL_130:
            v58[1] = 32;
            if ((v60.i8[5] & 1) == 0)
            {
LABEL_123:
              if ((v60.i8[6] & 1) == 0)
                goto LABEL_124;
              goto LABEL_132;
            }
LABEL_131:
            v58[2] = 32;
            if ((v60.i8[6] & 1) == 0)
            {
LABEL_124:
              if ((v60.i8[7] & 1) != 0)
                goto LABEL_133;
              goto LABEL_116;
            }
LABEL_132:
            v58[3] = 32;
            if ((v60.i8[7] & 1) != 0)
LABEL_133:
              v58[4] = 32;
LABEL_116:
            v58 += 8;
            v59 -= 8;
            if (!v59)
            {
              if (v56 == (v56 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_140;
              break;
            }
          }
        }
        v68 = (char *)v55 + v56;
        do
        {
          if (*v57 == 44)
            *v57 = 32;
          ++v57;
        }
        while (v57 != v68);
LABEL_140:
        v51 = (void *)HIBYTE(v80);
      }
    }
    if (SHIBYTE(v82[0]) < 0)
    {
      if ((char)v51 >= 0)
        v63 = __p;
      else
        v63 = (void **)__p[0];
      if ((char)v51 >= 0)
        v64 = v51;
      else
        v64 = __p[1];
      std::string::__assign_no_alias<false>(v81, v63, (size_t)v64);
    }
    else if ((char)v51 < 0)
    {
      std::string::__assign_no_alias<true>(v81, __p[0], (size_t)__p[1]);
    }
    else
    {
      *(_OWORD *)v81 = *(_OWORD *)__p;
      v82[0] = (void *)v80;
    }
    if (SHIBYTE(v83) < 0)
    {
      if (v78 >= 0)
        v66 = v77;
      else
        v66 = (void **)v77[0];
      if (v78 >= 0)
        v67 = HIBYTE(v78);
      else
        v67 = (size_t)v77[1];
      std::string::__assign_no_alias<false>((void **)v74, v66, v67);
    }
    else if (v78 < 0)
    {
      std::string::__assign_no_alias<true>(v74, v77[0], (size_t)v77[1]);
    }
    else
    {
      v65 = v74;
      *(_OWORD *)v74 = *(_OWORD *)v77;
      v65[2] = v78;
    }
    v69 = *(_QWORD *)(a2 + 8);
    if (v69 >= *(_QWORD *)(a2 + 16))
    {
      v18 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>((void **)a2, (uint64_t)v81);
    }
    else
    {
      if (SHIBYTE(v82[0]) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a2 + 8), (const std::string::value_type *)v81[0], (std::string::size_type)v81[1]);
      }
      else
      {
        v70 = *(_OWORD *)v81;
        *(void **)(v69 + 16) = v82[0];
        *(_OWORD *)v69 = v70;
      }
      v71 = (std::string *)(v69 + 24);
      if (SHIBYTE(v83) < 0)
      {
        std::string::__init_copy_ctor_external(v71, (const std::string::value_type *)v82[1], v83);
      }
      else
      {
        v72 = *(_OWORD *)v74;
        *(_QWORD *)(v69 + 40) = *((_QWORD *)v74 + 2);
        *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
      }
      v18 = (std::string *)(v69 + 48);
      *(_QWORD *)(a2 + 8) = v69 + 48;
    }
    *(_QWORD *)(a2 + 8) = v18;
    v17 = v27 + 2;
  }
  v32 = 1005;
  if (SHIBYTE(v78) < 0)
    goto LABEL_184;
LABEL_179:
  if ((SHIBYTE(v80) & 0x80000000) == 0)
  {
LABEL_180:
    if ((SHIBYTE(v83) & 0x80000000) == 0)
      goto LABEL_181;
LABEL_186:
    operator delete(v82[1]);
    if (SHIBYTE(v82[0]) < 0)
      goto LABEL_187;
    return v32;
  }
LABEL_185:
  operator delete(__p[0]);
  if (SHIBYTE(v83) < 0)
    goto LABEL_186;
LABEL_181:
  if (SHIBYTE(v82[0]) < 0)
LABEL_187:
    operator delete(v81[0]);
  return v32;
}

void sub_212B047C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      std::pair<std::string const,std::string>::~pair((uint64_t)&a27);
      _Unwind_Resume(a1);
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  std::pair<std::string const,std::string>::~pair((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<ACFURTKitNVRMGenerator>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)MEMORY[0x212BF9920]();
    operator delete(v3);
  }
  return a1;
}

uint64_t saveNVRAMFile(const __CFDictionary *a1, ACFURTKitNVRMGenerator **a2)
{
  ACFULogging *v4;
  const __CFString *Value;
  const __CFString *v6;
  CFTypeID v7;
  uint64_t v8;
  CFTypeID v9;
  ACFULogging *TypeID;
  const char *CStringPtr;
  std::string *v12;
  const __CFData *v13;
  uint64_t v14;
  std::ios_base *v15;
  std::ios_base::iostate v16;
  ACFULogging *v17;
  std::string v19;
  const __CFString *v20;
  _QWORD v21[2];
  void (__cdecl **v22)(std::fstream *__hidden);
  _BYTE v23[560];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  memset(&v19, 0, sizeof(v19));
  memset(v23, 170, sizeof(v23));
  v21[1] = 0;
  *(_QWORD *)&v23[408] = &unk_24CE802C0;
  std::ios_base::init((std::ios_base *)&v23[408], v23);
  *(_DWORD *)&v23[552] = -1;
  *(_QWORD *)&v23[544] = 0;
  v4 = (ACFULogging *)MEMORY[0x212BFA178](v23);
  if (a1 && *a2)
  {
    Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("NVRAMOutputPath"));
    v6 = Value;
    if (!Value)
    {
      v8 = 0;
      goto LABEL_17;
    }
    v7 = CFGetTypeID(Value);
    if (v7 == CFStringGetTypeID())
      CFRetain(v6);
    else
      v6 = 0;
    v20 = v6;
    v9 = CFGetTypeID(v6);
    TypeID = (ACFULogging *)CFStringGetTypeID();
    if ((ACFULogging *)v9 == TypeID)
    {
      CStringPtr = CFStringGetCStringPtr(v6, 0x8000100u);
      v12 = std::string::__assign_external(&v19, CStringPtr);
      ACFULogging::getLogInstance((ACFULogging *)v12);
      ACFULogging::handleMessage();
      v13 = (const __CFData *)ACFURTKitNVRMGenerator::copy(*a2);
      v14 = std::filebuf::open();
      v15 = (std::ios_base *)((char *)v21 + *(_QWORD *)(v21[0] - 24));
      if (v14)
        v16 = 0;
      else
        v16 = v15->__rdstate_ | 4;
      std::ios_base::clear(v15, v16);
      if (*(_QWORD *)&v23[120])
      {
        CFDataGetBytePtr(v13);
        CFDataGetLength(v13);
        std::ostream::write();
        if (!std::filebuf::close())
          std::ios_base::clear((std::ios_base *)((char *)v21 + *(_QWORD *)(v21[0] - 24)), *(_DWORD *)&v23[*(_QWORD *)(v21[0] - 24) + 8] | 4);
        v8 = 0;
        if (v13)
          goto LABEL_16;
      }
      else
      {
        ACFULogging::getLogInstance(v17);
        ACFULogging::handleMessage();
        v8 = 1;
        if (v13)
LABEL_16:
          CFRelease(v13);
      }
    }
    else
    {
      ACFULogging::getLogInstance(TypeID);
      ACFULogging::handleMessage();
      v8 = 1;
    }
  }
  else
  {
    ACFULogging::getLogInstance(v4);
    ACFULogging::handleMessage();
    v6 = 0;
    v8 = 1;
  }
LABEL_17:
  MEMORY[0x212BFA184](v23);
  std::iostream::~basic_iostream();
  MEMORY[0x212BFA3D0](&v23[408]);
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v6)
      return v8;
    goto LABEL_21;
  }
  operator delete(v19.__r_.__value_.__l.__data_);
  if (v6)
LABEL_21:
    CFRelease(v6);
  return v8;
}

void sub_212B04C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>(uint64_t a1, char *__s, const char **a3)
{
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, __s, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = (void *)(a1 + 24);
  v12 = *a3;
  v13 = strlen(*a3);
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    v11 = operator new(v15 + 1);
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = v16 | 0x8000000000000000;
    *(_QWORD *)(a1 + 24) = v11;
  }
  else
  {
    *(_BYTE *)(a1 + 47) = v13;
    if (!v13)
      goto LABEL_17;
  }
  memmove(v11, v12, v14);
LABEL_17:
  *((_BYTE *)v11 + v14) = 0;
  return a1;
}

void sub_212B04DC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::string::__erase_external_with_move(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  int v4;
  std::string::size_type size;
  std::string *v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string::size_type v9;

  if (!__n)
    return;
  v4 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v4 < 0)
  {
    v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
    v7 = size - __pos;
    if (size - __pos >= __n)
      v8 = __n;
    else
      v8 = size - __pos;
    if (size - __pos <= __n)
      goto LABEL_8;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v6 = this;
    v7 = size - __pos;
    if (size - __pos >= __n)
      v8 = __n;
    else
      v8 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
    if (v7 <= __n)
      goto LABEL_8;
  }
  memmove((char *)v6 + __pos, (char *)v6 + __pos + v8, v7 - v8);
  LOBYTE(v4) = *((_BYTE *)&this->__r_.__value_.__s + 23);
LABEL_8:
  v9 = size - v8;
  if ((v4 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = v9;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
  v6->__r_.__value_.__s.__data_[v9] = 0;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(const void **a1)
{
  uint64_t v1;
  int v2;
  const void *v3;
  size_t v4;
  uint64_t *v5;
  int v6;
  const void *v7;
  size_t v8;
  size_t v9;
  int v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  int v15;

  v1 = qword_253D37F80;
  if (!qword_253D37F80)
    return &qword_253D37F80;
  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = a1;
  else
    v3 = *a1;
  if (v2 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (size_t)a1[1];
  v5 = &qword_253D37F80;
  do
  {
    while (1)
    {
      v6 = *(char *)(v1 + 55);
      v7 = v6 >= 0 ? (const void *)(v1 + 32) : *(const void **)(v1 + 32);
      v8 = v6 >= 0 ? *(unsigned __int8 *)(v1 + 55) : *(_QWORD *)(v1 + 40);
      v9 = v4 >= v8 ? v8 : v4;
      v10 = memcmp(v7, v3, v9);
      if (v10)
        break;
      if (v8 >= v4)
        goto LABEL_23;
LABEL_9:
      v1 = *(_QWORD *)(v1 + 8);
      if (!v1)
        goto LABEL_24;
    }
    if (v10 < 0)
      goto LABEL_9;
LABEL_23:
    v5 = (uint64_t *)v1;
    v1 = *(_QWORD *)v1;
  }
  while (v1);
LABEL_24:
  if (v5 == &qword_253D37F80)
    return &qword_253D37F80;
  v11 = *((char *)v5 + 55);
  if (v11 >= 0)
    v12 = v5 + 4;
  else
    v12 = (const void *)v5[4];
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)v5 + 55);
  else
    v13 = v5[5];
  if (v13 >= v4)
    v14 = v4;
  else
    v14 = v13;
  v15 = memcmp(v3, v12, v14);
  if (v15)
  {
    if ((v15 & 0x80000000) == 0)
      return v5;
    return &qword_253D37F80;
  }
  else
  {
    if (v4 < v13)
      return &qword_253D37F80;
    return v5;
  }
}

std::string *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void **v16;
  std::string *v18;
  std::string *v19;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (std::string *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = v7 + 2 * v3;
  v19 = &v7[2 * v6];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7 + 2 * v3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v9 = v7 + 2 * v3 + 1;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 24);
    v7[1].__r_.__value_.__r.__words[6 * v3 + 2] = *(_QWORD *)(a2 + 40);
  }
  v10 = v7 + 2 * v3;
  v18 = v10;
  v11 = (char *)&v10[2];
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      v10[-2].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v13 - 4);
      *(_OWORD *)&v10[-2].__r_.__value_.__l.__data_ = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v15 = *(_OWORD *)(v13 - 3);
      v10[-1].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v13 - 1);
      *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v15;
      v10 -= 2;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v10;
    a1[1] = v11;
    a1[2] = v19;
    while (1)
    {
      if (v16 == v13)
        goto LABEL_28;
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0)
          goto LABEL_20;
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_20;
      }
      operator delete(*(v16 - 6));
LABEL_20:
      v16 -= 6;
    }
  }
  *a1 = v7 + 2 * v3;
  a1[1] = v11;
  a1[2] = v19;
LABEL_28:
  if (v13)
    operator delete(v13);
  return v18 + 2;
}

void sub_212B05190(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(char *)(v10 + 23) < 0)
  {
    operator delete(*(void **)v10);
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::string, std::string>> *)&a10);
    _Unwind_Resume(a1);
  }
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::string, std::string>> *)&a10);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  std::__split_buffer<std::pair<std::string, std::string>>::pointer begin;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer i;

  begin = this->__begin_;
  for (i = this->__end_; i != begin; i = this->__end_)
  {
    this->__end_ = i - 1;
    if (SHIBYTE(i[-1].second.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(i[-1].second.__r_.__value_.__l.__data_);
      if ((SHIBYTE(i[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        continue;
    }
    else if ((SHIBYTE(i[-1].first.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(i[-1].first.__r_.__value_.__l.__data_);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

std::vector<std::pair<std::string, std::string>> *__cdecl std::vector<std::pair<std::string,std::string>>::vector(std::vector<std::pair<std::string, std::string>> *this, const std::vector<std::pair<std::string, std::string>> *__x)
{
  int v3;
  __int128 *begin;
  __int128 *end;
  int64_t v6;
  unint64_t v7;
  std::pair<std::string, std::string> *v8;

  this->__end_cap_.__value_ = 0;
  v3 = (_DWORD)this + 16;
  this->__begin_ = 0;
  this->__end_ = 0;
  begin = (__int128 *)__x->__begin_;
  end = (__int128 *)__x->__end_;
  v6 = (char *)end - (char *)__x->__begin_;
  if (end != (__int128 *)__x->__begin_)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = (std::pair<std::string, std::string> *)operator new(v6);
    this->__begin_ = v8;
    this->__end_ = v8;
    this->__end_cap_.__value_ = v8 + v7;
    this->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v3, begin, end, &v8->first);
  }
  return this;
}

void sub_212B052F0(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void **v4;
  void **v5;
  void *v6;

  v1[1] = v2;
  v4 = (void **)*v1;
  if (!*v1)
LABEL_12:
    _Unwind_Resume(exception_object);
  v5 = (void **)v1[1];
  v6 = *v1;
  if (v5 == v4)
  {
LABEL_11:
    v1[1] = v4;
    operator delete(v6);
    goto LABEL_12;
  }
  while (1)
  {
    if (*((char *)v5 - 1) < 0)
    {
      operator delete(*(v5 - 3));
      if (*((char *)v5 - 25) < 0)
LABEL_9:
        operator delete(*(v5 - 6));
    }
    else if (*((char *)v5 - 25) < 0)
    {
      goto LABEL_9;
    }
    v5 -= 6;
    if (v5 == v4)
    {
      v6 = *v1;
      goto LABEL_11;
    }
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(int a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  std::string *v11;

  v4 = this;
  v11 = this;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v8 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v8;
      }
      v9 = v4 + 1;
      if (*((char *)v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)v6 + 3), *((_QWORD *)v6 + 4));
      }
      else
      {
        v7 = *(__int128 *)((char *)v6 + 24);
        v4[1].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 5);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v7;
      }
      v6 += 3;
      v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_212B05438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (*(char *)(v9 + 23) < 0)
  {
    operator delete(*(void **)v9);
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (1)
    {
      if (v3 == v4)
        return a1;
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if ((*(char *)(v3 - 25) & 0x80000000) == 0)
          goto LABEL_4;
      }
      else if ((*(char *)(v3 - 25) & 0x80000000) == 0)
      {
        goto LABEL_4;
      }
      operator delete(*(void **)(v3 - 48));
LABEL_4:
      v3 -= 48;
    }
  }
  return a1;
}

void std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(uint64_t a1, __int128 *a2, __int128 *a3, size_t __sz)
{
  __int128 *v6;
  uint64_t v8;
  int v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  __int128 *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::string *v22;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 4) < __sz)
  {
    if (!v10)
      goto LABEL_23;
    v11 = *(std::string **)(a1 + 8);
    v12 = *(std::string **)a1;
    if (v11 == v10)
    {
LABEL_22:
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
LABEL_23:
      if (__sz > 0x555555555555555)
        goto LABEL_41;
      v18 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
      v19 = 2 * v18;
      if (2 * v18 <= __sz)
        v19 = __sz;
      v20 = v18 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v19;
      if (v20 > 0x555555555555555)
LABEL_41:
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v21 = 2 * v20;
      v22 = (std::string *)operator new(48 * v20);
      *(_QWORD *)a1 = v22;
      *(_QWORD *)(a1 + 8) = v22;
      *(_QWORD *)(a1 + 16) = &v22[v21];
      v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v9, v6, a3, v22);
LABEL_31:
      *(_QWORD *)(a1 + 8) = v16;
      return;
    }
    while (1)
    {
      if (SHIBYTE(v11[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v11[-1].__r_.__value_.__l.__data_);
        if (SHIBYTE(v11[-2].__r_.__value_.__r.__words[2]) < 0)
LABEL_10:
          operator delete(v11[-2].__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v11[-2].__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_10;
      }
      v11 -= 2;
      if (v11 == v10)
      {
        v12 = *(std::string **)a1;
        goto LABEL_22;
      }
    }
  }
  v13 = *(std::string **)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v10) >> 4) < __sz)
  {
    v14 = &a2[((char *)v13 - (char *)v10) >> 4];
    if (v13 != v10)
    {
      v15 = 16 * (((char *)v13 - (char *)v10) >> 4);
      do
      {
        std::pair<std::string,std::string>::operator=[abi:ne180100]((void **)&v10->__r_.__value_.__l.__data_, (size_t *)v6);
        v6 += 3;
        v10 += 2;
        v15 -= 48;
      }
      while (v15);
      v10 = *(std::string **)(a1 + 8);
    }
    v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v9, v14, a3, v10);
    goto LABEL_31;
  }
  if (a2 == a3)
  {
    v17 = *(std::string **)a1;
  }
  else
  {
    v17 = *(std::string **)a1;
    do
    {
      std::pair<std::string,std::string>::operator=[abi:ne180100]((void **)&v10->__r_.__value_.__l.__data_, (size_t *)v6);
      v6 += 3;
      v10 += 2;
      v17 += 2;
    }
    while (v6 != a3);
    v13 = *(std::string **)(a1 + 8);
  }
  while (v13 != v17)
  {
    if (SHIBYTE(v13[-1].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v13[-1].__r_.__value_.__l.__data_);
      if ((SHIBYTE(v13[-2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_33;
    }
    else if ((SHIBYTE(v13[-2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_33;
    }
    operator delete(v13[-2].__r_.__value_.__l.__data_);
LABEL_33:
    v13 -= 2;
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_212B05740(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_212B05748(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void **std::pair<std::string,std::string>::operator=[abi:ne180100](void **a1, size_t *a2)
{
  size_t *v3;
  __int128 v4;
  char *v5;
  void **v6;
  size_t v7;
  size_t v8;
  __int128 v9;
  void *v11;
  size_t v12;

  if (a1 == (void **)a2)
    return a1;
  v3 = a2;
  if (*((char *)a1 + 23) < 0)
  {
    if (*((char *)a2 + 23) >= 0)
    {
      v8 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (size_t *)*a2;
      v8 = v3[1];
    }
    std::string::__assign_no_alias<false>(a1, a2, v8);
    v5 = (char *)(v3 + 3);
    v6 = a1 + 3;
    v7 = *((unsigned __int8 *)v3 + 47);
    if (*((char *)a1 + 47) < 0)
      goto LABEL_14;
    goto LABEL_10;
  }
  if ((*((_BYTE *)a2 + 23) & 0x80) == 0)
  {
    v4 = *(_OWORD *)a2;
    a1[2] = (void *)a2[2];
    *(_OWORD *)a1 = v4;
    v5 = (char *)(a2 + 3);
    v6 = a1 + 3;
    v7 = *((unsigned __int8 *)a2 + 47);
    if (*((char *)a1 + 47) < 0)
      goto LABEL_14;
    goto LABEL_10;
  }
  std::string::__assign_no_alias<true>(a1, (void *)*a2, a2[1]);
  v5 = (char *)(v3 + 3);
  v6 = a1 + 3;
  v7 = *((unsigned __int8 *)v3 + 47);
  if ((*((char *)a1 + 47) & 0x80000000) == 0)
  {
LABEL_10:
    if ((v7 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v6, (void *)v3[3], v3[4]);
      return a1;
    }
    v9 = *(_OWORD *)v5;
    v6[2] = (void *)*((_QWORD *)v5 + 2);
    *(_OWORD *)v6 = v9;
    return a1;
  }
LABEL_14:
  if ((v7 & 0x80u) == 0)
    v11 = v5;
  else
    v11 = (void *)v3[3];
  if ((v7 & 0x80u) == 0)
    v12 = v7;
  else
    v12 = v3[4];
  std::string::__assign_no_alias<false>(v6, v11, v12);
  return a1;
}

_BYTE *boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>(uint64_t a1, _BYTE *__dst, _BYTE *__src, _BYTE *a4)
{
  _BYTE *v6;
  uint64_t v8;
  BOOL v9;
  void **v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  char *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  void *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  unint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  int64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 *v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  unint64_t v85;
  int64x2_t v86;
  unint64_t v87;
  unint64_t v88;
  int64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  char *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  void **v99;
  unint64_t v100;
  BOOL v101;
  _BYTE *v103;
  void *v104;

  v6 = __dst;
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    v9 = __dst == __src;
  else
    v9 = 1;
  if (!v9)
  {
    v99 = *(void ***)(a1 + 8);
    v100 = *(_QWORD *)(a1 + 32);
    do
    {
      *v6 = (*(_BYTE **)((char *)v99 + ((v100 >> 9) & 0x7FFFFFFFFFFFF8)))[v100 & 0xFFF];
      v99 = *(void ***)(a1 + 8);
      v8 = *(_QWORD *)(a1 + 40) - 1;
      v100 = *(_QWORD *)(a1 + 32) + 1;
      *(_QWORD *)(a1 + 32) = v100;
      *(_QWORD *)(a1 + 40) = v8;
      if (v100 >= 0x2000)
      {
        operator delete(*v99);
        v99 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v99;
        v8 = *(_QWORD *)(a1 + 40);
        v100 = *(_QWORD *)(a1 + 32) - 4096;
        *(_QWORD *)(a1 + 32) = v100;
      }
      ++v6;
      if (v8)
        v101 = v6 == __src;
      else
        v101 = 1;
    }
    while (!v101);
  }
  if (v8)
  {
    if (v6 != a4)
    {
      v10 = *(void ***)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 32);
      v103 = a4;
      while (1)
      {
        v12 = *(char **)(a1 + 16);
        v13 = v12 - (char *)v10;
        v14 = v12 == (char *)v10 ? 0 : ((v12 - (char *)v10) << 9) - 1;
        v15 = *(_QWORD *)(a1 + 40) + v11;
        if (v14 == v15)
          break;
LABEL_92:
        (*(_BYTE **)((char *)v10 + ((v15 >> 9) & 0x7FFFFFFFFFFFF8)))[v15 & 0xFFF] = *v6;
        v85 = *(_QWORD *)(a1 + 32);
        ++*(_QWORD *)(a1 + 40);
        *v6 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + ((v85 >> 9) & 0x7FFFFFFFFFFFF8)) + (v85 & 0xFFF));
        v10 = *(void ***)(a1 + 8);
        v86 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_212B55310);
        *(int64x2_t *)(a1 + 32) = v86;
        v11 = v86.i64[0];
        if (v86.i64[0] >= 0x2000uLL)
        {
          operator delete(*v10);
          v10 = (void **)(*(_QWORD *)(a1 + 8) + 8);
          *(_QWORD *)(a1 + 8) = v10;
          v11 = *(_QWORD *)(a1 + 32) - 4096;
          *(_QWORD *)(a1 + 32) = v11;
        }
        if (++v6 == a4)
          return a4;
      }
      v16 = v11 >= 0x1000;
      v17 = v11 - 4096;
      if (v16)
      {
        *(_QWORD *)(a1 + 32) = v17;
        v18 = (char *)(v10 + 1);
        v19 = *v10;
        *(_QWORD *)(a1 + 8) = v10 + 1;
        if (v12 == *(char **)(a1 + 24))
        {
          v20 = *(char **)a1;
          if ((unint64_t)v18 > *(_QWORD *)a1)
          {
            v21 = (uint64_t)&v18[-*(_QWORD *)a1] >> 3;
            if (v21 >= -1)
              v22 = v21 + 1;
            else
              v22 = v21 + 2;
            v23 = v22 >> 1;
            v24 = &v18[-8 * (v22 >> 1)];
            v25 = v12 - v18;
            if (v12 != v18)
            {
              memmove(&v18[-8 * (v22 >> 1)], v10 + 1, v12 - v18);
              v12 = *(char **)(a1 + 8);
            }
            v26 = &v12[-8 * v23];
            v12 = &v24[v25];
            goto LABEL_24;
          }
          v39 = (v12 - v20) >> 2;
          if (v12 == v20)
            v39 = 1;
          if (v39 >> 61)
LABEL_118:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v40 = v39 >> 2;
          v41 = 8 * v39;
          v42 = (char *)operator new(8 * v39);
          v43 = &v42[8 * v40];
          v44 = v12 - v18;
          v9 = v12 == v18;
          v12 = v43;
          if (!v9)
          {
            v12 = &v43[v44 & 0xFFFFFFFFFFFFFFF8];
            v45 = v44 - 8;
            if ((unint64_t)(v44 - 8) >= 0x38)
            {
              v46 = &v42[8 * v40];
              if ((unint64_t)(v46 - v18) >= 0x20)
              {
                v78 = (v45 >> 3) + 1;
                v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
                v46 = &v43[v79];
                v18 += v79;
                v80 = (__int128 *)(v10 + 3);
                v81 = &v42[8 * v40 + 16];
                v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v83 = *v80;
                  *((_OWORD *)v81 - 1) = *(v80 - 1);
                  *(_OWORD *)v81 = v83;
                  v80 += 2;
                  v81 += 32;
                  v82 -= 4;
                }
                while (v82);
                if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_88;
              }
            }
            else
            {
              v46 = &v42[8 * v40];
            }
            do
            {
              v84 = *(_QWORD *)v18;
              v18 += 8;
              *(_QWORD *)v46 = v84;
              v46 += 8;
            }
            while (v46 != v12);
          }
LABEL_88:
          *(_QWORD *)a1 = v42;
          *(_QWORD *)(a1 + 8) = v43;
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(a1 + 24) = &v42[v41];
          if (v20)
          {
            operator delete(v20);
            v12 = *(char **)(a1 + 16);
          }
        }
LABEL_90:
        *(_QWORD *)v12 = v19;
        *(_QWORD *)(a1 + 16) += 8;
        goto LABEL_91;
      }
      v27 = *(char **)(a1 + 24);
      v28 = (uint64_t)&v27[-*(_QWORD *)a1];
      if (v13 >> 3 < (unint64_t)(v28 >> 3))
      {
        if (v27 != v12)
        {
          v104 = operator new(0x1000uLL);
          std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v104);
LABEL_91:
          v10 = *(void ***)(a1 + 8);
          v15 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32);
          goto LABEL_92;
        }
        v104 = operator new(0x1000uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v104);
        v47 = *(_QWORD **)(a1 + 8);
        v12 = *(char **)(a1 + 16);
        v48 = (char *)(v47 + 1);
        v19 = (void *)*v47;
        *(_QWORD *)(a1 + 8) = v47 + 1;
        if (v12 == *(char **)(a1 + 24))
        {
          v20 = *(char **)a1;
          if ((unint64_t)v48 > *(_QWORD *)a1)
          {
            v49 = (uint64_t)&v48[-*(_QWORD *)a1] >> 3;
            if (v49 >= -1)
              v50 = v49 + 1;
            else
              v50 = v49 + 2;
            v51 = v50 >> 1;
            v52 = &v48[-8 * (v50 >> 1)];
            v53 = v12 - v48;
            if (v12 != v48)
            {
              memmove(&v48[-8 * (v50 >> 1)], v48, v12 - v48);
              v48 = *(char **)(a1 + 8);
            }
            v12 = &v52[v53];
            v26 = &v48[-8 * v51];
LABEL_24:
            *(_QWORD *)(a1 + 8) = v26;
            *(_QWORD *)(a1 + 16) = v12;
            goto LABEL_90;
          }
          v87 = (v12 - v20) >> 2;
          if (v12 == v20)
            v87 = 1;
          if (v87 >> 61)
            goto LABEL_118;
          v88 = v87 >> 2;
          v41 = 8 * v87;
          v42 = (char *)operator new(8 * v87);
          v43 = &v42[8 * v88];
          v89 = v12 - v48;
          v9 = v12 == v48;
          v12 = v43;
          if (!v9)
          {
            v12 = &v43[v89 & 0xFFFFFFFFFFFFFFF8];
            v90 = v89 - 8;
            if ((unint64_t)(v89 - 8) < 0x38)
            {
              v91 = &v42[8 * v88];
              do
              {
LABEL_104:
                v98 = *(_QWORD *)v48;
                v48 += 8;
                *(_QWORD *)v91 = v98;
                v91 += 8;
              }
              while (v91 != v12);
              goto LABEL_88;
            }
            v91 = &v42[8 * v88];
            if ((unint64_t)(v91 - v48) < 0x20)
              goto LABEL_104;
            v92 = (v90 >> 3) + 1;
            v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
            v91 = &v43[v93];
            v48 += v93;
            v94 = (__int128 *)(v47 + 3);
            v95 = &v42[8 * v88 + 16];
            v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v97 = *v94;
              *((_OWORD *)v95 - 1) = *(v94 - 1);
              *(_OWORD *)v95 = v97;
              v94 += 2;
              v95 += 32;
              v96 -= 4;
            }
            while (v96);
            if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_104;
          }
          goto LABEL_88;
        }
        goto LABEL_90;
      }
      v29 = v28 >> 2;
      if (v27 == *(char **)a1)
        v30 = 1;
      else
        v30 = v29;
      if (v30 >> 61)
        goto LABEL_118;
      v31 = (char *)operator new(8 * v30);
      v32 = operator new(0x1000uLL);
      v33 = v13 >> 3;
      v34 = &v31[8 * (v13 >> 3)];
      v35 = &v31[8 * v30];
      if (v13 >> 3 == v30)
      {
        v37 = v32;
        if (v13 < 1)
        {
          if (v12 == (char *)v10)
            v54 = 1;
          else
            v54 = v13 >> 2;
          if (v54 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v34 = (char *)operator new(8 * v54);
          v35 = &v34[8 * v54];
          operator delete(v31);
          v55 = *(char **)(a1 + 8);
          v12 = *(char **)(a1 + 16);
          v31 = v34;
          *(_QWORD *)v34 = v37;
          v36 = v34 + 8;
          if (v12 == v55)
            goto LABEL_59;
        }
        else
        {
          v38 = v33 + 2;
          if (v33 >= -1)
            v38 = v33 + 1;
          v34 -= 8 * (v38 >> 1);
          *(_QWORD *)v34 = v32;
          v36 = v34 + 8;
          if (v12 == (char *)v10)
            goto LABEL_59;
        }
      }
      else
      {
        *(_QWORD *)v34 = v32;
        v36 = v34 + 8;
        if (v12 == (char *)v10)
        {
LABEL_59:
          v56 = *(char **)a1;
          *(_QWORD *)a1 = v31;
          *(_QWORD *)(a1 + 8) = v34;
          *(_QWORD *)(a1 + 16) = v36;
          *(_QWORD *)(a1 + 24) = v35;
          a4 = v103;
          if (v56)
            operator delete(v56);
          goto LABEL_91;
        }
      }
      do
      {
        if (v34 == v31)
        {
          if (v36 >= v35)
          {
            if (v35 == v31)
              v62 = 1;
            else
              v62 = (v35 - v31) >> 2;
            if (v62 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v63 = (char *)operator new(8 * v62);
            v64 = v63;
            v65 = (v62 + 3) >> 2;
            v34 = &v63[8 * v65];
            v66 = v36 - v31;
            v9 = v36 == v31;
            v36 = v34;
            if (!v9)
            {
              v36 = &v34[v66 & 0xFFFFFFFFFFFFFFF8];
              v67 = v66 - 8;
              v68 = &v63[8 * v65];
              v69 = v31;
              if (v67 < 0x38)
                goto LABEL_122;
              v70 = 8 * v65;
              v68 = &v63[8 * v65];
              v69 = v31;
              if ((unint64_t)(v68 - v31) < 0x20)
                goto LABEL_122;
              v71 = (v67 >> 3) + 1;
              v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
              v68 = &v34[v72];
              v69 = &v31[v72];
              v73 = (__int128 *)(v31 + 16);
              v74 = &v63[v70 + 16];
              v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v76 = *v73;
                *((_OWORD *)v74 - 1) = *(v73 - 1);
                *(_OWORD *)v74 = v76;
                v73 += 2;
                v74 += 32;
                v75 -= 4;
              }
              while (v75);
              if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_122:
                do
                {
                  v77 = *(_QWORD *)v69;
                  v69 += 8;
                  *(_QWORD *)v68 = v77;
                  v68 += 8;
                }
                while (v68 != v36);
              }
            }
            v35 = &v63[8 * v62];
            operator delete(v31);
            v31 = v64;
          }
          else
          {
            v58 = (v35 - v36) >> 3;
            if (v58 >= -1)
              v59 = v58 + 1;
            else
              v59 = v58 + 2;
            v60 = v59 >> 1;
            v34 = &v31[8 * (v59 >> 1)];
            v61 = v31;
            if (v36 != v31)
            {
              memmove(v34, v31, v36 - v31);
              v61 = v36;
            }
            v36 = (char *)v61 + 8 * v60;
          }
        }
        v57 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *((_QWORD *)v34 - 1) = v57;
        v34 -= 8;
      }
      while (v12 != *(char **)(a1 + 8));
      goto LABEL_59;
    }
  }
  else if (v6 != __src)
  {
    if (a4 != __src)
      memmove(v6, __src, a4 - __src);
    return &v6[a4 - __src];
  }
  return a4;
}

void sub_212B05F70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<char>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 4096;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_pointer<ACFURTKitNVRMGenerator  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ACFURTKitNVRMGenerator  *>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  if (*(_QWORD *)(a1 + 24))
  {
    v1 = (void *)MEMORY[0x212BF9920]();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<ACFURTKitNVRMGenerator  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B55386)
    return a1 + 24;
  if (((v3 & 0x8000000212B55386 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B55386))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B55386 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t __cxx_global_var_init_22()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUPartitionManager>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance, &dword_212A4D000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ManifestCache>::~PthreadMutexGuardPolicy, &ctu::Singleton<ManifestCache,ManifestCache,ctu::PthreadMutexGuardPolicy<ManifestCache>>::sInstance, &dword_212A4D000);
  }
  return result;
}

void _GLOBAL__sub_I_BasebandNVRAM_mm()
{
  void *v0[2];
  char v1;
  void *v2;
  char v3;
  void *v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  void *__p;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)v0, "boot-args", (const char **)kBootArgsShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v4, "boot-command", (const char **)kBootCommadShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v8, "auto-boot", (const char **)kAutoBootShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v12, "bootdelay", (const char **)kBootDelayShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v16, "boot-script", (const char **)kBootScriptShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v20, "boot-device", (const char **)kBootDeviceShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v24, "debug-soc", (const char **)kDebugSocShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v28, "debug-uarts", (const char **)kDebugUartsShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v32, "force-ctrr-lock", (const char **)kForceCtrrLockShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v36, "enable-auth-debug", (const char **)kEnableAuthDebugShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v40, "reconfig-breakpoints", (const char **)kReconfigBreakpointsShort);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v44, "reconfig-behavior", (const char **)&kReconfigBehaviorShort);
  std::map<std::string,std::string>::map[abi:ne180100]((_QWORD **)&mNVRAMItems, (const void **)v0, 12);
  if (v47 < 0)
  {
    operator delete(v46);
    if ((v45 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v43 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v45 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v44);
  if ((v43 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v41 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  operator delete(v42);
  if ((v41 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v39 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v40);
  if ((v39 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v37 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v38);
  if ((v37 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v35 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v36);
  if ((v35 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v33 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v34);
  if ((v33 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v31 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v32);
  if ((v31 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v29 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v30);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v27 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v28);
  if ((v27 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v25 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v26);
  if ((v25 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v23 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v24);
  if ((v23 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v21 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v22);
  if ((v21 & 0x80000000) == 0)
  {
LABEL_15:
    if ((v19 & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v20);
  if ((v19 & 0x80000000) == 0)
  {
LABEL_16:
    if ((v17 & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v18);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_17:
    if ((v15 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v16);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_18:
    if ((v13 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v14);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v11 & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v12);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_20:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  operator delete(__p);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_21:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v8);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  operator delete(v6);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v3 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v4);
  if ((v3 & 0x80000000) == 0)
  {
LABEL_24:
    if ((v1 & 0x80000000) == 0)
      return;
LABEL_49:
    operator delete(v0[0]);
    return;
  }
LABEL_48:
  operator delete(v2);
  if (v1 < 0)
    goto LABEL_49;
}

void sub_212B06584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  char a69;
  char a72;
  char a73;
  char a74;
  char a75;
  char a76;
  char a77;
  char a78;
  char a79;
  char a80;
  char a81;
  char a82;
  void **v82;

  if (SLOBYTE(STACK[0x247]) < 0)
  {
    operator delete(v82[69]);
    if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v82[66]);
  if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a82 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  operator delete(v82[63]);
  if ((a82 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a81 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v82[60]);
  if ((a81 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a80 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v82[57]);
  if ((a80 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a79 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v82[54]);
  if ((a79 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a78 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v82[51]);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a77 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v82[48]);
  if ((a77 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a76 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v82[45]);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a75 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v82[42]);
  if ((a75 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a74 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v82[39]);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a73 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v82[36]);
  if ((a73 & 0x80000000) == 0)
  {
LABEL_14:
    if ((a72 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v82[33]);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_15:
    if ((a69 & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v82[30]);
  if ((a69 & 0x80000000) == 0)
  {
LABEL_16:
    if ((a63 & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v82[27]);
  if ((a63 & 0x80000000) == 0)
  {
LABEL_17:
    if ((a57 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v82[24]);
  if ((a57 & 0x80000000) == 0)
  {
LABEL_18:
    if ((a51 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v82[21]);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_19:
    if ((a45 & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v82[18]);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_20:
    if ((a39 & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  operator delete(__p);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_21:
    if ((a33 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  operator delete(a34);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_22:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_23:
    if ((a21 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  operator delete(a22);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_24:
    if ((a15 & 0x80000000) == 0)
LABEL_50:
      _Unwind_Resume(a1);
LABEL_49:
    operator delete(a10);
    _Unwind_Resume(a1);
  }
LABEL_48:
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
    goto LABEL_50;
  goto LABEL_49;
}

void sub_212B067D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  void **v10;

  while (1)
  {
    if (*((char *)v10 - 1) < 0)
    {
      operator delete(*(v10 - 3));
      if (*((char *)v10 - 25) < 0)
LABEL_7:
        operator delete(*(v10 - 6));
    }
    else if (*((char *)v10 - 25) < 0)
    {
      goto LABEL_7;
    }
    v10 -= 6;
    if (v10 == (void **)&a10)
      JUMPOUT(0x212B067D0);
  }
}

void BBUICEMRCImage::~BBUICEMRCImage(BBUICEMRCImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24CE83780;
  v2 = *((_QWORD *)this + 5);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24CE83780;
  v2 = *((_QWORD *)this + 5);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  operator delete(this);
}

uint64_t BBUICEMRCImage::getWritePayloadData(BBUICEMRCImage *this, unsigned __int8 *a2, uint64_t a3, unsigned int a4)
{
  uint64_t result;
  void *exception;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;

  result = (*(uint64_t (**)(BBUICEMRCImage *))(*(_QWORD *)this + 32))(this);
  if (result <= a4)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 106, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/ICE/BBUICEMRCImage.cpp", 0x1Du, (ctu::LogMessageBuffer *)"Assertion failure((offset < (getWritePayloadLength())) && \"Chunk size is not sufficient to write payload data of the MRC image!\")", v10, v11, v12, v19);
    goto LABEL_9;
  }
  v20 = -1431655766;
  if (!(_DWORD)a3)
    return result;
  result = (*(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t, int *, _QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), a2, a3, &v20, *((_DWORD *)this + 8) + a4);
  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 106, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/ICE/BBUICEMRCImage.cpp", 0x24u, (ctu::LogMessageBuffer *)"Assertion failure((ret == kBBUReturnSuccess) && \"Failed to copy MRC image payload data to buffer!\")", v13, v14, v15, v19);
    goto LABEL_9;
  }
  if (v20 != (_DWORD)a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 106, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/ICE/BBUICEMRCImage.cpp", 0x25u, (ctu::LogMessageBuffer *)"Assertion failure((amountCopied == amount) && \"Copied data size mismatch: Failed to copy MRC image payload data to buffer\")", v16, v17, v18, v19);
LABEL_9:
  }
  return result;
}

void sub_212B06A04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B06A18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B06A2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUICEMRCImage::getName(BBUICEMRCImage *this)
{
  uint64_t result;

  result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t BBUICEMRCImage::getWritePayloadLength(BBUICEMRCImage *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t BBUICEMRCImage::getOpenPayloadData(BBUICEMRCImage *this)
{
  return 0;
}

uint64_t BBUICEMRCImage::getOpenPayloadLength(BBUICEMRCImage *this)
{
  return 0;
}

void BBUICEMRCImage::generateHash(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v3;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (v3)
      BBUDataSource::generateHash(v3, a2, a3);
  }
}

void BBUEUR10UpdateSource::BBUEUR10UpdateSource(BBUEUR10UpdateSource *this, BBUZipFile *a2, unsigned int a3, BBUFeedback *a4)
{
  _QWORD *v6;
  _QWORD *v7;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)this = &unk_24CE83158;
  *((_QWORD *)this + 1) = a4;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = a2;
  v6 = operator new(0x20uLL);
  *v6 = &unk_24CE80890;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = a2;
  *((_QWORD *)this + 9) = v6;
  *((_BYTE *)this + 103) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *(_QWORD *)this = &off_24CE837E8;
  *((_QWORD *)this + 24) = 0;
  *((_OWORD *)this + 10) = constinit_0;
  *((_OWORD *)this + 11) = unk_212B553F8;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = xmmword_212B553D0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  v7 = operator new(0x18uLL);
  *((_QWORD *)this + 37) = v7 + 3;
  *((_QWORD *)this + 38) = v7 + 3;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = 0;
  *((_QWORD *)this + 36) = v7;
  *((_QWORD *)this + 51) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  BBUEUR10UpdateSource::init(this);
}

void sub_212B06B94(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 288);
  if (v3)
  {
    *(_QWORD *)(v1 + 296) = v3;
    operator delete(v3);
    BBUEURUpdateSource::~BBUEURUpdateSource((void **)v1);
    _Unwind_Resume(a1);
  }
  BBUEURUpdateSource::~BBUEURUpdateSource((void **)v1);
  _Unwind_Resume(a1);
}

void sub_212B06BCC(_Unwind_Exception *a1)
{
  BBUUpdateSource *v1;
  BBUZipFile *v2;
  BBUZipFile *v3;
  void *v5;

  v3 = v2;
  if (v3)
  {
    BBUZipFile::~BBUZipFile(v3);
    operator delete(v5);
  }
  BBUUpdateSource::~BBUUpdateSource(v1);
  _Unwind_Resume(a1);
}

void BBUEURUpdateSource::~BBUEURUpdateSource(void **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  const void *v9;

  *this = &unk_24CE83158;
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  v2 = (std::__shared_weak_count *)this[9];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *this = &unk_24CE85578;
  v5 = this[3];
  if (v5)
    (*(void (**)(void *))(*(_QWORD *)v5 + 8))(v5);
  v6 = this[5];
  if (v6)
    (*(void (**)(void *))(*(_QWORD *)v6 + 8))(v6);
  v7 = this[6];
  if (v7)
    (*(void (**)(void *))(*(_QWORD *)v7 + 8))(v7);
  v8 = this[7];
  if (v8)
    (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
  v9 = this[2];
  if (v9)
    CFRelease(v9);
}

uint64_t BBUEUR10UpdateSource::BBUEUR10UpdateSource(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  std::string *v5;
  __int128 v6;
  _QWORD *v7;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24CE83158;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v5 = (std::string *)(a1 + 80);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)a1 = &off_24CE837E8;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = constinit_1;
  *(_OWORD *)(a1 + 176) = unk_212B55420;
  *(_OWORD *)(a1 + 200) = xmmword_212B553D0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  v7 = operator new(0x18uLL);
  *(_QWORD *)(a1 + 296) = v7 + 3;
  *(_QWORD *)(a1 + 304) = v7 + 3;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = 0;
  *(_QWORD *)(a1 + 288) = v7;
  *(_QWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  BBUEUR10UpdateSource::init((BBUEUR10UpdateSource *)a1);
  return a1;
}

void sub_212B06DE8(_Unwind_Exception *a1)
{
  BBUUpdateSource *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v3);
  BBUUpdateSource::~BBUUpdateSource(v1);
  _Unwind_Resume(a1);
}

void sub_212B06E08(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 288);
  if (v3)
  {
    *(_QWORD *)(v1 + 296) = v3;
    operator delete(v3);
    BBUEURUpdateSource::~BBUEURUpdateSource((void **)v1);
    _Unwind_Resume(a1);
  }
  BBUEURUpdateSource::~BBUEURUpdateSource((void **)v1);
  _Unwind_Resume(a1);
}

void BBUEUR10UpdateSource::~BBUEUR10UpdateSource(BBUEUR10UpdateSource *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;

  *(_QWORD *)this = &off_24CE837E8;
  v2 = *((_QWORD *)this + 27);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 29);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 30);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 31);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 28);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 32);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 33);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 34);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 35);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 40);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 41);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 42);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 43);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 44);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 45);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)this + 46);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *((_QWORD *)this + 47);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 48);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = (_QWORD *)*((_QWORD *)this + 36);
  v21 = (_QWORD *)*((_QWORD *)this + 37);
  while (v20 != v21)
  {
    if (*v20)
      (*(void (**)(_QWORD))(*(_QWORD *)*v20 + 8))(*v20);
    ++v20;
  }
  v22 = *((_QWORD *)this + 39);
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *((_QWORD *)this + 19);
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *((_QWORD *)this + 49);
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *((_QWORD *)this + 50);
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *((_QWORD *)this + 51);
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = (void *)*((_QWORD *)this + 36);
  if (v27)
  {
    *((_QWORD *)this + 37) = v27;
    operator delete(v27);
  }
  *(_QWORD *)this = &unk_24CE83158;
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  *(_QWORD *)this = &unk_24CE85578;
  v31 = *((_QWORD *)this + 3);
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *((_QWORD *)this + 5);
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *((_QWORD *)this + 6);
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *((_QWORD *)this + 7);
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = (const void *)*((_QWORD *)this + 2);
  if (v35)
    CFRelease(v35);
}

{
  void *v1;

  BBUEUR10UpdateSource::~BBUEUR10UpdateSource(this);
  operator delete(v1);
}

void BBUEUR10UpdateSource::init(BBUEUR10UpdateSource *this)
{
  BBUPartitionManager *v2;
  BBUPartitionManager *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  bbufs *p_p;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t *v30;
  BBUDataSource *DataSource;
  uint64_t *v32;
  char *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  int v40;
  int v41;
  BBUDataSource *v42;
  char *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  BBUDataSource *v53;
  _QWORD *v54;
  BBUELF32Header *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  int v62;
  int v63;
  BBUDataSource *v64;
  _QWORD *v65;
  BBUELF32Header *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  int v73;
  int v74;
  BBUDataSource *v75;
  _QWORD *v76;
  BBUELF32Header *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  int v84;
  int v85;
  BBUDataSource *v86;
  _QWORD *v87;
  BBUELF32Header *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  int v95;
  int v96;
  BBUDataSource *v97;
  _QWORD *v98;
  BBUELF32Header *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  int v106;
  int v107;
  BBUDataSource *v108;
  BBUEURDSPImage *v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  int v116;
  int v117;
  BBUDataSource *v118;
  BBUEURMIImage *v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  BBUPartitionManager *v126;
  BBUPartitionManager *v127;
  _QWORD *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t i;
  int v138;
  std::string::size_type size;
  unint64_t v140;
  std::string *p_dst;
  uint64_t v142;
  uint64_t v143;
  std::string *v144;
  std::string *v145;
  std::string::size_type v146;
  std::string *v147;
  __int128 v148;
  std::string *v149;
  __int128 v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  int v154;
  BBUEUREFSImage *v155;
  uint64_t v156;
  int v157;
  unsigned int v158;
  char v159;
  const char *v160;
  BOOL v161;
  std::string *v162;
  BBUEUREFSImage *v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  std::string::size_type v169;
  unint64_t v170;
  stat *v171;
  uint64_t v172;
  uint64_t v173;
  std::string *v174;
  std::string *v175;
  __int128 v176;
  timespec v177;
  std::string *v178;
  int v179;
  int v180;
  int v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  BBUDataSource *v192;
  BBUEURMIImage *v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  int v203;
  BBUDataSource *v204;
  BBUEURMIImage *v205;
  const char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  int v215;
  BBUDataSource *v216;
  _QWORD *v217;
  BBUELF32Header *v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  const char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  int v228;
  BBUDataSource *v229;
  _QWORD *v230;
  BBUELF32Header *v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  const char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  int v241;
  BBUDataSource *v242;
  _QWORD *v243;
  BBUELF32Header *v244;
  const char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  const char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  int v254;
  BBUDataSource *v255;
  _QWORD *v256;
  BBUELF32Header *v257;
  const char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  const char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  std::string::size_type v267;
  unint64_t v268;
  stat *v269;
  uint64_t v270;
  uint64_t v271;
  std::string *v272;
  std::string *v273;
  __int128 v274;
  timespec v275;
  std::string *v276;
  capabilities::updater *v277;
  __CFData *Mutable;
  _DWORD *v279;
  BBUEURMIImage *v280;
  const char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  BBUDataSource *v285;
  BBUEURMIImage *v286;
  const char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  int v292;
  BBUDataSource *v293;
  _QWORD *v294;
  BBUELF32Header *v295;
  const char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  const char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  int v305;
  BBUDataSource *v306;
  _QWORD *v307;
  BBUELF32Header *v308;
  const char *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  const char *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  int v318;
  BBUDataSource *v319;
  _QWORD *v320;
  BBUELF32Header *v321;
  const char *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  const char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  int v331;
  BBUDataSource *v332;
  _QWORD *v333;
  BBUELF32Header *v334;
  const char *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  const char *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  int v344;
  BBUDataSource *v345;
  _QWORD *v346;
  BBUELF32Header *v347;
  const char *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  const char *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  int v357;
  BBUDataSource *v358;
  const void *v359;
  void *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  void *v364;
  stat *v365;
  void *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  stat *v370;
  void *exception;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  void *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  const char *v388;
  CFDataRef v389;
  CFTypeRef cf;
  std::string v391;
  std::string __dst;
  std::string v393;
  std::string v394;
  stat __p;

  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v2 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v3 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v3);
    v4 = operator new(0x20uLL);
    *v4 = &unk_24CE85728;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v3;
    v5 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v3;
    off_253D31E70 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v2 = (BBUPartitionManager *)off_253D31E68;
  }
  v8 = (std::__shared_weak_count *)off_253D31E70;
  v394.__r_.__value_.__r.__words[0] = (std::string::size_type)v2;
  v394.__r_.__value_.__l.__size_ = (std::string::size_type)off_253D31E70;
  if (off_253D31E70)
  {
    v9 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v2, (std::string *)&__p);
  if ((__p.st_gid & 0x80000000) == 0)
    p_p = (bbufs *)&__p;
  else
    p_p = *(bbufs **)&__p.st_dev;
  if (p_p)
  {
    if ((bbufs::prepareDestination(p_p, v11) & 1) == 0)
      _BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v19, v20, v21, v22, v23, v24, (char)v388);
  }
  else
  {
    _BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v12, v13, v14, v15, v16, v17, 0);
  }
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (!v8)
      goto LABEL_25;
  }
  else if (!v8)
  {
    goto LABEL_25;
  }
  v25 = (unint64_t *)&v8->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (v26)
  {
LABEL_25:
    v27 = *((char *)this + 103);
    if ((v27 & 0x80000000) == 0)
      goto LABEL_26;
LABEL_29:
    if (*((_QWORD *)this + 11))
      goto LABEL_31;
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  v27 = *((char *)this + 103);
  if (v27 < 0)
    goto LABEL_29;
LABEL_26:
  if ((_BYTE)v27)
    goto LABEL_31;
LABEL_30:
  if (!*((_QWORD *)this + 8))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x93u, (ctu::LogMessageBuffer *)"Assertion failure(( !fFirmwareFolder.empty() || fZipFile) && \"Firmware data source error!\")", v381, v382, v383, (char)v388);
LABEL_575:
  }
LABEL_31:
  HIBYTE(__p.st_gid) = 15;
  strcpy((char *)&__p, "restoresbl1.mbn");
  v28 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v29 = v28;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    v30 = &qword_253D37000;
    if (v29)
      goto LABEL_33;
LABEL_41:
    v32 = v30;
    if (v30[502] == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_46;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_46;
    }
    if (gBBULogVerbosity < 1)
      goto LABEL_46;
    v34 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    v38 = "File not present: %s\n";
    v388 = "restoresbl1.mbn";
    v39 = 1;
    goto LABEL_45;
  }
  v30 = &qword_253D37000;
  if (!v28)
    goto LABEL_41;
LABEL_33:
  if (*((_QWORD *)this + 27))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x97u, (ctu::LogMessageBuffer *)"Assertion failure(fRestoreSBLImage == __null)", v372, v373, v374, (char)v388);
    goto LABEL_575;
  }
  HIBYTE(__p.st_gid) = 15;
  strcpy((char *)&__p, "restoresbl1.mbn");
  DataSource = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, *((_DWORD *)this + 52));
  v32 = &qword_253D37000;
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v33 = (char *)operator new(0x58uLL);
  BBUEURMIImage::BBUEURMIImage((BBUEURMIImage *)v33, DataSource, 0);
  *(_QWORD *)v33 = &unk_24CE821A0;
  *((_QWORD *)v33 + 10) = 0;
  *(_QWORD *)(v33 + 74) = 0;
  *((_WORD *)v33 + 36) = 19522;
  *((_QWORD *)v33 + 8) = *(_QWORD *)"restoreSBL";
  v33[87] = 10;
  *((_QWORD *)this + 27) = v33;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_46;
    goto LABEL_38;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
  {
LABEL_38:
    if (gBBULogVerbosity < 0)
      goto LABEL_46;
    v34 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    v38 = "Loaded restoreSBL1\n";
    v39 = 0;
LABEL_45:
    _BBULog(3, v39, v34, "", v38, v35, v36, v37, (char)v388);
  }
LABEL_46:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "sbl1.mbn");
  v40 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v41 = v40;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v41)
      goto LABEL_48;
LABEL_56:
    if (v32[502] == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_61;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_61;
    }
    if (gBBULogVerbosity < 1)
      goto LABEL_61;
    v44 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    v48 = "File not present: %s\n";
    v388 = "sbl1.mbn";
    v49 = 1;
    v50 = 1;
    goto LABEL_60;
  }
  if (!v40)
    goto LABEL_56;
LABEL_48:
  if (*((_QWORD *)this + 28))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0xA6u, (ctu::LogMessageBuffer *)"Assertion failure(fSBLImage == __null)", v375, v376, v377, (char)v388);
    goto LABEL_575;
  }
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "sbl1.mbn");
  v42 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, *((_DWORD *)this + 52));
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v43 = (char *)operator new(0x58uLL);
  BBUEURMIImage::BBUEURMIImage((BBUEURMIImage *)v43, v42, 0);
  *(_QWORD *)v43 = &unk_24CE821A0;
  *(_QWORD *)(v43 + 75) = 0;
  *(_QWORD *)(v43 + 67) = 0;
  *(_DWORD *)(v43 + 83) = 0;
  *((_WORD *)v43 + 32) = 16979;
  v43[66] = 76;
  v43[87] = 3;
  *((_QWORD *)this + 28) = v43;
  if (v32[502] == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_61;
    goto LABEL_53;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
  {
LABEL_53:
    if (gBBULogVerbosity < 0)
      goto LABEL_61;
    v44 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    v48 = "Loaded SBL1\n";
    v49 = 3;
    v50 = 0;
LABEL_60:
    _BBULog(v49, v50, v44, "", v48, v45, v46, v47, (char)v388);
  }
LABEL_61:
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "rpm.mbn");
  v51 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v52 = v51;
  if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
  {
    if (v51)
      goto LABEL_63;
LABEL_71:
    if (v32[502] == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_76;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_76;
    }
    if (gBBULogVerbosity < 1)
      goto LABEL_76;
    v56 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    v60 = "File not present: %s\n";
    v388 = "rpm.mbn";
    v61 = 1;
    goto LABEL_75;
  }
  operator delete(*(void **)&__p.st_dev);
  if (!v52)
    goto LABEL_71;
LABEL_63:
  if (*((_QWORD *)this + 29))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0xB5u, (ctu::LogMessageBuffer *)"Assertion failure(fRPMImage == __null)", v378, v379, v380, (char)v388);
    goto LABEL_575;
  }
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "rpm.mbn");
  v53 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, *((_DWORD *)this + 53));
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v54 = operator new(0x20uLL);
  *v54 = off_24CE80058;
  v54[1] = v53;
  v54[2] = 0;
  *((_DWORD *)v54 + 6) = 0;
  v55 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v55, v53, 0);
  v54[2] = v55;
  *v54 = off_24CE83918;
  *((_QWORD *)this + 29) = v54;
  if (v32[502] == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_76;
    goto LABEL_68;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
  {
LABEL_68:
    if (gBBULogVerbosity < 0)
      goto LABEL_76;
    v56 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    v60 = "Loaded RPM\n";
    v61 = 0;
LABEL_75:
    _BBULog(3, v61, v56, "", v60, v57, v58, v59, (char)v388);
  }
LABEL_76:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "apps.mbn");
  v62 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v63 = v62;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v63)
      goto LABEL_78;
LABEL_85:
    if (v32[502] == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_90;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_90;
    }
    if (gBBULogVerbosity < 1)
      goto LABEL_90;
    v67 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    v71 = "File not present: %s\n";
    v388 = "apps.mbn";
    v72 = 1;
    goto LABEL_89;
  }
  if (!v62)
    goto LABEL_85;
LABEL_78:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "apps.mbn");
  v64 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v65 = operator new(0x20uLL);
  *v65 = off_24CE80058;
  v65[1] = v64;
  v65[2] = 0;
  *((_DWORD *)v65 + 6) = 0;
  v66 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v66, v64, 0);
  v65[2] = v66;
  *v65 = off_24CE83968;
  *((_QWORD *)this + 30) = v65;
  if (v32[502] == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_90;
    goto LABEL_82;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
  {
LABEL_82:
    if (gBBULogVerbosity < 0)
      goto LABEL_90;
    v67 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    v71 = "Loaded APPS\n";
    v72 = 0;
LABEL_89:
    _BBULog(3, v72, v67, "", v71, v68, v69, v70, (char)v388);
  }
LABEL_90:
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "mba.mbn");
  v73 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v74 = v73;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v74)
      goto LABEL_92;
LABEL_99:
    if (v32[502] == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_104;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_104;
    }
    if (gBBULogVerbosity < 1)
      goto LABEL_104;
    v78 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    v82 = "File not present: %s\n";
    v388 = "mba.mbn";
    v83 = 1;
    goto LABEL_103;
  }
  if (!v73)
    goto LABEL_99;
LABEL_92:
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "mba.mbn");
  v75 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v76 = operator new(0x20uLL);
  *v76 = off_24CE80058;
  v76[1] = v75;
  v76[2] = 0;
  *((_DWORD *)v76 + 6) = 0;
  v77 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v77, v75, 0);
  v76[2] = v77;
  *v76 = off_24CE839D0;
  *((_QWORD *)this + 32) = v76;
  if (v32[502] == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_104;
    goto LABEL_96;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
  {
LABEL_96:
    if (gBBULogVerbosity < 0)
      goto LABEL_104;
    v78 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    v82 = "Loaded MBA\n";
    v83 = 0;
LABEL_103:
    _BBULog(3, v83, v78, "", v82, v79, v80, v81, (char)v388);
  }
LABEL_104:
  HIBYTE(__p.st_gid) = 11;
  strcpy((char *)&__p, "qdsp6sw.mbn");
  v84 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v85 = v84;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v85)
      goto LABEL_106;
LABEL_113:
    if (v32[502] == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_118;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_118;
    }
    if (gBBULogVerbosity < 1)
      goto LABEL_118;
    v89 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    v93 = "File not present: %s\n";
    v388 = "qdsp6sw.mbn";
    v94 = 1;
    goto LABEL_117;
  }
  if (!v84)
    goto LABEL_113;
LABEL_106:
  HIBYTE(__p.st_gid) = 11;
  strcpy((char *)&__p, "qdsp6sw.mbn");
  v86 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v87 = operator new(0x20uLL);
  *v87 = off_24CE80058;
  v87[1] = v86;
  v87[2] = 0;
  *((_DWORD *)v87 + 6) = 0;
  v88 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v88, v86, 0);
  v87[2] = v88;
  *v87 = off_24CE83A20;
  *((_QWORD *)this + 33) = v87;
  if (v32[502] == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_118;
    goto LABEL_110;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
  {
LABEL_110:
    if (gBBULogVerbosity < 0)
      goto LABEL_118;
    v89 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    v93 = "Loaded QDSP6SW\n";
    v94 = 0;
LABEL_117:
    _BBULog(3, v94, v89, "", v93, v90, v91, v92, (char)v388);
  }
LABEL_118:
  HIBYTE(__p.st_gid) = 6;
  strcpy((char *)&__p, "tz.mbn");
  v95 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v96 = v95;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v96)
      goto LABEL_120;
LABEL_127:
    if (v32[502] == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_132;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_132;
    }
    if (gBBULogVerbosity < 1)
      goto LABEL_132;
    v100 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    v104 = "File not present: %s\n";
    v388 = "tz.mbn";
    v105 = 1;
    goto LABEL_131;
  }
  if (!v95)
    goto LABEL_127;
LABEL_120:
  HIBYTE(__p.st_gid) = 6;
  strcpy((char *)&__p, "tz.mbn");
  v97 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v98 = operator new(0x20uLL);
  *v98 = off_24CE80058;
  v98[1] = v97;
  v98[2] = 0;
  *((_DWORD *)v98 + 6) = 0;
  v99 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v99, v97, 0);
  v98[2] = v99;
  *v98 = off_24CE83A70;
  *((_QWORD *)this + 34) = v98;
  if (v32[502] == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_132;
    goto LABEL_124;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
  {
LABEL_124:
    if (gBBULogVerbosity < 0)
      goto LABEL_132;
    v100 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    v104 = "Loaded TZ\n";
    v105 = 0;
LABEL_131:
    _BBULog(3, v105, v100, "", v104, v101, v102, v103, (char)v388);
  }
LABEL_132:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "dsp3.mbn");
  v106 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v107 = v106;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v107)
      goto LABEL_134;
LABEL_141:
    if (v32[502] == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_146;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_146;
    }
    if (gBBULogVerbosity < 1)
      goto LABEL_146;
    v110 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    v114 = "File not present: %s\n";
    v388 = "dsp3.mbn";
    v115 = 1;
    goto LABEL_145;
  }
  if (!v106)
    goto LABEL_141;
LABEL_134:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "dsp3.mbn");
  v108 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v109 = (BBUEURDSPImage *)operator new(0x58uLL);
  BBUEURDSPImage::BBUEURDSPImage(v109, v108, 3u, 0);
  *((_QWORD *)this + 31) = v109;
  if (v32[502] == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_146;
    goto LABEL_138;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
  {
LABEL_138:
    if (gBBULogVerbosity < 0)
      goto LABEL_146;
    v110 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    v114 = "Loaded DSP3\n";
    v115 = 0;
LABEL_145:
    _BBULog(3, v115, v110, "", v114, v111, v112, v113, (char)v388);
  }
LABEL_146:
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "wdt.mbn");
  v116 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v117 = v116;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v117)
      goto LABEL_148;
LABEL_155:
    if (v32[502] == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_160;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_160;
    }
    if (gBBULogVerbosity < 1)
      goto LABEL_160;
    v120 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    v124 = "File not present: %s\n";
    v388 = "wdt.mbn";
    v125 = 1;
    goto LABEL_159;
  }
  if (!v116)
    goto LABEL_155;
LABEL_148:
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "wdt.mbn");
  v118 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v119 = (BBUEURMIImage *)operator new(0x40uLL);
  BBUEURMIImage::BBUEURMIImage(v119, v118, 0);
  *(_QWORD *)v119 = off_24CE83AC0;
  *((_QWORD *)this + 35) = v119;
  if (v32[502] == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_160;
    goto LABEL_152;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
  {
LABEL_152:
    if (gBBULogVerbosity < 0)
      goto LABEL_160;
    v120 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    v124 = "Loaded WDT\n";
    v125 = 0;
LABEL_159:
    _BBULog(3, v125, v120, "", v124, v121, v122, v123, (char)v388);
  }
LABEL_160:
  memset(&v394, 170, sizeof(v394));
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v126 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v127 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v127);
    v128 = operator new(0x20uLL);
    *v128 = &unk_24CE85728;
    v128[1] = 0;
    v128[2] = 0;
    v128[3] = v127;
    v129 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v127;
    off_253D31E70 = v128;
    if (v129)
    {
      v130 = (unint64_t *)&v129->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    v126 = (BBUPartitionManager *)off_253D31E68;
  }
  v132 = (std::__shared_weak_count *)off_253D31E70;
  *(_QWORD *)&__p.st_dev = v126;
  __p.st_ino = (__darwin_ino64_t)off_253D31E70;
  if (off_253D31E70)
  {
    v133 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v134 = __ldxr(v133);
    while (__stxr(v134 + 1, v133));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v126, &v394);
  if (!v132)
    goto LABEL_579;
  v135 = (unint64_t *)&v132->__shared_owners_;
  do
    v136 = __ldaxr(v135);
  while (__stlxr(v136 - 1, v135));
  if (!v136)
  {
    ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
    std::__shared_weak_count::__release_weak(v132);
    if (*((_DWORD *)this + 50))
      goto LABEL_175;
  }
  else
  {
LABEL_579:
    if (*((_DWORD *)this + 50))
    {
LABEL_175:
      for (i = 0; i < *((unsigned int *)this + 50); ++i)
      {
        memset(&__p, 170, 24);
        v138 = SHIBYTE(v394.__r_.__value_.__r.__words[2]);
        if ((v394.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v394.__r_.__value_.__r.__words[2]);
        else
          size = v394.__r_.__value_.__l.__size_;
        v140 = size + 3;
        memset(&__dst, 170, sizeof(__dst));
        if (size + 3 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v140 >= 0x17)
        {
          v142 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v140 | 7) != 0x17)
            v142 = v140 | 7;
          v143 = v142 + 1;
          p_dst = (std::string *)operator new(v142 + 1);
          __dst.__r_.__value_.__l.__size_ = size + 3;
          __dst.__r_.__value_.__r.__words[2] = v143 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          p_dst = &__dst;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + 3;
          if (!size)
            goto LABEL_191;
        }
        if (v138 >= 0)
          v144 = &v394;
        else
          v144 = (std::string *)v394.__r_.__value_.__r.__words[0];
        memmove(p_dst, v144, size);
LABEL_191:
        *(_DWORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + size) = 7562853;
        std::to_string(&v391, i + 1);
        if ((v391.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v145 = &v391;
        else
          v145 = (std::string *)v391.__r_.__value_.__r.__words[0];
        if ((v391.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v146 = HIBYTE(v391.__r_.__value_.__r.__words[2]);
        else
          v146 = v391.__r_.__value_.__l.__size_;
        v147 = std::string::append(&__dst, (const std::string::value_type *)v145, v146);
        v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
        v393.__r_.__value_.__r.__words[2] = v147->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v393.__r_.__value_.__l.__data_ = v148;
        v147->__r_.__value_.__l.__size_ = 0;
        v147->__r_.__value_.__r.__words[2] = 0;
        v147->__r_.__value_.__r.__words[0] = 0;
        v149 = std::string::append(&v393, ".bin", 4uLL);
        v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p.st_uid = *((_QWORD *)&v149->__r_.__value_.__l + 2);
        *(_OWORD *)&__p.st_dev = v150;
        v149->__r_.__value_.__l.__size_ = 0;
        v149->__r_.__value_.__r.__words[2] = 0;
        v149->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v393.__r_.__value_.__l.__data_);
          if (SHIBYTE(v391.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_203:
            operator delete(v391.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_200;
            goto LABEL_204;
          }
        }
        else if (SHIBYTE(v391.__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_203;
        }
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_200;
LABEL_204:
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_200:
        v151 = (uint64_t)operator new(0x30uLL);
        *(_QWORD *)v151 = off_24CE7FC78;
        *(_OWORD *)(v151 + 8) = 0u;
        *(_OWORD *)(v151 + 24) = 0u;
        v152 = BBUFileDataSource::init(v151, (const char *)&__p, 0);
        v153 = *(_QWORD *)v151;
        if (v152)
        {
          (*(void (**)(uint64_t))(v153 + 8))(v151);
          v151 = 0;
          v154 = 1;
        }
        else
        {
          if ((*(unsigned int (**)(uint64_t))(v153 + 24))(v151) < 0x29)
          {
            v154 = 0;
          }
          else
          {
            v155 = (BBUEUREFSImage *)operator new(0x58uLL);
            BBUEUREFSImage::BBUEUREFSImage(v155, (BBUDataSource *)v151, i + 1, 0);
            v156 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v151 + 24))(v151);
            v157 = (*(uint64_t (**)(BBUEUREFSImage *, uint64_t))(*(_QWORD *)v155 + 72))(v155, v156);
            (*(void (**)(BBUEUREFSImage *))(*(_QWORD *)v155 + 8))(v155);
            if (v157)
            {
              v151 = (uint64_t)operator new(0x30uLL);
              *(_QWORD *)v151 = off_24CE7FC78;
              *(_OWORD *)(v151 + 8) = 0u;
              *(_OWORD *)(v151 + 24) = 0u;
              if (BBUFileDataSource::init(v151, (const char *)&__p, 0))
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
                v151 = 0;
              }
              v154 = 1;
            }
            else
            {
              v154 = 0;
              v151 = 0;
            }
          }
          BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "EFS file verify status: %d", v154);
        }
        if (i | v151 && v154)
        {
          if (!v151)
            goto LABEL_234;
        }
        else
        {
          memset(&v393, 170, sizeof(v393));
          if (v151)
          {
            v158 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v151 + 24))(v151);
            std::to_string(&v393, v158);
            v159 = HIBYTE(v393.__r_.__value_.__r.__words[2]);
          }
          else
          {
            v159 = 4;
            *((_BYTE *)&v393.__r_.__value_.__s + 23) = 4;
            strcpy((char *)&v393, "NULL");
          }
          v160 = (const char *)&__p;
          if ((__p.st_gid & 0x80000000) != 0)
            v160 = *(const char **)&__p.st_dev;
          v161 = v159 < 0;
          v162 = &v393;
          if (v161)
            v162 = (std::string *)v393.__r_.__value_.__r.__words[0];
          BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Failed to load %s (size %s), creating empty file (size %u)", v160, (const char *)v162, *((_DWORD *)this + 51));
          if (v151)
            (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
          if (BBUScratchFile::createWithFile((uint64_t)&__p, *((unsigned int *)this + 51)))
          {
            v366 = __cxa_allocate_exception(0x210uLL);
            v364 = v366;
            v370 = &__p;
            if ((__p.st_gid & 0x80000000) != 0)
              LOBYTE(v370) = __p.st_dev;
            _BBUException::_BBUException((uint64_t)v366, 104, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x137u, (ctu::LogMessageBuffer *)"Failed to create scratch %s (%d)", v367, v368, v369, (char)v370);
LABEL_568:
          }
          v151 = (uint64_t)operator new(0x30uLL);
          *(_QWORD *)v151 = off_24CE7FC78;
          *(_OWORD *)(v151 + 8) = 0u;
          *(_OWORD *)(v151 + 24) = 0u;
          if (BBUFileDataSource::init(v151, (const char *)&__p, 0))
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
            v360 = __cxa_allocate_exception(0x210uLL);
            v364 = v360;
            v365 = &__p;
            if ((__p.st_gid & 0x80000000) != 0)
              LOBYTE(v365) = __p.st_dev;
            _BBUException::_BBUException((uint64_t)v360, 104, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x13Au, (ctu::LogMessageBuffer *)"Failed to create data source from fresh scratch file %s (%d)", v361, v362, v363, (char)v365);
            goto LABEL_568;
          }
          if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v393.__r_.__value_.__l.__data_);
        }
        v163 = (BBUEUREFSImage *)operator new(0x58uLL);
        BBUEUREFSImage::BBUEUREFSImage(v163, (BBUDataSource *)v151, i + 1, 0);
        *(_QWORD *)(*((_QWORD *)this + 36) + 8 * i) = v163;
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
            goto LABEL_232;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
          {
LABEL_232:
            if ((gBBULogVerbosity & 0x80000000) == 0)
            {
              v164 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
              _BBULog(3, 0, v164, "", "Loaded EFS%u\n", v165, v166, v167, i + 1);
            }
          }
        }
LABEL_234:
        if (SHIBYTE(__p.st_gid) < 0)
          operator delete(*(void **)&__p.st_dev);
      }
    }
  }
  memset(&v393, 170, sizeof(v393));
  v168 = SHIBYTE(v394.__r_.__value_.__r.__words[2]);
  if ((v394.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v169 = HIBYTE(v394.__r_.__value_.__r.__words[2]);
  else
    v169 = v394.__r_.__value_.__l.__size_;
  v170 = v169 + 1;
  memset(&__p, 170, 24);
  if (v169 + 1 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v170 >= 0x17)
  {
    v172 = (v170 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v170 | 7) != 0x17)
      v172 = v170 | 7;
    v173 = v172 + 1;
    v171 = (stat *)operator new(v172 + 1);
    __p.st_ino = v169 + 1;
    *(_QWORD *)&__p.st_uid = v173 | 0x8000000000000000;
    *(_QWORD *)&__p.st_dev = v171;
  }
  else
  {
    memset(&__p, 0, 24);
    v171 = &__p;
    HIBYTE(__p.st_gid) = v169 + 1;
    if (!v169)
      goto LABEL_253;
  }
  if (v168 >= 0)
    v174 = &v394;
  else
    v174 = (std::string *)v394.__r_.__value_.__r.__words[0];
  memmove(v171, v174, v169);
LABEL_253:
  *(_WORD *)((char *)&v171->st_dev + v169) = 47;
  v175 = std::string::append((std::string *)&__p, "act.der", 7uLL);
  v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
  v393.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v393.__r_.__value_.__l.__data_ = v176;
  v175->__r_.__value_.__l.__size_ = 0;
  v175->__r_.__value_.__r.__words[2] = 0;
  v175->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v177.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v177.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__p.st_blksize = v177;
  *(timespec *)__p.st_qspare = v177;
  __p.st_birthtimespec = v177;
  *(timespec *)&__p.st_size = v177;
  __p.st_mtimespec = v177;
  __p.st_ctimespec = v177;
  *(timespec *)&__p.st_uid = v177;
  __p.st_atimespec = v177;
  *(timespec *)&__p.st_dev = v177;
  if ((v393.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v178 = &v393;
  else
    v178 = (std::string *)v393.__r_.__value_.__r.__words[0];
  if (stat((const char *)v178, &__p))
  {
    __dst.__r_.__value_.__r.__words[0] = 0;
    HIBYTE(__p.st_gid) = 3;
    __p.st_dev = 5522241;
    cf = 0;
    v179 = (*(uint64_t (**)(BBUEUR10UpdateSource *, char *, stat *, CFTypeRef *))(*(_QWORD *)this + 240))(this, (char *)this + 312, &__p, &cf);
    if (cf)
      CFRelease(cf);
    if (SHIBYTE(__p.st_gid) < 0)
    {
      operator delete(*(void **)&__p.st_dev);
      if (!v179)
        goto LABEL_277;
    }
    else if (!v179)
    {
      goto LABEL_277;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_277;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_277;
    }
    if (gBBULogVerbosity >= 1)
    {
      v182 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(1, 1, v182, "", "failed creating MI image from from data for %s\n", v183, v184, v185, (char)"act.der");
    }
  }
  else
  {
    HIBYTE(__p.st_gid) = 3;
    __p.st_dev = 5522241;
    v180 = (*(uint64_t (**)(BBUEUR10UpdateSource *, char *, std::string *, stat *))(*(_QWORD *)this + 224))(this, (char *)this + 312, &v393, &__p);
    v181 = v180;
    if (SHIBYTE(__p.st_gid) < 0)
    {
      operator delete(*(void **)&__p.st_dev);
      if (!v181)
        goto LABEL_277;
    }
    else if (!v180)
    {
      goto LABEL_277;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_277;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        goto LABEL_277;
    }
    if (gBBULogVerbosity >= 1)
    {
      v186 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(1, 1, v186, "", "failed creating MI image from from file for %s\n", v187, v188, v189, (char)"act.der");
    }
  }
LABEL_277:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "acdb.mbn");
  v190 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v191 = v190;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v191)
      goto LABEL_279;
LABEL_286:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_290;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_290;
    }
    if (gBBULogVerbosity >= 1)
    {
      v198 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v198, "", "File not present: %s\n", v199, v200, v201, (char)"acdb.mbn");
    }
    goto LABEL_290;
  }
  if (!v190)
    goto LABEL_286;
LABEL_279:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "acdb.mbn");
  v192 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v193 = (BBUEURMIImage *)operator new(0x40uLL);
  BBUEURMIImage::BBUEURMIImage(v193, v192, 0);
  *(_QWORD *)v193 = off_24CE83B20;
  *((_QWORD *)this + 40) = v193;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_290;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_290;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v194 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v194, "", "Loaded ACDB\n", v195, v196, v197, (char)v388);
  }
LABEL_290:
  HIBYTE(__p.st_gid) = 9;
  strcpy((char *)&__p, "bbcfg.mbn");
  v202 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v203 = v202;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v203)
      goto LABEL_292;
LABEL_299:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_303;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_303;
    }
    if (gBBULogVerbosity >= 1)
    {
      v210 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v210, "", "File not present: %s\n", v211, v212, v213, (char)"bbcfg.mbn");
    }
    goto LABEL_303;
  }
  if (!v202)
    goto LABEL_299;
LABEL_292:
  HIBYTE(__p.st_gid) = 9;
  strcpy((char *)&__p, "bbcfg.mbn");
  v204 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v205 = (BBUEURMIImage *)operator new(0x40uLL);
  BBUEURMIImage::BBUEURMIImage(v205, v204, 0);
  *(_QWORD *)v205 = off_24CE83B80;
  *((_QWORD *)this + 41) = v205;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_303;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_303;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v206 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v206, "", "Loaded BBCFG\n", v207, v208, v209, (char)v388);
  }
LABEL_303:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "apdp.mbn");
  v214 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v215 = v214;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v215)
      goto LABEL_305;
LABEL_312:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_316;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_316;
    }
    if (gBBULogVerbosity >= 1)
    {
      v223 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v223, "", "File not present: %s\n", v224, v225, v226, (char)"apdp.mbn");
    }
    goto LABEL_316;
  }
  if (!v214)
    goto LABEL_312;
LABEL_305:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "apdp.mbn");
  v216 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v217 = operator new(0x20uLL);
  *v217 = off_24CE80058;
  v217[1] = v216;
  v217[2] = 0;
  *((_DWORD *)v217 + 6) = 0;
  v218 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v218, v216, 0);
  v217[2] = v218;
  *v217 = off_24CE83BE0;
  *((_QWORD *)this + 42) = v217;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_316;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_316;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v219 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v219, "", "Loaded APDP\n", v220, v221, v222, (char)v388);
  }
LABEL_316:
  HIBYTE(__p.st_gid) = 10;
  strcpy((char *)&__p, "devcfg.mbn");
  v227 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v228 = v227;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v228)
      goto LABEL_318;
LABEL_325:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_329;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_329;
    }
    if (gBBULogVerbosity >= 1)
    {
      v236 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v236, "", "File not present: %s\n", v237, v238, v239, (char)"devcfg.mbn");
    }
    goto LABEL_329;
  }
  if (!v227)
    goto LABEL_325;
LABEL_318:
  HIBYTE(__p.st_gid) = 10;
  strcpy((char *)&__p, "devcfg.mbn");
  v229 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v230 = operator new(0x20uLL);
  *v230 = off_24CE80058;
  v230[1] = v229;
  v230[2] = 0;
  *((_DWORD *)v230 + 6) = 0;
  v231 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v231, v229, 0);
  v230[2] = v231;
  *v230 = off_24CE83C30;
  *((_QWORD *)this + 43) = v230;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_329;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_329;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v232 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v232, "", "Loaded DEVCFG\n", v233, v234, v235, (char)v388);
  }
LABEL_329:
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "hyp.mbn");
  v240 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v241 = v240;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v241)
      goto LABEL_331;
LABEL_338:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_342;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_342;
    }
    if (gBBULogVerbosity >= 1)
    {
      v249 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v249, "", "File not present: %s\n", v250, v251, v252, (char)"hyp.mbn");
    }
    goto LABEL_342;
  }
  if (!v240)
    goto LABEL_338;
LABEL_331:
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "hyp.mbn");
  v242 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v243 = operator new(0x20uLL);
  *v243 = off_24CE80058;
  v243[1] = v242;
  v243[2] = 0;
  *((_DWORD *)v243 + 6) = 0;
  v244 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v244, v242, 0);
  v243[2] = v244;
  *v243 = off_24CE83C80;
  *((_QWORD *)this + 44) = v243;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_342;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_342;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v245 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v245, "", "Loaded HYP\n", v246, v247, v248, (char)v388);
  }
LABEL_342:
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "aop.mbn");
  v253 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v254 = v253;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v254)
      goto LABEL_344;
LABEL_351:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_355;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_355;
    }
    if (gBBULogVerbosity >= 1)
    {
      v262 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v262, "", "File not present: %s\n", v263, v264, v265, (char)"aop.mbn");
    }
    goto LABEL_355;
  }
  if (!v253)
    goto LABEL_351;
LABEL_344:
  HIBYTE(__p.st_gid) = 7;
  strcpy((char *)&__p, "aop.mbn");
  v255 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v256 = operator new(0x20uLL);
  *v256 = off_24CE80058;
  v256[1] = v255;
  v256[2] = 0;
  *((_DWORD *)v256 + 6) = 0;
  v257 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v257, v255, 0);
  v256[2] = v257;
  *v256 = off_24CE83CD0;
  *((_QWORD *)this + 45) = v256;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_355;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_355;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v258 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v258, "", "Loaded AOP\n", v259, v260, v261, (char)v388);
  }
LABEL_355:
  memset(&__dst, 170, sizeof(__dst));
  v266 = SHIBYTE(v394.__r_.__value_.__r.__words[2]);
  if ((v394.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v267 = HIBYTE(v394.__r_.__value_.__r.__words[2]);
  else
    v267 = v394.__r_.__value_.__l.__size_;
  v268 = v267 + 1;
  memset(&__p, 170, 24);
  if (v267 + 1 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v268 >= 0x17)
  {
    v270 = (v268 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v268 | 7) != 0x17)
      v270 = v268 | 7;
    v271 = v270 + 1;
    v269 = (stat *)operator new(v270 + 1);
    __p.st_ino = v267 + 1;
    *(_QWORD *)&__p.st_uid = v271 | 0x8000000000000000;
    *(_QWORD *)&__p.st_dev = v269;
  }
  else
  {
    memset(&__p, 0, 24);
    v269 = &__p;
    HIBYTE(__p.st_gid) = v267 + 1;
    if (!v267)
      goto LABEL_369;
  }
  if (v266 >= 0)
    v272 = &v394;
  else
    v272 = (std::string *)v394.__r_.__value_.__r.__words[0];
  memmove(v269, v272, v267);
LABEL_369:
  *(_WORD *)((char *)&v269->st_dev + v267) = 47;
  v273 = std::string::append((std::string *)&__p, "mdmddr.mbn", 0xAuLL);
  v274 = *(_OWORD *)&v273->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v273->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v274;
  v273->__r_.__value_.__l.__size_ = 0;
  v273->__r_.__value_.__r.__words[2] = 0;
  v273->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v275.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v275.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__p.st_blksize = v275;
  *(timespec *)__p.st_qspare = v275;
  __p.st_birthtimespec = v275;
  *(timespec *)&__p.st_size = v275;
  __p.st_mtimespec = v275;
  __p.st_ctimespec = v275;
  *(timespec *)&__p.st_uid = v275;
  __p.st_atimespec = v275;
  *(timespec *)&__p.st_dev = v275;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v276 = &__dst;
  else
    v276 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v277 = (capabilities::updater *)stat((const char *)v276, &__p);
  if ((_DWORD)v277)
  {
    if (!capabilities::updater::supportsDDRDataSaving(v277))
      goto LABEL_389;
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
    v391.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
    memset(&__p.st_ino, 0, 32);
    *(_QWORD *)&__p.st_dev = 0x300000022;
    HIDWORD(__p.st_ino) = 344623104;
    CFDataAppendBytes(Mutable, (const UInt8 *)&__p, 40);
    v279 = operator new(0x18uLL);
    v279[4] = 0;
    *(_QWORD *)v279 = off_24CE84890;
    *((_QWORD *)v279 + 1) = Mutable;
    if (Mutable)
      CFRetain(Mutable);
    v280 = (BBUEURMIImage *)operator new(0x40uLL);
    BBUEURMIImage::BBUEURMIImage(v280, (BBUDataSource *)v279, 0);
    *(_QWORD *)v280 = off_24CE83D20;
    *((_QWORD *)this + 46) = v280;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
        goto LABEL_380;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
      {
LABEL_380:
        if ((gBBULogVerbosity & 0x80000000) == 0)
        {
          v281 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
          _BBULog(3, 0, v281, "", "created dummy MDMDDR\n", v282, v283, v284, (char)v388);
        }
      }
    }
    if (Mutable)
      CFRelease(Mutable);
    goto LABEL_389;
  }
  v285 = (BBUDataSource *)operator new(0x30uLL);
  *(_QWORD *)v285 = off_24CE7FC78;
  *(_OWORD *)((char *)v285 + 8) = 0u;
  *(_OWORD *)((char *)v285 + 24) = 0u;
  if (BBUFileDataSource::init((uint64_t)v285, (const char *)&__dst, 0))
  {
    (*(void (**)(BBUDataSource *))(*(_QWORD *)v285 + 8))(v285);
    v384 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v384, 120, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x1A6u, (ctu::LogMessageBuffer *)"Assertion failure(dataSource && \"Failed creating data source from file for MDMDDR\")", v385, v386, v387, (char)v388);
  }
  v286 = (BBUEURMIImage *)operator new(0x40uLL);
  BBUEURMIImage::BBUEURMIImage(v286, v285, 0);
  *(_QWORD *)v286 = off_24CE83D20;
  *((_QWORD *)this + 46) = v286;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_389;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_389;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v287 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v287, "", "Loaded MDMDDR\n", v288, v289, v290, (char)v388);
  }
LABEL_389:
  HIBYTE(__p.st_gid) = 15;
  strcpy((char *)&__p, "multi_image.mbn");
  v291 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v292 = v291;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v292)
      goto LABEL_391;
LABEL_398:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_402;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_402;
    }
    if (gBBULogVerbosity >= 1)
    {
      v300 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v300, "", "File not present: %s\n", v301, v302, v303, (char)"multi_image.mbn");
    }
    goto LABEL_402;
  }
  if (!v291)
    goto LABEL_398;
LABEL_391:
  HIBYTE(__p.st_gid) = 15;
  strcpy((char *)&__p, "multi_image.mbn");
  v293 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v294 = operator new(0x20uLL);
  *v294 = off_24CE80058;
  v294[1] = v293;
  v294[2] = 0;
  *((_DWORD *)v294 + 6) = 0;
  v295 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v295, v293, 0);
  v294[2] = v295;
  *v294 = off_24CE83D80;
  *((_QWORD *)this + 47) = v294;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_402;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_402;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v296 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v296, "", "Loaded OEMMisc\n", v297, v298, v299, (char)v388);
  }
LABEL_402:
  HIBYTE(__p.st_gid) = 19;
  strcpy((char *)&__p, "multi_image_qti.mbn");
  v304 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v305 = v304;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v305)
      goto LABEL_404;
LABEL_411:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_415;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_415;
    }
    if (gBBULogVerbosity >= 1)
    {
      v313 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v313, "", "File not present: %s\n", v314, v315, v316, (char)"multi_image_qti.mbn");
    }
    goto LABEL_415;
  }
  if (!v304)
    goto LABEL_411;
LABEL_404:
  HIBYTE(__p.st_gid) = 19;
  strcpy((char *)&__p, "multi_image_qti.mbn");
  v306 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v307 = operator new(0x20uLL);
  *v307 = off_24CE80058;
  v307[1] = v306;
  v307[2] = 0;
  *((_DWORD *)v307 + 6) = 0;
  v308 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v308, v306, 0);
  v307[2] = v308;
  *v307 = off_24CE83DD0;
  *((_QWORD *)this + 48) = v307;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_415;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_415;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v309 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v309, "", "Loaded QTIMisc\n", v310, v311, v312, (char)v388);
  }
LABEL_415:
  HIBYTE(__p.st_gid) = 11;
  strcpy((char *)&__p, "xbl_cfg.elf");
  v317 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v318 = v317;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v318)
      goto LABEL_417;
LABEL_424:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_428;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_428;
    }
    if (gBBULogVerbosity >= 1)
    {
      v326 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v326, "", "File not present: %s\n", v327, v328, v329, (char)"xbl_cfg.elf");
    }
    goto LABEL_428;
  }
  if (!v317)
    goto LABEL_424;
LABEL_417:
  HIBYTE(__p.st_gid) = 11;
  strcpy((char *)&__p, "xbl_cfg.elf");
  v319 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v320 = operator new(0x20uLL);
  *v320 = off_24CE80058;
  v320[1] = v319;
  v320[2] = 0;
  *((_DWORD *)v320 + 6) = 0;
  v321 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v321, v319, 0);
  v320[2] = v321;
  *v320 = off_24CE83E20;
  *((_QWORD *)this + 49) = v320;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_428;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_428;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v322 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v322, "", "Loaded XBL Config\n", v323, v324, v325, (char)v388);
  }
LABEL_428:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "uefi.elf");
  v330 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v331 = v330;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v331)
      goto LABEL_430;
LABEL_437:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_441;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_441;
    }
    if (gBBULogVerbosity >= 1)
    {
      v339 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v339, "", "File not present: %s\n", v340, v341, v342, (char)"uefi.elf");
    }
    goto LABEL_441;
  }
  if (!v330)
    goto LABEL_437;
LABEL_430:
  HIBYTE(__p.st_gid) = 8;
  strcpy((char *)&__p, "uefi.elf");
  v332 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v333 = operator new(0x20uLL);
  *v333 = off_24CE80058;
  v333[1] = v332;
  v333[2] = 0;
  *((_DWORD *)v333 + 6) = 0;
  v334 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v334, v332, 0);
  v333[2] = v334;
  *v333 = off_24CE83E70;
  *((_QWORD *)this + 50) = v333;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_441;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_441;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v335 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v335, "", "Loaded UEFI\n", v336, v337, v338, (char)v388);
  }
LABEL_441:
  HIBYTE(__p.st_gid) = 15;
  strcpy((char *)&__p, "xbl_support.elf");
  v343 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v344 = v343;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v344)
      goto LABEL_443;
LABEL_450:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_454;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_454;
    }
    if (gBBULogVerbosity >= 1)
    {
      v352 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 1, v352, "", "File not present: %s\n", v353, v354, v355, (char)"xbl_support.elf");
    }
    goto LABEL_454;
  }
  if (!v343)
    goto LABEL_450;
LABEL_443:
  HIBYTE(__p.st_gid) = 15;
  strcpy((char *)&__p, "xbl_support.elf");
  v345 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v346 = operator new(0x20uLL);
  *v346 = off_24CE80058;
  v346[1] = v345;
  v346[2] = 0;
  *((_DWORD *)v346 + 6) = 0;
  v347 = (BBUELF32Header *)operator new(0x48uLL);
  BBUELF32Header::BBUELF32Header(v347, v345, 0);
  v346[2] = v347;
  *v346 = off_24CE83EC0;
  *((_QWORD *)this + 51) = v346;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_454;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_454;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v348 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v348, "", "Loaded XBL Support\n", v349, v350, v351, (char)v388);
  }
LABEL_454:
  HIBYTE(__p.st_gid) = 13;
  strcpy((char *)&__p, "Options.plist");
  v356 = BBUEURUpdateSource::containsFile((uint64_t)this, (uint64_t)&__p);
  v357 = v356;
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (!v357)
      goto LABEL_466;
  }
  else if (!v356)
  {
    goto LABEL_466;
  }
  HIBYTE(__p.st_gid) = 13;
  strcpy((char *)&__p, "Options.plist");
  v358 = (BBUDataSource *)BBUEURUpdateSource::createDataSource((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  *(_QWORD *)&__p.st_dev = 0xAAAAAAAAAAAAAAAALL;
  BBUDataSource::createData(v358, (CFDataRef *)&__p);
  if (v358)
    (*(void (**)(BBUDataSource *))(*(_QWORD *)v358 + 8))(v358);
  v359 = *(const void **)&__p.st_dev;
  v389 = *(CFDataRef *)&__p.st_dev;
  if (*(_QWORD *)&__p.st_dev)
    CFRetain(*(CFTypeRef *)&__p.st_dev);
  BBUUpdateSource::loadOptions((uint64_t)this, &v389);
  if (v359)
  {
    CFRelease(v359);
    CFRelease(v359);
  }
LABEL_466:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v393.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_468:
      if ((SHIBYTE(v394.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_472:
      operator delete(v394.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v393.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_468;
  }
  operator delete(v393.__r_.__value_.__l.__data_);
  if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_472;
}

void sub_212B0A5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  void *v51;

  __cxa_free_exception(v51);
  if (a32 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  if (a45 < 0)
    operator delete(a40);
  _Unwind_Resume(a1);
}

CFMutableDictionaryRef BBUEUR10UpdateSource::copyBasebandMigrationData(BBUEUR10UpdateSource *this, BBUFeedback *a2)
{
  BBUPartitionManager *v3;
  BBUPartitionManager *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  bbufs *p_p;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFMutableDictionaryRef Mutable;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  BBUPartitionManager **v32;
  BBUPartitionManager *v33;
  std::ios_base *v34;
  std::string *v35;
  std::string::size_type size;
  _QWORD *v37;
  _QWORD *v38;
  size_t v39;
  void **v40;
  uint64_t v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  timespec v46;
  const char *v47;
  int v48;
  int v49;
  __darwin_ino64_t v50;
  void *v51;
  __darwin_ino64_t v52;
  _BYTE *v53;
  uint64_t v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  stat *v58;
  uint64_t v59;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  BBUDataSource *v63;
  size_t v64;
  void *v65;
  __darwin_ino64_t v66;
  void *v67;
  uint64_t v68;
  const void **v69;
  uint64_t v70;
  const void **v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  const void *v75;
  const void *v76;
  uint64_t v77;
  uint64_t v78;
  stat *v79;
  char v80;
  void *v81[2];
  unint64_t v82;
  void *__dst[2];
  int64_t v84;
  BBUPartitionManager *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  void *v90[2];
  __int128 v91;
  unint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  std::string __p;
  stat v104;

  memset(&__p, 170, sizeof(__p));
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v3 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v4 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v4);
    v5 = operator new(0x20uLL);
    *v5 = &unk_24CE85728;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v4;
    v6 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v4;
    off_253D31E70 = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v3 = (BBUPartitionManager *)off_253D31E68;
  }
  v9 = (std::__shared_weak_count *)off_253D31E70;
  v85 = v3;
  *(_QWORD *)&v86 = off_253D31E70;
  if (off_253D31E70)
  {
    v10 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v3, &__p);
  if (v9)
  {
    v19 = (unint64_t *)&v9->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = (bbufs *)&__p;
      else
        p_p = (bbufs *)__p.__r_.__value_.__r.__words[0];
      if (p_p)
        goto LABEL_19;
LABEL_34:
      _BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v13, v14, v15, v16, v17, v18, 0);
      goto LABEL_35;
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = (bbufs *)&__p;
  else
    p_p = (bbufs *)__p.__r_.__value_.__r.__words[0];
  if (!p_p)
    goto LABEL_34;
LABEL_19:
  if ((bbufs::prepareDestination(p_p, v12) & 1) != 0)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v92 = 0xAAAAAAAAAAAAAAAALL;
    v102 = v29;
    v101 = v29;
    v100 = v29;
    v99 = v29;
    v98 = v29;
    v97 = v29;
    v96 = v29;
    v95 = v29;
    v94 = v29;
    v91 = v29;
    *(_OWORD *)v90 = v29;
    v89 = v29;
    v88 = v29;
    v87 = v29;
    v86 = v29;
    v30 = MEMORY[0x24BEDB870];
    v31 = MEMORY[0x24BEDB870] + 64;
    v93 = MEMORY[0x24BEDB870] + 64;
    v32 = (BBUPartitionManager **)MEMORY[0x24BEDB800];
    v33 = *(BBUPartitionManager **)(MEMORY[0x24BEDB800] + 16);
    v85 = *(BBUPartitionManager **)(MEMORY[0x24BEDB800] + 8);
    *(BBUPartitionManager **)((char *)&v85 + *((_QWORD *)v85 - 3)) = v33;
    v34 = (std::ios_base *)((char *)&v85 + *((_QWORD *)v85 - 3));
    std::ios_base::init(v34, &v86);
    v34[1].__vftable = 0;
    v34[1].__fmtflags_ = -1;
    v85 = (BBUPartitionManager *)(v30 + 24);
    v93 = v31;
    std::streambuf::basic_streambuf();
    *(_QWORD *)&v86 = MEMORY[0x24BEDB848] + 16;
    *(_OWORD *)v90 = 0u;
    v91 = 0u;
    LODWORD(v92) = 16;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &__p;
    else
      v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)v35, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"efs", 3);
    v38 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)".bin", 4);
    if ((v92 & 0x10) != 0)
    {
      v42 = *((_QWORD *)&v91 + 1);
      if (*((_QWORD *)&v91 + 1) < (unint64_t)v89)
      {
        *((_QWORD *)&v91 + 1) = v89;
        v42 = v89;
      }
      v43 = (const void *)*((_QWORD *)&v88 + 1);
      v39 = v42 - *((_QWORD *)&v88 + 1);
      if ((unint64_t)(v42 - *((_QWORD *)&v88 + 1)) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_67;
    }
    else
    {
      if ((v92 & 8) == 0)
      {
        v39 = 0;
        HIBYTE(v84) = 0;
        v40 = __dst;
        goto LABEL_48;
      }
      v43 = (const void *)v87;
      v39 = v88 - v87;
      if ((_QWORD)v88 - (_QWORD)v87 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_67:
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v39 >= 0x17)
    {
      v44 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v39 | 7) != 0x17)
        v44 = v39 | 7;
      v45 = v44 + 1;
      v40 = (void **)operator new(v44 + 1);
      __dst[1] = (void *)v39;
      v84 = v45 | 0x8000000000000000;
      __dst[0] = v40;
    }
    else
    {
      HIBYTE(v84) = v39;
      v40 = __dst;
      if (!v39)
      {
LABEL_48:
        *((_BYTE *)v40 + v39) = 0;
        v46.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v46.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        *(timespec *)&v104.st_blksize = v46;
        *(timespec *)v104.st_qspare = v46;
        v104.st_birthtimespec = v46;
        *(timespec *)&v104.st_size = v46;
        v104.st_mtimespec = v46;
        v104.st_ctimespec = v46;
        *(timespec *)&v104.st_uid = v46;
        v104.st_atimespec = v46;
        *(timespec *)&v104.st_dev = v46;
        if (v84 >= 0)
          v47 = (const char *)__dst;
        else
          v47 = (const char *)__dst[0];
        v48 = stat(v47, &v104);
        v49 = v48;
        if (SHIBYTE(v84) < 0)
        {
          operator delete(__dst[0]);
          if (v49)
          {
LABEL_53:
            if ((v92 & 0x10) != 0)
            {
              v54 = *((_QWORD *)&v91 + 1);
              if (*((_QWORD *)&v91 + 1) < (unint64_t)v89)
              {
                *((_QWORD *)&v91 + 1) = v89;
                v54 = v89;
              }
              v55 = (const void *)*((_QWORD *)&v88 + 1);
              v50 = v54 - *((_QWORD *)&v88 + 1);
              if ((unint64_t)(v54 - *((_QWORD *)&v88 + 1)) > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_84;
            }
            else
            {
              if ((v92 & 8) == 0)
              {
                v50 = 0;
                HIBYTE(v104.st_gid) = 0;
                v51 = &v104;
                goto LABEL_72;
              }
              v55 = (const void *)v87;
              v50 = v88 - v87;
              if ((_QWORD)v88 - (_QWORD)v87 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_84:
                std::string::__throw_length_error[abi:ne180100]();
            }
            if (v50 >= 0x17)
            {
              v56 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v50 | 7) != 0x17)
                v56 = v50 | 7;
              v57 = v56 + 1;
              v51 = operator new(v56 + 1);
              v104.st_ino = v50;
              *(_QWORD *)&v104.st_uid = v57 | 0x8000000000000000;
              *(_QWORD *)&v104.st_dev = v51;
            }
            else
            {
              HIBYTE(v104.st_gid) = v50;
              v51 = &v104;
              if (!v50)
                goto LABEL_72;
            }
            memmove(v51, v55, v50);
LABEL_72:
            *((_BYTE *)v51 + v50) = 0;
            v58 = &v104;
            if ((v104.st_gid & 0x80000000) != 0)
              v58 = *(stat **)&v104.st_dev;
            BBUFeedback::handleComment(this, "Failed to locate %s while copying baseband migration data\n", (const char *)v58);
LABEL_75:
            if (SHIBYTE(v104.st_gid) < 0)
              operator delete(*(void **)&v104.st_dev);
            goto LABEL_122;
          }
        }
        else if (v48)
        {
          goto LABEL_53;
        }
        if ((v92 & 0x10) != 0)
        {
          v59 = *((_QWORD *)&v91 + 1);
          if (*((_QWORD *)&v91 + 1) < (unint64_t)v89)
          {
            *((_QWORD *)&v91 + 1) = v89;
            v59 = v89;
          }
          v60 = (const void *)*((_QWORD *)&v88 + 1);
          v52 = v59 - *((_QWORD *)&v88 + 1);
          if ((unint64_t)(v59 - *((_QWORD *)&v88 + 1)) > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_104;
        }
        else
        {
          if ((v92 & 8) == 0)
          {
            v52 = 0;
            HIBYTE(v104.st_gid) = 0;
            v53 = &v104;
            goto LABEL_89;
          }
          v60 = (const void *)v87;
          v52 = v88 - v87;
          if ((_QWORD)v88 - (_QWORD)v87 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_104:
            std::string::__throw_length_error[abi:ne180100]();
        }
        if (v52 >= 0x17)
        {
          v61 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v52 | 7) != 0x17)
            v61 = v52 | 7;
          v62 = v61 + 1;
          v53 = operator new(v61 + 1);
          v104.st_ino = v52;
          *(_QWORD *)&v104.st_uid = v62 | 0x8000000000000000;
          *(_QWORD *)&v104.st_dev = v53;
        }
        else
        {
          HIBYTE(v104.st_gid) = v52;
          v53 = &v104;
          if (!v52)
          {
LABEL_89:
            v53[v52] = 0;
            v63 = (BBUDataSource *)operator new(0x30uLL);
            *(_QWORD *)v63 = off_24CE7FC78;
            *(_OWORD *)((char *)v63 + 8) = 0u;
            *(_OWORD *)((char *)v63 + 24) = 0u;
            if (BBUFileDataSource::init((uint64_t)v63, (const char *)&v104, 0))
            {
              (*(void (**)(BBUDataSource *))(*(_QWORD *)v63 + 8))(v63);
              v63 = 0;
            }
            if (SHIBYTE(v104.st_gid) < 0)
              operator delete(*(void **)&v104.st_dev);
            if (v63)
            {
              if ((v92 & 0x10) != 0)
              {
                v68 = *((_QWORD *)&v91 + 1);
                if (*((_QWORD *)&v91 + 1) < (unint64_t)v89)
                {
                  *((_QWORD *)&v91 + 1) = v89;
                  v68 = v89;
                }
                v69 = (const void **)&v88 + 1;
              }
              else
              {
                if ((v92 & 8) == 0)
                {
                  v64 = 0;
                  HIBYTE(v82) = 0;
                  v65 = v81;
                  goto LABEL_117;
                }
                v69 = (const void **)&v87;
                v68 = v88;
              }
              v72 = *v69;
              v64 = v68 - (_QWORD)*v69;
              if (v64 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v64 >= 0x17)
              {
                v73 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v64 | 7) != 0x17)
                  v73 = v64 | 7;
                v74 = v73 + 1;
                v65 = operator new(v73 + 1);
                v81[1] = (void *)v64;
                v82 = v74 | 0x8000000000000000;
                v81[0] = v65;
              }
              else
              {
                HIBYTE(v82) = v68 - *(_BYTE *)v69;
                v65 = v81;
                if (!v64)
                  goto LABEL_117;
              }
              memmove(v65, v72, v64);
LABEL_117:
              *((_BYTE *)v65 + v64) = 0;
              BBUDataSource::createData(v63, (CFDataRef *)&v104);
              v75 = *(const void **)&v104.st_dev;
              ctu::cf::insert<std::string,__CFData const*>((uint64_t)Mutable, (uint64_t)v81, *(const void **)&v104.st_dev);
              if (v75)
                CFRelease(v75);
              if (SHIBYTE(v82) < 0)
                operator delete(v81[0]);
              (*(void (**)(BBUDataSource *))(*(_QWORD *)v63 + 8))(v63);
LABEL_122:
              v85 = *v32;
              *(BBUPartitionManager **)((char *)&v85 + *((_QWORD *)v85 - 3)) = v32[3];
              *(_QWORD *)&v86 = MEMORY[0x24BEDB848] + 16;
              if (SBYTE7(v91) < 0)
                operator delete(v90[0]);
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x212BFA3D0](&v93);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_36;
              return Mutable;
            }
            if ((v92 & 0x10) != 0)
            {
              v70 = *((_QWORD *)&v91 + 1);
              if (*((_QWORD *)&v91 + 1) < (unint64_t)v89)
              {
                *((_QWORD *)&v91 + 1) = v89;
                v70 = v89;
              }
              v71 = (const void **)&v88 + 1;
            }
            else
            {
              if ((v92 & 8) == 0)
              {
                v66 = 0;
                HIBYTE(v104.st_gid) = 0;
                v67 = &v104;
                goto LABEL_135;
              }
              v71 = (const void **)&v87;
              v70 = v88;
            }
            v76 = *v71;
            v66 = v70 - (_QWORD)*v71;
            if (v66 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v66 >= 0x17)
            {
              v77 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v66 | 7) != 0x17)
                v77 = v66 | 7;
              v78 = v77 + 1;
              v67 = operator new(v77 + 1);
              v104.st_ino = v66;
              *(_QWORD *)&v104.st_uid = v78 | 0x8000000000000000;
              *(_QWORD *)&v104.st_dev = v67;
            }
            else
            {
              HIBYTE(v104.st_gid) = v70 - *(_BYTE *)v71;
              v67 = &v104;
              if (!v66)
                goto LABEL_135;
            }
            memmove(v67, v76, v66);
LABEL_135:
            *((_BYTE *)v67 + v66) = 0;
            v79 = &v104;
            if ((v104.st_gid & 0x80000000) != 0)
              v79 = *(stat **)&v104.st_dev;
            BBUFeedback::handleComment(this, "Failed generating data source for %s while copying baseband migration data\n", (const char *)v79);
            goto LABEL_75;
          }
        }
        memmove(v53, v60, v52);
        goto LABEL_89;
      }
    }
    memmove(v40, v43, v39);
    goto LABEL_48;
  }
  _BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v22, v23, v24, v25, v26, v27, v80);
LABEL_35:
  BBUFeedback::handleComment(this, "Failed preparing baseband filesystem directory for copying baseband migration data\n");
  Mutable = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_36:
    operator delete(__p.__r_.__value_.__l.__data_);
  return Mutable;
}

void sub_212B0B460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (*(char *)(v61 - 217) < 0)
    operator delete(*(void **)(v61 - 240));
  std::ostringstream::~ostringstream((uint64_t)&a23);
  if (a61 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10UpdateSource::restoreBasebandMigrationData(BBUEUR10UpdateSource *this, BBUFeedback *a2, const __CFDictionary *a3)
{
  BBUPartitionManager *v5;
  BBUPartitionManager *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  bbufs *p_p;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 *v33;
  BOOL v34;
  _QWORD *v35;
  _OWORD *v36;
  const __CFAllocator *v37;
  __int128 v38;
  const __CFString *v39;
  const __CFURL *v40;
  const char *v41;
  __CFWriteStream *v42;
  __CFWriteStream *v43;
  uint64_t (*v44)(uint64_t);
  const UInt8 *BytePtr;
  CFIndex Length;
  CFIndex v47;
  _QWORD *v48;
  _OWORD *v49;
  char v51;
  std::string v52;
  const __CFString *v53;
  _BYTE v54[32];
  __int128 v55;
  uint64_t v56;
  std::string __p;
  uint64_t v58;
  std::string v59;
  std::string context;
  const __CFString *v61;

  memset(&__p, 170, sizeof(__p));
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v5 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v6 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v6);
    v7 = operator new(0x20uLL);
    *v7 = &unk_24CE85728;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v6;
    v8 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v6;
    off_253D31E70 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v5 = (BBUPartitionManager *)off_253D31E68;
  }
  v11 = (std::__shared_weak_count *)off_253D31E70;
  *(_QWORD *)v54 = v5;
  *(_QWORD *)&v54[8] = off_253D31E70;
  if (off_253D31E70)
  {
    v12 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v5, &__p);
  if (v11)
  {
    v21 = (unint64_t *)&v11->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = (bbufs *)&__p;
      else
        p_p = (bbufs *)__p.__r_.__value_.__r.__words[0];
      if (p_p)
        goto LABEL_19;
LABEL_26:
      _BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v15, v16, v17, v18, v19, v20, 0);
      goto LABEL_27;
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = (bbufs *)&__p;
  else
    p_p = (bbufs *)__p.__r_.__value_.__r.__words[0];
  if (!p_p)
    goto LABEL_26;
LABEL_19:
  if ((bbufs::prepareDestination(p_p, v14) & 1) != 0)
  {
    v30 = 1;
    goto LABEL_28;
  }
  _BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v24, v25, v26, v27, v28, v29, v51);
LABEL_27:
  BBUFeedback::handleComment(this, "Failed preparing baseband filesystem directory for copying baseband migration data");
  v30 = 0;
LABEL_28:
  *((_QWORD *)&v55 + 1) = 0;
  v56 = 0;
  *(_QWORD *)&v55 = (char *)&v55 + 8;
  *(_OWORD *)&v54[8] = 0uLL;
  *(_QWORD *)v54 = &v54[8];
  context.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
  context.__r_.__value_.__l.__size_ = (std::string::size_type)&v54[8];
  if (!a2)
  {
    std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy((uint64_t)v54, 0);
    v36 = (_OWORD *)v55;
    if ((__int128 *)v55 == (__int128 *)((char *)&v55 + 8))
      goto LABEL_90;
    goto LABEL_36;
  }
  CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)ctu::cf::_Applier_InsertMapDefault<std::string,__CFData const*,std::insert_iterator<std::map<std::string,__CFData const*>>>, &context);
  v31 = v55;
  v55 = *(_OWORD *)v54;
  *(_OWORD *)v54 = v31;
  v32 = v56;
  v56 = *(_QWORD *)&v54[16];
  *(_QWORD *)&v54[16] = v32;
  v33 = &v55;
  if (v56)
    v33 = (__int128 *)(*((_QWORD *)&v55 + 1) + 16);
  *(_QWORD *)v33 = (char *)&v55 + 8;
  v34 = v32 == 0;
  v35 = v54;
  if (!v34)
    v35 = (_QWORD *)(*((_QWORD *)&v31 + 1) + 16);
  *v35 = &v54[8];
  std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy((uint64_t)v54, *((char **)&v31 + 1));
  v36 = (_OWORD *)v55;
  if ((__int128 *)v55 != (__int128 *)((char *)&v55 + 8))
  {
LABEL_36:
    v37 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    do
    {
      *(_QWORD *)&v38 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v38 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)v54 = v38;
      *(_OWORD *)&v54[16] = v38;
      if (*((char *)v36 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v54, *((const std::string::value_type **)v36 + 4), *((_QWORD *)v36 + 5));
      }
      else
      {
        *(_OWORD *)v54 = v36[2];
        *(_QWORD *)&v54[16] = *((_QWORD *)v36 + 6);
      }
      *(_QWORD *)&v54[24] = *((_QWORD *)v36 + 7);
      if ((v54[23] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)v54, *(std::string::size_type *)&v54[8]);
      else
        v52 = *(std::string *)v54;
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v59, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
      else
        v59 = v52;
      v58 = 0;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&context, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
      else
        context = v59;
      v61 = 0;
      if (ctu::cf::convert_copy())
        v39 = v61;
      else
        v39 = 0;
      if (SHIBYTE(context.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(context.__r_.__value_.__l.__data_);
        v53 = v39;
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_69:
          operator delete(v59.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_56;
          goto LABEL_70;
        }
      }
      else
      {
        v53 = v39;
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_69;
      }
      if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_56;
LABEL_70:
      operator delete(v52.__r_.__value_.__l.__data_);
LABEL_56:
      v40 = CFURLCreateWithFileSystemPath(v37, v39, kCFURLPOSIXPathStyle, 0);
      if (!v40)
      {
        v41 = v54;
        if (v54[23] < 0)
          v41 = *(const char **)v54;
        BBUFeedback::handleComment(this, "Failed creating CFURLRef for %s while restoring baseband migration data", v41);
      }
      if (v39)
        CFRelease(v39);
      if (!v40)
      {
        v30 = 0;
        goto LABEL_81;
      }
      context.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
      v59.__r_.__value_.__r.__words[0] = 0;
      v42 = CFWriteStreamCreateWithFile(0, v40);
      v43 = v42;
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      if (v42)
        v44 = ctu::SharedRef<__CFWriteStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFWriteStream>::get;
      else
        v44 = 0;
      if (v44)
      {
        if (CFWriteStreamOpen(v42))
        {
          BytePtr = CFDataGetBytePtr(*(CFDataRef *)&v54[24]);
          Length = CFDataGetLength(*(CFDataRef *)&v54[24]);
          v47 = CFWriteStreamWrite(v43, BytePtr, Length);
          if (v47 <= 0)
            BBUFeedback::handleComment(this, "Failed writing to stream for restoring baseband migration data");
          CFWriteStreamClose(v43);
          v30 = v30 & (v47 > 0);
          if (!v43)
            goto LABEL_80;
LABEL_79:
          CFRelease(v43);
          goto LABEL_80;
        }
        BBUFeedback::handleComment(this, "Failed opening stream for restoring baseband migration data");
      }
      else
      {
        BBUFeedback::handleComment(this, "Failed creating CFWriteStremRef for restoring baseband migration data");
      }
      v30 = 0;
      if (v43)
        goto LABEL_79;
LABEL_80:
      CFRelease(v40);
LABEL_81:
      if ((v54[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v54);
        v48 = (_QWORD *)*((_QWORD *)v36 + 1);
        if (v48)
        {
          do
          {
LABEL_85:
            v49 = v48;
            v48 = (_QWORD *)*v48;
          }
          while (v48);
          goto LABEL_37;
        }
      }
      else
      {
        v48 = (_QWORD *)*((_QWORD *)v36 + 1);
        if (v48)
          goto LABEL_85;
      }
      do
      {
        v49 = (_OWORD *)*((_QWORD *)v36 + 2);
        v34 = *(_QWORD *)v49 == (_QWORD)v36;
        v36 = v49;
      }
      while (!v34);
LABEL_37:
      v36 = v49;
    }
    while (v49 != (__int128 *)((char *)&v55 + 8));
  }
LABEL_90:
  std::__tree<std::__value_type<std::string,__CFData const*>,std::__map_value_compare<std::string,std::__value_type<std::string,__CFData const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CFData const*>>>::destroy((uint64_t)&v55, *((char **)&v55 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v30;
}

void sub_212B0BAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  char **v41;

  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v41, v41[1]);
  operator delete(v41);
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_212B0BC64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a14);
  if ((a20 & 0x80000000) == 0)
    JUMPOUT(0x212B0BC40);
  JUMPOUT(0x212B0BC38);
}

uint64_t BBUEUR10UpdateSource::eraseBasebandFilesystem(BBUEUR10UpdateSource *this)
{
  BBUPartitionManager *v2;
  BBUPartitionManager *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::string::size_type *v13;
  std::string::size_type v14;
  std::string::size_type v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  std::ios_base *v19;
  uint64_t v20;
  std::string *v21;
  std::string::size_type size;
  _QWORD *v23;
  _QWORD *v24;
  const void **v25;
  BBUFeedback *v26;
  size_t v27;
  void **p_dst;
  uint64_t v29;
  const void **v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  char v35;
  size_t v36;
  void **v37;
  uint64_t v38;
  const void **v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  void **v50;
  uint64_t v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  BBUDataSource *v55;
  uint64_t v56;
  BBUEUREFSImage *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::string::size_type v62;
  void **v63;
  BBUPartitionManager *v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  bbufs *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  unint64_t *v87;
  unint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v94;
  void **__dst;
  void *v96;
  int64_t v97;
  std::string v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  void *__p[2];
  __int128 v103;
  unint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  std::string v115;

  memset(&v115, 170, sizeof(v115));
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v2 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v3 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v3);
    v4 = operator new(0x20uLL);
    *v4 = &unk_24CE85728;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v3;
    v5 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v3;
    off_253D31E70 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v2 = (BBUPartitionManager *)off_253D31E68;
  }
  v8 = (std::__shared_weak_count *)off_253D31E70;
  v98.__r_.__value_.__r.__words[0] = (std::string::size_type)v2;
  v98.__r_.__value_.__l.__size_ = (std::string::size_type)off_253D31E70;
  if (off_253D31E70)
  {
    v9 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v2, &v115);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::string::size_type *)MEMORY[0x24BEDB800];
  v14 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v15 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v104 = 0xAAAAAAAAAAAAAAAALL;
  v114 = v16;
  v113 = v16;
  v112 = v16;
  v111 = v16;
  v110 = v16;
  v109 = v16;
  v108 = v16;
  v107 = v16;
  v106 = v16;
  *(_OWORD *)__p = v16;
  v103 = v16;
  v100 = v16;
  v101 = v16;
  *(_OWORD *)&v98.__r_.__value_.__r.__words[1] = v16;
  v99 = v16;
  v17 = MEMORY[0x24BEDB870];
  v18 = MEMORY[0x24BEDB870] + 64;
  v105 = MEMORY[0x24BEDB870] + 64;
  v98.__r_.__value_.__r.__words[0] = v14;
  *(std::string::size_type *)((char *)v98.__r_.__value_.__r.__words + *(_QWORD *)(v14 - 24)) = v15;
  v19 = (std::ios_base *)((char *)&v98 + *(_QWORD *)(v98.__r_.__value_.__r.__words[0] - 24));
  std::ios_base::init(v19, &v98.__r_.__value_.__r.__words[1]);
  v19[1].__vftable = 0;
  v19[1].__fmtflags_ = -1;
  v98.__r_.__value_.__r.__words[0] = v17 + 24;
  v105 = v18;
  std::streambuf::basic_streambuf();
  v20 = MEMORY[0x24BEDB848];
  v98.__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v103 = 0u;
  LODWORD(v104) = 16;
  if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &v115;
  else
    v21 = (std::string *)v115.__r_.__value_.__r.__words[0];
  if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v115.__r_.__value_.__r.__words[2]);
  else
    size = v115.__r_.__value_.__l.__size_;
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v98, (uint64_t)v21, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"efs", 3);
  v24 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)".bin", 4);
  v25 = (const void **)&v100 + 1;
  v26 = (BBUFeedback *)*((_QWORD *)this + 1);
  if ((v104 & 0x10) != 0)
  {
    v29 = *((_QWORD *)&v103 + 1);
    v30 = (const void **)&v100 + 1;
    if (*((_QWORD *)&v103 + 1) < (unint64_t)v101)
    {
      *((_QWORD *)&v103 + 1) = v101;
      v29 = v101;
      v30 = (const void **)&v100 + 1;
    }
  }
  else
  {
    if ((v104 & 8) == 0)
    {
      v27 = 0;
      HIBYTE(v97) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_36;
    }
    v29 = v100;
    v30 = (const void **)&v99;
  }
  v31 = *v30;
  v27 = v29 - (_QWORD)*v30;
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v27 >= 0x17)
  {
    v32 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v32 = v27 | 7;
    v33 = v32 + 1;
    p_dst = (void **)operator new(v32 + 1);
    v96 = (void *)v27;
    v97 = v33 | 0x8000000000000000;
    __dst = p_dst;
    v20 = MEMORY[0x24BEDB848];
    goto LABEL_35;
  }
  HIBYTE(v97) = v29 - *(_BYTE *)v30;
  p_dst = (void **)&__dst;
  if (v27)
LABEL_35:
    memmove(p_dst, v31, v27);
LABEL_36:
  *((_BYTE *)p_dst + v27) = 0;
  v34 = (const char *)&__dst;
  if (v97 < 0)
    v34 = (const char *)__dst;
  BBUFeedback::handleComment(v26, "generating empty file for %s with size %u", v34, *((_DWORD *)this + 51));
  if (SHIBYTE(v97) < 0)
  {
    operator delete(__dst);
    v35 = v104;
    if ((v104 & 0x10) == 0)
      goto LABEL_40;
LABEL_43:
    v38 = *((_QWORD *)&v103 + 1);
    v39 = (const void **)&v100 + 1;
    if (*((_QWORD *)&v103 + 1) < (unint64_t)v101)
    {
      *((_QWORD *)&v103 + 1) = v101;
      v38 = v101;
      v39 = (const void **)&v100 + 1;
    }
    goto LABEL_46;
  }
  v35 = v104;
  if ((v104 & 0x10) != 0)
    goto LABEL_43;
LABEL_40:
  if ((v35 & 8) == 0)
  {
    v36 = 0;
    HIBYTE(v97) = 0;
    v37 = (void **)&__dst;
    goto LABEL_54;
  }
  v38 = v100;
  v39 = (const void **)&v99;
LABEL_46:
  v40 = *v39;
  v36 = v38 - (_QWORD)*v39;
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v36 >= 0x17)
  {
    v41 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v41 = v36 | 7;
    v42 = v41 + 1;
    v37 = (void **)operator new(v41 + 1);
    v96 = (void *)v36;
    v97 = v42 | 0x8000000000000000;
    __dst = v37;
    goto LABEL_53;
  }
  HIBYTE(v97) = v38 - *(_BYTE *)v39;
  v37 = (void **)&__dst;
  if (v36)
LABEL_53:
    memmove(v37, v40, v36);
LABEL_54:
  *((_BYTE *)v37 + v36) = 0;
  v43 = BBUScratchFile::createWithFile((uint64_t)&__dst, *((unsigned int *)this + 51));
  v44 = v43;
  if (SHIBYTE(v97) < 0)
  {
    operator delete(__dst);
    if ((_DWORD)v44)
      goto LABEL_56;
  }
  else if ((_DWORD)v43)
  {
LABEL_56:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_85;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_85;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      v45 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
      _BBULog(3, 0, v45, "", "Failed generating empty EFS file %u\n", v46, v47, v48, 1);
    }
    goto LABEL_85;
  }
  if ((v104 & 0x10) != 0)
  {
    v51 = *((_QWORD *)&v103 + 1);
    if (*((_QWORD *)&v103 + 1) < (unint64_t)v101)
    {
      *((_QWORD *)&v103 + 1) = v101;
      v51 = v101;
    }
  }
  else
  {
    if ((v104 & 8) == 0)
    {
      v49 = 0;
      HIBYTE(v97) = 0;
      v50 = (void **)&__dst;
      goto LABEL_75;
    }
    v51 = v100;
    v25 = (const void **)&v99;
  }
  v52 = *v25;
  v49 = v51 - (_QWORD)*v25;
  if (v49 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v49 >= 0x17)
  {
    v53 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v53 = v49 | 7;
    v54 = v53 + 1;
    v50 = (void **)operator new(v53 + 1);
    v96 = (void *)v49;
    v97 = v54 | 0x8000000000000000;
    __dst = v50;
  }
  else
  {
    HIBYTE(v97) = v51 - *(_BYTE *)v25;
    v50 = (void **)&__dst;
    if (!v49)
      goto LABEL_75;
  }
  memmove(v50, v52, v49);
LABEL_75:
  *((_BYTE *)v50 + v49) = 0;
  v55 = (BBUDataSource *)operator new(0x30uLL);
  *(_QWORD *)v55 = off_24CE7FC78;
  *(_OWORD *)((char *)v55 + 8) = 0u;
  *(_OWORD *)((char *)v55 + 24) = 0u;
  if (BBUFileDataSource::init((uint64_t)v55, (const char *)&__dst, 0))
  {
    (*(void (**)(BBUDataSource *))(*(_QWORD *)v55 + 8))(v55);
    v55 = 0;
  }
  if (SHIBYTE(v97) < 0)
    operator delete(__dst);
  v56 = **((_QWORD **)this + 36);
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = (BBUEUREFSImage *)operator new(0x58uLL);
  BBUEUREFSImage::BBUEUREFSImage(v57, v55, 1u, 0);
  **((_QWORD **)this + 36) = v57;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_85;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_85;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v58 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v58, "", "Loaded EFS%u\n", v59, v60, v61, 1);
  }
LABEL_85:
  v62 = v13[3];
  v98.__r_.__value_.__r.__words[0] = *v13;
  *(std::string::size_type *)((char *)v98.__r_.__value_.__r.__words + *(_QWORD *)(v98.__r_.__value_.__r.__words[0] - 24)) = v62;
  v98.__r_.__value_.__l.__size_ = v20 + 16;
  if (SBYTE7(v103) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v105);
  if ((_DWORD)v44)
    goto LABEL_121;
  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v63 = (void **)off_253D31E68;
  if (!off_253D31E68)
  {
    v64 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v64);
    v65 = operator new(0x20uLL);
    *v65 = &unk_24CE85728;
    v65[1] = 0;
    v65[2] = 0;
    v65[3] = v64;
    v66 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v64;
    off_253D31E70 = v65;
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v63 = (void **)off_253D31E68;
  }
  v69 = (std::__shared_weak_count *)off_253D31E70;
  __dst = v63;
  v96 = off_253D31E70;
  if (off_253D31E70)
  {
    v70 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath((BBUPartitionManager *)v63, &v98);
  if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v79 = (bbufs *)&v98;
  else
    v79 = (bbufs *)v98.__r_.__value_.__r.__words[0];
  if (!v79)
  {
    _BBUFSDebugPrint("BBUFSServerPrepare", "invalid path specified %s\n", v73, v74, v75, v76, v77, v78, 0);
    goto LABEL_107;
  }
  if ((bbufs::prepareDestination(v79, v72) & 1) == 0)
  {
    _BBUFSDebugPrint("BBUFSServerPrepare", "failed preparing baseband filesystem directory\n", v80, v81, v82, v83, v84, v85, v94);
LABEL_107:
    v86 = 0;
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_110;
    goto LABEL_108;
  }
  v86 = 1;
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_110:
    operator delete(v98.__r_.__value_.__l.__data_);
    if (!v69)
      goto LABEL_114;
    goto LABEL_111;
  }
LABEL_108:
  if (!v69)
    goto LABEL_114;
LABEL_111:
  v87 = (unint64_t *)&v69->__shared_owners_;
  do
    v88 = __ldaxr(v87);
  while (__stlxr(v88 - 1, v87));
  if (v88)
  {
LABEL_114:
    if ((v86 & 1) != 0)
    {
LABEL_115:
      v44 = 0;
      goto LABEL_121;
    }
    goto LABEL_117;
  }
  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
  std::__shared_weak_count::__release_weak(v69);
  if ((v86 & 1) != 0)
    goto LABEL_115;
LABEL_117:
  if (gBBULogMaskGet(void)::once == -1)
  {
    v44 = 11;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_121;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v44 = 11;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      goto LABEL_121;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v89 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v89, "", "failed preparing filesystem after erase\n", v90, v91, v92, v94);
  }
LABEL_121:
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  return v44;
}

void sub_212B0C5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  char **v24;
  uint64_t v25;

  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v24, v24[1]);
  operator delete(v24);
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  if (*(char *)(v25 - 89) < 0)
    operator delete(*(void **)(v25 - 112));
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10UpdateSource::getImageIDFromImageName(const void **a1)
{
  int v1;
  unint64_t v2;
  const void *v3;
  size_t v4;
  size_t v6;
  void *exception;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v1 = *((char *)a1 + 23);
  if (v1 >= 0)
    v2 = *((unsigned __int8 *)a1 + 23);
  else
    v2 = (unint64_t)a1[1];
  if (v1 >= 0)
    v3 = a1;
  else
    v3 = *a1;
  if (v2 >= 3)
    v4 = 3;
  else
    v4 = v2;
  if (!memcmp(v3, "CAL", v4) && v2 == 3)
    return 1128352768;
  if (v2 >= 4)
    v6 = 4;
  else
    v6 = v2;
  if (!memcmp(v3, "PROV", v6) && v2 == 4)
    return 1347571542;
  if (!memcmp(v3, "PAC", v4) && v2 == 3)
    return 1346454272;
  if (memcmp(v3, "ACT", v4) || v2 != 3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x2D7u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized BBUEUR Remote Data fileName.\")", v11, v12, v13, v14);
  }
  return 1094931456;
}

void sub_212B0C8A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

capabilities::updater *BBUEUR10UpdateSource::getItems(BBUEUR10UpdateSource *this)
{
  capabilities::updater *v2;
  capabilities::updater *BBCFGType;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  capabilities::updater *SBLType;
  void *v9;
  uint64_t v10;
  void *v11;
  capabilities::updater *RPMType;
  void *v13;
  uint64_t v14;
  void *v15;
  capabilities::updater *APPSType;
  void *v17;
  uint64_t v18;
  void *v19;
  capabilities::updater *DSP3Type;
  void *v21;
  uint64_t v22;
  void *v23;
  capabilities::updater *MBAType;
  void *v25;
  uint64_t v26;
  void *v27;
  capabilities::updater *QDSP6SWType;
  void *v29;
  uint64_t v30;
  void *v31;
  capabilities::updater *TZType;
  void *v33;
  uint64_t v34;
  void *v35;
  capabilities::updater *WDTType;
  void *v37;
  uint64_t v38;
  void *v39;
  capabilities::updater *EFS1Type;
  void *v41;
  uint64_t v42;
  void *v43;
  capabilities::updater *EFS2Type;
  void *v45;
  uint64_t v46;
  void *v47;
  capabilities::updater *EFS3Type;
  void *v49;
  uint64_t v50;
  void *v51;
  capabilities::updater *CalType;
  void *v53;
  uint64_t v54;
  void *v55;
  capabilities::updater *ProvType;
  void *v57;
  uint64_t v58;
  void *v59;
  capabilities::updater *PacType;
  void *v61;
  uint64_t v62;
  void *v63;
  capabilities::updater *ActType;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  _QWORD *v69;
  uint64_t v70;
  void *exception;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;

  v2 = (capabilities::updater *)operator new(0x18uLL);
  *(_QWORD *)v2 = v2;
  *((_QWORD *)v2 + 1) = v2;
  *((_QWORD *)v2 + 2) = 0;
  BBCFGType = (capabilities::updater *)capabilities::updater::supportsBbcfgImage(v2);
  if ((_DWORD)BBCFGType)
  {
    v4 = (void *)*((_QWORD *)this + 41);
    BBCFGType = (capabilities::updater *)capabilities::updater::getBBCFGType(BBCFGType);
    if ((_DWORD)BBCFGType == 1)
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xD7u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a BBCFG file.\")", v121, v122, v123, v124);
LABEL_71:
    }
    if (v4)
    {
      v5 = operator new(0x20uLL);
      BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v5, 16407, v4);
      BBCFGType = (capabilities::updater *)operator new(0x18uLL);
      *((_QWORD *)BBCFGType + 1) = v2;
      *((_QWORD *)BBCFGType + 2) = v5;
      v6 = *(_QWORD *)v2;
      *(_QWORD *)BBCFGType = *(_QWORD *)v2;
      *(_QWORD *)(v6 + 8) = BBCFGType;
      *(_QWORD *)v2 = BBCFGType;
      ++*((_QWORD *)v2 + 2);
    }
  }
  v7 = (void *)*((_QWORD *)this + 28);
  SBLType = (capabilities::updater *)capabilities::updater::getSBLType(BBCFGType);
  if ((_DWORD)SBLType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x19u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a SBL1 file.\")", v73, v74, v75, v124);
    goto LABEL_71;
  }
  if (v7)
  {
    v9 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v9, 16391, v7);
    SBLType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)SBLType + 1) = v2;
    *((_QWORD *)SBLType + 2) = v9;
    v10 = *(_QWORD *)v2;
    *(_QWORD *)SBLType = *(_QWORD *)v2;
    *(_QWORD *)(v10 + 8) = SBLType;
    *(_QWORD *)v2 = SBLType;
    ++*((_QWORD *)v2 + 2);
  }
  v11 = (void *)*((_QWORD *)this + 29);
  RPMType = (capabilities::updater *)capabilities::updater::getRPMType(SBLType);
  if ((_DWORD)RPMType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x25u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a RPM file.\")", v76, v77, v78, v124);
    goto LABEL_71;
  }
  if (v11)
  {
    v13 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v13, 16392, v11);
    RPMType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)RPMType + 1) = v2;
    *((_QWORD *)RPMType + 2) = v13;
    v14 = *(_QWORD *)v2;
    *(_QWORD *)RPMType = *(_QWORD *)v2;
    *(_QWORD *)(v14 + 8) = RPMType;
    *(_QWORD *)v2 = RPMType;
    ++*((_QWORD *)v2 + 2);
  }
  v15 = (void *)*((_QWORD *)this + 30);
  APPSType = (capabilities::updater *)capabilities::updater::getAPPSType(RPMType);
  if ((_DWORD)APPSType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x31u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have an APPS file.\")", v79, v80, v81, v124);
    goto LABEL_71;
  }
  if (v15)
  {
    v17 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v17, 16393, v15);
    APPSType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)APPSType + 1) = v2;
    *((_QWORD *)APPSType + 2) = v17;
    v18 = *(_QWORD *)v2;
    *(_QWORD *)APPSType = *(_QWORD *)v2;
    *(_QWORD *)(v18 + 8) = APPSType;
    *(_QWORD *)v2 = APPSType;
    ++*((_QWORD *)v2 + 2);
  }
  v19 = (void *)*((_QWORD *)this + 31);
  DSP3Type = (capabilities::updater *)capabilities::updater::getDSP3Type(APPSType);
  if ((_DWORD)DSP3Type == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x47u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a DSP3 file.\")", v82, v83, v84, v124);
    goto LABEL_71;
  }
  if (v19)
  {
    v21 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v21, 16394, v19);
    DSP3Type = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)DSP3Type + 1) = v2;
    *((_QWORD *)DSP3Type + 2) = v21;
    v22 = *(_QWORD *)v2;
    *(_QWORD *)DSP3Type = *(_QWORD *)v2;
    *(_QWORD *)(v22 + 8) = DSP3Type;
    *(_QWORD *)v2 = DSP3Type;
    ++*((_QWORD *)v2 + 2);
  }
  v23 = (void *)*((_QWORD *)this + 32);
  MBAType = (capabilities::updater *)capabilities::updater::getMBAType(DSP3Type);
  if ((_DWORD)MBAType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x52u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have an MBA file.\")", v85, v86, v87, v124);
    goto LABEL_71;
  }
  if (v23)
  {
    v25 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v25, 16395, v23);
    MBAType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)MBAType + 1) = v2;
    *((_QWORD *)MBAType + 2) = v25;
    v26 = *(_QWORD *)v2;
    *(_QWORD *)MBAType = *(_QWORD *)v2;
    *(_QWORD *)(v26 + 8) = MBAType;
    *(_QWORD *)v2 = MBAType;
    ++*((_QWORD *)v2 + 2);
  }
  v27 = (void *)*((_QWORD *)this + 33);
  QDSP6SWType = (capabilities::updater *)capabilities::updater::getQDSP6SWType(MBAType);
  if ((_DWORD)QDSP6SWType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x5Du, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a QDSP6SW file.\")", v88, v89, v90, v124);
    goto LABEL_71;
  }
  if (v27)
  {
    v29 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v29, 16396, v27);
    QDSP6SWType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)QDSP6SWType + 1) = v2;
    *((_QWORD *)QDSP6SWType + 2) = v29;
    v30 = *(_QWORD *)v2;
    *(_QWORD *)QDSP6SWType = *(_QWORD *)v2;
    *(_QWORD *)(v30 + 8) = QDSP6SWType;
    *(_QWORD *)v2 = QDSP6SWType;
    ++*((_QWORD *)v2 + 2);
  }
  v31 = (void *)*((_QWORD *)this + 34);
  TZType = (capabilities::updater *)capabilities::updater::getTZType(QDSP6SWType);
  if ((_DWORD)TZType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x68u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a TZ file.\")", v91, v92, v93, v124);
    goto LABEL_71;
  }
  if (v31)
  {
    v33 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v33, 16397, v31);
    TZType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)TZType + 1) = v2;
    *((_QWORD *)TZType + 2) = v33;
    v34 = *(_QWORD *)v2;
    *(_QWORD *)TZType = *(_QWORD *)v2;
    *(_QWORD *)(v34 + 8) = TZType;
    *(_QWORD *)v2 = TZType;
    ++*((_QWORD *)v2 + 2);
  }
  v35 = (void *)*((_QWORD *)this + 35);
  WDTType = (capabilities::updater *)capabilities::updater::getWDTType(TZType);
  if ((_DWORD)WDTType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x74u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a WDT file.\")", v94, v95, v96, v124);
    goto LABEL_71;
  }
  if (v35)
  {
    v37 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v37, 16398, v35);
    WDTType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)WDTType + 1) = v2;
    *((_QWORD *)WDTType + 2) = v37;
    v38 = *(_QWORD *)v2;
    *(_QWORD *)WDTType = *(_QWORD *)v2;
    *(_QWORD *)(v38 + 8) = WDTType;
    *(_QWORD *)v2 = WDTType;
    ++*((_QWORD *)v2 + 2);
  }
  v39 = (void *)**((_QWORD **)this + 36);
  EFS1Type = (capabilities::updater *)capabilities::updater::getEFS1Type(WDTType);
  if ((_DWORD)EFS1Type == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x8Au, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have an EFS1 file.\")", v97, v98, v99, v124);
    goto LABEL_71;
  }
  if (v39)
  {
    v41 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v41, 16400, v39);
    EFS1Type = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)EFS1Type + 1) = v2;
    *((_QWORD *)EFS1Type + 2) = v41;
    v42 = *(_QWORD *)v2;
    *(_QWORD *)EFS1Type = *(_QWORD *)v2;
    *(_QWORD *)(v42 + 8) = EFS1Type;
    *(_QWORD *)v2 = EFS1Type;
    ++*((_QWORD *)v2 + 2);
  }
  v43 = *(void **)(*((_QWORD *)this + 36) + 8);
  EFS2Type = (capabilities::updater *)capabilities::updater::getEFS2Type(EFS1Type);
  if ((_DWORD)EFS2Type == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x95u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have an EFS2 file.\")", v100, v101, v102, v124);
    goto LABEL_71;
  }
  if (v43)
  {
    v45 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v45, 16401, v43);
    EFS2Type = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)EFS2Type + 1) = v2;
    *((_QWORD *)EFS2Type + 2) = v45;
    v46 = *(_QWORD *)v2;
    *(_QWORD *)EFS2Type = *(_QWORD *)v2;
    *(_QWORD *)(v46 + 8) = EFS2Type;
    *(_QWORD *)v2 = EFS2Type;
    ++*((_QWORD *)v2 + 2);
  }
  v47 = *(void **)(*((_QWORD *)this + 36) + 16);
  EFS3Type = (capabilities::updater *)capabilities::updater::getEFS3Type(EFS2Type);
  if ((_DWORD)EFS3Type == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xA0u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have an EFS3 file.\")", v103, v104, v105, v124);
    goto LABEL_71;
  }
  if (v47)
  {
    v49 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v49, 16402, v47);
    EFS3Type = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)EFS3Type + 1) = v2;
    *((_QWORD *)EFS3Type + 2) = v49;
    v50 = *(_QWORD *)v2;
    *(_QWORD *)EFS3Type = *(_QWORD *)v2;
    *(_QWORD *)(v50 + 8) = EFS3Type;
    *(_QWORD *)v2 = EFS3Type;
    ++*((_QWORD *)v2 + 2);
  }
  v51 = (void *)*((_QWORD *)this + 5);
  CalType = (capabilities::updater *)capabilities::updater::getCalType(EFS3Type);
  if ((_DWORD)CalType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xABu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a Cal file.\")", v106, v107, v108, v124);
    goto LABEL_71;
  }
  if (v51)
  {
    v53 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v53, 16403, v51);
    CalType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)CalType + 1) = v2;
    *((_QWORD *)CalType + 2) = v53;
    v54 = *(_QWORD *)v2;
    *(_QWORD *)CalType = *(_QWORD *)v2;
    *(_QWORD *)(v54 + 8) = CalType;
    *(_QWORD *)v2 = CalType;
    ++*((_QWORD *)v2 + 2);
  }
  v55 = (void *)*((_QWORD *)this + 6);
  ProvType = (capabilities::updater *)capabilities::updater::getProvType(CalType);
  if ((_DWORD)ProvType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xB6u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a Prov file.\")", v109, v110, v111, v124);
    goto LABEL_71;
  }
  if (v55)
  {
    v57 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v57, 16404, v55);
    ProvType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)ProvType + 1) = v2;
    *((_QWORD *)ProvType + 2) = v57;
    v58 = *(_QWORD *)v2;
    *(_QWORD *)ProvType = *(_QWORD *)v2;
    *(_QWORD *)(v58 + 8) = ProvType;
    *(_QWORD *)v2 = ProvType;
    ++*((_QWORD *)v2 + 2);
  }
  v59 = (void *)*((_QWORD *)this + 7);
  PacType = (capabilities::updater *)capabilities::updater::getPacType(ProvType);
  if ((_DWORD)PacType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xC1u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have a Pac file.\")", v112, v113, v114, v124);
    goto LABEL_71;
  }
  if (v59)
  {
    v61 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v61, 16405, v59);
    PacType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)PacType + 1) = v2;
    *((_QWORD *)PacType + 2) = v61;
    v62 = *(_QWORD *)v2;
    *(_QWORD *)PacType = *(_QWORD *)v2;
    *(_QWORD *)(v62 + 8) = PacType;
    *(_QWORD *)v2 = PacType;
    ++*((_QWORD *)v2 + 2);
  }
  v63 = (void *)*((_QWORD *)this + 39);
  ActType = (capabilities::updater *)capabilities::updater::getActType(PacType);
  if ((_DWORD)ActType == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0xCCu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have an Act file.\")", v115, v116, v117, v124);
    goto LABEL_71;
  }
  if (v63)
  {
    v65 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v65, 16406, v63);
    ActType = (capabilities::updater *)operator new(0x18uLL);
    *((_QWORD *)ActType + 1) = v2;
    *((_QWORD *)ActType + 2) = v65;
    v66 = *(_QWORD *)v2;
    *(_QWORD *)ActType = *(_QWORD *)v2;
    *(_QWORD *)(v66 + 8) = ActType;
    *(_QWORD *)v2 = ActType;
    ++*((_QWORD *)v2 + 2);
  }
  v67 = (void *)*((_QWORD *)this + 40);
  if (capabilities::updater::getACDBType(ActType) == 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEURUpdateSource.cpp", 0x7Fu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Invalid radio type: Specified radio does not have an ACDBT file.\")", v118, v119, v120, v124);
    goto LABEL_71;
  }
  if (v67)
  {
    v68 = operator new(0x20uLL);
    BBUEUR10Programmer::EUR10Item::EUR10Item((uint64_t)v68, 16399, v67);
    v69 = operator new(0x18uLL);
    v69[1] = v2;
    v69[2] = v68;
    v70 = *(_QWORD *)v2;
    *v69 = *(_QWORD *)v2;
    *(_QWORD *)(v70 + 8) = v69;
    *(_QWORD *)v2 = v69;
    ++*((_QWORD *)v2 + 2);
  }
  return v2;
}

void sub_212B0D19C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D1B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D1C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D1D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D1EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D200(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D214(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D228(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D23C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D250(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D264(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D278(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D28C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D2A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D2B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D2C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D2DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D2F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D304(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D318(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D32C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D340(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D354(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D368(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D37C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D390(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D3A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D3B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D3CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D3E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D3F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D408(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D41C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B0D430(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10UpdateSource::validateBootupItems(BBUEUR10UpdateSource *this)
{
  uint64_t v2;
  capabilities::updater *v3;
  uint64_t result;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *((_QWORD *)this + 28);
  if (!v2)
    return 35;
  v3 = (capabilities::updater *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  if (!v3)
    return 35;
  if (*((_QWORD *)this + 29)
    && *((_QWORD *)this + 30)
    && *((_QWORD *)this + 31)
    && *((_QWORD *)this + 32)
    && *((_QWORD *)this + 33)
    && *((_QWORD *)this + 34)
    && *((_QWORD *)this + 35)
    && **((_QWORD **)this + 36)
    && *((_QWORD *)this + 40))
  {
    result = capabilities::updater::supportsBbcfgImage(v3);
    if (!(_DWORD)result)
      return result;
    if (*((_QWORD *)this + 41))
      return 0;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    result = 35;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      return result;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    result = 35;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
      return result;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v5 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
    _BBULog(3, 0, v5, "", "Baseband FW isn't complete. You are missing some images!\n", v6, v7, v8, v9);
    return 35;
  }
  return result;
}

uint64_t BBUEUR10UpdateSource::validateCoredumpItems(BBUEUR10UpdateSource *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 28);
  if (v1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 64))(v1))
    return 0;
  else
    return 35;
}

char *BBUEUR10UpdateSource::copyHashData(BBUEUR10UpdateSource *this, int a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  capabilities::updater *v14;
  uint64_t v15;
  char *v16;
  size_t HashSize;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  size_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  size_t v32;
  size_t v33;
  size_t v34;
  size_t v35;
  size_t v36;
  void *exception;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD v82[2];
  _OWORD v83[2];
  _OWORD v84[2];
  _OWORD v85[2];
  _OWORD v86[2];
  _OWORD v87[2];
  _OWORD v88[2];
  _OWORD v89[2];
  _OWORD v90[2];
  _OWORD v91[2];
  _OWORD __src[2];
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __src[0] = v3;
    __src[1] = v3;
    v91[0] = v3;
    v91[1] = v3;
    v90[0] = v3;
    v90[1] = v3;
    v89[0] = v3;
    v89[1] = v3;
    v88[0] = v3;
    v88[1] = v3;
    v87[0] = v3;
    v87[1] = v3;
    v86[0] = v3;
    v86[1] = v3;
    v85[0] = v3;
    v85[1] = v3;
    v84[0] = v3;
    v84[1] = v3;
    v83[0] = v3;
    v83[1] = v3;
    v82[0] = v3;
    v82[1] = v3;
    v4 = *((_QWORD *)this + 28);
    if (!v4)
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 89, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x337u, (ctu::LogMessageBuffer *)"Assertion failure(fSBLImage && \"Failed loading SBL image for creating hash.\")", v39, v40, v41, v82[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v4 + 56))(v4, __src, 0);
    v5 = *((_QWORD *)this + 29);
    if (!v5)
    {
      v42 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v42, 90, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x33Au, (ctu::LogMessageBuffer *)"Assertion failure(fRPMImage && \"Failed loading RPM image for creating hash.\")", v43, v44, v45, v82[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v5 + 56))(v5, v91, 0);
    v6 = *((_QWORD *)this + 30);
    if (!v6)
    {
      v46 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v46, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x33Du, (ctu::LogMessageBuffer *)"Assertion failure(fAppsImage && \"Failed loading Apps image for creating hash.\")", v47, v48, v49, v82[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v6 + 56))(v6, v90, 0);
    v7 = *((_QWORD *)this + 31);
    if (!v7)
    {
      v50 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v50, 91, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x340u, (ctu::LogMessageBuffer *)"Assertion failure(fDSPImage && \"Failed loading DSP image for creating hash.\")", v51, v52, v53, v82[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v7 + 56))(v7, v89, 0);
    v8 = *((_QWORD *)this + 32);
    if (!v8)
    {
      v54 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v54, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x343u, (ctu::LogMessageBuffer *)"Assertion failure(fMBAImage && \"Failed loading MBA image for creating hash.\")", v55, v56, v57, v82[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v8 + 56))(v8, v88, 0);
    v9 = *((_QWORD *)this + 33);
    if (!v9)
    {
      v58 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v58, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x346u, (ctu::LogMessageBuffer *)"Assertion failure(fQDSP6SWImage && \"Failed loading QDSP6SW image for creating hash.\")", v59, v60, v61, v82[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v9 + 56))(v9, v87, 0);
    v10 = *((_QWORD *)this + 34);
    if (!v10)
    {
      v62 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v62, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x349u, (ctu::LogMessageBuffer *)"Assertion failure(fTZImage && \"Failed loading TZI image for creating hash.\")", v63, v64, v65, v82[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v10 + 56))(v10, v86, 0);
    v11 = *((_QWORD *)this + 35);
    if (!v11)
    {
      v66 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v66, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x34Cu, (ctu::LogMessageBuffer *)"Assertion failure(fWDTImage && \"Failed loading WDT image for creating hash.\")", v67, v68, v69, v82[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v11 + 56))(v11, v84, 0);
    v12 = *((_QWORD *)this + 29);
    if (!v12)
    {
      v70 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v70, 90, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x34Fu, (ctu::LogMessageBuffer *)"Assertion failure(fRPMImage && \"Failed loading RPM image for creating hash.\")", v71, v72, v73, v82[0]);
    }
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v12 + 56))(v12, v85, 0);
    v13 = *((_QWORD *)this + 40);
    if (!v13)
    {
      v74 = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)v74, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x352u, (ctu::LogMessageBuffer *)"Assertion failure(fAcdbImage && \"Failed loading ACDB image for creating hash.\")", v75, v76, v77, v82[0]);
    }
    v14 = (capabilities::updater *)(*(uint64_t (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v13 + 56))(v13, v83, 0);
    if (capabilities::updater::supportsBbcfgImage(v14))
    {
      v15 = *((_QWORD *)this + 41);
      if (!v15)
      {
        v78 = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)v78, 92, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x357u, (ctu::LogMessageBuffer *)"Assertion failure(fBbcfgImage && \"Failed loading BBCFG image for creating hash.\")", v79, v80, v81, v82[0]);
      }
      (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v15 + 56))(v15, v82, 0);
    }
    v16 = (char *)operator new(0x148uLL);
    *(_QWORD *)v16 = &unk_24CE800C0;
    HashSize = BBUEURHashData::getHashSize((BBUEURHashData *)v16);
    memcpy(v16 + 8, __src, HashSize);
    v18 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    memcpy(v16 + 40, v91, v18);
    v19 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    memcpy(v16 + 72, v90, v19);
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    memcpy(v16 + 104, v89, v20);
    v21 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    memcpy(v16 + 136, v88, v21);
    v22 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    memcpy(v16 + 168, v87, v22);
    v23 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    memcpy(v16 + 200, v86, v23);
    v24 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    memcpy(v16 + 232, v84, v24);
    v25 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    memcpy(v16 + 264, v83, v25);
    v26 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    memcpy(v16 + 296, v82, v26);
  }
  else
  {
    v16 = (char *)operator new(0x148uLL);
    *(_QWORD *)v16 = &unk_24CE800C0;
    v27 = BBUEURHashData::getHashSize((BBUEURHashData *)v16);
    bzero(v16 + 8, v27);
    v28 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    bzero(v16 + 40, v28);
    v29 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    bzero(v16 + 72, v29);
    v30 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    bzero(v16 + 104, v30);
    v31 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    bzero(v16 + 136, v31);
    v32 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    bzero(v16 + 168, v32);
    v33 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    bzero(v16 + 200, v33);
    v34 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    bzero(v16 + 232, v34);
    v35 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    bzero(v16 + 264, v35);
    v36 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
    bzero(v16 + 296, v36);
  }
  return v16;
}

void sub_212B0DCE0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0DCF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0DD08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0DD1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0DD30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0DD44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0DD58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0DD6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0DD80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0DD94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0DDA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0DDBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B0DDD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10UpdateSource::getProgrammerSource(BBUEUR10UpdateSource *this, int a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = *((_QWORD *)this + 28);
    if (v2)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  }
  else
  {
    v2 = *((_QWORD *)this + 27);
    if (v2)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  }
  return 0;
}

uint64_t BBUEUR10UpdateSource::saveImages(BBUEUR10UpdateSource *this)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  capabilities::radio *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  capabilities::updater *v11;
  uint64_t v12;
  uint64_t v13;
  void *exception;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *__p[2];
  char v24;
  void *v25[3];

  if (!*((_QWORD *)this + 8))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x387u, (ctu::LogMessageBuffer *)"Assertion failure(fZipFile && \"Firmware data source error!\")", v16, v17, v18, (char)__p[0]);
  }
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v2 = (const char *)(**(uint64_t (***)(BBUEUR10UpdateSource *))this)(this);
  v6 = (capabilities::radio *)_BBULog(19, 0xFFFFFFFFLL, v2, "", "BBUEUR10UpdateSource::saveImages\n", v3, v4, v5, (char)__p[0]);
  memset(v25, 170, sizeof(v25));
  capabilities::radio::personalizedFirmwarePath(v6);
  v7 = (void *)HIBYTE(v25[2]);
  if (SHIBYTE(v25[2]) < 0)
    v7 = v25[1];
  if (!v7)
  {
    v19 = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)v19, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Updater/Eureka/BBUEUR10UpdateSource.cpp", 0x38Cu, (ctu::LogMessageBuffer *)"Assertion failure(folder.empty() != true && \"Failed finding the bbfw path.\")", v20, v21, v22, (char)__p[0]);
  }
  v8 = BBUEURUpdateSource::saveImages(this);
  if (!(_DWORD)v8)
  {
    v24 = 8;
    strcpy((char *)__p, "sbl1.mbn");
    v9 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
    v8 = v9;
    if (v24 < 0)
    {
      operator delete(__p[0]);
      if ((_DWORD)v8)
        goto LABEL_47;
    }
    else if ((_DWORD)v9)
    {
      goto LABEL_47;
    }
    v24 = 7;
    strcpy((char *)__p, "rpm.mbn");
    v10 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
    v8 = v10;
    if (v24 < 0)
    {
      operator delete(__p[0]);
      if ((_DWORD)v8)
        goto LABEL_47;
    }
    else if ((_DWORD)v10)
    {
      goto LABEL_47;
    }
    v24 = 8;
    strcpy((char *)__p, "apps.mbn");
    v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
    if (v24 < 0)
      operator delete(__p[0]);
    if (!(_DWORD)v8)
    {
      v24 = 8;
      strcpy((char *)__p, "dsp3.mbn");
      v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
      if (v24 < 0)
        operator delete(__p[0]);
      if (!(_DWORD)v8)
      {
        v24 = 11;
        strcpy((char *)__p, "qdsp6sw.mbn");
        v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
        if (v24 < 0)
          operator delete(__p[0]);
        if (!(_DWORD)v8)
        {
          v24 = 7;
          strcpy((char *)__p, "mba.mbn");
          v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
          if (v24 < 0)
            operator delete(__p[0]);
          if (!(_DWORD)v8)
          {
            v24 = 6;
            strcpy((char *)__p, "tz.mbn");
            v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
            if (v24 < 0)
              operator delete(__p[0]);
            if (!(_DWORD)v8)
            {
              v24 = 7;
              strcpy((char *)__p, "wdt.mbn");
              v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
              if (v24 < 0)
                operator delete(__p[0]);
              if (!(_DWORD)v8)
              {
                v24 = 8;
                strcpy((char *)__p, "acdb.mbn");
                v11 = (capabilities::updater *)BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
                v8 = (uint64_t)v11;
                if (v24 < 0)
                  operator delete(__p[0]);
                if (!(_DWORD)v8)
                {
                  if ((capabilities::updater::supportsBbcfgImage(v11) & 1) == 0)
                  {
                    v12 = *((_QWORD *)this + 8);
                    v24 = 9;
                    strcpy((char *)__p, "bbcfg.mbn");
                    if (!BBUZipFile::containsFile(v12, __p))
                      goto LABEL_42;
                  }
                  v24 = 9;
                  strcpy((char *)__p, "bbcfg.mbn");
                  v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
                  if (v24 < 0)
                    operator delete(__p[0]);
                  if (!(_DWORD)v8)
                  {
LABEL_42:
                    v13 = *((_QWORD *)this + 8);
                    (*(void (**)(void **__return_ptr, BBUEUR10UpdateSource *))(*(_QWORD *)this + 56))(__p, this);
                    v8 = BBUZipFile::containsFile(v13, __p);
                    if (v24 < 0)
                      operator delete(__p[0]);
                    if ((_DWORD)v8)
                    {
                      (*(void (**)(void **__return_ptr, BBUEUR10UpdateSource *))(*(_QWORD *)this + 56))(__p, this);
                      v8 = BBUEURUpdateSource::saveFile((uint64_t)this, (uint64_t)__p, (uint64_t)v25);
                      if (v24 < 0)
                        operator delete(__p[0]);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_47:
  if (SHIBYTE(v25[2]) < 0)
    operator delete(v25[0]);
  return v8;
}

void sub_212B0E314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

const char *BBUEUR10UpdateSource::getDebugName(BBUEUR10UpdateSource *this)
{
  return "BBUEUR10UpdateSource";
}

void BBUEURRPMElfImage::~BBUEURRPMElfImage(BBUEURRPMElfImage *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  operator delete(this);
}

const char *BBUEURRPMElfImage::getName(BBUEURRPMElfImage *this)
{
  return "RPM";
}

void BBUEURAppsImage::~BBUEURAppsImage(BBUEURAppsImage *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  operator delete(this);
}

const char *BBUEURAppsImage::getName(BBUEURAppsImage *this)
{
  return "Apps";
}

void BBUEURMBAImage::~BBUEURMBAImage(BBUEURMBAImage *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  operator delete(this);
}

const char *BBUEURMBAImage::getName(BBUEURMBAImage *this)
{
  return "MBA";
}

void BBUEURQDSP6SWImage::~BBUEURQDSP6SWImage(BBUEURQDSP6SWImage *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  operator delete(this);
}

const char *BBUEURQDSP6SWImage::getName(BBUEURQDSP6SWImage *this)
{
  return "QDSP6SW";
}

void BBUEURTZImage::~BBUEURTZImage(BBUEURTZImage *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  operator delete(this);
}

const char *BBUEURTZImage::getName(BBUEURTZImage *this)
{
  return "TZ";
}

void BBUEURWDTImage::~BBUEURWDTImage(BBUEURWDTImage *this)
{
  uint64_t v1;

  *(_QWORD *)this = off_24CE84BF8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24CE84BF8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(this);
}

const char *BBUEURWDTImage::getName(BBUEURWDTImage *this)
{
  return "WDT";
}

void BBUEURACDBImage::~BBUEURACDBImage(BBUEURACDBImage *this)
{
  uint64_t v1;

  *(_QWORD *)this = off_24CE84BF8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24CE84BF8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(this);
}

const char *BBUEURACDBImage::getName(BBUEURACDBImage *this)
{
  return "ACDB";
}

void BBUEURBBCFGImage::~BBUEURBBCFGImage(BBUEURBBCFGImage *this)
{
  uint64_t v1;

  *(_QWORD *)this = off_24CE84BF8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24CE84BF8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(this);
}

const char *BBUEURBBCFGImage::getName(BBUEURBBCFGImage *this)
{
  return "BBCFG";
}

void BBUEURAPDPImage::~BBUEURAPDPImage(BBUEURAPDPImage *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  operator delete(this);
}

const char *BBUEURAPDPImage::getName(BBUEURAPDPImage *this)
{
  return "APDP";
}

void BBUEURDevcfgImage::~BBUEURDevcfgImage(BBUEURDevcfgImage *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  operator delete(this);
}

const char *BBUEURDevcfgImage::getName(BBUEURDevcfgImage *this)
{
  return "DEVCFG";
}

void BBUEURHYPImage::~BBUEURHYPImage(BBUEURHYPImage *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  operator delete(this);
}

const char *BBUEURHYPImage::getName(BBUEURHYPImage *this)
{
  return "HYP";
}

void BBUEURAOPImage::~BBUEURAOPImage(BBUEURAOPImage *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  operator delete(this);
}

const char *BBUEURAOPImage::getName(BBUEURAOPImage *this)
{
  return "AOP";
}

void BBUEURMDMDDRImage::~BBUEURMDMDDRImage(BBUEURMDMDDRImage *this)
{
  uint64_t v1;

  *(_QWORD *)this = off_24CE84BF8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24CE84BF8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(this);
}

const char *BBUEURMDMDDRImage::getName(BBUEURMDMDDRImage *this)
{
  return "MDMDDR";
}

void BBUEUROEMMiscImage::~BBUEUROEMMiscImage(BBUEUROEMMiscImage *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  operator delete(this);
}

const char *BBUEUROEMMiscImage::getName(BBUEUROEMMiscImage *this)
{
  return "OEMMisc";
}

void BBUEURQTIMiscImage::~BBUEURQTIMiscImage(BBUEURQTIMiscImage *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  operator delete(this);
}

const char *BBUEURQTIMiscImage::getName(BBUEURQTIMiscImage *this)
{
  return "QTIMisc";
}

void BBUEURXblCfgImage::~BBUEURXblCfgImage(BBUEURXblCfgImage *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  operator delete(this);
}

const char *BBUEURXblCfgImage::getName(BBUEURXblCfgImage *this)
{
  return "XBL_CFG";
}

void BBUEURUEFIImage::~BBUEURUEFIImage(BBUEURUEFIImage *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  operator delete(this);
}

const char *BBUEURUEFIImage::getName(BBUEURUEFIImage *this)
{
  return "UEFI";
}

void BBUEURXblSupportImage::~BBUEURXblSupportImage(BBUEURXblSupportImage *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24CE80058;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)v2[8];
    if (v3)
      operator delete[](v3);
    operator delete(v2);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  operator delete(this);
}

const char *BBUEURXblSupportImage::getName(BBUEURXblSupportImage *this)
{
  return "XblSupport";
}

uint64_t __cxx_global_var_init_18()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUPartitionManager>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance, &dword_212A4D000);
  }
  return result;
}

uint64_t BBUEUR10Programmer::EUR10Item::EUR10Item(uint64_t a1, int a2, void *lpsrc)
{
  void *v4;
  const struct __class_type_info *v5;
  void *exception;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = off_24CE841B8;
  *(_QWORD *)(a1 + 16) = 0;
  switch(a2)
  {
    case 16391:
      if (lpsrc)
      else
        v4 = 0;
      *(_QWORD *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 24) = 21;
      goto LABEL_61;
    case 16392:
      if (lpsrc)
      else
        v4 = 0;
      *(_QWORD *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 24) = 23;
      goto LABEL_61;
    case 16393:
      if (lpsrc)
      else
        v4 = 0;
      *(_QWORD *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 24) = 6;
      goto LABEL_61;
    case 16394:
      if (lpsrc)
      else
        v4 = 0;
      *(_QWORD *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 24) = 28;
      goto LABEL_61;
    case 16395:
      if (lpsrc)
      else
        v4 = 0;
      *(_QWORD *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 24) = 31;
      goto LABEL_61;
    case 16396:
      if (lpsrc)
      else
        v4 = 0;
      *(_QWORD *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 24) = 8;
      goto LABEL_61;
    case 16397:
      if (lpsrc)
      else
        v4 = 0;
      *(_QWORD *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 24) = 25;
      goto LABEL_61;
    case 16398:
      if (lpsrc)
      else
        v4 = 0;
      *(_QWORD *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 24) = 30;
      goto LABEL_61;
    case 16399:
      if (lpsrc)
      else
        v4 = 0;
      *(_QWORD *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 24) = 29;
      goto LABEL_61;
    case 16400:
      *(_DWORD *)(a1 + 24) = 16;
      if (!lpsrc)
        goto LABEL_59;
      goto LABEL_33;
    case 16401:
      *(_DWORD *)(a1 + 24) = 17;
      if (!lpsrc)
        goto LABEL_59;
      goto LABEL_33;
    case 16402:
      *(_DWORD *)(a1 + 24) = 20;
      if (!lpsrc)
        goto LABEL_59;
      goto LABEL_33;
    case 16403:
      *(_DWORD *)(a1 + 24) = 1128352768;
      if (!lpsrc)
        goto LABEL_59;
      goto LABEL_33;
    case 16404:
      *(_DWORD *)(a1 + 24) = 1347571542;
      if (!lpsrc)
        goto LABEL_59;
      goto LABEL_33;
    case 16405:
      *(_DWORD *)(a1 + 24) = 1346454272;
      if (!lpsrc)
        goto LABEL_59;
      goto LABEL_33;
    case 16406:
      *(_DWORD *)(a1 + 24) = 1094931456;
      if (!lpsrc)
        goto LABEL_59;
LABEL_33:
      goto LABEL_34;
    case 16407:
      *(_DWORD *)(a1 + 24) = 1128679168;
      if (!lpsrc)
        goto LABEL_59;
      goto LABEL_34;
    case 16408:
      *(_DWORD *)(a1 + 24) = 40;
      if (!lpsrc)
        goto LABEL_59;
      goto LABEL_34;
    case 16409:
      *(_DWORD *)(a1 + 24) = 41;
      if (!lpsrc)
        goto LABEL_59;
      goto LABEL_34;
    case 16410:
      *(_DWORD *)(a1 + 24) = 42;
      if (!lpsrc)
        goto LABEL_59;
      goto LABEL_34;
    case 16411:
      *(_DWORD *)(a1 + 24) = 33;
      if (!lpsrc)
        goto LABEL_59;
      goto LABEL_34;
    case 16412:
      *(_DWORD *)(a1 + 24) = 23;
      if (!lpsrc)
        goto LABEL_59;
      goto LABEL_34;
    case 16413:
      *(_DWORD *)(a1 + 24) = 34;
      if (!lpsrc)
        goto LABEL_59;
      goto LABEL_34;
    case 16414:
      *(_DWORD *)(a1 + 24) = 37;
      if (!lpsrc)
        goto LABEL_59;
      goto LABEL_34;
    case 16415:
      *(_DWORD *)(a1 + 24) = 36;
      if (!lpsrc)
        goto LABEL_59;
      goto LABEL_34;
    case 16416:
      *(_DWORD *)(a1 + 24) = 38;
      if (!lpsrc)
        goto LABEL_59;
      goto LABEL_34;
    case 16417:
      *(_DWORD *)(a1 + 24) = 5;
      if (!lpsrc)
        goto LABEL_59;
      goto LABEL_34;
    case 16418:
      *(_DWORD *)(a1 + 24) = 48;
      if (lpsrc)
      {
LABEL_34:
      }
      else
      {
LABEL_59:
        v4 = 0;
      }
      *(_QWORD *)(a1 + 16) = v4;
LABEL_61:
      if (!v4)
      {
        exception = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR10Programmer.cpp", 0xBEu, (ctu::LogMessageBuffer *)"Assertion failure(fImage && \"BBU Programmer item creation failed.\")", v8, v9, v10, v14);
LABEL_82:
      }
      return a1;
    default:
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 85, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Eureka/BBUEUR10Programmer.cpp", 0xBBu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized BBU Programmer item type.\")", v11, v12, v13, v14);
      goto LABEL_82;
  }
}

void sub_212B0F6C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B0F6DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *BBUEUR10Programmer::addProgressBarTimes(uint64_t *this, BBUFeedback *a2)
{
  uint64_t v2;
  int *v3;
  uint64_t **v4;
  uint64_t **v5;
  _QWORD *v6;
  int *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  int *v18;
  uint64_t **v19;
  _QWORD *v20;
  int *v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  _QWORD *v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  int *v32;
  uint64_t **v33;
  _QWORD *v34;
  int *v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t **v40;
  _QWORD *v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  int *v46;
  uint64_t **v47;
  _QWORD *v48;
  int *v49;
  int v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t **v54;
  _QWORD *v55;
  int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  int *v60;
  uint64_t **v61;
  _QWORD *v62;
  int *v63;
  int v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t **v68;
  _QWORD *v69;
  int v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t *v73;
  int *v74;
  uint64_t **v75;
  _QWORD *v76;
  int *v77;
  int v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t **v82;
  _QWORD *v83;
  int v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t *v87;
  int *v88;
  uint64_t **v89;
  _QWORD *v90;
  int *v91;
  int v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t **v96;
  _QWORD *v97;
  int v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t *v101;
  int *v102;
  uint64_t **v103;
  _QWORD *v104;
  int *v105;
  int v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t **v110;
  _QWORD *v111;
  int v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t *v115;
  int *v116;
  _QWORD *v117;
  int v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t *v121;

  v2 = (uint64_t)this;
  v4 = (uint64_t **)(this + 2);
  v3 = (int *)this[2];
  v5 = (uint64_t **)(this + 2);
  v6 = this + 2;
  if (v3)
  {
    v7 = (int *)this[2];
    while (1)
    {
      while (1)
      {
        v6 = v7;
        v8 = v7[8];
        if (v8 < 2)
          break;
        v7 = (int *)*v6;
        v5 = (uint64_t **)v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v8 == 1)
        break;
      v7 = (int *)v6[1];
      if (!v7)
      {
        v5 = (uint64_t **)(v6 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v9 = v6;
    v6 = operator new(0x30uLL);
    *((_DWORD *)v6 + 8) = 1;
    v6[5] = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v9;
    *v5 = v6;
    v10 = **(_QWORD **)(v2 + 8);
    v11 = v6;
    if (v10)
    {
      *(_QWORD *)(v2 + 8) = v10;
      v11 = *v5;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v11);
    v3 = *(int **)(v2 + 16);
    ++*(_QWORD *)(v2 + 24);
  }
  v6[5] = 0x408F400000000000;
  v12 = v4;
  v13 = v4;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v13 = v3;
        v14 = v3[8];
        if (v14 < 4)
          break;
        v3 = (int *)*v13;
        v12 = (uint64_t **)v13;
        if (!*v13)
          goto LABEL_18;
      }
      if (v14 == 3)
        break;
      v3 = (int *)v13[1];
      if (!v3)
      {
        v12 = (uint64_t **)(v13 + 1);
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    v15 = v13;
    v13 = operator new(0x30uLL);
    *((_DWORD *)v13 + 8) = 3;
    v13[5] = 0;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = v15;
    *v12 = v13;
    v16 = **(_QWORD **)(v2 + 8);
    v17 = v13;
    if (v16)
    {
      *(_QWORD *)(v2 + 8) = v16;
      v17 = *v12;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v17);
    ++*(_QWORD *)(v2 + 24);
  }
  v13[5] = 0x408F400000000000;
  v18 = (int *)*v4;
  v19 = v4;
  v20 = v4;
  if (*v4)
  {
    v21 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        v20 = v21;
        v22 = v21[8];
        if (v22 < 5)
          break;
        v21 = (int *)*v20;
        v19 = (uint64_t **)v20;
        if (!*v20)
          goto LABEL_28;
      }
      if (v22 == 4)
        break;
      v21 = (int *)v20[1];
      if (!v21)
      {
        v19 = (uint64_t **)(v20 + 1);
        goto LABEL_28;
      }
    }
  }
  else
  {
LABEL_28:
    v23 = v20;
    v20 = operator new(0x30uLL);
    *((_DWORD *)v20 + 8) = 4;
    v20[5] = 0;
    *v20 = 0;
    v20[1] = 0;
    v20[2] = v23;
    *v19 = v20;
    v24 = **(_QWORD **)(v2 + 8);
    v25 = v20;
    if (v24)
    {
      *(_QWORD *)(v2 + 8) = v24;
      v25 = *v19;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v25);
    v18 = *(int **)(v2 + 16);
    ++*(_QWORD *)(v2 + 24);
  }
  v20[5] = 0x409F400000000000;
  v26 = v4;
  v27 = v4;
  if (v18)
  {
    while (1)
    {
      while (1)
      {
        v27 = v18;
        v28 = v18[8];
        if (v28 < 10)
          break;
        v18 = (int *)*v27;
        v26 = (uint64_t **)v27;
        if (!*v27)
          goto LABEL_38;
      }
      if (v28 == 9)
        break;
      v18 = (int *)v27[1];
      if (!v18)
      {
        v26 = (uint64_t **)(v27 + 1);
        goto LABEL_38;
      }
    }
  }
  else
  {
LABEL_38:
    v29 = v27;
    v27 = operator new(0x30uLL);
    *((_DWORD *)v27 + 8) = 9;
    v27[5] = 0;
    *v27 = 0;
    v27[1] = 0;
    v27[2] = v29;
    *v26 = v27;
    v30 = **(_QWORD **)(v2 + 8);
    v31 = v27;
    if (v30)
    {
      *(_QWORD *)(v2 + 8) = v30;
      v31 = *v26;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v31);
    ++*(_QWORD *)(v2 + 24);
  }
  v27[5] = 0x40CD4C0000000000;
  v32 = (int *)*v4;
  v33 = v4;
  v34 = v4;
  if (*v4)
  {
    v35 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        v34 = v35;
        v36 = v35[8];
        if (v36 < 7)
          break;
        v35 = (int *)*v34;
        v33 = (uint64_t **)v34;
        if (!*v34)
          goto LABEL_48;
      }
      if (v36 == 6)
        break;
      v35 = (int *)v34[1];
      if (!v35)
      {
        v33 = (uint64_t **)(v34 + 1);
        goto LABEL_48;
      }
    }
  }
  else
  {
LABEL_48:
    v37 = v34;
    v34 = operator new(0x30uLL);
    *((_DWORD *)v34 + 8) = 6;
    v34[5] = 0;
    *v34 = 0;
    v34[1] = 0;
    v34[2] = v37;
    *v33 = v34;
    v38 = **(_QWORD **)(v2 + 8);
    v39 = v34;
    if (v38)
    {
      *(_QWORD *)(v2 + 8) = v38;
      v39 = *v33;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v39);
    v32 = *(int **)(v2 + 16);
    ++*(_QWORD *)(v2 + 24);
  }
  v34[5] = 0x408F400000000000;
  v40 = v4;
  v41 = v4;
  if (v32)
  {
    while (1)
    {
      while (1)
      {
        v41 = v32;
        v42 = v32[8];
        if (v42 < 8)
          break;
        v32 = (int *)*v41;
        v40 = (uint64_t **)v41;
        if (!*v41)
          goto LABEL_58;
      }
      if (v42 == 7)
        break;
      v32 = (int *)v41[1];
      if (!v32)
      {
        v40 = (uint64_t **)(v41 + 1);
        goto LABEL_58;
      }
    }
  }
  else
  {
LABEL_58:
    v43 = v41;
    v41 = operator new(0x30uLL);
    *((_DWORD *)v41 + 8) = 7;
    v41[5] = 0;
    *v41 = 0;
    v41[1] = 0;
    v41[2] = v43;
    *v40 = v41;
    v44 = **(_QWORD **)(v2 + 8);
    v45 = v41;
    if (v44)
    {
      *(_QWORD *)(v2 + 8) = v44;
      v45 = *v40;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v45);
    ++*(_QWORD *)(v2 + 24);
  }
  v41[5] = 0x410D4C0000000000;
  v46 = (int *)*v4;
  v47 = v4;
  v48 = v4;
  if (*v4)
  {
    v49 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        v48 = v49;
        v50 = v49[8];
        if (v50 < 9)
          break;
        v49 = (int *)*v48;
        v47 = (uint64_t **)v48;
        if (!*v48)
          goto LABEL_68;
      }
      if (v50 == 8)
        break;
      v49 = (int *)v48[1];
      if (!v49)
      {
        v47 = (uint64_t **)(v48 + 1);
        goto LABEL_68;
      }
    }
  }
  else
  {
LABEL_68:
    v51 = v48;
    v48 = operator new(0x30uLL);
    *((_DWORD *)v48 + 8) = 8;
    v48[5] = 0;
    *v48 = 0;
    v48[1] = 0;
    v48[2] = v51;
    *v47 = v48;
    v52 = **(_QWORD **)(v2 + 8);
    v53 = v48;
    if (v52)
    {
      *(_QWORD *)(v2 + 8) = v52;
      v53 = *v47;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v53);
    v46 = *(int **)(v2 + 16);
    ++*(_QWORD *)(v2 + 24);
  }
  v48[5] = 0x410D4C0000000000;
  v54 = v4;
  v55 = v4;
  if (v46)
  {
    while (1)
    {
      while (1)
      {
        v55 = v46;
        v56 = v46[8];
        if (v56 < 15)
          break;
        v46 = (int *)*v55;
        v54 = (uint64_t **)v55;
        if (!*v55)
          goto LABEL_78;
      }
      if (v56 == 14)
        break;
      v46 = (int *)v55[1];
      if (!v46)
      {
        v54 = (uint64_t **)(v55 + 1);
        goto LABEL_78;
      }
    }
  }
  else
  {
LABEL_78:
    v57 = v55;
    v55 = operator new(0x30uLL);
    *((_DWORD *)v55 + 8) = 14;
    v55[5] = 0;
    *v55 = 0;
    v55[1] = 0;
    v55[2] = v57;
    *v54 = v55;
    v58 = **(_QWORD **)(v2 + 8);
    v59 = v55;
    if (v58)
    {
      *(_QWORD *)(v2 + 8) = v58;
      v59 = *v54;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v59);
    ++*(_QWORD *)(v2 + 24);
  }
  v55[5] = 0x3FF0000000000000;
  v60 = (int *)*v4;
  v61 = v4;
  v62 = v4;
  if (*v4)
  {
    v63 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        v62 = v63;
        v64 = v63[8];
        if (v64 < 16)
          break;
        v63 = (int *)*v62;
        v61 = (uint64_t **)v62;
        if (!*v62)
          goto LABEL_88;
      }
      if (v64 == 15)
        break;
      v63 = (int *)v62[1];
      if (!v63)
      {
        v61 = (uint64_t **)(v62 + 1);
        goto LABEL_88;
      }
    }
  }
  else
  {
LABEL_88:
    v65 = v62;
    v62 = operator new(0x30uLL);
    *((_DWORD *)v62 + 8) = 15;
    v62[5] = 0;
    *v62 = 0;
    v62[1] = 0;
    v62[2] = v65;
    *v61 = v62;
    v66 = **(_QWORD **)(v2 + 8);
    v67 = v62;
    if (v66)
    {
      *(_QWORD *)(v2 + 8) = v66;
      v67 = *v61;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v67);
    v60 = *(int **)(v2 + 16);
    ++*(_QWORD *)(v2 + 24);
  }
  v62[5] = 0x3FF0000000000000;
  v68 = v4;
  v69 = v4;
  if (v60)
  {
    while (1)
    {
      while (1)
      {
        v69 = v60;
        v70 = v60[8];
        if (v70 < 17)
          break;
        v60 = (int *)*v69;
        v68 = (uint64_t **)v69;
        if (!*v69)
          goto LABEL_98;
      }
      if (v70 == 16)
        break;
      v60 = (int *)v69[1];
      if (!v60)
      {
        v68 = (uint64_t **)(v69 + 1);
        goto LABEL_98;
      }
    }
  }
  else
  {
LABEL_98:
    v71 = v69;
    v69 = operator new(0x30uLL);
    *((_DWORD *)v69 + 8) = 16;
    v69[5] = 0;
    *v69 = 0;
    v69[1] = 0;
    v69[2] = v71;
    *v68 = v69;
    v72 = **(_QWORD **)(v2 + 8);
    v73 = v69;
    if (v72)
    {
      *(_QWORD *)(v2 + 8) = v72;
      v73 = *v68;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v73);
    ++*(_QWORD *)(v2 + 24);
  }
  v69[5] = 0x3FF0000000000000;
  v74 = (int *)*v4;
  v75 = v4;
  v76 = v4;
  if (*v4)
  {
    v77 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        v76 = v77;
        v78 = v77[8];
        if (v78 < 18)
          break;
        v77 = (int *)*v76;
        v75 = (uint64_t **)v76;
        if (!*v76)
          goto LABEL_108;
      }
      if (v78 == 17)
        break;
      v77 = (int *)v76[1];
      if (!v77)
      {
        v75 = (uint64_t **)(v76 + 1);
        goto LABEL_108;
      }
    }
  }
  else
  {
LABEL_108:
    v79 = v76;
    v76 = operator new(0x30uLL);
    *((_DWORD *)v76 + 8) = 17;
    v76[5] = 0;
    *v76 = 0;
    v76[1] = 0;
    v76[2] = v79;
    *v75 = v76;
    v80 = **(_QWORD **)(v2 + 8);
    v81 = v76;
    if (v80)
    {
      *(_QWORD *)(v2 + 8) = v80;
      v81 = *v75;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v81);
    v74 = *(int **)(v2 + 16);
    ++*(_QWORD *)(v2 + 24);
  }
  v76[5] = 0x3FF0000000000000;
  v82 = v4;
  v83 = v4;
  if (v74)
  {
    while (1)
    {
      while (1)
      {
        v83 = v74;
        v84 = v74[8];
        if (v84 < 11)
          break;
        v74 = (int *)*v83;
        v82 = (uint64_t **)v83;
        if (!*v83)
          goto LABEL_118;
      }
      if (v84 == 10)
        break;
      v74 = (int *)v83[1];
      if (!v74)
      {
        v82 = (uint64_t **)(v83 + 1);
        goto LABEL_118;
      }
    }
  }
  else
  {
LABEL_118:
    v85 = v83;
    v83 = operator new(0x30uLL);
    *((_DWORD *)v83 + 8) = 10;
    v83[5] = 0;
    *v83 = 0;
    v83[1] = 0;
    v83[2] = v85;
    *v82 = v83;
    v86 = **(_QWORD **)(v2 + 8);
    v87 = v83;
    if (v86)
    {
      *(_QWORD *)(v2 + 8) = v86;
      v87 = *v82;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v87);
    ++*(_QWORD *)(v2 + 24);
  }
  v83[5] = 0x3FF0000000000000;
  v88 = (int *)*v4;
  v89 = v4;
  v90 = v4;
  if (*v4)
  {
    v91 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        v90 = v91;
        v92 = v91[8];
        if (v92 < 19)
          break;
        v91 = (int *)*v90;
        v89 = (uint64_t **)v90;
        if (!*v90)
          goto LABEL_128;
      }
      if (v92 == 18)
        break;
      v91 = (int *)v90[1];
      if (!v91)
      {
        v89 = (uint64_t **)(v90 + 1);
        goto LABEL_128;
      }
    }
  }
  else
  {
LABEL_128:
    v93 = v90;
    v90 = operator new(0x30uLL);
    *((_DWORD *)v90 + 8) = 18;
    v90[5] = 0;
    *v90 = 0;
    v90[1] = 0;
    v90[2] = v93;
    *v89 = v90;
    v94 = **(_QWORD **)(v2 + 8);
    v95 = v90;
    if (v94)
    {
      *(_QWORD *)(v2 + 8) = v94;
      v95 = *v89;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v95);
    v88 = *(int **)(v2 + 16);
    ++*(_QWORD *)(v2 + 24);
  }
  v90[5] = 0x3FF0000000000000;
  v96 = v4;
  v97 = v4;
  if (v88)
  {
    while (1)
    {
      while (1)
      {
        v97 = v88;
        v98 = v88[8];
        if (v98 < 20)
          break;
        v88 = (int *)*v97;
        v96 = (uint64_t **)v97;
        if (!*v97)
          goto LABEL_138;
      }
      if (v98 == 19)
        break;
      v88 = (int *)v97[1];
      if (!v88)
      {
        v96 = (uint64_t **)(v97 + 1);
        goto LABEL_138;
      }
    }
  }
  else
  {
LABEL_138:
    v99 = v97;
    v97 = operator new(0x30uLL);
    *((_DWORD *)v97 + 8) = 19;
    v97[5] = 0;
    *v97 = 0;
    v97[1] = 0;
    v97[2] = v99;
    *v96 = v97;
    v100 = **(_QWORD **)(v2 + 8);
    v101 = v97;
    if (v100)
    {
      *(_QWORD *)(v2 + 8) = v100;
      v101 = *v96;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v101);
    ++*(_QWORD *)(v2 + 24);
  }
  v97[5] = 0x3FF0000000000000;
  v102 = (int *)*v4;
  v103 = v4;
  v104 = v4;
  if (*v4)
  {
    v105 = (int *)*v4;
    while (1)
    {
      while (1)
      {
        v104 = v105;
        v106 = v105[8];
        if (v106 < 21)
          break;
        v105 = (int *)*v104;
        v103 = (uint64_t **)v104;
        if (!*v104)
          goto LABEL_148;
      }
      if (v106 == 20)
        break;
      v105 = (int *)v104[1];
      if (!v105)
      {
        v103 = (uint64_t **)(v104 + 1);
        goto LABEL_148;
      }
    }
  }
  else
  {
LABEL_148:
    v107 = v104;
    v104 = operator new(0x30uLL);
    *((_DWORD *)v104 + 8) = 20;
    v104[5] = 0;
    *v104 = 0;
    v104[1] = 0;
    v104[2] = v107;
    *v103 = v104;
    v108 = **(_QWORD **)(v2 + 8);
    v109 = v104;
    if (v108)
    {
      *(_QWORD *)(v2 + 8) = v108;
      v109 = *v103;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v109);
    v102 = *(int **)(v2 + 16);
    ++*(_QWORD *)(v2 + 24);
  }
  v104[5] = 0x3FF0000000000000;
  v110 = v4;
  v111 = v4;
  if (v102)
  {
    while (1)
    {
      while (1)
      {
        v111 = v102;
        v112 = v102[8];
        if (v112 < 22)
          break;
        v102 = (int *)*v111;
        v110 = (uint64_t **)v111;
        if (!*v111)
          goto LABEL_158;
      }
      if (v112 == 21)
        break;
      v102 = (int *)v111[1];
      if (!v102)
      {
        v110 = (uint64_t **)(v111 + 1);
        goto LABEL_158;
      }
    }
  }
  else
  {
LABEL_158:
    v113 = v111;
    v111 = operator new(0x30uLL);
    *((_DWORD *)v111 + 8) = 21;
    v111[5] = 0;
    *v111 = 0;
    v111[1] = 0;
    v111[2] = v113;
    *v110 = v111;
    v114 = **(_QWORD **)(v2 + 8);
    v115 = v111;
    if (v114)
    {
      *(_QWORD *)(v2 + 8) = v114;
      v115 = *v110;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v115);
    ++*(_QWORD *)(v2 + 24);
  }
  v111[5] = 0x3FF0000000000000;
  v116 = (int *)*v4;
  v117 = v4;
  if (*v4)
  {
    while (1)
    {
      while (1)
      {
        v117 = v116;
        v118 = v116[8];
        if (v118 < 23)
          break;
        v116 = (int *)*v117;
        v4 = (uint64_t **)v117;
        if (!*v117)
          goto LABEL_168;
      }
      if (v118 == 22)
        break;
      v116 = (int *)v117[1];
      if (!v116)
      {
        v4 = (uint64_t **)(v117 + 1);
        goto LABEL_168;
      }
    }
  }
  else
  {
LABEL_168:
    v119 = v117;
    v117 = operator new(0x30uLL);
    *((_DWORD *)v117 + 8) = 22;
    v117[5] = 0;
    *v117 = 0;
    v117[1] = 0;
    v117[2] = v119;
    *v4 = v117;
    v120 = **(_QWORD **)(v2 + 8);
    v121 = v117;
    if (v120)
    {
      *(_QWORD *)(v2 + 8) = v120;
      v121 = *v4;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v121);
    ++*(_QWORD *)(v2 + 24);
  }
  v117[5] = 0x4024000000000000;
  return this;
}

uint64_t BBUEUR10Programmer::connectForImage_nl(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  size_t v26;
  size_t v27;
  _QWORD *v28;
  int HardwareConfig;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char Product;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void *v40;
  const char *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void **p_p;
  char v57;
  _QWORD __dst[2];
  int64_t v59;
  void *__p;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v65 = 256;
  v64 = 0;
  v63 = 0;
  __p = 0;
  v61 = 0;
  v62 = 0;
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v75 = v10;
  v76 = v10;
  v73 = v10;
  v74 = v10;
  v71 = v10;
  v72 = v10;
  v69 = v10;
  v70 = v10;
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0 && gBBULogVerbosity >= 1)
    _BBULog(13, 1, "BBUProgrammer", "", "Waiting for Hello\n", a6, a7, a8, v57);
  if ((ETLSAHCommandReceive() & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v20 = 3;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_91;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v20 = 3;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_91;
    }
    if (gBBULogVerbosity < 0)
      goto LABEL_91;
    v21 = "failed receiving sahara hello\n";
    goto LABEL_20;
  }
  if ((ETLSAHCommandParseHello() & 1) != 0)
  {
    if (*(_DWORD *)(a1 + 4284) == 2)
      v17 = 2;
    else
      v17 = v65;
    *a2 = v17;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_27;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_27;
    }
    if (gBBULogVerbosity >= 3)
    {
      v18 = *(int *)(a1 + 4284);
      if (v18 > 2)
        v19 = "Unknown";
      else
        v19 = off_24CE841F8[v18];
      ETLSAHModeAsString();
      ETLSAHModeAsString();
      _BBULog(13, 3, "BBUProgrammer", "", "\n Boot mode => Requested : %s, Received : %s, Override : %s\n", v22, v23, v24, (char)v19);
    }
LABEL_27:
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v25 = (const char *)(a1 + 4304);
    if (*(char *)(a1 + 4327) < 0)
    {
      if (*(_QWORD *)(a1 + 4312))
      {
        v25 = *(const char **)v25;
        v26 = strlen(v25);
        if (v26 < 0x7FFFFFFFFFFFFFF8)
        {
LABEL_30:
          v27 = v26;
          if (v26 >= 0x17)
          {
            v37 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v26 | 7) != 0x17)
              v37 = v26 | 7;
            v38 = v37 + 1;
            v28 = operator new(v37 + 1);
            __dst[1] = v27;
            v59 = v38 | 0x8000000000000000;
            __dst[0] = v28;
          }
          else
          {
            HIBYTE(v59) = v26;
            v28 = __dst;
            if (!v26)
              goto LABEL_44;
          }
          memmove(v28, v25, v27);
LABEL_44:
          *((_BYTE *)v28 + v27) = 0;
          v39 = SHIBYTE(v59);
          v40 = (void *)__dst[0];
          if (v59 >= 0)
            v41 = (const char *)__dst;
          else
            v41 = (const char *)__dst[0];
          v42 = strtoul(v41, 0, 16);
          if (v39 < 0)
            operator delete(v40);
          LODWORD(v66) = v42;
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
              goto LABEL_53;
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
              goto LABEL_53;
          }
          if (gBBULogVerbosity >= 1)
            _BBULog(13, 1, "BBUProgrammer", "", "Overriding Product Type : %u and Hardware Config: 0x%x in Reserved %zu\n", v30, v31, v32, v42);
          goto LABEL_53;
        }
LABEL_35:
        std::string::__throw_length_error[abi:ne180100]();
      }
    }
    else if (*(_BYTE *)(a1 + 4327))
    {
      v26 = strlen((const char *)(a1 + 4304));
      if (v26 < 0x7FFFFFFFFFFFFFF8)
        goto LABEL_30;
      goto LABEL_35;
    }
    HardwareConfig = TelephonyRadiosGetHardwareConfig();
    LODWORD(v66) = TelephonyRadiosGetProduct() | (HardwareConfig << 30);
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_53;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_53;
    }
    if (gBBULogVerbosity >= 1)
    {
      Product = TelephonyRadiosGetProduct();
      TelephonyRadiosGetHardwareConfig();
      _BBULog(13, 1, "BBUProgrammer", "", "Product Type : %d and Hardware Config: 0x%x in Reserved%lu\n", v34, v35, v36, Product);
    }
LABEL_53:
    if (!*(_BYTE *)(a1 + 4302))
      goto LABEL_58;
    HIDWORD(v66) |= 1u;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_58;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_58;
    }
    if (gBBULogVerbosity >= 1)
      _BBULog(13, 1, "BBUProgrammer", "", "Sending Erase BB EEPROM in Reserved%lu\n", v30, v31, v32, 1);
LABEL_58:
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
    {
      if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
        goto LABEL_60;
    }
    else
    {
      dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
      if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
      {
LABEL_60:
        if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)
          goto LABEL_62;
LABEL_61:
        if (!*(_BYTE *)(a1 + 4303))
          goto LABEL_66;
LABEL_62:
        LODWORD(v67) = 1381192786;
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
            goto LABEL_66;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
            goto LABEL_66;
        }
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(13, 0, "BBUProgrammer", "", "Sending restore mode cookie in Reserved%lu\n", v30, v31, v32, 2);
LABEL_66:
        if ((ETLSAHCommandCreateHelloResponseExt() & 1) != 0)
        {
          if ((ETLSAHCommandSend() & 1) != 0)
          {
            if (gBBULogMaskGet(void)::once == -1)
            {
              if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
                goto LABEL_73;
            }
            else
            {
              dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
              if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
                goto LABEL_73;
            }
            if (gBBULogVerbosity >= 1)
            {
              v46 = ETLSAHModeAsString();
              _BBULog(13, 1, "BBUProgrammer", "", "Hello received boot mode:  %s\n", v47, v48, v49, v46);
              if (gBBULogMaskGet(void)::once != -1)
              {
                dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
                if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
                {
LABEL_74:
                  if (gBBULogVerbosity >= 1)
                  {
                    v50 = ETLSAHModeAsString();
                    _BBULog(13, 1, "BBUProgrammer", "", "Hello response boot mode:  %s\n", v51, v52, v53, v50);
                  }
                }
LABEL_76:
                v54 = HIBYTE(v62);
                if (v62 < 0)
                  v54 = v61;
                if (!v54)
                {
LABEL_85:
                  v20 = 0;
                  goto LABEL_91;
                }
                if (gBBULogMaskGet(void)::once == -1)
                {
                  v20 = 0;
                  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
                    goto LABEL_91;
                  goto LABEL_81;
                }
                dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
                v20 = 0;
                if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
                {
LABEL_81:
                  if (gBBULogVerbosity < 1)
                    goto LABEL_91;
                  p_p = &__p;
                  if (v62 < 0)
                    LOBYTE(p_p) = (_BYTE)__p;
                  _BBULog(13, 1, "BBUProgrammer", "", "Hello reserved fields:  %s\n", v11, v12, v13, (char)p_p);
                  goto LABEL_85;
                }
                goto LABEL_91;
              }
            }
LABEL_73:
            if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
              goto LABEL_74;
            goto LABEL_76;
          }
          if (gBBULogMaskGet(void)::once == -1)
          {
            v20 = 3;
            if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
              goto LABEL_91;
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            v20 = 3;
            if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
              goto LABEL_91;
          }
          if (gBBULogVerbosity < 0)
            goto LABEL_91;
          v21 = "failed sending hello response\n";
LABEL_20:
          _BBULog(13, 0, "BBUProgrammer", "", v21, v11, v12, v13, v57);
          goto LABEL_91;
        }
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
            goto LABEL_88;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) != 0)
          {
LABEL_88:
            if ((gBBULogVerbosity & 0x80000000) == 0)
              _BBULog(13, 0, "BBUProgrammer", "", "failed creating hello response\n", v43, v44, v45, v57);
          }
        }
        v20 = 11;
        goto LABEL_91;
      }
    }
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
    if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)
      goto LABEL_62;
    goto LABEL_61;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    v20 = 12;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      goto LABEL_91;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v20 = 12;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
      goto LABEL_91;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(13, 0, "BBUProgrammer", "", "failed parsing sahara hello\n", v14, v15, v16, v57);
LABEL_91:
  if (SHIBYTE(v62) < 0)
    operator delete(__p);
  return v20;
}

void sub_212B10B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BBUEUR10Programmer::disconnectForImage_nl(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char done;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  char v19;

  BBUFeedback::handleBeginQuickStep(*(BBUFeedback **)(a1 + 8), "Disconnecting");
  if ((ETLSAHCommandCreateDone() & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v16 = 11;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_23;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v16 = 11;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_23;
    }
    if (gBBULogVerbosity < 0)
      goto LABEL_23;
    v17 = "failed creating done command\n";
LABEL_22:
    _BBULog(13, 0, "BBUProgrammer", "", v17, v4, v5, v6, v19);
    goto LABEL_23;
  }
  if ((ETLSAHCommandSend() & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v16 = 3;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_23;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v16 = 3;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_23;
    }
    if (gBBULogVerbosity < 0)
      goto LABEL_23;
    v17 = "failed sending done command\n";
    goto LABEL_22;
  }
  if ((ETLSAHCommandReceive() & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v16 = 3;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_23;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v16 = 3;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_23;
    }
    if (gBBULogVerbosity < 0)
      goto LABEL_23;
    v17 = "failed receiving done response\n";
    goto LABEL_22;
  }
  done = ETLSAHCommandParseDoneResponse();
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v11 = (gBBULogVerbosity >= 0) & (*(unsigned __int8 *)(gBBULogMaskGet(void)::sBBULogMask + 1) >> 5);
  if ((done & 1) != 0)
  {
    if (v11)
    {
      v12 = ETLSAHModeAsString();
      _BBULog(13, 0, "BBUProgrammer", "", "status is %s\n", v13, v14, v15, v12);
    }
    v16 = 0;
    *a2 = 256;
  }
  else
  {
    if (v11)
      _BBULog(13, 0, "BBUProgrammer", "", "failed parsing done response\n", v7, v8, v9, v19);
    v16 = 11;
  }
LABEL_23:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v16);
  return v16;
}

uint64_t BBUEUR10Programmer::load(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  int v23;
  int v24;

  v4 = (pthread_mutex_t *)(a1 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  BBUFeedback::handleBeginPhase(*(BBUFeedback **)(a1 + 8), "Sending Loader");
  if (*(_BYTE *)(a1 + 32))
  {
    v11 = BBUProgrammer::addItemsFromList(a1, a2);
    if ((_DWORD)v11)
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
          goto LABEL_26;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
          goto LABEL_26;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
        _BBULog(13, 0, "BBUProgrammer", "", "failed adding loader item to programmer list\n", v8, v9, v10, v22);
    }
    else
    {
      v24 = 256;
      v11 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 184))(a1, &v24);
      if ((_DWORD)v11)
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
            goto LABEL_26;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
            goto LABEL_26;
        }
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(13, 0, "BBUProgrammer", "", "failed connecting to sahara for pushing secondary loader\n", v12, v13, v14, v22);
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 224))(a1, a1 + 40);
        if ((_DWORD)v11)
        {
          if (gBBULogMaskGet(void)::once == -1)
          {
            if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
              goto LABEL_26;
          }
          else
          {
            dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
            if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
              goto LABEL_26;
          }
          if ((gBBULogVerbosity & 0x80000000) == 0)
            _BBULog(13, 0, "BBUProgrammer", "", "failed sending secondary loader\n", v15, v16, v17, v22);
        }
        else
        {
          v23 = 256;
          v11 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 248))(a1, &v23);
          if ((_DWORD)v11)
          {
            if (gBBULogMaskGet(void)::once == -1)
            {
              if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
                goto LABEL_26;
            }
            else
            {
              dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
              if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
                goto LABEL_26;
            }
            if ((gBBULogVerbosity & 0x80000000) == 0)
              _BBULog(5, 0, "BBUProgrammer", "", "Failed disconnecting after pushing secondary loader\n", v18, v19, v20, v22);
          }
        }
      }
    }
  }
  else
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v11 = 74;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_26;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v11 = 74;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_26;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
      _BBULog(13, 0, "BBUProgrammer", "", "not connected to programmer\n", v5, v6, v7, v22);
  }
LABEL_26:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v11);
  pthread_mutex_unlock(v4);
  return v11;
}

void sub_212B1120C(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10Programmer::processItems(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *size;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BBUError *v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  NSObject *v47;
  std::__shared_weak_count_vtbl *v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  NSObject *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count_vtbl *v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  NSObject *v71;
  unint64_t *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count_vtbl *v78;
  __int128 v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  NSObject *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  char v95;
  pthread_mutex_t *v96;
  int v97;
  void *__p;
  __int128 v99;
  uint64_t v100;
  void *v101;
  std::string v102;
  void *v103;
  uint64_t v104;
  void **p_p;
  int v106;
  std::string *v107;
  NSObject *block;
  uint64_t v109;
  _QWORD *(*v110)(uint64_t);
  void *v111;
  uint64_t v112;
  std::string **v113;

  v96 = (pthread_mutex_t *)(a1 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  BBUFeedback::handleBeginPhase(*(BBUFeedback **)(a1 + 8), "Sending Images");
  if (!*(_BYTE *)(a1 + 32))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_8;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_8;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
      _BBULog(13, 0, "BBUProgrammer", "", "not connected to programmer\n", v6, v7, v8, v95);
LABEL_8:
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    v10 = qword_253D31DC8;
    if (!qword_253D31DC8)
    {
      v11 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
      block = 0;
      ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v11, "BBUError", QOS_CLASS_UTILITY, &block);
      if (block)
        dispatch_release(block);
      v11->__on_zero_shared_weak = 0;
      v11[1].~__shared_weak_count = 0;
      v11[1].~__shared_weak_count_0 = 0;
      std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&v102, v11);
      v12 = *(_OWORD *)&v102.__r_.__value_.__l.__data_;
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = 0uLL;
      v13 = (std::__shared_weak_count *)off_253D31DD0;
      *(_OWORD *)&qword_253D31DC8 = v12;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      size = (std::__shared_weak_count *)v102.__r_.__value_.__l.__size_;
      if (v102.__r_.__value_.__l.__size_)
      {
        v17 = (unint64_t *)(v102.__r_.__value_.__l.__size_ + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v10 = qword_253D31DC8;
    }
    v19 = (std::__shared_weak_count *)off_253D31DD0;
    v100 = v10;
    v101 = off_253D31DD0;
    if (off_253D31DD0)
    {
      v20 = (unint64_t *)((char *)off_253D31DD0 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    __p = operator new(0x20uLL);
    v99 = xmmword_212B52FF0;
    strcpy((char *)__p, "not connected to programmer\n");
    v102.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
    v102.__r_.__value_.__l.__size_ = 0x40000000;
    v102.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
    v103 = &__block_descriptor_tmp_6;
    v104 = v10;
    p_p = &__p;
    v106 = 12;
    v107 = &v102;
    block = MEMORY[0x24BDAC760];
    v109 = 0x40000000;
    v110 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    v111 = &__block_descriptor_tmp_10;
    v112 = v10;
    v113 = &v107;
    v22 = *(NSObject **)(v10 + 16);
    if (*(_QWORD *)(v10 + 24))
    {
      dispatch_async_and_wait(v22, &block);
      if ((SHIBYTE(v99) & 0x80000000) == 0)
        goto LABEL_28;
    }
    else
    {
      dispatch_sync(v22, &block);
      if ((SHIBYTE(v99) & 0x80000000) == 0)
      {
LABEL_28:
        if (v19)
        {
          v23 = (unint64_t *)&v19->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v25 = 74;
        goto LABEL_187;
      }
    }
    operator delete(__p);
    goto LABEL_28;
  }
  v9 = MEMORY[0x24BDAC760];
  v97 = 256;
  if ((a4 & 1) != 0)
    goto LABEL_47;
  while (2)
  {
    v25 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 184))(a1, &v97);
    if ((_DWORD)v25)
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
          goto LABEL_44;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
          goto LABEL_44;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
        _BBULog(13, 0, "BBUProgrammer", "", "failed connecting to sahara\n", v26, v27, v28, v95);
LABEL_44:
      pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
      v29 = qword_253D31DC8;
      if (qword_253D31DC8)
      {
        v30 = (std::__shared_weak_count *)off_253D31DD0;
        v100 = qword_253D31DC8;
        v101 = off_253D31DD0;
        if (!off_253D31DD0)
          goto LABEL_93;
      }
      else
      {
        v48 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
        block = 0;
        ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v48, "BBUError", QOS_CLASS_UTILITY, &block);
        if (block)
          dispatch_release(block);
        v48->__on_zero_shared_weak = 0;
        v48[1].~__shared_weak_count = 0;
        v48[1].~__shared_weak_count_0 = 0;
        std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&v102, v48);
        v49 = *(_OWORD *)&v102.__r_.__value_.__l.__data_;
        *(_OWORD *)&v102.__r_.__value_.__l.__data_ = 0uLL;
        v50 = (std::__shared_weak_count *)off_253D31DD0;
        *(_OWORD *)&qword_253D31DC8 = v49;
        if (v50)
        {
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v53 = (std::__shared_weak_count *)v102.__r_.__value_.__l.__size_;
        if (v102.__r_.__value_.__l.__size_)
        {
          v54 = (unint64_t *)(v102.__r_.__value_.__l.__size_ + 8);
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v29 = qword_253D31DC8;
        v30 = (std::__shared_weak_count *)off_253D31DD0;
        v100 = qword_253D31DC8;
        v101 = off_253D31DD0;
        if (!off_253D31DD0)
        {
LABEL_93:
          pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
          __p = operator new(0x20uLL);
          v99 = xmmword_212B52FF0;
          strcpy((char *)__p, "failed connecting to sahara\n");
          v102.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
          v102.__r_.__value_.__l.__size_ = 0x40000000;
          v102.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
          v103 = &__block_descriptor_tmp_6;
          v104 = v29;
          p_p = &__p;
          v106 = 12;
          v107 = &v102;
          block = v9;
          v109 = 0x40000000;
          v110 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
          v111 = &__block_descriptor_tmp_10;
          v112 = v29;
          v113 = &v107;
          v58 = *(NSObject **)(v29 + 16);
          if (*(_QWORD *)(v29 + 24))
          {
            dispatch_async_and_wait(v58, &block);
            if ((SHIBYTE(v99) & 0x80000000) == 0)
            {
LABEL_96:
              if (!v30)
                goto LABEL_123;
              v59 = (unint64_t *)&v30->__shared_owners_;
              do
                v60 = __ldaxr(v59);
              while (__stlxr(v60 - 1, v59));
              goto LABEL_121;
            }
          }
          else
          {
            dispatch_sync(v58, &block);
            if ((SHIBYTE(v99) & 0x80000000) == 0)
              goto LABEL_96;
          }
          operator delete(__p);
          goto LABEL_96;
        }
      }
      v56 = (unint64_t *)&v30->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
      goto LABEL_93;
    }
LABEL_47:
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
    if (!(_DWORD)v25)
    {
      if (v97 == 3)
        goto LABEL_124;
      v25 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 248))(a1, &v97);
      if (!(_DWORD)v25)
        goto LABEL_129;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
          goto LABEL_59;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
        {
LABEL_59:
          if ((gBBULogVerbosity & 0x80000000) == 0)
            _BBULog(5, 0, "BBUProgrammer", "", "Failed disconnecting for image\n", v31, v32, v33, v95);
        }
      }
      pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
      v35 = qword_253D31DC8;
      if (!qword_253D31DC8)
      {
        v36 = (BBUError *)operator new(0x38uLL);
        BBUError::BBUError(v36);
        std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&v102, (std::__shared_weak_count_vtbl *)v36);
        v37 = *(_OWORD *)&v102.__r_.__value_.__l.__data_;
        *(_OWORD *)&v102.__r_.__value_.__l.__data_ = 0uLL;
        v38 = (std::__shared_weak_count *)off_253D31DD0;
        *(_OWORD *)&qword_253D31DC8 = v37;
        if (v38)
        {
          v39 = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v41 = (std::__shared_weak_count *)v102.__r_.__value_.__l.__size_;
        if (v102.__r_.__value_.__l.__size_)
        {
          v42 = (unint64_t *)(v102.__r_.__value_.__l.__size_ + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v35 = qword_253D31DC8;
      }
      v44 = (std::__shared_weak_count *)off_253D31DD0;
      v100 = v35;
      v101 = off_253D31DD0;
      if (off_253D31DD0)
      {
        v45 = (unint64_t *)((char *)off_253D31DD0 + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
      __p = operator new(0x20uLL);
      v99 = xmmword_212B53030;
      strcpy((char *)__p, "Failed disconnecting for image\n");
      v102.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
      v102.__r_.__value_.__l.__size_ = 0x40000000;
      v102.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
      v103 = &__block_descriptor_tmp_6;
      v104 = v35;
      p_p = &__p;
      v106 = 12;
      v107 = &v102;
      block = v9;
      v109 = 0x40000000;
      v110 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
      v111 = &__block_descriptor_tmp_10;
      v112 = v35;
      v113 = &v107;
      v47 = *(NSObject **)(v35 + 16);
      if (*(_QWORD *)(v35 + 24))
        dispatch_async_and_wait(v47, &block);
      else
        dispatch_sync(v47, &block);
      if (SHIBYTE(v99) < 0)
        operator delete(__p);
      if (v44)
      {
        v92 = (unint64_t *)&v44->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
LABEL_185:
      if ((_DWORD)v25 != 7 && (_DWORD)v25 != 28)
        goto LABEL_187;
      goto LABEL_190;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_52;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        goto LABEL_52;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
      _BBULog(13, 0, "BBUProgrammer", "", "failed handling sahara mode operation\n", v31, v32, v33, v95);
LABEL_52:
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    v34 = qword_253D31DC8;
    if (qword_253D31DC8)
    {
      v30 = (std::__shared_weak_count *)off_253D31DD0;
      v100 = qword_253D31DC8;
      v101 = off_253D31DD0;
      if (!off_253D31DD0)
        goto LABEL_115;
LABEL_113:
      v69 = (unint64_t *)&v30->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
      goto LABEL_115;
    }
    v61 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
    block = 0;
    ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v61, "BBUError", QOS_CLASS_UTILITY, &block);
    if (block)
      dispatch_release(block);
    v61->__on_zero_shared_weak = 0;
    v61[1].~__shared_weak_count = 0;
    v61[1].~__shared_weak_count_0 = 0;
    std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&v102, v61);
    v62 = *(_OWORD *)&v102.__r_.__value_.__l.__data_;
    *(_OWORD *)&v102.__r_.__value_.__l.__data_ = 0uLL;
    v63 = (std::__shared_weak_count *)off_253D31DD0;
    *(_OWORD *)&qword_253D31DC8 = v62;
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = (std::__shared_weak_count *)v102.__r_.__value_.__l.__size_;
    if (v102.__r_.__value_.__l.__size_)
    {
      v67 = (unint64_t *)(v102.__r_.__value_.__l.__size_ + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v34 = qword_253D31DC8;
    v30 = (std::__shared_weak_count *)off_253D31DD0;
    v100 = qword_253D31DC8;
    v101 = off_253D31DD0;
    if (off_253D31DD0)
      goto LABEL_113;
LABEL_115:
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    __p = operator new(0x28uLL);
    v99 = xmmword_212B55600;
    strcpy((char *)__p, "failed handling sahara mode operation\n");
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    v102.__r_.__value_.__l.__size_ = 0x40000000;
    v102.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
    v103 = &__block_descriptor_tmp_6;
    v104 = v34;
    p_p = &__p;
    v106 = 12;
    v107 = &v102;
    block = v9;
    v109 = 0x40000000;
    v110 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    v111 = &__block_descriptor_tmp_10;
    v112 = v34;
    v113 = &v107;
    v71 = *(NSObject **)(v34 + 16);
    if (!*(_QWORD *)(v34 + 24))
    {
      dispatch_sync(v71, &block);
      if ((SHIBYTE(v99) & 0x80000000) == 0)
        goto LABEL_118;
LABEL_117:
      operator delete(__p);
      goto LABEL_118;
    }
    dispatch_async_and_wait(v71, &block);
    if (SHIBYTE(v99) < 0)
      goto LABEL_117;
LABEL_118:
    if (!v30)
      goto LABEL_123;
    v72 = (unint64_t *)&v30->__shared_owners_;
    do
      v60 = __ldaxr(v72);
    while (__stlxr(v60 - 1, v72));
LABEL_121:
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
LABEL_123:
    if (v97 != 3)
      goto LABEL_185;
LABEL_124:
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
        goto LABEL_126;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
      {
LABEL_126:
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(5, 0, "BBUProgrammer", "", "not performing disconnect as the previous mode was CommandMode\n", v31, v32, v33, v95);
      }
    }
    if ((_DWORD)v25)
      goto LABEL_185;
LABEL_129:
    switch(v97)
    {
      case 0:
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
            goto LABEL_135;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
            goto LABEL_135;
        }
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(5, 0, "BBUProgrammer", "", "Next image requested\n", v31, v32, v33, v95);
        goto LABEL_135;
      case 1:
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
            goto LABEL_136;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
            goto LABEL_136;
        }
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(5, 0, "BBUProgrammer", "", "All images transferred\n", v31, v32, v33, v95);
        goto LABEL_136;
      case 2:
        goto LABEL_136;
      case 3:
        goto LABEL_135;
      default:
        if (v97 == 256)
        {
LABEL_135:
          if ((a4 & 1) != 0)
          {
LABEL_136:
            v25 = 0;
            goto LABEL_190;
          }
          v97 = 256;
          continue;
        }
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
          {
LABEL_147:
            if ((gBBULogVerbosity & 0x80000000) == 0)
            {
              v73 = v97;
              ETLSAHModeAsString();
              _BBULog(5, 0, "BBUProgrammer", "", "unexpected hello disconnect mode %u, %s\n", v74, v75, v76, v73);
            }
          }
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
            goto LABEL_147;
        }
        pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        v77 = qword_253D31DC8;
        if (!qword_253D31DC8)
        {
          v78 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
          block = 0;
          ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v78, "BBUError", QOS_CLASS_UTILITY, &block);
          if (block)
            dispatch_release(block);
          v78->__on_zero_shared_weak = 0;
          v78[1].~__shared_weak_count = 0;
          v78[1].~__shared_weak_count_0 = 0;
          std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&v102, v78);
          v79 = *(_OWORD *)&v102.__r_.__value_.__l.__data_;
          *(_OWORD *)&v102.__r_.__value_.__l.__data_ = 0uLL;
          v80 = (std::__shared_weak_count *)off_253D31DD0;
          *(_OWORD *)&qword_253D31DC8 = v79;
          if (v80)
          {
            v81 = (unint64_t *)&v80->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          v83 = (std::__shared_weak_count *)v102.__r_.__value_.__l.__size_;
          if (v102.__r_.__value_.__l.__size_)
          {
            v84 = (unint64_t *)(v102.__r_.__value_.__l.__size_ + 8);
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (!v85)
            {
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
            }
          }
          v77 = qword_253D31DC8;
        }
        v86 = (std::__shared_weak_count *)off_253D31DD0;
        v100 = v77;
        v101 = off_253D31DD0;
        if (off_253D31DD0)
        {
          v87 = (unint64_t *)((char *)off_253D31DD0 + 8);
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
        }
        pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        __p = operator new(0x28uLL);
        v99 = xmmword_212B55040;
        strcpy((char *)__p, "Unexpected hello disconnect mode\n");
        v102.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
        v102.__r_.__value_.__l.__size_ = 0x40000000;
        v102.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
        v103 = &__block_descriptor_tmp_6;
        v104 = v77;
        p_p = &__p;
        v106 = 12;
        v107 = &v102;
        block = v9;
        v109 = 0x40000000;
        v110 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
        v111 = &__block_descriptor_tmp_10;
        v112 = v77;
        v113 = &v107;
        v89 = *(NSObject **)(v77 + 16);
        if (*(_QWORD *)(v77 + 24))
        {
          dispatch_async_and_wait(v89, &block);
          if (SHIBYTE(v99) < 0)
            goto LABEL_168;
        }
        else
        {
          dispatch_sync(v89, &block);
          if (SHIBYTE(v99) < 0)
LABEL_168:
            operator delete(__p);
        }
        if (v86)
        {
          v90 = (unint64_t *)&v86->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        v25 = 12;
LABEL_187:
        v102.__r_.__value_.__s.__data_[15] = -86;
        v102.__r_.__value_.__r.__words[2] = 0xEAAAAAAAAAAAAAALL;
        strcpy((char *)&v102, "Hit an error. ");
        if (a4)
        {
          std::string::append(&v102, "Proceed for core dumps?", 0x17uLL);
          if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v102.__r_.__value_.__l.__data_);
        }
LABEL_190:
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v25);
        pthread_mutex_unlock(v96);
        return v25;
    }
  }
}

void sub_212B121C0()
{
  void *v0;

  operator delete(v0);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  JUMPOUT(0x212B122D8);
}

void sub_212B12238(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  JUMPOUT(0x212B122D8);
}

void sub_212B12250()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;

  v2 = *(NSObject **)(v1 - 144);
  if (v2)
    dispatch_release(v2);
  operator delete(v0);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  JUMPOUT(0x212B122D8);
}

void sub_212B122D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, pthread_mutex_t *a11)
{
  pthread_mutex_unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10Programmer::handleSaharaMode_nl(_DWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v11;
  BOOL v13;
  uint64_t Nonce_nl;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;

  v11 = a2;
  if ((_DWORD)a4)
  {
    v13 = a2 == 2;
    if (a2 >= 2)
      goto LABEL_3;
LABEL_12:
    v18 = (*(uint64_t (**)(_DWORD *, _DWORD *))(*(_QWORD *)a1 + 224))(a1, a1 + 10);
    if ((_DWORD)v18)
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
          return v18;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
          return v18;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        v19 = "failed sending image\n";
        goto LABEL_33;
      }
    }
    return v18;
  }
  a4 = (a1[1070] - 8);
  v13 = a2 == 2;
  if (a2 < 2)
    goto LABEL_12;
LABEL_3:
  if (v13)
    return 28;
  if (a2 != 256)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v18 = 12;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
        return v18;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v18 = 12;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
        return v18;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      ETLSAHModeAsString();
      _BBULog(5, 0, "BBUProgrammer", "", "unexpected hello start mode %u, %s\n", v20, v21, v22, v11);
    }
    return v18;
  }
  if ((a5 & 1) != 0)
  {
LABEL_23:
    v23 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, a3, a4, a6, 0, a5, a7);
    if ((_DWORD)v23)
    {
      v18 = v23;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
          return v18;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
          return v18;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        v19 = "failed handling sahara send hashes command\n";
        goto LABEL_33;
      }
    }
    else
    {
      v18 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 200))(a1);
      if ((_DWORD)v18)
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
            return v18;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
            return v18;
        }
        if ((gBBULogVerbosity & 0x80000000) == 0)
        {
          v19 = "failed handling maverick end\n";
          goto LABEL_33;
        }
      }
    }
    return v18;
  }
  Nonce_nl = BBUEUR4Programmer::handleMaverickGetNonce_nl((uint64_t)a1, 0);
  if (!(_DWORD)Nonce_nl)
  {
    a4 = 0;
    goto LABEL_23;
  }
  v18 = Nonce_nl;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
      return v18;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
      return v18;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v19 = "failed getting nonce\n";
LABEL_33:
    _BBULog(5, 0, "BBUProgrammer", "", v19, v15, v16, v17, v25);
  }
  return v18;
}

uint64_t BBUEUR10Programmer::sendImageInternal_nl(BBUFeedback **a1, uint64_t a2)
{
  double Current;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  const std::string::value_type *v20;
  int v21;
  BBUFeedback *v22;
  int v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CFAbsoluteTime v38;
  char v40;
  std::string::value_type __s[8];
  char v42;
  std::string v43;
  std::string v44;
  void *__p[2];
  std::string::size_type v46;
  std::string v47;
  char v48;
  uint64_t v49;
  uint64_t v50;

  Current = CFAbsoluteTimeGetCurrent();
  v5 = operator new[](0x100000uLL);
  v49 = 0;
  v50 = 0;
  v48 = 0;
  if ((*((unsigned int (**)(BBUFeedback **, void *, uint64_t, char *, uint64_t *, uint64_t *, char *))*a1 + 29))(a1, v5, 0x100000, (char *)&v50 + 4, &v50, &v49, &v48))
  {
    v9 = HIDWORD(v50);
    v10 = a2;
    while (1)
    {
      v10 = *(_QWORD *)(v10 + 8);
      if (v10 == a2)
        break;
      v11 = *(void **)(v10 + 16);
      if (v11)
      if (*((_DWORD *)v11 + 6) == v9)
      {
        v16 = *((_QWORD *)v11 + 2);
        v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
        v47.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
        v47.__r_.__value_.__r.__words[2] = 0x7AAAAAAAAAAAAAALL;
        strcpy((char *)&v47, "unknown");
        v20 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        std::string::__assign_external(&v47, v20);
        v12 = 0;
        v15 = 1;
        v18 = HIDWORD(v50);
        if (SHIDWORD(v50) > 1128352767)
          goto LABEL_17;
        goto LABEL_25;
      }
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      v12 = 15;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
        goto LABEL_16;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v12 = 15;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
        goto LABEL_16;
    }
    if (gBBULogVerbosity < 0)
      goto LABEL_16;
    v13 = "item not found in item list\n";
    v14 = 0;
LABEL_15:
    _BBULog(5, v14, "BBUProgrammer", "", v13, v6, v7, v8, v40);
    goto LABEL_16;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    v12 = 12;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_9;
  }
  dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v12 = 12;
  if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
  {
LABEL_9:
    if (gBBULogVerbosity < 1)
      goto LABEL_16;
    v13 = "failed receiving next segment request\n";
    v14 = 1;
    goto LABEL_15;
  }
LABEL_16:
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v47.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  v47.__r_.__value_.__r.__words[2] = 0x7AAAAAAAAAAAAAALL;
  strcpy((char *)&v47, "unknown");
  v18 = HIDWORD(v50);
  if (SHIDWORD(v50) <= 1128352767)
  {
LABEL_25:
    switch(v18)
    {
      case 16408:
        v19 = 23;
        break;
      case 16409:
        v19 = 24;
        break;
      case 16410:
        v19 = 25;
        break;
      case 16411:
        v19 = 26;
        break;
      case 16412:
        v19 = 27;
        break;
      case 16413:
        v19 = 28;
        break;
      case 16414:
        v19 = 29;
        break;
      case 16415:
        v19 = 30;
        break;
      case 16416:
        v19 = 31;
        break;
      case 16417:
        v19 = 32;
        break;
      case 16418:
        v19 = 33;
        break;
      default:
        v21 = v18 - 6;
        v19 = 3;
        switch(v21)
        {
          case 0:
            v19 = 9;
            goto LABEL_31;
          case 2:
            v19 = 7;
            goto LABEL_31;
          case 10:
            v19 = 15;
            goto LABEL_31;
          case 15:
            v19 = 1;
            goto LABEL_31;
          case 17:
            goto LABEL_31;
          case 22:
            v19 = 8;
            goto LABEL_31;
          case 23:
            v19 = 10;
            goto LABEL_31;
          case 24:
            v19 = 14;
            goto LABEL_31;
          case 25:
            v19 = 11;
            goto LABEL_31;
          default:
            goto LABEL_78;
        }
    }
    goto LABEL_31;
  }
LABEL_17:
  if (v18 > 1346454271)
  {
    if (v18 == 1346454272)
    {
      v19 = 20;
      goto LABEL_31;
    }
    if (v18 == 1347571542)
    {
      v19 = 19;
      goto LABEL_31;
    }
LABEL_78:
    v23 = 0;
    v22 = a1[1];
    goto LABEL_34;
  }
  if (v18 == 1128352768)
  {
    v19 = 18;
    goto LABEL_31;
  }
  if (v18 != 1128679168)
    goto LABEL_78;
  v19 = 22;
LABEL_31:
  v22 = a1[1];
  if (*((_BYTE *)v22 + 44))
    *((_DWORD *)v22 + 10) = v19;
  v23 = 1;
LABEL_34:
  *((_BYTE *)&v43.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v43, "Sending Image '");
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v47;
  else
    v24 = (std::string *)v47.__r_.__value_.__r.__words[0];
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  else
    size = v47.__r_.__value_.__l.__size_;
  v26 = std::string::append(&v43, (const std::string::value_type *)v24, size);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v42 = 1;
  strcpy(__s, "'");
  v28 = std::string::append(&v44, __s, 1uLL);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v46 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(BBUFeedback *, void **, _QWORD, uint64_t))(*(_QWORD *)v22 + 32))(v22, __p, 0, v17);
  if (SHIBYTE(v46) < 0)
  {
    operator delete(__p[0]);
    if ((v42 & 0x80000000) == 0)
    {
LABEL_42:
      if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_43;
      goto LABEL_51;
    }
  }
  else if ((v42 & 0x80000000) == 0)
  {
    goto LABEL_42;
  }
  operator delete(*(void **)__s);
  if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_43:
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_52;
  }
LABEL_51:
  operator delete(v44.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_44:
    if (v48)
      v30 = 0;
    else
      v30 = v15;
    if (v30 == 1)
      goto LABEL_56;
    goto LABEL_71;
  }
LABEL_52:
  operator delete(v43.__r_.__value_.__l.__data_);
  if (v48)
    v31 = 0;
  else
    v31 = v15;
  if (v31 == 1)
  {
    while (1)
    {
LABEL_56:
      if (v17 < (int)v49 + (int)v50)
      {
        BBUFeedback::handleComment(a1[1], "Error: Chunk size is not sufficient to write payload data of the image!");
        v12 = 72;
        goto LABEL_71;
      }
      if (((*((uint64_t (**)(BBUFeedback **, uint64_t, void *, uint64_t, uint64_t *, uint64_t *, char *, uint64_t))*a1
             + 30))(a1, v16, v5, 0x100000, &v50, &v49, (char *)&v49 + 4, v17) & 1) == 0)break;
      if (((*((uint64_t (**)(BBUFeedback **, void *, uint64_t, char *, uint64_t *, uint64_t *, char *))*a1 + 29))(a1, v5, 0x100000, (char *)&v50 + 4, &v50, &v49, &v48) & 1) == 0)
      {
        if (gBBULogMaskGet(void)::once == -1)
        {
          v12 = 0;
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
            goto LABEL_71;
          goto LABEL_68;
        }
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        v12 = 0;
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
        {
LABEL_68:
          if (gBBULogVerbosity < 1)
            goto LABEL_71;
          _BBULog(5, 1, "BBUProgrammer", "", "failed receiving next segment request\n", v35, v36, v37, v40);
LABEL_70:
          v12 = 0;
          goto LABEL_71;
        }
        goto LABEL_71;
      }
      if (v48)
        goto LABEL_70;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      v12 = 3;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
        goto LABEL_71;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v12 = 3;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
        goto LABEL_71;
    }
    if (gBBULogVerbosity >= 1)
      _BBULog(5, 1, "BBUProgrammer", "", "failed transfering segment\n", v32, v33, v34, v40);
  }
LABEL_71:
  if (v23)
    BBUFeedback::endProgressBarItem(a1[1]);
  (*(void (**)(BBUFeedback *, uint64_t))(*(_QWORD *)a1[1] + 48))(a1[1], v12);
  if (!(_DWORD)v12)
  {
    v38 = CFAbsoluteTimeGetCurrent();
    BBUFeedback::handleComment(a1[1], "Took %f seconds", v38 - Current);
  }
  operator delete[](v5);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  return v12;
}

void sub_212B12DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUEUR10Programmer::getSegmentRequestInternal_nl(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int Data;
  int v14;
  int v15;
  const char *v16;
  uint64_t result;
  const char *v18;
  uint64_t v19;
  char v21;
  uint64_t v22;

  if ((ETLSAHCommandReceive() & 1) == 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      result = 0;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
        return result;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      result = 0;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
        return result;
    }
    if (gBBULogVerbosity < 1)
      return result;
    v18 = "no response from baseband after segment transfer\n";
    v19 = 1;
    goto LABEL_33;
  }
  if (*a2 == 4)
  {
    v22 = 0;
    if (!ETLSAHCommandParseEndOfImageTransfer())
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        result = 0;
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
          return result;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        result = 0;
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
          return result;
      }
      if (gBBULogVerbosity < 0)
        return result;
      v18 = "Failed parsing image end command";
LABEL_32:
      v19 = 0;
LABEL_33:
      _BBULog(5, v19, "BBUProgrammer", "", v18, v10, v11, v12, v21);
      return 0;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
        goto LABEL_25;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
      {
LABEL_25:
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(5, 0, "BBUProgrammer", "", "end of image %u\n", v10, v11, v12, *a4);
      }
    }
    result = 1;
    *a7 = 1;
    return result;
  }
  if (*a2 == 3)
  {
    Data = ETLSAHCommandParseReadData();
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v14 = (gBBULogVerbosity >= 0) & (*(unsigned __int8 *)gBBULogMaskGet(void)::sBBULogMask >> 5);
    if (Data)
    {
      if (!v14)
        return 1;
      v15 = *a4;
      v16 = "request image ID %u, data offset 0x%x, data length %u\n";
LABEL_18:
      _BBULog(5, 0, "BBUProgrammer", "", v16, v10, v11, v12, v15);
      return 1;
    }
    if (!v14)
      return 0;
    v18 = "Failed parsing read command";
    goto LABEL_32;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    result = 1;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
      return result;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    result = 1;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
      return result;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v15 = *a2;
    v16 = "unexpected command %u";
    goto LABEL_18;
  }
  return result;
}

void sub_212B13754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;
  uint64_t v19;
  NSObject *v21;

  v21 = *(NSObject **)(v19 - 128);
  if (v21)
    dispatch_release(v21);
  operator delete(v18);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  if (a17 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10Programmer::sendSegmentInternal_nl(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, _DWORD *a5, unsigned int *a6, _DWORD *a7, unsigned int a8)
{
  unsigned int v8;
  double v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Data;
  unint64_t v23;

  v8 = *a6;
  if (*a6)
  {
    v16 = 1.0 / (double)a8;
    while (1)
    {
      if (v8 >= a4)
        v18 = a4;
      else
        v18 = v8;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, a3, v18, *a5);
      Data = ETLSAHSendReadData();
      if ((_DWORD)Data)
      {
        LODWORD(v23) = *a5;
        BBUFeedback::updateProgressBarItem(*(BBUFeedback **)(a1 + 8), (double)v23 * v16);
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *a5);
      }
      else if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
          goto LABEL_14;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
        {
LABEL_14:
          if (gBBULogVerbosity >= 1)
            _BBULog(5, 1, "BBUProgrammer", "", "Failed sending data at offset 0x%x, chunk %u\n", v19, v20, v21, *a5);
        }
      }
      *a6 -= v18;
      *a5 += v18;
      *a7 += v18;
      v8 = *a6;
      if (*a6)
        v17 = Data;
      else
        v17 = 0;
      if ((v17 & 1) == 0)
        return Data;
    }
  }
  return 1;
}

uint64_t BBUEUR10Programmer::handleHashesQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t HashSize;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  _OWORD __src[2];
  _OWORD v33[2];
  _OWORD v34[2];
  _OWORD v35[2];
  _OWORD v36[2];
  _OWORD v37[2];
  _OWORD v38[2];
  _OWORD v39[2];
  _OWORD v40[2];
  _OWORD v41[2];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41[0] = v8;
  v41[1] = v8;
  v40[0] = v8;
  v40[1] = v8;
  v39[0] = v8;
  v39[1] = v8;
  v38[0] = v8;
  v38[1] = v8;
  v37[0] = v8;
  v37[1] = v8;
  v36[0] = v8;
  v36[1] = v8;
  v35[0] = v8;
  v35[1] = v8;
  v34[0] = v8;
  v34[1] = v8;
  v33[0] = v8;
  v33[1] = v8;
  __src[0] = v8;
  __src[1] = v8;
  if (a2)
  {
    if ((ETLSAHCommandParseMaverickSendHashesQuery() & 1) != 0)
    {
      v15 = 0;
      if (a3 && a4)
      {
        v16 = (char *)operator new(0x148uLL);
        *(_QWORD *)v16 = &unk_24CE800C0;
        HashSize = BBUEURHashData::getHashSize((BBUEURHashData *)v16);
        memcpy(v16 + 8, __src, HashSize);
        v18 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
        memcpy(v16 + 40, v36, v18);
        v19 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
        memcpy(v16 + 72, v37, v19);
        v20 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
        memcpy(v16 + 104, v40, v20);
        v21 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
        memcpy(v16 + 136, v38, v21);
        v22 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
        memcpy(v16 + 168, v39, v22);
        v23 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
        memcpy(v16 + 200, v33, v23);
        v24 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
        memcpy(v16 + 232, v34, v24);
        v25 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
        memcpy(v16 + 264, v35, v25);
        v26 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 32))(v16);
        memcpy(v16 + 296, v41, v26);
        (*(void (**)(char *, _QWORD))(*(_QWORD *)v16 + 24))(v16, *(_QWORD *)(a1 + 8));
        if (((*(uint64_t (**)(uint64_t, _QWORD, char *))(*(_QWORD *)a4 + 16))(a4, *(_QWORD *)(a1 + 8), v16) & 1) != 0)
        {
          v15 = 0;
LABEL_19:
          (*(void (**)(char *))(*(_QWORD *)v16 + 8))(v16);
          return v15;
        }
        if (gBBULogMaskGet(void)::once == -1)
        {
          v15 = 33;
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
            goto LABEL_19;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          v15 = 33;
          if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
            goto LABEL_19;
        }
        if (gBBULogVerbosity >= 1)
          _BBULog(5, 1, "BBUProgrammer", "", "root manifest hash data mismatches baseband hash query\n", v27, v28, v29, v31);
        goto LABEL_19;
      }
    }
    else
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        v15 = 12;
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
          return v15;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        v15 = 12;
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
          return v15;
      }
      if (gBBULogVerbosity >= 1)
        _BBULog(5, 1, "BBUProgrammer", "", "Failed parsing maverick hash query results\n", v12, v13, v14, v31);
    }
  }
  else
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v15 = 2;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
        return v15;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v15 = 2;
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
        return v15;
    }
    if (gBBULogVerbosity >= 1)
      _BBULog(5, 1, "BBUProgrammer", "", "Bad arguments:  header = %p\n", a6, a7, a8, 0);
  }
  return v15;
}

void sub_212B13DBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEUR10Programmer::collectCoreDump(BBUFeedback **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char v12;
  std::string v13;
  int v14;

  v14 = 2;
  *((_DWORD *)a1 + 1071) = 2;
  v5 = (*((uint64_t (**)(BBUFeedback **, int *))*a1 + 23))(a1, &v14);
  if ((_DWORD)v5)
  {
    v9 = v5;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        return v9;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        return v9;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      v10 = "failed connecting to sahara for collecting coredump\n";
LABEL_13:
      _BBULog(13, 0, "BBUProgrammer", "", v10, v6, v7, v8, v12);
    }
    return v9;
  }
  if (v14 != 2)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      v9 = 12;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        return v9;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v9 = 12;
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 0x20) == 0)
        return v9;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      v10 = "failed to enter debug mode, unknown mode: %d \n";
      v12 = v14;
      goto LABEL_13;
    }
    return v9;
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v13 = *(std::string *)a3;
  v9 = BBUEUR2Programmer::collectCoreDump(a1, (uint64_t)&v13);
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v9;
  operator delete(v13.__r_.__value_.__l.__data_);
  return v9;
}

void sub_212B13F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BBUEUR10Programmer::~BBUEUR10Programmer(BBUEUR10Programmer *this)
{
  char *v2;
  uint64_t i;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  *(_QWORD *)this = off_24CE840A8;
  if (*((char *)this + 4327) < 0)
    operator delete(*((void **)this + 538));
  *(_QWORD *)this = off_24CE83568;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 88));
  *(_QWORD *)this = off_24CE84B60;
  v2 = (char *)this + 40;
  for (i = *((_QWORD *)this + 6); (char *)i != v2; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_QWORD *)(i + 16);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*((_QWORD *)this + 7))
  {
    v6 = *((_QWORD *)this + 5);
    v5 = (char *)*((_QWORD *)this + 6);
    v7 = *(_QWORD *)v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    *((_QWORD *)this + 7) = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (char *)*((_QWORD *)v5 + 1);
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
}

{
  char *v2;
  uint64_t i;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  *(_QWORD *)this = off_24CE840A8;
  if (*((char *)this + 4327) < 0)
    operator delete(*((void **)this + 538));
  *(_QWORD *)this = off_24CE83568;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 88));
  *(_QWORD *)this = off_24CE84B60;
  v2 = (char *)this + 40;
  for (i = *((_QWORD *)this + 6); (char *)i != v2; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_QWORD *)(i + 16);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*((_QWORD *)this + 7))
  {
    v6 = *((_QWORD *)this + 5);
    v5 = (char *)*((_QWORD *)this + 6);
    v7 = *(_QWORD *)v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    *((_QWORD *)this + 7) = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (char *)*((_QWORD *)v5 + 1);
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  operator delete(this);
}

uint64_t __cxx_global_var_init_19()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUError>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance, &dword_212A4D000);
  }
  return result;
}

void BBUICE16Programmer::~BBUICE16Programmer(BBUICE16Programmer *this)
{
  void **v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void **v8;
  void **v9;
  void *v10;
  char *v11;
  uint64_t j;
  void **v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;

  *(_QWORD *)this = off_24CE84220;
  if (*((_QWORD *)this + 27))
  {
    v2 = (void **)*((_QWORD *)this + 26);
    if (v2)
    {
      do
      {
        v8 = (void **)*v2;
        if (*((char *)v2 + 39) < 0)
          operator delete(v2[2]);
        operator delete(v2);
        v2 = v8;
      }
      while (v8);
    }
    *((_QWORD *)this + 26) = 0;
    v3 = *((_QWORD *)this + 25);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*((_QWORD *)this + 24) + 8 * i) = 0;
    }
    *((_QWORD *)this + 27) = 0;
  }
  if (*((char *)this + 279) < 0)
    operator delete(*((void **)this + 32));
  v5 = *((_QWORD *)this + 29);
  if (v5)
  {
    v6 = *((_QWORD *)this + 30);
    v7 = (void *)*((_QWORD *)this + 29);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 29);
    }
    *((_QWORD *)this + 30) = v5;
    operator delete(v7);
  }
  v9 = (void **)*((_QWORD *)this + 26);
  if (v9)
  {
    do
    {
      v13 = (void **)*v9;
      if (*((char *)v9 + 39) < 0)
        operator delete(v9[2]);
      operator delete(v9);
      v9 = v13;
    }
    while (v13);
  }
  v10 = (void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v10)
    operator delete(v10);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 120));
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  *(_QWORD *)this = off_24CE84B60;
  v11 = (char *)this + 40;
  for (j = *((_QWORD *)this + 6); (char *)j != v11; j = *(_QWORD *)(j + 8))
  {
    v14 = *(_QWORD *)(j + 16);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  if (*((_QWORD *)this + 7))
  {
    v16 = *((_QWORD *)this + 5);
    v15 = (char *)*((_QWORD *)this + 6);
    v17 = *(_QWORD *)v15;
    *(_QWORD *)(v17 + 8) = *(_QWORD *)(v16 + 8);
    **(_QWORD **)(v16 + 8) = v17;
    *((_QWORD *)this + 7) = 0;
    if (v15 != v11)
    {
      do
      {
        v18 = (char *)*((_QWORD *)v15 + 1);
        operator delete(v15);
        v15 = v18;
      }
      while (v18 != v11);
    }
  }
}

{
  void *v1;

  BBUICE16Programmer::~BBUICE16Programmer(this);
  operator delete(v1);
}

uint64_t BBUICE16Programmer::addHashmapItem(uint64_t a1, void *lpsrc)
{
  char *v4;
  uint64_t v5;
  void *exception;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string __p;
  std::string *p_p;

  if (!lpsrc)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE16Programmer.cpp", 0x4Au, (ctu::LogMessageBuffer *)"Assertion failure(item && \"Error: loading programmer items!\")", v8, v9, v10, __p.__r_.__value_.__s.__data_[0]);
    goto LABEL_11;
  }
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE16Programmer.cpp", 0x4Du, (ctu::LogMessageBuffer *)"Assertion failure(ice16item && \"Error: loading programmer items!\")", v11, v12, v13, __p.__r_.__value_.__s.__data_[0]);
LABEL_11:
  }
  v5 = a1 + 192;
  if (v4[55] < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v4 + 4), *((_QWORD *)v4 + 5));
  else
    __p = *(std::string *)(v4 + 32);
  p_p = &__p;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p)+ 5) = lpsrc;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_212B144D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B144E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B144F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BBUICE16Programmer::addItemsToHashmap(BBUICE16Programmer *this)
{
  char *v1;
  uint64_t v2;
  void *v4;
  void *exception;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v1 = (char *)this + 40;
  v2 = *((_QWORD *)this + 6);
  if ((BBUICE16Programmer *)v2 != (BBUICE16Programmer *)((char *)this + 40))
  {
    do
    {
      v4 = *(void **)(v2 + 16);
      if (!v4
      {
        exception = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE16Programmer.cpp", 0x59u, (ctu::LogMessageBuffer *)"Assertion failure(item && \"Error: loading programmer items!\")", v7, v8, v9, v10);
      }
      BBUICE16Programmer::addHashmapItem((uint64_t)this, v4);
      v2 = *(_QWORD *)(v2 + 8);
    }
    while ((char *)v2 != v1);
  }
  return 0;
}

void sub_212B145DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16Programmer::ICE16Item::ICE16Item(uint64_t a1, int a2, void *lpsrc)
{
  std::string *v4;
  int v6;
  const struct __class_type_info *v7;
  void *v8;
  const std::string::value_type *v9;
  void *exception;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = off_24CE84340;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = (std::string *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  switch(a2)
  {
    case 20480:
      v6 = 0;
      if (!lpsrc)
        goto LABEL_13;
      goto LABEL_4;
    case 20481:
    case 20484:
    case 20485:
    case 20486:
      v6 = 1;
      if (!lpsrc)
        goto LABEL_13;
      goto LABEL_4;
    case 20482:
      v6 = 3;
      if (!lpsrc)
        goto LABEL_13;
      goto LABEL_4;
    case 20483:
      v6 = 2;
      if (!lpsrc)
        goto LABEL_13;
      goto LABEL_4;
    case 20487:
      v6 = 4;
      if (lpsrc)
      {
LABEL_4:
      }
      else
      {
LABEL_13:
        v8 = 0;
      }
      *(_QWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 24) = v6;
      v9 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)lpsrc + 16))(lpsrc);
      std::string::__assign_external(v4, v9);
      if (!*(_QWORD *)(a1 + 16))
      {
        exception = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE16Programmer.cpp", 0x8Fu, (ctu::LogMessageBuffer *)"Assertion failure(fImage && \"Failed to to create BBU Image for the programmer item!\")", v12, v13, v14, v18);
LABEL_17:
      }
      return a1;
    default:
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 85, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE16Programmer.cpp", 0x8Cu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized BBU Programmer item type!\")", v15, v16, v17, v18);
      goto LABEL_17;
  }
}

void sub_212B14778(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v3;

  __cxa_free_exception(v3);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16Programmer::imageDownload(BBUICE16Programmer *this)
{
  size_t v2;
  void *v3;
  uint64_t v4;
  int v6;

  v2 = *((unsigned int *)this + 73);
  if ((_DWORD)v2)
  {
    v3 = operator new(*((unsigned int *)this + 73));
    bzero(v3, v2);
  }
  else
  {
    v3 = 0;
  }
  v6 = 1;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 120));
  BBUFeedback::handleBeginPhase(*((BBUFeedback **)this + 1), "Sending Images");
  if (!*((_BYTE *)this + 32))
    BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "not connected to programmer");
  v4 = (*(uint64_t (**)(BBUICE16Programmer *))(*(_QWORD *)this + 200))(this);
  if ((_DWORD)v4)
  {
    BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Failed EBL Start sequence");
    v6 = 2;
  }
  else
  {
    v6 = 2;
    do
    {
      v4 = (*(uint64_t (**)(BBUICE16Programmer *, int *, void *))(*(_QWORD *)this + 192))(this, &v6, v3);
      if ((_DWORD)v4)
      {
        BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "failed handling EBL command.");
        goto LABEL_15;
      }
    }
    while (v6 == 2);
    if (v6 == 3)
      BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "All images transferred\n");
    v4 = 0;
  }
LABEL_15:
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), v4);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 120));
  if (v3)
    operator delete(v3);
  return v4;
}

void sub_212B148F8(_Unwind_Exception *a1)
{
  void *v1;
  pthread_mutex_t *v2;

  pthread_mutex_unlock(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16Programmer::sendImageSegment(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::ios_base *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  const char *v18;
  size_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  size_t v24;
  void **v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *__dst[2];
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void *__p[2];
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47 = 0xAAAAAAAAAAAAAAAALL;
  v57 = v10;
  v56 = v10;
  v55 = v10;
  v54 = v10;
  v53 = v10;
  v52 = v10;
  v51 = v10;
  v50 = v10;
  v49 = v10;
  v46 = v10;
  *(_OWORD *)__p = v10;
  v44 = v10;
  v43 = v10;
  v42 = v10;
  v41 = v10;
  v11 = MEMORY[0x24BEDB870];
  v12 = MEMORY[0x24BEDB870] + 64;
  v48 = MEMORY[0x24BEDB870] + 64;
  v13 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v40 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v40 + *(_QWORD *)(v40 - 24)) = v13;
  v14 = (std::ios_base *)((char *)&v40 + *(_QWORD *)(v40 - 24));
  std::ios_base::init(v14, &v41);
  v14[1].__vftable = 0;
  v14[1].__fmtflags_ = -1;
  v40 = v11 + 24;
  v48 = v12;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&v41 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v46 = 0u;
  LODWORD(v47) = 16;
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"Reading file '", 14);
  v16 = (uint64_t *)MEMORY[0x24BEDB800];
  v17 = v15;
  v18 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v19 = strlen(v18);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"' (offset=", 10);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", length=", 9);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
  v23 = *(_QWORD *)(a1 + 8);
  if ((v47 & 0x10) != 0)
  {
    v26 = *((_QWORD *)&v46 + 1);
    if (*((_QWORD *)&v46 + 1) < (unint64_t)v44)
    {
      *((_QWORD *)&v46 + 1) = v44;
      v26 = v44;
    }
    v27 = (const void *)*((_QWORD *)&v43 + 1);
    v24 = v26 - *((_QWORD *)&v43 + 1);
    if ((unint64_t)(v26 - *((_QWORD *)&v43 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_41;
  }
  else
  {
    if ((v47 & 8) == 0)
    {
      v24 = 0;
      HIBYTE(v39) = 0;
      v25 = __dst;
      goto LABEL_14;
    }
    v27 = (const void *)v42;
    v24 = v43 - v42;
    if ((_QWORD)v43 - (_QWORD)v42 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_41:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v24 >= 0x17)
  {
    v28 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v28 = v24 | 7;
    v29 = v28 + 1;
    v25 = (void **)operator new(v28 + 1);
    __dst[1] = (void *)v24;
    v39 = v29 | 0x8000000000000000;
    __dst[0] = v25;
    v16 = (uint64_t *)MEMORY[0x24BEDB800];
  }
  else
  {
    HIBYTE(v39) = v24;
    v25 = __dst;
    if (!v24)
      goto LABEL_14;
  }
  memmove(v25, v27, v24);
LABEL_14:
  v30 = a4 + a3;
  *((_BYTE *)v25 + v24) = 0;
  (*(void (**)(uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, __dst, a3, a4 + a3);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
    if (a4)
      goto LABEL_16;
    goto LABEL_30;
  }
  operator delete(__dst[0]);
  if (!a4)
  {
LABEL_30:
    v36 = 0;
    goto LABEL_37;
  }
LABEL_16:
  while (1)
  {
    v31 = *(_DWORD *)(a1 + 292);
    v32 = v31 >= a4 ? a4 : v31;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a5, v32, a3);
    if (!KTLEBLSendReadfileData())
      break;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
        goto LABEL_23;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) != 0)
      {
LABEL_23:
        if (gBBULogVerbosity >= 1)
          _BBULog(5, 1, "BBUProgrammer", "", "Sent read data at offset 0x%08x, chunk %u\n", v33, v34, v35, a3);
      }
    }
    BBUFeedback::updateProgressBarItem(*(BBUFeedback **)(a1 + 8), (double)a3 * (1.0 / (double)v30));
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a3);
    a3 = (v32 + a3);
    a4 -= v32;
    if (!a4)
    {
      v36 = 0;
LABEL_36:
      v16 = (uint64_t *)MEMORY[0x24BEDB800];
      goto LABEL_37;
    }
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    v36 = 3;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
      goto LABEL_36;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v36 = 3;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 0x20) == 0)
      goto LABEL_36;
  }
  v16 = (uint64_t *)MEMORY[0x24BEDB800];
  if (gBBULogVerbosity >= 1)
    _BBULog(5, 1, "BBUProgrammer", "", "Failed sending data at offset 0x%08x, chunk %u\n", v33, v34, v35, a3);
LABEL_37:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v36);
  v40 = *v16;
  *(uint64_t *)((char *)&v40 + *(_QWORD *)(v40 - 24)) = v16[3];
  *(_QWORD *)&v41 = MEMORY[0x24BEDB848] + 16;
  if (SBYTE7(v46) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v48);
  return v36;
}

void sub_212B14E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  std::ostringstream::~ostringstream((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16Programmer::sendEBL(uint64_t a1, uint64_t a2)
{
  int v3;
  size_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BBUFeedback *v10;
  const char *v11;
  char v12;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v4 = v3;
  if (v3)
  {
    if (v3 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v5 = operator new(v3);
    bzero(v5, v4);
  }
  else
  {
    v5 = 0;
  }
  if (KTLPSIFormatEnhancedCommand())
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Sending PSI enhanced command 'Load and execute EBL'");
    if ((KTLPSISendEnhancedCommand() & 1) == 0)
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed sending PSI command for Loading EBL\n");
      goto LABEL_15;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) != 0)
        goto LABEL_9;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) != 0)
      {
LABEL_9:
        if (gBBULogVerbosity >= 1)
          _BBULog(9, 1, "BBUProgrammer", "", "Waiting for PSI command response\n", v6, v7, v8, v12);
      }
    }
    if (KTLPSIReadResponse())
    {
      KTLParsePSIRunning();
      v10 = *(BBUFeedback **)(a1 + 8);
      v11 = (const char *)PSIModeDescription();
      BBUFeedback::handleComment(v10, "Unexpected PSI running mode %d (%s)\n", 0, v11);
    }
    else
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed reading PSI command response\n");
    }
  }
LABEL_15:
  if (v5)
    operator delete(v5);
  return 3;
}

void sub_212B1547C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BBUICE16Programmer::readPSIRunningMode(uint64_t a1, int *a2)
{
  char v4;
  BBUFeedback *v5;
  int v6;
  const char *v7;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  void *__p;
  __int128 v39;
  uint64_t v40;
  void *v41;
  __int16 v42;
  __int128 v43;
  void (*v44)(uint64_t);
  void *v45;
  uint64_t v46;
  void **p_p;
  int v48;
  __int128 *v49;
  NSObject *block;
  uint64_t v51;
  _QWORD *(*v52)(uint64_t);
  void *v53;
  uint64_t v54;
  __int128 **v55;

  v42 = -21846;
  *a2 = 0;
  if ((KTLPSIReadResponse() & 1) != 0)
  {
    v4 = KTLParsePSIRunning();
    v5 = *(BBUFeedback **)(a1 + 8);
    if ((v4 & 1) != 0)
    {
      v6 = *a2;
      v7 = (const char *)PSIModeDescription();
      BBUFeedback::handleComment(v5, "PSI-Running mode 0x%x (%s)", v6, v7);
      return 0;
    }
    BBUFeedback::handleComment(v5, "Failed reading PSI-RAM Running status\n");
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    v22 = qword_253D31DC8;
    if (!qword_253D31DC8)
    {
      v23 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
      block = 0;
      ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v23, "BBUError", QOS_CLASS_UTILITY, &block);
      if (block)
        dispatch_release(block);
      v23->__on_zero_shared_weak = 0;
      v23[1].~__shared_weak_count = 0;
      v23[1].~__shared_weak_count_0 = 0;
      std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&v43, v23);
      v24 = v43;
      v43 = 0uLL;
      v25 = (std::__shared_weak_count *)off_253D31DD0;
      *(_OWORD *)&qword_253D31DC8 = v24;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
      if (*((_QWORD *)&v43 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v22 = qword_253D31DC8;
    }
    v18 = (std::__shared_weak_count *)off_253D31DD0;
    v40 = v22;
    v41 = off_253D31DD0;
    if (off_253D31DD0)
    {
      v31 = (unint64_t *)((char *)off_253D31DD0 + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    __p = operator new(0x28uLL);
    v39 = xmmword_212B55600;
    strcpy((char *)__p, "Failed reading PSI-RAM Running status\n");
    *(_QWORD *)&v43 = MEMORY[0x24BDAC760];
    *((_QWORD *)&v43 + 1) = 0x40000000;
    v44 = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
    v45 = &__block_descriptor_tmp_6;
    v46 = v22;
    p_p = &__p;
    v48 = 3;
    v49 = &v43;
    block = MEMORY[0x24BDAC760];
    v51 = 0x40000000;
    v52 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    v53 = &__block_descriptor_tmp_10;
    v54 = v22;
    v55 = &v49;
    v33 = *(NSObject **)(v22 + 16);
    if (*(_QWORD *)(v22 + 24))
    {
      dispatch_async_and_wait(v33, &block);
      if ((SHIBYTE(v39) & 0x80000000) == 0)
      {
LABEL_45:
        if (!v18)
          return 3;
        v34 = (unint64_t *)&v18->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (v35)
          return 3;
        goto LABEL_56;
      }
    }
    else
    {
      dispatch_sync(v33, &block);
      if ((SHIBYTE(v39) & 0x80000000) == 0)
        goto LABEL_45;
    }
    operator delete(__p);
    goto LABEL_45;
  }
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed reading PSI-RAM Running status\n");
  pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  v9 = qword_253D31DC8;
  if (!qword_253D31DC8)
  {
    v10 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
    block = 0;
    ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v10, "BBUError", QOS_CLASS_UTILITY, &block);
    if (block)
      dispatch_release(block);
    v10->__on_zero_shared_weak = 0;
    v10[1].~__shared_weak_count = 0;
    v10[1].~__shared_weak_count_0 = 0;
    std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)&v43, v10);
    v11 = v43;
    v43 = 0uLL;
    v12 = (std::__shared_weak_count *)off_253D31DD0;
    *(_OWORD *)&qword_253D31DC8 = v11;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v9 = qword_253D31DC8;
  }
  v18 = (std::__shared_weak_count *)off_253D31DD0;
  v40 = v9;
  v41 = off_253D31DD0;
  if (off_253D31DD0)
  {
    v19 = (unint64_t *)((char *)off_253D31DD0 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  __p = operator new(0x28uLL);
  v39 = xmmword_212B55600;
  strcpy((char *)__p, "Failed reading PSI-RAM Running status\n");
  *(_QWORD *)&v43 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v43 + 1) = 0x40000000;
  v44 = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
  v45 = &__block_descriptor_tmp_6;
  v46 = v9;
  p_p = &__p;
  v48 = 3;
  v49 = &v43;
  block = MEMORY[0x24BDAC760];
  v51 = 0x40000000;
  v52 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v53 = &__block_descriptor_tmp_10;
  v54 = v9;
  v55 = &v49;
  v21 = *(NSObject **)(v9 + 16);
  if (*(_QWORD *)(v9 + 24))
  {
    dispatch_async_and_wait(v21, &block);
    if ((SHIBYTE(v39) & 0x80000000) == 0)
      goto LABEL_23;
  }
  else
  {
    dispatch_sync(v21, &block);
    if ((SHIBYTE(v39) & 0x80000000) == 0)
    {
LABEL_23:
      if (!v18)
        return 3;
      goto LABEL_52;
    }
  }
  operator delete(__p);
  if (!v18)
    return 3;
LABEL_52:
  v36 = (unint64_t *)&v18->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (v37)
    return 3;
LABEL_56:
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  return 3;
}

void sub_212B15988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  void *v14;
  uint64_t v15;
  NSObject *v17;

  v17 = *(NSObject **)(v15 - 80);
  if (v17)
    dispatch_release(v17);
  operator delete(v14);
  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_212B15A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16Programmer::handleEBLStart(BBUICE16Programmer *this)
{
  const char *v2;
  size_t v3;
  size_t v4;
  _QWORD *v5;
  int HardwareConfig;
  BBUFeedback *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  const char *v12;
  int v13;
  char v14;
  BBUFeedback *v15;
  _QWORD __dst[2];
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  v20 = 0;
  v2 = (char *)this + 88;
  if ((*((char *)this + 111) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 111))
    {
      v3 = strlen((const char *)this + 88);
      if (v3 < 0x7FFFFFFFFFFFFFF8)
        goto LABEL_4;
LABEL_9:
      std::string::__throw_length_error[abi:ne180100]();
    }
LABEL_10:
    HardwareConfig = TelephonyRadiosGetHardwareConfig();
    LODWORD(v19) = TelephonyRadiosGetProduct() | (HardwareConfig << 30);
    v7 = (BBUFeedback *)*((_QWORD *)this + 1);
    TelephonyRadiosGetProduct();
    TelephonyRadiosGetHardwareConfig();
    BBUFeedback::handleComment(v7, "Product Type : %d and Hardware Config: 0x%x in Reserved%lu\n");
    goto LABEL_21;
  }
  if (!*((_QWORD *)this + 12))
    goto LABEL_10;
  v2 = *(const char **)v2;
  v3 = strlen(v2);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_9;
LABEL_4:
  v4 = v3;
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    v5 = operator new(v8 + 1);
    __dst[1] = v4;
    v18 = v9 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v18) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_15;
  }
  memmove(v5, v2, v4);
LABEL_15:
  *((_BYTE *)v5 + v4) = 0;
  v10 = SHIBYTE(v18);
  v11 = (void *)__dst[0];
  if (v18 >= 0)
    v12 = (const char *)__dst;
  else
    v12 = (const char *)__dst[0];
  v13 = strtoul(v12, 0, 16);
  if (v10 < 0)
    operator delete(v11);
  LODWORD(v19) = v13;
  BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Overriding Product Type : %u and Hardware Config: 0x%x in Reserved %zu\n");
LABEL_21:
  if ((KTLEBLReceivePacket() & 1) == 0)
  {
    BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Failed to receive Start packet from EBL.\n");
    return 3;
  }
  if ((KTLEBLParseStartInfo() & 1) == 0)
  {
    BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Invalid start packet recieved from EBL.\n");
    return 3;
  }
  if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
  {
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
      goto LABEL_25;
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
    {
LABEL_25:
      if (!(BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS))
        goto LABEL_26;
      goto LABEL_27;
    }
  }
  dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
  if (!(BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS))
  {
LABEL_26:
    if (!*((_BYTE *)this + 82))
      goto LABEL_28;
  }
LABEL_27:
  HIDWORD(v19) = 1381192786;
  BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Sending restore mode cookie in Reserved%lu\n", 1);
LABEL_28:
  if ((KTLEBLCreateStartACKPacket() & 1) != 0)
  {
    v14 = KTLEBLSendPacket();
    v15 = (BBUFeedback *)*((_QWORD *)this + 1);
    if ((v14 & 1) != 0)
    {
      BBUFeedback::handleComment(v15, "EBL started, continue to image download.");
      return 0;
    }
    BBUFeedback::handleComment(v15, "Failed sending Start ACK packet.\n");
  }
  else
  {
    BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Failed to create Start ACK packet.\n");
  }
  return 3;
}

uint64_t BBUICE16Programmer::handleEBLReadfile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  unsigned __int8 v6;
  size_t v7;
  size_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  size_t v15;
  size_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  _QWORD *v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  size_t v26;
  size_t v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 __dst;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  __int128 *v36;

  v5 = operator new(0x400uLL);
  bzero(v5, 0x400uLL);
  v34 = -1431655766;
  v35 = -1431655766;
  v6 = atomic_load((unsigned __int8 *)&_MergedGlobals_5);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_5))
  {
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_253D372F8, &dword_212A4D000);
    __cxa_guard_release(&_MergedGlobals_5);
  }
  if ((KTLEBLParseReadfileExt() & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed parsing Readfile command.\n");
    v10 = 3;
    goto LABEL_54;
  }
  v7 = strlen((const char *)v5);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = v8;
    v33 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v33) = v7;
    p_dst = &__dst;
    if (!v7)
      goto LABEL_12;
  }
  memcpy(p_dst, v5, v8);
LABEL_12:
  *((_BYTE *)p_dst + v8) = 0;
  v13 = std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::find<std::string>((_QWORD *)(a1 + 192), (uint64_t)&__dst);
  v14 = v13;
  if (SHIBYTE(v33) < 0)
  {
    operator delete((void *)__dst);
    if (v14)
    {
LABEL_14:
      v15 = strlen((const char *)v5);
      if (v15 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v16 = v15;
      if (v15 >= 0x17)
      {
        v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v18 = v15 | 7;
        v19 = v18 + 1;
        v17 = (__int128 *)operator new(v18 + 1);
        *((_QWORD *)&__dst + 1) = v16;
        v33 = v19 | 0x8000000000000000;
        *(_QWORD *)&__dst = v17;
      }
      else
      {
        HIBYTE(v33) = v15;
        v17 = &__dst;
        if (!v15)
        {
LABEL_24:
          *((_BYTE *)v17 + v16) = 0;
          v36 = &__dst;
          v20 = (const void *)*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 192, (uint64_t)&__dst, (uint64_t)&std::piecewise_construct, &v36)+ 5);
          if (v20)
          {
            if ((SHIBYTE(v33) & 0x80000000) == 0)
              goto LABEL_27;
          }
          else
          {
            v21 = 0;
            if ((SHIBYTE(v33) & 0x80000000) == 0)
            {
LABEL_27:
              v22 = v21[2];
              BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Loaded file '%s'\n", (const char *)v5);
              v23 = strlen((const char *)v5);
              v24 = v23;
              if (byte_253D3730F < 0)
              {
                if (v23 != -1)
                {
                  v25 = *((_QWORD *)&xmmword_253D372F8 + 1);
                  if (*((_QWORD *)&xmmword_253D372F8 + 1) >= v23)
                    v27 = v23;
                  else
                    v27 = *((_QWORD *)&xmmword_253D372F8 + 1);
                  if (memcmp((const void *)xmmword_253D372F8, v5, v27))
                    goto LABEL_42;
                  goto LABEL_41;
                }
              }
              else if (v23 != -1)
              {
                v25 = byte_253D3730F;
                if (byte_253D3730F >= v23)
                  v26 = v23;
                else
                  v26 = byte_253D3730F;
                if (memcmp(&xmmword_253D372F8, v5, v26))
                  goto LABEL_42;
LABEL_41:
                if (v25 == v24)
                {
LABEL_53:
                  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 152))(a1, v22, v35, v34, a3);
                  goto LABEL_54;
                }
LABEL_42:
                if (v24 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                if (v24 >= 0x17)
                {
                  v29 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v24 | 7) != 0x17)
                    v29 = v24 | 7;
                  v30 = v29 + 1;
                  v28 = (__int128 *)operator new(v29 + 1);
                  *((_QWORD *)&__dst + 1) = v24;
                  v33 = v30 | 0x8000000000000000;
                  *(_QWORD *)&__dst = v28;
                }
                else
                {
                  HIBYTE(v33) = v24;
                  v28 = &__dst;
                  if (!v24)
                    goto LABEL_50;
                }
                memcpy(v28, v5, v24);
LABEL_50:
                *((_BYTE *)v28 + v24) = 0;
                if (byte_253D3730F < 0)
                  operator delete((void *)xmmword_253D372F8);
                xmmword_253D372F8 = __dst;
                unk_253D37308 = v33;
                goto LABEL_53;
              }
              std::string::__throw_out_of_range[abi:ne180100]();
            }
          }
          operator delete((void *)__dst);
          goto LABEL_27;
        }
      }
      memcpy(v17, v5, v16);
      goto LABEL_24;
    }
  }
  else if (v13)
  {
    goto LABEL_14;
  }
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "file '%s' not found in item list\n", (const char *)v5);
  v10 = 15;
LABEL_54:
  operator delete(v5);
  return v10;
}

void sub_212B16130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16Programmer::handleEBLDone(uint64_t a1)
{
  int *v2;
  int v3;
  const char *v5;

  v2 = (int *)(a1 + 296);
  if ((KTLEBLParseDone() & 1) != 0)
  {
    v3 = *v2;
    if (*v2 == 256)
    {
      if ((KTLEBLCreateDoneACKPacket() & 1) != 0 && (KTLEBLSendPacket() & 1) != 0)
      {
        return 0;
      }
      else
      {
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed sending Done ACK packet.\n");
        return 3;
      }
    }
    else
    {
      if ((v3 - 257) >= 0x18)
      {
        if (v3 == 281)
          v5 = "ERR BIN";
        else
          v5 = "Unknown";
      }
      else
      {
        v5 = off_24CE843B8[v3 - 257];
      }
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Baseband reported failure during image download (%s).\n", v5);
      if (*v2 == 261)
        return 65;
      else
        return 3;
    }
  }
  else
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed parsing EBL Done packet.\n");
    return 3;
  }
}

uint64_t BBUICE16Programmer::handleEBLCommand(BBUFeedback **a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result;

  if ((KTLEBLReceivePacket() & 1) != 0)
  {
    if (dword_253D37310 == 4)
    {
      result = (*((uint64_t (**)(BBUFeedback **, int *))*a1 + 27))(a1, &dword_253D37310);
      if (!(_DWORD)result)
        *a2 = 3;
    }
    else if (dword_253D37310 == 3)
    {
      return (*((uint64_t (**)(BBUFeedback **, int *, uint64_t))*a1 + 26))(a1, &dword_253D37310, a3);
    }
    else
    {
      BBUFeedback::handleComment(a1[1], "Received invalid EBL packet.");
      return 1;
    }
  }
  else
  {
    BBUFeedback::handleComment(a1[1], "Failed to receive EBL packet.\n");
    return 3;
  }
  return result;
}

uint64_t BBUICE16Programmer::program(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  pthread_mutex_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count_vtbl *v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  NSObject *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  NSObject *v54;
  unint64_t *v55;
  unint64_t v56;
  NSObject *v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  const void *v61;
  void *v62;
  BBUFeedback *v63;
  const char *v64;
  unint64_t *v65;
  unint64_t v66;
  NSObject *v67;
  unint64_t *v68;
  unint64_t v69;
  void *exception;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  void *__p;
  __int128 v76;
  uint64_t v77;
  void *v78;
  int v79;
  void *v80[2];
  void (*v81)(uint64_t);
  void *v82;
  uint64_t v83;
  void **p_p;
  int v85;
  void **v86;
  dispatch_object_t object;
  uint64_t v88;
  _QWORD *(*v89)(uint64_t);
  void *v90;
  uint64_t v91;
  void ***v92;

  v79 = -1431655766;
  v16 = (pthread_mutex_t *)(a1 + 120);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 120));
  *(_DWORD *)(a1 + 312) = a11;
  v17 = *(unsigned int *)(a1 + 184);
  if (BBUProgrammer::addItemsFromList(a1, (uint64_t)a6))
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Error: loading programmer items!");
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    v18 = qword_253D31DC8;
    if (!qword_253D31DC8)
    {
      v19 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
      object = 0;
      ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v19, "BBUError", QOS_CLASS_UTILITY, &object);
      if (object)
        dispatch_release(object);
      v19->__on_zero_shared_weak = 0;
      v19[1].~__shared_weak_count = 0;
      v19[1].~__shared_weak_count_0 = 0;
      std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)v80, v19);
      v20 = *(_OWORD *)v80;
      v80[0] = 0;
      v80[1] = 0;
      v21 = (std::__shared_weak_count *)off_253D31DD0;
      *(_OWORD *)&qword_253D31DC8 = v20;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = (std::__shared_weak_count *)v80[1];
      if (v80[1])
      {
        v25 = (unint64_t *)((char *)v80[1] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v18 = qword_253D31DC8;
    }
    v27 = (std::__shared_weak_count *)off_253D31DD0;
    v77 = v18;
    v78 = off_253D31DD0;
    if (off_253D31DD0)
    {
      v28 = (unint64_t *)((char *)off_253D31DD0 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    __p = operator new(0x28uLL);
    v76 = xmmword_212B52800;
    strcpy((char *)__p, "Error: loading programmer items!");
    v80[0] = (void *)MEMORY[0x24BDAC760];
    v80[1] = (void *)0x40000000;
    v81 = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
    v82 = &__block_descriptor_tmp_6;
    v83 = v18;
    p_p = &__p;
    v85 = 66;
    v86 = v80;
    object = (dispatch_object_t)MEMORY[0x24BDAC760];
    v88 = 0x40000000;
    v89 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    v90 = &__block_descriptor_tmp_10;
    v91 = v18;
    v92 = &v86;
    v30 = *(NSObject **)(v18 + 16);
    if (*(_QWORD *)(v18 + 24))
    {
      dispatch_async_and_wait(v30, &object);
      if ((SHIBYTE(v76) & 0x80000000) == 0)
        goto LABEL_22;
    }
    else
    {
      dispatch_sync(v30, &object);
      if ((SHIBYTE(v76) & 0x80000000) == 0)
      {
LABEL_22:
        if (v27)
        {
          v31 = (unint64_t *)&v27->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v33 = 66;
        goto LABEL_60;
      }
    }
    operator delete(__p);
    goto LABEL_22;
  }
  BBUICE16Programmer::addItemsToHashmap((BBUICE16Programmer *)a1);
  if (a11 == 2)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Booted for coredump, not programming firmware");
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    v34 = qword_253D31DC8;
    if (!qword_253D31DC8)
    {
      v35 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
      object = 0;
      ctu::SharedSynchronizable<BBUError>::SharedSynchronizable(v35, "BBUError", QOS_CLASS_UTILITY, &object);
      if (object)
        dispatch_release(object);
      v35->__on_zero_shared_weak = 0;
      v35[1].~__shared_weak_count = 0;
      v35[1].~__shared_weak_count_0 = 0;
      std::shared_ptr<BBUError>::shared_ptr[abi:ne180100]<BBUError,std::shared_ptr<BBUError> ctu::SharedSynchronizable<BBUError>::make_shared_ptr<BBUError>(BBUError*)::{lambda(BBUError*)#1},void>((std::__shared_weak_count_vtbl **)v80, v35);
      v36 = *(_OWORD *)v80;
      v80[0] = 0;
      v80[1] = 0;
      v37 = (std::__shared_weak_count *)off_253D31DD0;
      *(_OWORD *)&qword_253D31DC8 = v36;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = (std::__shared_weak_count *)v80[1];
      if (v80[1])
      {
        v41 = (unint64_t *)((char *)v80[1] + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v34 = qword_253D31DC8;
    }
    v43 = (std::__shared_weak_count *)off_253D31DD0;
    v77 = v34;
    v78 = off_253D31DD0;
    if (off_253D31DD0)
    {
      v44 = (unint64_t *)((char *)off_253D31DD0 + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    __p = operator new(0x30uLL);
    v76 = xmmword_212B55620;
    strcpy((char *)__p, "Booted for coredump, not programming firmware");
    v80[0] = (void *)MEMORY[0x24BDAC760];
    v80[1] = (void *)0x40000000;
    v81 = ___ZN8BBUError8addErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE9BBUReturn_block_invoke;
    v82 = &__block_descriptor_tmp_6;
    v83 = v34;
    p_p = &__p;
    v85 = 28;
    v86 = v80;
    object = (dispatch_object_t)MEMORY[0x24BDAC760];
    v88 = 0x40000000;
    v89 = ___ZNK3ctu20SharedSynchronizableI8BBUErrorE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    v90 = &__block_descriptor_tmp_10;
    v91 = v34;
    v92 = &v86;
    v46 = *(NSObject **)(v34 + 16);
    if (*(_QWORD *)(v34 + 24))
    {
      dispatch_async_and_wait(v46, &object);
      if ((SHIBYTE(v76) & 0x80000000) == 0)
      {
LABEL_49:
        if (v43)
        {
          v47 = (unint64_t *)&v43->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        goto LABEL_54;
      }
    }
    else
    {
      dispatch_sync(v46, &object);
      if ((SHIBYTE(v76) & 0x80000000) == 0)
        goto LABEL_49;
    }
    operator delete(__p);
    goto LABEL_49;
  }
  if (a4)
  {
    v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 224))(a1, a2, v17, a5, 1, a10);
    goto LABEL_60;
  }
  v33 = BBUICE16Programmer::readPSIRunningMode(a1, &v79);
  if (!(_DWORD)v33)
  {
    switch(v79)
    {
      case 462:
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Running secure mode");
        v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 176))(a1, a2, v17, 0, 0, a10);
        if ((_DWORD)v33)
        {
          BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed executing secure mode, failing program\n");
          pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
          v54 = qword_253D31DC8;
          if (!qword_253D31DC8)
          {
            BBUError::create_default_global((std::__shared_weak_count_vtbl **)v80);
            std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_253D31DC8, (__int128 *)v80);
            std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)v80);
            v54 = qword_253D31DC8;
          }
          object = v54;
          v88 = (uint64_t)off_253D31DD0;
          if (off_253D31DD0)
          {
            v55 = (unint64_t *)((char *)off_253D31DD0 + 8);
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
          pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
          std::string::basic_string[abi:ne180100]<0>(v80, "Failed executing secure mode, failing program\n");
          goto LABEL_104;
        }
        v79 = 56577;
        break;
      case 56577:
        break;
      case 52480:
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Coredump detected, not programming firmware");
LABEL_54:
        v33 = 28;
        goto LABEL_60;
      default:
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "PSI is not running enhanced mode, unsupported firmware\n");
        pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        v57 = qword_253D31DC8;
        if (!qword_253D31DC8)
        {
          BBUError::create_default_global((std::__shared_weak_count_vtbl **)v80);
          std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_253D31DC8, (__int128 *)v80);
          std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)v80);
          v57 = qword_253D31DC8;
        }
        object = v57;
        v88 = (uint64_t)off_253D31DD0;
        if (off_253D31DD0)
        {
          v58 = (unint64_t *)((char *)off_253D31DD0 + 8);
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        std::string::basic_string[abi:ne180100]<0>(v80, "PSI is not running enhanced mode, unsupported firmware\n");
        BBUError::addError((uint64_t)v57, (uint64_t)v80, 9);
        if (SHIBYTE(v81) < 0)
          operator delete(v80[0]);
        std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&object);
        v33 = 9;
        goto LABEL_60;
    }
    v60 = (_QWORD *)(a1 + 256);
    if (!std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::find<std::string>((_QWORD *)(a1 + 192), a1 + 256))
    {
      v63 = *(BBUFeedback **)(a1 + 8);
      v64 = "EBL (%s) not found in item list!";
      if ((*(char *)(a1 + 279) & 0x80000000) == 0)
        goto LABEL_94;
      goto LABEL_93;
    }
    v80[0] = (void *)(a1 + 256);
    v61 = (const void *)std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 192, a1 + 256, (uint64_t)&std::piecewise_construct, (__int128 **)v80)[5];
    if (!v61
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE16Programmer.cpp", 0x34Cu, (ctu::LogMessageBuffer *)"Assertion failure(eblItem && \"Error: loading EBL item!\")", v71, v72, v73, v74);
    }
    if (*((_DWORD *)v62 + 6))
    {
      v63 = *(BBUFeedback **)(a1 + 8);
      v64 = "EBL (%s) exists, but  is of invalid type!";
      if ((*(char *)(a1 + 279) & 0x80000000) == 0)
      {
LABEL_94:
        BBUFeedback::handleComment(v63, v64, v60);
        v33 = 15;
        goto LABEL_60;
      }
LABEL_93:
      v60 = (_QWORD *)*v60;
      goto LABEL_94;
    }
    v33 = BBUICE16Programmer::sendEBL(a1, *((_QWORD *)v62 + 2));
    if (!(_DWORD)v33)
    {
      pthread_mutex_unlock(v16);
      v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
      if ((_DWORD)v33)
      {
        BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed image download!");
        pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        v67 = qword_253D31DC8;
        if (!qword_253D31DC8)
        {
          BBUError::create_default_global((std::__shared_weak_count_vtbl **)v80);
          std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_253D31DC8, (__int128 *)v80);
          std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)v80);
          v67 = qword_253D31DC8;
        }
        object = v67;
        v88 = (uint64_t)off_253D31DD0;
        if (off_253D31DD0)
        {
          v68 = (unint64_t *)((char *)off_253D31DD0 + 8);
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
        }
        pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
        std::string::basic_string[abi:ne180100]<0>(v80, "Failed image download!");
        BBUError::addError((uint64_t)v67, (uint64_t)v80, v33);
        if (SHIBYTE(v81) < 0)
          operator delete(v80[0]);
        std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&object);
      }
      pthread_mutex_lock(v16);
      goto LABEL_60;
    }
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed sending EBL!");
    pthread_mutex_lock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    v54 = qword_253D31DC8;
    if (!qword_253D31DC8)
    {
      BBUError::create_default_global((std::__shared_weak_count_vtbl **)v80);
      std::shared_ptr<BBUError>::operator=[abi:ne180100]((uint64_t)&qword_253D31DC8, (__int128 *)v80);
      std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)v80);
      v54 = qword_253D31DC8;
    }
    object = v54;
    v88 = (uint64_t)off_253D31DD0;
    if (off_253D31DD0)
    {
      v65 = (unint64_t *)((char *)off_253D31DD0 + 8);
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
    std::string::basic_string[abi:ne180100]<0>(v80, "Failed sending EBL!");
LABEL_104:
    BBUError::addError((uint64_t)v54, (uint64_t)v80, v33);
    if (SHIBYTE(v81) < 0)
      operator delete(v80[0]);
    std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&object);
  }
LABEL_60:
  if (a6)
  {
    if (a6[2])
    {
      v50 = *a6;
      v49 = (uint64_t *)a6[1];
      v51 = *v49;
      *(_QWORD *)(v51 + 8) = *(_QWORD *)(*a6 + 8);
      **(_QWORD **)(v50 + 8) = v51;
      a6[2] = 0;
      if (v49 != a6)
      {
        do
        {
          v52 = (uint64_t *)v49[1];
          operator delete(v49);
          v49 = v52;
        }
        while (v52 != a6);
      }
    }
    operator delete(a6);
  }
  pthread_mutex_unlock(v16);
  return v33;
}

void sub_212B16D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,dispatch_object_t object)
{
  pthread_mutex_t *v25;

  pthread_mutex_unlock(&ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance);
  pthread_mutex_unlock(v25);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16Programmer::collectCoreDump(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  int started;
  int v8;
  const char *v9;
  std::string __p;
  void *v12;
  int v13;

  v13 = -1431655766;
  v5 = operator new(0x1000uLL);
  bzero(v5, 0x1000uLL);
  v12 = 0;
  v6 = BBUICE16Programmer::readPSIRunningMode(a1, &v13);
  if (!(_DWORD)v6)
  {
    if (v13 > 56576)
    {
      if (v13 != 56577 && v13 != 61166)
        goto LABEL_11;
    }
    else if (v13 != 462 && v13 != 52480)
    {
LABEL_11:
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "PSI is not running supported mode, unsupported firmware\n");
      v6 = 9;
      goto LABEL_21;
    }
    BBUFeedback::handleBeginPhase(*(BBUFeedback **)(a1 + 8), "Collecting core dump...");
    started = KTLCDSendStartCoredumpCommand();
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed to get coredump list\n");
    if (started)
    {
      v6 = 0;
      v8 = 1;
    }
    else
    {
      v8 = 0;
      v6 = 3;
    }
    if (v8)
    {
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Sending 'end coredump' command\n");
      KTLCDSendEndCoredumpCommand();
    }
    v9 = (const char *)a3;
    if (*(char *)(a3 + 23) < 0)
      v9 = *(const char **)a3;
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Final coredump at %s", v9);
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      __p = *(std::string *)a3;
    ctu::fs::iterate_folder();
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_21:
  operator delete(v5);
  return v6;
}

void sub_212B17850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  void *v57;
  uint64_t v58;

  if (a57 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BFA3D0](a13);
  if (a40 < 0)
  {
    operator delete(a35);
    if (!a14)
    {
LABEL_5:
      if ((*(char *)(v58 - 153) & 0x80000000) == 0)
      {
LABEL_10:
        if (*(char *)(v58 - 121) < 0)
        {
          operator delete(*(void **)(v58 - 144));
          if ((*(char *)(v58 - 97) & 0x80000000) == 0)
          {
LABEL_12:
            if ((a28 & 0x80000000) == 0)
            {
LABEL_17:
              operator delete(v57);
              _Unwind_Resume(a1);
            }
LABEL_16:
            operator delete(a23);
            operator delete(v57);
            _Unwind_Resume(a1);
          }
        }
        else if ((*(char *)(v58 - 97) & 0x80000000) == 0)
        {
          goto LABEL_12;
        }
        operator delete(*(void **)(v58 - 120));
        if ((a28 & 0x80000000) == 0)
          goto LABEL_17;
        goto LABEL_16;
      }
LABEL_9:
      operator delete(*(void **)(v58 - 176));
      goto LABEL_10;
    }
  }
  else if (!a14)
  {
    goto LABEL_5;
  }
  operator delete(a14);
  if ((*(char *)(v58 - 153) & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18BBUICE16Programmer15collectCoreDumpEP13BBUDataSourceNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  timespec v4;
  const char *v5;
  int v6;
  std::string *v7;
  std::string v8;
  stat v9;

  v3 = *(_QWORD *)(a1 + 32);
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v9.st_blksize = v4;
  *(timespec *)v9.st_qspare = v4;
  v9.st_birthtimespec = v4;
  *(timespec *)&v9.st_size = v4;
  v9.st_mtimespec = v4;
  v9.st_ctimespec = v4;
  *(timespec *)&v9.st_uid = v4;
  v9.st_atimespec = v4;
  *(timespec *)&v9.st_dev = v4;
  v5 = (const char *)(a2 + 21);
  memset(&v8, 170, sizeof(v8));
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    v8 = *(std::string *)(a1 + 40);
  ctu::path_join_impl();
  v6 = *(unsigned __int8 *)(a2 + 20);
  if (v6 == 4)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(v3 + 8), "\t%-30s  <DIR>", v5);
  }
  else if (v6 == 10 || v6 == 8)
  {
    memset(&v9, 0, sizeof(v9));
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v8;
    else
      v7 = (std::string *)v8.__r_.__value_.__r.__words[0];
    stat((const char *)v7, &v9);
    BBUFeedback::handleComment(*(BBUFeedback **)(v3 + 8), "\t%-30s  0x%-10llx", v5, v9.st_size);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_212B17B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float BBUICE16Programmer::handleCapureProgress(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  float v4;
  float result;

  LODWORD(a4) = *a2;
  v4 = (double)*(unint64_t *)&a4 * 100.0 / (float)a2[1];
  BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "\t%s: ... %0.1f%c", (const char *)(a3 + 4), v4, 37);
  return result;
}

uint64_t BBUICE16Programmer::saveCoredumpEntry(uint64_t a1, const void **a2, uint64_t a3)
{
  __int128 v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t v7;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  std::string::size_type v14;
  std::string *v15;
  void *v16;
  char v17;
  void **p_p;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  char v38;
  std::string __dst;
  void *__p;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  _QWORD v48[5];

  v48[2] = *MEMORY[0x24BDAC8D0];
  v47 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v45 = v3;
  v46 = v3;
  v43 = v3;
  v44 = v3;
  v42 = v3;
  __p = 0;
  v41 = 0uLL;
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = v5 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = a3;
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v5 + 1;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    v7 = a3;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5 + 1;
    if (!v5)
      goto LABEL_15;
  }
  if (v4 >= 0)
    v13 = a2;
  else
    v13 = *a2;
  memmove(p_dst, v13, v5);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v5) = 47;
  v14 = strlen((const char *)(v7 + 4));
  v15 = std::string::append(&__dst, (const std::string::value_type *)(v7 + 4), v14);
  v16 = (void *)v15->__r_.__value_.__r.__words[0];
  v48[0] = v15->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v48 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
  v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v41) < 0)
    operator delete(__p);
  __p = v16;
  *(_QWORD *)&v41 = v48[0];
  *(_QWORD *)((char *)&v41 + 7) = *(_QWORD *)((char *)v48 + 7);
  HIBYTE(v41) = v17;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    v17 = HIBYTE(v41);
    v16 = __p;
  }
  if (v17 >= 0)
    p_p = &__p;
  else
    p_p = (void **)v16;
  v19 = open_dprotected_np((const char *)p_p, 1793, 4, 0, 420);
  if ((v19 & 0x80000000) == 0)
  {
    if ((TelephonyUtilTransportCreateWithFD() & 1) == 0)
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        v30 = 1;
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_48;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        v30 = 1;
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
          goto LABEL_48;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
        _BBULog(1, 0, "BBUProgrammer", "", "failed creating transport with fd %i\n", v20, v21, v22, v19);
      goto LABEL_48;
    }
    v23 = HIWORD(*(_DWORD *)v7);
    if ((unsigned __int16)*(_DWORD *)v7)
      ++v23;
    if (v23 >= 0x14)
      v24 = 20;
    else
      v24 = v23;
    if (v23)
      v25 = v24;
    else
      v25 = 1;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = *(_DWORD *)v7;
    LODWORD(__dst.__r_.__value_.__r.__words[1]) = v25;
    LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
    v29 = KTLCDProcessCoredumpEntry();
    if ((v29 & 1) == 0)
    {
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
          goto LABEL_35;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        {
LABEL_35:
          if ((gBBULogVerbosity & 0x80000000) == 0)
            _BBULog(1, 0, "BBUProgrammer", "", "failed getting entry\n", v26, v27, v28, v38);
        }
      }
    }
    v30 = v29 ^ 1u;
LABEL_48:
    close(v19);
    TelephonyUtilTransportFree();
    goto LABEL_49;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    v30 = 1;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_49;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v30 = 1;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      goto LABEL_49;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v31 = SHIBYTE(v41);
    v32 = (char)__p;
    __error();
    v36 = &__p;
    if (v31 < 0)
      LOBYTE(v36) = v32;
    v30 = 1;
    _BBULog(1, 0, "BBUProgrammer", "", "failed opening file %s with fd %i errno %d\n", v33, v34, v35, (char)v36);
  }
LABEL_49:
  if (SHIBYTE(v41) < 0)
    operator delete(__p);
  return v30;
}

void sub_212B180AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN18BBUICE16Programmer17saveCoredumpEntryENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP22KTLCoreDumpListEntry_ti_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 160))(*(_QWORD *)(a1 + 32));
}

uint64_t BBUICE16Programmer::gatherPersonalizationParameters(BBUICE16Programmer *this, BOOL a2, char a3, unsigned int *a4, BBUPersonalizationParameters *a5)
{
  BBUFeedback *v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BBUFeedback *v11;
  const char *v12;
  const UInt8 *v13;
  _QWORD *v14;
  const __CFAllocator *v15;
  _QWORD *v16;
  _QWORD *v17;
  const UInt8 *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  BBUFeedback *v23;
  void **v24;
  int v25;
  int v26;
  int v27;
  const char *v28;
  BBUFeedback *v29;
  void **v30;
  BBUFeedback *v31;
  void **v32;
  BBUFeedback *v33;
  int v34;
  void *__p[2];
  char v37;
  void *v38;
  int v39;

  v39 = 0;
  v38 = 0;
  v6 = (BBUFeedback *)*((_QWORD *)this + 1);
  if ((a3 & 1) != 0)
  {
    BBUFeedback::handleBeginPhase(v6, "Gathering Personalization parameters...");
    v8 = BBUICE16Programmer::readPSIRunningMode((uint64_t)this, &v39);
    v9 = v8;
    if (!(_DWORD)v8)
    {
      v10 = v39;
      if (v39 != 462)
      {
        v11 = (BBUFeedback *)*((_QWORD *)this + 1);
        v12 = (const char *)PSIModeDescription();
        BBUFeedback::handleComment(v11, "Unexpected running mode 0x%x (%s), cannot gather personalization params\n", v10, v12);
        v9 = 12;
LABEL_34:
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), v9);
        return v9;
      }
    }
    if ((_DWORD)v8)
      goto LABEL_34;
    v9 = (*(uint64_t (**)(BBUICE16Programmer *, void **))(*(_QWORD *)this + 232))(this, &v38);
    if ((_DWORD)v9)
      goto LABEL_34;
    v13 = (const UInt8 *)v38 + 20;
    v14 = operator new(0x10uLL);
    *v14 = off_24CE863A8;
    v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v14[1] = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v13, 20);
    v16 = BBUICEPersonalizationParameters::ICEChipID::createFromChipID((BBUICEPersonalizationParameters::ICEChipID *)*((unsigned __int16 *)v38 + 1));
    v17 = BBUICEPersonalizationParameters::ICESerialNumber::createFromSerialNumber((const UInt8 *)v38 + 8, (const unsigned __int8 *)0x60);
    v18 = (const UInt8 *)v38 + 40;
    v19 = operator new(0x10uLL);
    *v19 = off_24CE864C8;
    v19[1] = CFDataCreate(v15, v18, 32);
    v20 = *((_DWORD *)v38 + 1);
    *((_DWORD *)this + 46) = v20 - 2;
    BBUFeedback::handleComment(*((BBUFeedback **)this + 1), "Max root packet size from PSI: %u", v20);
    free(v38);
    v21 = *((_QWORD *)a5 + 1);
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    *((_QWORD *)a5 + 1) = v14;
    v22 = *((_QWORD *)a5 + 2);
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    *((_QWORD *)a5 + 2) = v16;
    (*(void (**)(BBUPersonalizationParameters *, _QWORD *))(*(_QWORD *)a5 + 16))(a5, v17);
    (*(void (**)(BBUPersonalizationParameters *, _QWORD *))(*(_QWORD *)a5 + 24))(a5, v19);
    if (!v17)
    {
LABEL_23:
      v29 = (BBUFeedback *)*((_QWORD *)this + 1);
      (*(void (**)(void **__return_ptr, _QWORD *))(*v14 + 24))(__p, v14);
      if (v37 >= 0)
        v30 = __p;
      else
        v30 = (void **)__p[0];
      BBUFeedback::handleComment(v29, "   NONCE: %s", (const char *)v30);
      if (v37 < 0)
        operator delete(__p[0]);
      v31 = (BBUFeedback *)*((_QWORD *)this + 1);
      (*(void (**)(void **__return_ptr, _QWORD *))(*v19 + 24))(__p, v19);
      if (v37 >= 0)
        v32 = __p;
      else
        v32 = (void **)__p[0];
      BBUFeedback::handleComment(v31, "   PUBLIC_KEY_HASH: %s", (const char *)v32);
      if (v37 < 0)
        operator delete(__p[0]);
      v33 = (BBUFeedback *)*((_QWORD *)this + 1);
      v34 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a5 + 3) + 24))(*((_QWORD *)a5 + 3));
      BBUFeedback::handleComment(v33, "   CertID: %u", v34);
      v9 = 0;
      goto LABEL_34;
    }
    v23 = (BBUFeedback *)*((_QWORD *)this + 1);
    (*(void (**)(void **__return_ptr, _QWORD *))(*v17 + 24))(__p, v17);
    if (v37 >= 0)
      v24 = __p;
    else
      v24 = (void **)__p[0];
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
    {
      if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
        goto LABEL_18;
    }
    else
    {
      dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
      if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
        goto LABEL_18;
    }
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
LABEL_18:
    v25 = BBUpdaterCommon::inRestoreOS(void)::restoreOS;
    v26 = BBUpdaterCommon::inRestoreOS(void)::recoveryOS;
    v27 = (*(uint64_t (**)(_QWORD *))(*v16 + 24))(v16);
    if (v25 | v26)
      v28 = (const char *)v24;
    else
      v28 = "<< SNUM >>";
    BBUFeedback::handleComment(v23, "   SNUM: 0x%s / CHIPID: 0x%08x", v28, v27);
    if (v37 < 0)
      operator delete(__p[0]);
    goto LABEL_23;
  }
  BBUFeedback::handleComment(v6, "Not in restore mode - skipping gathering Personalization parameters...");
  return 0;
}

void sub_212B184DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BBUICE16Programmer::handleICETestModeVector(BBUICE16Programmer *this)
{
  return 0;
}

uint64_t BBUICE16Programmer::fetchPersonalizationParameters(uint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = operator new(0x4CuLL);
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  *(_OWORD *)((char *)v2 + 60) = 0u;
  if ((KTLPSIFormatEnhancedCommand() & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed formatting PSI enhanced command to retrieve personalization info\n");
    v6 = 11;
    goto LABEL_15;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 1) & 2) == 0)
      goto LABEL_6;
  }
  if (gBBULogVerbosity >= 1)
    _BBULog(9, 1, "BBUProgrammer", "", "Sending PSI enhanced command 'Fetch security/personalization info'\n", v3, v4, v5, v8);
LABEL_6:
  if (!KTLPSISendEnhancedCommand())
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed sending PSI command to fetch security info\n");
LABEL_14:
    v6 = 3;
    goto LABEL_15;
  }
  if (!KTLRawReceiveData())
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed receiving personalization parameters from device\n");
    goto LABEL_14;
  }
  if ((KTLParsePSIICEPersonalizionInfo() & 1) == 0)
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed parsing personalization parameters\n");
    goto LABEL_14;
  }
  v6 = 0;
LABEL_15:
  operator delete(v2);
  return v6;
}

void sub_212B186A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16Programmer::handleICESecurePSIMode(BBUFeedback **a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  const UInt8 *v12;
  const __CFData **v13;
  const __CFAllocator *v14;
  _QWORD *v15;
  const UInt8 *v16;
  const __CFData **v17;
  void **v18;
  int v19;
  int v20;
  int v21;
  const char *v22;
  BBUFeedback *v23;
  void **v24;
  BBUFeedback *v25;
  void **v26;
  void **v28;
  BBUFeedback *v29;
  int v30;
  _QWORD *v31;
  void *__p[2];
  char v33;
  void *v34;

  v34 = 0;
  if ((a4 & 1) != 0)
    return 3;
  v6 = (*((uint64_t (**)(BBUFeedback **, void **))*a1 + 29))(a1, &v34);
  if (!(_DWORD)v6)
  {
    v30 = *((_DWORD *)v34 + 1);
    BBUFeedback::handleComment(a1[1], "Setting max root packet size from PSI: %u", v30);
    v12 = (const UInt8 *)v34 + 20;
    v13 = (const __CFData **)operator new(0x10uLL);
    *v13 = (const __CFData *)off_24CE863A8;
    v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v13[1] = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v12, 20);
    v31 = BBUICEPersonalizationParameters::ICEChipID::createFromChipID((BBUICEPersonalizationParameters::ICEChipID *)*((unsigned __int16 *)v34 + 1));
    v15 = BBUICEPersonalizationParameters::ICESerialNumber::createFromSerialNumber((const UInt8 *)v34 + 8, (const unsigned __int8 *)0x60);
    v16 = (const UInt8 *)v34 + 40;
    v17 = (const __CFData **)operator new(0x10uLL);
    *v17 = (const __CFData *)off_24CE864C8;
    v17[1] = CFDataCreate(v14, v16, 32);
    if (!v15)
    {
LABEL_14:
      v23 = a1[1];
      BBUICEPersonalizationParameters::ICENonce::getAsString(v13, (const __CFData *)__p);
      if (v33 >= 0)
        v24 = __p;
      else
        v24 = (void **)__p[0];
      BBUFeedback::handleComment(v23, "   NONCE: %s", (const char *)v24);
      if (v33 < 0)
        operator delete(__p[0]);
      (*((void (**)(const __CFData **))*v13 + 1))(v13);
      v25 = a1[1];
      BBUICEPersonalizationParameters::ICEPublicKeyHash::getAsString(v17, (const __CFData *)__p);
      if (v33 >= 0)
        v26 = __p;
      else
        v26 = (void **)__p[0];
      BBUFeedback::handleComment(v25, "   PUBLIC_KEY_HASH: %s", (const char *)v26);
      if (v33 < 0)
        operator delete(__p[0]);
      a3 = (v30 - 2);
      (*((void (**)(const __CFData **))*v17 + 1))(v17);
      if (v15)
        (*(void (**)(_QWORD *))(*v15 + 8))(v15);
      (*(void (**)(_QWORD *))(*v31 + 8))(v31);
      goto LABEL_27;
    }
    v29 = a1[1];
    (*(void (**)(void **__return_ptr, _QWORD *))(*v15 + 24))(__p, v15);
    if (v33 >= 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    v28 = v18;
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
    {
      if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
      {
LABEL_10:
        v19 = BBUpdaterCommon::inRestoreOS(void)::restoreOS;
        v20 = BBUpdaterCommon::inRestoreOS(void)::recoveryOS;
        v21 = (*(uint64_t (**)(_QWORD *))(*v31 + 24))(v31);
        v22 = (const char *)v28;
        if (!(v19 | v20))
          v22 = "<< SNUM >>";
        BBUFeedback::handleComment(v29, "   SNUM: 0x%s / CHIPID: 0x%08x", v22, v21);
        if (v33 < 0)
          operator delete(__p[0]);
        goto LABEL_14;
      }
    }
    else
    {
      dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
      if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
        goto LABEL_10;
    }
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
    goto LABEL_10;
  }
LABEL_27:
  if (v34)
  {
    free(v34);
    v34 = 0;
  }
  if (!(_DWORD)v6)
    return (*((uint64_t (**)(BBUFeedback **, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))*a1 + 28))(a1, a2, a3, a5, 0, a6);
  return v6;
}

void sub_212B18A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BBUICE16Programmer::finishSecurePSIMode(BBUFeedback **a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, _BYTE *a6)
{
  unsigned int v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  char *v15;
  BOOL v16;
  unsigned int v17;
  _WORD *v18;
  int v19;
  BBUFeedback *v20;
  void **v21;
  void *exception;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _BYTE *v28;
  void *__p[2];
  char v30;
  unsigned __int8 *md;
  unsigned __int8 *v32;
  char *v33;
  unsigned int v34;

  v34 = 0;
  if (a5)
    BBUFeedback::handleComment(a1[1], "Resuming Secure Mode");
  if (a2)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    if (v11 > a3)
    {
      BBUFeedback::handleComment(a1[1], "root manifest size larger than protocol specification %u, size = %u bytes", a3, v11);
      return 12;
    }
  }
  else
  {
    v11 = a3;
  }
  v13 = v11;
  if (v11)
  {
    v14 = operator new(v11);
    bzero(v14, v13);
  }
  else
  {
    v14 = 0;
  }
  v15 = (char *)operator new(0x20uLL);
  v32 = (unsigned __int8 *)(v15 + 32);
  v33 = v15 + 32;
  *(_OWORD *)v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  md = (unsigned __int8 *)v15;
  if (!a2)
  {
    BBUFeedback::handleComment(a1[1], "No root manifest present\n");
    bzero(v14, v13);
    v17 = v13 + 1024;
    v28 = a6;
    if ((_DWORD)v13 != -1024)
    {
      v12 = 3;
      v16 = 1;
LABEL_18:
      v18 = operator new(v17);
      bzero(v18, v17);
      if (!v16)
        goto LABEL_35;
      goto LABEL_23;
    }
LABEL_22:
    v18 = 0;
LABEL_23:
    *v18 = v13;
    memcpy(v18 + 1, v14, v13);
    CC_SHA256(v14, v13, md);
    v19 = KTLRawSendData();
    v20 = a1[1];
    if (v19)
    {
      ctu::hex();
      if (v30 >= 0)
        v21 = __p;
      else
        v21 = (void **)__p[0];
      BBUFeedback::handleComment(v20, "Sent Manifest with length %u SHA256 Hash %s", v13, (const char *)v21);
      if (v30 < 0)
        operator delete(__p[0]);
      if ((KTLRawReceiveData() & 1) != 0)
      {
        v12 = (*((uint64_t (**)(BBUFeedback **, _WORD *, _QWORD, uint64_t, uint64_t))*a1 + 30))(a1, v18, v34, a2, a4);
        if ((_DWORD)v12)
        {
          BBUFeedback::handleComment(a1[1], "failed handling hash response\n");
        }
        else
        {
          *v28 = 1;
          LOWORD(__p[0]) = 3777;
          if ((KTLRawSendData() & 1) != 0)
          {
            BBUFeedback::handleComment(a1[1], "finished secure mode\n");
            v12 = 0;
          }
          else
          {
            BBUFeedback::handleComment(a1[1], "failed sending mode end packet\n");
            v12 = 11;
          }
        }
        goto LABEL_35;
      }
      BBUFeedback::handleComment(a1[1], "failed reading hash results\n");
    }
    else
    {
      BBUFeedback::handleComment(v20, "failed sending root manifest data\n");
    }
    v12 = 3;
LABEL_35:
    operator delete(v18);
    goto LABEL_36;
  }
  LODWORD(__p[0]) = 0;
  v12 = (*(uint64_t (**)(uint64_t, void *, size_t, void **, _QWORD))(*(_QWORD *)a2 + 16))(a2, v14, v13, __p, 0);
  v16 = (_DWORD)v12 == 0;
  if ((_DWORD)v12)
    BBUFeedback::handleComment(a1[1], "failed copying root manifest to buffer\n");
  if (LODWORD(__p[0]) != (_DWORD)v13)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 11, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICE16Programmer.cpp", 0x5ACu, (ctu::LogMessageBuffer *)"Assertion failure(copied == rootManifestSize && \"failed copying root manifest to buffer\")", v24, v25, v26, v27);
  }
  v17 = v13 + 1024;
  if ((_DWORD)v13 != -1024)
  {
    v28 = a6;
    goto LABEL_18;
  }
  if (!(_DWORD)v12)
  {
    v28 = a6;
    goto LABEL_22;
  }
LABEL_36:
  if (md)
  {
    v32 = md;
    operator delete(md);
  }
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_212B18DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19)
{
  void *v19;
  void *v20;

  operator delete(v20);
  if (__p)
  {
    operator delete(__p);
    if (!v19)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!v19)
  {
    goto LABEL_3;
  }
  operator delete(v19);
  _Unwind_Resume(a1);
}

void BBUICE16Programmer::getHashVerifiedFiles(BBUICE16Programmer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  __int128 v9;
  std::string *v10;
  __int128 *v11;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *((_QWORD *)this + 29);
  v3 = *((_QWORD *)this + 30);
  v4 = v3 - v2;
  if (v3 != v2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4);
    v8 = 0;
    *a2 = v7;
    a2[1] = v7;
    a2[2] = &v7[24 * v6];
    do
    {
      v10 = (std::string *)&v7[v8];
      v11 = (__int128 *)(v2 + v8);
      if (*(char *)(v2 + v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
      }
      else
      {
        v9 = *v11;
        v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v9;
      }
      v8 += 24;
    }
    while (v2 + v8 != v3);
    a2[1] = &v7[v8];
  }
}

void sub_212B18F0C(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v3;
  void **v4;
  void *v5;

  v3 = (void **)*v1;
  if (*v1)
  {
    v4 = (void **)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BBUICE16Programmer::handleHashResponse(uint64_t a1, const void *a2, int a3, uint64_t a4, uint64_t a5)
{
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  const char *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  const char *v16;
  size_t v17;
  size_t v18;
  __int128 *p_dst;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  __int128 __dst;
  unint64_t v29;
  void *v30;

  v30 = 0;
  if (a2 && a3)
  {
    v8 = KTLParsePSIICEHashResponse();
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Failed parsing hash response\n");
    v9 = 12;
    v10 = v30;
    if (v8)
    {
      v26 = a5;
      v27 = a4;
      BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Received hash response, %d entries", *((_DWORD *)v30 + 1));
      v11 = operator new(0x20uLL);
      BBUICE16HashData::BBUICE16HashData(v11, *((_DWORD *)v30 + 1), (char *)v30 + 8);
      v12 = (const char *)v30;
      if (*((_DWORD *)v30 + 1))
      {
        v13 = 0;
        v14 = 8;
        do
        {
          v16 = &v12[v14];
          v17 = strlen(&v12[v14]);
          if (v17 >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:ne180100]();
          v18 = v17;
          if (v17 >= 0x17)
          {
            v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v17 | 7) != 0x17)
              v21 = v17 | 7;
            v22 = v21 + 1;
            p_dst = (__int128 *)operator new(v21 + 1);
            *((_QWORD *)&__dst + 1) = v18;
            v29 = v22 | 0x8000000000000000;
            *(_QWORD *)&__dst = p_dst;
          }
          else
          {
            HIBYTE(v29) = v17;
            p_dst = &__dst;
            if (!v17)
            {
              LOBYTE(__dst) = 0;
              v20 = *(_QWORD *)(a1 + 240);
              if (v20 >= *(_QWORD *)(a1 + 248))
                goto LABEL_19;
              goto LABEL_8;
            }
          }
          memmove(p_dst, v16, v18);
          *((_BYTE *)p_dst + v18) = 0;
          v20 = *(_QWORD *)(a1 + 240);
          if (v20 >= *(_QWORD *)(a1 + 248))
          {
LABEL_19:
            v23 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)(a1 + 232), (uint64_t)&__dst);
            v24 = SHIBYTE(v29);
            *(_QWORD *)(a1 + 240) = v23;
            if (v24 < 0)
              operator delete((void *)__dst);
            goto LABEL_9;
          }
LABEL_8:
          v15 = __dst;
          *(_QWORD *)(v20 + 16) = v29;
          *(_OWORD *)v20 = v15;
          *(_QWORD *)(a1 + 240) = v20 + 24;
LABEL_9:
          ++v13;
          v12 = (const char *)v30;
          v14 += 96;
        }
        while (v13 < *((unsigned int *)v30 + 1));
      }
      if (v27)
      {
        v9 = 12;
        if (v26)
        {
          (*(void (**)(_QWORD *, _QWORD))(*v11 + 24))(v11, *(_QWORD *)(a1 + 8));
          if (((*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v11 + 16))(v11, *(_QWORD *)(a1 + 8), v26) & 1) == 0)
          {
            BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "root manifest hash data mismatches baseband hash response\n");
            v9 = 33;
          }
        }
      }
      else
      {
        v9 = 12;
      }
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
      v10 = v30;
    }
    if (v10)
      free(v10);
  }
  else
  {
    BBUFeedback::handleComment(*(BBUFeedback **)(a1 + 8), "Bad arguments:  packet = %p\n", a2);
    return 2;
  }
  return v9;
}

void sub_212B19214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  _Unwind_Resume(a1);
}

void BBUICE16Programmer::ICE16Item::~ICE16Item(void **this)
{
  *this = off_24CE84340;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
}

{
  BBUICE16Programmer::ICE16Item *v1;

  v1 = (BBUICE16Programmer::ICE16Item *)this;
  *this = off_24CE84340;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    this = (void **)v1;
  }
  operator delete(this);
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  void **v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  __int128 v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[3];

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v13 = v9;
      if (v9 >= v11)
        v13 = v9 % v11;
    }
    else
    {
      v13 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v13);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v5[23];
        if (v16 >= 0)
          v17 = v5[23];
        else
          v17 = *((_QWORD *)v5 + 1);
        if (v16 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = *((_QWORD *)v15 + 1);
            if (v22 == v10)
            {
              v23 = v15[39];
              if ((v23 & 0x80u) == 0)
                v24 = v15[39];
              else
                v24 = *((_QWORD *)v15 + 3);
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v5, *((_QWORD *)v15 + 3)))
                    return v15;
                }
                else
                {
                  if (!v15[39])
                    return v15;
                  v25 = 0;
                  while (v15[v25 + 16] == v5[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v13)
            {
              goto LABEL_51;
            }
            v15 = *(unsigned __int8 **)v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v10)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v5, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v5[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v11)
              v18 %= v11;
            if (v18 != v13)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
  else
  {
    v13 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_51:
  v26 = (_QWORD *)(a1 + 16);
  v44[2] = 0xAAAAAAAAAAAAAA01;
  v15 = (unsigned __int8 *)operator new(0x30uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  v27 = *a4;
  v28 = **a4;
  *((_QWORD *)v15 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((_QWORD *)v27 + 1) = 0;
  *((_QWORD *)v27 + 2) = 0;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v15 + 5) = 0;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v11 && (float)(v30 * (float)v11) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v15 = *v32;
LABEL_89:
      *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v11 >= 3)
      v33 = (v11 & (v11 - 1)) != 0;
    v34 = v33 | (2 * v11);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v41 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v13 = v10 % v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v13 = v10;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v13 = v41 & v10;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v10));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v15 = *v26;
  *v26 = v15;
  *(_QWORD *)(v31 + 8 * v13) = v26;
  if (*(_QWORD *)v15)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v42 >= v11)
        v42 %= v11;
    }
    else
    {
      v42 &= v11 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_212B19840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,BBUProgrammer::Item *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,BBUProgrammer::Item *>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,BBUProgrammer::Item *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,BBUProgrammer::Item *>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  unint64_t v46;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v13 = v9;
      if (v9 >= v11)
        v13 = v9 % v11;
    }
    else
    {
      v13 = (v11 - 1) & v9;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v13);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v5[23];
        if (v16 >= 0)
          v17 = v5[23];
        else
          v17 = *((_QWORD *)v5 + 1);
        if (v16 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v10)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v5, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v5[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v13)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v10)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v5, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v5[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v11)
              v18 %= v11;
            if (v18 != v13)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
  else
  {
    v13 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_51:
  v46 = 0xAAAAAAAAAAAAAA00;
  v26 = operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  *v26 = 0;
  v26[1] = v10;
  v27 = (std::string *)(v26 + 2);
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  LOBYTE(v46) = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v11 || (float)(v31 * (float)v11) < v30)
  {
    v34 = 1;
    if (v11 >= 3)
      v34 = (v11 & (v11 - 1)) != 0;
    v35 = v34 | (2 * v11);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        std::__hash_table<std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BBUProgrammer::Item *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BBUProgrammer::Item *>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v42 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v13 = v10 % v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v13 = v10;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v13 = v42 & v10;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v10));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v43 >= v11)
          v43 %= v11;
      }
      else
      {
        v43 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_212B1A0CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,BBUProgrammer::Item *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,BBUProgrammer::Item *>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_212B1A0E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,BBUProgrammer::Item *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,BBUProgrammer::Item *>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_20()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUError>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUError,BBUError,ctu::PthreadMutexGuardPolicy<BBUError>>::sInstance, &dword_212A4D000);
  }
  return result;
}

void BBUICEDownloadImage::~BBUICEDownloadImage(BBUICEDownloadImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24CE84488;
  v2 = *((_QWORD *)this + 5);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24CE84488;
  v2 = *((_QWORD *)this + 5);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  operator delete(this);
}

uint64_t BBUICEDownloadImage::getWritePayloadData(BBUICEDownloadImage *this, unsigned __int8 *a2, uint64_t a3, unsigned int a4)
{
  uint64_t result;
  void *exception;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;

  if ((*(unsigned int (**)(BBUICEDownloadImage *))(*(_QWORD *)this + 32))(this) <= a4)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 81, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/ICE/BBUICEDownloadImage.cpp", 0x1Du, (ctu::LogMessageBuffer *)"Assertion failure(( offset < getWritePayloadLength()) && \"Error: Chunk size is not sufficient to write payload data of the download image.\")", v10, v11, v12, v19);
    goto LABEL_8;
  }
  v20 = -1431655766;
  result = (*(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t, int *, _QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), a2, a3, &v20, *((_DWORD *)this + 8) + a4);
  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 81, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/ICE/BBUICEDownloadImage.cpp", 0x20u, (ctu::LogMessageBuffer *)"Assertion failure((ret == kBBUReturnSuccess) && \"Failed to copy image payload data to buffer!\")", v13, v14, v15, v19);
    goto LABEL_8;
  }
  if (v20 != (_DWORD)a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 81, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/ICE/BBUICEDownloadImage.cpp", 0x21u, (ctu::LogMessageBuffer *)"Assertion failure((amountCopied == amount) && \"Copied data size mismatch: Failed to copy image payload data to buffer!\")", v16, v17, v18, v19);
LABEL_8:
  }
  return result;
}

void sub_212B1A310(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B1A324(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B1A338(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUICEDownloadImage::getName(BBUICEDownloadImage *this)
{
  uint64_t result;

  result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t BBUICEDownloadImage::getWritePayloadLength(BBUICEDownloadImage *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t BBUICEDownloadImage::getOpenPayloadData(BBUICEDownloadImage *this)
{
  return 0;
}

uint64_t BBUICEDownloadImage::getOpenPayloadLength(BBUICEDownloadImage *this)
{
  return 0;
}

void BBUICEDownloadImage::generateHash(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v3;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (v3)
      BBUDataSource::generateHash(v3, a2, a3);
  }
}

void BBUEURLoaderVersion::~BBUEURLoaderVersion(void **this)
{
  *this = off_24CE844F0;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  BBUEURLoaderVersion *v1;

  v1 = (BBUEURLoaderVersion *)this;
  *this = off_24CE844F0;
  if (*((char *)this + 39) < 0)
  {
    operator delete(this[2]);
    this = (void **)v1;
  }
  operator delete(this);
}

void BBUEURLoaderVersion::getAsString(BBUEURLoaderVersion *this@<X0>, std::string *a2@<X8>)
{
  int v4;
  size_t v5;
  const std::string::value_type *v6;
  char *v7;
  const std::string::value_type *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  void *exception;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string __p;
  _QWORD __src[2];
  uint64_t v19;

  __src[0] = 0;
  __src[1] = 0;
  v19 = 0;
  v4 = *((_DWORD *)this + 2);
  if (v4 == 2)
  {
    v5 = 3;
    HIBYTE(v19) = 3;
    qmemcpy(__src, "PBL", 3);
  }
  else
  {
    if (v4 != 1)
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 75, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/FirmwareVersion/Eureka/BBUEURLoaderVersion.cpp", 0x1Cu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized BBU loader version type!\")", v14, v15, v16, __p.__r_.__value_.__s.__data_[0]);
    }
    v5 = 4;
    HIBYTE(v19) = 4;
    LODWORD(__src[0]) = 1279415119;
  }
  memset(&__p, 0, sizeof(__p));
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v5 + 1;
  memcpy(&__p, __src, v5);
  *(_WORD *)((unint64_t)&__p | v5) = 45;
  v8 = (const std::string::value_type *)*((_QWORD *)this + 2);
  v7 = (char *)this + 16;
  v6 = v8;
  v9 = v7[23];
  if (v9 >= 0)
    v10 = v7;
  else
    v10 = v6;
  if (v9 >= 0)
    v11 = v7[23];
  else
    v11 = *((_QWORD *)v7 + 1);
  v12 = std::string::append(&__p, v10, v11);
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_212B1A588(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B1A59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BBUEURLoaderVersion::getAsFilename(BBUEURLoaderVersion *this)
{
  void *exception;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  exception = __cxa_allocate_exception(0x210uLL);
  _BBUException::_BBUException((uint64_t)exception, 75, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/FirmwareVersion/Eureka/BBUEURLoaderVersion.cpp", 0x24u, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized BBU loader version type!\")", v2, v3, v4, v5);
}

void sub_212B1A604(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURLoaderVersion::parseVersionString(uint64_t a1, const void **__s1)
{
  const void **v2;
  size_t v4;
  size_t v5;
  int v6;
  size_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  size_t v16;
  int v17;
  void **v19;
  __int128 v20;
  size_t v21;
  int v22;
  unint64_t v24;
  const void *v25;
  void *v26;
  size_t v27;
  unint64_t v28;
  size_t v29;
  __int128 *p_dst;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 __dst;
  unint64_t v36;
  void *__p[2];
  uint64_t v38;
  void *__s2[2];
  uint64_t v40;

  v2 = __s1;
  __s2[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v40 = 0x3AAAAAAAAAAAAAALL;
  v38 = 0x4AAAAAAAAAAAAAALL;
  __s2[0] = (void *)0xAAAAAAAA00323651;
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAA005F4C4250;
  v4 = *((unsigned __int8 *)__s1 + 23);
  if ((*((char *)__s1 + 23) & 0x80000000) == 0)
  {
    if (v4 >= 3)
      v5 = 3;
    else
      v5 = *((unsigned __int8 *)__s1 + 23);
    v6 = memcmp(__s1, __s2, v5);
    if (v5 != 3 || v6 != 0)
      goto LABEL_9;
LABEL_32:
    v19 = (void **)(a1 + 16);
    if ((const void **)(a1 + 16) != v2)
    {
      if (*(char *)(a1 + 39) < 0)
      {
        if ((v4 & 0x80u) == 0)
          v26 = v2;
        else
          v26 = (void *)*v2;
        if ((v4 & 0x80u) == 0)
          v27 = v4;
        else
          v27 = (size_t)v2[1];
        std::string::__assign_no_alias<false>(v19, v26, v27);
      }
      else if ((v4 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v19, (void *)*v2, (size_t)v2[1]);
      }
      else
      {
        v20 = *(_OWORD *)v2;
        *(_QWORD *)(a1 + 32) = v2[2];
        *(_OWORD *)v19 = v20;
      }
    }
    v14 = 0;
    *(_DWORD *)(a1 + 8) = 1;
    goto LABEL_76;
  }
  if ((unint64_t)__s1[1] >= 3)
    v16 = 3;
  else
    v16 = (size_t)__s1[1];
  v17 = memcmp(*__s1, __s2, v16);
  if (v16 == 3 && v17 == 0)
    goto LABEL_32;
LABEL_9:
  if ((v4 & 0x80) != 0)
  {
    if ((unint64_t)v2[1] >= 4)
      v21 = 4;
    else
      v21 = (size_t)v2[1];
    v22 = memcmp(*v2, __p, v21);
    if (v21 != 4 || v22 != 0)
      goto LABEL_17;
LABEL_44:
    v24 = (unint64_t)v2[1];
    if ((v4 & 0x80u) == 0)
      v25 = (const void *)v4;
    else
      v25 = v2[1];
    if ((v4 & 0x80) != 0)
    {
      if (v24 < 4)
        goto LABEL_81;
      v2 = (const void **)*v2;
      v4 = v24;
    }
    else if (v4 <= 3)
    {
LABEL_81:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    v28 = (unint64_t)v25 - 4;
    if (v4 - 4 >= v28)
      v29 = v28;
    else
      v29 = v4 - 4;
    if (v29 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v29 >= 0x17)
    {
      v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17)
        v32 = v29 | 7;
      v33 = v32 + 1;
      p_dst = (__int128 *)operator new(v32 + 1);
      *((_QWORD *)&__dst + 1) = v29;
      v36 = v33 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v36) = v29;
      p_dst = &__dst;
      if (!v29)
      {
        LOBYTE(__dst) = 0;
        v31 = a1 + 16;
        if ((*(char *)(a1 + 39) & 0x80000000) == 0)
        {
LABEL_66:
          *(_OWORD *)v31 = __dst;
          *(_QWORD *)(v31 + 16) = v36;
          *(_DWORD *)(a1 + 8) = 2;
          if (SHIBYTE(v38) < 0)
            operator delete(__p[0]);
          v14 = 0;
          goto LABEL_76;
        }
LABEL_73:
        operator delete(*(void **)v31);
        goto LABEL_66;
      }
    }
    memmove(p_dst, (char *)v2 + 4, v29);
    *((_BYTE *)p_dst + v29) = 0;
    v31 = a1 + 16;
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      goto LABEL_66;
    goto LABEL_73;
  }
  if (v4 >= 4)
    v8 = 4;
  else
    v8 = v4;
  v9 = memcmp(v2, __p, v8);
  if (v8 == 4 && v9 == 0)
    goto LABEL_44;
LABEL_17:
  if (gBBULogMaskGet(void)::once == -1)
  {
    v14 = 2;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 4) == 0)
      goto LABEL_76;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v14 = 2;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 4) == 0)
      goto LABEL_76;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    if (*((char *)v2 + 23) >= 0)
      LOBYTE(v15) = (_BYTE)v2;
    else
      v15 = (void *)*v2;
    _BBULog(18, 0, "BBULoaderVersion", "", "Unrecognized string %s\n", v10, v11, v12, (char)v15);
  }
LABEL_76:
  if (SHIBYTE(v40) < 0)
    operator delete(__s2[0]);
  return v14;
}

uint64_t BBUEURLoaderVersion::isNewerThan()
{
  return 0;
}

uint64_t BBUEURLoaderVersion::isEqualTo()
{
  return 1;
}

void eUICC::Source::CreateFromZip(uint64_t *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count_vtbl *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v4 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  v5 = v4;
  v6 = (std::__shared_weak_count *)a1[1];
  v12 = *a1;
  v13 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  eUICC::Source::Source(v4, (uint64_t)&v12);
  std::shared_ptr<eUICC::Source>::shared_ptr[abi:ne180100]<eUICC::Source,void>(a2, v5);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_212B1AA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_212B1AA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

_QWORD *eUICC::Source::Source(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  _QWORD *i;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  size_t v26;
  _QWORD **p_dst;
  void **v28;
  const void **v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD **v34;
  _QWORD *__dst;
  _QWORD *v37;
  int64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *__p[2];
  __int128 v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  a1[3] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v46 = 0xAAAAAAAAAAAAAAAALL;
  v56 = v7;
  v55 = v7;
  v54 = v7;
  v53 = v7;
  v52 = v7;
  v51 = v7;
  v50 = v7;
  v49 = v7;
  v48 = v7;
  v45 = v7;
  *(_OWORD *)__p = v7;
  v43 = v7;
  v42 = v7;
  v41 = v7;
  v40 = v7;
  v8 = MEMORY[0x24BEDB870];
  v9 = MEMORY[0x24BEDB870] + 64;
  v47 = MEMORY[0x24BEDB870] + 64;
  v10 = (uint64_t *)MEMORY[0x24BEDB800];
  v11 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v39 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v39 + *(_QWORD *)(v39 - 24)) = v11;
  v12 = (std::ios_base *)((char *)&v39 + *(_QWORD *)(v39 - 24));
  std::ios_base::init(v12, &v40);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v39 = v8 + 24;
  v47 = v9;
  std::streambuf::basic_streambuf();
  v13 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v40 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v45 = 0u;
  LODWORD(v46) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"==== eUICC Source ====\n", 23);
  BBUZipFile::getFileList(*(BBUZipFile **)a2, &__dst);
  for (i = v37; i != &__dst; i = (_QWORD *)i[1])
  {
    v15 = *((char *)i + 39);
    if (v15 >= 0)
      v16 = (uint64_t)(i + 2);
    else
      v16 = i[2];
    if (v15 >= 0)
      v17 = *((unsigned __int8 *)i + 39);
    else
      v17 = i[3];
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
  }
  if (v38)
  {
    v19 = __dst;
    v20 = (void **)v37;
    v21 = *v37;
    *(_QWORD *)(v21 + 8) = __dst[1];
    *(_QWORD *)v19[1] = v21;
    v38 = 0;
    if (v20 != (void **)&__dst)
    {
      do
      {
        v28 = (void **)v20[1];
        if (*((char *)v20 + 39) < 0)
          operator delete(v20[2]);
        operator delete(v20);
        v20 = v28;
      }
      while (v28 != (void **)&__dst);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"====================\n", 21);
  if (gBBULogMaskGet(void)::once != -1)
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v25 = v46;
    if ((v46 & 0x10) == 0)
      goto LABEL_16;
LABEL_23:
    v30 = *((_QWORD *)&v45 + 1);
    if (*((_QWORD *)&v45 + 1) < (unint64_t)v43)
    {
      *((_QWORD *)&v45 + 1) = v43;
      v30 = v43;
    }
    v29 = (const void **)&v42 + 1;
    goto LABEL_26;
  }
  v25 = v46;
  if ((v46 & 0x10) != 0)
    goto LABEL_23;
LABEL_16:
  if ((v25 & 8) == 0)
  {
    v26 = 0;
    HIBYTE(v38) = 0;
    p_dst = &__dst;
    goto LABEL_34;
  }
  v29 = (const void **)&v41;
  v30 = v42;
LABEL_26:
  v31 = *v29;
  v26 = v30 - (_QWORD)*v29;
  if (v26 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v26 >= 0x17)
  {
    v32 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v32 = v26 | 7;
    v33 = v32 + 1;
    p_dst = (_QWORD **)operator new(v32 + 1);
    v37 = (_QWORD *)v26;
    v38 = v33 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_33;
  }
  HIBYTE(v38) = v30 - *(_BYTE *)v29;
  p_dst = &__dst;
  if (v26)
LABEL_33:
    memmove(p_dst, v31, v26);
LABEL_34:
  *((_BYTE *)p_dst + v26) = 0;
  v34 = &__dst;
  if (v38 < 0)
    LOBYTE(v34) = (_BYTE)__dst;
  _BBULog(22, 0xFFFFFFFFLL, "eUICC::Source", "", "%s", v22, v23, v24, (char)v34);
  if (SHIBYTE(v38) < 0)
    operator delete(__dst);
  v39 = *v10;
  *(uint64_t *)((char *)&v39 + *(_QWORD *)(v39 - 24)) = v10[3];
  *(_QWORD *)&v40 = v13 + 16;
  if (SBYTE7(v45) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BFA3D0](&v47);
  return a1;
}

void sub_212B1AE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v19;

  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v17);
  v19 = *(std::__shared_weak_count **)(v16 + 8);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  _Unwind_Resume(a1);
}

void eUICC::Source::GetMainFirmware(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const char *v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  void *__dst[3];

  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
      v5 = *(const char **)a2;
    else
      v5 = "vinyl";
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    v5 = (const char *)a2;
  }
  else
  {
    v5 = "vinyl";
  }
  memset(__dst, 170, sizeof(__dst));
  v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    __dst[2] = (void *)(v10 | 0x8000000000000000);
    __dst[0] = v8;
    goto LABEL_15;
  }
  HIBYTE(__dst[2]) = v6;
  v8 = __dst;
  if (v6)
LABEL_15:
    memmove(v8, v5, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  ctu::path_join_impl();
  ctu::path_join_impl();
  eUICC::Source::GetFirmwareInternal(a1, (uint64_t)__dst, a3);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
}

void sub_212B1AFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void eUICC::Source::GetFirmwareInternal(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string::value_type v15;
  BOOL v16;
  std::string *v17;
  uint64_t (*v18)(uint64_t);
  pthread_mutex_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  CFTypeRef v24;
  pthread_mutex_t *v26;
  int v27;
  CFTypeRef v28;
  CFTypeRef v29;
  uint64_t (*v30)(uint64_t);
  pthread_mutex_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  CFTypeRef v36;
  std::string *v37;
  CFTypeRef v38;
  CFTypeRef v39;
  CFTypeRef v40;
  CFTypeRef v41;
  CFTypeRef v42;
  __CFData *v43;
  CFTypeRef *p_cf;
  CFTypeRef cf;
  CFTypeRef v46;
  CFTypeRef v47;
  CFTypeRef v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;

  memset(&v52, 170, sizeof(v52));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v52 = *(std::string *)a2;
  ctu::path_join_impl();
  memset(&v51, 170, sizeof(v51));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v51 = *(std::string *)a2;
  ctu::path_join_impl();
  memset(&v50, 170, sizeof(v50));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v50 = *(std::string *)a2;
  ctu::path_join_impl();
  memset(&v49, 170, sizeof(v49));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v49 = *(std::string *)a2;
  ctu::path_join_impl();
  v47 = 0;
  v48 = 0;
  cf = 0;
  v46 = 0;
  v6 = *(pthread_mutex_t **)(a1 + 16);
  v43 = 0;
  p_cf = &v48;
  v10 = BBUZipFile::copyEntireFile(v6, (const void **)&v52.__r_.__value_.__l.__data_, &v43);
  v11 = *p_cf;
  if (v43)
  {
    *p_cf = v43;
    if (v11)
      goto LABEL_17;
  }
  else
  {
    *p_cf = 0;
    if (v11)
LABEL_17:
      CFRelease(v11);
  }
  if (v10
    || (v48
      ? (v18 = ctu::SharedRef<__CFData,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData>::get)
      : (v18 = 0),
        !v18))
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "eUICC::Source", "", "Condition <<%s>> failed %s %s/%d\n", v7, v8, v9, (char)"kBBUReturnSuccess == r && installData");
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v15 = v52.__r_.__value_.__s.__data_[0];
    v16 = (v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    v17 = &v52;
    goto LABEL_24;
  }
  v19 = *(pthread_mutex_t **)(a1 + 16);
  v43 = 0;
  p_cf = &v46;
  v23 = BBUZipFile::copyEntireFile(v19, (const void **)&v50.__r_.__value_.__l.__data_, &v43);
  v24 = *p_cf;
  if (v43)
  {
    *p_cf = v43;
    if (!v24)
      goto LABEL_53;
  }
  else
  {
    *p_cf = 0;
    if (!v24)
      goto LABEL_53;
  }
  CFRelease(v24);
LABEL_53:
  if (!v23)
  {
    if (v46 ? ctu::SharedRef<__CFData,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData>::get : 0)
    {
      v26 = *(pthread_mutex_t **)(a1 + 16);
      v43 = 0;
      p_cf = &v47;
      v27 = BBUZipFile::copyEntireFile(v26, (const void **)&v51.__r_.__value_.__l.__data_, &v43);
      v28 = *p_cf;
      if (v43)
      {
        *p_cf = v43;
        if (!v28)
          goto LABEL_68;
      }
      else
      {
        *p_cf = 0;
        if (!v28)
          goto LABEL_68;
      }
      CFRelease(v28);
LABEL_68:
      v29 = v47;
      if (v27
        || (v47
          ? (v30 = ctu::SharedRef<__CFData,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData>::get)
          : (v30 = 0),
            !v30))
      {
        v47 = 0;
        if (v29)
          CFRelease(v29);
      }
      v31 = *(pthread_mutex_t **)(a1 + 16);
      v43 = 0;
      p_cf = &cf;
      v35 = BBUZipFile::copyEntireFile(v31, (const void **)&v49.__r_.__value_.__l.__data_, &v43);
      v36 = *p_cf;
      if (v43)
      {
        *p_cf = v43;
        if (v36)
          goto LABEL_79;
      }
      else
      {
        *p_cf = 0;
        if (v36)
LABEL_79:
          CFRelease(v36);
      }
      if (v35)
      {
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        v37 = &v49;
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          LOBYTE(v37) = v49.__r_.__value_.__s.__data_[0];
        _BBULog(22, 0xFFFFFFFFLL, "eUICC::Source", "", "File %s ret %d\n", v32, v33, v34, (char)v37);
        v38 = cf;
        cf = 0;
        if (v38)
          CFRelease(v38);
      }
      v42 = v48;
      if (v48)
        CFRetain(v48);
      v41 = v47;
      if (v47)
        CFRetain(v47);
      v40 = v46;
      if (v46)
        CFRetain(v46);
      v39 = cf;
      if (cf)
        CFRetain(cf);
      eUICC::Firmware::CreateFromData(&v42, &v41, &v40, a3);
      if (v39)
        CFRelease(v39);
      if (v40)
        CFRelease(v40);
      if (v41)
        CFRelease(v41);
      if (v42)
        CFRelease(v42);
      goto LABEL_27;
    }
  }
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(25, 0xFFFFFFFFLL, "eUICC::Source", "", "Condition <<%s>> failed %s %s/%d\n", v20, v21, v22, (char)"kBBUReturnSuccess == r && infoPlist");
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v15 = v50.__r_.__value_.__s.__data_[0];
  v16 = (v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  v17 = &v50;
LABEL_24:
  if (v16)
    LOBYTE(v17) = v15;
  _BBULog(22, 0xFFFFFFFFLL, "eUICC::Source", "", "File %s ret %d\n", v12, v13, v14, (char)v17);
  *a3 = 0;
  a3[1] = 0;
LABEL_27:
  if (cf)
    CFRelease(cf);
  if (v46)
    CFRelease(v46);
  if (v47)
    CFRelease(v47);
  if (v48)
    CFRelease(v48);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v49.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_37:
      if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_38;
      goto LABEL_49;
    }
  }
  else if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_38:
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_50:
    operator delete(v52.__r_.__value_.__l.__data_);
    return;
  }
LABEL_49:
  operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_50;
}

void sub_212B1B5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, const void *a14, const void *a15, const void *a16, __int16 a17, char a18, char a19, uint64_t a20,const void *a21,const void *a22,const void *a23,const void *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(&a13);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(&a14);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(&a15);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(&a16);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(&a21);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(&a22);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(&a23);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(&a24);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v37 - 89) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((*(char *)(v37 - 89) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v37 - 57) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  operator delete(*(void **)(v37 - 112));
  if ((*(char *)(v37 - 57) & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  operator delete(*(void **)(v37 - 80));
  goto LABEL_6;
}

void eUICC::Source::GetGoldFirmware(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const char *v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  void *__dst[3];

  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
      v5 = *(const char **)a2;
    else
      v5 = "vinyl";
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    v5 = (const char *)a2;
  }
  else
  {
    v5 = "vinyl";
  }
  memset(__dst, 170, sizeof(__dst));
  v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    __dst[2] = (void *)(v10 | 0x8000000000000000);
    __dst[0] = v8;
    goto LABEL_15;
  }
  HIBYTE(__dst[2]) = v6;
  v8 = __dst;
  if (v6)
LABEL_15:
    memmove(v8, v5, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  ctu::path_join_impl();
  ctu::path_join_impl();
  eUICC::Source::GetFirmwareInternal(a1, (uint64_t)__dst, a3);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
}

void sub_212B1B880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const void **ctu::cf::detail::TakeOwnershipProxy<__CFData>::~TakeOwnershipProxy(const void **a1)
{
  const void **v2;
  const void *v3;
  const void *v4;

  v3 = *a1;
  v2 = (const void **)a1[1];
  v4 = *v2;
  if (v3)
  {
    *v2 = v3;
    if (v4)
      goto LABEL_5;
  }
  else
  {
    *v2 = 0;
    if (v4)
LABEL_5:
      CFRelease(v4);
  }
  return a1;
}

void eUICC::Source::GetRecoveryForMac(ctu *this@<X1>, uint64_t a2@<X0>, const char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ctu *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  std::__shared_weak_count *v19;
  size_t v20;
  void *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  std::string *v27;
  const std::string::value_type *v28;
  void *v29;
  std::string *v30;
  __int128 v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  ctu *v40;
  int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  void **v47;
  char v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  void *exception;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  void **v57;
  void *__p[2];
  char v60;
  void *v61[3];
  void *__dst[3];
  __int128 v63;

  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  ctu::hex(this, (const void *)8);
  if (v60 >= 0)
    v10 = __p;
  else
    LOBYTE(v10) = __p[0];
  _BBULog(22, 0xFFFFFFFFLL, "eUICC::Source", "", "GetRecoveryForMac: %s\n", v7, v8, v9, (char)v10);
  if (v60 < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v63 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v63 + 1) = 0xAAAAAAAAAAAAAAAALL;
  eUICC::Source::GetGoldFirmware(a2, (uint64_t)a3, &v63);
  if (!(_QWORD)v63)
  {
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(22, 0xFFFFFFFFLL, "eUICC::Source", "", "GetGoldFirmware did not successfully return anything valid\n", v11, v12, v13, v55);
    *a4 = 0;
    a4[1] = 0;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
    if (*((_QWORD *)&v63 + 1))
    {
LABEL_77:
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v50 = __ldaxr(p_shared_owners);
      while (__stlxr(v50 - 1, p_shared_owners));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    return;
  }
  v14 = (ctu *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v63 + 8))(v63);
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  ctu::hex(v14, (const void *)8);
  if (v60 >= 0)
    v18 = __p;
  else
    LOBYTE(v18) = __p[0];
  _BBULog(22, 0xFFFFFFFFLL, "eUICC::Source", "", "Update/Gold Mac %s\n", v15, v16, v17, (char)v18);
  if ((v60 & 0x80000000) == 0)
  {
    if (*(_QWORD *)this != *(_QWORD *)v14)
      goto LABEL_16;
LABEL_25:
    *(_OWORD *)a4 = v63;
    v63 = 0uLL;
    return;
  }
  operator delete(__p[0]);
  if (*(_QWORD *)this == *(_QWORD *)v14)
    goto LABEL_25;
LABEL_16:
  if (a3[23] < 0)
  {
    if (*((_QWORD *)a3 + 1))
      a3 = *(const char **)a3;
    else
      a3 = "vinyl";
  }
  else if (!a3[23])
  {
    a3 = "vinyl";
  }
  memset(__dst, 170, sizeof(__dst));
  v20 = strlen(a3);
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    __dst[1] = v21;
    __dst[2] = (void *)(v24 | 0x8000000000000000);
    __dst[0] = v22;
  }
  else
  {
    HIBYTE(__dst[2]) = v20;
    v22 = __dst;
    if (!v20)
      goto LABEL_37;
  }
  memmove(v22, a3, (size_t)v21);
LABEL_37:
  *((_BYTE *)v21 + (_QWORD)v22) = 0;
  ctu::path_join_impl();
  ctu::path_join_impl();
  v26 = 0;
  while (1)
  {
    memset(v61, 170, sizeof(v61));
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"%03d", v25, v26, v57);
    v27 = (std::string *)MEMORY[0x212BF99EC](__p);
    v28 = SHIBYTE(__dst[2]) >= 0 ? (const std::string::value_type *)__dst : (const std::string::value_type *)__dst[0];
    v29 = SHIBYTE(__dst[2]) >= 0 ? (void *)HIBYTE(__dst[2]) : __dst[1];
    v30 = std::string::insert(v27, 0, v28, (std::string::size_type)v29);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v61[2] = (void *)v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)v61 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x212BF9A10](__p);
    eUICC::Source::GetFirmwareInternal(a2, (uint64_t)v61, __p);
    v32 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
    v63 = v32;
    if (!v33)
      goto LABEL_48;
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      v36 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_54;
    }
    else
    {
LABEL_48:
      v36 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_54;
    }
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
LABEL_54:
    v39 = v63;
    if ((_QWORD)v63)
    {
      v40 = (ctu *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v63 + 8))(v63);
      if (!v40)
      {
        exception = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/eUICC/Source/eUICCSource.cpp", 0x7Fu, (ctu::LogMessageBuffer *)"Assertion failure(fwMac.data && \"Corrupt FW in input!\")", v52, v53, v54, v56);
      }
      if (gBBULogMaskGet(void)::once != -1)
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      v41 = SHIBYTE(v61[2]);
      v42 = (char)v61[0];
      ctu::hex(v40, (const void *)8);
      v46 = v61;
      if (v41 < 0)
        LOBYTE(v46) = v42;
      v47 = __p;
      if (v60 < 0)
        v47 = (void **)__p[0];
      v57 = v47;
      _BBULog(22, 0xFFFFFFFFLL, "eUICC::Source", "", "Path %s -> Mac %s\n", v43, v44, v45, (char)v46);
      if (v60 < 0)
      {
        operator delete(__p[0]);
        if (*(_QWORD *)this != *(_QWORD *)v40)
        {
LABEL_64:
          v48 = 1;
          if ((SHIBYTE(v61[2]) & 0x80000000) == 0)
            goto LABEL_66;
LABEL_65:
          operator delete(v61[0]);
          goto LABEL_66;
        }
      }
      else if (*(_QWORD *)this != *(_QWORD *)v40)
      {
        goto LABEL_64;
      }
      v48 = 0;
      *(_OWORD *)a4 = v63;
      v63 = 0uLL;
      if (SHIBYTE(v61[2]) < 0)
        goto LABEL_65;
    }
    else
    {
      v48 = 0;
      if (SHIBYTE(v61[2]) < 0)
        goto LABEL_65;
    }
LABEL_66:
    if ((v48 & 1) == 0)
      break;
    v26 = (v26 + 1);
    if ((_DWORD)v26 == 1000)
      goto LABEL_82;
  }
  if (v39)
  {
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_76;
  }
  else
  {
LABEL_82:
    *a4 = 0;
    a4[1] = 0;
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
LABEL_76:
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
      if (!*((_QWORD *)&v63 + 1))
        return;
      goto LABEL_77;
    }
  }
  operator delete(__dst[0]);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
    goto LABEL_77;
}

void sub_212B1BED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100](v35 - 112);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **std::shared_ptr<eUICC::Source>::shared_ptr[abi:ne180100]<eUICC::Source,void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_24CE84550;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  if (a2)
  {
    v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
    if (v6)
    {
      if (v6->__shared_owners_ != -1)
        return a1;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
      a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
      std::__shared_weak_count::__release_weak(v6);
    }
    else
    {
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
      a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_212B1C128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<eUICC::Source>::~unique_ptr[abi:ne180100]((_QWORD **)va);
  _Unwind_Resume(a1);
}

_QWORD **std::unique_ptr<eUICC::Source>::~unique_ptr[abi:ne180100](_QWORD **a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[3];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = (std::__shared_weak_count *)v2[1];
    if (v6)
      std::__shared_weak_count::__release_weak(v6);
    operator delete(v2);
  }
  return a1;
}

void std::__shared_ptr_pointer<eUICC::Source *,std::shared_ptr<eUICC::Source>::__shared_ptr_default_delete<eUICC::Source,eUICC::Source>,std::allocator<eUICC::Source>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<eUICC::Source *,std::shared_ptr<eUICC::Source>::__shared_ptr_default_delete<eUICC::Source,eUICC::Source>,std::allocator<eUICC::Source>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[3];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = (std::__shared_weak_count *)v1[1];
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<eUICC::Source *,std::shared_ptr<eUICC::Source>::__shared_ptr_default_delete<eUICC::Source,eUICC::Source>,std::allocator<eUICC::Source>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B55718)
    return a1 + 24;
  if (((v3 & 0x8000000212B55718 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B55718))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B55718 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ctu::SharedRef<__CFData,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t __cxx_global_var_init_21()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_212A4D000);
  }
  return result;
}

void BBUICELoader::BBUICELoader(BBUICELoader *this, BBUFeedback *a2)
{
  capabilities::updater *v3;
  capabilities::updater *v4;
  uint64_t v5;
  void *exception;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  *(_QWORD *)this = &unk_24CE85280;
  *((_QWORD *)this + 1) = a2;
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBULoader.cpp", 0x10u, (ctu::LogMessageBuffer *)"Assertion failure(fFeedback)", v7, v8, v9, v13);
    goto LABEL_6;
  }
  *(_QWORD *)this = off_24CE845A0;
  *((_BYTE *)this + 24) = 0;
  v3 = (capabilities::updater *)capabilities::radio::chipID(this);
  *((_DWORD *)this + 7) = (_DWORD)v3;
  v4 = (capabilities::updater *)capabilities::updater::loaderConnectAttempts(v3);
  *((_DWORD *)this + 8) = (_DWORD)v4;
  v5 = capabilities::updater::loaderCommandTimeout(v4);
  if (v5 >= 0x100000000)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 11, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICELoader.cpp", 0x1Au, (ctu::LogMessageBuffer *)"Assertion failure(capabilities::updater::loaderCommandTimeout().count() <= std::numeric_limits<UInt32>::max() && \"capabilities::updater::loaderCommandTimeout().count() exceeds maximum allowable value\")", v10, v11, v12, v13);
LABEL_6:
  }
  *((_DWORD *)this + 9) = capabilities::updater::loaderCommandTimeout((capabilities::updater *)v5);
  *((_BYTE *)this + 40) = 0;
}

void sub_212B1C3E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B1C3F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUICELoader::getCommandTimeout(BBUICELoader *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t BBUICELoader::connect()
{
  return 3;
}

void BBUICELoader::getVersion()
{
  void *exception;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  exception = __cxa_allocate_exception(0x210uLL);
  _BBUException::_BBUException((uint64_t)exception, 75, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICELoader.cpp", 0x3Au, (ctu::LogMessageBuffer *)"Assertion failure(false && \"BBU loader version error!\")", v1, v2, v3, v4);
}

void sub_212B1C470(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUICELoader::enableStepThroughImages(uint64_t this)
{
  *(_BYTE *)(this + 40) = 1;
  return this;
}

uint64_t BBUICELoader::load(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *exception;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  if (!a3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 35, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/ICE/BBUICELoader.cpp", 0x4Bu, (ctu::LogMessageBuffer *)"Assertion failure(source && \"BBU data source error!\")", v5, v6, v7, v8);
  }
  return 11;
}

void sub_212B1C4F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUICELoader::go()
{
  return 11;
}

uint64_t BBUICELoader::queryChipInfo()
{
  return 3;
}

const char *BBUICELoader::getDebugName(BBUICELoader *this)
{
  return "BBUICELoader";
}

uint64_t BBUICECommunication::setTransportCreationTimeout(BBUICECommunication *this, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;

  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
    {
LABEL_7:
      *((double *)this + 2) = a2;
      goto LABEL_8;
    }
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_7;
  }
  if (gBBULogVerbosity < 0)
    goto LABEL_7;
  _BBULog(2, 0, "BBUICECommunication", "", "Transport timeout set to %f from %f\n", a7, a8, a9, SLOBYTE(a2));
  v11 = gBBULogMaskGet(void)::once;
  *((double *)this + 2) = a2;
  if (v11 != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
LABEL_8:
  if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0 && (gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(2, 0, "BBUICECommunication", "", "Boot-up transport timeout set to %f from %f\n", a7, a8, a9, SLOBYTE(a2));
  *((double *)this + 3) = a2;
  return 0;
}

uint64_t BBUICECommunication::getBasebandState()
{
  return 9;
}

uint64_t BBUICECommunication::freeTransport(uint64_t a1)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 56);
  if (v2 >= 1)
  {
    close(v2);
    *(_DWORD *)(a1 + 56) = -1;
  }
  return TelephonyUtilTransportFree();
}

std::string *BBUICECommunication::setUartDevicePath(BBUICECommunication *this, char *a2)
{
  return std::string::__assign_external((std::string *)((char *)this + 32), a2);
}

CFErrorRef BBUpdaterExtremePrivate::makeCFError(CFIndex code, const char *a2)
{
  unsigned int v2;
  const __CFAllocator *v3;
  __CFString *v4;
  __CFString *v5;
  void *v6;
  const __CFDictionary *v7;
  CFErrorRef v8;
  void *values;
  void *keys[2];

  v2 = code;
  keys[1] = *(void **)MEMORY[0x24BDAC8D0];
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (!a2)
    return CFErrorCreate(v3, CFSTR("BBUpdater"), v2, 0);
  v4 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, 0x8000100u);
  if (!v4)
    return CFErrorCreate(v3, CFSTR("BBUpdater"), v2, 0);
  v5 = v4;
  v6 = (void *)*MEMORY[0x24BDBD3A0];
  values = v4;
  keys[0] = v6;
  v7 = CFDictionaryCreate(v3, (const void **)keys, (const void **)&values, 1, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  CFRelease(v5);
  v8 = CFErrorCreate(v3, CFSTR("BBUpdater"), v2, v7);
  if (v7)
    CFRelease(v7);
  return v8;
}

uint64_t BBUEUR13UpdateSource::saveImages(BBUEUR13UpdateSource *this)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pthread_mutex_t *v9;
  std::__shared_weak_count *v10;
  const void **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  const void *v17;
  unint64_t *v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v25;
  __CFData *v26;
  const void **v27;
  void *__p[2];
  char v29;

  v2 = BBUEUR10UpdateSource::saveImages(this);
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v3 = (const char *)(**(uint64_t (***)(BBUEUR13UpdateSource *))this)(this);
  _BBULog(19, 0xFFFFFFFFLL, v3, "", "SaveImages called super %d\n", v4, v5, v6, v2);
  if (!(_DWORD)v2)
  {
    v7 = *((_QWORD *)this + 8);
    (*(void (**)(void **__return_ptr, BBUEUR13UpdateSource *))(*(_QWORD *)this + 56))(__p, this);
    v8 = BBUZipFile::containsFile(v7, __p);
    v2 = v8;
    if (v29 < 0)
    {
      operator delete(__p[0]);
      if (!(_DWORD)v2)
        return v2;
    }
    else if (!(_DWORD)v8)
    {
      return v2;
    }
    v9 = (pthread_mutex_t *)*((_QWORD *)this + 8);
    (*(void (**)(void **__return_ptr, BBUEUR13UpdateSource *))(*(_QWORD *)this + 56))(__p, this);
    pthread_mutex_lock(&ctu::Singleton<ManifestCache,ManifestCache,ctu::PthreadMutexGuardPolicy<ManifestCache>>::sInstance);
    if (!qword_254B5FCE8)
    {
      v11 = (const void **)operator new(8uLL);
      *v11 = 0;
      v10 = (std::__shared_weak_count *)operator new(0x20uLL);
      v10->__vftable = (std::__shared_weak_count_vtbl *)off_24CE84800;
      v10->__shared_owners_ = 0;
      v10->__shared_weak_owners_ = 0;
      v10[1].__vftable = (std::__shared_weak_count_vtbl *)v11;
      v12 = (std::__shared_weak_count *)off_254B5FCF0;
      qword_254B5FCE8 = (uint64_t)v11;
      off_254B5FCF0 = v10;
      if (!v12)
      {
        v25 = v10;
LABEL_17:
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
LABEL_19:
        pthread_mutex_unlock(&ctu::Singleton<ManifestCache,ManifestCache,ctu::PthreadMutexGuardPolicy<ManifestCache>>::sInstance);
        v26 = 0;
        v27 = v11;
        v2 = BBUZipFile::copyEntireFile(v9, (const void **)__p, &v26);
        v17 = *v27;
        if (v26)
        {
          *v27 = v26;
          if (!v17)
            goto LABEL_24;
        }
        else
        {
          *v27 = 0;
          if (!v17)
            goto LABEL_24;
        }
        CFRelease(v17);
LABEL_24:
        if (v25)
        {
          v18 = (unint64_t *)&v25->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        if (v29 < 0)
          operator delete(__p[0]);
        if (gBBULogMaskGet(void)::once != -1)
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        v20 = (const char *)(**(uint64_t (***)(BBUEUR13UpdateSource *))this)(this);
        _BBULog(19, 0xFFFFFFFFLL, v20, "", "SaveImages saved ticket to manifest cache %d\n", v21, v22, v23, v2);
        return v2;
      }
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v11 = (const void **)qword_254B5FCE8;
    v10 = (std::__shared_weak_count *)off_254B5FCF0;
    v25 = (std::__shared_weak_count *)off_254B5FCF0;
    if (!off_254B5FCF0)
      goto LABEL_19;
    goto LABEL_17;
  }
  return v2;
}

void sub_212B1CA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  operator delete(v19);
  pthread_mutex_unlock(&ctu::Singleton<ManifestCache,ManifestCache,ctu::PthreadMutexGuardPolicy<ManifestCache>>::sInstance);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_DWORD *BBUEUR13UpdateSource::getManifestSource(BBUEUR13UpdateSource *this)
{
  std::__shared_weak_count *v2;
  const void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t (*v14)(uint64_t);
  _DWORD *ManifestSource;
  unint64_t *v16;
  unint64_t v17;

  pthread_mutex_lock(&ctu::Singleton<ManifestCache,ManifestCache,ctu::PthreadMutexGuardPolicy<ManifestCache>>::sInstance);
  if (qword_254B5FCE8)
    goto LABEL_2;
  v3 = (const void **)operator new(8uLL);
  *v3 = 0;
  v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__vftable = (std::__shared_weak_count_vtbl *)off_24CE84800;
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  v4 = (std::__shared_weak_count *)off_254B5FCF0;
  qword_254B5FCE8 = (uint64_t)v3;
  off_254B5FCF0 = v2;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
LABEL_2:
    v3 = (const void **)qword_254B5FCE8;
    v2 = (std::__shared_weak_count *)off_254B5FCF0;
    if (!off_254B5FCF0)
      goto LABEL_11;
  }
  v7 = (unint64_t *)&v2->__shared_owners_;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
LABEL_11:
  pthread_mutex_unlock(&ctu::Singleton<ManifestCache,ManifestCache,ctu::PthreadMutexGuardPolicy<ManifestCache>>::sInstance);
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  v9 = (const char *)(**(uint64_t (***)(BBUEUR13UpdateSource *))this)(this);
  _BBULog(19, 0xFFFFFFFFLL, v9, "", "BBUEUR13UpdateSource getManifestSource: using cache? %d\n", v10, v11, v12, v3 != 0);
  v13 = *v3;
  v14 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  if (!v13)
    v14 = 0;
  if (!v14)
  {
    ManifestSource = (_DWORD *)BBUEURUpdateSource::getManifestSource(this);
    if (!v2)
      return ManifestSource;
    goto LABEL_21;
  }
  ManifestSource = operator new(0x18uLL);
  ManifestSource[4] = 0;
  *(_QWORD *)ManifestSource = off_24CE84890;
  *((_QWORD *)ManifestSource + 1) = v13;
  if (v13)
    CFRetain(v13);
  if (v2)
  {
LABEL_21:
    v16 = (unint64_t *)&v2->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return ManifestSource;
}

void sub_212B1CCC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<ManifestCache,ManifestCache,ctu::PthreadMutexGuardPolicy<ManifestCache>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_212B1CCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

const char *BBUEUR13UpdateSource::getDebugName(BBUEUR13UpdateSource *this)
{
  return "BBUEUR13UpdateSource";
}

void BBUEUR13UpdateSource::~BBUEUR13UpdateSource(BBUEUR13UpdateSource *this)
{
  void *v1;

  BBUEUR10UpdateSource::~BBUEUR10UpdateSource(this);
  operator delete(v1);
}

uint64_t ctu::PthreadMutexGuardPolicy<ManifestCache>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__shared_ptr_pointer<ManifestCache *,std::shared_ptr<ManifestCache>::__shared_ptr_default_delete<ManifestCache,ManifestCache>,std::allocator<ManifestCache>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ManifestCache *,std::shared_ptr<ManifestCache>::__shared_ptr_default_delete<ManifestCache,ManifestCache>,std::allocator<ManifestCache>>::__on_zero_shared(uint64_t a1)
{
  CFTypeRef *v1;

  v1 = *(CFTypeRef **)(a1 + 24);
  if (v1)
  {
    if (*v1)
      CFRelease(*v1);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<ManifestCache *,std::shared_ptr<ManifestCache>::__shared_ptr_default_delete<ManifestCache,ManifestCache>,std::allocator<ManifestCache>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000212B5581DLL)
    return a1 + 24;
  if (((v3 & 0x8000000212B5581DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000212B5581DLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000212B5581DLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

const char *_BBUFSDebugPrint(const char *result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (sDelegate)
    return (const char *)sDelegate(result, a2, &a9);
  return result;
}

void _BBUFSDebugPrintOsLog(const char *a1, const char *a2, va_list a3)
{
  NSObject *v5;
  int v6;
  char *v7;
  char __b[1024];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    memset(__b, 170, sizeof(__b));
    vsnprintf(__b, 0x400uLL, a2, a3);
    if (qword_253D37B18 == -1)
    {
      v5 = _MergedGlobals_6;
      if (!os_log_type_enabled((os_log_t)_MergedGlobals_6, OS_LOG_TYPE_DEFAULT))
        return;
    }
    else
    {
      dispatch_once(&qword_253D37B18, &__block_literal_global_3);
      v5 = _MergedGlobals_6;
      if (!os_log_type_enabled((os_log_t)_MergedGlobals_6, OS_LOG_TYPE_DEFAULT))
        return;
    }
    v6 = 136315138;
    v7 = __b;
    _os_log_impl(&dword_212A4D000, v5, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v6, 0xCu);
  }
}

os_log_t ___ZL25_BBUFSDebugGetOsLogObjectv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.telephony.baseband", "bbufs");
  _MergedGlobals_6 = (uint64_t)result;
  return result;
}

void BBUCFDataDataSource::~BBUCFDataDataSource(BBUCFDataDataSource *this)
{
  const void *v1;

  *(_QWORD *)this = off_24CE84890;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;

  *(_QWORD *)this = off_24CE84890;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  operator delete(this);
}

uint64_t BBUCFDataDataSource::copyData(CFDataRef *this, unsigned __int8 *a2, int a3, unsigned int *a4, unsigned int a5)
{
  CFIndex v7;
  unsigned int v10;
  unsigned int v11;
  CFRange v13;

  LODWORD(v7) = a3;
  v10 = (*((uint64_t (**)(CFDataRef *))*this + 3))(this);
  v11 = v10 - a5;
  if (v10 >= a5)
  {
    if (v11 >= v7)
      v7 = v7;
    else
      v7 = v11;
    v13.location = a5;
    v13.length = v7;
    CFDataGetBytes(this[1], v13, a2);
  }
  else
  {
    LODWORD(v7) = 0;
  }
  *a4 = v7;
  return 0;
}

const __CFData *BBUCFDataDataSource::getSize(BBUCFDataDataSource *this)
{
  const __CFData *result;

  result = (const __CFData *)*((_QWORD *)this + 1);
  if (result)
    return (const __CFData *)CFDataGetLength(result);
  return result;
}

uint64_t BBUCFDataDataSource::getBaseAddress(BBUCFDataDataSource *this)
{
  return *((unsigned int *)this + 4);
}

void BBUCFDataDataSource::getNameAsString(char *a1@<X8>)
{
  a1[23] = 6;
  strcpy(a1, "CFData");
}

const char *BBUCFDataDataSource::getDebugName(BBUCFDataDataSource *this)
{
  return "BBUCFDataDataSource";
}

void BBUEURPersonalizationParameters::EURNonce::~EURNonce(BBUEURPersonalizationParameters::EURNonce *this)
{
  const void *v1;

  *(_QWORD *)this = off_24CE848F8;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;

  *(_QWORD *)this = off_24CE848F8;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  operator delete(this);
}

uint64_t BBUEURPersonalizationParameters::EURNonce::getAsCFData(BBUEURPersonalizationParameters::EURNonce *this)
{
  return *((_QWORD *)this + 1);
}

void BBUEURPersonalizationParameters::EURNonce::getAsString(const __CFData **this@<X0>, const __CFData *a2@<X8>)
{
  cfDataToCString(a2, this[1]);
}

void cfDataToCString(const __CFData *a1, const __CFData *a2)
{
  const __CFData *v2;
  int Length;
  char *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFData *v10;

  v2 = a1;
  if (!a2)
  {
    *((_BYTE *)a1 + 23) = 0;
    *(_BYTE *)a1 = 0;
    return;
  }
  CFDataGetBytePtr(a2);
  Length = CFDataGetLength(a2);
  v5 = (char *)operator new[]((3 * Length + 1));
  TelephonyUtilBinToHex();
  memset(v2, 170, 24);
  v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v8 = v6 | 7;
    v9 = v8 + 1;
    v10 = (const __CFData *)operator new(v8 + 1);
    *((_QWORD *)v2 + 1) = v7;
    *((_QWORD *)v2 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)v2 = v10;
    v2 = v10;
  }
  else
  {
    *((_BYTE *)v2 + 23) = v6;
    if (!v6)
      goto LABEL_11;
  }
  memcpy(v2, v5, v7);
LABEL_11:
  *((_BYTE *)v2 + v7) = 0;
  operator delete[](v5);
}

void BBUEURPersonalizationParameters::EURSerialNumber::~EURSerialNumber(BBUEURPersonalizationParameters::EURSerialNumber *this)
{
  const void *v1;

  *(_QWORD *)this = off_24CE84928;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;

  *(_QWORD *)this = off_24CE84928;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  operator delete(this);
}

_QWORD *BBUEURPersonalizationParameters::EURSerialNumber::createFromSerialNumber(BBUEURPersonalizationParameters::EURSerialNumber *this, const unsigned __int8 *a2)
{
  _QWORD *v3;
  __CFData *Mutable;
  __CFData *v5;
  UInt8 *MutableBytePtr;
  void *exception;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if ((_DWORD)a2 != 32)
    return 0;
  v3 = operator new(0x10uLL);
  *v3 = off_24CE84928;
  v3[1] = 0;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 4);
  if (!Mutable)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Personalization/Eureka/BBUEURPersonalizationParameters.cpp", 0x83u, (ctu::LogMessageBuffer *)"Assertion failure(data)", v9, v10, v11, v12);
  }
  v5 = Mutable;
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  *MutableBytePtr = *((_BYTE *)this + 3);
  MutableBytePtr[1] = *((_BYTE *)this + 2);
  MutableBytePtr[2] = *((_BYTE *)this + 1);
  MutableBytePtr[3] = *(_BYTE *)this;
  CFDataSetLength(v5, 4);
  v3[1] = v5;
  return v3;
}

void sub_212B1D4B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURPersonalizationParameters::EURSerialNumber::getAsCFData(BBUEURPersonalizationParameters::EURSerialNumber *this)
{
  return *((_QWORD *)this + 1);
}

void BBUEURPersonalizationParameters::EURSerialNumber::getAsString(const __CFData **this@<X0>, const __CFData *a2@<X8>)
{
  cfDataToCString(a2, this[1]);
}

void BBUEURPersonalizationParameters::EURCertID::~EURCertID(BBUEURPersonalizationParameters::EURCertID *this)
{
  const void *v1;

  *(_QWORD *)this = off_24CE84958;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;

  *(_QWORD *)this = off_24CE84958;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  operator delete(this);
}

CFDataRef BBUEURPersonalizationParameters::EURCertID::createFromPublicKeyHashData(CFDataRef theData, const __CFData *a2)
{
  CFDataRef v2;
  unsigned int *BytePtr;
  CFNumberRef v4;
  void *exception;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t valuePtr;

  v2 = theData;
  if (!theData)
    return v2;
  BytePtr = (unsigned int *)CFDataGetBytePtr(theData);
  if ((CFDataGetLength(v2) & 0xFFFFFFFCLL) != 0)
  {
    v2 = (CFDataRef)operator new(0x10uLL);
    *(_QWORD *)v2 = off_24CE84958;
    valuePtr = bswap32(*BytePtr);
    v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt64Type, &valuePtr);
    *((_QWORD *)v2 + 1) = v4;
    if (!v4)
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 97, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Personalization/Eureka/BBUEURPersonalizationParameters.cpp", 0xFFu, (ctu::LogMessageBuffer *)"Assertion failure(certID->fNumber && \"Failed to create certID from public key hash.\")", v7, v8, v9, v10);
    }
    return v2;
  }
  return 0;
}

void sub_212B1D63C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURPersonalizationParameters::EURCertID::getAsCFNumber(BBUEURPersonalizationParameters::EURCertID *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t BBUEURPersonalizationParameters::EURCertID::getAsUnsigned(unsigned int **this, uint64_t a2, const __CFNumber *a3)
{
  void *exception;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int v9;

  v9 = -1431655766;
  if ((ctu::cf::assign((ctu::cf *)&v9, this[1], a3) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 97, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Personalization/Eureka/BBUEURPersonalizationParameters.cpp", 0x11Du, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Failed to create certID.\")", v5, v6, v7, v8);
  }
  return v9;
}

void sub_212B1D6D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void BBUEURPersonalizationParameters::EURChipID::~EURChipID(BBUEURPersonalizationParameters::EURChipID *this)
{
  const void *v1;

  *(_QWORD *)this = off_24CE84988;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;

  *(_QWORD *)this = off_24CE84988;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  operator delete(this);
}

_QWORD *BBUEURPersonalizationParameters::EURChipID::createFromChipID(BBUEURPersonalizationParameters::EURChipID *this)
{
  unsigned int v1;
  _QWORD *v2;
  CFNumberRef v3;
  void *exception;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t valuePtr;

  v1 = this;
  v2 = operator new(0x10uLL);
  *v2 = off_24CE84988;
  valuePtr = v1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt64Type, &valuePtr);
  v2[1] = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 98, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Personalization/Eureka/BBUEURPersonalizationParameters.cpp", 0x136u, (ctu::LogMessageBuffer *)"Assertion failure(chipID->fNumber && \"Failed to create certID.\")", v6, v7, v8, v9);
  }
  return v2;
}

void sub_212B1D808(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURPersonalizationParameters::EURChipID::getAsCFNumber(BBUEURPersonalizationParameters::EURChipID *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t BBUEURPersonalizationParameters::EURChipID::getAsUnsigned(unsigned int **this, uint64_t a2, const __CFNumber *a3)
{
  void *exception;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int v9;

  v9 = -1431655766;
  if ((ctu::cf::assign((ctu::cf *)&v9, this[1], a3) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 98, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Personalization/Eureka/BBUEURPersonalizationParameters.cpp", 0x151u, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Failed to create chipID.\")", v5, v6, v7, v8);
  }
  return v9;
}

void sub_212B1D8A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void BBUEURPersonalizationParameters::EURKeyStatus::~EURKeyStatus(BBUEURPersonalizationParameters::EURKeyStatus *this)
{
  const void *v1;

  *(_QWORD *)this = off_24CE849B8;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;

  *(_QWORD *)this = off_24CE849B8;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  operator delete(this);
}

_QWORD *BBUEURPersonalizationParameters::EURKeyStatus::createFromKeyStatus(BBUEURPersonalizationParameters::EURKeyStatus *this)
{
  unsigned int v1;
  _QWORD *v2;
  CFNumberRef v3;
  void *exception;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t valuePtr;

  v1 = this;
  v2 = operator new(0x10uLL);
  *v2 = off_24CE849B8;
  valuePtr = v1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt64Type, &valuePtr);
  v2[1] = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 99, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Personalization/Eureka/BBUEURPersonalizationParameters.cpp", 0x16Au, (ctu::LogMessageBuffer *)"Assertion failure(status->fNumber && \"Failed to create key status.\")", v6, v7, v8, v9);
  }
  return v2;
}

void sub_212B1D9D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURPersonalizationParameters::EURKeyStatus::getAsUnsigned(unsigned int **this, uint64_t a2, const __CFNumber *a3)
{
  void *exception;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int v9;

  v9 = -1431655766;
  if ((ctu::cf::assign((ctu::cf *)&v9, this[1], a3) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 99, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Personalization/Eureka/BBUEURPersonalizationParameters.cpp", 0x17Fu, (ctu::LogMessageBuffer *)"Assertion failure(success && \"Failed to create key status.\")", v5, v6, v7, v8);
  }
  return v9;
}

void sub_212B1DA64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEURPersonalizationParameters::EURKeyStatus::getAsCFNumber(BBUEURPersonalizationParameters::EURKeyStatus *this)
{
  return *((_QWORD *)this + 1);
}

void BBUEURPersonalizationParameters::EURKeyHash::~EURKeyHash(BBUEURPersonalizationParameters::EURKeyHash *this)
{
  const void *v1;

  *(_QWORD *)this = off_24CE849E8;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;

  *(_QWORD *)this = off_24CE849E8;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  operator delete(this);
}

uint64_t BBUEURPersonalizationParameters::EURKeyHash::getAsCFData(BBUEURPersonalizationParameters::EURKeyHash *this)
{
  return *((_QWORD *)this + 1);
}

void BBUEURPersonalizationParameters::EURKeyHash::getAsString(const __CFData **this@<X0>, const __CFData *a2@<X8>)
{
  cfDataToCString(a2, this[1]);
}

void BBUEURPersonalizationParameters::EURPublicKeyHash::~EURPublicKeyHash(BBUEURPersonalizationParameters::EURPublicKeyHash *this)
{
  const void *v1;

  *(_QWORD *)this = off_24CE84A18;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;

  *(_QWORD *)this = off_24CE84A18;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  operator delete(this);
}

uint64_t BBUEURPersonalizationParameters::EURPublicKeyHash::getAsCFData(BBUEURPersonalizationParameters::EURPublicKeyHash *this)
{
  return *((_QWORD *)this + 1);
}

void BBUEURPersonalizationParameters::EURPublicKeyHash::getAsString(const __CFData **this@<X0>, const __CFData *a2@<X8>)
{
  cfDataToCString(a2, this[1]);
}

BOOL BBUHashData::compareHash(BBUHashData *this, BBUFeedback *a2, const unsigned __int8 *a3, const unsigned __int8 *a4, const char *a5)
{
  size_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *p_p;
  void *__p;
  uint64_t v18;
  uint64_t v19;

  v10 = (*(uint64_t (**)(BBUHashData *))(*(_QWORD *)this + 32))(this);
  v11 = memcmp(a3, a4, v10);
  if (!v11)
    return v11 == 0;
  BBUFeedback::handleComment(a2, "%s Hash mismatch", a5);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
    {
LABEL_4:
      if (gBBULogVerbosity >= 1)
        _BBULog(1, 1, "BBUEUR2HashData", (const char *)&str_2_15, "%s Hash mismatch\n", v12, v13, v14, (char)a5);
    }
  }
  __p = 0;
  v18 = 0;
  v19 = 0;
  (*(void (**)(BBUHashData *))(*(_QWORD *)this + 32))(this);
  ctu::assign();
  BBUFeedback::handleComment(a2, "\t %s:  %s", "File    ", (const char *)&__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  __p = 0;
  v18 = 0;
  v19 = 0;
  (*(void (**)(BBUHashData *))(*(_QWORD *)this + 32))(this);
  ctu::assign();
  if (v19 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  BBUFeedback::handleComment(a2, "\t %s:  %s", "Manifest", p_p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  return v11 == 0;
}

void sub_212B1DD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::list<BBUProgrammer::Item *>::~list(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void BBUProgrammer::~BBUProgrammer(BBUProgrammer *this)
{
  char *v2;
  uint64_t i;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  *(_QWORD *)this = off_24CE84B60;
  v2 = (char *)this + 40;
  for (i = *((_QWORD *)this + 6); (char *)i != v2; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_QWORD *)(i + 16);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*((_QWORD *)this + 7))
  {
    v6 = *((_QWORD *)this + 5);
    v5 = (char *)*((_QWORD *)this + 6);
    v7 = *(_QWORD *)v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    *((_QWORD *)this + 7) = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (char *)*((_QWORD *)v5 + 1);
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
}

uint64_t BBUProgrammer::addItemsFromList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *exception;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 != a2)
  {
    v5 = a1 + 40;
    do
    {
      v6 = *(_QWORD *)(v2 + 16);
      if (!v6)
      {
        exception = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 66, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBUProgrammer.cpp", 0xC1u, (ctu::LogMessageBuffer *)"Assertion failure(item && \"Error: loading programmer items!\")", v11, v12, v13, v14);
      }
      v7 = operator new(0x18uLL);
      v7[1] = v5;
      v7[2] = v6;
      v8 = *(_QWORD *)(a1 + 40);
      *v7 = v8;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)(a1 + 40) = v7;
      ++*(_QWORD *)(a1 + 56);
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != a2);
  }
  return 0;
}

void sub_212B1DF6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *BBUProgrammer::create(capabilities::updater *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  _QWORD *v7;
  char *result;
  char *v9;
  _BYTE *v10;
  char *v11;
  void *exception;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  switch(capabilities::updater::getProgrammerType(a1))
  {
    case 0u:
      v7 = operator new(0x10E8uLL);
      BBUEUR2Programmer::BBUEUR2Programmer((uint64_t)v7, (uint64_t)a1, a2, a3);
      v7[537] = 0;
      *v7 = off_24CE840A8;
      *((_BYTE *)v7 + 4327) = 0;
      *((_BYTE *)v7 + 4304) = 0;
      goto LABEL_3;
    case 1u:
      v10 = operator new(0x1108uLL);
      BBUEUR2Programmer::BBUEUR2Programmer((uint64_t)v10, (uint64_t)a1, a2, a3);
      v10[4327] = 0;
      *((_QWORD *)v10 + 537) = 0;
      v10[4304] = 0;
      *(_QWORD *)v10 = off_24CE81F50;
      *((_QWORD *)v10 + 541) = 0;
      *((_QWORD *)v10 + 543) = 0;
      *((_QWORD *)v10 + 542) = 0;
      v11 = (char *)operator new(0x400uLL);
      *((_QWORD *)v10 + 541) = v11;
      *((_QWORD *)v10 + 543) = v11 + 1024;
      bzero(v11, 0x400uLL);
      *((_QWORD *)v10 + 542) = v11 + 1024;
      *((_QWORD *)v10 + 544) = v11;
      return v10;
    case 2u:
      v9 = (char *)operator new(0x140uLL);
      BBUICEProgrammer::BBUICEProgrammer((uint64_t)v9, (uint64_t)a1, a2, a3);
      *(_QWORD *)v9 = off_24CE84220;
      *(_WORD *)(v9 + 81) = 0;
      v9[111] = 0;
      v9[88] = 0;
      *((_DWORD *)v9 + 28) = 0;
      pthread_mutex_init((pthread_mutex_t *)(v9 + 120), 0);
      *((_DWORD *)v9 + 46) = 0;
      *((_OWORD *)v9 + 12) = 0u;
      *((_OWORD *)v9 + 13) = 0u;
      *((_DWORD *)v9 + 56) = 1065353216;
      *((_QWORD *)v9 + 30) = 0;
      *((_QWORD *)v9 + 31) = 0;
      *((_QWORD *)v9 + 29) = 0;
      v9[279] = 3;
      strcpy(v9 + 256, "EBL");
      *(_OWORD *)(v9 + 280) = xmmword_212B55610;
      *(_QWORD *)(v9 + 308) = 0;
      *(_QWORD *)(v9 + 300) = 0;
      *((_DWORD *)v9 + 74) = 257;
      return v9;
    case 3u:
      v7 = operator new(0x198uLL);
      BBUICE18Programmer::BBUICE18Programmer((uint64_t)v7, (uint64_t)a1, a2, a3);
LABEL_3:
      result = (char *)v7;
      break;
    case 4u:
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBUProgrammer.cpp", 0xEAu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized radio type.\")", v13, v14, v15, v16);
    default:
      result = v3;
      break;
  }
  return result;
}

void sub_212B1E1DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B1E1F0(_Unwind_Exception *a1)
{
  BBUEUR2Programmer *v1;
  void *v3;

  *(_QWORD *)v1 = off_24CE840A8;
  BBUEUR2Programmer::~BBUEUR2Programmer(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_212B1E218(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  if (*(char *)(v1 + 111) < 0)
    operator delete(*(void **)(v1 + 88));
  BBUICEProgrammer::~BBUICEProgrammer((BBUICEProgrammer *)v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_212B1E240(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B1E254(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B1E268(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_212B1E27C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *BBUProgrammer::addProgressBarTimes(uint64_t **this, BBUFeedback *a2)
{
  uint64_t *result;
  BBUFeedback *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  void *exception;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  result = (uint64_t *)capabilities::updater::getProgrammerProgressBarTimesType((capabilities::updater *)this);
  if ((_DWORD)result == 2)
  {
    v6 = this + 2;
    v5 = this[2];
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          v7 = (uint64_t **)v5;
          v8 = *((_DWORD *)v5 + 8);
          if (v8 < 2)
            break;
          v5 = *v7;
          v6 = v7;
          if (!*v7)
            goto LABEL_13;
        }
        if (v8 == 1)
          break;
        v5 = v7[1];
        if (!v5)
        {
          v6 = v7 + 1;
          goto LABEL_13;
        }
      }
    }
    else
    {
      v7 = this + 2;
LABEL_13:
      v9 = (char *)v7;
      v7 = (uint64_t **)operator new(0x30uLL);
      *((_DWORD *)v7 + 8) = 1;
      v7[5] = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = (uint64_t *)v9;
      *v6 = (uint64_t *)v7;
      v10 = (uint64_t *)*this[1];
      v11 = (uint64_t *)v7;
      if (v10)
      {
        this[1] = v10;
        v11 = *v6;
      }
      result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[2], v11);
      this[3] = (uint64_t *)((char *)this[3] + 1);
    }
    v7[5] = (uint64_t *)0x408F400000000000;
  }
  else
  {
    if ((_DWORD)result != 1)
    {
      if ((_DWORD)result)
      {
        exception = __cxa_allocate_exception(0x210uLL);
        _BBUException::_BBUException((uint64_t)exception, 87, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBUProgrammer.cpp", 0xFFu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unrecognized radio type.\")", v13, v14, v15, v16);
      }
      BBUEUR10Programmer::addProgressBarTimes((uint64_t *)this, v4);
    }
    return BBUEUR20Programmer::addProgressBarTimes((uint64_t *)this, v4);
  }
  return result;
}

void sub_212B1E3CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUProgrammer::connect(BBUProgrammer *this)
{
  void *exception;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (*((_BYTE *)this + 32))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 74, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBUProgrammer.cpp", 0x106u, (ctu::LogMessageBuffer *)"Assertion failure(!fConnected && \"Cannot finish connection, since BBU programmer is already (falsely) recognized as connected!\")", v3, v4, v5, v6);
  }
  *((_BYTE *)this + 32) = 1;
  return 0;
}

void sub_212B1E44C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUProgrammer::disconnect(BBUProgrammer *this)
{
  void *exception;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (!*((_BYTE *)this + 32))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 74, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Protocol/Common/BBUProgrammer.cpp", 0x10Fu, (ctu::LogMessageBuffer *)"Assertion failure(fConnected && \"Cannot finish disconnection, since BBU programmer is already (falsely) recognized as disconnected!\")", v3, v4, v5, v6);
  }
  *((_BYTE *)this + 32) = 0;
  return 0;
}

void sub_212B1E4C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUProgrammer::cmdCopyMei(BBUProgrammer *this, const __CFDictionary **a2)
{
  uint64_t v3;
  __CFDictionary *Mutable;
  const __CFAllocator *v5;
  int v6;
  const __CFAllocator *v7;
  uint64_t result;
  void *value[2];
  const __CFString *v10[2];
  __CFString *v11[5];

  v11[4] = *(__CFString **)MEMORY[0x24BDAC8D0];
  memset(v11, 170, 25);
  memset(&value[1], 170, 7);
  memset(v10, 170, 15);
  v3 = *MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 2, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (ETLGSMGetIMEI() && ETLGSMMakeStringFromIMEI())
  {
    value[0] = (void *)0xAAAAAAAAAAAAAAAALL;
    ctu::cf::convert_copy((ctu::cf *)value, (const __CFString **)v11, (const char *)0x8000100, v3, v5);
    CFDictionarySetValue(Mutable, CFSTR("imei"), value[0]);
    CFRelease(value[0]);
    v6 = 1;
    if (!ETLCDMAGetMEID())
      goto LABEL_8;
  }
  else
  {
    v6 = 0;
    if (!ETLCDMAGetMEID())
      goto LABEL_8;
  }
  if (ETLCDMAMakeStringFromMEID())
  {
    value[0] = (void *)0xAAAAAAAAAAAAAAAALL;
    ctu::cf::convert_copy((ctu::cf *)value, v10, (const char *)0x8000100, v3, v7);
    CFDictionarySetValue(Mutable, CFSTR("meid"), value[0]);
    CFRelease(value[0]);
LABEL_9:
    result = 0;
    *a2 = Mutable;
    return result;
  }
LABEL_8:
  if (v6)
    goto LABEL_9;
  return 1;
}

void BBUEURMIImage::BBUEURMIImage(BBUEURMIImage *this, BBUDataSource *a2, uint64_t a3)
{
  _DWORD *v3;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *exception;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v37;

  *(_QWORD *)this = off_24CE84BF8;
  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 14) = a3;
  v37 = -1431655766;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v3 = (_DWORD *)((char *)this + 16);
  *((_QWORD *)this + 6) = 0;
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Eureka/MultiImage/BBUEURMIImage.cpp", 0xCu, (ctu::LogMessageBuffer *)"Assertion failure(fDataSource)", v27, v28, v29, v36);
    goto LABEL_39;
  }
  if ((*(unsigned int (**)(BBUDataSource *, _DWORD *, uint64_t, int *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v3, 40, &v37, a3))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 79, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Eureka/MultiImage/BBUEURMIImage.cpp", 0xEu, (ctu::LogMessageBuffer *)"Assertion failure(( ret == kBBUReturnSuccess) && \"Failed to copy MI Image data.\")", v30, v31, v32, v36);
    goto LABEL_39;
  }
  if (v37 != 40)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 79, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Eureka/MultiImage/BBUEURMIImage.cpp", 0xFu, (ctu::LogMessageBuffer *)"Assertion failure(( amountCopied == sizeof( MIBootImageHeader)) && \"Copied data size mismatch: Failed to copy MI Image data.\")", v33, v34, v35, v36);
LABEL_39:
  }
  if (*v3 <= 0xBu && ((1 << *v3) & 0xC04) != 0)
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_9;
LABEL_26:
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0)
      goto LABEL_12;
    goto LABEL_10;
  }
  *((_DWORD *)this + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1))
                        - 40;
  if (gBBULogMaskGet(void)::once != -1)
    goto LABEL_26;
LABEL_9:
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0)
    goto LABEL_12;
LABEL_10:
  if (gBBULogVerbosity >= 7)
  {
    v6 = (const char *)(*(uint64_t (**)(BBUEURMIImage *))(*(_QWORD *)this + 16))(this);
    _BBULog(16, 7, v6, "", "Image ID: %u, Header version: %u\n", v7, v8, v9, *((_DWORD *)this + 4));
    if (gBBULogMaskGet(void)::once != -1)
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
LABEL_12:
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0)
    goto LABEL_15;
LABEL_13:
  if (gBBULogVerbosity >= 7)
  {
    v10 = (const char *)(*(uint64_t (**)(BBUEURMIImage *))(*(_QWORD *)this + 16))(this);
    _BBULog(16, 7, v10, "", "Image Flash Address: %u, Image RAM Address: %u\n", v11, v12, v13, *((_DWORD *)this + 6));
    if (gBBULogMaskGet(void)::once != -1)
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0)
        goto LABEL_18;
      goto LABEL_16;
    }
  }
LABEL_15:
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0)
    goto LABEL_18;
LABEL_16:
  if (gBBULogVerbosity >= 7)
  {
    v14 = (const char *)(*(uint64_t (**)(BBUEURMIImage *))(*(_QWORD *)this + 16))(this);
    _BBULog(16, 7, v14, "", "Image Size: %u, Code Size: %u\n", v15, v16, v17, *((_DWORD *)this + 8));
    if (gBBULogMaskGet(void)::once != -1)
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
LABEL_18:
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0)
    goto LABEL_21;
LABEL_19:
  if (gBBULogVerbosity >= 7)
  {
    v18 = (const char *)(*(uint64_t (**)(BBUEURMIImage *))(*(_QWORD *)this + 16))(this);
    _BBULog(16, 7, v18, "", "Signature Address: %u, Signature Size: %u\n", v19, v20, v21, *((_DWORD *)this + 10));
    if (gBBULogMaskGet(void)::once != -1)
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0)
        return;
      goto LABEL_22;
    }
  }
LABEL_21:
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0)
    return;
LABEL_22:
  if (gBBULogVerbosity >= 7)
  {
    v22 = (const char *)(*(uint64_t (**)(BBUEURMIImage *))(*(_QWORD *)this + 16))(this);
    _BBULog(16, 7, v22, "", "Cert Chain Address: %u, Cert Chain Size: %up\n", v23, v24, v25, *((_DWORD *)this + 12));
  }
}

void sub_212B1EAAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B1EAC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B1EAD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void BBUEURMIImage::~BBUEURMIImage(BBUEURMIImage *this)
{
  uint64_t v1;

  *(_QWORD *)this = off_24CE84BF8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24CE84BF8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(this);
}

uint64_t BBUEURMIImage::getWritePayloadData(BBUEURMIImage *this, unsigned __int8 *a2, uint64_t a3, int a4)
{
  uint64_t v5;
  int v6;
  uint64_t result;
  void *exception;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;

  v19 = -1431655766;
  v5 = *((_QWORD *)this + 1);
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Eureka/MultiImage/BBUEURMIImage.cpp", 0x35u, (ctu::LogMessageBuffer *)"Assertion failure(fDataSource)", v9, v10, v11, v18);
    goto LABEL_8;
  }
  v6 = a3;
  result = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t, int *, _QWORD))(*(_QWORD *)v5 + 16))(v5, a2, a3, &v19, (*((_DWORD *)this + 14) + a4));
  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 79, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Eureka/MultiImage/BBUEURMIImage.cpp", 0x37u, (ctu::LogMessageBuffer *)"Assertion failure(( ret == kBBUReturnSuccess) && \"Failed to copy MI Image data.\")", v12, v13, v14, v18);
    goto LABEL_8;
  }
  if (v19 != v6)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 79, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Eureka/MultiImage/BBUEURMIImage.cpp", 0x38u, (ctu::LogMessageBuffer *)"Assertion failure(( amountCopied == amount) && \"Copied data size mismatch: Failed to copy MI Image data.\")", v15, v16, v17, v18);
LABEL_8:
  }
  return result;
}

void sub_212B1EC60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B1EC74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B1EC88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const char *BBUEURMIImage::getName(BBUEURMIImage *this)
{
  return "MultiImage";
}

FILE *fopen_file_func(int a1, char *__filename, char a3)
{
  int v3;
  const char *v4;
  const char *v5;
  int v6;
  char v7;
  const char *v8;

  v3 = a3 & 3;
  v4 = "r+b";
  v5 = "wb";
  if ((a3 & 8) == 0)
    v5 = 0;
  if ((a3 & 4) != 0)
    LOBYTE(v6) = 1;
  else
    v6 = (a3 & 8) >> 3;
  if ((a3 & 4) == 0)
    v4 = v5;
  if (v3 == 1)
    v7 = 1;
  else
    v7 = v6;
  if (v3 == 1)
    v8 = "rb";
  else
    v8 = v4;
  if (__filename && (v7 & 1) != 0)
    return fopen(__filename, v8);
  else
    return 0;
}

size_t fread_file_func(int a1, FILE *__stream, void *__ptr, size_t __nitems)
{
  return fread(__ptr, 1uLL, __nitems, __stream);
}

size_t fwrite_file_func(int a1, FILE *__stream, void *__ptr, size_t __nitems)
{
  return fwrite(__ptr, 1uLL, __nitems, __stream);
}

void ftell_file_func()
{
  JUMPOUT(0x212BFA730);
}

uint64_t fseek_file_func(int a1, FILE *a2, uint64_t a3, unsigned int a4)
{
  if (a4 > 2)
    return -1;
  fseek(a2, a3, a4);
  return 0;
}

uint64_t fclose_file_func(int a1, FILE *a2)
{
  return fclose(a2);
}

uint64_t ferror_file_func(int a1, FILE *a2)
{
  return ferror(a2);
}

void BBUProfiler::BBUProfiler(BBUProfiler *this)
{
  _QWORD *v2;
  CFMutableDictionaryRef Mutable;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const void *v10;

  v2 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
  {
    v4 = *(const void **)this;
    *(_QWORD *)this = Mutable;
    if (v4)
      CFRelease(v4);
  }
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 2);
  if (v5 == v6)
    v7 = 0;
  else
    v7 = ((v5 - v6) << 6) - 1;
  v8 = *((_QWORD *)this + 6);
  v9 = v8 + *((_QWORD *)this + 5);
  if (v7 == v9)
  {
    std::deque<ctu::cf::CFSharedRef<__CFDictionary>>::__add_back_capacity(v2);
    v6 = *((_QWORD *)this + 2);
    v8 = *((_QWORD *)this + 6);
    v9 = v8 + *((_QWORD *)this + 5);
  }
  v10 = *(const void **)this;
  *(_QWORD *)(*(_QWORD *)(v6 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *(_QWORD *)this;
  if (v10)
  {
    CFRetain(v10);
    v8 = *((_QWORD *)this + 6);
  }
  *((_QWORD *)this + 6) = v8 + 1;
}

void sub_212B1EE78(_Unwind_Exception *a1)
{
  const void **v1;
  uint64_t v2;

  std::deque<ctu::cf::CFSharedRef<__CFDictionary>>::~deque[abi:ne180100](v2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

void BBUProfiler::startStage(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  CFMutableDictionaryRef Mutable;
  CFTypeRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string v13;
  CFTypeRef v14;
  CFTypeRef cf;

  v4 = a1[6] + a1[5] - 1;
  v5 = *(void **)(*(_QWORD *)(a1[2] + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v4 & 0x1FF));
  if (v5)
    CFRetain(v5);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v13 = *(std::string *)a2;
  cf = 0;
  ctu::cf::convert_copy();
  v7 = cf;
  v14 = cf;
  cf = Mutable;
  if (Mutable)
  {
    CFRetain(Mutable);
    if (v7)
      CFDictionaryAddValue((CFMutableDictionaryRef)v5, v7, Mutable);
    CFRelease(Mutable);
  }
  if (v7)
    CFRelease(v7);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v8 = a1[3];
  v9 = a1[2];
  if (v8 == v9)
    v10 = 0;
  else
    v10 = ((v8 - v9) << 6) - 1;
  v11 = a1[6];
  v12 = v11 + a1[5];
  if (v10 == v12)
  {
    std::deque<ctu::cf::CFSharedRef<__CFDictionary>>::__add_back_capacity(a1 + 1);
    v9 = a1[2];
    v11 = a1[6];
    v12 = v11 + a1[5];
  }
  *(_QWORD *)(*(_QWORD *)(v9 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v12 & 0x1FF)) = Mutable;
  if (Mutable)
  {
    CFRetain(Mutable);
    v11 = a1[6];
  }
  a1[6] = v11 + 1;
  *((_BYTE *)&v13.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v13, "start");
  BBUProfiler::markEvent(a1, (uint64_t)&v13);
  if (Mutable)
    CFRelease(Mutable);
  if (v5)
    CFRelease(v5);
}

void sub_212B1F078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, const void *a18, const void *a19)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a19);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a18);
  if (a16 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)&a9);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a10);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)&a9);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void BBUProfiler::markEvent(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  void *v4;
  int v5;
  const __CFAllocator *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  std::string v10;
  CFNumberRef v11;
  CFNumberRef v12;
  int valuePtr;

  v3 = a1[6] + a1[5] - 1;
  v4 = *(void **)(*(_QWORD *)(a1[2] + ((v3 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v3 & 0x1FF));
  if (v4)
    CFRetain(v4);
  v5 = TelephonyUtilSystemMachTime();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v10 = *(std::string *)a2;
  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v12 = 0;
  ctu::cf::convert_copy();
  v7 = v12;
  v11 = v12;
  valuePtr = v5;
  v8 = CFNumberCreate(v6, kCFNumberIntType, &valuePtr);
  v9 = v8;
  v12 = v8;
  if (v7 && v8)
  {
    CFDictionaryAddValue((CFMutableDictionaryRef)v4, v7, v8);
  }
  else if (!v8)
  {
    goto LABEL_11;
  }
  CFRelease(v9);
LABEL_11:
  if (v7)
    CFRelease(v7);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v10.__r_.__value_.__l.__data_);
    if (!v4)
      return;
    goto LABEL_17;
  }
  if (v4)
LABEL_17:
    CFRelease(v4);
}

void sub_212B1F234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, const void *a18)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a18);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a17);
  if (a16 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a10);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

uint64_t BBUProfiler::endStage(BBUProfiler *this)
{
  uint64_t v2;
  unint64_t v3;
  int *v4;
  int *v5;
  CFTypeID v6;
  const __CFNumber *v7;
  int *v8;
  int *v9;
  CFTypeID v10;
  const __CFNumber *v11;
  unint64_t v12;
  int v13;
  int v14;
  const __CFAllocator *v15;
  __CFDictionary *v16;
  const __CFAllocator *v17;
  int v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  _QWORD v35[2];
  char v36;
  CFNumberRef v37;
  CFNumberRef v38;
  int valuePtr;

  v36 = 4;
  strcpy((char *)v35, "stop");
  BBUProfiler::markEvent(this, (uint64_t)v35);
  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 5) + *((_QWORD *)this + 6) - 1;
  v35[0] = 0xAAAAAAAAAAAAAAAALL;
  v35[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v35, *(const __CFDictionary **)(*(_QWORD *)(v2 + ((v3 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v3 & 0x1FF)));
  v34 = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v38, "stop");
  v4 = (int *)(*(uint64_t (**)(_QWORD *, CFNumberRef))v35[0])(v35, v38);
  v5 = v4;
  if (v4)
  {
    v6 = CFGetTypeID(v4);
    if (v6 == CFNumberGetTypeID())
      ctu::cf::assign((ctu::cf *)((char *)&v34 + 4), v5, v7);
    CFRelease(v5);
  }
  MEMORY[0x212BF9A34](&v38);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v38, "start");
  v8 = (int *)(*(uint64_t (**)(_QWORD *, CFNumberRef))v35[0])(v35, v38);
  v9 = v8;
  if (v8)
  {
    v10 = CFGetTypeID(v8);
    if (v10 == CFNumberGetTypeID())
      ctu::cf::assign((ctu::cf *)&v34, v9, v11);
    CFRelease(v9);
  }
  MEMORY[0x212BF9A34](&v38);
  v12 = *((_QWORD *)this + 6) + *((_QWORD *)this + 5) - 1;
  v14 = v34;
  v13 = HIDWORD(v34);
  v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v16 = *(__CFDictionary **)(*(_QWORD *)(*((_QWORD *)this + 2) + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v12 & 0x1FF));
  v38 = 0;
  ctu::cf::convert_copy((ctu::cf *)&v38, (const __CFString **)"delta", (const char *)0x8000100, (uint64_t)v15, v17);
  v18 = v13 - v14;
  v19 = v38;
  v37 = v38;
  valuePtr = v18;
  v20 = CFNumberCreate(v15, kCFNumberIntType, &valuePtr);
  v21 = v20;
  v38 = v20;
  if (v19 && v20)
  {
    CFDictionaryAddValue(v16, v19, v20);
  }
  else if (!v20)
  {
    goto LABEL_14;
  }
  CFRelease(v21);
LABEL_14:
  if (v19)
    CFRelease(v19);
  v23 = *((_QWORD *)this + 5);
  v22 = *((_QWORD *)this + 6);
  v24 = v22 - 1;
  v25 = v22 - 1 + v23;
  v26 = *((_QWORD *)this + 2);
  v27 = *(_QWORD *)(v26 + ((v25 >> 6) & 0x3FFFFFFFFFFFFF8));
  v28 = v25 & 0x1FF;
  v29 = *(const void **)(v27 + 8 * v28);
  if (v29)
  {
    CFRetain(*(CFTypeRef *)(v27 + 8 * v28));
    v23 = *((_QWORD *)this + 5);
    v22 = *((_QWORD *)this + 6);
    v26 = *((_QWORD *)this + 2);
    v24 = v22 - 1;
    v30 = *(const void **)(*(_QWORD *)(v26 + (((unint64_t)(v22 - 1 + v23) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((v22 - 1 + v23) & 0x1FF));
    if (v30)
    {
      CFRelease(v30);
      v26 = *((_QWORD *)this + 2);
      v23 = *((_QWORD *)this + 5);
      v22 = *((_QWORD *)this + 6);
      v24 = v22 - 1;
    }
  }
  v31 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 6) = v24;
  if (v31 == v26)
    v32 = 0;
  else
    v32 = ((v31 - v26) << 6) - 1;
  if ((unint64_t)(v32 - (v23 + v22) + 1) >= 0x400)
  {
    operator delete(*(void **)(v31 - 8));
    *((_QWORD *)this + 3) -= 8;
  }
  if (v29)
    CFRelease(v29);
  return MEMORY[0x212BF9A70](v35);
}

void sub_212B1F560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  MEMORY[0x212BF9A70]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_212B1F59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  MEMORY[0x212BF9A70](va);
  _Unwind_Resume(a1);
}

void sub_212B1F5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  MEMORY[0x212BF9A34](va1);
  MEMORY[0x212BF9A70]((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL BBUProfiler::exportToFile(CFTypeRef *a1, uint64_t a2)
{
  CFTypeRef v3;
  const __CFAllocator *v4;
  const __CFString *v5;
  const __CFURL *v6;
  __CFWriteStream *v7;
  CFIndex v8;
  _BOOL8 v9;
  std::string __p;
  const __CFString *v12;
  CFTypeRef v13;
  uint64_t v14;
  std::string v15;
  std::string v16;
  const __CFString *v17;

  v3 = *a1;
  CFRetain(*a1);
  v13 = v3;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v15 = __p;
  v14 = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    v16 = v15;
  v17 = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (ctu::cf::convert_copy())
    v5 = v17;
  else
    v5 = 0;
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v12 = v5;
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
LABEL_20:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_21;
  }
  operator delete(v16.__r_.__value_.__l.__data_);
  v12 = v5;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_15:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_16;
LABEL_21:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_16:
  v6 = CFURLCreateWithFileSystemPath(v4, v5, kCFURLPOSIXPathStyle, 0);
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  v7 = CFWriteStreamCreateWithFile(0, v6);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  if (!CFWriteStreamOpen(v7))
  {
    v9 = 0;
    if (!v7)
      goto LABEL_24;
    goto LABEL_23;
  }
  v8 = CFPropertyListWrite(v3, v7, kCFPropertyListXMLFormat_v1_0, 0, 0);
  CFWriteStreamClose(v7);
  v9 = v8 != 0;
  if (v7)
LABEL_23:
    CFRelease(v7);
LABEL_24:
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
  if (v3)
    CFRelease(v3);
  return v9;
}

void sub_212B1F7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, const void *a17, const void *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a18);
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a17);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a17);
  _Unwind_Resume(a1);
}

void std::deque<ctu::cf::CFSharedRef<__CFDictionary>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  char *v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  BOOL v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v35 = (v5 - v9) >> 2;
    if (v5 == v9)
      v35 = 1;
    if (v35 >> 61)
      goto LABEL_109;
    v36 = v35 >> 2;
    v37 = 8 * v35;
    v38 = (char *)operator new(8 * v35);
    v39 = &v38[8 * v36];
    v41 = v5 - v7;
    v40 = v5 == v7;
    v5 = v39;
    if (!v40)
    {
      v5 = &v39[v41 & 0xFFFFFFFFFFFFFFF8];
      v42 = v41 - 8;
      if ((unint64_t)(v41 - 8) >= 0x38)
      {
        v92 = &v38[8 * v36];
        v43 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v42 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v43 = &v39[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v43 = &v38[8 * v36];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v43 = v99;
        v43 += 8;
      }
      while (v43 != v5);
    }
LABEL_89:
    *a1 = v38;
    a1[1] = v39;
    a1[2] = v5;
    a1[3] = &v38[v37];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v44 = &v72[8 * v70];
      v73 = v44;
      if (v18 != v19)
      {
        v73 = &v44[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v44[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v44;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v44 = (char *)a1[1];
      }
    }
    else
    {
      v44 = v19;
    }
    *((_QWORD *)v44 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v40 = v5 == v84;
      v5 = v105;
      if (!v40)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = &v28[8 * v22];
  v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    v33 = v29;
    if (v21 < 1)
    {
      if (v18 == v19)
        v45 = 1;
      else
        v45 = v21 >> 2;
      if (v45 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v30 = (char *)operator new(8 * v45);
      v31 = &v30[8 * v45];
      operator delete(v28);
      v46 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v30;
      *(_QWORD *)v30 = v33;
      v32 = v30 + 8;
      if (v18 == v46)
        goto LABEL_40;
    }
    else
    {
      v34 = v22 + 2;
      if (v22 >= -1)
        v34 = v22 + 1;
      v30 -= 8 * (v34 >> 1);
      *(_QWORD *)v30 = v29;
      v32 = v30 + 8;
      if (v18 == v19)
        goto LABEL_40;
    }
    goto LABEL_44;
  }
  *(_QWORD *)v30 = v29;
  v32 = v30 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_44:
      if (v30 == v28)
      {
        if (v32 >= v31)
        {
          if (v31 == v28)
            v53 = 1;
          else
            v53 = (v31 - v28) >> 2;
          if (v53 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v54 = (char *)operator new(8 * v53);
          v55 = v54;
          v56 = (v53 + 3) >> 2;
          v30 = &v54[8 * v56];
          v57 = v32 - v28;
          v40 = v32 == v28;
          v32 = v30;
          if (!v40)
          {
            v32 = &v30[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = v57 - 8;
            v59 = &v54[8 * v56];
            v60 = v28;
            if (v58 < 0x38)
              goto LABEL_114;
            v61 = 8 * v56;
            v59 = &v54[8 * v56];
            v60 = v28;
            if ((unint64_t)(v59 - v28) < 0x20)
              goto LABEL_114;
            v62 = (v58 >> 3) + 1;
            v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
            v59 = &v30[v63];
            v60 = &v28[v63];
            v64 = (__int128 *)(v28 + 16);
            v65 = &v54[v61 + 16];
            v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v67 = *v64;
              *((_OWORD *)v65 - 1) = *(v64 - 1);
              *(_OWORD *)v65 = v67;
              v64 += 2;
              v65 += 32;
              v66 -= 4;
            }
            while (v66);
            if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_114:
              do
              {
                v68 = *(_QWORD *)v60;
                v60 += 8;
                *(_QWORD *)v59 = v68;
                v59 += 8;
              }
              while (v59 != v32);
            }
          }
          v31 = &v54[8 * v53];
          operator delete(v28);
          v28 = v55;
        }
        else
        {
          v49 = (v31 - v32) >> 3;
          if (v49 >= -1)
            v50 = v49 + 1;
          else
            v50 = v49 + 2;
          v51 = v50 >> 1;
          v30 = &v28[8 * (v50 >> 1)];
          v52 = v28;
          if (v32 != v28)
          {
            memmove(v30, v28, v32 - v28);
            v52 = v32;
          }
          v32 = (char *)v52 + 8 * v51;
        }
      }
      v48 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v30 - 1) = v48;
      v30 -= 8;
    }
    while (v18 != (char *)a1[1]);
  }
LABEL_40:
  v47 = (char *)*a1;
  *a1 = v28;
  a1[1] = v30;
  a1[2] = v32;
  a1[3] = v31;
  if (v47)
    operator delete(v47);
}

void sub_212B1FF3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t BBUEnvironment::validate(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string::size_type v8;
  unint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  int v14;
  const char *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string *p_size;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  std::string::size_type size;
  unint64_t v26;
  int v27;
  void **v28;
  uint64_t v29;
  int v30;
  int v31;
  int v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  char v37;
  void *v38;
  int v40;
  void *exception;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  std::string __size;
  void *__p[2];
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v55 = 10;
  strcpy((char *)__p, "CommCenter");
  __size.__r_.__value_.__r.__words[0] = 0;
  if (sysctl(BBUEnvironment::isProcessLoaded(std::string const&)::kNames, 3u, 0, (size_t *)&__size, 0, 0))
  {
    v40 = *__error();
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUEnvironment.cpp", 0x24u, (ctu::LogMessageBuffer *)"first sysctl() failed with err = %d", v42, v43, v44, v40);
    goto LABEL_70;
  }
  v3 = (char *)malloc(__size.__r_.__value_.__r.__words[0]);
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 11, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUEnvironment.cpp", 0x2Au, (ctu::LogMessageBuffer *)"malloc failed for proc list", v45, v46, v47, v52);
    goto LABEL_70;
  }
  v4 = v3;
  if (sysctl(BBUEnvironment::isProcessLoaded(std::string const&)::kNames, 3u, v3, (size_t *)&__size, 0, 0))
  {
    v48 = *__error();
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUEnvironment.cpp", 0x32u, (ctu::LogMessageBuffer *)"second sysctl() failed with err = %d", v49, v50, v51, v48);
LABEL_70:
  }
  v8 = __size.__r_.__value_.__r.__words[0];
  v9 = ((__size.__r_.__value_.__r.__words[0] >> 3) * (unsigned __int128)0x329161F9ADD3C0CBuLL) >> 64;
  if (gBBULogMaskGet(void)::once == -1)
  {
    v10 = __size.__r_.__value_.__r.__words[0] / 0x288;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v10 = v9 >> 4;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) != 0)
    {
LABEL_6:
      if ((gBBULogVerbosity & 0x80000000) == 0)
        _BBULog(3, 0, "BBUEnvironment", "", "There are %zu processes\n", v5, v6, v7, v10);
    }
  }
  if (v8 <= 0x287)
  {
    free(v4);
LABEL_60:
    if (*(char *)(a2 + 23) < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
    return 1;
  }
  v11 = 0;
  v12 = 0;
  while (1)
  {
    v15 = &v4[648 * v11 + 243];
    memset(&__size, 170, sizeof(__size));
    v16 = strlen(v15);
    if (v16 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v20 = v16;
    if (v16 >= 0x17)
    {
      v22 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v22 = v16 | 7;
      v23 = v22 + 1;
      p_size = (std::string *)operator new(v22 + 1);
      __size.__r_.__value_.__l.__size_ = v20;
      __size.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
      __size.__r_.__value_.__r.__words[0] = (std::string::size_type)p_size;
LABEL_20:
      memcpy(p_size, v15, v20);
      goto LABEL_21;
    }
    *((_BYTE *)&__size.__r_.__value_.__s + 23) = v16;
    p_size = &__size;
    if (v16)
      goto LABEL_20;
LABEL_21:
    p_size->__r_.__value_.__s.__data_[v20] = 0;
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_28;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 8) == 0)
        goto LABEL_28;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
    {
      if ((__size.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &__size;
      else
        LOBYTE(v24) = __size.__r_.__value_.__s.__data_[0];
      _BBULog(3, 0, "BBUEnvironment", "", "Checking against process %s\n", v17, v18, v19, (char)v24);
    }
LABEL_28:
    if ((__size.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__size.__r_.__value_.__r.__words[2]);
    else
      size = __size.__r_.__value_.__l.__size_;
    v26 = v55;
    v27 = v55;
    if (v55 < 0)
      v26 = (unint64_t)__p[1];
    if (size != v26)
    {
      if ((*((_BYTE *)&__size.__r_.__value_.__s + 23) & 0x80) != 0)
        operator delete(__size.__r_.__value_.__l.__data_);
      goto LABEL_12;
    }
    if (v55 >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if ((*((_BYTE *)&__size.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v13 = (void *)__size.__r_.__value_.__r.__words[0];
      v14 = memcmp(__size.__r_.__value_.__l.__data_, v28, __size.__r_.__value_.__l.__size_);
      operator delete(v13);
      if (!v14)
        break;
      goto LABEL_12;
    }
    if (!*((_BYTE *)&__size.__r_.__value_.__s + 23))
      break;
    v29 = 0;
    do
    {
      v30 = __size.__r_.__value_.__s.__data_[v29];
      v31 = *((unsigned __int8 *)v28 + v29);
    }
    while (v30 == v31 && HIBYTE(__size.__r_.__value_.__r.__words[2]) - 1 != v29++);
    if (v30 == v31)
      break;
LABEL_12:
    v11 = ++v12;
    if (v10 <= v12)
    {
      v33 = 0;
      free(v4);
      v34 = *(_QWORD *)"CommCenter";
      if (v27 < 0)
        goto LABEL_59;
LABEL_52:
      if (!v33)
        goto LABEL_60;
      goto LABEL_53;
    }
  }
  v33 = 1;
  free(v4);
  v34 = *(_QWORD *)"CommCenter";
  if ((v27 & 0x80000000) == 0)
    goto LABEL_52;
LABEL_59:
  operator delete(__p[0]);
  if ((v33 & 1) == 0)
    goto LABEL_60;
LABEL_53:
  __size.__r_.__value_.__l.__size_ = v34;
  __size.__r_.__value_.__r.__words[0] = 0x20737365636F7250;
  __size.__r_.__value_.__r.__words[2] = 29285;
  v35 = std::string::append(&__size, " is loaded, please unload it", 0x1CuLL);
  v36 = v35->__r_.__value_.__r.__words[0];
  __p[0] = (void *)v35->__r_.__value_.__l.__size_;
  *(void **)((char *)__p + 7) = *(void **)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
  v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  v38 = __p[0];
  *(_QWORD *)a2 = v36;
  *(_QWORD *)(a2 + 8) = v38;
  *(void **)(a2 + 15) = *(void **)((char *)__p + 7);
  *(_BYTE *)(a2 + 23) = v37;
  if (SHIBYTE(__size.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__size.__r_.__value_.__l.__data_);
  return 0;
}

void sub_212B204A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t bbufs::prepareDestination(bbufs *this, const char *a2)
{
  size_t v3;
  std::string::size_type v4;
  std::string *p_dst;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  const void *v10;
  size_t v11;
  std::string::size_type v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  int v17;
  size_t v18;
  int v19;
  std::string::size_type size;
  unint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  std::string *v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  void *v34;
  int v35;
  passwd *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uid_t pw_uid;
  gid_t pw_gid;
  const char *v45;
  int *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::string *v70;
  int *v71;
  uint64_t folder;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  int v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  uint64_t v93;
  int v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const std::string::value_type **v106;
  char v107;
  __int128 v108;
  int v109;
  std::string::size_type v110;
  int v111;
  std::string::size_type v112;
  unint64_t v113;
  char *v114;
  std::string *v115;
  char *v116;
  std::string *v117;
  int v118;
  size_t v119;
  unint64_t v120;
  char *v121;
  _OWORD *v122;
  char *v123;
  std::string *v124;
  std::error_code *v125;
  void **v126;
  const std::__fs::filesystem::path *v127;
  const std::__fs::filesystem::path *v128;
  int v129;
  int *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  std::error_code *v141;
  void **v142;
  const std::__fs::filesystem::path *v143;
  char v144;
  char v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void **v153;
  void **v154;
  void *v155;
  char v156;
  char v157;
  int v158;
  char *v159;
  void *v160[3];
  void *__p[3];
  std::string v162;
  void *v163;
  _QWORD *v164;
  unint64_t v165;
  std::string v166;
  std::string __dst;
  _OWORD v168[2];

  memset(v168, 170, 24);
  v3 = strlen((const char *)this);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = v4;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v3;
  p_dst = &__dst;
  if (v3)
LABEL_8:
    memcpy(p_dst, this, v4);
  p_dst->__r_.__value_.__s.__data_[v4] = 0;
  v8 = std::string::append(&__dst, "/", 1uLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  *(_QWORD *)&v168[1] = *((_QWORD *)&v8->__r_.__value_.__l + 2);
  v168[0] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v10 = (const void *)kBBUFSServerBackupName;
  v11 = strlen((const char *)kBBUFSServerBackupName);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    v166.__r_.__value_.__l.__size_ = v12;
    v166.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    v166.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    goto LABEL_18;
  }
  *((_BYTE *)&v166.__r_.__value_.__s + 23) = v11;
  v13 = &v166;
  if (v11)
LABEL_18:
    memmove(v13, v10, v12);
  *((_BYTE *)v13 + v12) = 0;
  v16 = std::string::append(&v166, "/", 1uLL);
  __dst = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
  v17 = SBYTE7(v168[1]);
  if ((SBYTE7(v168[1]) & 0x80u) == 0)
    v18 = BYTE7(v168[1]);
  else
    v18 = *((_QWORD *)&v168[0] + 1);
  v19 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  v21 = size + v18;
  memset(&v166, 170, sizeof(v166));
  if (size + v18 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v21 <= 0x16)
  {
    memset(&v166, 0, sizeof(v166));
    v22 = (char *)&v166;
    *((_BYTE *)&v166.__r_.__value_.__s + 23) = size + v18;
    if (!v18)
      goto LABEL_34;
    goto LABEL_30;
  }
  v55 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v21 | 7) != 0x17)
    v55 = v21 | 7;
  v56 = v55 + 1;
  v22 = (char *)operator new(v55 + 1);
  v166.__r_.__value_.__l.__size_ = size + v18;
  v166.__r_.__value_.__r.__words[2] = v56 | 0x8000000000000000;
  v166.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  if (v18)
  {
LABEL_30:
    if (v17 >= 0)
      v23 = v168;
    else
      v23 = *(_OWORD **)&v168[0];
    memmove(v22, v23, v18);
  }
LABEL_34:
  v24 = &v22[v18];
  if (size)
  {
    if (v19 >= 0)
      v25 = &__dst;
    else
      v25 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    memmove(v24, v25, size);
  }
  v24[size] = 0;
  v26 = strlen((const char *)this);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v33 = v26;
  if (v26 >= 0x17)
  {
    v57 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v57 = v26 | 7;
    v58 = v57 + 1;
    v34 = operator new(v57 + 1);
    v164 = (_QWORD *)v33;
    v165 = v58 | 0x8000000000000000;
    v163 = v34;
  }
  else
  {
    HIBYTE(v165) = v26;
    v34 = &v163;
    if (!v26)
    {
      LOBYTE(v163) = 0;
      v35 = SHIBYTE(v165);
      if ((SHIBYTE(v165) & 0x80000000) == 0)
        goto LABEL_43;
      goto LABEL_60;
    }
  }
  memcpy(v34, this, v33);
  *((_BYTE *)v34 + v33) = 0;
  v35 = SHIBYTE(v165);
  if ((SHIBYTE(v165) & 0x80000000) == 0)
  {
LABEL_43:
    if (v35)
      goto LABEL_44;
LABEL_61:
    v60 = "invalid path pointer to create directory\n";
LABEL_63:
    _BBUFSDebugPrint("prepareDestination", v60, v27, v28, v29, v30, v31, v32, v156);
    goto LABEL_64;
  }
LABEL_60:
  v59 = v164;
  operator delete(v163);
  if (!v59)
    goto LABEL_61;
LABEL_44:
  if ((ctu::fs::create_directory() & 1) == 0)
  {
    v60 = "failed creating directory\n";
    goto LABEL_63;
  }
  v36 = getpwnam("_wireless");
  if (!v36)
  {
    v63 = "failed to get uid and gid information for _wireless\n";
    _BBUFSDebugPrint("getWirelessID", "failed to get uid and gid information for _wireless\n", v37, v38, v39, v40, v41, v42, v156);
LABEL_80:
    _BBUFSDebugPrint("prepareDestination", v63, v64, v65, v66, v67, v68, v69, v156);
    goto LABEL_64;
  }
  pw_uid = v36->pw_uid;
  pw_gid = v36->pw_gid;
  if ((SBYTE7(v168[1]) & 0x80u) == 0)
    v45 = (const char *)v168;
  else
    v45 = *(const char **)&v168[0];
  if (chown(v45, pw_uid, pw_gid))
  {
    v46 = __error();
    v47 = strerror(*v46);
    v54 = "failed changing owner of bbfs directory:  %s\n";
LABEL_51:
    _BBUFSDebugPrint("prepareDestination", v54, v48, v49, v50, v51, v52, v53, v47);
LABEL_64:
    v61 = 0;
    goto LABEL_65;
  }
  if ((ctu::fs::create_directory() & 1) == 0)
  {
    v63 = "failed creating backup directory\n";
    goto LABEL_80;
  }
  if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v70 = &v166;
  else
    v70 = (std::string *)v166.__r_.__value_.__r.__words[0];
  if (chown((const char *)v70, pw_uid, pw_gid))
  {
    v71 = __error();
    v47 = strerror(*v71);
    v54 = "failed changing owner of bbfs backup directory:  %s\n";
    goto LABEL_51;
  }
  v163 = 0;
  v164 = 0;
  v165 = 0;
  folder = ctu::fs::read_folder();
  if ((folder & 1) != 0)
  {
    if (capabilities::radio::vendor((capabilities::radio *)folder) != 2)
      goto LABEL_117;
    v85 = v163;
    if (v163 == v164)
      goto LABEL_118;
    v86 = v163;
    while (1)
    {
      v87 = *((unsigned __int8 *)v86 + 23);
      v88 = (char)v87;
      if ((v87 & 0x80u) != 0)
        v87 = v86[1];
      if (v87 == 10)
      {
        v89 = v88 >= 0 ? v86 : (uint64_t *)*v86;
        v90 = *v89;
        v91 = *((unsigned __int16 *)v89 + 4);
        if (v90 == 0x6E2E636974617473 && v91 == 28022)
          break;
      }
      v86 += 3;
      if (v86 == v164)
      {
        v86 = v164;
        break;
      }
    }
    if (v86 == v164)
      goto LABEL_118;
    while (1)
    {
      v93 = *((unsigned __int8 *)v85 + 23);
      v94 = (char)v93;
      if ((v93 & 0x80u) != 0)
        v93 = v85[1];
      if (v93 == 11)
      {
        v95 = v94 >= 0 ? v85 : (uint64_t *)*v85;
        v96 = *v95;
        v97 = *(uint64_t *)((char *)v95 + 3);
        if (v96 == 0x2E63696D616E7964 && v97 == 0x6D766E2E63696D61)
          break;
      }
      v85 += 3;
      if (v85 == v164)
      {
        v85 = v164;
        break;
      }
    }
    if (v85 == v164)
    {
LABEL_118:
      _BBUFSDebugPrint("prepareDestination", "both files not present in backup, removing backup files\n", v79, v80, v81, v82, v83, v84, v156);
      v99 = 0;
    }
    else
    {
LABEL_117:
      v99 = 1;
    }
    _BBUFSDebugPrint("prepareDestination", "FSInit: restore_files=%d\n", v79, v80, v81, v82, v83, v84, v99);
    v159 = (char *)v164;
    if (v163 != v164)
    {
      v106 = (const std::string::value_type **)((char *)v163 + 24);
      v157 = 1;
      v158 = v99;
      while (1)
      {
        memset(&v162, 170, sizeof(v162));
        if (*((char *)v106 - 1) < 0)
        {
          std::string::__init_copy_ctor_external(&v162, *(v106 - 3), (std::string::size_type)*(v106 - 2));
        }
        else
        {
          v108 = *(_OWORD *)(v106 - 3);
          v162.__r_.__value_.__r.__words[2] = (std::string::size_type)*(v106 - 1);
          *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v108;
        }
        v109 = SHIBYTE(v166.__r_.__value_.__r.__words[2]);
        if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v110 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
        else
          v110 = v166.__r_.__value_.__l.__size_;
        v111 = SHIBYTE(v162.__r_.__value_.__r.__words[2]);
        if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v112 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
        else
          v112 = v162.__r_.__value_.__l.__size_;
        v113 = v112 + v110;
        memset(__p, 170, sizeof(__p));
        if (v112 + v110 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v113 <= 0x16)
          break;
        v137 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v113 | 7) != 0x17)
          v137 = v113 | 7;
        v138 = v137 + 1;
        v114 = (char *)operator new(v137 + 1);
        __p[1] = (void *)(v112 + v110);
        __p[2] = (void *)(v138 | 0x8000000000000000);
        __p[0] = v114;
        v99 = v158;
        if (v110)
          goto LABEL_138;
LABEL_142:
        v116 = &v114[v110];
        if (v112)
        {
          if (v111 >= 0)
            v117 = &v162;
          else
            v117 = (std::string *)v162.__r_.__value_.__r.__words[0];
          memmove(v116, v117, v112);
        }
        v116[v112] = 0;
        v118 = SBYTE7(v168[1]);
        if ((SBYTE7(v168[1]) & 0x80u) == 0)
          v119 = BYTE7(v168[1]);
        else
          v119 = *((_QWORD *)&v168[0] + 1);
        v120 = v119 + v112;
        memset(v160, 170, sizeof(v160));
        if (v119 + v112 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v120 <= 0x16)
        {
          memset(v160, 0, sizeof(v160));
          v121 = (char *)v160;
          HIBYTE(v160[2]) = v119 + v112;
          if (!v119)
            goto LABEL_157;
LABEL_153:
          if (v118 >= 0)
            v122 = v168;
          else
            v122 = *(_OWORD **)&v168[0];
          memmove(v121, v122, v119);
          goto LABEL_157;
        }
        v139 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v120 | 7) != 0x17)
          v139 = v120 | 7;
        v140 = v139 + 1;
        v121 = (char *)operator new(v139 + 1);
        v160[1] = (void *)(v119 + v112);
        v160[2] = (void *)(v140 | 0x8000000000000000);
        v160[0] = v121;
        v99 = v158;
        if (v119)
          goto LABEL_153;
LABEL_157:
        v123 = &v121[v119];
        if (v111 >= 0)
          v124 = &v162;
        else
          v124 = (std::string *)v162.__r_.__value_.__r.__words[0];
        if (v112)
          memmove(v123, v124, v112);
        v123[v112] = 0;
        if (v99)
        {
          _BBUFSDebugPrint("prepareDestination", "%s backup present, restoring\n", v100, v101, v102, v103, v104, v105, (char)v124);
          v126 = __p;
          if (SHIBYTE(__p[2]) >= 0)
            v127 = (const std::__fs::filesystem::path *)__p;
          else
            v127 = (const std::__fs::filesystem::path *)__p[0];
          if (SHIBYTE(v160[2]) >= 0)
            v128 = (const std::__fs::filesystem::path *)v160;
          else
            v128 = (const std::__fs::filesystem::path *)v160[0];
          rename(v127, v128, v125);
          if (v129 < 0)
          {
            if (SHIBYTE(__p[2]) < 0)
              LOBYTE(v126) = __p[0];
            v130 = __error();
            strerror(*v130);
            _BBUFSDebugPrint("prepareDestination", "failed restoring %s to %s:  %s\n", v131, v132, v133, v134, v135, v136, (char)v126);
            goto LABEL_197;
          }
        }
        else
        {
          _BBUFSDebugPrint("prepareDestination", "%s backup present, but rule is to delete it\n", v100, v101, v102, v103, v104, v105, (char)v124);
          v142 = __p;
          if (SHIBYTE(__p[2]) >= 0)
            v143 = (const std::__fs::filesystem::path *)__p;
          else
            v143 = (const std::__fs::filesystem::path *)__p[0];
          if (remove(v143, v141) < 0)
          {
            if (SHIBYTE(__p[2]) < 0)
              LOBYTE(v142) = __p[0];
            v146 = __error();
            strerror(*v146);
            _BBUFSDebugPrint("prepareDestination", "failed removing %s:  %s\n", v147, v148, v149, v150, v151, v152, (char)v142);
LABEL_197:
            v157 = 0;
            v144 = 1;
            if ((SHIBYTE(v160[2]) & 0x80000000) == 0)
              goto LABEL_187;
LABEL_186:
            operator delete(v160[0]);
            goto LABEL_187;
          }
        }
        v144 = 0;
        if (SHIBYTE(v160[2]) < 0)
          goto LABEL_186;
LABEL_187:
        if (SHIBYTE(__p[2]) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_122;
LABEL_189:
          operator delete(v162.__r_.__value_.__l.__data_);
          if (v106 == (const std::string::value_type **)v159)
            v145 = 1;
          else
            v145 = v144;
          v106 += 3;
          if ((v145 & 1) != 0)
            goto LABEL_200;
        }
        else
        {
          if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_189;
LABEL_122:
          if (v106 == (const std::string::value_type **)v159)
            v107 = 1;
          else
            v107 = v144;
          v106 += 3;
          if ((v107 & 1) != 0)
            goto LABEL_200;
        }
      }
      memset(__p, 0, sizeof(__p));
      v114 = (char *)__p;
      HIBYTE(__p[2]) = v112 + v110;
      if (!v110)
        goto LABEL_142;
LABEL_138:
      if (v109 >= 0)
        v115 = &v166;
      else
        v115 = (std::string *)v166.__r_.__value_.__r.__words[0];
      memmove(v114, v115, v110);
      goto LABEL_142;
    }
    v157 = 1;
LABEL_200:
    v61 = v157 & 1;
  }
  else
  {
    _BBUFSDebugPrint("prepareDestination", "failed reading backup directory\n", v73, v74, v75, v76, v77, v78, v156);
    v61 = 0;
  }
  v153 = (void **)v163;
  if (v163)
  {
    v154 = (void **)v164;
    v155 = v163;
    if (v164 != v163)
    {
      do
      {
        if (*((char *)v154 - 1) < 0)
          operator delete(*(v154 - 3));
        v154 -= 3;
      }
      while (v154 != v153);
      v155 = v163;
    }
    v164 = v153;
    operator delete(v155);
  }
LABEL_65:
  if ((SHIBYTE(v166.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_67;
LABEL_70:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SBYTE7(v168[1]) & 0x80000000) == 0)
      return v61;
LABEL_71:
    operator delete(*(void **)&v168[0]);
    return v61;
  }
  operator delete(v166.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_70;
LABEL_67:
  if (SBYTE7(v168[1]) < 0)
    goto LABEL_71;
  return v61;
}

void sub_212B20F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  std::vector<std::string>::~vector[abi:ne180100](&a34);
  if (a42 < 0)
    operator delete(__p);
  if (*(char *)(v42 - 121) < 0)
    operator delete(*(void **)(v42 - 144));
  if (*(char *)(v42 - 89) < 0)
    operator delete(*(void **)(v42 - 112));
  _Unwind_Resume(a1);
}

void bbufs::createDirectoryWithTimestamp(const void **a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v4;
  tm *v5;
  int v6;
  size_t v7;
  unint64_t v8;
  std::string *p_dst;
  char *v10;
  size_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  size_t v16;
  size_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  size_t v27;
  char *v28;
  char *v29;
  size_t v30;
  void *v31;
  char *v32;
  unint64_t v34;
  void *v35;
  unint64_t v36;
  _QWORD *v37;
  size_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  passwd *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::string::pointer data;
  std::string::size_type size;
  unint64_t v66;
  uid_t pw_uid;
  unsigned int v68;
  char *v69;
  int v70;
  size_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  char *v77;
  std::string *v78;
  std::string::size_type v79;
  int v80;
  size_t v81;
  int v82;
  std::string::size_type v83;
  unint64_t v84;
  std::string *v85;
  const void *v86;
  char *v87;
  std::string *v88;
  std::string *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::string *v98;
  int *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::string::size_type v106;
  std::string::pointer v107;
  uint64_t v108;
  char *v109;
  gid_t pw_gid;
  uid_t v111;
  void *v112;
  std::string __p[2];
  void *v114[3];
  void *v115;
  unint64_t v116;
  int64_t v117;
  std::string __dst;
  std::string v119;
  time_t v120;
  char __s[16];
  __int128 v122;
  __int128 v123;
  __int16 v124;
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  v124 = -21846;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v122 = v4;
  v123 = v4;
  *(_OWORD *)__s = v4;
  v120 = time(0);
  v5 = localtime(&v120);
  strftime(__s, 0x32uLL, "%Y-%m-%d-%H-%M-%S", v5);
  memset(a2, 170, 24);
  v6 = *((char *)a1 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a1 + 23);
  else
    v7 = (size_t)a1[1];
  if (!v7)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    goto LABEL_33;
  }
  v8 = v7 + 7;
  memset(&__dst, 170, sizeof(__dst));
  if (v7 + 7 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v8 > 0x16)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    p_dst = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v7 + 7;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7 + 7;
  }
  if (v6 >= 0)
    v15 = a1;
  else
    v15 = *a1;
  memmove(p_dst, v15, v7);
  strcpy((char *)p_dst + v7, "bbulog-");
  v16 = strlen(__s);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = v16;
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    v18 = operator new(v19 + 1);
    v116 = v17;
    v117 = v20 | 0x8000000000000000;
    v115 = v18;
    goto LABEL_22;
  }
  HIBYTE(v117) = v16;
  v18 = &v115;
  if (v16)
LABEL_22:
    memcpy(v18, __s, v17);
  *((_BYTE *)v18 + v17) = 0;
  if (v117 >= 0)
    v21 = (const std::string::value_type *)&v115;
  else
    v21 = (const std::string::value_type *)v115;
  if (v117 >= 0)
    v22 = HIBYTE(v117);
  else
    v22 = v116;
  v23 = std::string::append(&__dst, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v119.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v119, "/", 1uLL);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  a2[2] = *((_QWORD *)&v25->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v117) & 0x80000000) == 0)
      goto LABEL_31;
LABEL_137:
    operator delete(v115);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_32;
LABEL_138:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_32;
  }
  operator delete(v119.__r_.__value_.__l.__data_);
  if (SHIBYTE(v117) < 0)
    goto LABEL_137;
LABEL_31:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_138;
LABEL_32:
  v12 = *((unsigned __int8 *)a2 + 23);
  v10 = (char *)*a2;
  v11 = a2[1];
LABEL_33:
  memset(&v119, 0, sizeof(v119));
  memset(&__dst, 0, sizeof(__dst));
  if ((v12 & 0x80u) == 0)
    v27 = v12;
  else
    v27 = v11;
  if ((v12 & 0x80u) == 0)
    v28 = (char *)a2;
  else
    v28 = v10;
  v29 = &v28[v27];
  if ((uint64_t)v27 >= 9)
  {
    v30 = v27;
    v31 = v28;
    do
    {
      v32 = (char *)memchr(v31, 47, v30 - 8);
      if (!v32)
        break;
      if (*(_QWORD *)v32 == 0x73656C657269772FLL && v32[8] == 115)
        goto LABEL_48;
      v31 = v32 + 1;
      v30 = v29 - (_BYTE *)v31;
    }
    while (v29 - (_BYTE *)v31 > 8);
  }
  v32 = &v28[v27];
LABEL_48:
  if (v32 == v29)
    v34 = -1;
  else
    v34 = v32 - v28;
  v116 = 0xAAAAAAAAAAAAAAAALL;
  v117 = 0xAAAAAAAAAAAAAAAALL;
  if (v27 >= v34)
    v27 = v34;
  v115 = (void *)0xAAAAAAAAAAAAAAAALL;
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v27 >= 0x17)
  {
    v40 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v40 = v27 | 7;
    v41 = v40 + 1;
    v35 = operator new(v40 + 1);
    v116 = v27;
    v117 = v41 | 0x8000000000000000;
    v115 = v35;
  }
  else
  {
    HIBYTE(v117) = v27;
    v35 = &v115;
    if (!v27)
    {
      LOBYTE(v115) = 0;
      memset(v114, 170, sizeof(v114));
      LODWORD(v36) = *((char *)a2 + 23);
      if ((v36 & 0x80000000) == 0)
        goto LABEL_57;
      goto LABEL_66;
    }
  }
  memmove(v35, v28, v27);
  *((_BYTE *)v35 + v27) = 0;
  memset(v114, 170, sizeof(v114));
  LODWORD(v36) = *((char *)a2 + 23);
  if ((v36 & 0x80000000) == 0)
  {
LABEL_57:
    v36 = v36;
    v37 = a2;
    if (v34 <= v36)
    {
      v38 = v36 - v34;
      if (v38 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_59;
LABEL_68:
      std::string::__throw_length_error[abi:ne180100]();
    }
LABEL_168:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
LABEL_66:
  v36 = a2[1];
  if (v36 < v34)
    goto LABEL_168;
  v37 = (_QWORD *)*a2;
  v38 = v36 - v34;
  if (v36 - v34 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_68;
LABEL_59:
  if (v38 >= 0x17)
  {
    v42 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v42 = v38 | 7;
    v43 = v42 + 1;
    v39 = operator new(v42 + 1);
    v114[1] = (void *)v38;
    v114[2] = (void *)(v43 | 0x8000000000000000);
    v114[0] = v39;
    goto LABEL_72;
  }
  HIBYTE(v114[2]) = v38;
  v39 = v114;
  if (v36 != v34)
LABEL_72:
    memmove(v39, (char *)v37 + v34, v38);
  *((_BYTE *)v39 + v38) = 0;
  memset(&__p[1], 170, sizeof(std::string));
  ctu::tokenize();
  if (*((char *)a2 + 23) >= 0)
    v50 = *((unsigned __int8 *)a2 + 23);
  else
    v50 = a2[1];
  if (!v50)
  {
    _BBUFSDebugPrint("createDirectoryWithTimestamp", "Invalid directory path\n", v44, v45, v46, v47, v48, v49, v108);
    goto LABEL_147;
  }
  if ((ctu::fs::create_directory() & 1) == 0)
  {
    _BBUFSDebugPrint("createDirectoryWithTimestamp", "Failed to create the directory\n", v51, v52, v53, v54, v55, v56, v108);
    goto LABEL_140;
  }
  v57 = getpwnam("_wireless");
  if (!v57)
  {
    _BBUFSDebugPrint("getWirelessID", "failed to get uid and gid information for _wireless\n", v58, v59, v60, v61, v62, v63, v108);
    _BBUFSDebugPrint("createDirectoryWithTimestamp", "Failed to get directory ownership information for _wireless\n", v92, v93, v94, v95, v96, v97, v108);
LABEL_140:
    if (*((char *)a2 + 23) < 0)
    {
      *(_BYTE *)*a2 = 0;
      a2[1] = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *((_BYTE *)a2 + 23) = 0;
    }
    goto LABEL_147;
  }
  size = __p[1].__r_.__value_.__l.__size_;
  data = __p[1].__r_.__value_.__l.__data_;
  if (__p[1].__r_.__value_.__l.__size_ == __p[1].__r_.__value_.__r.__words[0])
    goto LABEL_148;
  v66 = 0;
  v112 = (char *)&__p[0].__r_.__value_.__l.__data_ + 1;
  pw_uid = v57->pw_uid;
  pw_gid = v57->pw_gid;
  v111 = pw_uid;
  v68 = 1;
  while (1)
  {
    v69 = &data[24 * v66];
    v70 = v69[23];
    if (v70 >= 0)
      v71 = v69[23];
    else
      v71 = *((_QWORD *)v69 + 1);
    v72 = v71 + 1;
    memset(__p, 170, 24);
    if (v71 + 1 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v72 >= 0x17)
    {
      v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v72 | 7) != 0x17)
        v74 = v72 | 7;
      v75 = v74 + 1;
      v76 = operator new(v74 + 1);
      __p[0].__r_.__value_.__l.__size_ = v71 + 1;
      __p[0].__r_.__value_.__r.__words[2] = v75 | 0x8000000000000000;
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
      *v76 = 47;
      v73 = v76 + 1;
    }
    else
    {
      __p[0].__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v71 + 1;
      v73 = v112;
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = 0x2FuLL;
      if (!v71)
        goto LABEL_96;
    }
    v77 = v70 >= 0 ? v69 : *(char **)v69;
    memmove(v73, v77, v71);
LABEL_96:
    *((_BYTE *)v73 + v71) = 0;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v78 = __p;
    else
      v78 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v79 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    else
      v79 = __p[0].__r_.__value_.__l.__size_;
    std::string::append(&v119, (const std::string::value_type *)v78, v79);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v80 = SHIBYTE(v117);
    if (v117 >= 0)
      v81 = HIBYTE(v117);
    else
      v81 = v116;
    v82 = SHIBYTE(v119.__r_.__value_.__r.__words[2]);
    if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v83 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
    else
      v83 = v119.__r_.__value_.__l.__size_;
    v84 = v83 + v81;
    memset(__p, 170, 24);
    if (v83 + v81 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v84 <= 0x16)
    {
      memset(__p, 0, 24);
      v85 = __p;
      *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v83 + v81;
      if (!v81)
        goto LABEL_117;
LABEL_113:
      if (v80 >= 0)
        v86 = &v115;
      else
        v86 = v115;
      memmove(v85, v86, v81);
      goto LABEL_117;
    }
    v90 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17)
      v90 = v84 | 7;
    v91 = v90 + 1;
    v85 = (std::string *)operator new(v90 + 1);
    __p[0].__r_.__value_.__l.__size_ = v83 + v81;
    __p[0].__r_.__value_.__r.__words[2] = v91 | 0x8000000000000000;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
    if (v81)
      goto LABEL_113;
LABEL_117:
    v87 = (char *)v85 + v81;
    if (v83)
    {
      if (v82 >= 0)
        v88 = &v119;
      else
        v88 = (std::string *)v119.__r_.__value_.__r.__words[0];
      memmove(v87, v88, v83);
    }
    v87[v83] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    __dst = __p[0];
    if (ctu::fs::is_directory())
    {
      v89 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__dst
          : (std::string *)__dst.__r_.__value_.__r.__words[0];
      if (chown((const char *)v89, v111, pw_gid))
        break;
    }
    v66 = v68;
    data = __p[1].__r_.__value_.__l.__data_;
    ++v68;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p[1].__r_.__value_.__l.__size_ - __p[1].__r_.__value_.__r.__words[0]) >> 3) <= v66)
      goto LABEL_147;
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v98 = &__dst;
  else
    LOBYTE(v98) = __dst.__r_.__value_.__s.__data_[0];
  v99 = __error();
  v109 = strerror(*v99);
  _BBUFSDebugPrint("createDirectoryWithTimestamp", "Failed changing owner of coredump directory:  %s: %s\n", v100, v101, v102, v103, v104, v105, (char)v98);
LABEL_147:
  size = __p[1].__r_.__value_.__r.__words[0];
LABEL_148:
  if (size)
  {
    v106 = __p[1].__r_.__value_.__l.__size_;
    v107 = (std::string::pointer)size;
    if (__p[1].__r_.__value_.__l.__size_ != size)
    {
      do
      {
        if (*(char *)(v106 - 1) < 0)
          operator delete(*(void **)(v106 - 24));
        v106 -= 24;
      }
      while (v106 != size);
      v107 = __p[1].__r_.__value_.__l.__data_;
    }
    __p[1].__r_.__value_.__l.__size_ = size;
    operator delete(v107);
  }
  if ((SHIBYTE(v114[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v117) & 0x80000000) == 0)
      goto LABEL_158;
LABEL_162:
    operator delete(v115);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_163;
LABEL_159:
    if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_164:
    operator delete(v119.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v114[0]);
  if (SHIBYTE(v117) < 0)
    goto LABEL_162;
LABEL_158:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_159;
LABEL_163:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_164;
}

void sub_212B219A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  std::vector<std::string>::~vector[abi:ne180100](&a19);
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a39 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a46 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a34);
  if ((a46 & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v46 + 23) & 0x80000000) == 0)
LABEL_12:
      _Unwind_Resume(a1);
LABEL_11:
    operator delete(*(void **)v46);
    _Unwind_Resume(a1);
  }
LABEL_10:
  operator delete(a41);
  if ((*(char *)(v46 + 23) & 0x80000000) == 0)
    goto LABEL_12;
  goto LABEL_11;
}

uint64_t bbufs::chownToWireless(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  passwd *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uid_t pw_uid;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;

  v8 = a2;
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
      goto LABEL_11;
    a1 = (uint64_t *)*a1;
  }
  else if (!*((_BYTE *)a1 + 23))
  {
LABEL_11:
    v9 = 1;
    if (a2 < 0)
      goto LABEL_12;
LABEL_7:
    v10 = getpwnam("_wireless");
    if (v10)
    {
      pw_uid = v10->pw_uid;
      if (fchown(v8, pw_uid, v10->pw_gid))
      {
        _BBUFSDebugPrint("chownToWireless", "Failed changing file ownership (%u, %u)\n", v18, v19, v20, v21, v22, v23, pw_uid);
        v24 = 0;
        if ((v9 & 1) != 0)
          return v24;
      }
      else
      {
        v24 = 1;
        _BBUFSDebugPrint("chownToWireless", "chown'd to _wireless(%u, %u) : ret %d \n", v18, v19, v20, v21, v22, v23, pw_uid);
        if ((v9 & 1) != 0)
          return v24;
      }
    }
    else
    {
      _BBUFSDebugPrint("getWirelessID", "failed to get uid and gid information for _wireless\n", v11, v12, v13, v14, v15, v16, v26);
      v24 = 0;
      if ((v9 & 1) != 0)
        return v24;
    }
    close(v8);
    return v24;
  }
  v8 = open((const char *)a1, 1, 420);
  v9 = 0;
  if ((v8 & 0x80000000) == 0)
    goto LABEL_7;
LABEL_12:
  _BBUFSDebugPrint("chownToWireless", "Failed to open file to chown\n", a3, a4, a5, a6, a7, a8, v26);
  return 0;
}

char *bbufs::copyFSPath(bbufs *this)
{
  BBUPartitionManager *v1;
  BBUPartitionManager *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  std::string __s1;

  pthread_mutex_lock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  v1 = (BBUPartitionManager *)off_253D31E68;
  if (!off_253D31E68)
  {
    v2 = (BBUPartitionManager *)operator new(0x18uLL);
    BBUPartitionManager::BBUPartitionManager(v2);
    v3 = operator new(0x20uLL);
    *v3 = &unk_24CE85728;
    v3[1] = 0;
    v3[2] = 0;
    v3[3] = v2;
    v4 = (std::__shared_weak_count *)off_253D31E70;
    off_253D31E68 = v2;
    off_253D31E70 = v3;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v1 = (BBUPartitionManager *)off_253D31E68;
  }
  v7 = (std::__shared_weak_count *)off_253D31E70;
  if (off_253D31E70)
  {
    v8 = (unint64_t *)((char *)off_253D31E70 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  BBUPartitionManager::getBBUFSPath(v1, &__s1);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = (void *)__s1.__r_.__value_.__r.__words[0];
    v10 = strdup(__s1.__r_.__value_.__l.__data_);
    operator delete(v12);
    if (!v7)
      return v10;
  }
  else
  {
    v10 = strdup((const char *)&__s1);
    if (!v7)
      return v10;
  }
  v13 = (unint64_t *)&v7->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
    return v10;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v10;
}

void sub_212B21D94(_Unwind_Exception *a1)
{
  char **v1;

  std::__tree<std::__value_type<__CFString const*,std::string>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,std::string>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,std::string>>>::destroy((uint64_t)v1, v1[1]);
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_212B21DD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<boost::msm::back::state_machine<BBUpdaterControllerFSM::ControllerFSM_TOP,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t bbufs::backupFile(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v24;
  std::string v25;
  std::string v26;
  std::string v27;

  memset(&v27, 170, sizeof(v27));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v27 = *(std::string *)a1;
  ctu::path_join_impl();
  if (!ctu::fs::file_exists())
  {
    v8 = &v27;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      LOBYTE(v8) = v27.__r_.__value_.__s.__data_[0];
    _BBUFSDebugPrint("backupFile", "Nothing to backup: file (%s) does not exist\n", v2, v3, v4, v5, v6, v7, (char)v8);
    goto LABEL_20;
  }
  memset(&v26, 170, sizeof(v26));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v26 = *(std::string *)a1;
  ctu::path_join_impl();
  memset(&v25, 170, sizeof(v25));
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v25, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  else
    v25 = v26;
  ctu::path_join_impl();
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v27;
  else
    LOBYTE(v15) = v27.__r_.__value_.__s.__data_[0];
  _BBUFSDebugPrint("backupFile", "Backing-up file from (%s) to (%s)\n", v9, v10, v11, v12, v13, v14, (char)v15);
  if ((ctu::fs::rename() & 1) == 0)
  {
    v24 = &v27;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      LOBYTE(v24) = v27.__r_.__value_.__s.__data_[0];
    _BBUFSDebugPrint("backupFile", "Failed to backup file from (%s) to (%s)\n", v16, v17, v18, v19, v20, v21, (char)v24);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v25.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_26:
        v22 = 0;
        if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return v22;
        goto LABEL_33;
      }
    }
    else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_26;
    }
    operator delete(v26.__r_.__value_.__l.__data_);
    v22 = 0;
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v22;
    goto LABEL_33;
  }
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_20;
LABEL_29:
    operator delete(v26.__r_.__value_.__l.__data_);
    v22 = 1;
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v22;
    goto LABEL_33;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_29;
LABEL_20:
  v22 = 1;
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v22;
LABEL_33:
  operator delete(v27.__r_.__value_.__l.__data_);
  return v22;
}

void sub_212B220C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v23 - 41) & 0x80000000) == 0)
LABEL_4:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v23 - 41) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*(void **)(v23 - 64));
  goto LABEL_4;
}

uint64_t bbufs::createBackupDir(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  std::string v25;

  memset(&v25, 170, sizeof(v25));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v25 = *(std::string *)a1;
  ctu::path_join_impl();
  v7 = ctu::fs::file_exists();
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v25;
  else
    LOBYTE(v8) = v25.__r_.__value_.__s.__data_[0];
  if (v7)
  {
    if ((ctu::fs::is_directory() & 1) == 0)
    {
      v15 = &v25;
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        LOBYTE(v15) = v25.__r_.__value_.__s.__data_[0];
      _BBUFSDebugPrint("createBackupDir", "Backup directory path (%s) exists but is not a directory\n", v9, v10, v11, v12, v13, v14, (char)v15);
LABEL_16:
      v22 = 0;
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v22;
LABEL_14:
      operator delete(v25.__r_.__value_.__l.__data_);
      return v22;
    }
  }
  else
  {
    _BBUFSDebugPrint("createBackupDir", "Backup directory (%s) does not exist, creating it\n", v1, v2, v3, v4, v5, v6, (char)v8);
    if ((ctu::fs::create_directory() & 1) == 0)
    {
      _BBUFSDebugPrint("createBackupDir", "Failed to create backup directory\n", v16, v17, v18, v19, v20, v21, v24);
      goto LABEL_16;
    }
  }
  v22 = 1;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_14;
  return v22;
}

void sub_212B222C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t bbufs::createFile(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  passwd *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  std::string *v39;
  char v41;
  char v42;
  std::string v43;

  memset(&v43, 170, sizeof(v43));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v43 = *(std::string *)a1;
  ctu::path_join_impl();
  v7 = ctu::fs::open_file();
  if ((v7 & 0x80000000) != 0)
  {
    v23 = &v43;
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      LOBYTE(v23) = v43.__r_.__value_.__s.__data_[0];
    _BBUFSDebugPrint("createFile", "Failed to open/create file (%s)\n", v1, v2, v3, v4, v5, v6, (char)v23);
    v24 = 0;
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v24;
    goto LABEL_24;
  }
  v8 = getpwnam("_wireless");
  if (!v8)
  {
    _BBUFSDebugPrint("getWirelessID", "failed to get uid and gid information for _wireless\n", v9, v10, v11, v12, v13, v14, v41);
    _BBUFSDebugPrint("createFile", "Failed to get uid gid information for _wireless\n", v25, v26, v27, v28, v29, v30, v42);
LABEL_16:
    v31 = 0;
    goto LABEL_18;
  }
  if (fchown(v7, v8->pw_uid, v8->pw_gid))
  {
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v43;
    else
      LOBYTE(v15) = v43.__r_.__value_.__s.__data_[0];
    v16 = __error();
    strerror(*v16);
    _BBUFSDebugPrint("createFile", "Failed to change file (%s) owner: %s\n", v17, v18, v19, v20, v21, v22, (char)v15);
    goto LABEL_16;
  }
  v31 = 1;
LABEL_18:
  v38 = ctu::fs::close_file((ctu::fs *)v7);
  if ((v38 & 1) == 0)
  {
    v39 = &v43;
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      LOBYTE(v39) = v43.__r_.__value_.__s.__data_[0];
    _BBUFSDebugPrint("createFile", "Failed to close file (%s)\n", v32, v33, v34, v35, v36, v37, (char)v39);
  }
  v24 = v31 & v38;
  if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v24;
LABEL_24:
  operator delete(v43.__r_.__value_.__l.__data_);
  return v24;
}

void sub_212B224C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t bbufs::restoreBackupFile(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  std::string *v10;
  uint64_t v11;
  std::string v13;
  std::string v14;
  std::string v15;

  memset(&v15, 170, sizeof(v15));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v15 = *(std::string *)a1;
  ctu::path_join_impl();
  memset(&v14, 170, sizeof(v14));
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v14, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    v14 = v15;
  ctu::path_join_impl();
  if (!ctu::fs::file_exists())
    goto LABEL_19;
  memset(&v13, 170, sizeof(v13));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v13 = *(std::string *)a1;
  ctu::path_join_impl();
  v2 = ctu::fs::rename();
  v9 = v2;
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v14;
  else
    LOBYTE(v10) = v14.__r_.__value_.__s.__data_[0];
  if ((v2 & 1) != 0)
    _BBUFSDebugPrint("restoreBackupFile", "Restored backup file from (%s) to (%s)\n", v3, v4, v5, v6, v7, v8, (char)v10);
  else
    _BBUFSDebugPrint("restoreBackupFile", "Failed to restore backup file (%s)\n", v3, v4, v5, v6, v7, v8, (char)v10);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if ((v9 & 1) == 0)
      goto LABEL_23;
LABEL_19:
    v11 = 1;
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_20;
LABEL_24:
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v11;
    goto LABEL_25;
  }
  if ((v9 & 1) != 0)
    goto LABEL_19;
LABEL_23:
  v11 = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_24;
LABEL_20:
  if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v11;
LABEL_25:
  operator delete(v15.__r_.__value_.__l.__data_);
  return v11;
}

void sub_212B2272C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v23 - 41) & 0x80000000) == 0)
LABEL_4:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v23 - 41) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*(void **)(v23 - 64));
  goto LABEL_4;
}

uint64_t bbufs::clearBackupFile(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v16;
  std::string v17;
  std::string v18;

  memset(&v18, 170, sizeof(v18));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v18 = *(std::string *)a1;
  ctu::path_join_impl();
  memset(&v17, 170, sizeof(v17));
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v17, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  else
    v17 = v18;
  ctu::path_join_impl();
  if (!ctu::fs::file_exists()
    || ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (v7 = &v17)
      : (std::string *)(LOBYTE(v7) = v17.__r_.__value_.__s.__data_[0]),
        _BBUFSDebugPrint("clearBackupFile", "Deleting backup file (%s)\n", v1, v2, v3, v4, v5, v6, (char)v7),
        (ctu::fs::remove_file() & 1) != 0))
  {
    v14 = 1;
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_13;
LABEL_18:
    operator delete(v17.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v14;
    goto LABEL_19;
  }
  v16 = &v17;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    LOBYTE(v16) = v17.__r_.__value_.__s.__data_[0];
  _BBUFSDebugPrint("clearBackupFile", "Failed to delete file backup (%s)\n", v8, v9, v10, v11, v12, v13, (char)v16);
  v14 = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
LABEL_13:
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v14;
LABEL_19:
  operator delete(v18.__r_.__value_.__l.__data_);
  return v14;
}

void sub_212B22954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init_23()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<BBUPartitionManager>::~PthreadMutexGuardPolicy, &ctu::Singleton<BBUPartitionManager,BBUPartitionManager,ctu::PthreadMutexGuardPolicy<BBUPartitionManager>>::sInstance, &dword_212A4D000);
  }
  return result;
}

void BBUStringToArgv(void **a1, _QWORD *a2)
{
  int v2;
  size_t v3;
  unint64_t v4;
  _BYTE *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  unsigned int v14;
  int v15;
  char **v16;
  _BYTE *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unsigned int v41;
  int v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  _QWORD *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _OWORD *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  _BYTE v71[24];

  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = (size_t)a1[1];
  v4 = v3 + 4;
  memset(v71, 170, sizeof(v71));
  if (v3 + 4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 >= 0x17)
  {
    v46 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v46 = v4 | 7;
    v47 = v46 + 1;
    v48 = operator new(v46 + 1);
    *(_QWORD *)&v71[8] = v3 + 4;
    *(_QWORD *)&v71[16] = v47 | 0x8000000000000000;
    *(_QWORD *)v71 = v48;
    *v48 = 544235879;
    v7 = v48 + 1;
  }
  else
  {
    *(_QWORD *)&v71[16] = 0;
    v71[23] = v3 + 4;
    v7 = &v71[4];
    *(_OWORD *)v71 = 0x20706167uLL;
    if (!v3)
    {
      v71[4] = 0;
      if ((v2 & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_66;
    }
  }
  if (v2 >= 0)
    v49 = (char *)a1;
  else
    v49 = (char *)*a1;
  memmove(v7, v49, v3);
  v7[v3] = 0;
  if (v2 < 0)
LABEL_66:
    operator delete(*a1);
LABEL_8:
  *(_OWORD *)a1 = *(_OWORD *)v71;
  v8 = *(_QWORD *)&v71[16];
  a1[2] = *(void **)&v71[16];
  v9 = (char *)HIBYTE(v8);
  if ((char)v9 >= 0)
    v10 = v9;
  else
    v10 = (char *)a1[1];
  if (v10)
  {
    v11 = 0;
    v12 = MEMORY[0x24BDAC740];
    v69 = a2;
    do
    {
      while (1)
      {
        v13 = *((char *)a1 + 23) >= 0 ? (char **)a1 : (char **)*a1;
        v14 = *((char *)v13 + v11);
        v15 = (v14 & 0x80000000) != 0 ? __maskrune(v14, 0x4000uLL) : *(_DWORD *)(v12 + 4 * v14 + 60) & 0x4000;
        v16 = *((char *)a1 + 23) >= 0 ? (char **)a1 : (char **)*a1;
        v17 = (char *)v16 + v11;
        if (v11 >= (unint64_t)v10 || !v15)
          break;
        *v17 = 0;
        ++v11;
      }
      v19 = (char *)a2[1];
      v18 = a2[2];
      if ((unint64_t)v19 < v18)
      {
        *(_QWORD *)v19 = v17;
        v20 = (uint64_t)(v19 + 8);
        goto LABEL_43;
      }
      v21 = (char *)*a2;
      v22 = (uint64_t)&v19[-*a2];
      v23 = v22 >> 3;
      v24 = (v22 >> 3) + 1;
      if (v24 >> 61)
        goto LABEL_88;
      v25 = v18 - (_QWORD)v21;
      if (v25 >> 2 > v24)
        v24 = v25 >> 2;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      v70 = v24;
      if (v24)
      {
        if (v24 >> 61)
          goto LABEL_89;
        v26 = operator new(8 * v24);
        v27 = &v26[8 * v23];
        *v27 = v17;
        v20 = (uint64_t)(v27 + 1);
        v28 = (char *)(v19 - v21);
        if (v19 == v21)
        {
LABEL_55:
          a2 = v69;
          *v69 = v27;
          v69[1] = v20;
          v69[2] = &v26[8 * v70];
          if (v19)
            goto LABEL_42;
          goto LABEL_43;
        }
      }
      else
      {
        v26 = 0;
        v27 = (_QWORD *)(8 * v23);
        *(_QWORD *)(8 * v23) = v17;
        v20 = 8 * v23 + 8;
        v28 = (char *)(v19 - v21);
        if (v19 == v21)
          goto LABEL_55;
      }
      v29 = (unint64_t)(v28 - 8);
      if (v29 < 0x58)
        goto LABEL_93;
      if ((unint64_t)(v19 - v26 - v22) < 0x20)
        goto LABEL_93;
      v30 = (v29 >> 3) + 1;
      v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      v32 = &v19[-v31];
      v27 = (_QWORD *)((char *)v27 - v31);
      v33 = &v26[8 * v23 - 16];
      v34 = v19 - 16;
      v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v36 = *(_OWORD *)v34;
        *(v33 - 1) = *((_OWORD *)v34 - 1);
        *v33 = v36;
        v33 -= 2;
        v34 -= 32;
        v35 -= 4;
      }
      while (v35);
      v19 = v32;
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_93:
        do
        {
          v37 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *--v27 = v37;
        }
        while (v19 != v21);
      }
      a2 = v69;
      v19 = (char *)*v69;
      *v69 = v27;
      v69[1] = v20;
      v69[2] = &v26[8 * v70];
      if (v19)
LABEL_42:
        operator delete(v19);
LABEL_43:
      a2[1] = v20;
      v38 = v11 + 1;
      do
      {
        v39 = v38;
        if (*((char *)a1 + 23) >= 0)
          v40 = (char *)a1;
        else
          v40 = (char *)*a1;
        v41 = v40[v39];
        if ((v41 & 0x80000000) != 0)
        {
          v42 = __maskrune(v41, 0x4000uLL);
          v38 = v39 + 1;
          if (v39 >= (unint64_t)v10)
            break;
        }
        else
        {
          v42 = *(_DWORD *)(v12 + 4 * v41 + 60) & 0x4000;
          v38 = v39 + 1;
          if (v39 >= (unint64_t)v10)
            break;
        }
      }
      while (!v42);
      v11 = v38 - 1;
    }
    while (v39 < (unint64_t)v10);
  }
  v44 = (char *)a2[1];
  v43 = a2[2];
  if ((unint64_t)v44 < v43)
  {
    *(_QWORD *)v44 = 0;
    v45 = (uint64_t)(v44 + 8);
    goto LABEL_87;
  }
  v50 = (char *)*a2;
  v51 = (uint64_t)&v44[-*a2];
  v52 = v51 >> 3;
  v53 = (v51 >> 3) + 1;
  if (v53 >> 61)
LABEL_88:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v54 = v43 - (_QWORD)v50;
  if (v54 >> 2 > v53)
    v53 = v54 >> 2;
  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
    v55 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v55 = v53;
  if (v55)
  {
    if (v55 >> 61)
LABEL_89:
      std::__throw_bad_array_new_length[abi:ne180100]();
    v56 = operator new(8 * v55);
    v57 = &v56[8 * v52];
    v58 = &v56[8 * v55];
    *v57 = 0;
    v45 = (uint64_t)(v57 + 1);
    v59 = (char *)(v44 - v50);
    if (v44 == v50)
      goto LABEL_85;
    goto LABEL_78;
  }
  v56 = 0;
  v57 = (_QWORD *)(8 * v52);
  v58 = 0;
  *(_QWORD *)(8 * v52) = 0;
  v45 = 8 * v52 + 8;
  v59 = (char *)(v44 - v50);
  if (v44 != v50)
  {
LABEL_78:
    v60 = (unint64_t)(v59 - 8);
    if (v60 < 0x58)
      goto LABEL_94;
    if ((unint64_t)(v44 - v56 - v51) < 0x20)
      goto LABEL_94;
    v61 = (v60 >> 3) + 1;
    v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
    v63 = &v44[-v62];
    v57 = (_QWORD *)((char *)v57 - v62);
    v64 = &v56[8 * v52 - 16];
    v65 = v44 - 16;
    v66 = v61 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *(_OWORD *)v65;
      *(v64 - 1) = *((_OWORD *)v65 - 1);
      *v64 = v67;
      v64 -= 2;
      v65 -= 32;
      v66 -= 4;
    }
    while (v66);
    v44 = v63;
    if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_94:
      do
      {
        v68 = *((_QWORD *)v44 - 1);
        v44 -= 8;
        *--v57 = v68;
      }
      while (v44 != v50);
    }
    v44 = (char *)*a2;
  }
LABEL_85:
  *a2 = v57;
  a2[1] = v45;
  a2[2] = v58;
  if (v44)
    operator delete(v44);
LABEL_87:
  a2[1] = v45;
}

void ParseUpdaterDebugArgs(const __CFDictionary *a1, UpdaterDebugArgs *a2)
{
  const __CFDictionary *v3;
  CFTypeID v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  const char **v10;
  char **v11;
  int v12;
  const char *v13;
  size_t v14;
  std::string::size_type v15;
  void *p_str;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string __str;
  void *__dst[3];
  void *value;
  char *const *__b[130];

  __b[128] = *(char *const **)MEMORY[0x24BDAC8D0];
  if (!a1)
    return;
  v3 = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Options"));
  if (!v3)
    return;
  value = 0;
  if (!CFDictionaryGetValueIfPresent(v3, CFSTR("DebugArgs"), (const void **)&value))
    return;
  v4 = CFGetTypeID(value);
  if (v4 != CFStringGetTypeID())
    return;
  memset(__dst, 170, sizeof(__dst));
  memset(__b, 170, 0x400uLL);
  CFStringGetCString((CFStringRef)value, (char *)__b, 1024, 0x8000100u);
  v5 = strlen((const char *)__b);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    __dst[2] = (void *)(v9 | 0x8000000000000000);
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(__dst[2]) = v5;
    v7 = __dst;
    if (!v5)
      goto LABEL_13;
  }
  memcpy(v7, __b, (size_t)v6);
LABEL_13:
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    if (!HIBYTE(__dst[2]))
      return;
    goto LABEL_17;
  }
  if (__dst[1])
  {
LABEL_17:
    memset(__b, 0, 24);
    BBUStringToArgv(__dst, __b);
    *MEMORY[0x24BDAF278] = 1;
    *MEMORY[0x24BDAF288] = 1;
    v10 = (const char **)MEMORY[0x24BDAF270];
    while (1)
    {
      v11 = (char **)__b[0];
      v12 = getopt_long(((unint64_t)((char *)__b[1] - (char *)__b[0]) >> 3) - 1, __b[0], "fl:tnp:ius", (const option *)&ParseUpdaterDebugArgs(__CFDictionary const*,UpdaterDebugArgs &)::long_options, 0);
      switch(v12)
      {
        case 'f':
          *((_BYTE *)a2 + 8) = 1;
          continue;
        case 'g':
        case 'h':
        case 'j':
        case 'k':
        case 'm':
        case 'o':
        case 'q':
        case 'r':
          continue;
        case 'i':
          goto LABEL_18;
        case 'l':
          *((_DWORD *)a2 + 1) = atoi(*v10);
          continue;
        case 'n':
          *((_BYTE *)a2 + 9) = 1;
          continue;
        case 'p':
          v13 = *v10;
          v14 = strlen(*v10);
          if (v14 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v15 = v14;
          if (v14 >= 0x17)
          {
            v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17)
              v17 = v14 | 7;
            v18 = v17 + 1;
            p_str = operator new(v17 + 1);
            __str.__r_.__value_.__l.__size_ = v15;
            __str.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
LABEL_35:
            memmove(p_str, v13, v15);
            goto LABEL_36;
          }
          *((_BYTE *)&__str.__r_.__value_.__s + 23) = v14;
          p_str = &__str;
          if (v14)
            goto LABEL_35;
LABEL_36:
          *((_BYTE *)p_str + v15) = 0;
          v19 = std::stol(&__str, 0, 10);
          v20 = v19;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__str.__r_.__value_.__l.__data_);
            if (v20 < 0)
              goto LABEL_18;
LABEL_40:
            *((_QWORD *)a2 + 2) = v20;
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_18;
          }
          if ((v19 & 0x8000000000000000) == 0)
            goto LABEL_40;
LABEL_18:
          *((_BYTE *)a2 + 32) = 1;
          break;
        case 's':
          *((_BYTE *)a2 + 34) = 1;
          continue;
        case 't':
          *(_BYTE *)a2 = 1;
          continue;
        case 'u':
          *((_BYTE *)a2 + 33) = 1;
          continue;
        default:
          if (v12 != -1)
            continue;
          if (v11)
            operator delete(v11);
          if (SHIBYTE(__dst[2]) < 0)
            goto LABEL_45;
          return;
      }
    }
  }
LABEL_45:
  operator delete(__dst[0]);
}

void sub_212B23200()
{
  JUMPOUT(0x212B23214);
}

uint64_t UpdaterDebugArgs::print(UpdaterDebugArgs *this)
{
  ACFULogging *v1;

  ACFULogging::getLogInstance(this);
  v1 = (ACFULogging *)ACFULogging::handleMessage();
  ACFULogging::getLogInstance(v1);
  return ACFULogging::handleMessage();
}

DIR *BBUpdaterCommon::BBUReadDirectory(const char *a1, uint64_t *a2)
{
  DIR *result;
  DIR *v4;
  dirent *v5;
  dirent *v6;
  size_t d_namlen;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  std::string *v11;
  int v12;
  uint64_t v13;
  _BYTE __dst[24];

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  result = opendir(a1);
  if (result)
  {
    v4 = result;
    v5 = readdir(result);
    if (v5)
    {
      v6 = v5;
      do
      {
        memset(__dst, 170, sizeof(__dst));
        d_namlen = v6->d_namlen;
        if (d_namlen >= 0x17)
        {
          if ((d_namlen | 7) == 0x17)
            v9 = ((unsigned __int16)d_namlen & 0xFFF8) + 8;
          else
            v9 = d_namlen | 7;
          v8 = operator new(v9 + 1);
          *(_QWORD *)&__dst[8] = d_namlen;
          *(_QWORD *)&__dst[16] = v9 - 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)__dst = v8;
        }
        else
        {
          __dst[23] = v6->d_namlen;
          v8 = __dst;
          if (!(_DWORD)d_namlen)
            goto LABEL_15;
        }
        memmove(v8, v6->d_name, d_namlen);
LABEL_15:
        v8[d_namlen] = 0;
        v10 = operator new(0x28uLL);
        v11 = (std::string *)(v10 + 2);
        *v10 = 0;
        v10[1] = 0;
        v12 = __dst[23];
        if ((__dst[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
        }
        else
        {
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)__dst;
          v10[4] = *(_QWORD *)&__dst[16];
        }
        v13 = *a2;
        *v10 = *a2;
        v10[1] = a2;
        *(_QWORD *)(v13 + 8) = v10;
        *a2 = (uint64_t)v10;
        ++a2[2];
        if (v12 < 0)
          operator delete(*(void **)__dst);
        v6 = readdir(v4);
      }
      while (v6);
    }
    return (DIR *)closedir(v4);
  }
  return result;
}

void sub_212B234B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  operator delete(v15);
  operator delete(v16);
  _Unwind_Resume(a1);
}

BOOL BBUpdaterCommon::inRestoreOS(BBUpdaterCommon *this)
{
  if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS != -1)
  {
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
      return (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS) != 0;
LABEL_5:
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
    return (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS) != 0;
  }
  if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS != -1)
    goto LABEL_5;
  return (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS) != 0;
}

void ___ZN15BBUpdaterCommon11inRestoreOSEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v8)(const __CFString *, _QWORD);
  const __CFBoolean *v9;
  const __CFBoolean *v10;
  CFTypeID v11;
  uint64_t *v12;

  if (BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken == -1)
  {
    v8 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
    {
LABEL_9:
      v10 = 0;
      v12 = &qword_253D37000;
      goto LABEL_11;
    }
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken, &__block_literal_global_4);
    v8 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
      goto LABEL_9;
  }
  v9 = (const __CFBoolean *)v8(CFSTR("RestoreOSBuild"), 0);
  if (!v9)
    goto LABEL_9;
  v10 = v9;
  v11 = CFGetTypeID(v9);
  if (v11 == CFBooleanGetTypeID())
  {
    v12 = &qword_253D37000;
    if (ctu::SharedRef<__CFBoolean const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFBoolean const>::get)
      BBUpdaterCommon::inRestoreOS(void)::restoreOS = CFBooleanGetValue(v10) != 0;
  }
  else
  {
    CFRelease(v10);
    v10 = 0;
    v12 = &qword_253D37000;
  }
LABEL_11:
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0)
      goto LABEL_15;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0)
      goto LABEL_15;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(25, 0, "BBUCommon", (const char *)&str_8_8, "inRestoreOS: %d\n", a6, a7, a8, *((_BYTE *)v12 + 4056));
LABEL_15:
  if (v10)
    CFRelease(v10);
}

void sub_212B23740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFBoolean const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN15BBUpdaterCommon11inRestoreOSEv_block_invoke_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  BBUpdaterCommon::inRestoreOS(void)::recoveryOS = os_variant_is_recovery();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0)
      return;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0)
      return;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(25, 0, "BBUCommon", (const char *)&str_8_8, "InRecoveryOS: %d\n", v0, v1, v2, BBUpdaterCommon::inRestoreOS(void)::recoveryOS);
}

void ___ZN15BBUpdaterCommon7getECIDEv_block_invoke()
{
  uint64_t (*v0)(const __CFString *, _QWORD);
  const void *v1;
  const void *v2;
  CFTypeID v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken == -1)
  {
    v0 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
    {
LABEL_9:
      v2 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken, &__block_literal_global_4);
    v0 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
      goto LABEL_9;
  }
  v1 = (const void *)v0(CFSTR("UniqueChipID"), 0);
  if (!v1)
    goto LABEL_9;
  v2 = v1;
  v3 = CFGetTypeID(v1);
  if (v3 != CFNumberGetTypeID())
  {
    CFRelease(v2);
    v2 = 0;
    goto LABEL_14;
  }
  if (ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get)
  {
    CFNumberGetValue((CFNumberRef)v2, kCFNumberSInt64Type, &BBUpdaterCommon::getECID(void)::ecid);
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0)
        goto LABEL_14;
    }
    if ((gBBULogVerbosity & 0x80000000) == 0)
      _BBULog(25, 0, "BBUCommon", (const char *)&str_8_8, "ECID: 0x%llx\n", v4, v5, v6, BBUpdaterCommon::getECID(void)::ecid);
  }
LABEL_14:
  if (v2)
    CFRelease(v2);
}

void sub_212B239A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN15BBUpdaterCommon14getEUICCChipIDEv_block_invoke()
{
  uint64_t (*v0)(const __CFString *, _QWORD);
  const __CFNumber *v1;
  const __CFNumber *v2;
  CFTypeID v3;

  if (BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken == -1)
  {
    v0 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
    {
LABEL_9:
      v2 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::onceToken, &__block_literal_global_4);
    v0 = (uint64_t (*)(const __CFString *, _QWORD))BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer;
    if (!BBUpdaterCommon::BBUMGCopyAnswer(__CFString const*)::sCopyAnswer)
      goto LABEL_9;
  }
  v1 = (const __CFNumber *)v0(CFSTR("EUICCChipID"), 0);
  if (!v1)
    goto LABEL_9;
  v2 = v1;
  v3 = CFGetTypeID(v1);
  if (v3 == CFNumberGetTypeID())
  {
    if (ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get)
      CFNumberGetValue(v2, kCFNumberSInt64Type, &BBUpdaterCommon::getEUICCChipID(void)::euiccChipID);
  }
  else
  {
    CFRelease(v2);
    v2 = 0;
  }
LABEL_11:
  if (v2)
    CFRelease(v2);
}

void sub_212B23AC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

ctu::cf *BBUpdaterCommon::BBUReadNVRAM@<X0>(const void *a1@<X1>, ctu::cf **a2@<X8>)
{
  unsigned __int8 v4;
  ctu::cf **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **p_p;
  ctu::cf *result;
  void *__p;
  char v12;

  {
    BBUpdaterCommon::BBUReadNVRAM(void)::nvramInfo = 0;
    __cxa_atexit((void (*)(void *))ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef, &BBUpdaterCommon::BBUReadNVRAM(void)::nvramInfo, &dword_212A4D000);
  }
  if (BBUpdaterCommon::BBUReadNVRAM(void)::onceToken == -1)
  {
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_4;
LABEL_15:
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v5 = (ctu::cf **)&unk_254B60000;
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0)
      goto LABEL_11;
    goto LABEL_5;
  }
  dispatch_once(&BBUpdaterCommon::BBUReadNVRAM(void)::onceToken, &__block_literal_global_24);
  if (gBBULogMaskGet(void)::once != -1)
    goto LABEL_15;
LABEL_4:
  v5 = (ctu::cf **)&unk_254B60000;
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0)
    goto LABEL_11;
LABEL_5:
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    ctu::cf::show(v5[193], a1);
    if (v12 >= 0)
      p_p = &__p;
    else
      LOBYTE(p_p) = (_BYTE)__p;
    _BBULog(25, 0, "BBUCommon", (const char *)&str_8_8, "NVRAM: %s\n", v6, v7, v8, (char)p_p);
    if (v12 < 0)
      operator delete(__p);
  }
LABEL_11:
  result = v5[193];
  *a2 = result;
  if (result)
    return (ctu::cf *)CFRetain(result);
  return result;
}

void sub_212B23C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN15BBUpdaterCommon12BBUReadNVRAMEv_block_invoke()
{
  kern_return_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  io_registry_entry_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  io_object_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  kern_return_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  CFMutableDictionaryRef properties;
  const void **v25;
  mach_port_t mainPort;

  mainPort = -1431655766;
  v0 = IOMasterPort(*MEMORY[0x24BDAD2F0], &mainPort);
  if (v0)
  {
    v4 = v0;
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "BBUCommon", (const char *)&str_8_8, "Condition <<%s>> failed %s %s/%d\n", v1, v2, v3, (char)"KERN_SUCCESS == kr");
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0)
        return;
      goto LABEL_6;
    }
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) != 0)
    {
LABEL_6:
      if (gBBULogVerbosity < 0)
        return;
      v8 = "Could not get master port %d\n";
      v23 = v4;
      goto LABEL_8;
    }
    return;
  }
  v9 = IORegistryEntryFromPath(mainPort, "IODeviceTree:/options");
  if (v9)
  {
    v13 = v9;
    properties = 0;
    v25 = (const void **)&BBUpdaterCommon::BBUReadNVRAM(void)::nvramInfo;
    v17 = IORegistryEntryCreateCFProperties(v9, &properties, (CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
    v18 = *v25;
    if (properties)
    {
      *v25 = properties;
      if (v18)
        goto LABEL_21;
    }
    else
    {
      *v25 = 0;
      if (v18)
LABEL_21:
        CFRelease(v18);
    }
    if (!v17)
    {
      if (BBUpdaterCommon::BBUReadNVRAM(void)::nvramInfo
         ? ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get
         : 0)
      {
        goto LABEL_33;
      }
    }
    if (gBBULogMaskGet(void)::once != -1)
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    _BBULog(25, 0xFFFFFFFFLL, "BBUCommon", (const char *)&str_8_8, "Condition <<%s>> failed %s %s/%d\n", v14, v15, v16, (char)"KERN_SUCCESS == kr && nvramInfo");
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) != 0)
        goto LABEL_27;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) != 0)
      {
LABEL_27:
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(25, 0, "BBUCommon", (const char *)&str_8_8, "Could not load NVRAM? %d\n", v19, v20, v21, v17);
      }
    }
LABEL_33:
    IOObjectRelease(v13);
    return;
  }
  if (gBBULogMaskGet(void)::once != -1)
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
  _BBULog(25, 0xFFFFFFFFLL, "BBUCommon", (const char *)&str_8_8, "Condition <<%s>> failed %s %s/%d\n", v10, v11, v12, (char)"nvramRef");
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0)
      return;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0)
      return;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    v8 = "Could not find NVRAM via IOKit\n";
LABEL_8:
    _BBULog(25, 0, "BBUCommon", (const char *)&str_8_8, v8, v5, v6, v7, v23);
  }
}

void sub_212B23FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  ctu::cf::detail::TakeOwnershipProxy<__CFDictionary>::~TakeOwnershipProxy((const void **)va);
  _Unwind_Resume(a1);
}

BOOL BBUpdaterCommon::isNVRAMKeyPresent(BBUpdaterCommon *this, const __CFString *a2)
{
  const void *v3;
  CFDictionaryRef v4;
  uint64_t (*v5)(uint64_t);
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **p_p;
  void *__p;
  char v13;
  CFDictionaryRef theDict;

  theDict = (CFDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  BBUpdaterCommon::BBUReadNVRAM(a2, &theDict);
  v4 = theDict;
  v5 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  if (!theDict)
    v5 = 0;
  if (v5)
  {
    v6 = CFDictionaryContainsKey(theDict, this) != 0;
    if (gBBULogMaskGet(void)::once == -1)
      goto LABEL_5;
LABEL_16:
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0)
      goto LABEL_12;
    goto LABEL_6;
  }
  v6 = 0;
  if (gBBULogMaskGet(void)::once != -1)
    goto LABEL_16;
LABEL_5:
  if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 3) & 2) == 0)
    goto LABEL_12;
LABEL_6:
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    ctu::cf::show(this, v3);
    if (v13 >= 0)
      p_p = &__p;
    else
      LOBYTE(p_p) = (_BYTE)__p;
    _BBULog(25, 0, "BBUCommon", (const char *)&str_8_8, "NVRAM '%s' exists? %s\n", v7, v8, v9, (char)p_p);
    if (v13 < 0)
      operator delete(__p);
  }
LABEL_12:
  if (v4)
    CFRelease(v4);
  return v6;
}

void sub_212B24160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a17);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a17);
  _Unwind_Resume(a1);
}

uint64_t BBUpdaterCommon::BBUCreateCFError(CFErrorRef *a1, uint64_t a2, unsigned int a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFAllocator *v11;
  __CFDictionary *Mutable;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  const void *v18;

  if (!a1)
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return 0;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
        return 0;
    }
    if (gBBULogVerbosity <= 5)
      return 0;
    goto LABEL_19;
  }
  v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 2, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
  {
    v16 = ctu::cf::convert_copy();
    if ((v16 & 1) != 0)
    {
      v17 = (const void *)*MEMORY[0x24BDBD378];
      if (*MEMORY[0x24BDBD378])
        CFRetain(v17);
      if (v17)
        CFRelease(v17);
      if (a4)
      {
        v18 = (const void *)*MEMORY[0x24BDBD3B0];
        if (*MEMORY[0x24BDBD3B0])
          CFRetain(v18);
        CFRetain(a4);
        if (v18)
          CFDictionaryAddValue(Mutable, v18, a4);
        CFRelease(a4);
        if (v18)
          CFRelease(v18);
      }
      *a1 = CFErrorCreate(v11, CFSTR("BBUpdater"), a3, Mutable);
      goto LABEL_25;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
        goto LABEL_23;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) != 0)
      {
LABEL_23:
        if (gBBULogVerbosity >= 6)
          _BBULog(1, 6, "BBUCommon", (const char *)&str_8_8, "check failed: %s, %d, assertion: %s\n", v13, v14, v15, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUCommon.cpp");
      }
    }
LABEL_25:
    CFRelease(Mutable);
    return v16;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      return 0;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 2) == 0)
      return 0;
  }
  if (gBBULogVerbosity >= 6)
LABEL_19:
    _BBULog(1, 6, "BBUCommon", (const char *)&str_8_8, "check failed: %s, %d, assertion: %s\n", a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Support/BBUCommon.cpp");
  return 0;
}

void sub_212B244E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  const void *v6;
  va_list va;
  const void *v8;
  va_list va1;
  const void *v10;
  va_list va2;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v8 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v10 = va_arg(va3, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va3);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_212B24530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  const void *v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

unint64_t BBUpdaterCommon::BBUStrError@<X0>(BBUpdaterCommon *this@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  unint64_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char __strerrbuf[16];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v2 = (int)this;
  v17 = *MEMORY[0x24BDAC8D0];
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  *(_OWORD *)__strerrbuf = 0u;
  v10 = 0u;
  if (strerror_r((int)this, __strerrbuf, 0x80uLL))
    snprintf(__strerrbuf, 0x80uLL, "unknown error %d", v2);
  result = strlen(__strerrbuf);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
      goto LABEL_11;
  }
  result = (unint64_t)memcpy(a2, __strerrbuf, v5);
LABEL_11:
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

const char *BBUpdaterCommon::redactedString(BBUpdaterCommon *this, const char *a2)
{
  if (BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS == -1)
  {
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
      goto LABEL_3;
  }
  else
  {
    dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRestoreOS, &__block_literal_global_6);
    if (BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS == -1)
      goto LABEL_3;
  }
  dispatch_once(&BBUpdaterCommon::inRestoreOS(void)::sOnceRecoveryOS, &__block_literal_global_11);
LABEL_3:
  if (BBUpdaterCommon::inRestoreOS(void)::restoreOS | BBUpdaterCommon::inRestoreOS(void)::recoveryOS)
    return (const char *)this;
  else
    return "<< SNUM >>";
}

uint64_t BBUICE16Communication::freeTransportSync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD v16[6];
  char v17;
  _QWORD block[5];

  v8 = *(_QWORD *)(a1 + 80);
  if (!v8)
    return 1;
  if (v8 == a2)
  {
    v12 = MEMORY[0x24BDAC760];
    v13 = *(NSObject **)(a1 + 72);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZN21BBUICE16Communication17freeTransportSyncEP26TelephonyUtilTransport_tag_block_invoke;
    block[3] = &__block_descriptor_tmp_11;
    block[4] = a1;
    dispatch_sync(v13, block);
    v11 = TelephonyUtilTransportFree();
    v14 = *(NSObject **)(a1 + 72);
    v16[0] = v12;
    v16[1] = 0x40000000;
    v16[2] = ___ZN21BBUICE16Communication17freeTransportSyncEP26TelephonyUtilTransport_tag_block_invoke_2;
    v16[3] = &__block_descriptor_tmp_8;
    v17 = v11;
    v16[4] = a1;
    v16[5] = a2;
    dispatch_sync(v14, v16);
    return v11;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    v11 = 0;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      return v11;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    v11 = 0;
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      return v11;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    _BBULog(2, 0, "BBUICE16Communication", "", "call with %p different from fTransportCreated(%p)\n", a6, a7, a8, a2);
    return 0;
  }
  return v11;
}

uint64_t ___ZN21BBUICE16Communication17freeTransportSyncEP26TelephonyUtilTransport_tag_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 60) = 1;
  return result;
}

void ___ZN21BBUICE16Communication17freeTransportSyncEP26TelephonyUtilTransport_tag_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v8 + 60) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    *(_QWORD *)(v8 + 80) = 0;
    return;
  }
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      return;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      return;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(2, 0, "BBUICE16Communication", "", "fail to free transport: %p\n", a6, a7, a8, *(_QWORD *)(a1 + 40));
}

uint64_t BBUICE16Communication::createTransport(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  capabilities::updater *Context;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  void *exception;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD block[8];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  _QWORD v36[5];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;

  v47 = 0;
  v48 = &v47;
  v49 = 0x2000000000;
  v50 = 3;
  v43 = 0;
  v44 = &v43;
  v45 = 0x2000000000;
  v46 = 0;
  v42 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40 = v6;
  v41 = v6;
  v38 = v6;
  v39 = v6;
  v37 = v6;
  TelephonyBasebandPCITransportInitParameters();
  if (*(_QWORD *)(a1 + 80))
  {
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
        goto LABEL_4;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
      {
LABEL_4:
        if ((gBBULogVerbosity & 0x80000000) == 0)
          _BBULog(2, 0, "BBUICE16Communication", "", "Need to free transport before creating again", v7, v8, v9, v28);
      }
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, *(_QWORD *)(a1 + 80));
    *(_QWORD *)(a1 + 80) = 0;
  }
  v10 = *(_QWORD *)(a1 + 72);
  LODWORD(v39) = v39 | 1;
  v11 = MEMORY[0x24BDAC760];
  v36[0] = MEMORY[0x24BDAC760];
  v36[1] = 0x40000000;
  v36[2] = ___ZN21BBUICE16Communication15createTransportEP26TelephonyUtilTransport_tag8BBUStagedbN16BBUCommunication17BasebandInterfaceE_block_invoke;
  v36[3] = &__block_descriptor_tmp_11_0;
  v36[4] = a2;
  *((_QWORD *)&v37 + 1) = v10;
  *(_QWORD *)&v38 = v36;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
    {
LABEL_9:
      if ((gBBULogVerbosity & 0x80000000) == 0)
        _BBULog(2, 0, "BBUICE16Communication", "", "Creating transport:%p stage:%d interface:%d %f ms\n", v7, v8, v9, a2);
    }
  }
  switch(a3)
  {
    case 1:
    case 8:
    case 16:
      v12 = 8;
      goto LABEL_15;
    case 2:
      v12 = 6;
      LODWORD(v37) = 6;
      v13 = 5000;
      goto LABEL_16;
    case 4:
      v12 = 7;
LABEL_15:
      LODWORD(v37) = v12;
      v13 = 10000;
LABEL_16:
      DWORD2(v38) = v13;
      *(_DWORD *)(a1 + 88) = v12;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          goto LABEL_20;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          goto LABEL_20;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
        _BBULog(2, 0, "BBUICE16Communication", "", "Creating with timeout set to %u ms\n", v7, v8, v9, SBYTE8(v38));
LABEL_20:
      v14 = *(NSObject **)(a1 + 64);
      block[0] = v11;
      block[1] = 1107296256;
      block[2] = ___ZN21BBUICE16Communication15createTransportEP26TelephonyUtilTransport_tag8BBUStagedbN16BBUCommunication17BasebandInterfaceE_block_invoke_2;
      block[3] = &__block_descriptor_tmp_19_0;
      block[6] = a1;
      block[7] = a2;
      v32 = v39;
      v33 = v40;
      v34 = v41;
      v35 = v42;
      v30 = v37;
      v31 = v38;
      block[4] = &v43;
      block[5] = &v47;
      dispatch_sync(v14, block);
      v18 = v48;
      if ((_DWORD)v37 != 8 || *((_DWORD *)v48 + 6))
        goto LABEL_30;
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          goto LABEL_26;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          goto LABEL_26;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
        _BBULog(2, 0, "BBUICE16Communication", "", " Initializing KTL options struct, opening ARI channel\n", v15, v16, v17, v28);
LABEL_26:
      Context = (capabilities::updater *)IceAriGetContext();
      capabilities::updater::ARICommandTimeout(Context);
      v20 = KTLInitOptions();
      v21 = v44;
      *((_BYTE *)v44 + 24) = v20;
      if (v20)
      {
        IceAriGetContext();
        LOBYTE(v20) = KTLOpenChannel();
        v21 = v44;
      }
      *((_BYTE *)v21 + 24) = v20;
      IceAriSetContextValid(1);
      v18 = v48;
      if (!*((_BYTE *)v44 + 24))
        *((_DWORD *)v48 + 6) = 11;
LABEL_30:
      v22 = *((unsigned int *)v18 + 6);
      _Block_object_dispose(&v43, 8);
      _Block_object_dispose(&v47, 8);
      return v22;
    default:
      if (gBBULogMaskGet(void)::once == -1)
      {
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          goto LABEL_43;
      }
      else
      {
        dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
        if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
          goto LABEL_43;
      }
      if ((gBBULogVerbosity & 0x80000000) == 0)
        _BBULog(2, 0, "BBUICE16Communication", "", "Unsupported stage: %d\n", v7, v8, v9, a3);
LABEL_43:
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 69, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Communication/ICE/BBUICE16Communication.cpp", 0x6Eu, (ctu::LogMessageBuffer *)"Assertion failure(false && \"Unsupported BBU stage.\")", v25, v26, v27, v28);
  }
}

void sub_212B24E0C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  __cxa_free_exception(v1);
  _Block_object_dispose((const void *)(v2 - 160), 8);
  _Block_object_dispose((const void *)(v2 - 128), 8);
  _Unwind_Resume(a1);
}

void ___ZN21BBUICE16Communication15createTransportEP26TelephonyUtilTransport_tag8BBUStagedbN16BBUCommunication17BasebandInterfaceE_block_invoke(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const void *Controller;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;

  v9 = *(_QWORD *)(a1 + 32);
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_5;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(2, 0, "BBUICE16Communication", "", "transport %p, status: %d\n", a6, a7, a8, v9);
LABEL_5:
  if (a2 != 1)
    return;
  Controller = (const void *)TelephonyBasebandCreateController();
  v14 = TelephonyBasebandResetModem();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) != 0)
    {
LABEL_8:
      if ((gBBULogVerbosity & 0x80000000) == 0)
      {
        v15 = "failure";
        if (v14)
          v15 = "success";
        _BBULog(2, 0, "BBUICE16Communication", "", "Resetting modem: %s\n", v11, v12, v13, (char)v15);
      }
    }
  }
  if (Controller)
    CFRelease(Controller);
}

void sub_212B24FFC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void ___ZN21BBUICE16Communication15createTransportEP26TelephonyUtilTransport_tag8BBUStagedbN16BBUCommunication17BasebandInterfaceE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  int v10;
  void *exception;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v2 = a1[6];
  *(_QWORD *)(v2 + 80) = a1[7];
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = TelephonyBasebandPCITransportCreate();
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_8;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
      v9 = "success";
    else
      v9 = "failure";
    _BBULog(2, 0, "BBUICE16Communication", "", " TelephonyBasebandPCITransportCreate returns: %s\n", v6, v7, v8, (char)v9);
  }
LABEL_8:
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    if (!*(_QWORD *)(v2 + 80))
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 67, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Communication/ICE/BBUICE16Communication.cpp", 0x80u, (ctu::LogMessageBuffer *)"Assertion failure(nullptr != fTransportCreated && \"Telephony util transport error.\")", v12, v13, v14, v15);
    }
    v10 = 0;
  }
  else
  {
    BBUICE16Communication::freeTransportSync(v2, a1[7], v3, v4, v5, v6, v7, v8);
    v10 = 3;
  }
  *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v10;
}

void sub_212B2517C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void IceAriSetContextValid(char a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count_vtbl *v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  pthread_mutex_lock(&ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance);
  if (!qword_253D31EB8)
  {
    v3 = (std::__shared_weak_count_vtbl *)operator new(0x28uLL);
    LOBYTE(v3->__on_zero_shared_weak) = 0;
    v2 = (std::__shared_weak_count *)operator new(0x20uLL);
    v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_24CE803E8;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = v3;
    v5 = (std::__shared_weak_count *)off_253D31EC0;
    qword_253D31EB8 = (uint64_t)v3;
    off_253D31EC0 = v2;
    if (!v5)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v3 = (std::__shared_weak_count_vtbl *)qword_253D31EB8;
  v2 = (std::__shared_weak_count *)off_253D31EC0;
  if (!off_253D31EC0)
  {
    v4 = 1;
    goto LABEL_12;
  }
LABEL_9:
  v8 = (unint64_t *)&v2->__shared_owners_;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  v4 = 0;
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance);
  LOBYTE(v3->__on_zero_shared_weak) = a1;
  if ((v4 & 1) == 0)
  {
    v10 = (unint64_t *)&v2->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_212B252C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t BBUICE16Communication::getBasebandState(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;

  v9 = *(_DWORD *)(a1 + 88) - 6;
  if (v9 > 3)
    v10 = 3;
  else
    v10 = dword_212B55B30[v9];
  *a3 = v10;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      return 0;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      return 0;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(2, 0, "BBUICE16Communication", "", "returning state: %d\n", a6, a7, a8, *a3);
  return 0;
}

uint64_t BBUICE16Communication::freeTransport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count_vtbl *v11;
  char v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int on_zero_shared_weak_low;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  uint64_t v22;
  _QWORD block[7];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;

  v25 = 0;
  v26 = &v25;
  v27 = 0x2000000000;
  v28 = 1;
  if (gBBULogMaskGet(void)::once == -1)
  {
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
    if ((*(_BYTE *)gBBULogMaskGet(void)::sBBULogMask & 4) == 0)
      goto LABEL_5;
  }
  if ((gBBULogVerbosity & 0x80000000) == 0)
    _BBULog(2, 0, "BBUICE16Communication", "", "request to free transport: %p\n", a6, a7, a8, a2);
LABEL_5:
  pthread_mutex_lock(&ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance);
  if (!qword_253D31EB8)
  {
    v11 = (std::__shared_weak_count_vtbl *)operator new(0x28uLL);
    LOBYTE(v11->__on_zero_shared_weak) = 0;
    v10 = (std::__shared_weak_count *)operator new(0x20uLL);
    v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_24CE803E8;
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v11;
    v13 = (std::__shared_weak_count *)off_253D31EC0;
    qword_253D31EB8 = (uint64_t)v11;
    off_253D31EC0 = v10;
    if (!v13)
      goto LABEL_13;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v11 = (std::__shared_weak_count_vtbl *)qword_253D31EB8;
  v10 = (std::__shared_weak_count *)off_253D31EC0;
  if (!off_253D31EC0)
  {
    v12 = 1;
    goto LABEL_16;
  }
LABEL_13:
  v16 = (unint64_t *)&v10->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  v12 = 0;
LABEL_16:
  pthread_mutex_unlock(&ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance);
  on_zero_shared_weak_low = LOBYTE(v11->__on_zero_shared_weak);
  if ((v12 & 1) == 0)
  {
    v19 = (unint64_t *)&v10->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (!on_zero_shared_weak_low)
        goto LABEL_22;
      goto LABEL_21;
    }
  }
  if (on_zero_shared_weak_low)
  {
LABEL_21:
    IceAriGetContext();
    KTLCloseChannel();
    IceAriSetContextValid(0);
  }
LABEL_22:
  v21 = *(NSObject **)(a1 + 64);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1107296256;
  block[2] = ___ZN21BBUICE16Communication13freeTransportEP26TelephonyUtilTransport_tag_block_invoke;
  block[3] = &__block_descriptor_tmp_23_1;
  block[4] = &v25;
  block[5] = a1;
  block[6] = a2;
  dispatch_sync(v21, block);
  v22 = *((unsigned __int8 *)v26 + 24);
  _Block_object_dispose(&v25, 8);
  return v22;
}

void sub_212B25604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;

  operator delete(v17);
  pthread_mutex_unlock(&ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21BBUICE16Communication13freeTransportEP26TelephonyUtilTransport_tag_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = BBUICE16Communication::freeTransportSync(a1[5], a1[6], a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  return result;
}

void BBUICE16Communication::~BBUICE16Communication(BBUICE16Communication *this)
{
  NSObject *v2;
  NSObject *v3;

  *(_QWORD *)this = off_24CE84EC8;
  v2 = *((_QWORD *)this + 9);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 8);
  if (v3)
    dispatch_release(v3);
  *(_QWORD *)this = &unk_24CE84620;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
}

{
  NSObject *v2;
  NSObject *v3;

  *(_QWORD *)this = off_24CE84EC8;
  v2 = *((_QWORD *)this + 9);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 8);
  if (v3)
    dispatch_release(v3);
  *(_QWORD *)this = &unk_24CE84620;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  operator delete(this);
}

_QWORD *BBUICE16Communication::getIPCLogBuffer@<X0>(_QWORD *a1@<X8>)
{
  BBULogIOABP *v3;
  _QWORD *result;

  v3 = (BBULogIOABP *)operator new(0xA0uLL);
  BBULogIOABP::BBULogIOABP(v3);
  *a1 = (char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 88);
  result = operator new(0x20uLL);
  *result = &unk_24CE814D0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v3;
  a1[1] = result;
  return result;
}

void sub_212B257C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_212B257E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_24()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ICEARIContext>::~PthreadMutexGuardPolicy, &ctu::Singleton<ICEARIContext,ICEARIContext,ctu::PthreadMutexGuardPolicy<ICEARIContext>>::sInstance, &dword_212A4D000);
  }
  return result;
}

_QWORD *BBUICE18HashData::BBUICE18HashData(_QWORD *a1, unsigned int a2, char *__s)
{
  uint64_t **v3;
  uint64_t v5;
  size_t v6;
  _BYTE *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t *v20;
  __int128 v21;
  uint64_t *v22;
  int64_t v23;
  char *v24;
  size_t v25;
  __int128 v26;
  __int128 v27;
  void *__p[3];
  void **v31;

  *a1 = off_24CE84F18;
  a1[2] = 0;
  a1[1] = a1 + 2;
  v3 = (uint64_t **)(a1 + 1);
  a1[3] = 0;
  if (a2)
  {
    v5 = a2;
    while (1)
    {
      memset(__p, 170, sizeof(__p));
      v6 = strlen(__s);
      if (v6 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v7 = (_BYTE *)v6;
      if (v6 >= 0x17)
        break;
      HIBYTE(__p[2]) = v6;
      v8 = __p;
      if (v6)
        goto LABEL_12;
LABEL_13:
      v7[(_QWORD)v8] = 0;
      v11 = (__int128 *)operator new(0x30uLL);
      v12 = *((_OWORD *)__s + 5);
      *v11 = *((_OWORD *)__s + 4);
      v11[1] = v12;
      v11[2] = *((_OWORD *)__s + 6);
      v31 = __p;
      v13 = std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v31);
      v14 = v13;
      v16 = v13 + 7;
      v15 = v13[7];
      v17 = (unint64_t)v13[9];
      if (v17 - (unint64_t)v15 >= 0x30)
      {
        v22 = v13[8];
        v23 = (char *)v22 - (char *)v15;
        if ((unint64_t)((char *)v22 - (char *)v15) > 0x2F)
        {
          v26 = *v11;
          v27 = v11[2];
          *((_OWORD *)v15 + 1) = v11[1];
          *((_OWORD *)v15 + 2) = v27;
          *(_OWORD *)v15 = v26;
          v13[8] = v15 + 6;
          operator delete(v11);
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
            goto LABEL_4;
        }
        else
        {
          if (v22 != v15)
          {
            memmove(v13[7], v11, (char *)v22 - (char *)v15);
            v15 = v14[8];
          }
          v24 = (char *)v11 + v23;
          v25 = 48 - v23;
          memmove(v15, v24, v25);
          v14[8] = (uint64_t *)((char *)v15 + v25);
          operator delete(v11);
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
            goto LABEL_4;
        }
      }
      else
      {
        if (v15)
        {
          v13[8] = v15;
          operator delete(v15);
          v17 = 0;
          *v16 = 0;
          v16[1] = 0;
          v16[2] = 0;
        }
        v18 = 2 * v17;
        if (2 * v17 <= 0x30)
          v18 = 48;
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
          v19 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        v20 = (uint64_t *)operator new(v19);
        v14[7] = v20;
        v14[8] = v20;
        v14[9] = (uint64_t *)((char *)v20 + v19);
        v21 = v11[1];
        *(_OWORD *)v20 = *v11;
        *((_OWORD *)v20 + 1) = v21;
        *((_OWORD *)v20 + 2) = v11[2];
        v14[8] = v20 + 6;
        operator delete(v11);
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
          goto LABEL_4;
      }
      operator delete(__p[0]);
LABEL_4:
      __s += 112;
      if (!--v5)
        return a1;
    }
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    __p[1] = v7;
    __p[2] = (void *)(v10 | 0x8000000000000000);
    __p[0] = v8;
LABEL_12:
    memcpy(v8, __s, (size_t)v7);
    goto LABEL_13;
  }
  return a1;
}

void sub_212B25AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char **a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(v17, *a10);
  _Unwind_Resume(a1);
}

void sub_212B25AD4()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x212B25AE0);
}

void BBUICE18HashData::~BBUICE18HashData(char **this)
{
  *this = (char *)off_24CE84F18;
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy((uint64_t)(this + 1), this[2]);
}

{
  *this = (char *)off_24CE84F18;
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy((uint64_t)(this + 1), this[2]);
  operator delete(this);
}

BOOL BBUICE18HashData::compare(BBUICE18HashData *this, BBUFeedback *a2, const BBUHashData *lpsrc)
{
  void *v5;
  _BOOL8 v6;
  __int128 *v7;
  char *v8;
  __int128 v9;
  const unsigned __int8 *v10;
  const unsigned __int8 *v11;
  const char *v12;
  void *v13;
  const char *v14;
  __int128 *v15;
  __int128 *v16;
  BOOL v17;
  _BYTE v19[32];
  __int128 v20;

  if (!lpsrc)
  {
    v5 = 0;
    v6 = 0;
    v7 = (__int128 *)*((_QWORD *)this + 1);
    v8 = (char *)this + 16;
    if (v7 == (__int128 *)((char *)this + 16))
      return v6;
LABEL_7:
    while (1)
    {
      *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v19[16] = v9;
      v20 = v9;
      *(_OWORD *)v19 = v9;
      std::pair<std::string const,std::vector<unsigned char>>::pair[abi:ne180100]((std::string *)v19, v7 + 2);
      v10 = *(const unsigned __int8 **)&v19[24];
      v11 = (const unsigned __int8 *)(*(uint64_t (**)(void *, _BYTE *))(*(_QWORD *)v5 + 40))(v5, v19);
      if (!v11)
        break;
      if (!v6)
        goto LABEL_18;
      if (v19[23] >= 0)
        v12 = v19;
      else
        v12 = *(const char **)v19;
      v6 = BBUHashData::compareHash(this, a2, v10, v11, v12);
      v13 = *(void **)&v19[24];
      if (*(_QWORD *)&v19[24])
        goto LABEL_19;
LABEL_20:
      if ((v19[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v19);
        v15 = (__int128 *)*((_QWORD *)v7 + 1);
        if (v15)
        {
          do
          {
LABEL_24:
            v16 = v15;
            v15 = *(__int128 **)v15;
          }
          while (v15);
          goto LABEL_6;
        }
      }
      else
      {
        v15 = (__int128 *)*((_QWORD *)v7 + 1);
        if (v15)
          goto LABEL_24;
      }
      do
      {
        v16 = (__int128 *)*((_QWORD *)v7 + 2);
        v17 = *(_QWORD *)v16 == (_QWORD)v7;
        v7 = v16;
      }
      while (!v17);
LABEL_6:
      v7 = v16;
      if (v16 == (__int128 *)v8)
        return v6;
    }
    if (v19[23] >= 0)
      v14 = v19;
    else
      v14 = *(const char **)v19;
    BBUFeedback::handleComment(a2, "Hash missing in BBFW: %s", v14);
LABEL_18:
    v6 = 0;
    v13 = *(void **)&v19[24];
    if (!*(_QWORD *)&v19[24])
      goto LABEL_20;
LABEL_19:
    *(_QWORD *)&v20 = v13;
    operator delete(v13);
    goto LABEL_20;
  }
  v6 = v5 != 0;
  v7 = (__int128 *)*((_QWORD *)this + 1);
  v8 = (char *)this + 16;
  if (v7 != (__int128 *)((char *)this + 16))
    goto LABEL_7;
  return v6;
}

void sub_212B25D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::string const,std::vector<unsigned char>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void BBUICE18HashData::showHashes(BBUICE18HashData *this, BBUFeedback *a2)
{
  __int128 *v2;
  char *v3;
  __int128 v6;
  const char *v7;
  const char *v8;
  void *v9;
  __int128 *v10;
  __int128 *v11;
  BOOL v12;
  _BYTE v13[32];
  __int128 v14;
  void *v15[2];
  uint64_t v16;

  v2 = (__int128 *)*((_QWORD *)this + 1);
  v3 = (char *)this + 16;
  if (v2 != (__int128 *)((char *)this + 16))
  {
    while (1)
    {
      *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v13[16] = v6;
      v14 = v6;
      *(_OWORD *)v13 = v6;
      std::pair<std::string const,std::vector<unsigned char>>::pair[abi:ne180100]((std::string *)v13, v2 + 2);
      v7 = v13[23] >= 0 ? v13 : *(const char **)v13;
      v15[0] = 0;
      v15[1] = 0;
      v16 = 0;
      (*(void (**)(BBUICE18HashData *))(*(_QWORD *)this + 32))(this);
      ctu::assign();
      v8 = v16 >= 0 ? (const char *)v15 : (const char *)v15[0];
      BBUFeedback::handleComment(a2, "\t %s:  %s", v7, v8);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        break;
      operator delete(v15[0]);
      v9 = *(void **)&v13[24];
      if (*(_QWORD *)&v13[24])
        goto LABEL_12;
LABEL_13:
      if ((v13[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v13);
        v10 = (__int128 *)*((_QWORD *)v2 + 1);
        if (v10)
        {
          do
          {
LABEL_19:
            v11 = v10;
            v10 = *(__int128 **)v10;
          }
          while (v10);
          goto LABEL_3;
        }
      }
      else
      {
        v10 = (__int128 *)*((_QWORD *)v2 + 1);
        if (v10)
          goto LABEL_19;
      }
      do
      {
        v11 = (__int128 *)*((_QWORD *)v2 + 2);
        v12 = *(_QWORD *)v11 == (_QWORD)v2;
        v2 = v11;
      }
      while (!v12);
LABEL_3:
      v2 = v11;
      if (v11 == (__int128 *)v3)
        return;
    }
    v9 = *(void **)&v13[24];
    if (!*(_QWORD *)&v13[24])
      goto LABEL_13;
LABEL_12:
    *(_QWORD *)&v14 = v9;
    operator delete(v9);
    goto LABEL_13;
  }
}

void sub_212B25EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  std::pair<std::string const,std::vector<unsigned char>>::~pair((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t BBUICE18HashData::getFileHash(uint64_t a1, const void **a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::__value_type<std::string,BBUZipFile::FileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,BBUZipFile::FileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BBUZipFile::FileInfo>>>::find<std::string>(a1 + 8, a2);
  if ((uint64_t *)(a1 + 16) == v3)
    return 0;
  else
    return v3[7];
}

uint64_t BBUICE18HashData::getHashSize(BBUICE18HashData *this)
{
  return 48;
}

void BBUELF32Header::BBUELF32Header(BBUELF32Header *this, BBUDataSource *a2, uint64_t a3)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *exception;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _OWORD v51[2];
  unint64_t v52;
  int v53;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 8) = 0;
  v53 = -1431655766;
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x14u, (ctu::LogMessageBuffer *)"Assertion failure(fDataSource)", v23, v24, v25, v50);
    goto LABEL_30;
  }
  v4 = (_DWORD *)((char *)this + 8);
  if ((*(unsigned int (**)(BBUDataSource *, char *, uint64_t, int *, uint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)this + 8, 52, &v53, a3))
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 88, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x16u, (ctu::LogMessageBuffer *)"Assertion failure(( ret == kBBUReturnSuccess) && \"Failed to copy ELF32 header from data source.\")", v26, v27, v28, v50);
    goto LABEL_30;
  }
  if (v53 != 52)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 88, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x17u, (ctu::LogMessageBuffer *)"Assertion failure(( amountRead == sizeof( Header)) && \"Copied data size mismatch: Failed to copy ELF32 header from data source.\")", v29, v30, v31, v50);
    goto LABEL_30;
  }
  if (*v4 != 1179403647)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 2, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x19u, (ctu::LogMessageBuffer *)"Assertion failure(::memcmp( fHeader.e_ident, kIdentMagic, sizeof( kIdentMagic)) == 0)", v32, v33, v34, v50);
    goto LABEL_30;
  }
  if (*((_BYTE *)this + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 88, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x1Du, (ctu::LogMessageBuffer *)"Assertion failure(( fHeader.e_ident[i] == kELFClass32) && \"ELF header identity mismatch.\")", v35, v36, v37, v50);
    goto LABEL_30;
  }
  if (*((_BYTE *)this + 13) != 1)
  {
    exception = __cxa_allocate_exception(0x210uLL);
    _BBUException::_BBUException((uint64_t)exception, 88, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x20u, (ctu::LogMessageBuffer *)"Assertion failure(( fHeader.e_ident[i] == kELFData2LSB) && \"ELF header identity mismatch.\")", v38, v39, v40, v50);
    goto LABEL_30;
  }
  v8 = *((unsigned int *)this + 9);
  if ((_DWORD)v8)
  {
    if (*((unsigned __int16 *)this + 25) <= 0x1Fu)
    {
      exception = __cxa_allocate_exception(0x210uLL);
      _BBUException::_BBUException((uint64_t)exception, 88, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x28u, (ctu::LogMessageBuffer *)"Assertion failure(( sizeof( ProgramHeaderTable) <= getProgramHeaderTableEntrySize()) && \"Program header table size exceeds program header table entry size.\")", v47, v48, v49, v50);
      goto LABEL_30;
    }
    if (gBBULogMaskGet(void)::once == -1)
    {
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0)
        goto LABEL_13;
    }
    else
    {
      dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
      if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) == 0)
        goto LABEL_13;
    }
    if (gBBULogVerbosity >= 7)
      _BBULog(16, 7, "BBUELF32Header", "", "Program header entries %u\n", v5, v6, v7, *((_WORD *)this + 26));
LABEL_13:
    v9 = *((unsigned __int16 *)this + 26);
    *((_QWORD *)this + 8) = operator new[](32 * v9);
    if (v9)
    {
      v10 = 0;
      for (i = 0; i < *((unsigned __int16 *)this + 26); ++i)
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t, int *, uint64_t))(**(_QWORD **)this + 16))(*(_QWORD *)this, *((_QWORD *)this + 8) + v10, 32, &v53, v8))
        {
          exception = __cxa_allocate_exception(0x210uLL);
          _BBUException::_BBUException((uint64_t)exception, 88, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x33u, (ctu::LogMessageBuffer *)"Assertion failure(( ret == kBBUReturnSuccess) && \"Failed to copy data from program header table.\")", v17, v18, v19, v50);
          goto LABEL_30;
        }
        if (v53 != 32)
        {
          exception = __cxa_allocate_exception(0x210uLL);
          _BBUException::_BBUException((uint64_t)exception, 88, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x34u, (ctu::LogMessageBuffer *)"Assertion failure(amountRead == sizeof( ProgramHeaderTable) && \"Copied data size mismatch: Failed to copy data from program header table.\")", v20, v21, v22, v50);
          goto LABEL_30;
        }
        v15 = *((unsigned __int16 *)this + 25);
        if (gBBULogMaskGet(void)::once == -1)
        {
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) != 0)
            goto LABEL_20;
        }
        else
        {
          dispatch_once(&gBBULogMaskGet(void)::once, &__block_literal_global_5);
          if ((*(_BYTE *)(gBBULogMaskGet(void)::sBBULogMask + 2) & 1) != 0)
          {
LABEL_20:
            if (gBBULogVerbosity >= 7)
              _BBULog(16, 7, "BBUELF32Header", "", "\t%u - Type: %u, Offset %u, VAddr %u, PAddr %u FileSize %u, MemSize %u, Flags %u\n", v12, v13, v14, i);
          }
        }
        v8 = (v8 + v15);
        v10 += 32;
      }
    }
  }
  if (*((_DWORD *)this + 10))
  {
    v52 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v41 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v51[0] = v41;
    v51[1] = v41;
    v42 = (*(uint64_t (**)(_QWORD, _OWORD *, uint64_t, int *))(**(_QWORD **)this + 16))(*(_QWORD *)this, v51, 40, &v53);
    v43 = __cxa_allocate_exception(0x210uLL);
    exception = v43;
    if (v42)
      _BBUException::_BBUException((uint64_t)v43, 88, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x46u, (ctu::LogMessageBuffer *)"Assertion failure(( ret == kBBUReturnSuccess) && \"Failed to copy data from section header table.\")", v44, v45, v46, v50);
    else
      _BBUException::_BBUException((uint64_t)v43, 88, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/BBUpdater/Legacy/Framework/Images/Common/BBUELF.cpp", 0x47u, (ctu::LogMessageBuffer *)"Assertion failure(( ret == sizeof( SectionHeaderTable)) && \"Copied data size mismatch: Failed to copy data from section header table.\")", v44, v45, v46, v50);
LABEL_30:
  }
}

void sub_212B263B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B263C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B263D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B263EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B26400(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B26414(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B26428(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B2643C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B26450(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B26464(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212B26478(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t b64_ntop(unsigned __int8 *a1, unint64_t a2, _BYTE *a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t result;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  __int16 v17;
  unsigned __int8 v18;

  *a3 = 0;
  if (a2 >= 3)
  {
    v5 = 0;
    while (1)
    {
      result = v5 + 4;
      if (v5 + 4 > a4)
        goto LABEL_16;
      v7 = a1[2];
      v8 = a1[1];
      v9 = *a1;
      a1 += 3;
      a2 -= 3;
      v10 = &a3[v5];
      *v10 = Base64[(unint64_t)v9 >> 2];
      v10[1] = Base64[(v8 >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v9 & 3))];
      v10[2] = Base64[(v7 >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (v8 & 0xF))];
      v10[3] = Base64[v7 & 0x3F];
      v5 = result;
      if (a2 <= 2)
      {
        if (a2)
          goto LABEL_9;
        goto LABEL_6;
      }
    }
  }
  result = 0;
  if (a2)
  {
LABEL_9:
    v11 = 0;
    v18 = 0;
    v17 = 0;
    do
    {
      *((_BYTE *)&v17 + v11) = a1[v11];
      ++v11;
    }
    while (a2 > v11);
    v12 = result + 4;
    if (result + 4 <= a4)
    {
      v13 = HIBYTE(v17);
      v14 = ((unint64_t)HIBYTE(v17) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v17 & 3));
      a3[result] = Base64[(unint64_t)v17 >> 2];
      v15 = v18;
      a3[result | 1] = Base64[v14];
      v16 = 61;
      if (a2 != 1)
        v16 = Base64[(v15 >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (v13 & 0xF))];
      a3[result | 2] = v16;
      a3[result | 3] = 61;
      result += 4;
      if (v12 < a4)
        goto LABEL_15;
    }
  }
  else
  {
LABEL_6:
    if (result < a4)
    {
LABEL_15:
      a3[result] = 0;
      return result;
    }
  }
LABEL_16:
  a3[a4 - 1] = 0;
  *a3 = 0;
  return 0xFFFFFFFFLL;
}

