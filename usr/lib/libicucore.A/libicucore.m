uint64_t icu::Appendable::appendCodePoint(icu::Appendable *this, int a2)
{
  __int16 v2;
  uint64_t result;

  v2 = a2;
  if (a2 < 0x10000)
    return (*(uint64_t (**)(icu::Appendable *, _QWORD))(*(_QWORD *)this + 24))(this, (unsigned __int16)a2);
  result = (*(uint64_t (**)(icu::Appendable *, _QWORD))(*(_QWORD *)this + 24))(this, (unsigned __int16)((a2 >> 10) - 10304));
  if ((_DWORD)result)
    return (*(unsigned int (**)(icu::Appendable *, _QWORD))(*(_QWORD *)this + 24))(this, v2 & 0x3FF | 0xDC00u) != 0;
  return result;
}

uint64_t icu::Appendable::appendString(uint64_t a1, _WORD *a2, int a3)
{
  _WORD *v3;
  _WORD *v5;
  _WORD *v6;
  uint64_t result;
  BOOL v8;

  v3 = a2;
  if (a3 < 0)
  {
    while (*v3)
    {
      ++v3;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      if (!(_DWORD)result)
        return result;
    }
    return 1;
  }
  if (!a3)
    return 1;
  v5 = &a2[a3];
  v6 = a2 + 1;
  do
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, (unsigned __int16)*(v6 - 1));
    if ((_DWORD)result)
      v8 = v6 >= v5;
    else
      v8 = 1;
    ++v6;
  }
  while (!v8);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t icu::Appendable::reserveAppendCapacity(icu::Appendable *this)
{
  return 1;
}

uint64_t icu::Appendable::getAppendBuffer(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int *a6)
{
  _BOOL4 v7;
  BOOL v8;
  int v9;
  uint64_t result;

  v7 = a2 < 1 || a5 < a2;
  v8 = !v7;
  if (v7)
    v9 = 0;
  else
    v9 = a5;
  if (v8)
    result = a4;
  else
    result = 0;
  *a6 = v9;
  return result;
}

uint64_t sub_18BBAB1D4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  int v5;
  uint64_t i;

  *(_QWORD *)a1 = &off_1E22462D0;
  *(_QWORD *)(a1 + 856) = a2;
  *(_DWORD *)(a1 + 864) = a3;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 748) = 0u;
  *(_OWORD *)(a1 + 764) = 0u;
  *(_OWORD *)(a1 + 716) = 0u;
  *(_OWORD *)(a1 + 732) = 0u;
  *(_OWORD *)(a1 + 684) = 0u;
  *(_OWORD *)(a1 + 700) = 0u;
  *(_OWORD *)(a1 + 652) = 0u;
  *(_OWORD *)(a1 + 668) = 0u;
  *(_OWORD *)(a1 + 620) = 0u;
  *(_OWORD *)(a1 + 636) = 0u;
  *(_OWORD *)(a1 + 588) = 0u;
  *(_OWORD *)(a1 + 604) = 0u;
  *(_OWORD *)(a1 + 556) = 0u;
  *(_OWORD *)(a1 + 572) = 0u;
  *(_OWORD *)(a1 + 524) = 0u;
  *(_OWORD *)(a1 + 540) = 0u;
  *(_OWORD *)(a1 + 492) = 0u;
  *(_OWORD *)(a1 + 508) = 0u;
  *(_OWORD *)(a1 + 460) = 0u;
  *(_OWORD *)(a1 + 476) = 0u;
  *(_OWORD *)(a1 + 428) = 0u;
  *(_OWORD *)(a1 + 444) = 0u;
  *(_OWORD *)(a1 + 396) = 0u;
  *(_OWORD *)(a1 + 412) = 0u;
  *(_OWORD *)(a1 + 364) = 0u;
  *(_OWORD *)(a1 + 380) = 0u;
  *(_OWORD *)(a1 + 332) = 0u;
  *(_OWORD *)(a1 + 348) = 0u;
  *(_OWORD *)(a1 + 300) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 268) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  v4 = sub_18BBAB31C(a1, 2048, 0, (a3 - 1));
  *(_DWORD *)(a1 + 780) = v4;
  v5 = 4096;
  for (i = 784; i != 848; i += 4)
  {
    v4 = sub_18BBAB31C(a1, v5, v4, (*(_DWORD *)(a1 + 864) - 1));
    *(_DWORD *)(a1 + i) = v4;
    v5 += 4096;
  }
  *(_DWORD *)(a1 + 848) = *(_DWORD *)(a1 + 864) - 1;
  *(_BYTE *)(a1 + 264) = sub_18BBAB31C(a1, 65533, *(unsigned int *)(a1 + 840), *(unsigned int *)(a1 + 844)) & 1;
  sub_18BBAB384((char *)a1);
  sub_18BBAB5EC(a1);
  return a1;
}

uint64_t sub_18BBAB31C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;

  v4 = *(_QWORD *)(a1 + 856);
  if (*(_DWORD *)(v4 + 4 * (int)a3) > a2)
    return a3;
  if ((int)a3 < (int)a4)
  {
    v5 = ((int)a4 + (int)a3) >> 1;
    if (*(_DWORD *)(v4 + 4 * ((int)a4 - 1)) > a2 && v5 != (_DWORD)a3)
    {
      do
      {
        if (*(_DWORD *)(v4 + 4 * v5) > a2)
        {
          a4 = v5;
        }
        else
        {
          LODWORD(a3) = v5;
          a4 = a4;
        }
        v5 = ((int)a4 + (int)a3) >> 1;
      }
      while (v5 != (_DWORD)a3);
    }
  }
  return a4;
}

char *sub_18BBAB384(char *result)
{
  char *v1;
  int v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  signed int v21;
  char *v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v1 = result;
  v2 = 0;
  v3 = result + 8;
  while (1)
  {
    v4 = *((_QWORD *)v1 + 107);
    v5 = v2 + 1;
    v6 = *((_DWORD *)v1 + 216);
    if ((int)v5 >= v6)
    {
      v7 = 1114112;
    }
    else
    {
      v7 = *(_DWORD *)(v4 + 4 * v5);
      LODWORD(v5) = v2 + 2;
    }
    v8 = *(int *)(v4 + 4 * v2);
    if ((int)v8 > 255)
      break;
    if (v7 <= (int)v8 + 1)
      v9 = v8 + 1;
    else
      v9 = v7;
    LODWORD(v10) = v9 + ~(_DWORD)v8;
    if (v10 >= 255 - (int)v8)
      v10 = (255 - v8);
    else
      v10 = v10;
    result = (char *)memset(&v3[v8], 1, v10 + 1);
    v2 = v5;
    if (v7 >= 257)
    {
      v4 = *((_QWORD *)v1 + 107);
      v6 = *((_DWORD *)v1 + 216);
      break;
    }
  }
  v11 = 0;
  v12 = v6;
  while (1)
  {
    v13 = v11;
    if (v11 + 1 >= v12)
      break;
    v11 += 2;
    v14 = *(_DWORD *)(v4 + 4 * v13 + 4);
    if (v14 > 128)
      goto LABEL_19;
  }
  LODWORD(v11) = v11 + 1;
  v14 = 1114112;
LABEL_19:
  v15 = *(_DWORD *)(v4 + 4 * v13);
  if (v15 <= 128)
    v16 = 128;
  else
    v16 = v15;
  if (v16 <= 0x7FF)
  {
    while (1)
    {
      v17 = v14 >= 2048 ? 2048 : v14;
      result = (char *)sub_18BBAB7E4((_DWORD *)v1 + 67, v16, v17);
      if (v14 > 2048)
        break;
      v18 = *((_QWORD *)v1 + 107);
      v19 = (int)v11 + 1;
      if ((int)v19 >= *((_DWORD *)v1 + 216))
      {
        v14 = 1114112;
      }
      else
      {
        v14 = *(_DWORD *)(v18 + 4 * v19);
        LODWORD(v19) = v11 + 2;
      }
      v16 = *(_DWORD *)(v18 + 4 * (int)v11);
      LODWORD(v11) = v19;
      if (v16 >= 2048)
        goto LABEL_33;
    }
    v16 = 2048;
    goto LABEL_36;
  }
  LODWORD(v19) = v11;
LABEL_33:
  LODWORD(v11) = v19;
  if (!HIWORD(v16))
  {
LABEL_36:
    v20 = 2048;
    do
    {
      if (v14 >= 0x10000)
        v14 = 0x10000;
      if (v16 <= v20)
        v21 = v20;
      else
        v21 = v16;
      if (v21 < v14)
      {
        if ((v21 & 0x3F) != 0)
        {
          v22 = &v1[4 * ((v21 >> 6) & 0x3F)];
          *((_DWORD *)v22 + 131) |= 65537 << (v21 >> 12);
          v21 = (v21 & 0xFFFFFFC0) + 64;
          v20 = v21;
        }
        if (v21 < v14)
        {
          v23 = v14 & 0xFFFFFFC0;
          if (v21 < (int)(v14 & 0xFFFFFFC0))
            result = (char *)sub_18BBAB7E4((_DWORD *)v1 + 131, v21 >> 6, v14 >> 6);
          if ((v14 & 0x3F) != 0)
          {
            v24 = &v1[4 * ((v14 >> 6) & 0x3F)];
            *((_DWORD *)v24 + 131) |= 65537 << (v14 >> 12);
            v14 = v23 + 64;
            v20 = v23 + 64;
          }
        }
      }
      if (v14 == 0x10000)
        break;
      v25 = *((_QWORD *)v1 + 107);
      v26 = (int)v11 + 1;
      if ((int)v26 >= *((_DWORD *)v1 + 216))
      {
        v14 = 1114112;
      }
      else
      {
        v14 = *(_DWORD *)(v25 + 4 * v26);
        LODWORD(v26) = v11 + 2;
      }
      v16 = *(_DWORD *)(v25 + 4 * (int)v11);
      LODWORD(v11) = v26;
    }
    while (v16 < 0x10000);
  }
  return result;
}

__n128 sub_18BBAB5EC(uint64_t a1)
{
  uint64_t i;
  uint64_t j;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 264))
  {
    for (i = 0; i != 256; i += 16)
      *(_OWORD *)(a1 + 268 + i) |= __PAIR128__(0x300000003, 0x300000003);
    for (j = 0; j != 128; j += 16)
      *(_OWORD *)(a1 + 524 + j) |= __PAIR128__(0x100000001, 0x100000001);
    v3 = 0;
    v4 = a1 + 652;
    do
    {
      result = (__n128)(*(_OWORD *)(v4 + v3) & __PAIR128__(0xDFFFDFFFDFFFDFFFLL, 0xDFFFDFFFDFFFDFFFLL) | __PAIR128__(0x200000002000, 0x200000002000));
      *(__n128 *)(v4 + v3) = result;
      v3 += 16;
    }
    while (v3 != 128);
  }
  else
  {
    v6 = 0;
    v7 = a1 + 652;
    do
    {
      result = (__n128)(*(_OWORD *)(v7 + v6) & __PAIR128__(0xDFFFDFFFDFFFDFFFLL, 0xDFFFDFFFDFFFDFFFLL));
      *(__n128 *)(v7 + v6) = result;
      v6 += 16;
    }
    while (v6 != 128);
  }
  return result;
}

__n128 sub_18BBAB684(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __n128 result;
  __int128 v41;
  __int128 v42;

  *(_QWORD *)a1 = &off_1E22462D0;
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 856) = a3;
  *(_DWORD *)(a1 + 864) = a4;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  v7 = *(_OWORD *)(a2 + 72);
  v8 = *(_OWORD *)(a2 + 88);
  v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  v10 = *(_OWORD *)(a2 + 136);
  v11 = *(_OWORD *)(a2 + 152);
  v12 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 136) = v10;
  v13 = *(_OWORD *)(a2 + 200);
  v14 = *(_OWORD *)(a2 + 216);
  v15 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v15;
  *(_OWORD *)(a1 + 216) = v14;
  *(_OWORD *)(a1 + 200) = v13;
  v16 = *(_OWORD *)(a2 + 268);
  v17 = *(_OWORD *)(a2 + 284);
  v18 = *(_OWORD *)(a2 + 316);
  *(_OWORD *)(a1 + 300) = *(_OWORD *)(a2 + 300);
  *(_OWORD *)(a1 + 316) = v18;
  *(_OWORD *)(a1 + 268) = v16;
  *(_OWORD *)(a1 + 284) = v17;
  v19 = *(_OWORD *)(a2 + 332);
  v20 = *(_OWORD *)(a2 + 348);
  v21 = *(_OWORD *)(a2 + 380);
  *(_OWORD *)(a1 + 364) = *(_OWORD *)(a2 + 364);
  *(_OWORD *)(a1 + 380) = v21;
  *(_OWORD *)(a1 + 332) = v19;
  *(_OWORD *)(a1 + 348) = v20;
  v22 = *(_OWORD *)(a2 + 396);
  v23 = *(_OWORD *)(a2 + 412);
  v24 = *(_OWORD *)(a2 + 444);
  *(_OWORD *)(a1 + 428) = *(_OWORD *)(a2 + 428);
  *(_OWORD *)(a1 + 444) = v24;
  *(_OWORD *)(a1 + 396) = v22;
  *(_OWORD *)(a1 + 412) = v23;
  v25 = *(_OWORD *)(a2 + 460);
  v26 = *(_OWORD *)(a2 + 476);
  v27 = *(_OWORD *)(a2 + 508);
  *(_OWORD *)(a1 + 492) = *(_OWORD *)(a2 + 492);
  *(_OWORD *)(a1 + 508) = v27;
  *(_OWORD *)(a1 + 460) = v25;
  *(_OWORD *)(a1 + 476) = v26;
  v28 = *(_OWORD *)(a2 + 524);
  v29 = *(_OWORD *)(a2 + 540);
  v30 = *(_OWORD *)(a2 + 572);
  *(_OWORD *)(a1 + 556) = *(_OWORD *)(a2 + 556);
  *(_OWORD *)(a1 + 572) = v30;
  *(_OWORD *)(a1 + 524) = v28;
  *(_OWORD *)(a1 + 540) = v29;
  v31 = *(_OWORD *)(a2 + 588);
  v32 = *(_OWORD *)(a2 + 604);
  v33 = *(_OWORD *)(a2 + 636);
  *(_OWORD *)(a1 + 620) = *(_OWORD *)(a2 + 620);
  *(_OWORD *)(a1 + 636) = v33;
  *(_OWORD *)(a1 + 588) = v31;
  *(_OWORD *)(a1 + 604) = v32;
  v34 = *(_OWORD *)(a2 + 652);
  v35 = *(_OWORD *)(a2 + 668);
  v36 = *(_OWORD *)(a2 + 700);
  *(_OWORD *)(a1 + 684) = *(_OWORD *)(a2 + 684);
  *(_OWORD *)(a1 + 700) = v36;
  *(_OWORD *)(a1 + 652) = v34;
  *(_OWORD *)(a1 + 668) = v35;
  v37 = *(_OWORD *)(a2 + 716);
  v38 = *(_OWORD *)(a2 + 732);
  v39 = *(_OWORD *)(a2 + 764);
  *(_OWORD *)(a1 + 748) = *(_OWORD *)(a2 + 748);
  *(_OWORD *)(a1 + 764) = v39;
  *(_OWORD *)(a1 + 716) = v37;
  *(_OWORD *)(a1 + 732) = v38;
  *(_OWORD *)(a1 + 780) = *(_OWORD *)(a2 + 780);
  result = *(__n128 *)(a2 + 796);
  v41 = *(_OWORD *)(a2 + 812);
  v42 = *(_OWORD *)(a2 + 828);
  *(_QWORD *)(a1 + 844) = *(_QWORD *)(a2 + 844);
  *(_OWORD *)(a1 + 812) = v41;
  *(_OWORD *)(a1 + 828) = v42;
  *(__n128 *)(a1 + 796) = result;
  return result;
}

_DWORD *sub_18BBAB7E4(_DWORD *result, int a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int8x16_t v13;
  int v14;

  v3 = a2 >> 6;
  v4 = 1 << (a2 >> 6);
  if (a2 + 1 == a3)
  {
    result[a2 & 0x3F] |= v4;
  }
  else
  {
    v5 = a3 & 0x3F;
    if (v3 == a3 >> 6)
    {
      if ((a2 & 0x3Fu) < v5)
      {
        v6 = &result[a2 & 0x3F];
        v7 = v5 - (a2 & 0x3F);
        do
        {
          *v6++ |= v4;
          --v7;
        }
        while (v7);
      }
    }
    else
    {
      v8 = a3 >> 6;
      if ((a2 & 0x3F) != 0)
      {
        v9 = a2 & 0x3F;
        do
          result[v9++] |= v4;
        while (v9 != 64);
        ++v3;
      }
      if (v3 < v8)
      {
        v10 = 0;
        v11 = -1 << v3;
        if (a3 < 2048)
          v12 = ~(-1 << v8);
        else
          v12 = -1;
        v13 = (int8x16_t)vdupq_n_s32(v11 & v12);
        do
        {
          *(int8x16_t *)&result[v10] = vorrq_s8(*(int8x16_t *)&result[v10], v13);
          v10 += 4;
        }
        while (v10 != 64);
      }
      v14 = 1 << v8;
      if (v8 == 32)
        v14 = 0x80000000;
      if ((a3 & 0x3F) != 0)
      {
        do
        {
          *result++ |= v14;
          --v5;
        }
        while (v5);
      }
    }
  }
  return result;
}

uint64_t sub_18BBAB8DC(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  if (a2 > 0xFF)
  {
    if (a2 > 0x7FF)
    {
      if (a2 >> 11 < 0x1B || (a2 & 0xFFFFE000) == 0xE000)
      {
        v5 = a2 >> 12;
        v2 = (*(_DWORD *)(a1 + 4 * ((a2 >> 6) & 0x3F) + 524) >> (a2 >> 12)) & 0x10001;
        if (v2 <= 1)
          return (char)v2;
        v3 = *(unsigned int *)(a1 + 780 + 4 * v5);
        v4 = *(unsigned int *)(a1 + 780 + 4 * (v5 + 1));
      }
      else
      {
        if (HIWORD(a2) > 0x10u)
        {
          LOBYTE(v2) = 0;
          return (char)v2;
        }
        v3 = *(unsigned int *)(a1 + 832);
        v4 = *(unsigned int *)(a1 + 848);
      }
      LOBYTE(v2) = sub_18BBAB31C(a1, a2, v3, v4) & 1;
      return (char)v2;
    }
    v2 = (*(_DWORD *)(a1 + 4 * (a2 & 0x3F) + 268) >> (a2 >> 6)) & 1;
  }
  else
  {
    LOBYTE(v2) = *(_BYTE *)(a1 + a2 + 8);
  }
  return (char)v2;
}

unsigned __int16 *sub_18BBAB998(unsigned int *a1, unsigned __int16 *a2, unint64_t a3, int a4)
{
  unint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  unsigned __int16 *v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;

  if (a4)
  {
    while (1)
    {
      v7 = *a2;
      if (v7 > 0xFF)
      {
        if (v7 > 0x7FF)
        {
          if ((unsigned __int16)((unsigned __int16)(v7 + 0x2000) >> 11) > 0x1Eu)
          {
            v8 = a2 + 1;
            v11 = v7 >> 10 > 0x36 || v8 == (unsigned __int16 *)a3;
            if (v11 || (v14 = *v8, (unsigned __int16)((unsigned __int16)(v14 + 0x2000) >> 10) <= 0x3Eu))
            {
              v12 = a1[208];
              v13 = a1[209];
              goto LABEL_19;
            }
            if ((sub_18BBAB31C((uint64_t)a1, v14 + ((_DWORD)v7 << 10) - 56613888, a1[211], a1[212]) & 1) == 0)
              return a2;
          }
          else
          {
            v9 = v7 >> 12;
            v10 = (a1[((v7 >> 6) & 0x3F) + 131] >> (v7 >> 12)) & 0x10001;
            if (v10 > 1)
            {
              v12 = a1[v9 + 195];
              v13 = a1[(v9 + 1) + 195];
LABEL_19:
              v8 = a2;
              if ((sub_18BBAB31C((uint64_t)a1, v7, v12, v13) & 1) == 0)
                return a2;
              goto LABEL_20;
            }
            v8 = a2;
            if (!v10)
              return a2;
          }
        }
        else
        {
          v8 = a2;
          if (((a1[(v7 & 0x3F) + 67] >> (v7 >> 6)) & 1) == 0)
            return a2;
        }
      }
      else
      {
        v8 = a2;
        if (!*((_BYTE *)a1 + v7 + 8))
          return a2;
      }
LABEL_20:
      a2 = v8 + 1;
      if ((unint64_t)(v8 + 1) >= a3)
        return a2;
    }
  }
  do
  {
    v16 = *a2;
    if (v16 <= 0xFF)
    {
      v17 = a2;
      if (*((_BYTE *)a1 + v16 + 8))
        return a2;
      goto LABEL_46;
    }
    if (v16 <= 0x7FF)
    {
      v17 = a2;
      if (((a1[(v16 & 0x3F) + 67] >> (v16 >> 6)) & 1) != 0)
        return a2;
      goto LABEL_46;
    }
    if ((unsigned __int16)((unsigned __int16)(v16 + 0x2000) >> 11) > 0x1Eu)
    {
      v17 = a2 + 1;
      if (v16 >> 10 <= 0x36 && v17 != (unsigned __int16 *)a3)
      {
        v15 = *v17;
        if ((unsigned __int16)((unsigned __int16)(v15 + 0x2000) >> 10) > 0x3Eu)
        {
          if ((sub_18BBAB31C((uint64_t)a1, v15 + ((_DWORD)v16 << 10) - 56613888, a1[211], a1[212]) & 1) != 0)
            return a2;
          goto LABEL_46;
        }
      }
      v21 = a1[208];
      v22 = a1[209];
    }
    else
    {
      v18 = v16 >> 12;
      v19 = (a1[((v16 >> 6) & 0x3F) + 131] >> (v16 >> 12)) & 0x10001;
      if (v19 <= 1)
      {
        v17 = a2;
        if (v19)
          return a2;
        goto LABEL_46;
      }
      v21 = a1[v18 + 195];
      v22 = a1[(v18 + 1) + 195];
    }
    v17 = a2;
    if ((sub_18BBAB31C((uint64_t)a1, v16, v21, v22) & 1) != 0)
      return a2;
LABEL_46:
    a2 = v17 + 1;
  }
  while ((unint64_t)(v17 + 1) < a3);
  return a2;
}

uint64_t sub_18BBABBEC(unsigned int *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a3;
  v7 = a3;
  if (a4)
  {
    while (1)
    {
      v9 = *(unsigned __int16 *)(v7 - 2);
      v7 -= 2;
      v8 = v9;
      if (v9 > 0xFF)
      {
        if (v8 > 0x7FF)
        {
          if ((unsigned __int16)((unsigned __int16)(v8 + 0x2000) >> 11) > 0x1Eu)
          {
            v12 = v8 >> 10 < 0x37 || v7 == a2;
            if (v12
              || (v13 = *(unsigned __int16 *)(v4 - 4), (unsigned __int16)((unsigned __int16)(v13 + 9216) >> 10) <= 0x3Eu))
            {
              v14 = a1[208];
              v15 = a1[209];
              goto LABEL_19;
            }
            v7 = v4 - 4;
            if ((sub_18BBAB31C((uint64_t)a1, (int)v8 + (v13 << 10) - 56613888, a1[211], a1[212]) & 1) == 0)
              return v4;
          }
          else
          {
            v10 = v8 >> 12;
            v11 = (a1[((v8 >> 6) & 0x3F) + 131] >> (v8 >> 12)) & 0x10001;
            if (v11 > 1)
            {
              v14 = a1[v10 + 195];
              v15 = a1[(v10 + 1) + 195];
LABEL_19:
              if ((sub_18BBAB31C((uint64_t)a1, v8, v14, v15) & 1) == 0)
                return v4;
              goto LABEL_20;
            }
            if (!v11)
              return v4;
          }
        }
        else if (((a1[(v8 & 0x3F) + 67] >> (v8 >> 6)) & 1) == 0)
        {
          return v4;
        }
      }
      else if (!*((_BYTE *)a1 + v8 + 8))
      {
        return v4;
      }
LABEL_20:
      v4 = v7;
      if (v7 == a2)
        return a2;
    }
  }
  do
  {
    v17 = *(unsigned __int16 *)(v7 - 2);
    v7 -= 2;
    v16 = v17;
    if (v17 <= 0xFF)
    {
      if (*((_BYTE *)a1 + v16 + 8))
        return v4;
      goto LABEL_44;
    }
    if (v16 <= 0x7FF)
    {
      if (((a1[(v16 & 0x3F) + 67] >> (v16 >> 6)) & 1) != 0)
        return v4;
      goto LABEL_44;
    }
    if ((unsigned __int16)((unsigned __int16)(v16 + 0x2000) >> 11) > 0x1Eu)
    {
      if (v16 >> 10 >= 0x37 && v7 != a2)
      {
        v21 = *(unsigned __int16 *)(v4 - 4);
        if ((unsigned __int16)((unsigned __int16)(v21 + 9216) >> 10) > 0x3Eu)
        {
          v7 = v4 - 4;
          if ((sub_18BBAB31C((uint64_t)a1, (int)v16 + (v21 << 10) - 56613888, a1[211], a1[212]) & 1) != 0)
            return v4;
          goto LABEL_44;
        }
      }
      v22 = a1[208];
      v23 = a1[209];
    }
    else
    {
      v18 = v16 >> 12;
      v19 = (a1[((v16 >> 6) & 0x3F) + 131] >> (v16 >> 12)) & 0x10001;
      if (v19 <= 1)
      {
        if (v19)
          return v4;
        goto LABEL_44;
      }
      v22 = a1[v18 + 195];
      v23 = a1[(v18 + 1) + 195];
    }
    if ((sub_18BBAB31C((uint64_t)a1, v16, v22, v23) & 1) != 0)
      return v4;
LABEL_44:
    v4 = v7;
  }
  while (v7 != a2);
  return a2;
}

unsigned __int8 *sub_18BBABE3C(uint64_t a1, char *a2, int a3, int a4)
{
  unsigned __int8 *v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  char *v12;
  unsigned int v13;
  unint64_t v14;
  char *v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  char v27;

  v5 = (unsigned __int8 *)a2;
  v7 = &a2[a3];
  if ((*a2 & 0x80000000) == 0)
  {
    v8 = *a2;
    v9 = a3 - 1;
    if (a4)
    {
      while (1)
      {
        if (!*(_BYTE *)(a1 + v8 + 8))
          return v5;
        if (!v9)
          return (unsigned __int8 *)&a2[a3];
        v8 = *++v5;
        --v9;
        if ((char)*v5 < 0)
          goto LABEL_6;
      }
    }
    do
    {
      if (*(_BYTE *)(a1 + v8 + 8))
        return v5;
      if (!v9)
        return (unsigned __int8 *)&a2[a3];
      v8 = *++v5;
      --v9;
    }
    while (((char)*v5 & 0x80000000) == 0);
LABEL_6:
    a3 = (_DWORD)v7 - (_DWORD)v5;
  }
  v10 = a4 != 0;
  v11 = v7 - 1;
  if ((*(v7 - 1) & 0x80000000) == 0)
    goto LABEL_8;
  if (*(v7 - 1) <= 0xBFu)
  {
    if (a3 < 2)
      goto LABEL_8;
    v11 = v7 - 2;
    v13 = *(v7 - 2);
    if (v13 <= 0xDF)
    {
      if ((char)v13 <= -65 && a3 >= 3)
      {
        v11 = v7 - 3;
        v12 = v7;
        if (*(v7 - 3) < 0xF0u)
          goto LABEL_23;
        goto LABEL_19;
      }
LABEL_8:
      v12 = v7;
      goto LABEL_23;
    }
  }
LABEL_19:
  if (*(char *)(a1 + 264) == v10)
    v12 = v7;
  else
    v12 = v11;
  v7 = v11;
LABEL_23:
  if (v5 >= (unsigned __int8 *)v7)
    return (unsigned __int8 *)v12;
  while (1)
  {
    v14 = *v5;
    if (((char)*v5 & 0x80000000) == 0)
      break;
LABEL_34:
    v18 = v5 + 1;
    if (v14 < 0xE0)
    {
      if (v14 < 0xC0 || (v23 = *v18 ^ 0x80, v23 > 0x3F))
      {
LABEL_50:
        if (*(char *)(a1 + 264) != v10)
          return v5;
        goto LABEL_51;
      }
      if ((a4 != 0) == (((*(_DWORD *)(a1 + 4 * v23 + 268) >> v14) & 1) == 0))
        return v5;
      v18 = v5 + 2;
    }
    else
    {
      v19 = *v18 ^ 0x80;
      if (v14 > 0xEF)
      {
        if (v19 > 0x3F)
          goto LABEL_50;
        v24 = v5[2] ^ 0x80;
        if (v24 > 0x3F)
          goto LABEL_50;
        v25 = v5[3] ^ 0x80;
        if (v25 > 0x3F)
          goto LABEL_50;
        v26 = (((_DWORD)v14 << 18) - 62914560) | ((_DWORD)v19 << 12);
        if ((v26 - 0x10000) >> 20)
          v27 = *(_BYTE *)(a1 + 264);
        else
          v27 = sub_18BBAB31C(a1, v25 | (v24 << 6) | v26, *(unsigned int *)(a1 + 844), *(unsigned int *)(a1 + 848)) & 1;
        if (v10 != v27)
          return v5;
        v18 = v5 + 4;
      }
      else
      {
        if (v19 > 0x3F)
          goto LABEL_50;
        v20 = v5[2] ^ 0x80;
        if (v20 > 0x3F)
          goto LABEL_50;
        v21 = v14 & 0xF;
        v22 = (*(_DWORD *)(a1 + 4 * v19 + 524) >> v21) & 0x10001;
        if (v22 > 1)
        {
          if ((a4 != 0) == ((sub_18BBAB31C(a1, ((_DWORD)v19 << 6) | ((_DWORD)v21 << 12) | v20, *(unsigned int *)(a1 + 780 + 4 * v21), *(unsigned int *)(a1 + 780 + 4 * (v21 + 1))) & 1) == 0))return v5;
        }
        else if (v22 != v10)
        {
          return v5;
        }
        v18 = v5 + 3;
      }
    }
LABEL_51:
    v5 = v18;
    if (v18 >= (unsigned __int8 *)v7)
      return (unsigned __int8 *)v12;
  }
  v15 = (char *)(v5 + 1);
  if (a4)
  {
    while (*(_BYTE *)(a1 + v14 + 8))
    {
      if (v15 == v7)
        return (unsigned __int8 *)v12;
      v16 = *v15++;
      v14 = v16;
      if (v16 < 0)
        goto LABEL_33;
    }
  }
  else
  {
    while (!*(_BYTE *)(a1 + v14 + 8))
    {
      if (v15 == v7)
        return (unsigned __int8 *)v12;
      v17 = *v15++;
      v14 = v17;
      if (v17 < 0)
      {
LABEL_33:
        v5 = (unsigned __int8 *)(v15 - 1);
        goto LABEL_34;
      }
    }
  }
  return (unsigned __int8 *)(v15 - 1);
}

uint64_t sub_18BBAC14C(uint64_t a1, uint8_t *s, uint64_t a3, int a4)
{
  int v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  UChar32 v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  int32_t pi;

  v7 = a4 != 0;
  v8 = s - 2;
  while (1)
  {
    v9 = (int)a3 - 1;
    pi = a3 - 1;
    v10 = s[v9];
    if ((v10 & 0x80) == 0)
      break;
LABEL_16:
    v13 = utf8_prevCharSafeBody(s, 0, &pi, v10, -3);
    if (v13 <= 2047)
    {
      if ((a4 != 0) == (((*(_DWORD *)(a1 + 4 * (v13 & 0x3F) + 268) >> (v13 >> 6)) & 1) == 0))
        return (v9 + 1);
      goto LABEL_26;
    }
    if (HIWORD(v13))
    {
      v16 = a4 != 0;
      v17 = *(unsigned int *)(a1 + 844);
      v18 = *(unsigned int *)(a1 + 848);
    }
    else
    {
      v14 = v13 >> 12;
      v15 = (*(_DWORD *)(a1 + 4 * ((v13 >> 6) & 0x3F) + 524) >> (v13 >> 12)) & 0x10001;
      if (v15 <= 1)
      {
        if (v15 != v7)
          return (v9 + 1);
        goto LABEL_26;
      }
      v16 = a4 != 0;
      v17 = *(unsigned int *)(a1 + 780 + 4 * v14);
      v18 = *(unsigned int *)(a1 + 780 + 4 * (v14 + 1));
    }
    if (((v16 ^ ((sub_18BBAB31C(a1, v13, v17, v18) & 1) == 0)) & 1) == 0)
      return (v9 + 1);
LABEL_26:
    a3 = pi;
    if (pi <= 0)
      return 0;
  }
  if (a4)
  {
    if (*(_BYTE *)(a1 + v10 + 8))
    {
      v11 = (int)a3;
      LODWORD(v9) = a3 - 2;
      do
      {
        a3 = v11 - 1;
        if (v11 == 1)
          break;
        pi = v9;
        v10 = v8[v11];
        if ((v10 & 0x80) != 0)
          goto LABEL_16;
        LODWORD(v9) = v9 - 1;
        --v11;
      }
      while (*(_BYTE *)(a1 + v10 + 8));
    }
  }
  else if (!*(_BYTE *)(a1 + v10 + 8))
  {
    v12 = (int)a3;
    LODWORD(v9) = a3 - 2;
    do
    {
      a3 = v12 - 1;
      if (v12 == 1)
        break;
      pi = v9;
      v10 = v8[v12];
      if ((v10 & 0x80) != 0)
        goto LABEL_16;
      LODWORD(v9) = v9 - 1;
      --v12;
    }
    while (!*(_BYTE *)(a1 + v10 + 8));
  }
  return a3;
}

_QWORD *sub_18BBAC31C(_QWORD *result)
{
  *result = off_1E2246320;
  return result;
}

_QWORD *sub_18BBAC338(_QWORD *result)
{
  *result = &off_1E2246358;
  result[1] = 0;
  return result;
}

void sub_18BBAC348(icu::UObject *this)
{
  icu::UnicodeSet *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2246358;
  v2 = (icu::UnicodeSet *)*((_QWORD *)this + 1);
  if (v2)
  {
    icu::UnicodeSet::~UnicodeSet(v2);
    icu::UMemory::operator delete(v3);
  }
  *((_QWORD *)this + 1) = 0;
  icu::UObject::~UObject(this);
}

void sub_18BBAC38C(icu::UObject *a1)
{
  void *v1;

  sub_18BBAC348(a1);
  icu::UMemory::operator delete(v1);
}

icu::UnicodeSet *sub_18BBAC3A0(uint64_t a1, int a2)
{
  icu::UnicodeSet *result;

  result = *(icu::UnicodeSet **)(a1 + 8);
  if (result)
    return (icu::UnicodeSet *)(icu::UnicodeSet::contains(result, a2) != 0);
  return result;
}

uint64_t sub_18BBAC3C4(uint64_t a1, UText *ut, int a3, int a4, uint64_t a5, uint64_t a6, int *a7)
{
  UChar32 v11;

  if (*a7 <= 0)
  {
    utext_setNativeIndex(ut, a3);
    while (1)
    {
      v11 = utext_current32(ut);
      if ((int)utext_getNativeIndex(ut) >= a4
        || !icu::UnicodeSet::contains(*(icu::UnicodeSet **)(a1 + 8), v11))
      {
        break;
      }
      utext_next32(ut);
    }
  }
  return 0;
}

icu::UnicodeSet *sub_18BBAC444(uint64_t a1, unint64_t a2)
{
  int v2;
  icu::UnicodeSet *v4;
  icu::UnicodeSet *result;
  int32_t IntPropertyValue;
  UErrorCode pErrorCode;

  v2 = a2;
  v4 = *(icu::UnicodeSet **)(a1 + 8);
  if (!v4)
  {
    result = (icu::UnicodeSet *)icu::UMemory::operator new((icu::UMemory *)0xC8, a2);
    if (!result)
    {
      *(_QWORD *)(a1 + 8) = 0;
      return result;
    }
    icu::UnicodeSet::UnicodeSet(result);
    *(_QWORD *)(a1 + 8) = v4;
  }
  result = (icu::UnicodeSet *)icu::UnicodeSet::contains(v4, v2);
  if (!(_DWORD)result)
  {
    pErrorCode = U_ZERO_ERROR;
    IntPropertyValue = u_getIntPropertyValue(v2, UCHAR_SCRIPT);
    return icu::UnicodeSet::applyIntPropertyValue(*(icu::UnicodeSet **)(a1 + 8), 4106, IntPropertyValue, &pErrorCode);
  }
  return result;
}

_QWORD *sub_18BBAC4C0(_QWORD *result)
{
  *result = &off_1E2246398;
  result[1] = 0;
  return result;
}

_QWORD *sub_18BBAC4D0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E2246398;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_18BBAC510(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E2246398;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UMemory::operator delete(a1);
}

void sub_18BBAC550(uint64_t a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  umtx_lock((icu::UMutex *)&unk_1EE009048);
  if (!*(_QWORD *)(a1 + 8))
  {
    v5 = icu::UMemory::operator new((icu::UMemory *)0x28, v4);
    if (v5)
    {
      v6 = icu::UStack::UStack(v5, (uint64_t)uprv_deleteUObject, 0, a2);
      if (*a2 <= 0)
        *(_QWORD *)(a1 + 8) = v6;
      else
        (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    }
    else if (*a2 <= 0)
    {
      *a2 = 7;
    }
  }
  umtx_unlock((std::mutex **)&unk_1EE009048);
}

uint64_t sub_18BBAC5E8(icu::UVector **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  icu::UVector *v11;
  UErrorCode v13;

  v13 = U_ZERO_ERROR;
  sub_18BBAC550((uint64_t)a1, (int *)&v13);
  if (v13 > U_ZERO_ERROR)
    return 0;
  umtx_lock((icu::UMutex *)&unk_1EE009098);
  v7 = *((_DWORD *)a1[1] + 2);
  if (v7 < 1)
  {
LABEL_8:
    v10 = (void *)(*((uint64_t (**)(icu::UVector **, uint64_t, uint64_t))*a1 + 4))(a1, a2, a3);
    if (v10)
    {
      v11 = a1[1];
      if (*((_QWORD *)v11 + 3))
        icu::UVector::adoptElement(v11, v10, &v13);
      else
        icu::UVector::addElement(v11, v10, &v13);
    }
    if (v13 <= U_ZERO_ERROR)
      v6 = (uint64_t)v10;
    else
      v6 = 0;
  }
  else
  {
    v8 = v7 + 1;
    while (1)
    {
      v9 = icu::UVector::elementAt(a1[1], v8 - 2);
      if (v9)
      {
        v6 = v9;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, a2, a3))
          break;
      }
      if (--v8 <= 1)
        goto LABEL_8;
    }
  }
  umtx_unlock((std::mutex **)&unk_1EE009098);
  return v6;
}

uint64_t sub_18BBAC700(uint64_t a1, unsigned int a2)
{
  uint64_t Script;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD *LSTMBreakEngine;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v17 = 0;
  Script = uscript_getScript(a2, &v17);
  if (v17 > 0)
    return 0;
  v6 = Script;
  v7 = CreateLSTMDataForScript(Script, &v17);
  if (v17 <= 0 && v7 != 0)
  {
    v9 = v7;
    LSTMBreakEngine = CreateLSTMBreakEngine(v6, v7, (UErrorCode *)&v17);
    v4 = (uint64_t)LSTMBreakEngine;
    if (v17 <= 0 && LSTMBreakEngine)
      return v4;
    if (LSTMBreakEngine)
      (*(void (**)(_QWORD *))(*LSTMBreakEngine + 8))(LSTMBreakEngine);
    else
      DeleteLSTMData(v9);
  }
  v17 = 0;
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v6);
  if (v4)
  {
    switch((int)v6)
    {
      case 17:
      case 20:
      case 22:
        if (!icu::UMemory::operator new((icu::UMemory *)0x3A0, v11))
          goto LABEL_23;
        goto LABEL_21;
      case 18:
        if (!icu::UMemory::operator new((icu::UMemory *)0x3A0, v11))
          goto LABEL_23;
LABEL_21:
        v13 = sub_18BBB5DFC();
        break;
      case 19:
      case 21:
      case 25:
      case 26:
      case 27:
        goto LABEL_23;
      case 23:
        v14 = icu::UMemory::operator new((icu::UMemory *)0x330, v11);
        if (!v14)
          goto LABEL_23;
        v13 = sub_18BBB55BC(v14, v4, &v17);
        break;
      case 24:
        v15 = icu::UMemory::operator new((icu::UMemory *)0x330, v11);
        if (!v15)
          goto LABEL_23;
        v13 = sub_18BBB4704(v15, v4, &v17);
        break;
      case 28:
        v16 = icu::UMemory::operator new((icu::UMemory *)0x330, v11);
        if (!v16)
          goto LABEL_23;
        v13 = sub_18BBB4E3C(v16, v4, &v17);
        break;
      default:
        if ((_DWORD)v6 != 38)
          goto LABEL_23;
        v12 = icu::UMemory::operator new((icu::UMemory *)0x3F8, v11);
        if (!v12)
          goto LABEL_23;
        v13 = sub_18BBB3DD8(v12, v4, &v17);
        break;
    }
    v4 = v13;
    if (v17 >= 1)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      return 0;
    }
  }
  return v4;
}

char *sub_18BBAC8D0(uint64_t a1, int32_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  char *ShortName;
  const UChar *StringByKeyWithFallback;
  char *v7;
  UChar *v8;
  unint64_t v9;
  _QWORD *v10;
  _OWORD *v11;
  int *Memory;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v21;
  UChar *v22;
  int32_t count;
  UErrorCode v24;
  _BYTE v25[64];
  void *v26[8];
  void *v27[9];

  v27[8] = *(void **)MEMORY[0x1E0C80C00];
  v24 = U_ZERO_ERROR;
  v3 = ures_open("icudt74l-brkitr", "", (int *)&v24);
  v4 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v3, "dictionaries", (uint64_t)v3, &v24);
  count = 0;
  ShortName = (char *)uscript_getShortName(a2);
  StringByKeyWithFallback = ures_getStringByKeyWithFallback((uint64_t)v4, ShortName, &count, &v24);
  if (v24 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    ures_close(v4);
    return 0;
  }
  v7 = (char *)StringByKeyWithFallback;
  memset(&v27[1], 0, 56);
  v27[0] = (char *)&v27[1] + 5;
  LODWORD(v27[1]) = 40;
  memset(&v26[1], 0, 56);
  v26[0] = (char *)&v26[1] + 5;
  LODWORD(v26[1]) = 40;
  v8 = u_memrchr(StringByKeyWithFallback, 0x2Eu, count);
  if (v8)
  {
    v9 = (unint64_t)((char *)v8 - v7) >> 1;
    v22 = v8 + 1;
    icu::UnicodeString::UnicodeString(v25, 0, &v22);
    icu::CharString::appendInvariantChars((icu::CharString *)v26, (const icu::UnicodeString *)v25, &v24);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v25);
    count = v9;
  }
  v21 = v7;
  icu::UnicodeString::UnicodeString(v25, 0, &v21);
  icu::CharString::appendInvariantChars((icu::CharString *)v27, (const icu::UnicodeString *)v25, &v24);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v25);
  ures_close(v4);
  v10 = udata_open("icudt74l-brkitr", (const char *)v26[0], (const char *)v27[0], &v24);
  if (v24 > U_ZERO_ERROR)
  {
    if (v7)
    {
      v7 = 0;
      v24 = U_ZERO_ERROR;
    }
    goto LABEL_15;
  }
  v11 = v10;
  Memory = (int *)udata_getMemory((uint64_t)v10);
  v14 = Memory;
  v15 = *Memory;
  v16 = Memory[4] & 7;
  if (v16)
  {
    if (v16 == 1)
    {
      v19 = (char *)icu::UMemory::operator new((icu::UMemory *)0x18, v13);
      if (v19)
      {
        v7 = v19;
        *(_QWORD *)v19 = off_1E2246B68;
        *((_QWORD *)v19 + 1) = (char *)v14 + v15;
        *((_QWORD *)v19 + 2) = v11;
        goto LABEL_15;
      }
    }
LABEL_14:
    udata_close(v11);
    v7 = 0;
    goto LABEL_15;
  }
  v17 = Memory[5];
  v18 = icu::UMemory::operator new((icu::UMemory *)0x20, v13);
  if (!v18)
    goto LABEL_14;
  v7 = (char *)v18;
  *(_QWORD *)v18 = off_1E2246B98;
  *(_QWORD *)(v18 + 8) = (char *)v14 + v15;
  *(_DWORD *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = v11;
LABEL_15:
  if (BYTE4(v26[1]))
    uprv_free(v26[0]);
  if (BYTE4(v27[1]))
    uprv_free(v27[0]);
  return v7;
}

void sub_18BBACBAC(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  int v10;
  icu::UVector *v11;

  if (!a2 && *a3 <= 0)
    *a3 = 7;
  sub_18BBAC550(a1, a3);
  v7 = (_QWORD *)icu::UMemory::operator new((icu::UMemory *)0x10, v6);
  v8 = v7;
  if (v7)
  {
    v9 = 0;
    *v7 = off_1E22463D8;
    v7[1] = a2;
    if (a2)
      goto LABEL_10;
    v10 = *a3;
  }
  else
  {
    v10 = *a3;
    v9 = a2;
  }
  if (v10 <= 0)
    *a3 = 7;
LABEL_10:
  umtx_lock((icu::UMutex *)&unk_1EE0090E8);
  v11 = *(icu::UVector **)(a1 + 8);
  if (*((_QWORD *)v11 + 3))
    icu::UVector::adoptElement(v11, v8, (UErrorCode *)a3);
  else
    icu::UVector::addElement(v11, v8, (UErrorCode *)a3);
  umtx_unlock((std::mutex **)&unk_1EE0090E8);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

void sub_18BBACCAC(icu::UObject *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E22463D8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UObject::~UObject(this);
}

void sub_18BBACCEC(icu::UObject *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E22463D8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v3);
}

uint64_t sub_18BBACD30(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_18BBACD50(uint64_t a1, UText *ut, int a3, int a4, uint64_t a5, uint64_t a6, UErrorCode *a7)
{
  int64_t NativeIndex;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  if (*(int *)a7 > 0)
    return 0;
  utext_setNativeIndex(ut, a3);
  NativeIndex = utext_getNativeIndex(ut);
  while (1)
  {
    v13 = utext_current32(ut);
    v14 = utext_getNativeIndex(ut);
    if ((int)v14 >= a4
      || !(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v13))
    {
      break;
    }
    utext_next32(ut);
  }
  v15 = *(int *)(a5 + 8);
  v16 = (v14 - NativeIndex + 1);
  v17 = v15 + v16;
  if ((int)v15 + (int)v16 < 0 || *(_DWORD *)(a5 + 12) < v17)
    icu::UVector32::expandCapacity((icu::UVector32 *)a5, v17, a7);
  if (*(int *)a7 > 0)
    return 0;
  icu::UVector32::setSize((icu::UVector32 *)a5, v16 + 2 * v15);
  v18 = (*(uint64_t (**)(_QWORD, UText *, int64_t, int64_t, uint64_t, uint64_t, UErrorCode *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), ut, NativeIndex, v14, *(_QWORD *)(a5 + 24) + 4 * v15, v16, a7);
  if (*(int *)a7 > 0)
    return 0;
  v19 = v18;
  icu::UVector32::setSize((icu::UVector32 *)a5, v18 + v15);
  utext_setNativeIndex(ut, (int)v14);
  return v19;
}

char *icu::BreakIterator::buildInstance(char **this, const icu::Locale *a2, char *a3, UErrorCode *a4)
{
  char *v4;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  const UChar *String;
  int v15;
  _OWORD *v16;
  char v17;
  const char *LocaleByType;
  const UChar *v20;
  const char *LocaleInternal;
  UChar *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  char v27[8];
  _OWORD v28[8];
  uint64_t v29;
  _BYTE v30[128];
  uint64_t v31;
  char *__src[8];
  char v33[16];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v4 = 0;
  v49 = *MEMORY[0x1E0C80C00];
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  *(_OWORD *)v33 = 0u;
  v34 = 0u;
  *(_QWORD *)v27 = 0;
  memset(&__src[1], 0, 56);
  __src[0] = (char *)&__src[1] + 5;
  LODWORD(__src[1]) = 40;
  v31 = 0;
  memset(v30, 0, sizeof(v30));
  v29 = 0;
  memset(v28, 0, sizeof(v28));
  if (*(int *)a3 <= 0)
  {
    v8 = v30;
    ures_initStackObject((uint64_t)v30);
    v9 = v28;
    ures_initStackObject((uint64_t)v28);
    v10 = ures_openNoDefault("icudt74l-brkitr", this[5], (int *)a3);
    v11 = v10;
    if (*(int *)a3 <= 0)
    {
      v8 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v10, "boundaries", (uint64_t)v30, (UErrorCode *)a3);
      v9 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v8, (char *)a2, (uint64_t)v28, (UErrorCode *)a3);
      String = ures_getString((uint64_t)v9, (int *)v27, (int *)a3);
      v15 = *(_DWORD *)a3;
      if (*(_DWORD *)v27 < 0x100u)
      {
        if (v15 <= 0)
        {
          v20 = String;
          if (String)
          {
            LocaleInternal = (const char *)ures_getLocaleInternal((uint64_t)v9, (int *)a3);
            icu::CharString::append((icu::CharString *)__src, LocaleInternal, -1, (UErrorCode *)a3);
            v22 = u_strchr(v20, 0x2Eu);
            if (v22)
            {
              v23 = (char *)v22 - (char *)v20;
              v24 = (unint64_t)((char *)v22 - (char *)v20) >> 1;
              u_UCharsToChars(v22 + 1, &v27[4], 4);
              u_UCharsToChars(v20, v33, v24);
              v25 = (int)(v23 >> 1);
            }
            else
            {
              v25 = 0;
            }
            v33[v25] = 0;
          }
        }
      }
      else
      {
        *(_DWORD *)v27 = 0;
        if (v15 <= 0)
          *(_DWORD *)a3 = 15;
      }
    }
    ures_close(v8);
    ures_close(v9);
    v12 = udata_open("icudt74l-brkitr", &v27[4], v33, (UErrorCode *)a3);
    if (*(int *)a3 >= 1)
    {
      ures_close(v11);
LABEL_14:
      v4 = 0;
      goto LABEL_15;
    }
    v16 = v12;
    v4 = (char *)icu::UMemory::operator new((icu::UMemory *)0x310, v13);
    if (v4)
    {
      v17 = strstr((char *)a2, "phrase") != 0;
      icu::RuleBasedBreakIterator::RuleBasedBreakIterator((icu::RuleBasedBreakIterator *)v4, (uint64_t)v16, v17, (UErrorCode *)a3);
      if (*(int *)a3 <= 0)
      {
        v26[0] = v4 + 169;
        v26[1] = v4 + 12;
        LocaleByType = (const char *)ures_getLocaleByType((uint64_t)v11, 1, (int *)a3);
        icu::LocaleBased::setLocaleIDs((char *)v26, LocaleByType, __src[0]);
        strncpy(v4 + 326, this[5], 0x9DuLL);
        v4[482] = 0;
      }
    }
    ures_close(v11);
    if (v4 && *(int *)a3 >= 1)
    {
      (*(void (**)(char *))(*(_QWORD *)v4 + 8))(v4);
      goto LABEL_14;
    }
    if (!v4)
    {
      udata_close(v16);
      if (*(int *)a3 > 0)
        goto LABEL_14;
      v4 = 0;
      *(_DWORD *)a3 = 7;
    }
  }
LABEL_15:
  if (BYTE4(__src[1]))
    uprv_free(__src[0]);
  return v4;
}

char *icu::BreakIterator::createWordInstance(char **this, const icu::Locale *a2, UErrorCode *a3, UErrorCode *a4)
{
  if (*(int *)a2 <= 0)
    return icu::BreakIterator::makeInstance(this, (const icu::Locale *)1, (char *)a2, a4);
  else
    return 0;
}

char *icu::BreakIterator::createInstance(char **this, const icu::Locale *a2, char *a3, UErrorCode *a4)
{
  if (*(int *)a3 <= 0)
    return icu::BreakIterator::makeInstance(this, a2, a3, a4);
  else
    return 0;
}

char *icu::BreakIterator::createLineInstance(char **this, const icu::Locale *a2, UErrorCode *a3, UErrorCode *a4)
{
  if (*(int *)a2 <= 0)
    return icu::BreakIterator::makeInstance(this, (const icu::Locale *)2, (char *)a2, a4);
  else
    return 0;
}

char *icu::BreakIterator::createCharacterInstance(char **this, const icu::Locale *a2, UErrorCode *a3, UErrorCode *a4)
{
  if (*(int *)a2 <= 0)
    return icu::BreakIterator::makeInstance(this, 0, (char *)a2, a4);
  else
    return 0;
}

char *icu::BreakIterator::createSentenceInstance(char **this, const icu::Locale *a2, UErrorCode *a3, UErrorCode *a4)
{
  if (*(int *)a2 <= 0)
    return icu::BreakIterator::makeInstance(this, (const icu::Locale *)3, (char *)a2, a4);
  else
    return 0;
}

char *icu::BreakIterator::createTitleInstance(char **this, const icu::Locale *a2, UErrorCode *a3, UErrorCode *a4)
{
  if (*(int *)a2 <= 0)
    return icu::BreakIterator::makeInstance(this, (const icu::Locale *)4, (char *)a2, a4);
  else
    return 0;
}

uint64_t icu::BreakIterator::BreakIterator(uint64_t this)
{
  *(_QWORD *)this = off_1E2246488;
  *(_DWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 326) = 0;
  *(_BYTE *)(this + 12) = 0;
  *(_BYTE *)(this + 169) = 0;
  return this;
}

icu::BreakIterator *icu::BreakIterator::BreakIterator(icu::BreakIterator *this, const icu::BreakIterator *a2)
{
  char *v4;

  *(_QWORD *)this = off_1E2246488;
  v4 = (char *)this + 169;
  strncpy((char *)this + 12, (const char *)a2 + 12, 0x9DuLL);
  strncpy(v4, (const char *)a2 + 169, 0x9DuLL);
  strncpy((char *)this + 326, (const char *)a2 + 326, 0x9DuLL);
  return this;
}

char *icu::BreakIterator::operator=(char *a1, const char *a2)
{
  if (a1 != a2)
  {
    strncpy(a1 + 12, a2 + 12, 0x9DuLL);
    strncpy(a1 + 169, a2 + 169, 0x9DuLL);
    strncpy(a1 + 326, a2 + 326, 0x9DuLL);
  }
  return a1;
}

char *icu::BreakIterator::makeInstance(char **this, const icu::Locale *a2, char *a3, UErrorCode *a4)
{
  char *result;
  const char *v7;
  const char *v8;
  char *v9;
  int KeywordValue;
  UErrorCode *v11;
  _QWORD *Instance;
  _QWORD *v13;
  UErrorCode *v14;
  char *v15;
  int v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *__s2;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  _QWORD v35[2];
  int v36;
  _BYTE v37[224];
  _BYTE v38[40];
  __int128 v39;
  uint64_t v40;
  char __s[5];
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[11];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 > 0)
    return 0;
  switch((int)a2)
  {
    case 0:
      v7 = "grapheme";
      goto LABEL_10;
    case 1:
      v7 = "word";
      goto LABEL_10;
    case 2:
      v43 = 0;
      v42 = 0;
      memset(v44, 0, sizeof(v44));
      strcpy(__s, "line");
      v36 = 0;
      memset(&v38[8], 0, 32);
      v40 = 0;
      v39 = 0u;
      *(_QWORD *)v38 = &v38[13];
      *(_DWORD *)&v38[8] = 40;
      v35[0] = 0;
      v35[1] = 0;
      icu::CharStringByteSink::CharStringByteSink(v35, (uint64_t)v38);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v33, "lb");
      icu::Locale::getKeywordValue((uint64_t)this, v33, v34, (uint64_t)v35, (UErrorCode *)&v36);
      if (v36 < 1)
      {
        icu::StringPiece::StringPiece((icu::StringPiece *)&__s2, "strict");
        if ((_DWORD)v40 == (_DWORD)v32
          && ((v8 = *(const char **)v38, !(_DWORD)v32) || !memcmp(*(const void **)v38, __s2, (int)v32))
          || (icu::StringPiece::StringPiece((icu::StringPiece *)&v29, "normal"), (_DWORD)v40 == (_DWORD)v30)
          && ((v8 = *(const char **)v38, !(_DWORD)v30) || !memcmp(*(const void **)v38, v29, (int)v30))
          || (icu::StringPiece::StringPiece((icu::StringPiece *)&v27, "loose"),
              v8 = *(const char **)v38,
              (_DWORD)v40 == (_DWORD)v28)
          && (!(_DWORD)v28 || !memcmp(*(const void **)v38, v27, (int)v28)))
        {
          *(_WORD *)&__s[strlen(__s)] = 95;
          strcat(__s, v8);
        }
      }
      else
      {
        v8 = *(const char **)v38;
      }
      LODWORD(v40) = 0;
      *v8 = 0;
      v36 = 0;
      icu::StringPiece::StringPiece((icu::StringPiece *)&v25, "lw");
      icu::Locale::getKeywordValue((uint64_t)this, v25, v26, (uint64_t)v35, (UErrorCode *)&v36);
      if (v36 <= 0)
      {
        icu::StringPiece::StringPiece((icu::StringPiece *)&v23, "phrase");
        if ((_DWORD)v40 == (_DWORD)v24
          && (!(_DWORD)v24 || !memcmp(*(const void **)v38, v23, (int)v24))
          && (!(*((unsigned __int16 *)this + 4) ^ 0x616A | *((unsigned __int8 *)this + 10))
           || !(*((unsigned __int16 *)this + 4) ^ 0x6F6B | *((unsigned __int8 *)this + 10))))
        {
          *(_WORD *)&__s[strlen(__s)] = 95;
          strcat(__s, *(const char **)v38);
        }
      }
      v15 = icu::BreakIterator::buildInstance(this, (const icu::Locale *)__s, a3, v14);
      v9 = v15;
      if (*(int *)a3 > 0 || !v15)
        goto LABEL_53;
      if (v36 > 0)
        goto LABEL_40;
      icu::StringPiece::StringPiece((icu::StringPiece *)&v21, "keepall");
      if ((_DWORD)v40 == (_DWORD)v22 && (!(_DWORD)v22 || !memcmp(*(const void **)v38, v21, (int)v22))
        || (icu::StringPiece::StringPiece((icu::StringPiece *)&v19, "keep-all"), (_DWORD)v40 == (_DWORD)v20)
        && (!(_DWORD)v20 || !memcmp(*(const void **)v38, v19, (int)v20)))
      {
        v16 = 127;
      }
      else
      {
        icu::StringPiece::StringPiece((icu::StringPiece *)&v17, "keep-hangul");
        if ((_DWORD)v40 == (_DWORD)v18 && (!(_DWORD)v18 || !memcmp(*(const void **)v38, v17, (int)v18)))
          v16 = 1;
        else
LABEL_40:
          v16 = 0;
      }
      *((_DWORD *)v9 + 2) = v16;
      icu::Locale::Locale((icu::Locale *)v37, (uint64_t)this);
      (*(void (**)(char *, _BYTE *))(*(_QWORD *)v9 + 208))(v9, v37);
      icu::Locale::~Locale((icu::Locale *)v37);
LABEL_53:
      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v35);
      if (v38[12])
        uprv_free(*(void **)v38);
LABEL_11:
      if (*(int *)a3 >= 1)
        result = 0;
      else
        result = v9;
      break;
    case 3:
      v9 = icu::BreakIterator::buildInstance(this, (const icu::Locale *)"sentence", a3, a4);
      memset(v38, 0, 32);
      *(_DWORD *)__s = 0;
      KeywordValue = icu::Locale::getKeywordValue(this, "ss", v38, 32, (UErrorCode *)__s);
      if (*(int *)__s <= 0 && KeywordValue >= 1 && !(*(_QWORD *)v38 ^ 0x647261646E617473 | v38[8]))
      {
        Instance = icu::FilteredBreakIteratorBuilder::createInstance((icu::FilteredBreakIteratorBuilder *)this, (const icu::Locale *)__s, v11);
        if (*(int *)__s <= 0)
        {
          v13 = Instance;
          v9 = (char *)(*(uint64_t (**)(_QWORD *, char *, char *))(*Instance + 40))(Instance, v9, a3);
          (*(void (**)(_QWORD *))(*v13 + 8))(v13);
        }
      }
      goto LABEL_11;
    case 4:
      v7 = "title";
LABEL_10:
      v9 = icu::BreakIterator::buildInstance(this, (const icu::Locale *)v7, a3, a4);
      goto LABEL_11;
    default:
      v9 = 0;
      *(_DWORD *)a3 = 1;
      goto LABEL_11;
  }
  return result;
}

uint64_t icu::BreakIterator::getLocale@<X0>(const char *a1@<X0>, int a2@<W1>, int *a3@<X2>, icu::Locale *a4@<X8>)
{
  const char *v4;
  const char *v5;
  const char *v7[4];

  if (a2 == 2)
    return icu::Locale::Locale(a4, a1 + 326, 0, 0, 0);
  v7[2] = v4;
  v7[3] = v5;
  v7[0] = a1 + 169;
  v7[1] = a1 + 12;
  return icu::LocaleBased::getLocale(v7, a2, a3, a4);
}

uint64_t icu::BreakIterator::getLocaleID(uint64_t a1, int a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];

  if (a2 == 2)
    return a1 + 326;
  v6[2] = v3;
  v6[3] = v4;
  v6[0] = a1 + 169;
  v6[1] = a1 + 12;
  return icu::LocaleBased::getLocaleID(v6, a2, a3);
}

uint64_t icu::BreakIterator::getRuleStatus(icu::BreakIterator *this)
{
  return 0;
}

uint64_t icu::BreakIterator::getRuleStatusVec(icu::BreakIterator *this, int *a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0)
    return 0;
  if (a3 <= 0)
    *a4 = U_BUFFER_OVERFLOW_ERROR;
  else
    *a2 = 0;
  return 1;
}

icu::BreakIterator *icu::BreakIterator::BreakIterator(icu::BreakIterator *this, const icu::Locale *a2, const icu::Locale *a3)
{
  char *v5[2];

  *(_QWORD *)this = off_1E2246488;
  v5[0] = (char *)this + 169;
  v5[1] = (char *)this + 12;
  icu::LocaleBased::setLocaleIDs(v5, (uint64_t)a2, (uint64_t)a3);
  return this;
}

uint64_t icu::ByteSinkUtil::appendChange(int a1, uint64_t a2, int a3, uint64_t a4, _DWORD *a5, int *a6)
{
  uint64_t result;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  __int16 v24;
  unsigned int v25;
  int v29;
  _OWORD v30[12];
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (*a6 > 0)
    return 0;
  v31 = 0;
  memset(v30, 0, sizeof(v30));
  if (a3 >= 1)
  {
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v29 = 0;
      v12 = 2 * (a3 - v10);
      if (a3 - v10 >= 0x3FFFFFFF)
        v12 = 0x7FFFFFFF;
      v13 = a3 - v10 >= 715827882 ? v12 : (3 * (a3 - v10));
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, int *))(*(_QWORD *)a4 + 24))(a4, 4, v13, v30, 200, &v29);
      v15 = v29;
      v29 -= 3;
      if (v15 >= 4)
        break;
      v16 = 0;
LABEL_26:
      if ((int)v16 > (v11 ^ 0x7FFFFFFF))
      {
        result = 0;
        *a6 = 8;
        return result;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, v14, v16);
      v11 += v16;
      if (v10 >= a3)
        goto LABEL_30;
    }
    LODWORD(v16) = 0;
    while (1)
    {
      v17 = v10 + 1;
      v18 = *(unsigned __int16 *)(a2 + 2 * v10);
      if ((v18 & 0xFC00) == 0xD800)
        break;
      if (v18 <= 0x7F)
      {
        v23 = v16;
        v16 = (v16 + 1);
        v24 = *(_WORD *)(a2 + 2 * v10);
        goto LABEL_22;
      }
      if (v18 > 0x7FF)
        goto LABEL_19;
      v25 = (v18 >> 6) | 0xFFFFFFC0;
LABEL_21:
      *(_BYTE *)(v14 + (int)v16) = v25;
      v23 = v16 + 1;
      LOBYTE(v24) = v18 & 0x3F | 0x80;
      v16 = (v16 + 2);
LABEL_22:
      v10 = v17;
      *(_BYTE *)(v14 + v23) = v24;
      if ((int)v17 >= a3 || (int)v16 >= v29)
        goto LABEL_26;
    }
    v19 = *(unsigned __int16 *)(a2 + 2 * v17);
    LODWORD(v17) = v10 + 2;
    v18 = v19 + (v18 << 10) - 56613888;
    if (HIWORD(v18))
    {
      v20 = v16 + 1;
      *(_BYTE *)(v14 + (int)v16) = (v18 >> 18) | 0xF0;
      v21 = (v18 >> 12) & 0x3F | 0xFFFFFF80;
      v22 = 2;
    }
    else
    {
LABEL_19:
      v21 = (v18 >> 12) | 0xFFFFFFE0;
      v22 = 1;
      v20 = v16;
    }
    LODWORD(v16) = v16 + v22;
    *(_BYTE *)(v14 + v20) = v21;
    v25 = (v18 >> 6) & 0x3F | 0xFFFFFF80;
    goto LABEL_21;
  }
  v11 = 0;
LABEL_30:
  if (a5)
    icu::Edits::addReplace(a5, a1, v11);
  return 1;
}

uint64_t icu::ByteSinkUtil::appendChange(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, _DWORD *a6, int *a7)
{
  uint64_t v7;

  if (*a7 > 0)
    return 0;
  v7 = a2 - a1;
  if (v7 >= 0x80000000)
  {
    *a7 = 8;
    return 0;
  }
  return icu::ByteSinkUtil::appendChange(v7, a3, a4, a5, a6, a7);
}

uint64_t icu::ByteSinkUtil::appendCodePoint(icu::ByteSinkUtil *this, unsigned int a2, uint64_t a3, icu::ByteSink *a4, icu::Edits *a5)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v11;

  v11 = 0;
  if (a2 <= 0x7F)
  {
    LOBYTE(v11) = a2;
    v6 = 1;
    if (!a4)
      return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a3 + 16))(a3, &v11, v6);
    goto LABEL_11;
  }
  if (a2 > 0x7FF)
  {
    if (HIWORD(a2))
    {
      v8 = (a2 >> 18) | 0xFFFFFFF0;
      BYTE1(v11) = (a2 >> 12) & 0x3F | 0x80;
      v9 = 2;
    }
    else
    {
      v8 = (a2 >> 12) | 0xFFFFFFE0;
      v9 = 1;
    }
    LOBYTE(v11) = v8;
    v7 = v9 + 1;
    *(_BYTE *)((unint64_t)&v11 | v9) = (a2 >> 6) & 0x3F | 0x80;
  }
  else
  {
    LOBYTE(v11) = (a2 >> 6) | 0xC0;
    v7 = 1;
  }
  v6 = v7 + 1;
  *((_BYTE *)&v11 + v7) = a2 & 0x3F | 0x80;
  if (a4)
LABEL_11:
    icu::Edits::addReplace(a4, (int)this, v6);
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a3 + 16))(a3, &v11, v6);
}

uint64_t icu::ByteSinkUtil::appendTwoBytes(unsigned int a1, uint64_t a2)
{
  _BYTE v3[2];

  v3[0] = (a1 >> 6) | 0xC0;
  v3[1] = a1 & 0x3F | 0x80;
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v3, 2);
}

_DWORD *icu::ByteSinkUtil::appendNonEmptyUnchanged(_DWORD *this, const unsigned __int8 *a2, uint64_t a3, icu::ByteSink *a4, icu::Edits *a5, icu::Edits *a6)
{
  __int16 v6;
  _DWORD *v9;

  v6 = (__int16)a4;
  v9 = this;
  if (a5)
    this = icu::Edits::addUnchanged(a5, a2);
  if ((v6 & 0x4000) == 0)
    return (_DWORD *)(*(uint64_t (**)(uint64_t, _DWORD *, const unsigned __int8 *))(*(_QWORD *)a3 + 16))(a3, v9, a2);
  return this;
}

uint64_t icu::ByteSinkUtil::appendUnchanged(icu::ByteSinkUtil *this, const unsigned __int8 *a2, const unsigned __int8 *a3, icu::ByteSink *a4, icu::Edits *a5, icu::Edits *a6, UErrorCode *a7)
{
  uint64_t result;
  uint64_t v9;
  __int16 v10;

  if (*(int *)a6 > 0)
    return 0;
  v9 = a2 - (const unsigned __int8 *)this;
  if (a2 - (const unsigned __int8 *)this < 0x80000000)
  {
    if ((int)v9 >= 1)
    {
      v10 = (__int16)a4;
      if (a5)
        icu::Edits::addUnchanged(a5, v9);
      if ((v10 & 0x4000) == 0)
        (*(void (**)(const unsigned __int8 *, icu::ByteSinkUtil *, uint64_t))(*(_QWORD *)a3 + 16))(a3, this, v9);
    }
    return 1;
  }
  else
  {
    result = 0;
    *(_DWORD *)a6 = 8;
  }
  return result;
}

_QWORD *icu::CharStringByteSink::CharStringByteSink(_QWORD *result, uint64_t a2)
{
  *result = off_1E2246568;
  result[1] = a2;
  return result;
}

{
  *result = off_1E2246568;
  result[1] = a2;
  return result;
}

void icu::CharStringByteSink::~CharStringByteSink(icu::CharStringByteSink *this)
{
  void *v1;

  icu::ByteSink::~ByteSink(this);
  icu::UMemory::operator delete(v1);
}

icu::CharString *icu::CharStringByteSink::Append(icu::CharString **this, const char *a2, int a3)
{
  UErrorCode v4;

  v4 = U_ZERO_ERROR;
  return icu::CharString::append(this[1], a2, a3, &v4);
}

char *icu::CharStringByteSink::GetAppendBuffer(icu::CharString **this, int a2, int a3, char *a4, int a5, int *a6)
{
  uint64_t AppendBuffer;
  UErrorCode v11;

  if (a2 < 1 || a5 < a2)
  {
    a4 = 0;
    *a6 = 0;
  }
  else
  {
    v11 = U_ZERO_ERROR;
    AppendBuffer = icu::CharString::getAppendBuffer(this[1], a2, a3, a6, &v11);
    if (v11 < U_ILLEGAL_ARGUMENT_ERROR)
      return (char *)AppendBuffer;
    else
      *a6 = a5;
  }
  return a4;
}

char *icu::ByteSink::GetAppendBuffer(icu::ByteSink *this, int a2, int a3, char *a4, int a5, int *a6)
{
  _BOOL4 v7;
  BOOL v8;
  int v9;
  char *result;

  v7 = a2 < 1 || a5 < a2;
  v8 = !v7;
  if (v7)
    v9 = 0;
  else
    v9 = a5;
  if (v8)
    result = a4;
  else
    result = 0;
  *a6 = v9;
  return result;
}

uint64_t icu::CheckedArrayByteSink::CheckedArrayByteSink(uint64_t this, char *a2, int a3)
{
  *(_QWORD *)this = off_1E22465B8;
  *(_QWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 16) = a3 & ~(a3 >> 31);
  *(_QWORD *)(this + 20) = 0;
  *(_BYTE *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1E22465B8;
  *(_QWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 16) = a3 & ~(a3 >> 31);
  *(_QWORD *)(this + 20) = 0;
  *(_BYTE *)(this + 28) = 0;
  return this;
}

uint64_t icu::CheckedArrayByteSink::Reset(uint64_t this)
{
  *(_BYTE *)(this + 28) = 0;
  *(_QWORD *)(this + 20) = 0;
  return this;
}

char *icu::CheckedArrayByteSink::Append(char *this, char *a2, size_t __n)
{
  unsigned int v3;
  char *v4;
  int v5;
  int v6;
  int v7;

  if ((int)__n >= 1)
  {
    v3 = __n;
    v4 = this;
    v5 = *((_DWORD *)this + 6);
    if ((v5 ^ 0x7FFFFFFFu) >= __n)
    {
      *((_DWORD *)this + 6) = v5 + __n;
      v6 = *((_DWORD *)this + 5);
      v7 = *((_DWORD *)this + 4) - v6;
      if (v7 < (int)__n && (this[28] = 1, v3 = v7, v7 < 1))
      {
        v3 = v7;
      }
      else
      {
        this = (char *)(*((_QWORD *)this + 1) + v6);
        if (this != a2)
        {
          this = (char *)memcpy(this, a2, v3);
          v6 = *((_DWORD *)v4 + 5);
        }
      }
      *((_DWORD *)v4 + 5) = v6 + v3;
    }
    else
    {
      *((_DWORD *)this + 6) = 0x7FFFFFFF;
      this[28] = 1;
    }
  }
  return this;
}

char *icu::CheckedArrayByteSink::GetAppendBuffer(icu::CheckedArrayByteSink *this, int a2, int a3, char *a4, int a5, int *a6)
{
  int v6;

  if (a2 < 1 || a5 < a2)
  {
    a4 = 0;
    *a6 = 0;
  }
  else
  {
    v6 = *((_DWORD *)this + 4) - *((_DWORD *)this + 5);
    if (v6 >= a2)
    {
      *a6 = v6;
      return (char *)(*((_QWORD *)this + 1) + *((int *)this + 5));
    }
    else
    {
      *a6 = a5;
    }
  }
  return a4;
}

void icu::BytesTrie::~BytesTrie(void **this)
{
  uprv_free(*this);
}

{
  uprv_free(*this);
}

uint64_t icu::BytesTrie::readValue(icu::BytesTrie *this, const unsigned __int8 *a2)
{
  int v3;
  int v4;
  unsigned int v5;

  if ((int)a2 <= 80)
    return ((_DWORD)a2 - 16);
  if (a2 <= 0x6B)
    return (*(unsigned __int8 *)this | ((_DWORD)a2 << 8)) - 20736;
  if (a2 <= 0x7D)
    return ((*(unsigned __int8 *)this << 8) | ((_DWORD)a2 << 16) | *((unsigned __int8 *)this + 1))
         - 7077888;
  v3 = *(unsigned __int8 *)this;
  v4 = *((unsigned __int8 *)this + 1);
  v5 = *((unsigned __int8 *)this + 2);
  if ((_DWORD)a2 == 126)
    return (v3 << 16) | (v4 << 8) | v5;
  else
    return (v3 << 24) | (v4 << 16) | (v5 << 8) | *((unsigned __int8 *)this + 3);
}

char *icu::BytesTrie::jumpByDelta(icu::BytesTrie *this, const unsigned __int8 *a2)
{
  unsigned int v2;
  char *v3;
  int v4;
  int v5;
  int v6;

  v3 = (char *)this + 1;
  v2 = *(unsigned __int8 *)this;
  if (v2 >= 0xC0)
  {
    if (v2 > 0xEF)
    {
      if (v2 > 0xFD)
      {
        v4 = *((unsigned __int8 *)this + 1);
        v5 = *((unsigned __int8 *)this + 2);
        v6 = *((unsigned __int8 *)this + 3);
        if (v2 == 254)
        {
          v2 = (v4 << 16) | (v5 << 8) | v6;
          v3 = (char *)this + 4;
        }
        else
        {
          v2 = (v4 << 24) | (v5 << 16) | (v6 << 8) | *((unsigned __int8 *)this + 4);
          v3 = (char *)this + 5;
        }
      }
      else
      {
        v2 = ((*((unsigned __int8 *)this + 1) << 8) | (v2 << 16) | *((unsigned __int8 *)this + 2)) - 15728640;
        v3 = (char *)this + 3;
      }
    }
    else
    {
      v3 = (char *)this + 2;
      v2 = (*((unsigned __int8 *)this + 1) | (v2 << 8)) - 49152;
    }
  }
  return &v3[v2];
}

uint64_t icu::BytesTrie::current(icu::BytesTrie *this)
{
  unsigned __int8 *v1;
  unsigned int v2;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 2);
  if (!v1)
    return 0;
  if ((*((_DWORD *)this + 6) & 0x80000000) != 0)
  {
    v2 = *v1;
    if (v2 >= 0x20)
      return v2 & 1 ^ 3;
  }
  return 1;
}

uint64_t icu::BytesTrie::branchNext(icu::BytesTrie *this, const unsigned __int8 *a2, int a3, int a4)
{
  int v6;
  int v7;
  unsigned int v8;
  const unsigned __int8 *v9;
  unsigned int v10;
  const unsigned __int8 *v11;
  int v12;
  const unsigned __int8 *v13;
  const unsigned __int8 *v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  const unsigned __int8 *v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t result;
  unsigned int v23;
  unsigned int v24;
  const unsigned __int8 *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;

  if (!a3)
  {
    v6 = *a2++;
    a3 = v6;
  }
  v7 = a3 + 1;
  if (a3 < 5)
  {
    v9 = a2;
  }
  else
  {
    do
    {
      v8 = v7 >> 1;
      if (*a2 <= a4)
      {
        v7 -= v8;
        v9 = a2 + 2;
        v10 = a2[1];
        if (v10 >= 0xC0)
        {
          v11 = &v9[(v10 & 1) + 3];
          if (v10 <= 0xFD)
            v11 = a2 + 4;
          if (v10 <= 0xEF)
            v9 = a2 + 3;
          else
            v9 = v11;
        }
      }
      else
      {
        v9 = (const unsigned __int8 *)icu::BytesTrie::jumpByDelta((icu::BytesTrie *)(a2 + 1), a2);
        v7 = v8;
      }
      a2 = v9;
    }
    while (v7 > 5);
  }
  v12 = v7 + 1;
  while (1)
  {
    v13 = v9;
    v14 = v9 + 1;
    if (*v9 == a4)
      break;
    v9 += 2;
    v15 = v13[1];
    if (v15 >= 0xA2)
    {
      if (v15 > 0xD7)
      {
        v16 = v15 > 0xFB;
        v17 = (uint64_t)&v9[((v15 >> 1) & 1) + 3];
        v18 = v13 + 4;
        if (v16)
          v9 = (const unsigned __int8 *)v17;
        else
          v9 = v18;
      }
      else
      {
        v9 = v13 + 3;
      }
    }
    if (--v12 <= 2)
    {
      if (*v9 == a4)
      {
        *((_QWORD *)this + 2) = v9 + 1;
        v19 = v9[1];
        v20 = v19 >= 0x20;
        v21 = v19 & 1 ^ 3;
        if (v20)
          return v21;
        else
          return 1;
      }
      else
      {
        result = 0;
        *((_QWORD *)this + 2) = 0;
      }
      return result;
    }
  }
  v23 = *v14;
  if ((v23 & 1) != 0)
  {
    result = 2;
  }
  else
  {
    v24 = v23 >> 1;
    if (v23 > 0xA1)
    {
      if (v23 > 0xD7)
      {
        if (v23 > 0xFB)
        {
          v27 = v9[2];
          v28 = v9[3];
          v29 = v9[4];
          if (v24 == 126)
          {
            v26 = (v27 << 16) | (v28 << 8) | v29;
            v25 = v9 + 5;
          }
          else
          {
            v26 = (v27 << 24) | (v28 << 16) | (v29 << 8) | v9[5];
            v25 = v9 + 6;
          }
        }
        else
        {
          v26 = ((v9[2] << 8) | (v24 << 16) | v9[3]) - 7077888;
          v25 = v9 + 4;
        }
      }
      else
      {
        v25 = v9 + 3;
        v26 = (v9[2] | (v24 << 8)) - 20736;
      }
    }
    else
    {
      v25 = v9 + 2;
      v26 = v24 - 16;
    }
    v14 = &v25[v26];
    v30 = *v14;
    if (v30 < 0x20)
      result = 1;
    else
      result = v30 & 1 ^ 3;
  }
  *((_QWORD *)this + 2) = v14;
  return result;
}

uint64_t icu::BytesTrie::nextImpl(icu::BytesTrie *this, const unsigned __int8 *a2, int a3)
{
  const unsigned __int8 *i;
  const unsigned __int8 *v5;
  unsigned int v6;
  unsigned int v7;
  const unsigned __int8 *v8;
  unsigned __int8 *v10;
  unsigned int v11;
  BOOL v12;

  for (i = a2; ; a2 = i)
  {
    v7 = *a2;
    v5 = a2 + 1;
    v6 = v7;
    if (v7 < 0x10)
      return icu::BytesTrie::branchNext(this, v5, v6, a3);
    if (v6 <= 0x1F)
      break;
    if ((v6 & 1) != 0)
      goto LABEL_18;
    v8 = &v5[((v6 >> 1) & 1) + 3];
    if (v6 <= 0xFB)
      v8 = i + 3;
    i += 2;
    if (v6 > 0xD7)
      i = v8;
    if (v6 < 0xA2)
      i = v5;
  }
  if (*v5 != a3)
  {
LABEL_18:
    v10 = 0;
    *((_QWORD *)this + 2) = 0;
    return (uint64_t)v10;
  }
  v10 = (unsigned __int8 *)(i + 2);
  *((_DWORD *)this + 6) = v6 - 17;
  *((_QWORD *)this + 2) = v10;
  if (v6 > 0x10)
    return 1;
  v11 = *v10;
  v12 = v11 >= 0x20;
  LODWORD(v10) = v11 & 1 ^ 3;
  if (v12)
    return v10;
  else
    return 1;
}

uint64_t icu::BytesTrie::next(icu::BytesTrie *this, int a2)
{
  const unsigned __int8 *v3;
  int v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  v3 = (const unsigned __int8 *)*((_QWORD *)this + 2);
  if (!v3)
    return 0;
  if (a2 >= 0)
    v4 = a2;
  else
    v4 = a2 + 256;
  v5 = *((_DWORD *)this + 6);
  if (v5 < 0)
    return icu::BytesTrie::nextImpl(this, v3, v4);
  v7 = *v3;
  v6 = (unsigned __int8 *)(v3 + 1);
  if (v4 == v7)
  {
    *((_DWORD *)this + 6) = v5 - 1;
    *((_QWORD *)this + 2) = v6;
    if (v5)
      return 1;
    v8 = *v6;
    if (v8 < 0x20)
      return 1;
    else
      return v8 & 1 ^ 3;
  }
  else
  {
    v9 = 0;
    *((_QWORD *)this + 2) = 0;
  }
  return v9;
}

uint64_t icu::BytesTrie::next(icu::BytesTrie *this, const char *a2, int a3)
{
  int v3;
  const char *v4;
  const unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  char v12;
  int v13;
  const unsigned __int8 *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t result;
  char v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;

  v3 = a3;
  v4 = a2;
  if ((a3 & 0x80000000) == 0)
  {
    if (a3)
      goto LABEL_3;
LABEL_45:
    v19 = (unsigned __int8 *)*((_QWORD *)this + 2);
    if (v19)
    {
      if ((*((_DWORD *)this + 6) & 0x80000000) != 0)
      {
        v20 = *v19;
        if (v20 >= 0x20)
          return v20 & 1 ^ 3;
      }
      return 1;
    }
    return 0;
  }
  if (!*a2)
    goto LABEL_45;
LABEL_3:
  v6 = (const unsigned __int8 *)*((_QWORD *)this + 2);
  if (!v6)
    return 0;
  v7 = *((_DWORD *)this + 6);
  if (a3 < 0)
    goto LABEL_14;
LABEL_5:
  if (!v3)
  {
LABEL_51:
    *((_DWORD *)this + 6) = v7;
    *((_QWORD *)this + 2) = v6;
    if (v7 < 0)
    {
      v21 = *v6;
      v22 = v21 >= 0x20;
      v23 = v21 & 1 ^ 3;
      if (v22)
        return v23;
      else
        return 1;
    }
    return 1;
  }
  v8 = 0;
  if (v7 >= -1)
    v9 = -1;
  else
    v9 = v7;
  v10 = v7;
  while (1)
  {
    v11 = v4[v8];
    if (v10 < 0)
      break;
    if (v11 != v6[v8])
      goto LABEL_50;
    --v10;
    if (v3 == (_DWORD)++v8)
    {
      v6 += (v3 - 1) + 1;
      v7 -= v3;
      goto LABEL_51;
    }
  }
  v6 += v8;
  v3 += ~(_DWORD)v8;
  v4 += v8 + 1;
  while (1)
  {
    *((_DWORD *)this + 6) = v9;
    while (1)
    {
      while (1)
      {
        v14 = v6;
        v16 = *v6++;
        v15 = v16;
        if (v16 > 0xF)
          break;
        result = icu::BytesTrie::branchNext(this, v6, v15, v11);
        if (!(_DWORD)result)
          return result;
        if (v3 < 0)
        {
          v18 = *v4;
          if (!*v4)
            return result;
        }
        else
        {
          if (!v3)
            return result;
          v18 = *v4;
          --v3;
        }
        if ((_DWORD)result == 2)
          goto LABEL_50;
        v11 = v18;
        ++v4;
        v6 = (const unsigned __int8 *)*((_QWORD *)this + 2);
      }
      if (v15 <= 0x1F)
        break;
      if ((v15 & 1) != 0)
        goto LABEL_50;
      if (v15 >= 0xA2)
      {
        if (v15 > 0xD7)
        {
          if (v15 > 0xFB)
            v14 = &v6[(v15 >> 1) & 1];
          v6 = v14 + 3;
        }
        else
        {
          v6 = v14 + 2;
        }
      }
    }
    if (v11 != *v6)
      break;
    v6 = v14 + 2;
    v7 = v15 - 17;
    if ((v3 & 0x80000000) == 0)
      goto LABEL_5;
LABEL_14:
    v12 = *v4;
    if (!*v4)
      goto LABEL_51;
    if (v7 >= -1)
      v9 = -1;
    else
      v9 = v7;
    ++v4;
    while (1)
    {
      v11 = v12;
      if (v7 < 0)
        break;
      if (v12 != *v6)
        goto LABEL_50;
      ++v6;
      --v7;
      v13 = *(unsigned __int8 *)v4++;
      v12 = v13;
      if (!v13)
        goto LABEL_51;
    }
  }
LABEL_50:
  result = 0;
  *((_QWORD *)this + 2) = 0;
  return result;
}

uint64_t icu::BytesTrie::findUniqueValueFromBranch(icu::BytesTrie *this, const unsigned __int8 *a2, int a3, _DWORD *a4, int *a5)
{
  int v7;
  icu::BytesTrie *v8;
  char *v9;
  int *v10;
  uint64_t result;
  icu::BytesTrie *v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int Value;
  int *v18;
  int *v19;
  uint64_t v20;

  v7 = (int)a2;
  v8 = this;
  if ((int)a2 < 6)
  {
    v12 = this;
  }
  else
  {
    do
    {
      v9 = icu::BytesTrie::jumpByDelta((icu::BytesTrie *)((char *)v8 + 1), a2);
      result = icu::BytesTrie::findUniqueValueFromBranch((icu::BytesTrie *)v9, (const unsigned __int8 *)(v7 >> 1), a3, (signed __int8)a4, v10);
      if (!result)
        return result;
      v12 = (icu::BytesTrie *)((char *)v8 + 2);
      v13 = *((unsigned __int8 *)v8 + 1);
      if (v13 >= 0xC0)
      {
        v14 = (uint64_t)v12 + (v13 & 1) + 3;
        if (v13 <= 0xFD)
          v14 = (uint64_t)v8 + 4;
        if (v13 <= 0xEF)
          v12 = (icu::BytesTrie *)((char *)v8 + 3);
        else
          v12 = (icu::BytesTrie *)v14;
      }
      v7 -= v7 >> 1;
      v8 = v12;
    }
    while (v7 > 5);
  }
  v15 = v7 + 1;
  while (1)
  {
    v16 = *((unsigned __int8 *)v12 + 1);
    Value = icu::BytesTrie::readValue((icu::BytesTrie *)((char *)v12 + 2), (const unsigned __int8 *)(v16 >> 1));
    v20 = (uint64_t)v12 + ((v16 >> 1) & 1) + 5;
    if (v16 <= 0xFB)
      v20 = (uint64_t)v12 + 4;
    if (v16 <= 0xD7)
      v20 = (uint64_t)v12 + 3;
    if (v16 >= 0xA2)
      v12 = (icu::BytesTrie *)v20;
    else
      v12 = (icu::BytesTrie *)((char *)v12 + 2);
    if ((v16 & 1) == 0)
    {
      if (!icu::BytesTrie::findUniqueValue((icu::BytesTrie *)((char *)v12 + Value), (const unsigned __int8 *)(char)a3, a4, v18, v19))return 0;
      goto LABEL_27;
    }
    if (!(_BYTE)a3)
    {
      *a4 = Value;
LABEL_27:
      LOBYTE(a3) = 1;
      goto LABEL_28;
    }
    if (Value != *a4)
      return 0;
LABEL_28:
    if (--v15 <= 2)
      return (uint64_t)v12 + 1;
  }
}

uint64_t icu::BytesTrie::findUniqueValue(icu::BytesTrie *this, const unsigned __int8 *a2, _DWORD *a3, int *a4, int *a5)
{
  char v6;
  unsigned __int8 *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  int Value;

  v6 = (char)a2;
  do
  {
LABEL_2:
    v8 = (unsigned __int8 *)this;
    while (1)
    {
      v10 = *(unsigned __int8 *)this;
      this = (icu::BytesTrie *)((char *)this + 1);
      v9 = v10;
      v11 = v10 - 15;
      if (v10 <= 0xF)
        break;
      if (v9 > 0x1F)
      {
        Value = icu::BytesTrie::readValue(this, (const unsigned __int8 *)(v9 >> 1));
        if (v6)
        {
          if (Value != *a3)
            return 0;
          if ((v9 & 1) != 0)
            return 1;
        }
        else
        {
          *a3 = Value;
          v6 = 1;
          if ((v9 & 1) != 0)
            return 1;
        }
        if (v9 >= 0xA2)
        {
          if (v9 > 0xD7)
          {
            if (v9 > 0xFB)
              this = (icu::BytesTrie *)((char *)this + ((v9 >> 1) & 1) + 3);
            else
              this = (icu::BytesTrie *)(v8 + 3);
          }
          else
          {
            this = (icu::BytesTrie *)(v8 + 2);
          }
        }
        goto LABEL_2;
      }
      v8 = (unsigned __int8 *)this + v11;
      this = (icu::BytesTrie *)((char *)this + v11);
    }
    if (!(_DWORD)v9)
    {
      this = (icu::BytesTrie *)(v8 + 2);
      LODWORD(v9) = v8[1];
    }
    result = icu::BytesTrie::findUniqueValueFromBranch(this, (const unsigned __int8 *)(v9 + 1), v6, (signed __int8)a3, a5);
    this = (icu::BytesTrie *)result;
    v6 = 1;
  }
  while (result);
  return result;
}

uint64_t icu::BytesTrie::getNextBytes(icu::BytesTrie *this, icu::ByteSink *a2, uint64_t a3, icu::ByteSink *a4)
{
  char *v4;
  uint64_t v5;
  icu::BytesTrie *v6;
  unint64_t v7;
  int v9;
  int v10;
  char v11;
  char v12;

  v4 = (char *)*((_QWORD *)this + 2);
  if (!v4)
    return 0;
  if ((*((_DWORD *)this + 6) & 0x80000000) == 0)
  {
    v11 = *v4;
    v5 = 1;
    (*(void (**)(icu::ByteSink *, char *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v11, 1);
    return v5;
  }
  v6 = (icu::BytesTrie *)(v4 + 1);
  v7 = *v4;
  if (v7 < 0x20)
    goto LABEL_16;
  if ((v7 & 1) != 0)
    return 0;
  if (v7 >= 0xA2)
  {
    if (v7 > 0xD7)
    {
      if (v7 > 0xFB)
        v6 = (icu::BytesTrie *)((char *)v6 + ((v7 >> 1) & 1) + 3);
      else
        v6 = (icu::BytesTrie *)(v4 + 3);
    }
    else
    {
      v6 = (icu::BytesTrie *)(v4 + 2);
    }
  }
  v9 = *(unsigned __int8 *)v6;
  v6 = (icu::BytesTrie *)((char *)v6 + 1);
  LODWORD(v7) = v9;
LABEL_16:
  if (v7 > 0xF)
  {
    v12 = *(_BYTE *)v6;
    v5 = 1;
    (*(void (**)(icu::ByteSink *, char *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v12, 1);
  }
  else
  {
    if (!(_DWORD)v7)
    {
      v10 = *(unsigned __int8 *)v6;
      v6 = (icu::BytesTrie *)((char *)v6 + 1);
      LODWORD(v7) = v10;
    }
    v5 = (v7 + 1);
    icu::BytesTrie::getNextBranchBytes(v6, (const unsigned __int8 *)v5, (uint64_t)a2, a4);
  }
  return v5;
}

uint64_t icu::BytesTrie::append(icu::BytesTrie *this, icu::ByteSink *a2)
{
  char v3;

  v3 = (char)a2;
  return (*(uint64_t (**)(icu::BytesTrie *, char *, uint64_t))(*(_QWORD *)this + 16))(this, &v3, 1);
}

uint64_t icu::BytesTrie::getNextBranchBytes(icu::BytesTrie *this, const unsigned __int8 *a2, uint64_t a3, icu::ByteSink *a4)
{
  int v5;
  icu::BytesTrie *v6;
  char *v7;
  icu::ByteSink *v8;
  icu::BytesTrie *v9;
  unsigned int v10;
  int v11;
  unsigned __int8 *v12;
  unint64_t v13;
  char v15;
  char v16;

  v5 = (int)a2;
  v6 = this;
  if ((int)a2 < 6)
  {
    v9 = this;
  }
  else
  {
    do
    {
      v7 = icu::BytesTrie::jumpByDelta((icu::BytesTrie *)((char *)v6 + 1), a2);
      icu::BytesTrie::getNextBranchBytes((icu::BytesTrie *)v7, (const unsigned __int8 *)(v5 >> 1), a3, v8);
      v9 = (icu::BytesTrie *)((char *)v6 + 2);
      v10 = *((unsigned __int8 *)v6 + 1);
      if (v10 >= 0xC0)
      {
        v9 = (icu::BytesTrie *)((char *)v9 + (v10 & 1) + 3);
        if (v10 <= 0xFD)
          v9 = (icu::BytesTrie *)((char *)v6 + 4);
        if (v10 <= 0xEF)
          v9 = (icu::BytesTrie *)((char *)v6 + 3);
      }
      v5 -= v5 >> 1;
      v6 = v9;
    }
    while (v5 > 5);
  }
  v11 = v5 + 1;
  do
  {
    v12 = (unsigned __int8 *)v9;
    v15 = *(_BYTE *)v9;
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a3 + 16))(a3, &v15, 1);
    v9 = (icu::BytesTrie *)(v12 + 2);
    v13 = v12[1];
    if (v13 >= 0xA2)
    {
      if (v13 > 0xD7)
      {
        v9 = (icu::BytesTrie *)((char *)v9 + ((v13 >> 1) & 1) + 3);
        if (v13 <= 0xFB)
          v9 = (icu::BytesTrie *)(v12 + 4);
      }
      else
      {
        v9 = (icu::BytesTrie *)(v12 + 3);
      }
    }
    --v11;
  }
  while (v11 > 2);
  v16 = *(_BYTE *)v9;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a3 + 16))(a3, &v16, 1);
}

icu::CharString *sub_18BBAEC90(icu::CharString *result, const char *a2, int a3, int a4, icu::CharString *this, UErrorCode *a6)
{
  _DWORD *v11;
  int v12;

  if (*(int *)a6 <= 0)
  {
    if (a3 < 0x10000)
    {
      v11 = result;
      v12 = *((_DWORD *)this + 14);
      if (a3 >= 256)
      {
        v12 = ~v12;
        icu::CharString::append(this, SBYTE1(a3), a6);
      }
      icu::CharString::append(this, a3, a6);
      *v11 = v12;
      v11[1] = a4;
      return icu::CharString::append(this, a2, a3, a6);
    }
    else
    {
      *a6 = U_INDEX_OUTOFBOUNDS_ERROR;
    }
  }
  return result;
}

uint64_t sub_18BBAED50(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  size_t v11;
  uint64_t result;

  v3 = *a1;
  v4 = *a3;
  if ((v3 & 0x80000000) != 0)
  {
    v6 = *(unsigned __int8 *)(v4 + -(int)v3) | (*(unsigned __int8 *)(v4 + ~(_DWORD)v3) << 8);
    v5 = 1 - v3;
  }
  else
  {
    v5 = v3 + 1;
    v6 = *(unsigned __int8 *)(v4 + v3);
  }
  v7 = *a2;
  if ((v7 & 0x80000000) != 0)
  {
    v9 = *(unsigned __int8 *)(v4 + -(int)v7) | (*(unsigned __int8 *)(v4 + ~(_DWORD)v7) << 8);
    v8 = 1 - v7;
  }
  else
  {
    v8 = v7 + 1;
    v9 = *(unsigned __int8 *)(v4 + v7);
  }
  v10 = v6 - v9;
  if ((int)(v6 - v9) >= 1)
    v11 = v9;
  else
    v11 = v6;
  LODWORD(result) = memcmp((const void *)(v4 + v5), (const void *)(v4 + v8), v11);
  if ((_DWORD)result)
    return result;
  else
    return v10;
}

icu::BytesTrieBuilder *icu::BytesTrieBuilder::BytesTrieBuilder(icu::BytesTrieBuilder *this, UErrorCode *a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = icu::StringTrieBuilder::StringTrieBuilder(this);
  *v4 = off_1E2246660;
  *((_OWORD *)v4 + 1) = 0u;
  v6 = v4 + 2;
  *((_OWORD *)v4 + 2) = 0u;
  v4[6] = 0;
  if (*(int *)a2 <= 0)
  {
    v7 = icu::UMemory::operator new((icu::UMemory *)0x40, v5);
    if (v7)
    {
      *(_QWORD *)v7 = v7 + 13;
      *(_DWORD *)(v7 + 8) = 40;
      *(_WORD *)(v7 + 12) = 0;
      *(_DWORD *)(v7 + 56) = 0;
      *v6 = v7;
    }
    else
    {
      *v6 = 0;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return this;
}

void icu::BytesTrieBuilder::~BytesTrieBuilder(icu::BytesTrieBuilder *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E2246660;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 12))
      uprv_free(*(void **)v2);
    icu::UMemory::operator delete((void *)v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
    icu::UMemory::operator delete[](v3);
  uprv_free(*((void **)this + 5));
  icu::StringTrieBuilder::~StringTrieBuilder((void ***)this);
}

{
  void *v1;

  icu::BytesTrieBuilder::~BytesTrieBuilder(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::BytesTrieBuilder::add(uint64_t a1, const char *a2, int a3, int a4, UErrorCode *a5)
{
  int v7;
  int v11;
  int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void *v17;

  if (*(int *)a5 <= 0)
  {
    if (*(int *)(a1 + 52) >= 1)
    {
      v7 = 30;
LABEL_4:
      *a5 = v7;
      return a1;
    }
    v11 = *(_DWORD *)(a1 + 36);
    if (v11 == *(_DWORD *)(a1 + 32))
    {
      if (v11)
        v12 = 4 * v11;
      else
        v12 = 1024;
      if (v12 < 0)
        v13 = -1;
      else
        v13 = 8 * v12;
      v14 = (char *)icu::UMemory::operator new[]((icu::UMemory *)v13, (unint64_t)a2);
      if (!v14)
      {
        v7 = 7;
        goto LABEL_4;
      }
      v15 = v14;
      v16 = *(unsigned int *)(a1 + 36);
      if ((int)v16 >= 1)
        memcpy(v14, *(const void **)(a1 + 24), 8 * v16);
      v17 = *(void **)(a1 + 24);
      if (v17)
        icu::UMemory::operator delete[](v17);
      *(_QWORD *)(a1 + 24) = v15;
      *(_DWORD *)(a1 + 32) = v12;
      v11 = *(_DWORD *)(a1 + 36);
    }
    else
    {
      v15 = *(char **)(a1 + 24);
    }
    *(_DWORD *)(a1 + 36) = v11 + 1;
    sub_18BBAEC90((icu::CharString *)&v15[8 * v11], a2, a3, a4, *(icu::CharString **)(a1 + 16), a5);
  }
  return a1;
}

uint64_t icu::BytesTrieBuilder::build(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  icu::BytesTrieBuilder::buildBytes(a1, a2, a3);
  if (*a3 > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x20, v5);
  if (result)
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = v7 - *(int *)(a1 + 52) + *(int *)(a1 + 48);
    *(_QWORD *)result = v7;
    *(_QWORD *)(result + 8) = v8;
    *(_QWORD *)(result + 16) = v8;
    *(_DWORD *)(result + 24) = -1;
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
  }
  else
  {
    *a3 = 7;
  }
  return result;
}

void icu::BytesTrieBuilder::buildBytes(uint64_t a1, uint64_t a2, int *a3)
{
  int v4;
  int v8;
  size_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;

  if (*a3 <= 0)
  {
    v4 = *(_DWORD *)(a1 + 52);
    if (!*(_QWORD *)(a1 + 40) || v4 <= 0)
    {
      if (!v4)
      {
        v12 = *(unsigned int *)(a1 + 36);
        if (!(_DWORD)v12)
        {
          v11 = 8;
          goto LABEL_21;
        }
        uprv_sortArray(*(_QWORD *)(a1 + 24), v12, 8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18BBAF2B0, *(_QWORD *)(a1 + 16), 0, a3);
        if (*a3 > 0)
          return;
        v13 = **(unsigned int **)(a1 + 24);
        v14 = **(_QWORD **)(a1 + 16);
        if ((v13 & 0x80000000) != 0)
        {
          v16 = *(unsigned __int8 *)(v14 + -(int)v13) | ((unint64_t)*(unsigned __int8 *)(v14 + ~(_DWORD)v13) << 8);
          v15 = 1 - v13;
        }
        else
        {
          v15 = v13 + 1;
          v16 = *(unsigned __int8 *)(v14 + v13);
        }
        v25 = (unsigned __int8 *)(v14 + v15);
        v26 = v16;
        if (*(int *)(a1 + 36) >= 2)
        {
          v17 = 8;
          v18 = 1;
          while (1)
          {
            v23 = 0;
            v24 = 0;
            v19 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + v17);
            v20 = **(_QWORD **)(a1 + 16);
            if ((v19 & 0x80000000) != 0)
            {
              v22 = *(unsigned __int8 *)(v20 + -(int)v19) | ((unint64_t)*(unsigned __int8 *)(v20 + ~(_DWORD)v19) << 8);
              v21 = 1 - v19;
            }
            else
            {
              v21 = v19 + 1;
              v22 = *(unsigned __int8 *)(v20 + v19);
            }
            v23 = (unsigned __int8 *)(v20 + v21);
            v24 = v22;
            if (icu::operator==(&v25, &v23))
              break;
            v25 = v23;
            LODWORD(v26) = v24;
            ++v18;
            v17 += 8;
            if (v18 >= *(int *)(a1 + 36))
              goto LABEL_8;
          }
          v11 = 1;
          goto LABEL_21;
        }
      }
LABEL_8:
      *(_DWORD *)(a1 + 52) = 0;
      v8 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56);
      if (v8 <= 1024)
        v9 = 1024;
      else
        v9 = v8;
      if (*(_DWORD *)(a1 + 48) < (int)v9)
      {
        uprv_free(*(void **)(a1 + 40));
        v10 = uprv_malloc(v9);
        *(_QWORD *)(a1 + 40) = v10;
        if (!v10)
        {
          *a3 = 7;
          *(_DWORD *)(a1 + 48) = 0;
          return;
        }
        *(_DWORD *)(a1 + 48) = v9;
      }
      icu::StringTrieBuilder::build((icu::StringTrieBuilder *)a1, a2, *(unsigned int *)(a1 + 36), (UErrorCode *)a3);
      if (*(_QWORD *)(a1 + 40))
        return;
      v11 = 7;
LABEL_21:
      *a3 = v11;
    }
  }
}

uint64_t icu::BytesTrieBuilder::buildStringPiece(uint64_t a1, uint64_t a2, int *a3)
{
  icu::BytesTrieBuilder::buildBytes(a1, a2, a3);
  if (*a3 <= 0)
    return *(_QWORD *)(a1 + 40) - *(int *)(a1 + 52) + *(int *)(a1 + 48);
  else
    return 0;
}

uint64_t sub_18BBAF2B0(uint64_t *a1, unsigned int *a2, unsigned int *a3)
{
  return sub_18BBAED50(a2, a3, a1);
}

uint64_t icu::BytesTrieBuilder::clear(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 16);
  *(_DWORD *)(v1 + 56) = 0;
  **(_BYTE **)v1 = 0;
  *(_DWORD *)(this + 36) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t icu::BytesTrieBuilder::getElementStringLength(icu::BytesTrieBuilder *this, int a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)*((_QWORD *)this + 2);
  v3 = *(unsigned int *)(*((_QWORD *)this + 3) + 8 * a2);
  if ((v3 & 0x80000000) != 0)
    return *(unsigned __int8 *)(*v2 + -(int)v3) | (*(unsigned __int8 *)(*v2 + ~(_DWORD)v3) << 8);
  else
    return *(unsigned __int8 *)(*v2 + v3);
}

uint64_t icu::BytesTrieBuilder::getElementUnit(icu::BytesTrieBuilder *this, int a2, int a3)
{
  int v3;

  v3 = *(_DWORD *)(*((_QWORD *)this + 3) + 8 * a2);
  if (v3 < 0)
    v3 = -v3;
  return *(unsigned __int8 *)(**((_QWORD **)this + 2) + v3 + 1 + a3);
}

uint64_t icu::BytesTrieBuilder::getElementValue(icu::BytesTrieBuilder *this, int a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 3) + 8 * a2 + 4);
}

uint64_t icu::BytesTrieBuilder::getLimitOfLinearMatch(icu::BytesTrieBuilder *this, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int v13;
  int v14;
  int v15;

  v4 = *((_QWORD *)this + 3);
  v5 = *(unsigned int *)(v4 + 8 * a2);
  v6 = **((_QWORD **)this + 2);
  if ((v5 & 0x80000000) != 0)
    LODWORD(v7) = *(unsigned __int8 *)(v6 + -(int)v5) | (*(unsigned __int8 *)(v6
                                                                                          + ~(_DWORD)v5) << 8);
  else
    LODWORD(v7) = *(unsigned __int8 *)(v6 + v5);
  v8 = (int *)(v4 + 8 * a3);
  if ((int)v5 < 0)
    LODWORD(v5) = -(int)v5;
  v9 = v5 + 1;
  v10 = v7;
  if ((int)v7 <= (int)a4 + 1)
    v7 = (a4 + 1);
  else
    v7 = v7;
  v11 = v6 + v9;
  for (i = (int)a4 + 1; i < v10; ++i)
  {
    v13 = *(unsigned __int8 *)(v11 + i);
    v14 = *v8;
    if (*v8 < 0)
      v14 = -v14;
    v15 = *(unsigned __int8 *)(v6 + v14 + 1 + i);
    a4 = (a4 + 1);
    if (v13 != v15)
      return a4;
  }
  return v7;
}

uint64_t icu::BytesTrieBuilder::countElementUnits(icu::BytesTrieBuilder *this, int a2, int a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int *v10;
  int v11;
  int v12;

  v4 = 0;
  v5 = *((_QWORD *)this + 3);
  v6 = **((_QWORD **)this + 2) + a4;
LABEL_2:
  v7 = a2;
  v8 = *(_DWORD *)(v5 + 8 * a2);
  if (v8 < 0)
    v8 = -v8;
  v9 = *(unsigned __int8 *)(v6 + v8 + 1);
  v10 = (int *)(v5 + 8 + 8 * a2);
  while (++v7 < a3)
  {
    v12 = *v10;
    v10 += 2;
    v11 = v12;
    if (v12 < 0)
      v11 = -v11;
    if (v9 != *(unsigned __int8 *)(v6 + v11 + 1))
    {
      ++v4;
      a2 = v7;
      goto LABEL_2;
    }
  }
  return (v4 + 1);
}

uint64_t icu::BytesTrieBuilder::skipElementsBySomeUnits(icu::BytesTrieBuilder *this, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  BOOL v11;

  v4 = *((_QWORD *)this + 3);
  v5 = **((_QWORD **)this + 2) + a3;
  do
  {
    v6 = *(_DWORD *)(v4 + 8 * (int)a2);
    if (v6 < 0)
      v6 = -v6;
    v7 = *(unsigned __int8 *)(v5 + v6 + 1);
    v8 = (int *)(v4 + 8 + 8 * (int)a2);
    do
    {
      v10 = *v8;
      v8 += 2;
      v9 = v10;
      if (v10 < 0)
        v9 = -v9;
      a2 = (a2 + 1);
    }
    while (v7 == *(unsigned __int8 *)(v5 + v9 + 1));
    v11 = __OFSUB__(a4--, 1);
  }
  while (!((a4 < 0) ^ v11 | (a4 == 0)));
  return a2;
}

uint64_t icu::BytesTrieBuilder::indexOfElementWithNextUnit(uint64_t result, int a2, int a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;

  v4 = *(_QWORD *)(result + 24);
  v5 = **(_QWORD **)(result + 16) + a3;
  LODWORD(result) = a2 - 1;
  v6 = (int *)(v4 + 8 * a2);
  do
  {
    v8 = *v6;
    v6 += 2;
    v7 = v8;
    if (v8 < 0)
      v7 = -v7;
    result = (result + 1);
  }
  while (a4 == *(char *)(v5 + v7 + 1));
  return result;
}

icu::BytesTrieBuilder::BTLinearMatchNode *icu::BytesTrieBuilder::BTLinearMatchNode::BTLinearMatchNode(icu::BytesTrieBuilder::BTLinearMatchNode *this, char *a2, int a3, icu::StringTrieBuilder::Node *a4)
{
  int v5;
  unsigned int v6;

  if (a4)
    v5 = *((_DWORD *)a4 + 2);
  else
    v5 = 0;
  v6 = v5 + 37 * a3 + 298634171;
  *((_QWORD *)this + 1) = v6;
  *((_BYTE *)this + 16) = 0;
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = a3;
  *(_QWORD *)this = &off_1E2246710;
  *((_QWORD *)this + 4) = a4;
  *((_QWORD *)this + 5) = a2;
  *((_DWORD *)this + 2) = ustr_hashCharsN((unsigned __int8 *)a2, a3) + 37 * v6;
  return this;
}

uint64_t icu::BytesTrieBuilder::BTLinearMatchNode::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 == a2)
    return 1;
  result = icu::StringTrieBuilder::LinearMatchNode::operator==(a1, a2);
  if ((_DWORD)result)
    return memcmp(*(const void **)(a1 + 40), *(const void **)(a2 + 40), *(int *)(a1 + 24)) == 0;
  return result;
}

uint64_t icu::BytesTrieBuilder::BTLinearMatchNode::write(icu::BytesTrieBuilder::BTLinearMatchNode *this, icu::StringTrieBuilder *a2)
{
  int v4;
  uint64_t result;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4));
  icu::BytesTrieBuilder::write(a2, *((const char **)this + 5), *((_DWORD *)this + 6));
  v4 = (*(uint64_t (**)(icu::StringTrieBuilder *))(*(_QWORD *)a2 + 96))(a2);
  result = (*(uint64_t (**)(icu::StringTrieBuilder *, _QWORD))(*(_QWORD *)a2 + 120))(a2, (v4 + *((_DWORD *)this + 6) - 1));
  *((_DWORD *)this + 3) = result;
  return result;
}

uint64_t icu::BytesTrieBuilder::write(icu::BytesTrieBuilder *this, const char *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *((int *)this + 13);
  v7 = v6 + a3;
  if (icu::BytesTrieBuilder::ensureCapacity(this, (int)v6 + a3))
  {
    *((_DWORD *)this + 13) = v7;
    memcpy((void *)(*((_QWORD *)this + 5) - v7 + *((int *)this + 12)), a2, a3);
  }
  return *((unsigned int *)this + 13);
}

icu::BytesTrieBuilder::BTLinearMatchNode *icu::BytesTrieBuilder::createLinearMatchNode(icu::BytesTrieBuilder *this, unint64_t a2, int a3, int a4, icu::StringTrieBuilder::Node *a5)
{
  int v8;
  icu::BytesTrieBuilder::BTLinearMatchNode *result;
  int v11;

  v8 = a2;
  result = (icu::BytesTrieBuilder::BTLinearMatchNode *)icu::UMemory::operator new((icu::UMemory *)0x30, a2);
  if (result)
  {
    v11 = *(_DWORD *)(*((_QWORD *)this + 3) + 8 * v8);
    if (v11 < 0)
      v11 = -v11;
    return icu::BytesTrieBuilder::BTLinearMatchNode::BTLinearMatchNode(result, (char *)(**((_QWORD **)this + 2) + (v11 + 1) + a3), a4, a5);
  }
  return result;
}

uint64_t icu::BytesTrieBuilder::ensureCapacity(icu::BytesTrieBuilder *this, int a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  if (!*((_QWORD *)this + 5))
    return 0;
  LODWORD(v3) = *((_DWORD *)this + 12);
  if ((int)v3 >= a2)
    return 1;
  do
    v3 = 2 * (int)v3;
  while ((int)v3 <= a2);
  v4 = (char *)uprv_malloc((int)v3);
  v5 = v4;
  if (v4)
  {
    v6 = (char *)*((_QWORD *)this + 5);
    memcpy(&v4[v3 - *((int *)this + 13)], &v6[*((int *)this + 12) - *((int *)this + 13)], *((int *)this + 13));
    v7 = 1;
  }
  else
  {
    LODWORD(v3) = 0;
    v7 = 0;
    v6 = (char *)*((_QWORD *)this + 5);
  }
  uprv_free(v6);
  *((_QWORD *)this + 5) = v5;
  *((_DWORD *)this + 12) = v3;
  return v7;
}

uint64_t icu::BytesTrieBuilder::write(icu::BytesTrieBuilder *this, char a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((int *)this + 13);
  v5 = v4 + 1;
  if (icu::BytesTrieBuilder::ensureCapacity(this, (int)v4 + 1))
  {
    *((_DWORD *)this + 13) = v5;
    *(_BYTE *)(*((_QWORD *)this + 5) - v5 + *((int *)this + 12)) = a2;
  }
  return *((unsigned int *)this + 13);
}

uint64_t icu::BytesTrieBuilder::writeElementUnits(icu::BytesTrieBuilder *this, int a2, int a3, int a4)
{
  int v4;

  v4 = *(_DWORD *)(*((_QWORD *)this + 3) + 8 * a2);
  if (v4 < 0)
    v4 = -v4;
  return icu::BytesTrieBuilder::write(this, (const char *)(**((_QWORD **)this + 2) + (v4 + 1) + a3), a4);
}

uint64_t icu::BytesTrieBuilder::writeValueAndFinal(icu::BytesTrieBuilder *this, unsigned int a2, int a3)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  int v10;

  if (a2 <= 0x40)
    return (*(uint64_t (**)(icu::BytesTrieBuilder *, _QWORD))(*(_QWORD *)this + 120))(this, (2 * a2 + 32) | a3);
  v10 = 0;
  if (HIBYTE(a2))
  {
    LOBYTE(v10) = HIBYTE(a2);
    BYTE1(v10) = BYTE2(a2);
    BYTE2(v10) = BYTE1(a2);
    v4 = 5;
    LOBYTE(v5) = 127;
    v6 = 4;
  }
  else
  {
    if (a2 >> 8 > 0x1A)
    {
      if (a2 >> 17 > 8)
      {
        LOBYTE(v10) = BYTE2(a2);
        v8 = 2;
        LOBYTE(v5) = 126;
      }
      else
      {
        v5 = HIWORD(a2) + 108;
        v8 = 1;
      }
      v7 = v8 + 1;
      *(&v9 + v8) = BYTE1(a2);
    }
    else
    {
      LOBYTE(v5) = BYTE1(a2) + 81;
      v7 = 1;
    }
    v4 = v7 + 1;
    v6 = v7;
  }
  *(&v9 + v6) = a2;
  v9 = a3 | (2 * v5);
  return icu::BytesTrieBuilder::write(this, &v9, v4);
}

uint64_t icu::BytesTrieBuilder::writeValueAndType(icu::BytesTrieBuilder *this, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(icu::BytesTrieBuilder *, uint64_t))(*(_QWORD *)this + 120))(this, a4);
  if (a2)
    return (*(uint64_t (**)(icu::BytesTrieBuilder *, uint64_t, _QWORD))(*(_QWORD *)this + 136))(this, a3, 0);
  return result;
}

uint64_t icu::BytesTrieBuilder::writeDeltaTo(icu::BytesTrieBuilder *this, int a2, char *a3)
{
  icu::BytesTrieBuilder *v4;
  int v6;
  char v7[4];
  char v8;

  v4 = (icu::BytesTrieBuilder *)(*((_DWORD *)this + 13) - a2);
  if ((int)v4 <= 191)
    return (*(uint64_t (**)(icu::BytesTrieBuilder *, _QWORD))(*(_QWORD *)this + 120))(this, (*((_DWORD *)this + 13) - a2));
  v8 = 0;
  *(_DWORD *)v7 = 0;
  v6 = icu::BytesTrieBuilder::internalEncodeDelta(v4, v7, a3);
  return icu::BytesTrieBuilder::write(this, v7, v6);
}

uint64_t icu::BytesTrieBuilder::internalEncodeDelta(icu::BytesTrieBuilder *this, char *a2, char *a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  char v7;

  if ((int)this > 191)
  {
    if (this >> 12 > 2)
    {
      if (this >> 17 > 6)
      {
        if (this >> 24)
        {
          a2[1] = BYTE3(this);
          v6 = 2;
          v7 = -1;
        }
        else
        {
          v6 = 1;
          v7 = -2;
        }
        *a2 = v7;
        v5 = v6 + 1;
        a2[v6] = BYTE2(this);
      }
      else
      {
        *a2 = BYTE2(this) - 16;
        v5 = 1;
      }
      v4 = v5 + 1;
      a2[v5] = BYTE1(this);
    }
    else
    {
      *a2 = BYTE1(this) - 64;
      v4 = 1;
    }
    v3 = v4 + 1;
    a2[v4] = (char)this;
  }
  else
  {
    *a2 = (char)this;
    return 1;
  }
  return v3;
}

uint64_t sub_18BBAFAB0()
{
  return 0;
}

uint64_t sub_18BBAFAB8()
{
  return 5;
}

uint64_t sub_18BBAFAC0()
{
  return 16;
}

uint64_t sub_18BBAFAC8()
{
  return 16;
}

void sub_18BBAFAD4(icu::UObject *a1)
{
  void *v1;

  icu::UObject::~UObject(a1);
  icu::UMemory::operator delete(v1);
}

icu::BytesTrie::Iterator *icu::BytesTrie::Iterator::Iterator(icu::BytesTrie::Iterator *this, unint64_t a2, int a3, UErrorCode *a4)
{
  uint64_t v6;
  unint64_t v7;
  icu::UVector32 *v8;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = -1;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = a3;
  *((_DWORD *)this + 11) = 0;
  *((_QWORD *)this + 6) = 0;
  if (*(int *)a4 <= 0)
  {
    v6 = icu::UMemory::operator new((icu::UMemory *)0x40, a2);
    if (v6)
    {
      *(_QWORD *)v6 = v6 + 13;
      *(_DWORD *)(v6 + 8) = 40;
      *(_WORD *)(v6 + 12) = 0;
      *(_DWORD *)(v6 + 56) = 0;
    }
    *((_QWORD *)this + 4) = v6;
    v8 = (icu::UVector32 *)icu::UMemory::operator new((icu::UMemory *)0x20, v7);
    if (v8)
      v8 = icu::UVector32::UVector32(v8, a4);
    *((_QWORD *)this + 6) = v8;
    if (*(int *)a4 <= 0 && (!v8 || !*((_QWORD *)this + 4)))
      *a4 = U_MEMORY_ALLOCATION_ERROR;
  }
  return this;
}

icu::BytesTrie::Iterator *icu::BytesTrie::Iterator::Iterator(icu::BytesTrie::Iterator *this, const icu::BytesTrie *a2, int a3, UErrorCode *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  unint64_t v9;
  icu::UVector32 *v10;
  icu::CharString *v11;
  int v12;
  int v13;
  int v15;

  v5 = *((_QWORD *)a2 + 2);
  *(_QWORD *)this = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v5;
  *((_QWORD *)this + 2) = v5;
  v6 = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 6) = v6;
  *((_DWORD *)this + 7) = v6;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = a3;
  *((_DWORD *)this + 11) = 0;
  *((_QWORD *)this + 6) = 0;
  if (*(int *)a4 <= 0)
  {
    v8 = icu::UMemory::operator new((icu::UMemory *)0x40, (unint64_t)a2);
    if (v8)
    {
      *(_QWORD *)v8 = v8 + 13;
      *(_DWORD *)(v8 + 8) = 40;
      *(_WORD *)(v8 + 12) = 0;
      *(_DWORD *)(v8 + 56) = 0;
    }
    *((_QWORD *)this + 4) = v8;
    v10 = (icu::UVector32 *)icu::UMemory::operator new((icu::UMemory *)0x20, v9);
    if (v10)
      v10 = icu::UVector32::UVector32(v10, a4);
    *((_QWORD *)this + 6) = v10;
    if (*(int *)a4 <= 0)
    {
      if (v10 && (v11 = (icu::CharString *)*((_QWORD *)this + 4)) != 0)
      {
        v12 = *((_DWORD *)this + 6);
        if ((v12 & 0x80000000) == 0)
        {
          v13 = *((_DWORD *)this + 10);
          if (v12 < v13 || v13 < 1)
            v15 = v12 + 1;
          else
            v15 = *((_DWORD *)this + 10);
          icu::CharString::append(v11, *((const char **)this + 1), v15, a4);
          *((_QWORD *)this + 1) += v15;
          *((_DWORD *)this + 6) -= v15;
        }
      }
      else
      {
        *a4 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
  }
  return this;
}

void icu::BytesTrie::Iterator::~Iterator(icu::BytesTrie::Iterator *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 12))
      uprv_free(*(void **)v2);
    icu::UMemory::operator delete((void *)v2);
  }
  v3 = *((_QWORD *)this + 6);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

icu::BytesTrie::Iterator *icu::BytesTrie::Iterator::reset(icu::BytesTrie::Iterator *this)
{
  int v2;
  int v3;
  int v5;

  *((_QWORD *)this + 1) = *((_QWORD *)this + 2);
  v2 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 6) = v2;
  v3 = *((_DWORD *)this + 10);
  if (v2 < v3 || v3 < 1)
    v5 = v2 + 1;
  else
    v5 = *((_DWORD *)this + 10);
  icu::CharString::truncate(*((_QWORD *)this + 4), v5);
  *((_QWORD *)this + 1) += v5;
  *((_DWORD *)this + 6) -= v5;
  icu::UVector32::setSize(*((icu::UVector32 **)this + 6), 0);
  return this;
}

BOOL icu::BytesTrie::Iterator::hasNext(icu::BytesTrie::Iterator *this)
{
  return *((_QWORD *)this + 1) || *(_DWORD *)(*((_QWORD *)this + 6) + 8) != 0;
}

uint64_t icu::BytesTrie::Iterator::next(icu::BytesTrie::Iterator *this, UErrorCode *a2)
{
  char *v5;
  int v6;
  icu::CharString *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  char *v20;
  char v21;

  if (*(int *)a2 > 0)
    return 0;
  v5 = (char *)*((_QWORD *)this + 1);
  if (!v5)
  {
    v13 = *((_QWORD *)this + 6);
    v14 = *(_DWORD *)(v13 + 8);
    if (!v14)
      return 0;
    if (v14 <= 0)
    {
      v17 = 0;
      v18 = 0;
      v16 = *(_QWORD *)this;
      v19 = v14 - 2;
    }
    else
    {
      v15 = *(_QWORD *)(v13 + 24);
      v16 = *(_QWORD *)this;
      v17 = *(_DWORD *)(v15 + 4 * (v14 - 1));
      if (v14 == 1)
      {
        v18 = 0;
        v19 = -1;
      }
      else
      {
        v19 = v14 - 2;
        v18 = *(int *)(v15 + 4 * (v14 - 2));
      }
    }
    v20 = (char *)(v16 + v18);
    icu::UVector32::setSize((icu::UVector32 *)v13, v19);
    icu::CharString::truncate(*((_QWORD *)this + 4), (unsigned __int16)v17);
    if (v17 < 0x20000)
    {
      v21 = *v20;
      v5 = v20 + 1;
      icu::CharString::append(*((icu::CharString **)this + 4), v21, a2);
    }
    else
    {
      v5 = icu::BytesTrie::Iterator::branchNext(this, v20, HIWORD(v17), a2);
      if (!v5)
        return 1;
    }
  }
  if ((*((_DWORD *)this + 6) & 0x80000000) == 0)
  {
LABEL_5:
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 11) = -1;
    return 1;
  }
  while (1)
  {
    v11 = v5 + 1;
    v10 = *v5;
    if (v10 > 0x1F)
      break;
    v6 = *((_DWORD *)this + 10);
    if (v6 < 1)
    {
      if (v10 >= 0x10)
      {
        v9 = v10 - 15;
        v7 = (icu::CharString *)*((_QWORD *)this + 4);
        goto LABEL_17;
      }
LABEL_12:
      if (!*v5)
      {
        v10 = *v11;
        v11 = v5 + 2;
      }
      v5 = icu::BytesTrie::Iterator::branchNext(this, v11, v10 + 1, a2);
      if (!v5)
        return 1;
    }
    else
    {
      v7 = (icu::CharString *)*((_QWORD *)this + 4);
      v8 = *((_DWORD *)v7 + 14);
      if (v6 == v8)
        goto LABEL_5;
      if (v10 < 0x10)
        goto LABEL_12;
      v9 = v10 - 15;
      if ((int)(v8 + v10 - 15) > v6)
      {
        icu::CharString::append(v7, v11, v6 - v8, a2);
        goto LABEL_5;
      }
LABEL_17:
      icu::CharString::append(v7, v11, v9, a2);
      v5 = &v11[v9];
    }
  }
  *((_DWORD *)this + 11) = icu::BytesTrie::readValue((icu::BytesTrie *)(v5 + 1), (const unsigned __int8 *)(v10 >> 1));
  if ((v10 & 1) != 0 || (v12 = *((_DWORD *)this + 10), v12 >= 1) && *(_DWORD *)(*((_QWORD *)this + 4) + 56) == v12)
  {
    v11 = 0;
  }
  else if (v10 >= 0xA2)
  {
    if (v10 > 0xD7)
    {
      if (v10 > 0xFB)
        v11 += ((v10 >> 1) & 1) + 3;
      else
        v11 = v5 + 3;
    }
    else
    {
      v11 = v5 + 2;
    }
  }
  *((_QWORD *)this + 1) = v11;
  return 1;
}

char *icu::BytesTrie::Iterator::branchNext(icu::BytesTrie::Iterator *this, char *a2, int a3, UErrorCode *a4)
{
  unsigned int v5;
  char *v6;
  unsigned int v8;
  icu::BytesTrie *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  BOOL v18;
  char v19;
  char *v20;
  unint64_t v21;
  int Value;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  char *result;

  v5 = a3;
  v6 = a2;
  if (a3 >= 6)
  {
    while (1)
    {
      v9 = (icu::BytesTrie *)(v6 + 1);
      v8 = v6[1];
      v10 = (_DWORD)v6 + 2;
      if (v8 >= 0xC0)
      {
        if (v8 > 0xEF)
        {
          if (v8 > 0xFD)
            v10 += (v8 & 1) + 3;
          else
            v10 = (_DWORD)v6 + 4;
        }
        else
        {
          v10 = (_DWORD)v6 + 3;
        }
      }
      v11 = *((_QWORD *)this + 6);
      v12 = *(_DWORD *)this;
      v13 = *(_DWORD *)(v11 + 8);
      if (v13 >= -1 && *(_DWORD *)(v11 + 12) > v13)
        goto LABEL_12;
      if (icu::UVector32::expandCapacity(*((icu::UVector32 **)this + 6), v13 + 1, a4))
        break;
LABEL_13:
      v14 = *((_QWORD *)this + 6);
      v15 = *(_DWORD *)(*((_QWORD *)this + 4) + 56);
      v16 = *(_DWORD *)(v14 + 8);
      if (v16 >= -1 && *(_DWORD *)(v14 + 12) > v16)
        goto LABEL_17;
      if (icu::UVector32::expandCapacity(*((icu::UVector32 **)this + 6), v16 + 1, a4))
      {
        v16 = *(_DWORD *)(v14 + 8);
LABEL_17:
        *(_DWORD *)(*(_QWORD *)(v14 + 24) + 4 * v16) = v15 | ((v5 - (v5 >> 1)) << 16);
        ++*(_DWORD *)(v14 + 8);
      }
      v17 = v5 >> 1;
      v6 = icu::BytesTrie::jumpByDelta(v9, (const unsigned __int8 *)a2);
      v18 = v5 > 0xB;
      v5 >>= 1;
      if (!v18)
        goto LABEL_21;
    }
    v13 = *(_DWORD *)(v11 + 8);
LABEL_12:
    *(_DWORD *)(*(_QWORD *)(v11 + 24) + 4 * v13) = v10 - v12;
    ++*(_DWORD *)(v11 + 8);
    goto LABEL_13;
  }
  v17 = a3;
LABEL_21:
  v19 = *v6;
  v20 = v6 + 2;
  v21 = v6[1];
  Value = icu::BytesTrie::readValue((icu::BytesTrie *)(v6 + 2), (const unsigned __int8 *)(v21 >> 1));
  if (v21 >= 0xA2)
  {
    if (v21 > 0xD7)
    {
      if (v21 > 0xFB)
        v20 += ((v21 >> 1) & 1) + 3;
      else
        v20 = v6 + 4;
    }
    else
    {
      v20 = v6 + 3;
    }
  }
  v23 = *((_QWORD *)this + 6);
  v24 = *(_DWORD *)this;
  v25 = *(_DWORD *)(v23 + 8);
  if (v25 >= -1 && *(_DWORD *)(v23 + 12) > v25)
    goto LABEL_31;
  if (icu::UVector32::expandCapacity(*((icu::UVector32 **)this + 6), v25 + 1, a4))
  {
    v25 = *(_DWORD *)(v23 + 8);
LABEL_31:
    *(_DWORD *)(*(_QWORD *)(v23 + 24) + 4 * v25) = (_DWORD)v20 - v24;
    ++*(_DWORD *)(v23 + 8);
  }
  v26 = *((_QWORD *)this + 6);
  v27 = *(_DWORD *)(*((_QWORD *)this + 4) + 56);
  v28 = *(_DWORD *)(v26 + 8);
  if (v28 < -1 || *(_DWORD *)(v26 + 12) <= v28)
  {
    if (!icu::UVector32::expandCapacity(*((icu::UVector32 **)this + 6), v28 + 1, a4))
      goto LABEL_37;
    v28 = *(_DWORD *)(v26 + 8);
  }
  *(_DWORD *)(*(_QWORD *)(v26 + 24) + 4 * v28) = v27 | ((v17 << 16) - 0x10000);
  ++*(_DWORD *)(v26 + 8);
LABEL_37:
  icu::CharString::append(*((icu::CharString **)this + 4), v19, a4);
  if ((v21 & 1) == 0)
    return &v20[Value];
  result = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 11) = Value;
  return result;
}

uint64_t icu::BytesTrie::Iterator::truncateAndStop(icu::BytesTrie::Iterator *this)
{
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 11) = -1;
  return 1;
}

uint64_t icu::BytesTrie::Iterator::getString(icu::BytesTrie::Iterator *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

void *icu::CanonicalIterator::getStaticClassID(icu::CanonicalIterator *this)
{
  return &unk_1EE009138;
}

void *icu::CanonicalIterator::getDynamicClassID(icu::CanonicalIterator *this)
{
  return &unk_1EE009138;
}

icu::CanonicalIterator *icu::CanonicalIterator::CanonicalIterator(icu::CanonicalIterator *this, UErrorCode *a2, UErrorCode *a3)
{
  UErrorCode *v6;
  icu::Normalizer2Impl *NFCImpl;

  *(_QWORD *)this = off_1E2246780;
  *((_QWORD *)this + 1) = off_1E2256B38;
  *((_WORD *)this + 8) = 2;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 15) = off_1E2256B38;
  *((_WORD *)this + 64) = 2;
  *((_QWORD *)this + 23) = icu::Normalizer2::getNFDInstance((icu::Normalizer2 *)a3, a2);
  NFCImpl = (icu::Normalizer2Impl *)icu::Normalizer2Factory::getNFCImpl((icu::Normalizer2Factory *)a3, v6);
  *((_QWORD *)this + 24) = NFCImpl;
  if (*(int *)a3 <= 0 && icu::Normalizer2Impl::ensureCanonIterData(NFCImpl, a3))
    icu::CanonicalIterator::setSource(this, (const icu::UnicodeString *)a2, a3);
  return this;
}

void icu::CanonicalIterator::setSource(icu::CanonicalIterator *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  const icu::UnicodeString *v18;
  _WORD *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  icu::UnicodeString *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  icu::UnicodeString *v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  (*(void (**)(_QWORD, const icu::UnicodeString *, char *, UErrorCode *))(**((_QWORD **)this + 23) + 24))(*((_QWORD *)this + 23), a2, (char *)this + 8, a3);
  if (*(int *)a3 > 0)
    return;
  *((_BYTE *)this + 72) = 0;
  icu::CanonicalIterator::cleanPieces(this);
  v7 = *((unsigned __int16 *)a2 + 4);
  v8 = (__int16)v7;
  v9 = v7 >> 5;
  if (v8 < 0)
    v9 = *((_DWORD *)a2 + 3);
  if (!v9)
  {
    *((_QWORD *)this + 10) = uprv_malloc(8uLL);
    *((_QWORD *)this + 12) = uprv_malloc(4uLL);
    *((_DWORD *)this + 22) = 1;
    v11 = uprv_malloc(4uLL);
    *((_QWORD *)this + 13) = v11;
    *((_DWORD *)this + 28) = 1;
    if (*((_QWORD *)this + 10) && *((_QWORD *)this + 12) && v11)
    {
      *v11 = 0;
      v13 = icu::UMemory::operator new[]((icu::UMemory *)0x50, v12);
      if (v13)
      {
        *(_OWORD *)v13 = xmmword_18BDCBEC0;
        *(_QWORD *)(v13 + 16) = off_1E2256B38;
        v14 = v13 + 16;
        *(_WORD *)(v13 + 24) = 2;
      }
      else
      {
        v14 = 0;
      }
      **((_QWORD **)this + 10) = v14;
      **((_DWORD **)this + 12) = 1;
      if (**((_QWORD **)this + 10))
        return;
    }
    goto LABEL_58;
  }
  if (*((__int16 *)this + 8) < 0)
    v10 = *((_DWORD *)this + 5);
  else
    v10 = *((unsigned __int16 *)this + 8) >> 5;
  v15 = v10;
  if (v10 < 0)
    v16 = -1;
  else
    v16 = ((uint64_t)v10 << 6) | 0x10;
  v17 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v16, v6);
  if (!v17)
  {
LABEL_58:
    *a3 = U_MEMORY_ALLOCATION_ERROR;
LABEL_59:
    icu::CanonicalIterator::cleanPieces(this);
    return;
  }
  *v17 = 64;
  v17[1] = v15;
  v45 = v17;
  v18 = (const icu::UnicodeString *)(v17 + 2);
  if ((_DWORD)v15)
  {
    v19 = v17 + 2;
    do
    {
      *(_QWORD *)v19 = off_1E2256B38;
      v19[4] = 2;
      v19 += 32;
    }
    while (v19 != (_WORD *)((char *)v18 + 64 * v15));
  }
  v20 = 0;
  v21 = 0;
  if (icu::UnicodeString::char32At((icu::CanonicalIterator *)((char *)this + 8), 0) < 0x10000)
    v22 = 1;
  else
    v22 = 2;
  while (1)
  {
    v23 = *((__int16 *)this + 8) < 0 ? *((_DWORD *)this + 5) : *((unsigned __int16 *)this + 8) >> 5;
    if (v22 >= v23)
      break;
    v24 = icu::UnicodeString::char32At((icu::CanonicalIterator *)((char *)this + 8), v22);
    if (icu::Normalizer2Impl::isCanonSegmentStarter(*((icu::Normalizer2Impl **)this + 24), v24))
    {
      v25 = (const icu::UnicodeString *)((char *)v18 + 64 * (uint64_t)v20);
      v26 = *((unsigned __int16 *)v25 + 4);
      v27 = (__int16)v26;
      v28 = v26 >> 5;
      if (v27 >= 0)
        v29 = v28;
      else
        v29 = *((unsigned int *)v25 + 3);
      icu::UnicodeString::doReplace(v25, 0, v29, (icu::CanonicalIterator *)((char *)this + 8), v21, (v22 - v21));
      ++v20;
      v21 = v22;
    }
    if (v24 < 0x10000)
      v30 = 1;
    else
      v30 = 2;
    v22 += v30;
  }
  v31 = (v22 - v21);
  v32 = v20 + 1;
  v33 = (const icu::UnicodeString *)((char *)v18 + 64 * (uint64_t)v20);
  v34 = *((unsigned __int16 *)v33 + 4);
  v35 = (__int16)v34;
  v36 = v34 >> 5;
  if (v35 >= 0)
    v37 = v36;
  else
    v37 = *((unsigned int *)v33 + 3);
  icu::UnicodeString::doReplace(v33, 0, v37, (icu::CanonicalIterator *)((char *)this + 8), v21, v31);
  *((_QWORD *)this + 10) = uprv_malloc(8 * v32);
  *((_DWORD *)this + 22) = v32;
  *((_QWORD *)this + 12) = uprv_malloc(4 * v32);
  v38 = uprv_malloc(4 * v32);
  *((_QWORD *)this + 13) = v38;
  *((_DWORD *)this + 28) = v32;
  if (!*((_QWORD *)this + 10) || !*((_QWORD *)this + 12) || !v38)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    v43 = v45[1];
    if (v43)
    {
      v44 = v43 << 6;
      do
      {
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)((char *)v45 + v44 - 48));
        v44 -= 64;
      }
      while (v44);
    }
    icu::UMemory::operator delete[](v45);
    goto LABEL_59;
  }
  if ((v20 & 0x80000000) == 0)
    bzero(v38, 4 * (v20 + 1));
  if (*((int *)this + 22) >= 1)
  {
    v39 = 0;
    v40 = 0;
    do
    {
      *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v40++) = icu::CanonicalIterator::getEquivalents(this, v18, (int *)(*((_QWORD *)this + 12) + v39), a3);
      v39 += 4;
      v18 = (const icu::UnicodeString *)((char *)v18 + 64);
    }
    while (v40 < *((int *)this + 22));
  }
  v41 = v45[1];
  if (v41)
  {
    v42 = v41 << 6;
    do
    {
      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)((char *)v45 + v42 - 48));
      v42 -= 64;
    }
    while (v42);
  }
  icu::UMemory::operator delete[](v45);
}

void icu::CanonicalIterator::~CanonicalIterator(icu::CanonicalIterator *this)
{
  icu::CanonicalIterator::cleanPieces(this);
  icu::UnicodeString::~UnicodeString((icu::CanonicalIterator *)((char *)this + 120));
  icu::UnicodeString::~UnicodeString((icu::CanonicalIterator *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::CanonicalIterator::~CanonicalIterator(this);
  icu::UMemory::operator delete(v1);
}

void icu::CanonicalIterator::cleanPieces(icu::CanonicalIterator *this)
{
  void *v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    v3 = *((_DWORD *)this + 22);
    if (v3 >= 1)
    {
      for (i = 0; i < v3; ++i)
      {
        v5 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * i);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 - 8);
          if (v6)
          {
            v7 = v6 << 6;
            do
            {
              icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(v5 - 64 + v7));
              v7 -= 64;
            }
            while (v7);
          }
          icu::UMemory::operator delete[]((void *)(v5 - 16));
          v3 = *((_DWORD *)this + 22);
        }
      }
      v2 = (void *)*((_QWORD *)this + 10);
    }
    uprv_free(v2);
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
  }
  v8 = (void *)*((_QWORD *)this + 12);
  if (v8)
  {
    uprv_free(v8);
    *((_QWORD *)this + 12) = 0;
  }
  v9 = (void *)*((_QWORD *)this + 13);
  if (v9)
  {
    uprv_free(v9);
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
  }
}

icu::UnicodeString *icu::CanonicalIterator::getSource@<X0>(UChar **this@<X0>, icu::UnicodeString *a2@<X8>)
{
  return icu::UnicodeString::UnicodeString(a2, this + 1);
}

uint64_t icu::CanonicalIterator::reset(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(this + 72) = 0;
  if (*(int *)(this + 112) >= 1)
  {
    v1 = 0;
    v2 = *(_QWORD *)(this + 104);
    do
      *(_DWORD *)(v2 + 4 * v1++) = 0;
    while (v1 < *(int *)(this + 112));
  }
  return this;
}

icu::UnicodeString *icu::CanonicalIterator::next@<X0>(icu::CanonicalIterator *this@<X0>, icu::UnicodeString *a2@<X8>)
{
  UChar **v3;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v3 = (UChar **)((char *)this + 120);
  if (*((_BYTE *)this + 72))
  {
    icu::UnicodeString::setToBogus((icu::CanonicalIterator *)((char *)this + 120));
  }
  else
  {
    if ((*((_WORD *)this + 64) & 1) != 0)
      v5 = 2;
    else
      v5 = *((_WORD *)this + 64) & 0x1F;
    *((_WORD *)this + 64) = v5;
    if (*((int *)this + 22) >= 1)
    {
      v6 = 0;
      do
      {
        v7 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v6) + ((uint64_t)*(int *)(*((_QWORD *)this + 13) + 4 * v6) << 6);
        v8 = *(unsigned __int16 *)(v7 + 8);
        v9 = (__int16)v8;
        v10 = v8 >> 5;
        if (v9 >= 0)
          v11 = v10;
        else
          v11 = *(unsigned int *)(v7 + 12);
        icu::UnicodeString::doAppend((uint64_t)v3, (const icu::UnicodeString *)v7, 0, v11);
        ++v6;
      }
      while (v6 < *((int *)this + 22));
    }
    v12 = *((unsigned int *)this + 28);
    if ((int)v12 < 1)
    {
LABEL_16:
      *((_BYTE *)this + 72) = 1;
    }
    else
    {
      v14 = *((_QWORD *)this + 12);
      v13 = *((_QWORD *)this + 13);
      v15 = v12 + 1;
      while (1)
      {
        v16 = (v15 - 2);
        v17 = *(_DWORD *)(v13 + 4 * v16) + 1;
        *(_DWORD *)(v13 + 4 * v16) = v17;
        if (v17 < *(_DWORD *)(v14 + 4 * v16))
          break;
        *(_DWORD *)(v13 + 4 * v16) = 0;
        if ((unint64_t)--v15 < 2)
          goto LABEL_16;
      }
    }
  }
  return icu::UnicodeString::UnicodeString(a2, v3);
}

_QWORD *icu::CanonicalIterator::getEquivalents(icu::CanonicalIterator *this, const icu::UnicodeString *a2, int *a3, UErrorCode *a4)
{
  _QWORD *v8;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  icu::UnicodeString *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  icu::UnicodeString *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  UChar **v34;
  uint64_t v35;
  UErrorCode v36;
  int v37;
  int v38;
  UChar *v39;
  void *v40[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  void *v46[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _OWORD v52[5];
  uint64_t v53;
  void (**v54)(icu::UnicodeString *__hidden);
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  UChar *v59[8];
  _BYTE v60[64];
  _BYTE v61[520];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v53 = 0;
  memset(v52, 0, sizeof(v52));
  if (*(int *)a4 > 0
    || (uhash_init((int32x2_t *)v52 + 1, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)a4), *(int *)a4 >= 1))
  {
    v8 = 0;
    goto LABEL_4;
  }
  *(_QWORD *)&v52[0] = (char *)v52 + 8;
  uhash_setKeyDeleter((uint64_t)v52 + 8, (uint64_t)uprv_deleteUObject);
  v10 = *a4;
  v51 = 0;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  *(_OWORD *)v46 = 0u;
  if (v10 > 0
    || (uhash_init((int32x2_t *)&v46[1], (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)a4), *(int *)a4 >= 1))
  {
    v8 = 0;
    goto LABEL_10;
  }
  v46[0] = &v46[1];
  uhash_setKeyDeleter((uint64_t)&v46[1], (uint64_t)uprv_deleteUObject);
  v8 = 0;
  v11 = *a4;
  v45 = 0;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  *(_OWORD *)v40 = 0u;
  if (v11 <= 0)
  {
    uhash_init((int32x2_t *)&v40[1], (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)a4);
    v8 = 0;
    if (*(int *)a4 > 0)
      goto LABEL_40;
    v40[0] = &v40[1];
    uhash_setKeyDeleter((uint64_t)&v40[1], (uint64_t)uprv_deleteUObject);
    if (*(int *)a4 > 0)
      goto LABEL_39;
    uhash_setValueDeleter(*(uint64_t *)&v52[0], (uint64_t)uprv_deleteUObject);
    uhash_setValueDeleter((uint64_t)v46[0], (uint64_t)uprv_deleteUObject);
    uhash_setValueDeleter((uint64_t)v40[0], (uint64_t)uprv_deleteUObject);
    memset(v61, 0, 512);
    v39 = (UChar *)v61;
    v12 = icu::UnicodeString::extract((uint64_t)a2, &v39, 256, (int *)a4);
    icu::CanonicalIterator::getEquivalents2((uint64_t)this, (uint64_t *)v40, (uint64_t)v61, v12, (int *)a4);
    v38 = -1;
    v13 = uhash_nextElement((uint64_t *)v40[0], &v38);
    if (v13)
    {
      v14 = v13;
      while (1)
      {
        memset(v60, 0, sizeof(v60));
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v60, *(UChar ***)(v14 + 8));
        uhash_removeAll((uint64_t)v46[0]);
        icu::CanonicalIterator::permute((uint64_t)v60, 1, (uint64_t *)v46, (int *)a4);
        v37 = -1;
        v15 = uhash_nextElement((uint64_t *)v46[0], &v37);
        if (v15)
          break;
LABEL_37:
        v14 = uhash_nextElement((uint64_t *)v40[0], &v38);
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v60);
        if (!v14)
          goto LABEL_38;
      }
      v16 = v15;
      while (1)
      {
        memset(v59, 0, sizeof(v59));
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v59, *(UChar ***)(v16 + 8));
        v58 = 0;
        v56 = 0u;
        v57 = 0u;
        v55 = 0u;
        v54 = off_1E2256B38;
        LOWORD(v55) = 2;
        (*(void (**)(_QWORD, UChar **, void (***)(icu::UnicodeString *__hidden), UErrorCode *))(**((_QWORD **)this + 23) + 24))(*((_QWORD *)this + 23), v59, &v54, a4);
        if ((v55 & 1) != 0)
        {
          if ((*((_WORD *)a2 + 4) & 1) != 0)
            goto LABEL_31;
        }
        else
        {
          if ((v55 & 0x8000u) == 0)
            v18 = (unsigned __int16)v55 >> 5;
          else
            v18 = DWORD1(v55);
          v19 = *((unsigned __int16 *)a2 + 4);
          if ((v19 & 0x8000u) == 0)
            v20 = v19 >> 5;
          else
            v20 = *((_DWORD *)a2 + 3);
          if ((v19 & 1) == 0 && v18 == v20 && icu::UnicodeString::doEquals((icu::UnicodeString *)&v54, a2, v18))
          {
LABEL_31:
            v21 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v17);
            v23 = (uint64_t)v21;
            if (v21)
              icu::UnicodeString::UnicodeString(v21, v59);
            v24 = *(_QWORD *)&v52[0];
            v25 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v22);
            v26 = (uint64_t)v25;
            if (v25)
              icu::UnicodeString::UnicodeString(v25, v59);
            uhash_put(v24, v26, v23, (int *)a4);
          }
        }
        v16 = uhash_nextElement((uint64_t *)v46[0], &v37);
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v54);
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v59);
        if (!v16)
          goto LABEL_37;
      }
    }
LABEL_38:
    if (*(int *)a4 > 0)
    {
LABEL_39:
      v8 = 0;
      goto LABEL_40;
    }
    v27 = uhash_count(*(uint64_t *)&v52[0]);
    if (v27)
    {
      v29 = v27;
      if (v27 < 0)
        v30 = -1;
      else
        v30 = ((uint64_t)v27 << 6) | 0x10;
      v31 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v30, v28);
      if (v31)
      {
        *v31 = 64;
        v31[1] = v29;
        v8 = v31 + 2;
        v32 = v31 + 2;
        do
        {
          *v32 = off_1E2256B38;
          *((_WORD *)v32 + 4) = 2;
          v32 += 8;
        }
        while (v32 != &v31[8 * v29 + 2]);
        *a3 = 0;
        v38 = -1;
        while (1)
        {
          v33 = uhash_nextElement(*(uint64_t **)&v52[0], &v38);
          if (!v33)
            break;
          v34 = *(UChar ***)(v33 + 8);
          v35 = *a3;
          *a3 = v35 + 1;
          icu::UnicodeString::operator=((UChar **)&v8[8 * v35], v34);
        }
LABEL_40:
        if (v40[0])
          uhash_close((void **)v40[0]);
        goto LABEL_10;
      }
      v36 = U_MEMORY_ALLOCATION_ERROR;
    }
    else
    {
      v36 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    v8 = 0;
    *a4 = v36;
    goto LABEL_40;
  }
LABEL_10:
  if (v46[0])
    uhash_close((void **)v46[0]);
LABEL_4:
  if (*(_QWORD *)&v52[0])
    uhash_close(*(void ***)&v52[0]);
  return v8;
}

void icu::CanonicalIterator::permute(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  unsigned int v8;
  int v9;
  int v10;
  unint64_t v11;
  icu::UnicodeString *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  icu::UnicodeString *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  UChar **v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  icu::UnicodeString *v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  void *v45[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _OWORD v51[4];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (*a4 > 0)
    return;
  v8 = *(unsigned __int16 *)(a1 + 8);
  v9 = (__int16)v8;
  v10 = v8 >> 5;
  if (v9 < 0)
    v10 = *(_DWORD *)(a1 + 12);
  if (v10 > 2)
  {
    v50 = 0;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    *(_OWORD *)v45 = 0u;
  }
  else
  {
    if ((int)icu::UnicodeString::countChar32((icu::UnicodeString *)a1, 0, 0x7FFFFFFF) < 2)
    {
      v12 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v11);
      if (v12)
      {
        v13 = (uint64_t)v12;
        icu::UnicodeString::UnicodeString(v12, (UChar **)a1);
        v14 = *a3;
        v16 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v15);
        v17 = (uint64_t)v16;
        if (v16)
          icu::UnicodeString::UnicodeString(v16, (UChar **)a1);
        uhash_put(v14, v17, v13, a4);
      }
      else
      {
        *a4 = 7;
      }
      return;
    }
    v43 = *a4;
    v50 = 0;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    *(_OWORD *)v45 = 0u;
    if (v43 > 0)
      return;
  }
  uhash_init((int32x2_t *)&v45[1], (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, a4);
  if (*a4 <= 0)
  {
    v45[0] = &v45[1];
    uhash_setKeyDeleter((uint64_t)&v45[1], (uint64_t)uprv_deleteUObject);
    if (*a4 <= 0)
    {
      uhash_setValueDeleter((uint64_t)v45[0], (uint64_t)uprv_deleteUObject);
      v18 = *(unsigned __int16 *)(a1 + 8);
      v19 = (__int16)v18;
      v20 = v18 >> 5;
      if (v19 < 0)
        v20 = *(_DWORD *)(a1 + 12);
      if (v20 >= 1)
      {
        v21 = 0;
        do
        {
          v22 = icu::UnicodeString::char32At((icu::UnicodeString *)a1, v21);
          v44 = -1;
          memset(v51, 0, sizeof(v51));
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)v51, (UChar **)a1);
          if (!(_DWORD)a2 || !(_DWORD)v21 || u_getCombiningClass(v22))
          {
            uhash_removeAll((uint64_t)v45[0]);
            if (v22 < 0x10000)
              v23 = 1;
            else
              v23 = 2;
            v24 = icu::UnicodeString::doReplace((uint64_t)v51, v21, v23, 0, 0, 0);
            icu::CanonicalIterator::permute(v24, a2, v45, a4);
            if (*a4 > 0)
            {
LABEL_44:
              icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v51);
              break;
            }
            while (1)
            {
              v25 = uhash_nextElement((uint64_t *)v45[0], &v44);
              if (!v25)
                break;
              v27 = *(_QWORD *)(v25 + 8);
              v28 = icu::UMemory::operator new((icu::UMemory *)0x40, v26);
              if (!v28)
              {
                *a4 = 7;
                goto LABEL_44;
              }
              v29 = (UChar **)v28;
              v30 = icu::UnicodeString::UnicodeString(v28, v22);
              v31 = *(unsigned __int16 *)(v27 + 8);
              v32 = (__int16)v31;
              v33 = v31 >> 5;
              if (v32 >= 0)
                v34 = v33;
              else
                v34 = *(unsigned int *)(v27 + 12);
              icu::UnicodeString::doAppend(v30, (const icu::UnicodeString *)v27, 0, v34);
              v35 = *a3;
              v37 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v36);
              v38 = (uint64_t)v37;
              if (v37)
                icu::UnicodeString::UnicodeString(v37, v29);
              uhash_put(v35, v38, (uint64_t)v29, a4);
            }
          }
          icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v51);
          if (v22 < 0x10000)
            v39 = 1;
          else
            v39 = 2;
          v21 = (v39 + v21);
          v40 = *(unsigned __int16 *)(a1 + 8);
          v41 = (__int16)v40;
          v42 = v40 >> 5;
          if (v41 < 0)
            v42 = *(_DWORD *)(a1 + 12);
        }
        while ((int)v21 < v42);
      }
    }
  }
  if (v45[0])
    uhash_close((void **)v45[0]);
}

uint64_t sub_18BBB11FC(uint64_t *a1, UChar **a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  icu::UnicodeString *v8;
  uint64_t v9;

  v7 = *a1;
  v8 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, (unint64_t)a2);
  v9 = (uint64_t)v8;
  if (v8)
    icu::UnicodeString::UnicodeString(v8, a2);
  return uhash_put(v7, v9, a3, a4);
}

uint64_t *icu::CanonicalIterator::getEquivalents2(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t *v5;
  int v7;
  unint64_t v9;
  icu::UnicodeString *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  icu::UnicodeString *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  icu::UnicodeString *v29;
  UChar **v30;
  icu::UnicodeString *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  icu::UnicodeString *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v41;
  void *v42[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _OWORD v48[4];
  _BYTE v49[192];
  uint64_t v50;
  _DWORD v51[16];
  UChar *v52[8];
  UChar *v53[12];

  v53[9] = *(UChar **)MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return 0;
  v7 = a4;
  v5 = a2;
  memset(v53, 0, 64);
  icu::UnicodeString::UnicodeString((uint64_t)v53, a3, a4);
  v10 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v9);
  v12 = (uint64_t)v10;
  if (v10)
    icu::UnicodeString::UnicodeString(v10, v53);
  v13 = *v5;
  v14 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v11);
  v15 = (uint64_t)v14;
  if (v14)
    icu::UnicodeString::UnicodeString(v14, v53);
  uhash_put(v13, v15, v12, a5);
  v50 = 0;
  memset(v49, 0, sizeof(v49));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v49);
  v16 = a1;
  if (v7 < 1)
  {
LABEL_47:
    if (*a5 >= 1)
      v5 = 0;
    goto LABEL_51;
  }
  v17 = 0;
  while (1)
  {
    v18 = *(unsigned __int16 *)(a3 + 2 * v17);
    if ((v18 & 0xF800) != 0xD800)
      goto LABEL_18;
    if ((v18 & 0x400) != 0)
    {
      if (!(_DWORD)v17)
        goto LABEL_18;
      v22 = *(unsigned __int16 *)(a3 + 2 * (v17 - 1));
      v20 = (v22 & 0xFC00) == 55296;
      v21 = v18 + (v22 << 10);
    }
    else
    {
      if ((_DWORD)v17 + 1 == v7)
        goto LABEL_18;
      v19 = *(unsigned __int16 *)(a3 + 2 * (v17 + 1));
      v20 = (v19 & 0xFC00) == 56320;
      v21 = v19 + (v18 << 10);
    }
    v23 = v21 - 56613888;
    if (v20)
      v18 = v23;
LABEL_18:
    if (icu::Normalizer2Impl::getCanonStartSet(*(icu::Normalizer2Impl **)(v16 + 192), v18, (icu::UnicodeSet *)v49))break;
LABEL_43:
    if (v18 < 0x10000)
      v38 = 1;
    else
      v38 = 2;
    v17 = (v38 + v17);
    if ((int)v17 >= v7)
      goto LABEL_47;
  }
  memset(v48, 0, sizeof(v48));
  icu::UnicodeSetIterator::UnicodeSetIterator((icu::UnicodeSetIterator *)v48, (const icu::UnicodeSet *)v49);
  if (!icu::UnicodeSetIterator::next((icu::UnicodeSetIterator *)v48))
  {
LABEL_42:
    icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v48);
    goto LABEL_43;
  }
  while (1)
  {
    v24 = DWORD2(v48[0]);
    v47 = 0;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    *(_OWORD *)v42 = 0u;
    if (*a5 <= 0)
    {
      uhash_init((int32x2_t *)&v42[1], (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, a5);
      if (*a5 <= 0)
      {
        v42[0] = &v42[1];
        uhash_setKeyDeleter((uint64_t)&v42[1], (uint64_t)uprv_deleteUObject);
      }
    }
    uhash_setValueDeleter((uint64_t)v42[0], (uint64_t)uprv_deleteUObject);
    if (icu::CanonicalIterator::extract(v16, (uint64_t *)v42, v24, a3, v7, v17, a5))
    {
      memset(v52, 0, sizeof(v52));
      v25 = icu::UnicodeString::UnicodeString((uint64_t)v52, a3, v17);
      icu::UnicodeString::append(v25, v24);
      v41 = -1;
      v26 = uhash_nextElement((uint64_t *)v42[0], &v41);
      if (v26)
      {
        v27 = v26;
        while (1)
        {
          memset(v51, 0, sizeof(v51));
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)v51, *(UChar ***)(v27 + 8));
          v29 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v28);
          if (!v29)
            break;
          v30 = (UChar **)v29;
          v31 = icu::UnicodeString::UnicodeString(v29, v52);
          if (SLOWORD(v51[2]) >= 0)
            v32 = LOWORD(v51[2]) >> 5;
          else
            v32 = v51[3];
          icu::UnicodeString::doAppend((uint64_t)v31, (const icu::UnicodeString *)v51, 0, v32);
          v33 = *v5;
          v35 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v34);
          v36 = (uint64_t)v35;
          if (v35)
            icu::UnicodeString::UnicodeString(v35, v30);
          uhash_put(v33, v36, (uint64_t)v30, a5);
          v27 = uhash_nextElement((uint64_t *)v42[0], &v41);
          icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v51);
          if (!v27)
            goto LABEL_33;
        }
        *a5 = 7;
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v51);
        v37 = 1;
      }
      else
      {
LABEL_33:
        v37 = 0;
      }
      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v52);
    }
    else
    {
      v37 = 7;
    }
    if (v42[0])
      uhash_close((void **)v42[0]);
    if (v37 != 7 && v37)
      break;
    v16 = a1;
    if (!icu::UnicodeSetIterator::next((icu::UnicodeSetIterator *)v48))
      goto LABEL_42;
  }
  icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v48);
  v5 = 0;
LABEL_51:
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v49);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v53);
  return v5;
}

uint64_t icu::CanonicalIterator::extract(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, int a5, int a6, int *a7)
{
  uint64_t Equivalents2;
  int v14;
  unsigned __int16 *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  int v31;
  BOOL v32;
  int v33;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t *v40;
  int v41;
  int v42;
  uint64_t v43;
  UChar *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  void (**v49)(icu::UnicodeString *__hidden);
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (*a7 > 0)
    return 0;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  icu::UnicodeString::UnicodeString((uint64_t)&v54, a3);
  if ((SWORD4(v54) & 0x8000u) == 0)
    v14 = WORD4(v54) >> 5;
  else
    v14 = HIDWORD(v54);
  v50 = 0u;
  v53 = 0;
  v52 = 0u;
  v51 = 0u;
  v49 = off_1E2256B38;
  LOWORD(v50) = 2;
  (*(void (**)(_QWORD, __int128 *, void (***)(icu::UnicodeString *__hidden), int *))(**(_QWORD **)(a1 + 184) + 24))(*(_QWORD *)(a1 + 184), &v54, &v49, a7);
  Equivalents2 = 0;
  if (*a7 > 0)
    goto LABEL_56;
  if ((v50 & 1) != 0)
  {
    Equivalents2 = 0;
    *a7 = 7;
    goto LABEL_56;
  }
  v41 = v14;
  v42 = a6;
  if ((v50 & 0x11) != 0)
  {
    v15 = 0;
  }
  else if ((v50 & 2) != 0)
  {
    v15 = (unsigned __int16 *)&v50 + 1;
  }
  else
  {
    v15 = (unsigned __int16 *)v51;
  }
  if ((v50 & 0x8000u) == 0)
    v16 = (unsigned __int16)v50 >> 5;
  else
    v16 = DWORD1(v50);
  v17 = *v15;
  v18 = 1;
  if ((v17 & 0xFC00) == 0xD800 && v16 != 1)
  {
    v19 = v15[1];
    v20 = (v19 & 0xFC00) == 56320;
    v21 = v19 + (v17 << 10) - 56613888;
    v18 = v20 ? 2 : 1;
    if (v20)
      v17 = v21;
  }
  if (a5 <= v42)
  {
LABEL_55:
    Equivalents2 = 0;
    goto LABEL_56;
  }
  v40 = a2;
  v22 = v42;
  while (1)
  {
    v23 = v22 + 1;
    v24 = *(unsigned __int16 *)(a4 + 2 * v22);
    if ((v24 & 0xFC00) != 0xD800 || (_DWORD)v23 == a5)
    {
      ++v22;
    }
    else
    {
      v26 = *(unsigned __int16 *)(a4 + 2 * v23);
      v27 = (v26 & 0xFC00) == 56320;
      v28 = (v24 << 10) - 56613888 + v26;
      if (v27)
        v24 = v28;
      if (v27)
        v22 += 2;
      else
        ++v22;
    }
    if (v24 == v17)
      break;
    icu::UnicodeString::append((uint64_t)&v54, v24);
LABEL_54:
    if (a5 <= v22)
      goto LABEL_55;
  }
  if (v18 != v16)
  {
    v29 = v18 + 1;
    v17 = v15[v18];
    if ((v17 & 0xFC00) != 0xD800 || (_DWORD)v29 == v16)
    {
      ++v18;
    }
    else
    {
      v31 = v15[v29];
      v32 = (v31 & 0xFC00) == 56320;
      v33 = (v17 << 10) - 56613888 + v31;
      if (v32)
        v18 += 2;
      else
        ++v18;
      if (v32)
        v17 = v33;
    }
    goto LABEL_54;
  }
  icu::UnicodeString::doAppend((uint64_t)&v54, a4 + 2 * v22, 0, (a5 - v22));
  v36 = WORD4(v54) >> 5;
  if (SWORD4(v54) < 0)
    v36 = HIDWORD(v54);
  if (v41 == v36)
  {
    v44 = (UChar *)off_1E2256B38;
    LOWORD(v45) = 2;
    v37 = icu::UMemory::operator new((icu::UMemory *)0x40, v35);
    Equivalents2 = (uint64_t)v40;
    if (v37)
    {
      *(_QWORD *)v37 = off_1E2256B38;
      *(_WORD *)(v37 + 8) = 2;
    }
    sub_18BBB11FC(v40, &v44, v37, a7);
  }
  else
  {
    v45 = 0u;
    v48 = 0;
    v47 = 0u;
    v46 = 0u;
    v44 = (UChar *)off_1E2256B38;
    LOWORD(v45) = 2;
    (*(void (**)(_QWORD, __int128 *, UChar **, int *))(**(_QWORD **)(a1 + 184) + 24))(*(_QWORD *)(a1 + 184), &v54, &v44, a7);
    Equivalents2 = 0;
    if (*a7 <= 0)
    {
      v43 = a4 + 2 * v42;
      if (sub_18BBB1AB4((uint64_t)&v44, &v43, a5 - v42))
      {
        Equivalents2 = 0;
      }
      else
      {
        if ((BYTE8(v54) & 0x11) != 0)
        {
          v38 = 0;
        }
        else if ((BYTE8(v54) & 2) != 0)
        {
          v38 = (unint64_t)&v54 | 0xA;
        }
        else
        {
          v38 = *((_QWORD *)&v55 + 1);
        }
        v39 = WORD4(v54) >> 5;
        if (SWORD4(v54) < 0)
          v39 = HIDWORD(v54);
        Equivalents2 = icu::CanonicalIterator::getEquivalents2(a1, v40, v38 + 2 * v41, (v39 - v41), a7);
      }
    }
  }
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v44);
LABEL_56:
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v49);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v54);
  return Equivalents2;
}

uint64_t sub_18BBB1AB4(uint64_t a1, uint64_t *a2, int32_t a3)
{
  int32_t v4;

  if (*(__int16 *)(a1 + 8) < 0)
    v4 = *(_DWORD *)(a1 + 12);
  else
    v4 = *(unsigned __int16 *)(a1 + 8) >> 5;
  return icu::UnicodeString::doCompare(a1, 0, v4, *a2, 0, a3);
}

uint64_t sub_18BBB1AE0(uint64_t a1, int *a2)
{
  unsigned int *v4;
  uint64_t v5;

  if (*a2 > 0)
    return 0;
  if ((a1 - 4096) > 0x18)
  {
    v5 = sub_18BC5A4BC(a1);
    return sub_18BBB1D74(v5, a2);
  }
  else
  {
    v4 = (unsigned int *)&qword_1ECD26D78[2 * (a1 - 4078)];
    sub_18BBB1B60(v4 + 2, (void (*)(uint64_t, int *))sub_18BBB1BEC, a1, a2);
    return *(_QWORD *)v4;
  }
}

void sub_18BBB1B60(unsigned int *a1, void (*a2)(uint64_t, int *), uint64_t a3, int *a4)
{
  unsigned int v6;
  int v9;

  if (*a4 <= 0)
  {
    v6 = atomic_load(a1);
    if (v6 == 2 || !icu::umtx_initImplPreInit(a1))
    {
      v9 = a1[1];
      if (v9 >= 1)
        *a4 = v9;
    }
    else
    {
      a2(a3, a4);
      a1[1] = *a4;
      icu::umtx_initImplPostInit(a1);
    }
  }
}

void sub_18BBB1BEC(UProperty a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  icu::UnicodeSet *v7;
  icu::UnicodeSet *v8;
  icu::UnicodeSet *v9;
  int RangeCount;
  int v11;
  int v12;
  int32_t v13;
  signed int RangeEnd;
  signed int RangeStart;
  unsigned int v16;
  int v17;
  int32_t IntPropertyValue;
  int32_t v19;
  void *v20;

  v4 = sub_18BC5A4BC(a1);
  v5 = sub_18BBB1D74(v4, a2);
  if (*a2 <= 0)
  {
    v7 = (icu::UnicodeSet *)v5;
    v8 = (icu::UnicodeSet *)icu::UMemory::operator new((icu::UMemory *)0xC8, v6);
    if (v8)
    {
      v9 = v8;
      icu::UnicodeSet::UnicodeSet(v8, 0, 0);
      RangeCount = icu::UnicodeSet::getRangeCount(v7);
      if (RangeCount >= 1)
      {
        v11 = RangeCount;
        v12 = 0;
        v13 = 0;
        do
        {
          RangeEnd = icu::UnicodeSet::getRangeEnd(v7, v12);
          RangeStart = icu::UnicodeSet::getRangeStart(v7, v12);
          if (RangeStart <= RangeEnd)
          {
            v16 = RangeStart;
            v17 = RangeEnd + 1;
            do
            {
              IntPropertyValue = u_getIntPropertyValue(v16, a1);
              if (IntPropertyValue != v13)
              {
                v19 = IntPropertyValue;
                icu::UnicodeSet::add(v9, v16);
                v13 = v19;
              }
              ++v16;
            }
            while (v17 != v16);
          }
          ++v12;
        }
        while (v12 != v11);
      }
      if ((*((_BYTE *)v9 + 32) & 1) != 0)
      {
        *a2 = 7;
        icu::UnicodeSet::~UnicodeSet(v9);
        icu::UMemory::operator delete(v20);
      }
      else
      {
        icu::UnicodeSet::compact(v9);
        qword_1ECD26D78[2 * a1 - 8156] = (uint64_t)v9;
        sub_18BC0ECC4(0x11u, (uint64_t)sub_18BBB2280);
      }
    }
    else
    {
      *a2 = 7;
    }
  }
}

uint64_t sub_18BBB1D74(uint64_t a1, int *a2)
{
  uint64_t result;
  unsigned int *v3;

  if (*a2 > 0)
    return 0;
  if (a1 < 0x12)
  {
    v3 = (unsigned int *)&qword_1ECD26D78[2 * a1];
    sub_18BBB1B60(v3 + 2, sub_18BBB2320, a1, a2);
    return *(_QWORD *)v3;
  }
  else
  {
    result = 0;
    *a2 = 1;
  }
  return result;
}

icu::UnicodeSet *sub_18BBB1DE0(uint64_t a1, UErrorCode *a2)
{
  icu::UnicodeSet *v2;
  unint64_t v5;
  uint64_t v6;
  icu::UnicodeSet *v7;
  uint64_t v8;
  icu::UnicodeSet *v9;
  void *v10;
  icu::UnicodeSet *v12;
  int RangeCount;
  int v14;
  int v15;
  signed int v16;
  int RangeEnd;
  int RangeStart;
  unsigned int v19;
  _QWORD v20[6];

  if (*(int *)a2 <= 0)
  {
    if (a1 >= 0x4B)
    {
      v2 = 0;
      *a2 = U_ILLEGAL_ARGUMENT_ERROR;
      return v2;
    }
    umtx_lock((icu::UMutex *)&unk_1ECD27280);
    v2 = (icu::UnicodeSet *)qword_1ECD27028[a1];
    if (v2)
    {
LABEL_16:
      umtx_unlock((std::mutex **)&unk_1ECD27280);
      return v2;
    }
    v6 = a1;
    if (*(int *)a2 > 0)
      goto LABEL_14;
    v7 = (icu::UnicodeSet *)icu::UMemory::operator new((icu::UMemory *)0xC8, v5);
    v2 = v7;
    if (!v7)
    {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_15;
    }
    icu::UnicodeSet::UnicodeSet(v7);
    if ((a1 - 65) > 6)
      goto LABEL_12;
    v8 = sub_18BBB9220(a2);
    if (*(int *)a2 > 0)
    {
LABEL_13:
      icu::UnicodeSet::~UnicodeSet(v2);
      icu::UMemory::operator delete(v10);
LABEL_14:
      v2 = 0;
LABEL_15:
      qword_1ECD27028[v6] = (uint64_t)v2;
      goto LABEL_16;
    }
    v20[0] = v2;
    v20[1] = icu::UnicodeSet::add;
    v20[2] = icu::UnicodeSet::add;
    v20[3] = sub_18BBB254C;
    v20[4] = 0;
    v20[5] = 0;
    sub_18BBB9798(v8, (uint64_t)v20, a1, a2);
    if ((_DWORD)a1 == 71 || (_DWORD)a1 == 65)
    {
LABEL_12:
      v9 = (icu::UnicodeSet *)sub_18BBB1AE0(a1, (int *)a2);
      if (*(int *)a2 > 0)
        goto LABEL_13;
      v12 = v9;
      RangeCount = icu::UnicodeSet::getRangeCount(v9);
      if (RangeCount >= 1)
      {
        v14 = RangeCount;
        v15 = 0;
        v16 = -1;
        do
        {
          RangeEnd = icu::UnicodeSet::getRangeEnd(v12, v15);
          RangeStart = icu::UnicodeSet::getRangeStart(v12, v15);
          if (RangeStart <= RangeEnd)
          {
            v19 = RangeStart - 1;
            do
            {
              if (u_hasBinaryProperty(v19 + 1, (UProperty)a1))
              {
                if (v16 < 0)
                  v16 = v19 + 1;
              }
              else if ((v16 & 0x80000000) == 0)
              {
                icu::UnicodeSet::add(v2, v16, v19);
                v16 = -1;
              }
              ++v19;
            }
            while (RangeEnd != v19);
          }
          ++v15;
        }
        while (v15 != v14);
        v6 = a1;
        if ((v16 & 0x80000000) == 0)
          icu::UnicodeSet::add(v2, v16, 0x10FFFFu);
      }
    }
    icu::UnicodeSet::freeze(v2);
    goto LABEL_15;
  }
  return 0;
}

const USet *__cdecl u_getBinaryPropertySet(UProperty property, UErrorCode *pErrorCode)
{
  const USet *result;

  result = sub_18BBB1DE0(*(uint64_t *)&property, pErrorCode);
  if (*(int *)pErrorCode > 0)
    return 0;
  return result;
}

const UCPMap *__cdecl u_getIntPropertyMap(UProperty property, UErrorCode *pErrorCode)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void **v7;
  icu::UnicodeSet *v8;
  icu::UnicodeSet *v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  UChar32 RangeEnd;
  UChar32 RangeStart;
  unint64_t v15;
  UChar32 v16;
  int v17;
  unint64_t IntPropertyValue;
  icu::UnicodeSet *v20;
  int RangeCount;

  if (*(int *)pErrorCode > 0)
    return 0;
  v4 = *(_QWORD *)&property;
  if ((property - 4121) > 0xFFFFFFE6)
  {
    umtx_lock((icu::UMutex *)&unk_1ECD27280);
    v5 = (v4 - 4096);
    v2 = (char *)qword_1EE009140[v5];
    if (!v2)
    {
      if (*(int *)pErrorCode <= 0)
      {
        if ((_DWORD)v4 == 4106)
          v6 = 103;
        else
          v6 = 0;
        v7 = umutablecptrie_open(v6, v6, (int *)pErrorCode);
        v8 = (icu::UnicodeSet *)sub_18BBB1AE0(v4, (int *)pErrorCode);
        if (*(int *)pErrorCode <= 0)
        {
          v9 = v8;
          RangeCount = icu::UnicodeSet::getRangeCount(v8);
          if (RangeCount < 1)
          {
            v11 = 0;
            LODWORD(v15) = v6;
          }
          else
          {
            v10 = 0;
            v11 = 0;
            v12 = v6;
            v20 = v9;
            do
            {
              RangeEnd = icu::UnicodeSet::getRangeEnd(v9, v10);
              RangeStart = icu::UnicodeSet::getRangeStart(v9, v10);
              if (RangeStart <= RangeEnd)
              {
                v16 = RangeStart;
                v17 = RangeEnd + 1;
                do
                {
                  IntPropertyValue = u_getIntPropertyValue(v16, (UProperty)v4);
                  if ((_DWORD)v12 == (_DWORD)IntPropertyValue)
                  {
                    v15 = v12;
                  }
                  else
                  {
                    v15 = IntPropertyValue;
                    if ((_DWORD)v12 != (_DWORD)v6)
                      umutablecptrie_setRange((uint64_t)v7, v11, v16 - 1, v12, (int *)pErrorCode);
                    v11 = v16;
                  }
                  ++v16;
                  v12 = v15;
                }
                while (v17 != v16);
              }
              else
              {
                v15 = v12;
              }
              ++v10;
              v12 = v15;
              v9 = v20;
            }
            while (v10 != RangeCount);
          }
          if ((_DWORD)v15)
            umutablecptrie_setRange((uint64_t)v7, v11, 1114111, v15, (int *)pErrorCode);
          u_getIntPropertyMaxValue((UProperty)v4);
          v2 = umutablecptrie_buildImmutable();
          v5 = (v4 - 4096);
        }
        else
        {
          v2 = 0;
        }
        if (v7)
          umutablecptrie_close(v7);
      }
      else
      {
        v2 = 0;
      }
      qword_1EE009140[v5] = (uint64_t)v2;
    }
    umtx_unlock((std::mutex **)&unk_1ECD27280);
  }
  else
  {
    v2 = 0;
    *pErrorCode = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return (const UCPMap *)v2;
}

uint64_t sub_18BBB2280()
{
  icu::UnicodeSet **v0;
  void *v1;
  unsigned int *v2;
  uint64_t i;
  icu::UnicodeSet *v4;
  void *v5;
  uint64_t j;

  v0 = (icu::UnicodeSet **)&qword_1ECD26D78;
  do
  {
    if (*v0)
    {
      icu::UnicodeSet::~UnicodeSet(*v0);
      icu::UMemory::operator delete(v1);
    }
    v2 = (unsigned int *)(v0 + 1);
    *v0 = 0;
    v0 += 2;
    atomic_store(0, v2);
  }
  while (v0 != (icu::UnicodeSet **)qword_1ECD27028);
  for (i = 0; i != 75; ++i)
  {
    v4 = (icu::UnicodeSet *)qword_1ECD27028[i];
    if (v4)
    {
      icu::UnicodeSet::~UnicodeSet(v4);
      icu::UMemory::operator delete(v5);
    }
    qword_1ECD27028[i] = 0;
  }
  for (j = 0; j != 25; ++j)
  {
    ucptrie_close(qword_1EE009140[j]);
    qword_1EE009140[j] = 0;
  }
  return 1;
}

void sub_18BBB2320(uint64_t a1, int *a2)
{
  icu::UnicodeSet *v4;
  icu::UnicodeSet *v5;
  UErrorCode *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t NFCImpl;
  uint64_t NFKCImpl;
  icu::Normalizer2Impl *v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[6];

  if (!(_DWORD)a1)
  {
    v10 = 5;
LABEL_7:
    *a2 = v10;
    return;
  }
  v4 = (icu::UnicodeSet *)icu::UMemory::operator new((icu::UMemory *)0xC8, (unint64_t)a2);
  if (!v4)
  {
    v10 = 7;
    goto LABEL_7;
  }
  v5 = v4;
  icu::UnicodeSet::UnicodeSet(v4);
  v16[0] = v7;
  v16[1] = icu::UnicodeSet::add;
  v16[2] = icu::UnicodeSet::add;
  v16[3] = sub_18BBB254C;
  v16[4] = 0;
  v16[5] = 0;
  v8 = 5;
  switch((int)a1)
  {
    case 1:
      sub_18BC0B81C((uint64_t)v16, a2);
      goto LABEL_27;
    case 2:
      goto LABEL_11;
    case 4:
      goto LABEL_14;
    case 5:
      sub_18BC01F54((uint64_t)v16, a2);
      goto LABEL_27;
    case 6:
      sub_18BC0B81C((uint64_t)v16, a2);
LABEL_11:
      sub_18BC0BA5C((uint64_t)v16, a2);
      goto LABEL_27;
    case 7:
      NFCImpl = icu::Normalizer2Factory::getNFCImpl((icu::Normalizer2Factory *)a2, v6);
      if (*a2 <= 0)
        icu::Normalizer2Impl::addPropertyStarts(NFCImpl, v16);
LABEL_14:
      sub_18BC05CC8((uint64_t)v16, a2);
      goto LABEL_27;
    case 8:
      NFKCImpl = icu::Normalizer2Factory::getNFCImpl((icu::Normalizer2Factory *)a2, v6);
      goto LABEL_18;
    case 9:
      NFKCImpl = icu::Normalizer2Factory::getNFKCImpl((icu::Normalizer2Factory *)a2, v6);
      goto LABEL_18;
    case 10:
      NFKCImpl = icu::Normalizer2Factory::getNFKC_CFImpl((icu::Normalizer2Factory *)a2, v6);
LABEL_18:
      if (*a2 > 0)
        goto LABEL_32;
      icu::Normalizer2Impl::addPropertyStarts(NFKCImpl, v16);
      goto LABEL_27;
    case 11:
      v13 = (icu::Normalizer2Impl *)icu::Normalizer2Factory::getNFCImpl((icu::Normalizer2Factory *)a2, v6);
      if (*a2 > 0)
        goto LABEL_32;
      icu::Normalizer2Impl::addCanonIterPropertyStarts(v13, (uint64_t)v16, (UErrorCode *)a2);
      goto LABEL_27;
    case 12:
    case 13:
    case 14:
      v9 = a1;
      goto LABEL_26;
    case 15:
      v14 = sub_18BBB9220((UErrorCode *)a2);
      if (*a2 > 0)
        goto LABEL_32;
      sub_18BBB945C(v14, (uint64_t)v16);
      goto LABEL_27;
    case 16:
      icu::UnicodeSet::add(v5, 0x2FFEu);
      icu::UnicodeSet::add(v5, 0x3000u);
      goto LABEL_27;
    case 17:
      v9 = 17;
LABEL_26:
      sub_18BC5A584(v9, v16, (UErrorCode *)a2);
LABEL_27:
      if (*a2 > 0)
        goto LABEL_32;
      if ((*((_BYTE *)v5 + 32) & 1) != 0)
      {
        v8 = 7;
LABEL_31:
        *a2 = v8;
LABEL_32:
        icu::UnicodeSet::~UnicodeSet(v5);
        icu::UMemory::operator delete(v15);
      }
      else
      {
        icu::UnicodeSet::compact(v5);
        qword_1ECD26D78[2 * a1] = (uint64_t)v5;
        sub_18BC0ECC4(0x11u, (uint64_t)sub_18BBB2280);
      }
      break;
    default:
      goto LABEL_31;
  }
}

void sub_18BBB254C(icu::UnicodeSet *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  _BYTE v5[64];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  icu::UnicodeString::UnicodeString(v5, a3 >> 31, &v4);
  icu::UnicodeSet::add(a1, (const icu::UnicodeString *)v5);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v5);
}

_QWORD *icu::ForwardCharacterIterator::ForwardCharacterIterator(_QWORD *this)
{
  *this = off_1E22467C0;
  return this;
}

_QWORD *icu::ForwardCharacterIterator::ForwardCharacterIterator(_QWORD *this, const icu::ForwardCharacterIterator *a2)
{
  *this = off_1E22467C0;
  return this;
}

_QWORD *icu::CharacterIterator::CharacterIterator(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = off_1E2246810;
  return this;
}

uint64_t icu::CharacterIterator::CharacterIterator(uint64_t this, int a2)
{
  *(_QWORD *)this = off_1E2246810;
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 20) = a2;
  if (a2 < 0)
  {
    *(_DWORD *)(this + 20) = 0;
    *(_DWORD *)(this + 8) = 0;
  }
  return this;
}

uint64_t icu::CharacterIterator::CharacterIterator(uint64_t this, unsigned int a2, unsigned int a3)
{
  *(_QWORD *)this = off_1E2246810;
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a3;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 20) = a2;
  if ((a2 & 0x80000000) == 0)
  {
    if ((a3 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    a2 = 0;
    goto LABEL_7;
  }
  a2 = 0;
  *(_DWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 8) = 0;
  if ((a3 & 0x80000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (a2 < a3)
LABEL_7:
    *(_DWORD *)(this + 12) = a2;
  return this;
}

uint64_t icu::CharacterIterator::CharacterIterator(uint64_t this, unsigned int a2, unsigned int a3, signed int a4, int a5)
{
  unsigned int v5;
  unsigned int v6;

  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a5;
  *(_QWORD *)this = off_1E2246810;
  *(_DWORD *)(this + 16) = a3;
  *(_DWORD *)(this + 20) = a4;
  if ((a2 & 0x80000000) != 0)
  {
    a2 = 0;
    *(_DWORD *)(this + 8) = 0;
    if ((a3 & 0x80000000) == 0)
    {
LABEL_3:
      v5 = a2;
      if (a2 >= a3)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((a3 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  v5 = 0;
LABEL_7:
  *(_DWORD *)(this + 16) = v5;
  a3 = v5;
LABEL_8:
  v6 = a3;
  if ((int)a3 > a4 || (v6 = a2, (int)a2 < a4))
  {
    *(_DWORD *)(this + 20) = v6;
    a4 = v6;
  }
  if ((int)a3 > a5 || (a3 = a4, a4 < a5))
    *(_DWORD *)(this + 12) = a3;
  return this;
}

__n128 icu::CharacterIterator::CharacterIterator(icu::CharacterIterator *this, const icu::CharacterIterator *a2)
{
  __n128 result;

  *(_QWORD *)this = off_1E2246810;
  result = *(__n128 *)((char *)a2 + 8);
  *(__n128 *)((char *)this + 8) = result;
  return result;
}

__n128 icu::CharacterIterator::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t icu::CharacterIterator::firstPostInc(icu::CharacterIterator *this)
{
  (*(void (**)(icu::CharacterIterator *, _QWORD, _QWORD))(*(_QWORD *)this + 192))(this, 0, 0);
  return (*(uint64_t (**)(icu::CharacterIterator *))(*(_QWORD *)this + 40))(this);
}

uint64_t icu::CharacterIterator::first32PostInc(icu::CharacterIterator *this)
{
  (*(void (**)(icu::CharacterIterator *, _QWORD, _QWORD))(*(_QWORD *)this + 192))(this, 0, 0);
  return (*(uint64_t (**)(icu::CharacterIterator *))(*(_QWORD *)this + 48))(this);
}

uint64_t icu::CharString::CharString(uint64_t a1, uint64_t a2)
{
  const void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v4 = *(const void **)a2;
  if (v4 == (const void *)(a2 + 13))
  {
    *(_QWORD *)a1 = a1 + 13;
    memcpy((void *)(a1 + 13), v4, *(int *)(a2 + 8));
  }
  else
  {
    *(_QWORD *)a2 = a2 + 13;
    *(_DWORD *)(a2 + 8) = 40;
    *(_BYTE *)(a2 + 12) = 0;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  return a1;
}

uint64_t icu::CharString::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;

  if (*(_BYTE *)(a1 + 12))
    uprv_free(*(void **)a1);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v4 = *(const void **)a2;
  if (*(_QWORD *)a2 == a2 + 13)
  {
    *(_QWORD *)a1 = a1 + 13;
    memcpy((void *)(a1 + 13), v4, *(int *)(a2 + 8));
  }
  else
  {
    *(_QWORD *)a1 = v4;
    *(_QWORD *)a2 = a2 + 13;
    *(_DWORD *)(a2 + 8) = 40;
    *(_BYTE *)(a2 + 12) = 0;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  return a1;
}

void *icu::CharString::cloneData(const void **this, UErrorCode *a2)
{
  void *v2;
  void *v5;

  if (*(int *)a2 > 0)
    return 0;
  v5 = uprv_malloc(*((int *)this + 14) + 1);
  v2 = v5;
  if (v5)
    memcpy(v5, *this, *((int *)this + 14) + 1);
  else
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  return v2;
}

uint64_t icu::CharString::extract(char **this, char *__dst, int a3, UErrorCode *a4)
{
  char *v9;
  size_t v10;

  if (*(int *)a4 >= 1)
    return *((unsigned int *)this + 14);
  if (a3 < 0 || !__dst && a3)
  {
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    return *((unsigned int *)this + 14);
  }
  v9 = *this;
  v10 = *((unsigned int *)this + 14);
  if ((int)v10 >= 1 && (int)v10 <= a3 && v9 != __dst)
  {
    memcpy(__dst, v9, v10);
    v10 = *((unsigned int *)this + 14);
  }
  return u_terminateChars((uint64_t)__dst, a3, v10, (int *)a4);
}

icu::CharString *icu::CharString::copyFrom(const void **this, const void **a2, UErrorCode *a3)
{
  uint64_t v5;

  if (this != a2
    && *(int *)a3 <= 0
    && icu::CharString::ensureCapacity((icu::CharString *)this, (*((_DWORD *)a2 + 14) + 1), 0, a3))
  {
    v5 = *((int *)a2 + 14);
    *((_DWORD *)this + 14) = v5;
    memcpy((void *)*this, *a2, v5 + 1);
  }
  return (icu::CharString *)this;
}

uint64_t icu::CharString::ensureCapacity(icu::CharString *this, size_t size, unsigned int a3, UErrorCode *a4)
{
  uint64_t result;
  int v5;
  int v7;
  unsigned int v9;
  size_t v10;
  int v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  void *v16;
  void *v17;
  int v18;

  if (*(int *)a4 > 0)
    return 0;
  v5 = size;
  v7 = *((_DWORD *)this + 2);
  if (v7 >= (int)size)
    return 1;
  v9 = v7 + size;
  if (a3)
    v10 = a3;
  else
    v10 = v9;
  if ((int)v10 > (int)size && (int)v10 >= 1)
  {
    v11 = *((_DWORD *)this + 14);
    v12 = uprv_malloc(v10);
    if (v12)
    {
      v13 = v12;
      if ((v11 & 0x80000000) == 0)
      {
        v14 = v11 + 1;
        if (*((_DWORD *)this + 2) < v11 + 1)
          v14 = *((_DWORD *)this + 2);
        if (v14 >= (int)v10)
          v14 = v10;
        memcpy(v12, *(const void **)this, v14);
      }
      if (*((_BYTE *)this + 12))
        uprv_free(*(void **)this);
      *(_QWORD *)this = v13;
      *((_DWORD *)this + 2) = v10;
LABEL_31:
      result = 1;
      *((_BYTE *)this + 12) = 1;
      return result;
    }
  }
  if (v5 >= 1)
  {
    v15 = *((_DWORD *)this + 14);
    v16 = uprv_malloc(v5);
    if (v16)
    {
      v17 = v16;
      if ((v15 & 0x80000000) == 0)
      {
        v18 = v15 + 1;
        if (*((_DWORD *)this + 2) < v15 + 1)
          v18 = *((_DWORD *)this + 2);
        if (v18 >= v5)
          v18 = v5;
        memcpy(v16, *(const void **)this, v18);
      }
      if (*((_BYTE *)this + 12))
        uprv_free(*(void **)this);
      *(_QWORD *)this = v17;
      *((_DWORD *)this + 2) = v5;
      goto LABEL_31;
    }
  }
  result = 0;
  *a4 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

uint64_t icu::CharString::lastIndexOf(icu::CharString *this, unsigned __int8 a2)
{
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  int v6;

  result = *((unsigned int *)this + 14);
  v4 = result - 1;
  while (1)
  {
    v5 = __OFSUB__((_DWORD)result, 1);
    result = (result - 1);
    if ((int)result < 0 != v5)
      break;
    v6 = *(unsigned __int8 *)(*(_QWORD *)this + v4--);
    if (v6 == a2)
      return result;
  }
  return 0xFFFFFFFFLL;
}

BOOL icu::CharString::contains(char **a1, void *__s2, int a3)
{
  int v3;
  BOOL v4;
  int v5;
  _BOOL8 result;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (!a3)
    return 0;
  v3 = *((_DWORD *)a1 + 14);
  v4 = __OFSUB__(v3, a3);
  v5 = v3 - a3;
  if (v5 < 0 != v4)
    return 0;
  v8 = *a1;
  v9 = a3;
  v10 = (v5 + 1) - 1;
  do
  {
    v11 = v10;
    v12 = memcmp(v8, __s2, v9);
    result = v12 == 0;
    if (!v12)
      break;
    v10 = v11 - 1;
    ++v8;
  }
  while (v11);
  return result;
}

uint64_t icu::CharString::truncate(uint64_t this, int a2)
{
  int v2;

  v2 = a2 & ~(a2 >> 31);
  if (v2 < *(_DWORD *)(this + 56))
  {
    *(_DWORD *)(this + 56) = v2;
    *(_BYTE *)(*(_QWORD *)this + v2) = 0;
  }
  return this;
}

icu::CharString *icu::CharString::append(icu::CharString *this, char a2, UErrorCode *a3)
{
  uint64_t v5;

  if (icu::CharString::ensureCapacity(this, (*((_DWORD *)this + 14) + 2), 0, a3))
  {
    v5 = *((int *)this + 14);
    *((_DWORD *)this + 14) = v5 + 1;
    *(_BYTE *)(*(_QWORD *)this + v5) = a2;
    *(_BYTE *)(*(_QWORD *)this + *((int *)this + 14)) = 0;
  }
  return this;
}

icu::CharString *icu::CharString::append(icu::CharString *this, const char *a2, int a3, UErrorCode *a4)
{
  int v6;
  UErrorCode v8;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  int v14;
  char *v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 <= 0)
  {
    v6 = a3;
    if (a3 < -1 || !a2 && a3)
    {
      v8 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_6:
      *a4 = v8;
      return this;
    }
    if (a3 < 0)
      v6 = strlen(a2);
    if (v6 >= 1)
    {
      v10 = *(_QWORD *)this;
      v11 = *((int *)this + 14);
      v12 = (const char *)(*(_QWORD *)this + v11);
      if (v12 == a2)
      {
        if (v6 < *((_DWORD *)this + 2) - (int)v11)
        {
          v14 = v11 + v6;
          *((_DWORD *)this + 14) = v14;
          *(_BYTE *)(v10 + v14) = 0;
          return this;
        }
        v8 = U_INTERNAL_PROGRAM_ERROR;
        goto LABEL_6;
      }
      if (v10 <= (unint64_t)a2 && v12 > a2 && v6 >= *((_DWORD *)this + 2) - (int)v11)
      {
        v15 = (char *)&v17 + 1;
        v16 = 40;
        v17 = 0;
        v18 = 0;
        icu::CharString::append((icu::CharString *)&v15, a2, v6, a4);
        this = (icu::CharString *)icu::CharString::append(this, v15, v18, a4);
        if ((_BYTE)v17)
          uprv_free(v15);
      }
      else if (icu::CharString::ensureCapacity(this, (v6 + v11 + 1), 0, a4))
      {
        memcpy((void *)(*(_QWORD *)this + *((int *)this + 14)), a2, v6);
        v13 = *((int *)this + 14) + (uint64_t)v6;
        *((_DWORD *)this + 14) = v13;
        *(_BYTE *)(*(_QWORD *)this + v13) = 0;
      }
    }
  }
  return this;
}

icu::CharString *icu::CharString::appendNumber(icu::CharString *this, int a2, UErrorCode *a3)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v4 = a2;
  if (a2 < 0)
  {
    this = icu::CharString::append(this, 45, a3);
    if (*(int *)a3 >= 1)
      return this;
  }
  else if (!a2)
  {
    return icu::CharString::append(this, 48, a3);
  }
  v5 = 0;
  while (v4)
  {
    v6 = v4 % 10;
    if (v4 % 10 < 0)
      v6 = -v6;
    this = icu::CharString::append(this, v6 + 48, a3);
    --v5;
    v4 /= 10;
    if (*(int *)a3 >= 1)
      return this;
  }
  v7 = *((int *)this + 14);
  if ((int)v7 + (int)v5 < (int)v7 - 1)
  {
    v8 = v7 - 1;
    v9 = v7 + v5;
    do
    {
      v10 = *(_QWORD *)this;
      v11 = *(_BYTE *)(*(_QWORD *)this + v9);
      *(_BYTE *)(v10 + v9) = *(_BYTE *)(*(_QWORD *)this + v8);
      *(_BYTE *)(v10 + v8--) = v11;
      ++v9;
    }
    while (v9 < v8);
  }
  return this;
}

uint64_t icu::CharString::getAppendBuffer(icu::CharString *this, int a2, int a3, int *a4, UErrorCode *a5)
{
  uint64_t result;
  int v8;
  int v9;

  if (*(int *)a5 >= 1)
    goto LABEL_2;
  v8 = *((_DWORD *)this + 14);
  v9 = *((_DWORD *)this + 2) + ~v8;
  if (v9 >= a2)
  {
    *a4 = v9;
  }
  else
  {
    if (!icu::CharString::ensureCapacity(this, (a2 + v8 + 1), a3 + v8 + 1, a5))
    {
LABEL_2:
      result = 0;
      *a4 = 0;
      return result;
    }
    *a4 = *((_DWORD *)this + 2) + ~*((_DWORD *)this + 14);
  }
  return *(_QWORD *)this + *((int *)this + 14);
}

int *icu::CharString::appendInvariantChars(icu::CharString *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  unsigned int v4;
  UChar *v5;
  int v6;
  int32_t v7;
  int32_t v8;

  v4 = *((unsigned __int16 *)a2 + 4);
  if ((v4 & 0x11) != 0)
  {
    v5 = 0;
  }
  else if ((v4 & 2) != 0)
  {
    v5 = (UChar *)((char *)a2 + 10);
  }
  else
  {
    v5 = (UChar *)*((_QWORD *)a2 + 3);
  }
  v6 = (__int16)v4;
  v7 = v4 >> 5;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = *((_DWORD *)a2 + 3);
  return icu::CharString::appendInvariantChars((int *)this, v5, v8, a3);
}

int *icu::CharString::appendInvariantChars(int *a1, UChar *a2, int32_t a3, UErrorCode *a4)
{
  uint64_t v9;

  if (*(int *)a4 <= 0)
  {
    if (uprv_isInvariantUString(a2, a3))
    {
      if (icu::CharString::ensureCapacity((icu::CharString *)a1, (a3 + a1[14] + 1), 0, a4))
      {
        u_UCharsToChars(a2, (char *)(*(_QWORD *)a1 + a1[14]), a3);
        v9 = a1[14] + (uint64_t)a3;
        a1[14] = v9;
        *(_BYTE *)(*(_QWORD *)a1 + v9) = 0;
      }
    }
    else
    {
      *a4 = U_INVARIANT_CONVERSION_ERROR;
    }
  }
  return a1;
}

icu::CharString *icu::CharString::appendPathPart(icu::CharString *a1, const char *a2, int a3, UErrorCode *a4)
{
  int v9;
  BOOL v10;
  int v11;

  if (*(int *)a4 <= 0 && a3 != 0)
  {
    v9 = *((_DWORD *)a1 + 14);
    v10 = __OFSUB__(v9, 1);
    v11 = v9 - 1;
    if (v11 < 0 == v10 && *(_BYTE *)(*(_QWORD *)a1 + v11) != 47)
      icu::CharString::append(a1, 47, a4);
    icu::CharString::append(a1, a2, a3, a4);
  }
  return a1;
}

uint64_t icu::CharString::getDirSepChar(icu::CharString *this)
{
  return 47;
}

icu::CharString *icu::CharString::ensureEndsWithFileSeparator(icu::CharString *this, UErrorCode *a2)
{
  int v2;
  BOOL v3;
  int v4;

  if (*(int *)a2 <= 0)
  {
    v2 = *((_DWORD *)this + 14);
    v3 = __OFSUB__(v2, 1);
    v4 = v2 - 1;
    if (v4 < 0 == v3 && *(_BYTE *)(*(_QWORD *)this + v4) != 47)
      return icu::CharString::append(this, 47, a2);
  }
  return this;
}

void *uprv_malloc(size_t size)
{
  if (!size)
    return &unk_18BDCBF38;
  if (off_1EE009208)
    return (void *)off_1EE009208(qword_1EE009210, size);
  return malloc_type_malloc(size, 0x628A9281uLL);
}

void *uprv_realloc(void *ptr, size_t size)
{
  if (ptr == &unk_18BDCBF38)
    return uprv_malloc(size);
  if (size)
  {
    if (off_1EE009220)
      return (void *)off_1EE009220(qword_1EE009210, ptr);
    else
      return malloc_type_realloc(ptr, size, 0xF39BA55BuLL);
  }
  else
  {
    if (off_1EE009218)
      off_1EE009218(qword_1EE009210, ptr);
    else
      free(ptr);
    return &unk_18BDCBF38;
  }
}

void uprv_free(void *a1)
{
  if (a1 != &unk_18BDCBF38)
  {
    if (off_1EE009218)
      off_1EE009218(qword_1EE009210, a1);
    else
      free(a1);
  }
}

void *uprv_calloc(uint64_t a1, uint64_t a2)
{
  size_t v2;
  void *v3;
  void *v4;

  v2 = a2 * a1;
  v3 = uprv_malloc(a2 * a1);
  v4 = v3;
  if (v3)
    bzero(v3, v2);
  return v4;
}

uint64_t u_setMemoryFunctions(uint64_t result, void *a2, void *a3, void *a4, int *a5)
{
  if (*a5 <= 0)
  {
    if (a2 && a3 && a4)
    {
      qword_1EE009210 = result;
      off_1EE009208 = a2;
      off_1EE009220 = a3;
      off_1EE009218 = a4;
    }
    else
    {
      *a5 = 1;
    }
  }
  return result;
}

uint64_t sub_18BBB3348()
{
  qword_1EE009210 = 0;
  off_1EE009208 = 0;
  off_1EE009220 = 0;
  off_1EE009218 = 0;
  return 1;
}

icu::CStr *icu::CStr::CStr(icu::CStr *this, const icu::UnicodeString *a2)
{
  icu::CharString *v4;
  unsigned int v5;
  int v6;
  int32_t v7;
  int32_t v8;
  int v9;
  char *AppendBuffer;
  const char *v11;
  unsigned int v12;
  int v13;
  int32_t v14;
  int32_t v15;
  unsigned int v17;
  UErrorCode v18;

  *((_QWORD *)this + 1) = (char *)this + 21;
  v4 = (icu::CStr *)((char *)this + 8);
  *((_DWORD *)this + 4) = 40;
  *((_WORD *)this + 10) = 0;
  *((_DWORD *)this + 16) = 0;
  v18 = U_ZERO_ERROR;
  v5 = *((unsigned __int16 *)a2 + 4);
  v6 = (__int16)v5;
  v7 = v5 >> 5;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = *((_DWORD *)a2 + 3);
  v9 = icu::UnicodeString::extract(a2, 0, v8, 0, 0);
  v17 = 0;
  AppendBuffer = (char *)icu::CharString::getAppendBuffer(v4, v9, v9, (int *)&v17, &v18);
  if (v18 <= U_ZERO_ERROR)
  {
    v11 = AppendBuffer;
    v12 = *((unsigned __int16 *)a2 + 4);
    v13 = (__int16)v12;
    v14 = v12 >> 5;
    if (v13 >= 0)
      v15 = v14;
    else
      v15 = *((_DWORD *)a2 + 3);
    icu::UnicodeString::extract(a2, 0, v15, AppendBuffer, v17);
    icu::CharString::append(v4, v11, v9, &v18);
  }
  return this;
}

void icu::CStr::~CStr(void **this)
{
  if (*((_BYTE *)this + 20))
    uprv_free(this[1]);
}

{
  if (*((_BYTE *)this + 20))
    uprv_free(this[1]);
}

uint64_t icu::CStr::operator()(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

BOOL uprv_isASCIILetter(char a1)
{
  return (a1 & 0xDFu) - 65 < 0x1A;
}

uint64_t uprv_toupper(int a1)
{
  if ((a1 - 97) >= 0x1A)
    return (char)a1;
  else
    return (char)(a1 - 32);
}

uint64_t uprv_asciitolower(int a1)
{
  if ((a1 - 65) >= 0x1A)
    return (char)a1;
  else
    return (char)(a1 + 32);
}

uint64_t uprv_ebcdictolower(char a1)
{
  if (((a1 & 0xEF) + 63) >= 9u && (a1 + 30) >= 8u)
    return a1;
  else
    return (char)(a1 - 64);
}

unsigned __int8 *T_CString_toLowerCase(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  int v2;

  if (result)
  {
    v1 = result;
    do
    {
      v2 = *v1;
      if ((v2 - 65) < 0x1A)
        LOBYTE(v2) = v2 + 32;
      *v1++ = v2;
    }
    while ((_BYTE)v2);
  }
  return result;
}

unsigned __int8 *T_CString_toUpperCase(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  int v2;

  if (result)
  {
    v1 = result;
    do
    {
      v2 = *v1;
      if ((v2 - 97) < 0x1A)
        LOBYTE(v2) = v2 - 32;
      *v1++ = v2;
    }
    while ((_BYTE)v2);
  }
  return result;
}

uint64_t T_CString_integerToString(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[13];
  char v11[3];
  uint64_t v12;

  v3 = 0;
  v12 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x80000000) != 0 && a3 == 10)
  {
    a2 = -a2;
    *a1 = 45;
    v3 = 1;
  }
  v4 = 0;
  v8 = 0;
  v9 = 0;
  memset(v10, 0, sizeof(v10));
  v11[0] = 0;
  do
  {
    if (((a2 % a3) & 0xFE) >= 0xA)
      v5 = 55;
    else
      v5 = 48;
    v10[v4-- + 12] = v5 + a2 % a3;
    v6 = a2 >= a3;
    a2 /= a3;
  }
  while (v6);
  strcpy(&a1[v3], &v11[v4]);
  return (v3 - v4);
}

uint64_t T_CString_int64ToString(_BYTE *a1, unint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[13];
  char v12[3];
  uint64_t v13;

  v3 = 0;
  v13 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x8000000000000000) != 0 && a3 == 10)
  {
    a2 = -(uint64_t)a2;
    *a1 = 45;
    v3 = 1;
  }
  v4 = 0;
  v9 = 0;
  v10 = 0;
  memset(v11, 0, sizeof(v11));
  v12[0] = 0;
  do
  {
    v5 = a2 % a3;
    if ((v5 & 0xFEu) >= 0xA)
      v6 = 55;
    else
      v6 = 48;
    v11[v4-- + 12] = v6 + v5;
    v7 = a2 >= a3;
    a2 /= a3;
  }
  while (v7);
  strcpy(&a1[v3], &v12[v4]);
  return (v3 - v4);
}

unint64_t T_CString_stringToInteger(const char *a1, int __base)
{
  char *__endptr;

  __endptr = 0;
  return strtoul(a1, &__endptr, __base);
}

uint64_t uprv_stricmp(_BYTE *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t result;
  int v7;
  int v8;
  BOOL v9;

  if (a1)
  {
    if (!a2)
      return 1;
    LOBYTE(v2) = *a1;
    v3 = *a2;
    if (*a1)
    {
      v4 = a2 + 1;
      v5 = a1 + 1;
      while ((_BYTE)v3)
      {
        if ((v2 - 65) < 0x1Au)
          LOBYTE(v2) = v2 + 32;
        if ((v3 - 65) < 0x1Au)
          LOBYTE(v3) = v3 + 32;
        result = v2 - v3;
        if (v2 != v3)
          return result;
        v7 = *v5++;
        v2 = v7;
        v8 = *v4++;
        v3 = v8;
        if (!v2)
          goto LABEL_12;
      }
      return 1;
    }
LABEL_12:
    v9 = v3 == 0;
  }
  else
  {
    v9 = a2 == 0;
  }
  if (v9)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t uprv_strnicmp(_BYTE *a1, _BYTE *a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  BOOL v6;

  if (a1)
  {
    if (!a2)
      return 1;
    if (!a3)
      return 0;
    while (1)
    {
      v3 = *a1;
      v4 = *a2;
      if (!*a1)
        break;
      if (!*a2)
        return 1;
      if ((v3 - 65) < 0x1A)
        LOBYTE(v3) = v3 + 32;
      if ((v4 - 65) < 0x1A)
        LOBYTE(v4) = v4 + 32;
      v5 = v3 - v4;
      if ((_DWORD)v5)
        return v5;
      ++a1;
      ++a2;
      if (!--a3)
        return 0;
    }
    v6 = v4 == 0;
  }
  else
  {
    v6 = a2 == 0;
  }
  if (v6)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

void *uprv_strdup(const char *a1)
{
  size_t v2;
  void *v3;
  void *v4;

  v2 = strlen(a1) + 1;
  v3 = uprv_malloc(v2);
  v4 = v3;
  if (v3)
    memcpy(v3, a1, v2);
  return v4;
}

_BYTE *uprv_strndup(const char *a1, unsigned int a2)
{
  _BYTE *v4;
  _BYTE *v5;

  if ((a2 & 0x80000000) != 0)
    return uprv_strdup(a1);
  v4 = uprv_malloc(a2 + 1);
  v5 = v4;
  if (v4)
  {
    memcpy(v4, a1, a2);
    v5[a2] = 0;
  }
  return v5;
}

_QWORD *sub_18BBB392C(_QWORD *a1)
{
  _QWORD *v2;

  v2 = sub_18BBAC31C(a1);
  *v2 = off_1E2246928;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(v2 + 1));
  return a1;
}

void sub_18BBB3960(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2246928;
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 8));
  icu::UObject::~UObject((icu::UObject *)a1);
}

uint64_t sub_18BBB3998(uint64_t a1, int a2)
{
  return icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 8), a2);
}

uint64_t sub_18BBB39A0(uint64_t a1, UText *ut, int a3, int a4, uint64_t a5, uint64_t a6, int *a7)
{
  int64_t NativeIndex;
  UChar32 v15;
  int64_t i;
  uint64_t v17;

  if (*a7 > 0)
    return 0;
  utext_setNativeIndex(ut, a3);
  NativeIndex = utext_getNativeIndex(ut);
  v15 = utext_current32(ut);
  for (i = utext_getNativeIndex(ut); (int)i < a4; i = utext_getNativeIndex(ut))
  {
    if (!icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 8), v15))
      break;
    utext_next32(ut);
    v15 = utext_current32(ut);
  }
  v17 = (*(uint64_t (**)(uint64_t, UText *, int64_t, int64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 48))(a1, ut, NativeIndex, i, a5, a6, a7);
  utext_setNativeIndex(ut, (int)i);
  return v17;
}

icu::UnicodeSet *sub_18BBB3AB4(uint64_t a1, const icu::UnicodeSet *a2)
{
  icu::UnicodeSet *v2;

  v2 = (icu::UnicodeSet *)(a1 + 8);
  icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 8), a2);
  return icu::UnicodeSet::compact(v2);
}

uint64_t sub_18BBB3ADC(unsigned int *a1, UText *ut, uint64_t a3, int a4)
{
  unsigned int NativeIndex;
  signed int v9;
  uint64_t result;

  NativeIndex = utext_getNativeIndex(ut);
  v9 = NativeIndex;
  if (a1[2] != NativeIndex)
  {
    a1[2] = NativeIndex;
    LODWORD(result) = (*(uint64_t (**)(uint64_t, UText *, _QWORD, uint64_t, unsigned int *, unsigned int *, _QWORD, unsigned int *))(*(_QWORD *)a3 + 16))(a3, ut, a4 - NativeIndex, 20, a1 + 5, a1 + 25, 0, a1 + 1);
    *a1 = result;
    if ((int)result > 0)
    {
LABEL_5:
      utext_setNativeIndex(ut, (int)a1[(result - 1) + 5] + (uint64_t)v9);
      result = *a1;
      goto LABEL_6;
    }
    utext_setNativeIndex(ut, v9);
  }
  result = *a1;
  if ((int)result >= 1)
    goto LABEL_5;
LABEL_6:
  a1[3] = result - 1;
  a1[4] = result - 1;
  return result;
}

uint64_t sub_18BBB3BA4(uint64_t a1, UText *ut)
{
  int v2;
  BOOL v3;
  int v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = __OFSUB__(v2, 1);
  v4 = v2 - 1;
  if (v4 < 0 != v3)
    return 0;
  v5 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = v4;
  utext_setNativeIndex(ut, *(int *)(a1 + 4 * v4 + 20) + v5);
  return 1;
}

_QWORD *sub_18BBB3BEC(_QWORD *a1, uint64_t a2, UErrorCode *a3)
{
  _QWORD *v6;
  _OWORD v8[12];
  uint64_t v9;
  _BYTE v10[64];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = sub_18BBAC31C(a1);
  *v6 = off_1E2246928;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(v6 + 1));
  *a1 = off_1E2246970;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 26));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 101));
  a1[126] = a2;
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  icu::UnicodeString::UnicodeString((uint64_t)v10, (uint64_t)L"[[:Thai:]&[:LineBreak=SA:]]");
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v8, (const icu::UnicodeString *)v10, a3);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v10);
  if (*(int *)a3 <= 0)
    (*(void (**)(_QWORD *, _OWORD *))(*a1 + 40))(a1, v8);
  icu::UnicodeString::UnicodeString((uint64_t)v10, (uint64_t)L"[[:Thai:]&[:LineBreak=SA:]&[:M:]]");
  icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 101), (const icu::UnicodeString *)v10, a3);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v10);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 101), 0x20u);
  icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 26), (const icu::UnicodeSet *)v8);
  icu::UnicodeSet::remove((icu::UnicodeSet *)(a1 + 26), 0xE31u);
  icu::UnicodeSet::remove((icu::UnicodeSet *)(a1 + 26), 0xE40u, 0xE44u);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 51), 0xE01u, 0xE2Eu);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 51), 0xE40u, 0xE44u);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 76), 0xE2Fu);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 76), 0xE46u);
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 101));
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 26));
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v8);
  return a1;
}

void sub_18BBB3DDC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E2246970;
  v2 = a1[126];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 101));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 26));
  *a1 = off_1E2246928;
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 1));
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18BBB3E54(_QWORD *a1)
{
  void *v1;

  sub_18BBB3DDC(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BBB3E68(uint64_t *a1, UText *ut, int a3, int a4, uint64_t a5, uint64_t a6, int *a7)
{
  int64_t v12;
  uint64_t i;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v17;
  unsigned int *v18;
  int v19;
  unsigned int *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;
  UErrorCode *v29;
  int v30;
  UChar32 v31;
  int v32;
  int v33;
  UChar32 v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  UChar32 v41;
  UChar32 v42;
  UChar32 v43;
  int v44;
  int v45;
  UChar32 v46;
  int v47;
  int v48;
  int v49;
  int v50;
  icu::UnicodeSet *v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  int *v55;
  int NativeIndex;
  unsigned int v57[135];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (*a7 > 0)
    return 0;
  v12 = a3;
  utext_setNativeIndex(ut, a3);
  utext_moveIndex32(ut, 4);
  if (utext_getNativeIndex(ut) >= a4)
    return 0;
  utext_setNativeIndex(ut, v12);
  bzero(v57, 0x21CuLL);
  for (i = 0; i != 135; i += 45)
  {
    v14 = &v57[i];
    *(_OWORD *)v14 = xmmword_18BDCBF50;
    v14[4] = 0;
  }
  utext_setNativeIndex(ut, v12);
  if (*a7 <= 0)
  {
    v15 = 0;
    v51 = (icu::UnicodeSet *)(a1 + 76);
    v52 = a5;
    v55 = a7;
    while (1)
    {
      NativeIndex = utext_getNativeIndex(ut);
      if (NativeIndex >= a4)
        goto LABEL_64;
      v17 = v15 % 3;
      v18 = &v57[45 * (v15 % 3)];
      v19 = sub_18BBB3ADC(v18, ut, a1[126], a4);
      if (v19 == 1)
      {
        v20 = &v57[45 * v17];
        utext_setNativeIndex(ut, (int)v20[v20[3] + 5] + (uint64_t)(int)v20[2]);
        v21 = (int)v20[3];
        v22 = v20[v21 + 5];
        v23 = v20[v21 + 25];
        v15 = (v15 + 1);
      }
      else if (v19 < 2)
      {
        v22 = 0;
        v23 = 0;
      }
      else
      {
        v24 = (v15 + 1);
        if ((int)utext_getNativeIndex(ut) < a4)
        {
          v25 = &v57[45 * v17];
          v53 = v25 + 3;
          v54 = v25 + 4;
          v26 = &v57[45 * (((int)v15 + 2) % 3u)];
          while ((int)sub_18BBB3ADC(&v57[45 * (v24 % 3)], ut, a1[126], a4) < 1)
          {
LABEL_20:
            if (!sub_18BBB3BA4((uint64_t)v18, ut))
              goto LABEL_24;
          }
          *v53 = *v54;
          if ((int)utext_getNativeIndex(ut) < a4)
          {
            while (!sub_18BBB3ADC(v26, ut, a1[126], a4))
            {
              if (!sub_18BBB3BA4((uint64_t)&v57[45 * (v24 % 3)], ut))
                goto LABEL_20;
            }
            *v53 = *v54;
          }
        }
LABEL_24:
        v27 = &v57[45 * v17];
        utext_setNativeIndex(ut, (int)v27[v27[3] + 5] + (uint64_t)(int)v27[2]);
        v28 = (int)v27[3];
        v22 = v27[v28 + 5];
        v23 = v27[v28 + 25];
        v15 = v24;
        a5 = v52;
      }
      v29 = (UErrorCode *)v55;
      if ((int)utext_getNativeIndex(ut) < a4 && v23 <= 2)
      {
        if ((int)sub_18BBB3ADC(&v57[45 * (v15 % 3)], ut, a1[126], a4) > 0
          || v22 && (int)v57[45 * (v15 % 3) + 1] > 2)
        {
          utext_setNativeIndex(ut, v22 + NativeIndex);
        }
        else
        {
          v30 = utext_getNativeIndex(ut);
          v31 = utext_next32(ut);
          v32 = utext_getNativeIndex(ut) - v30;
          v33 = a4 - v32 - (v22 + NativeIndex);
          if (v33 >= 1)
          {
            do
            {
              v34 = utext_current32(ut);
              if (icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 26), v31))
              {
                if (icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 51), v34))
                {
                  v35 = sub_18BBB3ADC(&v57[45 * (((int)v15 + 1) % 3u)], ut, a1[126], a4);
                  utext_setNativeIndex(ut, v32 + v22 + NativeIndex);
                  if (v35 > 0)
                    break;
                }
              }
              v36 = utext_getNativeIndex(ut);
              v31 = utext_next32(ut);
              v37 = utext_getNativeIndex(ut);
              v32 += v37 - v36;
              v38 = __OFSUB__(v33, v37 - v36);
              v33 -= v37 - v36;
            }
            while (!((v33 < 0) ^ v38 | (v33 == 0)));
          }
          if (v22 >= 1)
            v15 = v15;
          else
            v15 = (v15 + 1);
          v22 += v32;
          a5 = v52;
          v29 = (UErrorCode *)v55;
        }
      }
      v39 = utext_getNativeIndex(ut);
      if (v39 < a4)
      {
        v40 = v39;
        do
        {
          v41 = utext_current32(ut);
          if (!icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 101), v41))
            break;
          utext_next32(ut);
          v22 = v22 - v40 + utext_getNativeIndex(ut);
          v40 = utext_getNativeIndex(ut);
        }
        while (v40 < a4);
      }
      if ((int)utext_getNativeIndex(ut) >= a4 || v22 < 1)
        goto LABEL_57;
      if ((int)sub_18BBB3ADC(&v57[45 * (v15 % 3)], ut, a1[126], a4) <= 0
        && (v42 = utext_current32(ut), icu::UnicodeSet::contains(v51, v42)))
      {
        if (v42 != 3631)
          goto LABEL_54;
        v43 = utext_previous32(ut);
        v44 = icu::UnicodeSet::contains(v51, v43);
        utext_next32(ut);
        if (!v44)
        {
          v45 = utext_getNativeIndex(ut);
          utext_next32(ut);
          v22 = v22 - v45 + utext_getNativeIndex(ut);
          v42 = utext_current32(ut);
LABEL_54:
          if (v42 == 3654)
          {
            v46 = utext_previous32(ut);
            utext_next32(ut);
            if (v46 != 3654)
            {
              v47 = utext_getNativeIndex(ut);
              utext_next32(ut);
              v22 = v22 - v47 + utext_getNativeIndex(ut);
            }
          }
LABEL_57:
          if (v22 < 1)
            goto LABEL_63;
        }
      }
      else
      {
        utext_setNativeIndex(ut, v22 + NativeIndex);
      }
      v48 = *(_DWORD *)(a5 + 8);
      if (v48 >= -1 && *(_DWORD *)(a5 + 12) > v48)
        goto LABEL_62;
      if (icu::UVector32::expandCapacity((icu::UVector32 *)a5, v48 + 1, v29))
      {
        v48 = *(_DWORD *)(a5 + 8);
LABEL_62:
        *(_DWORD *)(*(_QWORD *)(a5 + 24) + 4 * v48) = v22 + NativeIndex;
        ++*(_DWORD *)(a5 + 8);
      }
LABEL_63:
      if (*(int *)v29 >= 1)
        goto LABEL_64;
    }
  }
  v15 = 0;
LABEL_64:
  v49 = *(_DWORD *)(a5 + 8);
  v38 = __OFSUB__(v49, 1);
  v50 = v49 - 1;
  if (v50 < 0 != v38)
  {
    if (a4 <= 0)
      return (v15 - 1);
  }
  else if (*(_DWORD *)(*(_QWORD *)(a5 + 24) + 4 * v50) >= a4)
  {
    *(_DWORD *)(a5 + 8) = v50;
    return (v15 - 1);
  }
  return v15;
}

_QWORD *sub_18BBB4540(_QWORD *a1, uint64_t a2, UErrorCode *a3)
{
  _QWORD *v6;
  _OWORD v8[12];
  uint64_t v9;
  _BYTE v10[64];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = sub_18BBAC31C(a1);
  *v6 = off_1E2246928;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(v6 + 1));
  *a1 = off_1E22469B8;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 26));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 76));
  a1[101] = a2;
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  icu::UnicodeString::UnicodeString((uint64_t)v10, (uint64_t)L"[[:Laoo:]&[:LineBreak=SA:]]");
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v8, (const icu::UnicodeString *)v10, a3);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v10);
  if (*(int *)a3 <= 0)
    (*(void (**)(_QWORD *, _OWORD *))(*a1 + 40))(a1, v8);
  icu::UnicodeString::UnicodeString((uint64_t)v10, (uint64_t)L"[[:Laoo:]&[:LineBreak=SA:]&[:M:]]");
  icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 76), (const icu::UnicodeString *)v10, a3);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v10);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 76), 0x20u);
  icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 26), (const icu::UnicodeSet *)v8);
  icu::UnicodeSet::remove((icu::UnicodeSet *)(a1 + 26), 0xEC0u, 0xEC4u);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 51), 0xE81u, 0xEAEu);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 51), 0xEDCu, 0xEDDu);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 51), 0xEC0u, 0xEC4u);
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 26));
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v8);
  return a1;
}

void sub_18BBB4708(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E22469B8;
  v2 = a1[101];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 26));
  *a1 = off_1E2246928;
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 1));
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18BBB4778(_QWORD *a1)
{
  void *v1;

  sub_18BBB4708(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BBB478C(uint64_t *a1, UText *a2, int a3, int a4, uint64_t a5, uint64_t a6, int *a7)
{
  uint64_t v8;
  uint64_t i;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  int v19;
  unsigned int *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;
  UErrorCode *v29;
  int v30;
  UChar32 v31;
  int v32;
  int v33;
  UChar32 v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  UChar32 v41;
  int v42;
  int v44;
  int v45;
  uint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  int *v50;
  int NativeIndex;
  unsigned int v52[135];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (*a7 > 0 || a4 - a3 < 4)
    return 0;
  bzero(v52, 0x21CuLL);
  for (i = 0; i != 135; i += 45)
  {
    v16 = &v52[i];
    *(_OWORD *)v16 = xmmword_18BDCBF50;
    v16[4] = 0;
  }
  utext_setNativeIndex(a2, a3);
  if (*a7 <= 0)
  {
    v8 = 0;
    v47 = a5;
    v50 = a7;
    while (1)
    {
      NativeIndex = utext_getNativeIndex(a2);
      if (NativeIndex >= a4)
        goto LABEL_56;
      v17 = v8 % 3;
      v18 = &v52[45 * (v8 % 3)];
      v19 = sub_18BBB3ADC(v18, a2, a1[101], a4);
      if (v19 == 1)
      {
        v20 = &v52[45 * v17];
        utext_setNativeIndex(a2, (int)v20[v20[3] + 5] + (uint64_t)(int)v20[2]);
        v21 = (int)v20[3];
        v22 = v20[v21 + 5];
        v23 = v20[v21 + 25];
        v8 = (v8 + 1);
      }
      else if (v19 < 2)
      {
        v22 = 0;
        v23 = 0;
      }
      else
      {
        v24 = (v8 + 1);
        if (utext_getNativeIndex(a2) < a4)
        {
          v25 = &v52[45 * v17];
          v48 = v25 + 3;
          v49 = v25 + 4;
          v26 = &v52[45 * (((int)v8 + 2) % 3u)];
          while ((int)sub_18BBB3ADC(&v52[45 * (v24 % 3)], a2, a1[101], a4) < 1)
          {
LABEL_21:
            if (!sub_18BBB3BA4((uint64_t)v18, a2))
              goto LABEL_25;
          }
          *v48 = *v49;
          if ((int)utext_getNativeIndex(a2) < a4)
          {
            while (!sub_18BBB3ADC(v26, a2, a1[101], a4))
            {
              if (!sub_18BBB3BA4((uint64_t)&v52[45 * (v24 % 3)], a2))
                goto LABEL_21;
            }
            *v48 = *v49;
          }
        }
LABEL_25:
        v27 = &v52[45 * v17];
        utext_setNativeIndex(a2, (int)v27[v27[3] + 5] + (uint64_t)(int)v27[2]);
        v28 = (int)v27[3];
        v22 = v27[v28 + 5];
        v23 = v27[v28 + 25];
        v8 = v24;
        a5 = v47;
      }
      v29 = (UErrorCode *)v50;
      if ((int)utext_getNativeIndex(a2) < a4 && v23 <= 2)
      {
        if ((int)sub_18BBB3ADC(&v52[45 * (v8 % 3)], a2, a1[101], a4) > 0
          || v22 && (int)v52[45 * (v8 % 3) + 1] > 2)
        {
          utext_setNativeIndex(a2, v22 + NativeIndex);
        }
        else
        {
          v30 = utext_getNativeIndex(a2);
          v31 = utext_next32(a2);
          v32 = utext_getNativeIndex(a2) - v30;
          v33 = a4 - v32 - (v22 + NativeIndex);
          if (v33 >= 1)
          {
            do
            {
              v34 = utext_current32(a2);
              if (icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 26), v31))
              {
                if (icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 51), v34))
                {
                  v35 = sub_18BBB3ADC(&v52[45 * (((int)v8 + 1) % 3u)], a2, a1[101], a4);
                  utext_setNativeIndex(a2, v32 + v22 + NativeIndex);
                  if (v35 > 0)
                    break;
                }
              }
              v36 = utext_getNativeIndex(a2);
              v31 = utext_next32(a2);
              v37 = utext_getNativeIndex(a2);
              v32 += v37 - v36;
              v38 = __OFSUB__(v33, v37 - v36);
              v33 -= v37 - v36;
            }
            while (!((v33 < 0) ^ v38 | (v33 == 0)));
          }
          if (v22 >= 1)
            v8 = v8;
          else
            v8 = (v8 + 1);
          v22 += v32;
          a5 = v47;
          v29 = (UErrorCode *)v50;
        }
      }
      v39 = utext_getNativeIndex(a2);
      if (v39 < a4)
      {
        v40 = v39;
        do
        {
          v41 = utext_current32(a2);
          if (!icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 76), v41))
            break;
          utext_next32(a2);
          v22 = v22 - v40 + utext_getNativeIndex(a2);
          v40 = utext_getNativeIndex(a2);
        }
        while (v40 < a4);
      }
      if (v22 >= 1)
      {
        v42 = *(_DWORD *)(a5 + 8);
        if (v42 >= -1 && *(_DWORD *)(a5 + 12) > v42)
          goto LABEL_54;
        if (icu::UVector32::expandCapacity((icu::UVector32 *)a5, v42 + 1, v29))
          break;
      }
LABEL_55:
      if (*(int *)v29 >= 1)
        goto LABEL_56;
    }
    v42 = *(_DWORD *)(a5 + 8);
LABEL_54:
    *(_DWORD *)(*(_QWORD *)(a5 + 24) + 4 * v42) = v22 + NativeIndex;
    ++*(_DWORD *)(a5 + 8);
    goto LABEL_55;
  }
  v8 = 0;
LABEL_56:
  v44 = *(_DWORD *)(a5 + 8);
  v38 = __OFSUB__(v44, 1);
  v45 = v44 - 1;
  if (v45 < 0 != v38)
  {
    if (a4 <= 0)
      return (v8 - 1);
  }
  else if (*(_DWORD *)(*(_QWORD *)(a5 + 24) + 4 * v45) >= a4)
  {
    *(_DWORD *)(a5 + 8) = v45;
    return (v8 - 1);
  }
  return v8;
}

_QWORD *sub_18BBB4CE4(_QWORD *a1, uint64_t a2, UErrorCode *a3)
{
  _QWORD *v6;
  _BYTE v8[64];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = sub_18BBAC31C(a1);
  *v6 = off_1E2246928;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(v6 + 1));
  *a1 = off_1E2246A00;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 26));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 76));
  a1[101] = a2;
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 51), 0x1000u, 0x102Au);
  icu::UnicodeString::UnicodeString((uint64_t)v8, (uint64_t)L"[[:Mymr:]&[:LineBreak=SA:]]");
  icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 26), (const icu::UnicodeString *)v8, a3);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v8);
  icu::UnicodeString::UnicodeString((uint64_t)v8, (uint64_t)L"[[:Mymr:]&[:LineBreak=SA:]&[:M:]]");
  icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 76), (const icu::UnicodeString *)v8, a3);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v8);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 76), 0x20u);
  if (*(int *)a3 <= 0)
    (*(void (**)(_QWORD *, _QWORD *))(*a1 + 40))(a1, a1 + 26);
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 26));
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 51));
  return a1;
}

void sub_18BBB4E40(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E2246A00;
  v2 = a1[101];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 26));
  *a1 = off_1E2246928;
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 1));
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18BBB4EB0(_QWORD *a1)
{
  void *v1;

  sub_18BBB4E40(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BBB4EC4(uint64_t *a1, UText *a2, int a3, int a4, uint64_t a5, uint64_t a6, int *a7)
{
  uint64_t v8;
  uint64_t i;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  int v19;
  unsigned int *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;
  UErrorCode *v29;
  int v30;
  UChar32 v31;
  int v32;
  int v33;
  UChar32 v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  UChar32 v41;
  int v42;
  int v44;
  int v45;
  uint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  int *v50;
  int NativeIndex;
  unsigned int v52[135];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (*a7 > 0 || a4 - a3 < 4)
    return 0;
  bzero(v52, 0x21CuLL);
  for (i = 0; i != 135; i += 45)
  {
    v16 = &v52[i];
    *(_OWORD *)v16 = xmmword_18BDCBF50;
    v16[4] = 0;
  }
  utext_setNativeIndex(a2, a3);
  if (*a7 <= 0)
  {
    v8 = 0;
    v47 = a5;
    v50 = a7;
    while (1)
    {
      NativeIndex = utext_getNativeIndex(a2);
      if (NativeIndex >= a4)
        goto LABEL_56;
      v17 = v8 % 3;
      v18 = &v52[45 * (v8 % 3)];
      v19 = sub_18BBB3ADC(v18, a2, a1[101], a4);
      if (v19 == 1)
      {
        v20 = &v52[45 * v17];
        utext_setNativeIndex(a2, (int)v20[v20[3] + 5] + (uint64_t)(int)v20[2]);
        v21 = (int)v20[3];
        v22 = v20[v21 + 5];
        v23 = v20[v21 + 25];
        v8 = (v8 + 1);
      }
      else if (v19 < 2)
      {
        v22 = 0;
        v23 = 0;
      }
      else
      {
        v24 = (v8 + 1);
        if (utext_getNativeIndex(a2) < a4)
        {
          v25 = &v52[45 * v17];
          v48 = v25 + 3;
          v49 = v25 + 4;
          v26 = &v52[45 * (((int)v8 + 2) % 3u)];
          while ((int)sub_18BBB3ADC(&v52[45 * (v24 % 3)], a2, a1[101], a4) < 1)
          {
LABEL_21:
            if (!sub_18BBB3BA4((uint64_t)v18, a2))
              goto LABEL_25;
          }
          *v48 = *v49;
          if ((int)utext_getNativeIndex(a2) < a4)
          {
            while (!sub_18BBB3ADC(v26, a2, a1[101], a4))
            {
              if (!sub_18BBB3BA4((uint64_t)&v52[45 * (v24 % 3)], a2))
                goto LABEL_21;
            }
            *v48 = *v49;
          }
        }
LABEL_25:
        v27 = &v52[45 * v17];
        utext_setNativeIndex(a2, (int)v27[v27[3] + 5] + (uint64_t)(int)v27[2]);
        v28 = (int)v27[3];
        v22 = v27[v28 + 5];
        v23 = v27[v28 + 25];
        v8 = v24;
        a5 = v47;
      }
      v29 = (UErrorCode *)v50;
      if ((int)utext_getNativeIndex(a2) < a4 && v23 <= 2)
      {
        if ((int)sub_18BBB3ADC(&v52[45 * (v8 % 3)], a2, a1[101], a4) > 0
          || v22 && (int)v52[45 * (v8 % 3) + 1] > 2)
        {
          utext_setNativeIndex(a2, v22 + NativeIndex);
        }
        else
        {
          v30 = utext_getNativeIndex(a2);
          v31 = utext_next32(a2);
          v32 = utext_getNativeIndex(a2) - v30;
          v33 = a4 - v32 - (v22 + NativeIndex);
          if (v33 >= 1)
          {
            do
            {
              v34 = utext_current32(a2);
              if (icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 26), v31))
              {
                if (icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 51), v34))
                {
                  v35 = sub_18BBB3ADC(&v52[45 * (((int)v8 + 1) % 3u)], a2, a1[101], a4);
                  utext_setNativeIndex(a2, v32 + v22 + NativeIndex);
                  if (v35 > 0)
                    break;
                }
              }
              v36 = utext_getNativeIndex(a2);
              v31 = utext_next32(a2);
              v37 = utext_getNativeIndex(a2);
              v32 += v37 - v36;
              v38 = __OFSUB__(v33, v37 - v36);
              v33 -= v37 - v36;
            }
            while (!((v33 < 0) ^ v38 | (v33 == 0)));
          }
          if (v22 >= 1)
            v8 = v8;
          else
            v8 = (v8 + 1);
          v22 += v32;
          a5 = v47;
          v29 = (UErrorCode *)v50;
        }
      }
      v39 = utext_getNativeIndex(a2);
      if (v39 < a4)
      {
        v40 = v39;
        do
        {
          v41 = utext_current32(a2);
          if (!icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 76), v41))
            break;
          utext_next32(a2);
          v22 = v22 - v40 + utext_getNativeIndex(a2);
          v40 = utext_getNativeIndex(a2);
        }
        while (v40 < a4);
      }
      if (v22 >= 1)
      {
        v42 = *(_DWORD *)(a5 + 8);
        if (v42 >= -1 && *(_DWORD *)(a5 + 12) > v42)
          goto LABEL_54;
        if (icu::UVector32::expandCapacity((icu::UVector32 *)a5, v42 + 1, v29))
          break;
      }
LABEL_55:
      if (*(int *)v29 >= 1)
        goto LABEL_56;
    }
    v42 = *(_DWORD *)(a5 + 8);
LABEL_54:
    *(_DWORD *)(*(_QWORD *)(a5 + 24) + 4 * v42) = v22 + NativeIndex;
    ++*(_DWORD *)(a5 + 8);
    goto LABEL_55;
  }
  v8 = 0;
LABEL_56:
  v44 = *(_DWORD *)(a5 + 8);
  v38 = __OFSUB__(v44, 1);
  v45 = v44 - 1;
  if (v45 < 0 != v38)
  {
    if (a4 <= 0)
      return (v8 - 1);
  }
  else if (*(_DWORD *)(*(_QWORD *)(a5 + 24) + 4 * v45) >= a4)
  {
    *(_DWORD *)(a5 + 8) = v45;
    return (v8 - 1);
  }
  return v8;
}

_QWORD *sub_18BBB541C(_QWORD *a1, uint64_t a2, UErrorCode *a3)
{
  _QWORD *v6;
  _OWORD v8[12];
  uint64_t v9;
  _BYTE v10[64];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = sub_18BBAC31C(a1);
  *v6 = off_1E2246928;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(v6 + 1));
  *a1 = off_1E2246A48;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 26));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 76));
  a1[101] = a2;
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  icu::UnicodeString::UnicodeString((uint64_t)v10, (uint64_t)L"[[:Khmr:]&[:LineBreak=SA:]]");
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v8, (const icu::UnicodeString *)v10, a3);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v10);
  if (*(int *)a3 <= 0)
    (*(void (**)(_QWORD *, _OWORD *))(*a1 + 40))(a1, v8);
  icu::UnicodeString::UnicodeString((uint64_t)v10, (uint64_t)L"[[:Khmr:]&[:LineBreak=SA:]&[:M:]]");
  icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 76), (const icu::UnicodeString *)v10, a3);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v10);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 76), 0x20u);
  icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 26), (const icu::UnicodeSet *)v8);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 51), 0x1780u, 0x17B3u);
  icu::UnicodeSet::remove((icu::UnicodeSet *)(a1 + 26), 0x17D2u);
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 26));
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v8);
  return a1;
}

void sub_18BBB55C0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E2246A48;
  v2 = a1[101];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 26));
  *a1 = off_1E2246928;
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 1));
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18BBB5630(_QWORD *a1)
{
  void *v1;

  sub_18BBB55C0(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BBB5644(uint64_t *a1, UText *a2, int a3, int a4, uint64_t a5, uint64_t a6, int *a7)
{
  uint64_t v8;
  uint64_t i;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  int v19;
  unsigned int *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;
  UErrorCode *v29;
  int v30;
  UChar32 v31;
  int v32;
  int v33;
  UChar32 v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  UChar32 v41;
  int v42;
  int v44;
  int v45;
  uint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  int *v50;
  int NativeIndex;
  unsigned int v52[135];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (*a7 > 0 || a4 - a3 < 4)
    return 0;
  bzero(v52, 0x21CuLL);
  for (i = 0; i != 135; i += 45)
  {
    v16 = &v52[i];
    *(_OWORD *)v16 = xmmword_18BDCBF50;
    v16[4] = 0;
  }
  utext_setNativeIndex(a2, a3);
  if (*a7 <= 0)
  {
    v8 = 0;
    v47 = a5;
    v50 = a7;
    while (1)
    {
      NativeIndex = utext_getNativeIndex(a2);
      if (NativeIndex >= a4)
        goto LABEL_56;
      v17 = v8 % 3;
      v18 = &v52[45 * (v8 % 3)];
      v19 = sub_18BBB3ADC(v18, a2, a1[101], a4);
      if (v19 == 1)
      {
        v20 = &v52[45 * v17];
        utext_setNativeIndex(a2, (int)v20[v20[3] + 5] + (uint64_t)(int)v20[2]);
        v21 = (int)v20[3];
        v22 = v20[v21 + 5];
        v23 = v20[v21 + 25];
        v8 = (v8 + 1);
      }
      else if (v19 < 2)
      {
        v22 = 0;
        v23 = 0;
      }
      else
      {
        v24 = (v8 + 1);
        if ((int)utext_getNativeIndex(a2) < a4)
        {
          v25 = &v52[45 * v17];
          v48 = v25 + 3;
          v49 = v25 + 4;
          v26 = &v52[45 * (((int)v8 + 2) % 3u)];
          while ((int)sub_18BBB3ADC(&v52[45 * (v24 % 3)], a2, a1[101], a4) < 1)
          {
LABEL_21:
            if (!sub_18BBB3BA4((uint64_t)v18, a2))
              goto LABEL_25;
          }
          *v48 = *v49;
          if ((int)utext_getNativeIndex(a2) < a4)
          {
            while (!sub_18BBB3ADC(v26, a2, a1[101], a4))
            {
              if (!sub_18BBB3BA4((uint64_t)&v52[45 * (v24 % 3)], a2))
                goto LABEL_21;
            }
            *v48 = *v49;
          }
        }
LABEL_25:
        v27 = &v52[45 * v17];
        utext_setNativeIndex(a2, (int)v27[v27[3] + 5] + (uint64_t)(int)v27[2]);
        v28 = (int)v27[3];
        v22 = v27[v28 + 5];
        v23 = v27[v28 + 25];
        v8 = v24;
        a5 = v47;
      }
      v29 = (UErrorCode *)v50;
      if ((int)utext_getNativeIndex(a2) < a4 && v23 <= 2)
      {
        if ((int)sub_18BBB3ADC(&v52[45 * (v8 % 3)], a2, a1[101], a4) > 0
          || v22 && (int)v52[45 * (v8 % 3) + 1] > 2)
        {
          utext_setNativeIndex(a2, v22 + NativeIndex);
        }
        else
        {
          v30 = utext_getNativeIndex(a2);
          v31 = utext_next32(a2);
          v32 = utext_getNativeIndex(a2) - v30;
          v33 = a4 - v32 - (v22 + NativeIndex);
          if (v33 >= 1)
          {
            do
            {
              v34 = utext_current32(a2);
              if (icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 26), v31))
              {
                if (icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 51), v34))
                {
                  v35 = sub_18BBB3ADC(&v52[45 * (((int)v8 + 1) % 3u)], a2, a1[101], a4);
                  utext_setNativeIndex(a2, v32 + v22 + NativeIndex);
                  if (v35 > 0)
                    break;
                }
              }
              v36 = utext_getNativeIndex(a2);
              v31 = utext_next32(a2);
              v37 = utext_getNativeIndex(a2);
              v32 += v37 - v36;
              v38 = __OFSUB__(v33, v37 - v36);
              v33 -= v37 - v36;
            }
            while (!((v33 < 0) ^ v38 | (v33 == 0)));
          }
          if (v22 >= 1)
            v8 = v8;
          else
            v8 = (v8 + 1);
          v22 += v32;
          a5 = v47;
          v29 = (UErrorCode *)v50;
        }
      }
      v39 = utext_getNativeIndex(a2);
      if (v39 < a4)
      {
        v40 = v39;
        do
        {
          v41 = utext_current32(a2);
          if (!icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 76), v41))
            break;
          utext_next32(a2);
          v22 = v22 - v40 + utext_getNativeIndex(a2);
          v40 = utext_getNativeIndex(a2);
        }
        while (v40 < a4);
      }
      if (v22 >= 1)
      {
        v42 = *(_DWORD *)(a5 + 8);
        if (v42 >= -1 && *(_DWORD *)(a5 + 12) > v42)
          goto LABEL_54;
        if (icu::UVector32::expandCapacity((icu::UVector32 *)a5, v42 + 1, v29))
          break;
      }
LABEL_55:
      if (*(int *)v29 >= 1)
        goto LABEL_56;
    }
    v42 = *(_DWORD *)(a5 + 8);
LABEL_54:
    *(_DWORD *)(*(_QWORD *)(a5 + 24) + 4 * v42) = v22 + NativeIndex;
    ++*(_DWORD *)(a5 + 8);
    goto LABEL_55;
  }
  v8 = 0;
LABEL_56:
  v44 = *(_DWORD *)(a5 + 8);
  v38 = __OFSUB__(v44, 1);
  v45 = v44 - 1;
  if (v45 < 0 != v38)
  {
    if (a4 <= 0)
      return (v8 - 1);
  }
  else if (*(_DWORD *)(*(_QWORD *)(a5 + 24) + 4 * v45) >= a4)
  {
    *(_DWORD *)(a5 + 8) = v45;
    return (v8 - 1);
  }
  return v8;
}

int32x2_t *sub_18BBB5B94(int32x2_t *a1, uint64_t a2, int a3, icu::Normalizer2 *a4)
{
  _QWORD *v8;
  UErrorCode *v9;
  _BYTE v11[64];
  _OWORD v12[12];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = sub_18BBAC31C(a1);
  *v8 = off_1E2246928;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(v8 + 1));
  *a1 = (int32x2_t)off_1E2246A90;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&a1[26]);
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&a1[51]);
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&a1[76]);
  a1[101] = (int32x2_t)a2;
  a1[104].i8[0] = 0;
  a1[105] = 0;
  LODWORD(v12[0]) = 0;
  uhash_init(a1 + 106, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)v12);
  if (SLODWORD(v12[0]) <= 0)
  {
    a1[105] = (int32x2_t)&a1[106];
    uhash_setKeyDeleter((uint64_t)&a1[106], (uint64_t)uprv_deleteUObject);
  }
  a1[103] = 0;
  a1[102] = (int32x2_t)icu::Normalizer2::getNFKCInstance(a4, v9);
  icu::UnicodeString::UnicodeString((uint64_t)v12, (uint64_t)L"[\\uac00-\\ud7a3]");
  icu::UnicodeSet::applyPattern((icu::UnicodeSet *)&a1[26], (const icu::UnicodeString *)v12, (UErrorCode *)a4);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v12);
  icu::UnicodeSet::compact((icu::UnicodeSet *)&a1[26]);
  icu::UnicodeString::UnicodeString((uint64_t)v12, (uint64_t)L"[[:Nd:][:Pi:][:Ps:][:Alphabetic:]]");
  icu::UnicodeSet::applyPattern((icu::UnicodeSet *)&a1[51], (const icu::UnicodeString *)v12, (UErrorCode *)a4);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v12);
  icu::UnicodeSet::compact((icu::UnicodeSet *)&a1[51]);
  icu::UnicodeString::UnicodeString((uint64_t)v12, (uint64_t)"[");
  icu::UnicodeSet::applyPattern((icu::UnicodeSet *)&a1[76], (const icu::UnicodeString *)v12, (UErrorCode *)a4);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v12);
  icu::UnicodeSet::compact((icu::UnicodeSet *)&a1[76]);
  if (a3)
  {
    v13 = 0;
    memset(v12, 0, sizeof(v12));
    icu::UnicodeString::UnicodeString((uint64_t)v11, (uint64_t)L"[[:Han:][:Hiragana:][:Katakana:]\\u30fc\\uff70\\uff9e\\uff9f]");
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v12, (const icu::UnicodeString *)v11, (UErrorCode *)a4);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v11);
    a1[104].i8[0] = 1;
    if (*(int *)a4 <= 0)
    {
      (*(void (**)(int32x2_t *, _OWORD *))(*(_QWORD *)a1 + 40))(a1, v12);
      sub_18BBB7178((uint64_t)a1, (UErrorCode *)a4);
      sub_18BBB72D0((uint64_t)a1, (UErrorCode *)a4);
    }
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v12);
  }
  else if (*(int *)a4 <= 0)
  {
    (*(void (**)(int32x2_t *, int32x2_t *))(*(_QWORD *)a1 + 40))(a1, a1 + 26);
  }
  return a1;
}

void sub_18BBB5E00(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *a1 = off_1E2246A90;
  v2 = a1[101];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[103];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void **)a1[105];
  if (v4)
    uhash_close(v4);
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 26));
  *a1 = off_1E2246928;
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 1));
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18BBB5E90(_QWORD *a1)
{
  void *v1;

  sub_18BBB5E00(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BBB5EA4(uint64_t a1, UText *ut, int a3, int a4, uint64_t a5, int a6, UErrorCode *a7)
{
  uint64_t v8;
  BOOL v9;
  int v10;
  int v14;
  UText *v15;
  int64_t v17;
  int64_t chunkNativeStart;
  unint64_t v19;
  int v20;
  icu::UVector32 *v21;
  icu::UVector32 *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int NativeIndex;
  UChar32 v27;
  int v28;
  int *v29;
  int v30;
  icu::UVector32 *v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v42;
  int v43;
  uint64_t v45;
  _BOOL8 v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v57;
  int v59;
  unsigned int v60;
  int v61;
  _BOOL8 v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  int v68;
  BOOL v69;
  _BOOL4 v70;
  int v72;
  int v73;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  BOOL v86;
  _BOOL4 v87;
  int v88;
  unsigned int v89;
  int v90;
  icu::UVector32 *v91;
  icu::UVector32 *v92;
  icu::UVector32 *v93;
  unsigned int v94;
  int i;
  icu::UVector32 *v96;
  int v97;
  BOOL v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  icu::UVector32 *v106;
  uint64_t v107;
  unsigned __int16 v108;
  int v109;
  int v110;
  int v111;
  int v112;
  __int16 v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  BOOL v119;
  int v120;
  int v121;
  int sizeOfStruct;
  int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  BOOL v131;
  int v132;
  int v133;
  int v134;
  int v136;
  icu::UVector32 *v137;
  int v138;
  UChar32 v140;
  int v141;
  UChar32 v142;
  int v143;
  int v144;
  int v145;
  int v147;
  int v148;
  int v149;
  int v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  int v156;
  icu::UnicodeSet *v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  const UChar *v169;
  icu::UVector32 *v170;
  UText v171;
  _BYTE v172[40];
  __int128 v173;
  uint64_t v174;
  void (**v175)(icu::UnicodeString *__hidden);
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  void (**v180)(icu::UnicodeString *__hidden);
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;

  v8 = 0;
  v185 = *MEMORY[0x1E0C80C00];
  v9 = __OFSUB__(a4, a3);
  v10 = a4 - a3;
  if (!((v10 < 0) ^ v9 | (v10 == 0)) && *(int *)a7 <= 0)
  {
    v14 = a3;
    v15 = ut;
    v181 = 0u;
    v184 = 0;
    v183 = 0u;
    v182 = 0u;
    v180 = off_1E2256B38;
    LOWORD(v181) = 2;
    v170 = 0;
    if ((ut->providerProperties & 4) != 0)
    {
      chunkNativeStart = ut->chunkNativeStart;
      v17 = a3;
      if (chunkNativeStart <= a3 && v15->chunkNativeLimit >= a4 && a4 - chunkNativeStart <= v15->nativeIndexingLimit)
      {
        v154 = a4;
        v169 = &v15->chunkContents[a3 - chunkNativeStart];
        icu::UnicodeString::setTo((icu::UnicodeString *)&v180, 0, &v169, v10);
        goto LABEL_33;
      }
    }
    else
    {
      v17 = a3;
    }
    utext_setNativeIndex(v15, v17);
    v20 = a4;
    if (utext_nativeLength(v15) < a4)
      v20 = utext_nativeLength(v15);
    v21 = (icu::UVector32 *)icu::UMemory::operator new((icu::UMemory *)0x20, v19);
    if (!v21)
    {
      if (*(int *)a7 <= 0)
      {
        v8 = 0;
        *a7 = U_MEMORY_ALLOCATION_ERROR;
LABEL_336:
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v180);
        return v8;
      }
      goto LABEL_230;
    }
    v22 = icu::UVector32::UVector32(v21, a7);
    if (*(int *)a7 <= 0)
    {
      v170 = v22;
    }
    else
    {
      (*(void (**)(icu::UVector32 *))(*(_QWORD *)v22 + 8))(v22);
      if (*(int *)a7 > 0)
        goto LABEL_230;
    }
    v155 = a6;
    v23 = a5;
    v24 = v14;
    v154 = a4;
    v25 = a1;
    if (utext_getNativeIndex(v15) < v20)
    {
      do
      {
        NativeIndex = utext_getNativeIndex(v15);
        v27 = utext_next32(v15);
        icu::UnicodeString::append((uint64_t)&v180, v27);
        while (1)
        {
          v29 = (int *)((char *)v170 + 8);
          v28 = *((_DWORD *)v170 + 2);
          v30 = (unsigned __int16)v181 >> 5;
          if ((v181 & 0x8000u) != 0)
            v30 = DWORD1(v181);
          if (v28 >= v30)
            break;
          if (v28 >= -1 && *((_DWORD *)v170 + 3) > v28)
          {
LABEL_26:
            *(_DWORD *)(*((_QWORD *)v170 + 3) + 4 * v28) = NativeIndex;
            ++*v29;
          }
          else if (icu::UVector32::expandCapacity(v170, v28 + 1, a7))
          {
            v28 = *v29;
            goto LABEL_26;
          }
        }
        v15 = ut;
      }
      while (utext_getNativeIndex(ut) < v20);
    }
    v31 = v170;
    v32 = *((_DWORD *)v170 + 2);
    a1 = v25;
    v14 = v24;
    a5 = v23;
    a6 = v155;
    if (v32 < -1 || *((_DWORD *)v170 + 3) <= v32)
    {
      if (!icu::UVector32::expandCapacity(v170, v32 + 1, a7))
        goto LABEL_33;
      v32 = *((_DWORD *)v170 + 2);
    }
    *(_DWORD *)(*((_QWORD *)v170 + 3) + 4 * v32) = v20;
    ++*((_DWORD *)v31 + 2);
LABEL_33:
    if ((*(unsigned int (**)(_QWORD, void (***)(icu::UnicodeString *__hidden), UErrorCode *))(**(_QWORD **)(a1 + 816) + 88))(*(_QWORD *)(a1 + 816), &v180, a7))
    {
LABEL_34:
      v156 = a6;
      v34 = icu::UnicodeString::countChar32((icu::UnicodeString *)&v180, 0, 0x7FFFFFFF);
      v36 = v34;
      v37 = (unsigned __int16)v181 >> 5;
      if ((v181 & 0x8000u) != 0)
        v37 = DWORD1(v181);
      if ((_DWORD)v34 == v37)
      {
LABEL_37:
        memset(v172, 0, 32);
        icu::UVector32::UVector32((icu::UVector32 *)v172, v36 + 1, a7);
        v38 = *(_DWORD *)&v172[8];
        if (*(int *)&v172[8] < -1 || *(int *)&v172[12] <= *(int *)&v172[8])
        {
          if (!icu::UVector32::expandCapacity((icu::UVector32 *)v172, *(_DWORD *)&v172[8] + 1, a7))
            goto LABEL_42;
          v38 = *(_DWORD *)&v172[8];
        }
        *(_DWORD *)(*(_QWORD *)&v172[24] + 4 * v38) = 0;
        ++*(_DWORD *)&v172[8];
LABEL_42:
        if ((int)v36 >= 1)
        {
          v39 = v36;
          while (1)
          {
            v40 = *(_DWORD *)&v172[8];
            if (*(int *)&v172[8] >= -1 && *(_DWORD *)&v172[12] > *(_DWORD *)&v172[8])
              goto LABEL_51;
            if (icu::UVector32::expandCapacity((icu::UVector32 *)v172, *(_DWORD *)&v172[8] + 1, a7))
              break;
LABEL_52:
            if (!--v39)
              goto LABEL_53;
          }
          v40 = *(_DWORD *)&v172[8];
LABEL_51:
          *(_DWORD *)(*(_QWORD *)&v172[24] + 4 * v40) = -1;
          ++*(_DWORD *)&v172[8];
          goto LABEL_52;
        }
LABEL_53:
        v167 = 0u;
        v168 = 0u;
        icu::UVector32::UVector32((icu::UVector32 *)&v167, v36 + 1, a7);
        if ((v36 & 0x80000000) == 0)
        {
          v42 = v36 + 1;
          while (1)
          {
            v43 = DWORD2(v167);
            if (SDWORD2(v167) >= -1 && SHIDWORD(v167) > SDWORD2(v167))
              goto LABEL_62;
            if (icu::UVector32::expandCapacity((icu::UVector32 *)&v167, DWORD2(v167) + 1, a7))
              break;
LABEL_63:
            if (!--v42)
              goto LABEL_64;
          }
          v43 = DWORD2(v167);
LABEL_62:
          *(_DWORD *)(*((_QWORD *)&v168 + 1) + 4 * v43) = -1;
          ++DWORD2(v167);
          goto LABEL_63;
        }
LABEL_64:
        v151 = v36 + 1;
        v152 = a5;
        v158 = a1;
        v165 = 0u;
        v166 = 0u;
        icu::UVector32::UVector32((icu::UVector32 *)&v165, v36, a7);
        icu::UVector32::setSize((icu::UVector32 *)&v165, v36);
        v163 = 0u;
        v164 = 0u;
        icu::UVector32::UVector32((icu::UVector32 *)&v163, v36, a7);
        icu::UVector32::setSize((icu::UVector32 *)&v163, v36);
        memset(&v171, 0, sizeof(v171));
        v171.magic = 878368812;
        v171.sizeOfStruct = 144;
        utext_openUnicodeString(&v171, (uint64_t)&v180, a7);
        if ((int)v36 >= 1)
        {
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v157 = (icu::UnicodeSet *)(a1 + 208);
          v159 = v36;
          do
          {
            v48 = *(int *)&v172[8] >= 1 && v45 < *(int *)&v172[8];
            if (v48 && *(_DWORD *)(*(_QWORD *)&v172[24] + 4 * v45) == -1)
            {
              v62 = v46;
            }
            else
            {
              utext_setNativeIndex(&v171, v47);
              v49 = v36;
              v50 = (*(uint64_t (**)(_QWORD, UText *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v158 + 808) + 16))(*(_QWORD *)(v158 + 808), &v171, 20, v36, 0, *((_QWORD *)&v164 + 1), *((_QWORD *)&v166 + 1), 0);
              if (v50)
                v51 = SDWORD2(v163) < 1;
              else
                v51 = 1;
              if (v51 || **((_DWORD **)&v164 + 1) != 1)
              {
                v52 = icu::UnicodeString::char32At((icu::UnicodeString *)&v180, v47);
                if (!icu::UnicodeSet::contains(v157, v52))
                {
                  icu::UVector32::setElementAt((uint64_t)&v165, 255, v50);
                  icu::UVector32::setElementAt((uint64_t)&v163, 1, v50++);
                }
              }
              if (v50 >= 1)
              {
                v53 = 0;
                v54 = v50;
                do
                {
                  if (v45 >= *(int *)&v172[8])
                    v55 = 0;
                  else
                    v55 = *(_DWORD *)(*(_QWORD *)&v172[24] + 4 * v45);
                  if (SDWORD2(v165) >= 1 && v53 < SDWORD2(v165))
                    v57 = *(_DWORD *)(*((_QWORD *)&v166 + 1) + 4 * v53);
                  else
                    v57 = 0;
                  if (SDWORD2(v163) >= 1 && v53 < SDWORD2(v163))
                    v59 = *(_DWORD *)(*((_QWORD *)&v164 + 1) + 4 * v53);
                  else
                    v59 = 0;
                  v60 = v59 + v45;
                  if (v59 + (int)v45 >= 0
                    && *(int *)&v172[8] >= 1
                    && *(int *)&v172[8] > (int)v60
                    && (v57 + v55) < *(_DWORD *)(*(_QWORD *)&v172[24] + 4 * v60))
                  {
                    icu::UVector32::setElementAt((uint64_t)v172, v57 + v55, v59 + v45);
                    icu::UVector32::setElementAt((uint64_t)&v167, v45, v60);
                  }
                  ++v53;
                }
                while (v54 != v53);
              }
              v61 = icu::UnicodeString::char32At((icu::UnicodeString *)&v180, v47);
              v62 = v61 != 12539 && (v61 - 12449) < 0x5E || (v61 - 65382) < 0x3A;
              if (!v46 && v62)
              {
                v63 = 1;
                v64 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)&v180, v47, 1);
                v65 = (unsigned __int16)v181 >> 5;
                if ((v181 & 0x8000u) != 0)
                  v65 = DWORD1(v181);
                if (v64 < v65)
                {
                  v66 = v64;
                  while (1)
                  {
                    v67 = v63;
                    v68 = icu::UnicodeString::char32At((icu::UnicodeString *)&v180, v66);
                    v69 = v68 == 12539 || (v68 - 12449) >= 0x5E;
                    v70 = !v69;
                    if ((v68 - 65382) >= 0x3A && !v70)
                      break;
                    v72 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)&v180, v66, 1);
                    v66 = v72;
                    ++v63;
                    v73 = (unsigned __int16)v181 >> 5;
                    if ((v181 & 0x8000u) != 0)
                      v73 = DWORD1(v181);
                    if (v72 >= v73 || v67 >= 0x13)
                    {
                      if (v67 > 0x12)
                        goto LABEL_107;
                      break;
                    }
                  }
                }
                v75 = 0;
                if (*(int *)&v172[8] >= 1 && v45 < *(int *)&v172[8])
                  v75 = *(_DWORD *)(*(_QWORD *)&v172[24] + 4 * v45);
                if (v63 <= 8)
                  v76 = dword_18BDCBFF8[v63];
                else
                  v76 = 0x2000;
                if (*(int *)&v172[8] >= 1
                  && *(int *)&v172[8] > (int)(v63 + v45)
                  && (v76 + v75) < *(_DWORD *)(*(_QWORD *)&v172[24] + 4 * (v63 + v45)))
                {
                  icu::UVector32::setElementAt((uint64_t)v172, v76 + v75, v63 + v45);
                  icu::UVector32::setElementAt((uint64_t)&v167, v45, v63 + v45);
                }
              }
LABEL_107:
              v36 = v49;
            }
            ++v45;
            v47 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)&v180, v47, 1);
            v46 = v62;
          }
          while (v45 != v159);
        }
        utext_close(&v171);
        v161 = 0u;
        v162 = 0u;
        icu::UVector32::UVector32((icu::UVector32 *)&v161, v151, a7);
        if ((v36 & 0x80000000) != 0
          || *(int *)&v172[8] < 1
          || *(int *)&v172[8] <= (int)v36
          || *(_DWORD *)(*(_QWORD *)&v172[24] + 4 * v36) != -1)
        {
          v77 = v156;
          if (v156)
          {
            v78 = DWORD2(v161);
            if (SDWORD2(v161) < -1 || SHIDWORD(v161) <= SDWORD2(v161))
            {
              if (!icu::UVector32::expandCapacity((icu::UVector32 *)&v161, DWORD2(v161) + 1, a7))
              {
LABEL_154:
                v79 = *a7 < U_ILLEGAL_ARGUMENT_ERROR;
                if (*(int *)a7 <= 0 && (v36 & 0x80000000) == 0)
                {
                  v79 = 1;
                  if (SDWORD2(v167) >= 1 && SDWORD2(v167) > (int)v36)
                  {
                    v80 = *(_DWORD *)(*((_QWORD *)&v168 + 1) + 4 * v36);
                    if (v80 >= 1)
                    {
                      while (1)
                      {
                        v81 = v80;
                        v82 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)&v180, 0, v80);
                        v83 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)&v180, 0, v36);
                        icu::UnicodeString::tempSubString((icu::UnicodeString *)&v180, v82, v83 - v82, (icu::UnicodeString *)&v175);
                        if (uhash_containsKey(*(_QWORD *)(v158 + 840), (uint64_t)&v175))
                        {
                          icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v175);
                          LODWORD(v36) = v81;
                          goto LABEL_180;
                        }
                        v84 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)&v180, v82, -1);
                        v85 = icu::UnicodeString::char32At((icu::UnicodeString *)&v180, v84);
                        v86 = v85 == 12539 || (v85 - 12449) >= 0x5E;
                        v87 = !v86;
                        if ((v85 - 65382) >= 0x3A && !v87)
                          break;
                        v88 = icu::UnicodeString::char32At((icu::UnicodeString *)&v180, v82);
                        LODWORD(v36) = v81;
                        if (v88 != 12539 && (v88 - 12449) <= 0x5D)
                        {
                          icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v175);
                          goto LABEL_180;
                        }
                        v89 = v88 - 65382;
                        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v175);
                        if (v89 >= 0x3A)
                          goto LABEL_174;
LABEL_180:
                        if (SDWORD2(v167) >= 1 && SDWORD2(v167) > (int)v36)
                        {
                          v80 = *(_DWORD *)(*((_QWORD *)&v168 + 1) + 4 * v36);
                          if (v80 > 0)
                            continue;
                        }
                        goto LABEL_275;
                      }
                      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v175);
                      LODWORD(v36) = v81;
LABEL_174:
                      v90 = DWORD2(v161);
                      if (SDWORD2(v161) < -1 || SHIDWORD(v161) <= SDWORD2(v161))
                      {
                        if (!icu::UVector32::expandCapacity((icu::UVector32 *)&v161, DWORD2(v161) + 1, a7))
                        {
LABEL_179:
                          ++v79;
                          goto LABEL_180;
                        }
                        v90 = DWORD2(v161);
                      }
                      *(_DWORD *)(*((_QWORD *)&v162 + 1) + 4 * v90) = v36;
                      ++DWORD2(v161);
                      goto LABEL_179;
                    }
                  }
                }
LABEL_275:
                v126 = *(_DWORD *)(v152 + 8);
                if (v126)
                {
                  v9 = __OFSUB__(v126, 1);
                  v127 = v126 - 1;
                  v128 = v127 < 0 != v9 ? 0 : *(_DWORD *)(*(_QWORD *)(v152 + 24) + 4 * v127);
                  if (v128 >= v14)
                  {
LABEL_286:
                    if (v79 >= 1)
                    {
                      v8 = 0;
                      v130 = v79;
                      if (v77)
                        v131 = v14 <= 0;
                      else
                        v131 = 1;
                      v132 = !v131;
                      v133 = -1;
                      while (1)
                      {
                        v134 = v133;
                        if (SDWORD2(v161) >= 1 && v130-- <= SDWORD2(v161))
                        {
                          v136 = *(_DWORD *)(*((_QWORD *)&v162 + 1) + 4 * v130);
                          v137 = v170;
                          if (!v170)
                          {
LABEL_308:
                            v133 = v136 + v14;
                            goto LABEL_309;
                          }
                          if (v136 < 0)
                          {
LABEL_307:
                            v133 = 0;
                            goto LABEL_309;
                          }
                        }
                        else
                        {
                          v136 = 0;
                          v137 = v170;
                          if (!v170)
                            goto LABEL_308;
                        }
                        v138 = *((_DWORD *)v137 + 2);
                        if (v138 < 1 || v138 <= v136)
                          goto LABEL_307;
                        v133 = *(_DWORD *)(*((_QWORD *)v137 + 3) + 4 * v136);
LABEL_309:
                        if (v133 <= v134)
                          goto LABEL_319;
                        if (v133 == v14)
                        {
                          if (!v132)
                            goto LABEL_319;
                          v140 = utext_char32At(ut, (v14 - 1));
                          if (!icu::UnicodeSet::contains((icu::UnicodeSet *)(v158 + 608), v140))
                            goto LABEL_319;
                        }
                        v141 = *(_DWORD *)(v152 + 8);
                        if (v141 >= -1 && *(_DWORD *)(v152 + 12) > v141)
                          goto LABEL_317;
                        if (icu::UVector32::expandCapacity((icu::UVector32 *)v152, v141 + 1, a7))
                        {
                          v141 = *(_DWORD *)(v152 + 8);
LABEL_317:
                          *(_DWORD *)(*(_QWORD *)(v152 + 24) + 4 * v141) = v133;
                          ++*(_DWORD *)(v152 + 8);
                        }
                        v8 = (v8 + 1);
LABEL_319:
                        if ((unint64_t)(v130 + 1) <= 1)
                          goto LABEL_322;
                      }
                    }
                    v8 = 0;
LABEL_322:
                    v142 = utext_char32At(ut, v154);
                    v143 = *(_DWORD *)(v152 + 8);
                    if (!v143)
                      goto LABEL_333;
                    v144 = v143 < 1 ? 0 : *(_DWORD *)(*(_QWORD *)(v152 + 24) + 4 * (v143 - 1));
                    if (v144 != v154)
                      goto LABEL_333;
                    if (v77)
                    {
                      if (icu::UnicodeSet::contains((icu::UnicodeSet *)(v158 + 408), v142))
                      {
LABEL_333:
                        icu::UVector32::~UVector32((void **)&v161);
                        icu::UVector32::~UVector32((void **)&v163);
                        icu::UVector32::~UVector32((void **)&v165);
                        icu::UVector32::~UVector32((void **)&v167);
                        icu::UVector32::~UVector32((void **)v172);
LABEL_334:
                        if (v170)
                          (*(void (**)(icu::UVector32 *))(*(_QWORD *)v170 + 8))(v170);
                        goto LABEL_336;
                      }
                      v143 = *(_DWORD *)(v152 + 8);
                    }
                    v9 = __OFSUB__(v143, 1);
                    v145 = v143 - 1;
                    if (v145 < 0 == v9)
                      *(_DWORD *)(v152 + 8) = v145;
                    v8 = (v8 - 1);
                    goto LABEL_333;
                  }
                }
                v129 = DWORD2(v161);
                if (SDWORD2(v161) < -1 || SHIDWORD(v161) <= SDWORD2(v161))
                {
                  if (!icu::UVector32::expandCapacity((icu::UVector32 *)&v161, DWORD2(v161) + 1, a7))
                  {
LABEL_285:
                    ++v79;
                    goto LABEL_286;
                  }
                  v129 = DWORD2(v161);
                }
                *(_DWORD *)(*((_QWORD *)&v162 + 1) + 4 * v129) = 0;
                ++DWORD2(v161);
                goto LABEL_285;
              }
              v78 = DWORD2(v161);
            }
            *(_DWORD *)(*((_QWORD *)&v162 + 1) + 4 * v78) = v36;
            ++DWORD2(v161);
            goto LABEL_154;
          }
          if ((int)v36 < 1)
          {
            v79 = 0;
            goto LABEL_275;
          }
          v102 = 1;
          while (1)
          {
            v79 = v102;
            v103 = DWORD2(v161);
            if (SDWORD2(v161) >= -1 && SHIDWORD(v161) > SDWORD2(v161))
              goto LABEL_216;
            if (icu::UVector32::expandCapacity((icu::UVector32 *)&v161, DWORD2(v161) + 1, a7))
              break;
LABEL_217:
            if (SDWORD2(v167) >= 1 && SDWORD2(v167) > (int)v36)
            {
              LODWORD(v36) = *(_DWORD *)(*((_QWORD *)&v168 + 1) + 4 * v36);
              v102 = v79 + 1;
              if ((int)v36 > 0)
                continue;
            }
            goto LABEL_275;
          }
          v103 = DWORD2(v161);
LABEL_216:
          *(_DWORD *)(*((_QWORD *)&v162 + 1) + 4 * v103) = v36;
          ++DWORD2(v161);
          goto LABEL_217;
        }
        v125 = DWORD2(v161);
        v77 = v156;
        if (SDWORD2(v161) < -1 || SHIDWORD(v161) <= SDWORD2(v161))
        {
          if (!icu::UVector32::expandCapacity((icu::UVector32 *)&v161, DWORD2(v161) + 1, a7))
          {
LABEL_274:
            v79 = 1;
            goto LABEL_275;
          }
          v125 = DWORD2(v161);
        }
        *(_DWORD *)(*((_QWORD *)&v162 + 1) + 4 * v125) = v36;
        ++DWORD2(v161);
        goto LABEL_274;
      }
      v93 = v170;
      if (!v170)
      {
        v106 = (icu::UVector32 *)icu::UMemory::operator new((icu::UMemory *)0x20, v35);
        v107 = (uint64_t)v106;
        if (v106)
          icu::UVector32::UVector32(v106, a7);
        sub_18BBB709C((uint64_t)&v170, v107, (int *)a7);
        if (*(int *)a7 > 0)
        {
LABEL_230:
          v8 = 0;
          goto LABEL_334;
        }
      }
      v94 = 0;
      for (i = 0; ; i = icu::UnicodeString::moveIndex32((icu::UnicodeString *)&v180, i, 1))
      {
        v96 = v170;
        if (v93)
        {
          if (i < 0 || ((v97 = *((_DWORD *)v170 + 2), v97 >= 1) ? (v98 = v97 <= i) : (v98 = 1), v98))
            v100 = 0;
          else
            v100 = *(_DWORD *)(*((_QWORD *)v170 + 3) + 4 * i);
          icu::UVector32::setElementAt((uint64_t)v170, v100, v94);
        }
        else
        {
          v99 = *((_DWORD *)v170 + 2);
          if (v99 < -1 || *((_DWORD *)v170 + 3) <= v99)
          {
            if (!icu::UVector32::expandCapacity(v170, v99 + 1, a7))
              goto LABEL_203;
            v99 = *((_DWORD *)v96 + 2);
          }
          *(_DWORD *)(*((_QWORD *)v96 + 3) + 4 * v99) = i + v14;
          ++*((_DWORD *)v96 + 2);
        }
LABEL_203:
        v101 = (unsigned __int16)v181 >> 5;
        if ((v181 & 0x8000u) != 0)
          v101 = DWORD1(v181);
        if (i == v101)
          goto LABEL_37;
        ++v94;
      }
    }
    memset(&v171.providerProperties, 0, 56);
    *(_QWORD *)&v171.magic = off_1E2256B38;
    LOWORD(v171.providerProperties) = 2;
    v91 = (icu::UVector32 *)icu::UMemory::operator new((icu::UMemory *)0x20, v33);
    if (!v91)
    {
      if (*(int *)a7 <= 0)
        *a7 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_226;
    }
    v92 = v91;
    icu::UVector32::UVector32(v91, a7);
    if (*(int *)a7 > 0)
    {
      (*(void (**)(icu::UVector32 *))(*(_QWORD *)v92 + 8))(v92);
LABEL_226:
      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v171);
      goto LABEL_230;
    }
    v176 = 0u;
    v179 = 0;
    v178 = 0u;
    v177 = 0u;
    v175 = off_1E2256B38;
    LOWORD(v176) = 2;
    memset(&v172[8], 0, 32);
    v174 = 0;
    v173 = 0u;
    *(_QWORD *)v172 = off_1E2256B38;
    *(_WORD *)&v172[8] = 2;
    v108 = v181;
    v109 = (unsigned __int16)v181 >> 5;
    v110 = DWORD1(v181);
    if ((v181 & 0x8000u) != 0)
      v109 = DWORD1(v181);
    if (v109 >= 1)
    {
      v153 = a5;
      v111 = 0;
      while (1)
      {
        v112 = v111;
        if ((v176 & 1) != 0)
          v113 = 2;
        else
          v113 = v176 & 0x1F;
        LOWORD(v176) = v113;
        LODWORD(v114) = icu::UnicodeString::char32At((icu::UnicodeString *)&v180, v111);
        do
        {
          icu::UnicodeString::append((uint64_t)&v175, v114);
          v115 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)&v180, v111, 1);
          v111 = v115;
          v116 = (unsigned __int16)v181 >> 5;
          if ((v181 & 0x8000u) != 0)
            v116 = DWORD1(v181);
          if (v115 == v116)
            break;
          v114 = icu::UnicodeString::char32At((icu::UnicodeString *)&v180, v115);
        }
        while (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 816) + 120))(*(_QWORD *)(a1 + 816), v114));
        (*(void (**)(_QWORD, void (***)(icu::UnicodeString *__hidden), _BYTE *, UErrorCode *))(**(_QWORD **)(a1 + 816) + 24))(*(_QWORD *)(a1 + 816), &v175, v172, a7);
        if (*(__int16 *)&v172[8] >= 0)
          v117 = *(unsigned __int16 *)&v172[8] >> 5;
        else
          v117 = *(unsigned int *)&v172[12];
        icu::UnicodeString::doAppend((uint64_t)&v171, (const icu::UnicodeString *)v172, 0, v117);
        if (v170)
        {
          if (v112 < 0 || ((v118 = *((_DWORD *)v170 + 2), v118 >= 1) ? (v119 = v118 <= v112) : (v119 = 1), v119))
            v120 = 0;
          else
            v120 = *(_DWORD *)(*((_QWORD *)v170 + 3) + 4 * v112);
        }
        else
        {
          v120 = v112 + v14;
        }
        do
        {
          v121 = *((_DWORD *)v92 + 2);
          sizeOfStruct = LOWORD(v171.providerProperties) >> 5;
          if (SLOWORD(v171.providerProperties) < 0)
            sizeOfStruct = v171.sizeOfStruct;
          if (v121 >= sizeOfStruct)
            break;
          if (v121 >= -1 && *((_DWORD *)v92 + 3) > v121)
            goto LABEL_262;
          if (icu::UVector32::expandCapacity(v92, v121 + 1, a7))
          {
            v121 = *((_DWORD *)v92 + 2);
LABEL_262:
            *(_DWORD *)(*((_QWORD *)v92 + 3) + 4 * v121) = v120;
            ++*((_DWORD *)v92 + 2);
          }
        }
        while (*(int *)a7 < 1);
        v108 = v181;
        v123 = (unsigned __int16)v181 >> 5;
        v110 = DWORD1(v181);
        if ((v181 & 0x8000u) != 0)
          v123 = DWORD1(v181);
        if (v111 >= v123)
        {
          v124 = (__int16)v181 >> 31;
          a5 = v153;
          goto LABEL_339;
        }
      }
    }
    v124 = (__int16)v181 >> 31;
LABEL_339:
    if (!v170)
    {
      v147 = v108 >> 5;
      if (!v124)
        v110 = v147;
      v148 = v110 + v14;
      goto LABEL_353;
    }
    if ((v124 & 1) != 0)
    {
      if (v110 < 0)
        goto LABEL_352;
    }
    else
    {
      v110 = v108 >> 5;
    }
    v149 = *((_DWORD *)v170 + 2);
    if (v149 >= 1 && v149 > v110)
    {
      v148 = *(_DWORD *)(*((_QWORD *)v170 + 3) + 4 * v110);
LABEL_353:
      sub_18BBB7118(v92, v148, a7);
      if (v170)
        (*(void (**)(icu::UVector32 *))(*(_QWORD *)v170 + 8))(v170);
      v170 = v92;
      icu::UnicodeString::operator=((icu::UnicodeString *)&v180, (icu::UnicodeString *)&v171);
      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v172);
      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v175);
      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v171);
      goto LABEL_34;
    }
LABEL_352:
    v148 = 0;
    goto LABEL_353;
  }
  return v8;
}

uint64_t sub_18BBB709C(uint64_t result, uint64_t a2, int *a3)
{
  _QWORD *v5;

  if (*a3 <= 0)
  {
    v5 = (_QWORD *)result;
    result = *(_QWORD *)result;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *v5 = a2;
    if (!a2)
      *a3 = 7;
  }
  else if (a2)
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  }
  return result;
}

_DWORD *sub_18BBB7118(_DWORD *this, int a2, UErrorCode *a3)
{
  _DWORD *v4;
  int v5;

  v4 = this;
  v5 = this[2];
  if (v5 < -1 || this[3] <= v5)
  {
    this = (_DWORD *)icu::UVector32::expandCapacity((icu::UVector32 *)this, v5 + 1, a3);
    if (!(_DWORD)this)
      return this;
    v5 = v4[2];
  }
  *(_DWORD *)(*((_QWORD *)v4 + 3) + 4 * v5) = a2;
  ++v4[2];
  return this;
}

void sub_18BBB7178(uint64_t a1, UErrorCode *a2)
{
  uint64_t v4;
  unint64_t v5;
  icu::UnicodeString *v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD v9[3];
  char *v10[29];

  v10[28] = *(char **)MEMORY[0x1E0C80C00];
  memset(v9, 0, sizeof(v9));
  icu::Locale::Locale((icu::Locale *)v10, "ja", 0, 0, 0);
  icu::ResourceBundle::ResourceBundle((icu::ResourceBundle *)v9, "icudt74l-brkitr", v10, a2);
  icu::Locale::~Locale((icu::Locale *)v10);
  if (*(int *)a2 <= 0)
  {
    memset(v8, 0, sizeof(v8));
    icu::ResourceBundle::get((icu::ResourceBundle *)v9, "extensions", a2, v8);
    if (*(int *)a2 <= 0)
    {
      do
      {
        if (!icu::ResourceBundle::hasNext((icu::ResourceBundle *)v8))
          break;
        icu::ResourceBundle::getNextString((icu::ResourceBundle *)v8, a2, (uint64_t)v10);
        v4 = *(_QWORD *)(a1 + 840);
        v6 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v5);
        v7 = (uint64_t)v6;
        if (v6)
          icu::UnicodeString::UnicodeString(v6, (UChar **)v10);
        uhash_puti(v4, v7, 1u, (int *)a2);
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v10);
      }
      while (*(int *)a2 < 1);
    }
    icu::ResourceBundle::~ResourceBundle((icu::ResourceBundle *)v8);
  }
  icu::ResourceBundle::~ResourceBundle((icu::ResourceBundle *)v9);
}

void sub_18BBB72D0(uint64_t a1, UErrorCode *a2)
{
  icu::UnicodeSetIterator *i;
  uint64_t v5;
  unint64_t v6;
  icu::UnicodeString *v7;
  uint64_t v8;
  _OWORD v9[12];
  uint64_t v10;
  UChar *v11[8];
  _OWORD v12[4];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  icu::UnicodeString::UnicodeString((uint64_t)v12, (uint64_t)L"[:Hiragana:]");
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v9, (const icu::UnicodeString *)v12, a2);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v12);
  icu::UnicodeSet::compact((icu::UnicodeSet *)v9);
  memset(v12, 0, sizeof(v12));
  for (i = icu::UnicodeSetIterator::UnicodeSetIterator((icu::UnicodeSetIterator *)v12, (const icu::UnicodeSet *)v9);
        icu::UnicodeSetIterator::next(i);
        i = (icu::UnicodeSetIterator *)v12)
  {
    icu::UnicodeString::UnicodeString((uint64_t)v11, DWORD2(v12[0]));
    v5 = *(_QWORD *)(a1 + 840);
    v7 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v6);
    v8 = (uint64_t)v7;
    if (v7)
      icu::UnicodeString::UnicodeString(v7, v11);
    uhash_puti(v5, v8, 1u, (int *)a2);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v11);
  }
  icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v12);
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v9);
}

void icu::UCharsDictionaryMatcher::~UCharsDictionaryMatcher(icu::UCharsDictionaryMatcher *this)
{
  *(_QWORD *)this = off_1E2246B68;
  udata_close(*((_OWORD **)this + 2));
}

{
  *(_QWORD *)this = off_1E2246B68;
  udata_close(*((_OWORD **)this + 2));
}

{
  *(_QWORD *)this = off_1E2246B68;
  udata_close(*((_OWORD **)this + 2));
  icu::UMemory::operator delete(this);
}

uint64_t icu::UCharsDictionaryMatcher::getType(icu::UCharsDictionaryMatcher *this)
{
  return 1;
}

uint64_t icu::UCharsDictionaryMatcher::matches(icu::UCharsDictionaryMatcher *this, UText *ut, int a3, int a4, int *a5, int *a6, int *a7, int *a8)
{
  unsigned __int16 *v15;
  int NativeIndex;
  UChar32 v17;
  UChar32 v18;
  uint64_t v19;
  int v20;
  int v21;
  int Impl;
  int v23;
  int v24;
  unsigned __int16 *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int *v31;
  void *v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  uint64_t v35;

  v15 = (unsigned __int16 *)*((_QWORD *)this + 1);
  v32 = 0;
  v33 = v15;
  v34 = v15;
  v35 = 0xFFFFFFFFLL;
  NativeIndex = utext_getNativeIndex(ut);
  v17 = utext_next32(ut);
  v31 = a8;
  if ((v17 & 0x80000000) == 0)
  {
    v18 = v17;
    v19 = 0;
    v20 = 1;
    while (1)
    {
      v21 = v20;
      if (v20 == 1)
      {
        LODWORD(v35) = -1;
        Impl = icu::UCharsTrie::nextImpl((uint64_t)&v32, v33, v18);
      }
      else
      {
        Impl = icu::UCharsTrie::next((icu::UCharsTrie *)&v32, v18);
      }
      v23 = Impl;
      v24 = utext_getNativeIndex(ut) - NativeIndex;
      if (v23 < 2)
      {
        if (!v23)
          goto LABEL_33;
      }
      else
      {
        if ((int)v19 < a4)
        {
          if (a7)
          {
            v25 = v34 + 1;
            v26 = *v34;
            if ((__int16)*v34 < 0)
            {
              v28 = v26 & 0x7FFF;
              if (v28 >= 0x4000)
              {
                if (v28 == 0x7FFF)
                {
                  v29 = v34[1] << 16;
                  v25 = v34 + 2;
                }
                else
                {
                  v29 = (v28 << 16) - 0x40000000;
                }
                v28 = v29 | *v25;
              }
            }
            else
            {
              v27 = v26 >> 6;
              if (v27 > 0x100)
              {
                if (v27 > 0x1FE)
                  v28 = v34[2] | (v34[1] << 16);
                else
                  v28 = (*v25 | ((v27 & 0x1FF) << 16)) - 16842752;
              }
              else
              {
                v28 = v27 - 1;
              }
            }
            a7[(int)v19] = v28;
          }
          if (a5)
            a5[(int)v19] = v24;
          if (a6)
            a6[(int)v19] = v21;
          v19 = (v19 + 1);
        }
        if (v23 == 2)
          goto LABEL_33;
      }
      if (v24 < a3)
      {
        v18 = utext_next32(ut);
        v20 = v21 + 1;
        if ((v18 & 0x80000000) == 0)
          continue;
      }
      goto LABEL_33;
    }
  }
  v19 = 0;
  v21 = 0;
LABEL_33:
  if (v31)
    *v31 = v21;
  icu::UCharsTrie::~UCharsTrie(&v32);
  return v19;
}

void icu::BytesDictionaryMatcher::~BytesDictionaryMatcher(icu::BytesDictionaryMatcher *this)
{
  *(_QWORD *)this = off_1E2246B98;
  udata_close(*((_OWORD **)this + 3));
}

{
  *(_QWORD *)this = off_1E2246B98;
  udata_close(*((_OWORD **)this + 3));
}

{
  *(_QWORD *)this = off_1E2246B98;
  udata_close(*((_OWORD **)this + 3));
  icu::UMemory::operator delete(this);
}

uint64_t icu::BytesDictionaryMatcher::transform(icu::BytesDictionaryMatcher *this, uint64_t a2)
{
  int v2;
  unsigned int v3;

  v2 = *((_DWORD *)this + 4);
  if ((v2 & 0x7F000000) == 0x1000000)
  {
    if ((_DWORD)a2 == 8205)
    {
      return 255;
    }
    else if ((_DWORD)a2 == 8204)
    {
      return 254;
    }
    else
    {
      v3 = a2 - (v2 & 0x1FFFFF);
      if (v3 > 0xFD)
        return 0xFFFFFFFFLL;
      else
        return v3;
    }
  }
  return a2;
}

uint64_t icu::BytesDictionaryMatcher::getType(icu::BytesDictionaryMatcher *this)
{
  return 0;
}

uint64_t icu::BytesDictionaryMatcher::matches(icu::BytesDictionaryMatcher *this, UText *ut, int a3, int a4, int *a5, int *a6, int *a7, int *a8)
{
  unsigned __int8 *v15;
  UChar32 v16;
  UChar32 v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int Impl;
  unsigned int v26;
  int v27;
  int v28;
  int *v30;
  int *v31;
  int NativeIndex;
  void *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;

  v15 = (unsigned __int8 *)*((_QWORD *)this + 1);
  v34 = 0;
  v35 = v15;
  v36 = v15;
  v37 = 0xFFFFFFFFLL;
  NativeIndex = utext_getNativeIndex(ut);
  v16 = utext_next32(ut);
  v30 = a8;
  if ((v16 & 0x80000000) == 0)
  {
    v17 = v16;
    v31 = a7;
    v18 = 0;
    v19 = 1;
    while (1)
    {
      v20 = v19;
      v21 = *((_DWORD *)this + 4);
      v22 = v21 & 0x7F000000;
      if (v20 == 1)
      {
        v23 = v17 - (v21 & 0x1FFFFF);
        if (v23 > 0xFD)
          v23 = 255;
        if (v17 == 8204)
          v23 = 254;
        if (v17 == 8205)
          v23 = 255;
        if (v22 == 0x1000000)
          v24 = v23;
        else
          v24 = v17;
        LODWORD(v37) = -1;
        Impl = icu::BytesTrie::nextImpl((icu::BytesTrie *)&v34, v35, v24);
      }
      else
      {
        if (v22 == 0x1000000)
        {
          if (v17 == 8205)
          {
            v17 = 255;
          }
          else
          {
            v26 = v17 - (v21 & 0x1FFFFF);
            if (v26 > 0xFD)
              v26 = -1;
            if (v17 == 8204)
              v17 = 254;
            else
              v17 = v26;
          }
        }
        Impl = icu::BytesTrie::next((icu::BytesTrie *)&v34, v17);
      }
      v27 = Impl;
      v28 = utext_getNativeIndex(ut) - NativeIndex;
      if (v27 < 2)
      {
        if (!v27)
          goto LABEL_39;
      }
      else
      {
        if ((int)v18 < a4)
        {
          if (v31)
            v31[(int)v18] = icu::BytesTrie::readValue((icu::BytesTrie *)(v36 + 1), (const unsigned __int8 *)(*v36 >> 1));
          if (a5)
            a5[(int)v18] = v28;
          if (a6)
            a6[(int)v18] = v20;
          v18 = (v18 + 1);
        }
        if (v27 == 2)
          goto LABEL_39;
      }
      if (v28 < a3)
      {
        v17 = utext_next32(ut);
        v19 = v20 + 1;
        if ((v17 & 0x80000000) == 0)
          continue;
      }
      goto LABEL_39;
    }
  }
  v18 = 0;
  v20 = 0;
LABEL_39:
  if (v30)
    *v30 = v20;
  icu::BytesTrie::~BytesTrie(&v34);
  return v18;
}

uint64_t udict_swap(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  char *v22;
  const char *v23;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  size_t __n[2];
  __int128 v36;
  uint64_t v37;

  v10 = a3;
  v37 = *MEMORY[0x1E0C80C00];
  v13 = udata_swapDataHeader(a1, (unsigned __int16 *)a2, a3, a4, a5, a6, a7, a8);
  if (!a5 || *a5 > 0)
    return 0;
  if (__PAIR64__(*(unsigned __int8 *)(a2 + 13), *(unsigned __int8 *)(a2 + 12)) != 0x6900000044
    || *(_BYTE *)(a2 + 14) != 99
    || *(_BYTE *)(a2 + 15) != 116
    || *(_BYTE *)(a2 + 16) != 1)
  {
    v34 = *(unsigned __int8 *)(a2 + 12);
    v23 = "udict_swap(): data format %02x.%02x.%02x.%02x (format version %02x) is not recognized as dictionary data\n";
    goto LABEL_15;
  }
  v21 = v13;
  if (a4)
    v22 = (char *)a4 + v13;
  else
    v22 = 0;
  if ((v10 & 0x80000000) == 0)
  {
    v10 = (v10 - v13);
    if ((int)v10 <= 31)
    {
      udata_printError(a1, (uint64_t)"udict_swap(): too few bytes (%d after header) for dictionary data\n", v14, v15, v16, v17, v18, v19, v10);
LABEL_22:
      result = 0;
      v24 = 8;
      goto LABEL_16;
    }
  }
  v25 = 0;
  v26 = (char *)(a2 + v13);
  *(_OWORD *)__n = 0u;
  v36 = 0u;
  do
  {
    *(_DWORD *)((char *)__n + v25) = udata_readInt32(a1, *(unsigned int *)&v26[v25]);
    v25 += 4;
  }
  while (v25 != 32);
  v33 = HIDWORD(__n[1]);
  if ((v10 & 0x80000000) == 0)
  {
    if ((int)v10 < SHIDWORD(__n[1]))
    {
      udata_printError(a1, (uint64_t)"udict_swap(): too few bytes (%d after header) for all of dictionary data\n", v27, v28, v29, v30, v31, v32, v10);
      goto LABEL_22;
    }
    if (v26 != v22)
      memcpy(v22, v26, SHIDWORD(__n[1]));
    (*(void (**)(uint64_t, char *, uint64_t, char *, int *))(a1 + 56))(a1, v26, 32, v22, a5);
    if ((v36 & 7) != 0)
    {
      if ((v36 & 7) == 1)
      {
        (*(void (**)(uint64_t, char *, _QWORD, char *, int *))(a1 + 48))(a1, v26 + 32, (HIDWORD(__n[0]) - 32), v22 + 32, a5);
        return (v33 + v21);
      }
      v23 = "udict_swap(): unknown trie type!\n";
LABEL_15:
      udata_printError(a1, (uint64_t)v23, v14, v15, v16, v17, v18, v19, v34);
      result = 0;
      v24 = 16;
LABEL_16:
      *a5 = v24;
      return result;
    }
  }
  return (v33 + v21);
}

void *icu::DateInterval::getStaticClassID(icu::DateInterval *this)
{
  return &unk_1EE009228;
}

void *icu::DateInterval::getDynamicClassID(icu::DateInterval *this)
{
  return &unk_1EE009228;
}

uint64_t icu::DateInterval::DateInterval(uint64_t this, double a2, double a3)
{
  *(_QWORD *)this = off_1E2246C40;
  *(double *)(this + 8) = a2;
  *(double *)(this + 16) = a3;
  return this;
}

{
  *(_QWORD *)this = off_1E2246C40;
  *(double *)(this + 8) = a2;
  *(double *)(this + 16) = a3;
  return this;
}

void icu::DateInterval::~DateInterval(icu::DateInterval *this)
{
  void *v1;

  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v1);
}

__n128 icu::DateInterval::DateInterval(icu::DateInterval *this, const icu::DateInterval *a2)
{
  __n128 result;

  *(_QWORD *)this = off_1E2246C40;
  if (this != a2)
  {
    result = *(__n128 *)((char *)a2 + 8);
    *(__n128 *)((char *)this + 8) = result;
  }
  return result;
}

{
  __n128 result;

  *(_QWORD *)this = off_1E2246C40;
  if (this != a2)
  {
    result = *(__n128 *)((char *)a2 + 8);
    *(__n128 *)((char *)this + 8) = result;
  }
  return result;
}

__n128 icu::DateInterval::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result;

  if (a1 != a2)
  {
    result = *(__n128 *)(a2 + 8);
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

__n128 icu::DateInterval::clone(icu::DateInterval *this, unint64_t a2)
{
  uint64_t v3;
  __n128 result;

  v3 = icu::UMemory::operator new((icu::UMemory *)0x18, a2);
  if (v3)
  {
    *(_QWORD *)v3 = off_1E2246C40;
    if ((icu::DateInterval *)v3 != this)
    {
      result = *(__n128 *)((char *)this + 8);
      *(__n128 *)(v3 + 8) = result;
    }
  }
  return result;
}

BOOL icu::DateInterval::operator==(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) == *(double *)(a2 + 8) && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

void icu::Edits::releaseArray(void **this)
{
  char *v1;
  char *v2;

  v2 = (char *)this + 28;
  v1 = (char *)*this;
  if (v1 != v2)
    uprv_free(v1);
}

icu::Edits *icu::Edits::copyArray(icu::Edits *this, const void **a2)
{
  int v4;
  void *v5;
  void *v6;

  if (*((int *)this + 6) < 1)
  {
    v4 = *((_DWORD *)this + 3);
    if (v4 > *((_DWORD *)this + 2))
    {
      v5 = uprv_malloc(2 * v4);
      if (!v5)
      {
        *(_OWORD *)((char *)this + 12) = xmmword_18BDCC0B0;
        return this;
      }
      v6 = v5;
      if (*(icu::Edits **)this != (icu::Edits *)((char *)this + 28))
        uprv_free(*(void **)this);
      *(_QWORD *)this = v6;
      v4 = *((_DWORD *)this + 3);
      *((_DWORD *)this + 2) = v4;
    }
    if (v4 >= 1)
      memcpy(*(void **)this, *a2, 2 * v4);
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 3) = 0;
  }
  return this;
}

icu::Edits *icu::Edits::moveArray(icu::Edits *this, icu::Edits *a2)
{
  icu::Edits *v4;
  char *v5;
  uint64_t v6;

  if (*((int *)this + 6) < 1)
  {
    v5 = (char *)this + 28;
    v4 = *(icu::Edits **)this;
    if (*(icu::Edits **)this != (icu::Edits *)((char *)this + 28))
      uprv_free(v4);
    v6 = *((unsigned int *)this + 3);
    if ((int)v6 < 101)
    {
      *(_QWORD *)this = v5;
      *((_DWORD *)this + 2) = 100;
      if ((int)v6 >= 1)
        memcpy((char *)this + 28, *(const void **)a2, 2 * v6);
    }
    else
    {
      *(_QWORD *)this = *(_QWORD *)a2;
      *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
      *(_QWORD *)a2 = (char *)a2 + 28;
      *((_DWORD *)a2 + 2) = 100;
      *(_QWORD *)((char *)a2 + 20) = 0;
      *(_QWORD *)((char *)a2 + 12) = 0;
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 3) = 0;
  }
  return this;
}

uint64_t icu::Edits::reset(uint64_t this)
{
  *(_QWORD *)(this + 20) = 0;
  *(_QWORD *)(this + 12) = 0;
  return this;
}

icu::Edits *icu::Edits::operator=(icu::Edits *result, uint64_t a2)
{
  if (result != (icu::Edits *)a2)
  {
    *(_OWORD *)((char *)result + 12) = *(_OWORD *)(a2 + 12);
    return icu::Edits::copyArray(result, (const void **)a2);
  }
  return result;
}

icu::Edits *icu::Edits::operator=(icu::Edits *this, icu::Edits *a2)
{
  *(_OWORD *)((char *)this + 12) = *(_OWORD *)((char *)a2 + 12);
  return icu::Edits::moveArray(this, a2);
}

void icu::Edits::~Edits(void **this)
{
  char *v1;
  char *v2;

  v2 = (char *)this + 28;
  v1 = (char *)*this;
  if (v1 != v2)
    uprv_free(v1);
}

{
  char *v1;
  char *v2;

  v2 = (char *)this + 28;
  v1 = (char *)*this;
  if (v1 != v2)
    uprv_free(v1);
}

_DWORD *icu::Edits::addUnchanged(_DWORD *this, unsigned int a2)
{
  _DWORD *v2;
  int v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;

  if (a2)
  {
    v2 = this;
    if ((int)this[6] <= 0)
    {
      v3 = a2;
      if ((a2 & 0x80000000) != 0)
      {
        this[6] = 1;
        return this;
      }
      v4 = this[3];
      v5 = __OFSUB__(v4, 1);
      v6 = (v4 - 1);
      if ((int)v6 < 0 == v5)
      {
        v7 = *(_QWORD *)this;
        v8 = *(unsigned __int16 *)(*(_QWORD *)this + 2 * v6);
        if (v8 <= 0xFFE)
        {
          if (a2 <= 4095 - v8)
          {
            *(_WORD *)(v7 + 2 * v6) = v8 + a2;
            return this;
          }
          *(_WORD *)(v7 + 2 * v6) = 4095;
          v3 = a2 - (4095 - v8);
        }
      }
      if (v3 < 4096)
      {
        v9 = v3;
      }
      else
      {
        do
        {
          this = icu::Edits::append(v2, 4095);
          v9 = v3 - 4096;
          v10 = v3 >> 13;
          v3 -= 4096;
        }
        while (v10);
      }
      if (v9 >= 1)
        return icu::Edits::append(v2, (unsigned __int16)v9 - 1);
    }
  }
  return this;
}

_DWORD *icu::Edits::append(_DWORD *this, __int16 a2)
{
  _DWORD *v3;
  int v4;
  uint64_t v5;

  v3 = this;
  v4 = this[3];
  if (v4 >= this[2])
  {
    this = (_DWORD *)icu::Edits::growArray((icu::Edits *)this);
    if (!(_DWORD)this)
      return this;
    v4 = v3[3];
  }
  v5 = *(_QWORD *)v3;
  v3[3] = v4 + 1;
  *(_WORD *)(v5 + 2 * v4) = a2;
  return this;
}

_DWORD *icu::Edits::addReplace(_DWORD *this, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  _DWORD *v5;
  signed int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int16 v19;
  __int16 v20;
  _WORD *v21;

  if ((int)this[6] <= 0)
  {
    v3 = a3;
    v4 = a2;
    v5 = this;
    if ((a3 | a2) < 0)
    {
      v8 = 1;
      goto LABEL_10;
    }
    if (!(a3 | a2))
      return this;
    ++this[5];
    v6 = a3 - a2;
    if (a3 != a2)
    {
      if (v6 < 1)
      {
        v7 = this[4];
        if (v6 < 0 && v7 < 0 && v6 < (int)(0x80000000 - v7))
          goto LABEL_8;
      }
      else
      {
        v7 = this[4];
        if ((v7 & 0x80000000) == 0 && v6 > (v7 ^ 0x7FFFFFFFu))
        {
LABEL_8:
          v8 = 8;
LABEL_10:
          this[6] = v8;
          return this;
        }
      }
      this[4] = v7 + v6;
    }
    if ((a2 - 1) <= 5 && a3 <= 7)
    {
      v9 = this[3];
      v10 = __OFSUB__(v9, 1);
      v11 = v9 - 1;
      if (v11 < 0 != v10)
        v12 = 0xFFFF;
      else
        v12 = *(unsigned __int16 *)(*(_QWORD *)this + 2 * v11);
      a2 = (a3 << 9) | (a2 << 12);
      if ((~v12 & 0x1FF) != 0 && (v12 - 28671) >= 0xFFFFA001 && (v12 & 0xFE00) == a2)
      {
        *(_WORD *)(*(_QWORD *)this + 2 * v11) = v12 + 1;
        return this;
      }
      return icu::Edits::append(this, a2);
    }
    if (a2 <= 60 && a3 <= 60)
    {
      LOWORD(a2) = a3 | ((_WORD)a2 << 6) | 0x7000;
      return icu::Edits::append(this, a2);
    }
    v13 = this[3];
    if (this[2] - v13 <= 4)
    {
      this = (_DWORD *)icu::Edits::growArray((icu::Edits *)this);
      if (!(_DWORD)this)
        return this;
      v13 = v5[3];
    }
    v14 = v13 + 1;
    if ((int)v4 > 60)
    {
      if (v4 >> 15)
      {
        v15 = ((HIBYTE(v4) & 0xC0) + 3968) | 0x7000;
        v16 = *(_QWORD *)v5;
        *(_WORD *)(*(_QWORD *)v5 + 2 * v14) = (v4 >> 15) | 0x8000;
        LODWORD(v14) = v13 + 3;
        *(_WORD *)(v16 + 2 * v13 + 4) = v4 | 0x8000;
      }
      else
      {
        *(_WORD *)(*(_QWORD *)v5 + 2 * (int)v14) = v4 | 0x8000;
        LODWORD(v14) = v13 + 2;
        LOWORD(v15) = 32576;
      }
    }
    else
    {
      LOWORD(v15) = ((_WORD)v4 << 6) | 0x7000;
    }
    if ((int)v3 > 60)
    {
      v18 = v3 >> 15;
      if (v3 >> 15)
      {
        v19 = v3 | 0x8000;
        v3 = (v3 >> 30) + 62;
        v20 = v18 | 0x8000;
        v17 = *(_QWORD *)v5;
        v21 = (_WORD *)(*(_QWORD *)v5 + 2 * (int)v14);
        *v21 = v20;
        LODWORD(v14) = v14 + 2;
        v21[1] = v19;
      }
      else
      {
        v17 = *(_QWORD *)v5;
        *(_WORD *)(*(_QWORD *)v5 + 2 * (int)v14) = v3 | 0x8000;
        LODWORD(v14) = v14 + 1;
        LOWORD(v3) = 61;
      }
    }
    else
    {
      v17 = *(_QWORD *)v5;
    }
    *(_WORD *)(v17 + 2 * v13) = v3 | v15;
    v5[3] = v14;
  }
  return this;
}

uint64_t icu::Edits::growArray(icu::Edits *this)
{
  char *v2;
  int v3;
  int v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  char *v8;

  v2 = (char *)this + 28;
  v3 = *((_DWORD *)this + 2);
  if (*(icu::Edits **)this == (icu::Edits *)((char *)this + 28))
  {
    v4 = 2000;
  }
  else
  {
    if (v3 == 0x7FFFFFFF)
    {
LABEL_8:
      result = 0;
      v6 = 8;
LABEL_9:
      *((_DWORD *)this + 6) = v6;
      return result;
    }
    if (v3 <= 1073741822)
      v4 = 2 * v3;
    else
      v4 = 0x7FFFFFFF;
  }
  if (v4 - v3 <= 4)
    goto LABEL_8;
  result = (uint64_t)uprv_malloc(2 * v4);
  if (!result)
  {
    v6 = 7;
    goto LABEL_9;
  }
  v7 = result;
  v8 = *(char **)this;
  memcpy((void *)result, *(const void **)this, 2 * *((int *)this + 3));
  if (v8 != v2)
    uprv_free(v8);
  *(_QWORD *)this = v7;
  *((_DWORD *)this + 2) = v4;
  return 1;
}

uint64_t icu::Edits::copyErrorTo(icu::Edits *this, UErrorCode *a2)
{
  UErrorCode v2;

  if (*(int *)a2 > 0)
    return 1;
  v2 = *((_DWORD *)this + 6);
  if (v2 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    *a2 = v2;
    return 1;
  }
  return 0;
}

icu::Edits *icu::Edits::mergeAndAppend(icu::Edits *this, const icu::Edits *a2, const icu::Edits *a3, UErrorCode *a4)
{
  UErrorCode v6;
  signed int v7;
  signed int v8;
  signed int v9;
  signed int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  int v16;
  signed int v17;
  signed int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v22;
  int v23;
  int v24;
  signed __int8 v25[8];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  signed __int8 v32[8];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (*(int *)a4 > 0)
    return this;
  v6 = *((_DWORD *)this + 6);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_3:
    *a4 = v6;
    return this;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = *(_QWORD *)a2;
  v28 = 0;
  v29 = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 3);
  v30 = 0;
  v31 = v13;
  v22 = *(_QWORD *)a3;
  v34 = 0;
  v35 = 0;
  *(_QWORD *)v32 = 0;
  v33 = 0;
  LODWORD(v13) = *((_DWORD *)a3 + 3);
  v23 = 0;
  v24 = v13;
  v26 = 0;
  v27 = 0;
  *(_QWORD *)v25 = 0;
  v14 = 1;
  while (1)
  {
    while (v9 || !v14)
    {
LABEL_18:
      if (!v8)
        goto LABEL_19;
LABEL_25:
      if (!v9)
        goto LABEL_52;
      if (v32[7])
      {
        if (v25[7])
        {
          if (v8 == v9)
          {
            icu::Edits::addReplace(this, v7 + v11, v10 + v12);
            v8 = 0;
            v9 = 0;
LABEL_30:
            v11 = 0;
            v12 = 0;
          }
          else
          {
LABEL_35:
            v11 += v7;
            v12 += v10;
            v18 = v9 - v8;
            v19 = v8 < v9;
            if (v8 < v9)
            {
              v8 = 0;
            }
            else
            {
              v7 = 0;
              v8 -= v9;
            }
            if (v19)
              v9 = v18;
            else
              v9 = 0;
            if (v19)
              v10 = 0;
          }
        }
        else
        {
          if (v8 > v9)
            goto LABEL_35;
          icu::Edits::addReplace(this, v7 + v11, v8 + v12);
          v11 = 0;
          v12 = 0;
          v9 -= v8;
          v10 = v9;
          v8 = 0;
        }
      }
      else if (v25[7])
      {
        v17 = v8 - v9;
        if (v8 < v9)
          goto LABEL_35;
        icu::Edits::addReplace(this, v9 + v11, v10 + v12);
        v9 = 0;
        v11 = 0;
        v12 = 0;
        v7 = v17;
        v8 = v17;
      }
      else
      {
        if (v11 | v12)
          icu::Edits::addReplace(this, v11, v12);
        if (v7 >= v10)
          v20 = v10;
        else
          v20 = v7;
        icu::Edits::addUnchanged(this, v20);
        v11 = 0;
        v12 = 0;
        v7 -= v20;
        v9 = v10 - v20;
        v8 = v7;
        v10 = v9;
      }
    }
    if (v8)
      v15 = v32[7] == 0;
    else
      v15 = 1;
    v16 = v15;
    while (1)
    {
      if (!icu::Edits::Iterator::next((icu::Edits::Iterator *)&v22, v25[4], a4))
      {
        v14 = 0;
        v9 = 0;
        goto LABEL_18;
      }
      v9 = v26;
      v10 = HIDWORD(v26);
      if ((_DWORD)v26)
        break;
      v12 += HIDWORD(v26);
      if (v16)
      {
        icu::Edits::addReplace(this, v11, v12);
        v11 = 0;
        v12 = 0;
      }
    }
    v14 = 1;
    if (v8)
      goto LABEL_25;
LABEL_19:
    if (!icu::Edits::Iterator::next((icu::Edits::Iterator *)&v29, v32[4], a4))
      break;
    v7 = v33;
    v8 = HIDWORD(v33);
    if (HIDWORD(v33))
      goto LABEL_25;
    v11 += v33;
    if (v9 != (_DWORD)v26)
    {
      v8 = 0;
      if (v25[7])
        continue;
    }
    icu::Edits::addReplace(this, v11, v12);
    v8 = 0;
    goto LABEL_30;
  }
  if (v9)
  {
LABEL_52:
    if (*(int *)a4 >= 1)
      return this;
    v6 = *((_DWORD *)this + 6);
    if (v6 <= U_ILLEGAL_ARGUMENT_ERROR)
      v6 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_3;
  }
  if (v11 | v12)
    icu::Edits::addReplace(this, v11, v12);
  if (*(int *)a4 <= 0)
  {
    v6 = *((_DWORD *)this + 6);
    if (v6 > U_ZERO_ERROR)
      goto LABEL_3;
  }
  return this;
}

uint64_t icu::Edits::Iterator::Iterator(uint64_t this, const unsigned __int16 *a2, int a3, char a4, char a5)
{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = a3;
  *(_DWORD *)(this + 16) = 0;
  *(_BYTE *)(this + 20) = a4;
  *(_BYTE *)(this + 21) = a5;
  *(_QWORD *)(this + 30) = 0;
  *(_QWORD *)(this + 22) = 0;
  *(_QWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = a3;
  *(_DWORD *)(this + 16) = 0;
  *(_BYTE *)(this + 20) = a4;
  *(_BYTE *)(this + 21) = a5;
  *(_QWORD *)(this + 30) = 0;
  *(_QWORD *)(this + 22) = 0;
  *(_QWORD *)(this + 36) = 0;
  return this;
}

uint64_t icu::Edits::Iterator::readLength(icu::Edits::Iterator *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((int)a2 >= 61)
  {
    if ((_DWORD)a2 == 61)
    {
      v2 = *(_QWORD *)this;
      v3 = *((int *)this + 2);
      *((_DWORD *)this + 2) = v3 + 1;
      return *(_WORD *)(v2 + 2 * v3) & 0x7FFF;
    }
    else
    {
      v4 = *((int *)this + 2);
      a2 = ((a2 & 1) << 30) | ((unsigned __int16)(*(_WORD *)(*(_QWORD *)this + 2 * v4) & 0x7FFF) << 15) | *(_WORD *)(*(_QWORD *)this + 2 * ((int)v4 + 1)) & 0x7FFF;
      *((_DWORD *)this + 2) = v4 + 2;
    }
  }
  return a2;
}

uint64_t icu::Edits::Iterator::updateNextIndexes(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 32) += *(_DWORD *)(this + 24);
  if (*(_BYTE *)(this + 23))
    *(_DWORD *)(this + 36) += v1;
  *(_DWORD *)(this + 40) += v1;
  return this;
}

uint64_t icu::Edits::Iterator::updatePreviousIndexes(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 32) -= *(_DWORD *)(this + 24);
  if (*(_BYTE *)(this + 23))
    *(_DWORD *)(this + 36) -= v1;
  *(_DWORD *)(this + 40) -= v1;
  return this;
}

uint64_t icu::Edits::Iterator::noNext(icu::Edits::Iterator *this)
{
  *((_WORD *)this + 15) = 0;
  *(_QWORD *)((char *)this + 22) = 0;
  return 0;
}

uint64_t icu::Edits::Iterator::next(icu::Edits::Iterator *this, int a2, UErrorCode *a3)
{
  uint64_t v3;
  int v5;
  _BYTE *v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  int v23;
  int Length;
  unsigned int v26;
  int v27;

  if (*(int *)a3 <= 0)
  {
    v6 = (char *)this + 22;
    v5 = *((char *)this + 22);
    if (v5 < 1)
    {
      if (v5 < 0 && *((int *)this + 4) >= 1)
      {
        ++*((_DWORD *)this + 2);
        v3 = 1;
        *((_BYTE *)this + 22) = 1;
        return v3;
      }
      *v6 = 1;
    }
    else
    {
      v7 = *((_DWORD *)this + 7);
      *((_DWORD *)this + 8) += *((_DWORD *)this + 6);
      if (*((_BYTE *)this + 23))
        *((_DWORD *)this + 9) += v7;
      *((_DWORD *)this + 10) += v7;
    }
    v8 = *((_DWORD *)this + 4);
    v9 = __OFSUB__(v8, 1);
    v10 = v8 - 1;
    if (v10 < 0 == v9)
    {
      if (v10)
      {
        *((_DWORD *)this + 4) = v10;
        return 1;
      }
      *((_DWORD *)this + 4) = 0;
    }
    v11 = *((_DWORD *)this + 3);
    v12 = *((int *)this + 2);
    if ((int)v12 < v11)
    {
      v13 = *(_QWORD *)this;
      v14 = v12 + 1;
      *((_DWORD *)this + 2) = v12 + 1;
      v15 = *(unsigned __int16 *)(v13 + 2 * v12);
      if (v15 > 0xFFF)
        goto LABEL_30;
      *((_BYTE *)this + 23) = 0;
      v16 = v15 + 1;
      if ((int)v14 >= v11)
      {
        v20 = 0;
      }
      else
      {
        v15 = *(unsigned __int16 *)(v13 + 2 * v14);
        if (v15 > 0xFFF)
        {
          v20 = 1;
        }
        else
        {
          v17 = 0;
          v18 = v13 + 2 * v14 + 2;
          while (1)
          {
            v16 += v15 + 1;
            if (!(2 - v11 + (_DWORD)v12 + (_DWORD)v17))
              break;
            v15 = *(unsigned __int16 *)(v18 + 2 * v17++);
            if (v15 > 0xFFF)
            {
              v19 = v12 + v17 + 1;
              *((_DWORD *)this + 2) = v19;
              v20 = v14 + v17 < v11;
              LODWORD(v14) = v19;
              goto LABEL_27;
            }
          }
          *((_DWORD *)this + 2) = v12 + v17 + 2;
          v20 = v14 + v17 + 1 < v11;
          LODWORD(v14) = v11;
        }
      }
LABEL_27:
      *((_DWORD *)this + 6) = v16;
      *((_DWORD *)this + 7) = v16;
      if (!a2)
        return 1;
      *((_DWORD *)this + 8) += v16;
      *((_DWORD *)this + 10) += v16;
      if (v20)
      {
        LODWORD(v14) = v14 + 1;
        *((_DWORD *)this + 2) = v14;
LABEL_30:
        *((_BYTE *)this + 23) = 1;
        v21 = v15 >> 12;
        if (v15 >> 12 > 6)
        {
          *((_DWORD *)this + 6) = icu::Edits::Iterator::readLength(this, (v15 >> 6) & 0x3F);
          Length = icu::Edits::Iterator::readLength(this, v15 & 0x3F);
          *((_DWORD *)this + 7) = Length;
          if (!*((_BYTE *)this + 21))
            return 1;
          LODWORD(v14) = *((_DWORD *)this + 2);
          v11 = *((_DWORD *)this + 3);
        }
        else
        {
          v22 = (v15 >> 9) & 7;
          v23 = (v15 & 0x1FF) + 1;
          if (!*((_BYTE *)this + 21))
          {
            *((_DWORD *)this + 6) = v21;
            *((_DWORD *)this + 7) = v22;
            if ((v15 & 0x1FF) != 0)
              *((_DWORD *)this + 4) = v23;
            return 1;
          }
          Length = v23 * v22;
          *((_DWORD *)this + 6) = v23 * v21;
          *((_DWORD *)this + 7) = v23 * v22;
        }
        if ((int)v14 < v11)
        {
          while (1)
          {
            v26 = *(unsigned __int16 *)(*(_QWORD *)this + 2 * (int)v14);
            if (v26 < 0x1000)
              break;
            LODWORD(v14) = v14 + 1;
            *((_DWORD *)this + 2) = v14;
            if (v26 >> 12 > 6)
            {
              *((_DWORD *)this + 6) += icu::Edits::Iterator::readLength(this, (v26 >> 6) & 0x3F);
              Length = *((_DWORD *)this + 7) + icu::Edits::Iterator::readLength(this, v26 & 0x3F);
              *((_DWORD *)this + 7) = Length;
              LODWORD(v14) = *((_DWORD *)this + 2);
              v11 = *((_DWORD *)this + 3);
            }
            else
            {
              v27 = (v26 & 0x1FF) + 1;
              Length += ((v26 >> 9) & 7) * v27;
              *((_DWORD *)this + 6) += v27 * (v26 >> 12);
              *((_DWORD *)this + 7) = Length;
            }
            v3 = 1;
            if ((int)v14 >= v11)
              return v3;
          }
        }
        return 1;
      }
    }
    v3 = 0;
    *((_WORD *)this + 15) = 0;
    *(_QWORD *)v6 = 0;
    return v3;
  }
  return 0;
}

uint64_t icu::Edits::Iterator::previous(icu::Edits::Iterator *this, UErrorCode *a2)
{
  uint64_t result;
  char *v4;
  int v5;
  signed int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int Length;
  __int16 *v22;
  unsigned __int16 v23;
  int v24;
  char v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;

  if (*(int *)a2 > 0)
    return 0;
  v4 = (char *)this + 22;
  if (*((char *)this + 22) < 0)
  {
LABEL_11:
    v6 = *((_DWORD *)this + 4);
    if (v6 <= 0)
    {
      LODWORD(v7) = *((_DWORD *)this + 2);
    }
    else
    {
      v7 = *((int *)this + 2);
      if (v6 <= (*(_WORD *)(*(_QWORD *)this + 2 * v7) & 0x1FFu))
      {
        *((_DWORD *)this + 4) = v6 + 1;
        v17 = *((_DWORD *)this + 7);
        *((_DWORD *)this + 8) -= *((_DWORD *)this + 6);
        if (*((_BYTE *)this + 23))
          *((_DWORD *)this + 9) -= v17;
        v16 = *((_DWORD *)this + 10) - v17;
        goto LABEL_50;
      }
      *((_DWORD *)this + 4) = 0;
    }
    if ((int)v7 <= 0)
    {
      result = 0;
      *((_WORD *)v4 + 4) = 0;
      *(_QWORD *)v4 = 0;
      return result;
    }
    v8 = *(_QWORD *)this;
    v9 = (v7 - 1);
    *((_DWORD *)this + 2) = v9;
    v10 = *(unsigned __int16 *)(v8 + 2 * v9);
    if (v10 <= 0xFFF)
    {
      *((_BYTE *)this + 23) = 0;
      v11 = v10 + 1;
      v12 = v7 >= 2;
      v13 = v7 - 2;
      if (v12)
      {
        v14 = v9 + 1;
        do
        {
          v15 = *(unsigned __int16 *)(v8 + 2 * (v14 - 2));
          if (v15 > 0xFFF)
            break;
          *((_DWORD *)this + 2) = v13;
          v11 += v15 + 1;
          --v14;
          --v13;
        }
        while (v14 > 1);
      }
      *((_DWORD *)this + 6) = v11;
      *((_DWORD *)this + 7) = v11;
      *((_DWORD *)this + 8) -= v11;
      v16 = *((_DWORD *)this + 10) - v11;
LABEL_50:
      *((_DWORD *)this + 10) = v16;
      return 1;
    }
    *((_BYTE *)this + 23) = 1;
    v18 = v10 >> 12;
    if (v10 >> 12 > 6)
    {
      if ((v10 & 0x8000) != 0)
      {
        v22 = (__int16 *)(v8 + 2 * v9 - 2);
        do
        {
          v24 = *v22--;
          v23 = v24;
          LODWORD(v7) = v7 - 1;
        }
        while (v24 < 0);
        v25 = v23;
        v26 = v7 - 1;
        *((_DWORD *)this + 2) = v7;
        *((_DWORD *)this + 6) = icu::Edits::Iterator::readLength(this, (v23 >> 6) & 0x3F);
        Length = icu::Edits::Iterator::readLength(this, v25 & 0x3F);
        *((_DWORD *)this + 7) = Length;
        *((_DWORD *)this + 2) = v26;
      }
      else
      {
        *((_DWORD *)this + 6) = icu::Edits::Iterator::readLength(this, (v10 >> 6) & 0x3F);
        Length = icu::Edits::Iterator::readLength(this, v10 & 0x3F);
        *((_DWORD *)this + 7) = Length;
      }
      if (!*((_BYTE *)this + 21))
      {
LABEL_47:
        *((_DWORD *)this + 8) -= *((_DWORD *)this + 6);
        if (*((_BYTE *)this + 23))
          *((_DWORD *)this + 9) -= Length;
        v16 = *((_DWORD *)this + 10) - Length;
        goto LABEL_50;
      }
      LODWORD(v9) = *((_DWORD *)this + 2);
    }
    else
    {
      v19 = (v10 >> 9) & 7;
      if (!*((_BYTE *)this + 21))
      {
        *((_DWORD *)this + 6) = v18;
        *((_DWORD *)this + 7) = v19;
        if ((v10 & 0x1FF) != 0)
          *((_DWORD *)this + 4) = 1;
        *((_DWORD *)this + 8) -= v18;
        *(int32x2_t *)((char *)this + 36) = vsub_s32(*(int32x2_t *)((char *)this + 36), vdup_n_s32(v19));
        return 1;
      }
      v20 = (v10 & 0x1FF) + 1;
      Length = v20 * v19;
      *((_DWORD *)this + 6) = v20 * v18;
      *((_DWORD *)this + 7) = v20 * v19;
    }
    if ((int)v9 >= 1)
    {
      do
      {
        v27 = v9 - 1;
        v28 = *(unsigned __int16 *)(*(_QWORD *)this + 2 * (v9 - 1));
        if (v28 < 0x1000)
          break;
        *((_DWORD *)this + 2) = v27;
        if (v28 >> 12 > 6)
        {
          if ((v28 & 0x8000) == 0)
          {
            *((_DWORD *)this + 2) = v9;
            *((_DWORD *)this + 6) += icu::Edits::Iterator::readLength(this, (v28 >> 6) & 0x3F);
            Length = *((_DWORD *)this + 7) + icu::Edits::Iterator::readLength(this, v28 & 0x3F);
            *((_DWORD *)this + 7) = Length;
            *((_DWORD *)this + 2) = v27;
          }
        }
        else
        {
          v29 = (v28 & 0x1FF) + 1;
          Length += ((v28 >> 9) & 7) * v29;
          *((_DWORD *)this + 6) += v29 * (v28 >> 12);
          *((_DWORD *)this + 7) = Length;
        }
        LODWORD(v9) = v27;
      }
      while ((v27 + 1) > 1);
    }
    goto LABEL_47;
  }
  if (!*((_BYTE *)this + 22))
  {
LABEL_10:
    *v4 = -1;
    goto LABEL_11;
  }
  if (*((int *)this + 4) < 1)
  {
    v5 = *((_DWORD *)this + 7);
    *((_DWORD *)this + 8) += *((_DWORD *)this + 6);
    if (*((_BYTE *)this + 23))
      *((_DWORD *)this + 9) += v5;
    *((_DWORD *)this + 10) += v5;
    goto LABEL_10;
  }
  --*((_DWORD *)this + 2);
  *((_BYTE *)this + 22) = -1;
  return 1;
}

uint64_t icu::Edits::Iterator::findIndex(int32x2_t *this, signed int a2, int a3, UErrorCode *a4)
{
  uint64_t result;
  int32x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int32 v11;
  __int32 v12;
  int v13;
  __int32 v14;
  unsigned int v15;
  int32x2_t v16;
  __int32 v17;
  __int32 v18;
  signed int v19;
  unsigned int v20;
  int32x2_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int32x2_t v25;
  int v26;

  result = 0xFFFFFFFFLL;
  if ((a2 & 0x80000000) == 0 && *(int *)a4 <= 0)
  {
    v8 = (int32x2_t *)((char *)this + 28);
    if (a3)
      v9 = 6;
    else
      v9 = 7;
    if (a3)
    {
      v8 = this + 3;
      v10 = 4;
    }
    else
    {
      v10 = 5;
    }
    v11 = this[v10].i32[0];
    if (v11 > a2)
    {
      if (a2 < v11 >> 1)
      {
        this[2].i8[6] = 0;
        this[2].i32[0] = 0;
        this[1].i32[0] = 0;
        this[3] = 0;
        this[4] = 0;
        this[5].i32[0] = 0;
        goto LABEL_22;
      }
      while (1)
      {
        icu::Edits::Iterator::previous((icu::Edits::Iterator *)this, a4);
        v12 = this[v10].i32[0];
        if (v12 <= a2)
          return 0;
        v13 = this[2].i32[0];
        if (v13 >= 1)
        {
          v14 = this->i32[v9];
          v15 = (*(_WORD *)(*(_QWORD *)this + 2 * this[1].i32[0]) & 0x1FF) - v13 + 1;
          if ((int)(v12 - v15 * v14) <= a2)
          {
            result = 0;
            v24 = (v12 + ~a2) / v14 + 1;
            v25 = vmul_s32(vdup_n_s32(v24), this[3]);
            v26 = this[5].i32[0] - v25.i32[1];
            this[4] = vsub_s32(this[4], v25);
            this[5].i32[0] = v26;
            v23 = v24 + v13;
            goto LABEL_26;
          }
          v16 = vmul_s32(this[3], vdup_n_s32(v15));
          this[4] = vsub_s32(this[4], v16);
          this[5].i32[0] -= v16.i32[1];
          this[2].i32[0] = 0;
        }
      }
    }
    if (v8->i32[0] + v11 > a2)
      return 0;
    while (1)
    {
      do
      {
LABEL_22:
        if (!icu::Edits::Iterator::next((icu::Edits::Iterator *)this, 0, a4))
          return 1;
        v17 = this[v10].i32[0];
        v18 = this->i32[v9];
        if (v18 + v17 > a2)
          return 0;
        v19 = this[2].i32[0];
      }
      while (v19 < 2);
      if (v17 + v19 * v18 > a2)
        break;
      this[3] = vmul_s32(this[3], vdup_n_s32(v19));
      this[2].i32[0] = 0;
    }
    result = 0;
    v20 = (a2 - v17) / v18;
    v21 = vmul_s32(this[3], vdup_n_s32(v20));
    v22 = this[5].i32[0] + v21.i32[1];
    this[4] = vadd_s32(this[4], v21);
    this[5].i32[0] = v22;
    v23 = v19 - v20;
LABEL_26:
    this[2].i32[0] = v23;
  }
  return result;
}

uint64_t icu::Edits::Iterator::destinationIndexFromSourceIndex(int32x2_t *this, signed int a2, UErrorCode *a3)
{
  int Index;
  __int32 v6;

  Index = icu::Edits::Iterator::findIndex(this, a2, 1, a3);
  if (Index < 0)
    return 0;
  if (Index)
    return this[5].u32[0];
  v6 = a2 - this[4].i32[0];
  if (!v6)
    return this[5].u32[0];
  if (this[2].i8[7])
    v6 = this[3].i32[1];
  return (v6 + this[5].i32[0]);
}

uint64_t icu::Edits::Iterator::sourceIndexFromDestinationIndex(int32x2_t *this, signed int a2, UErrorCode *a3)
{
  int Index;
  __int32 v6;

  Index = icu::Edits::Iterator::findIndex(this, a2, 0, a3);
  if (Index < 0)
    return 0;
  if (Index)
    return this[4].u32[0];
  v6 = a2 - this[5].i32[0];
  if (!v6)
    return this[4].u32[0];
  if (this[2].i8[7])
    v6 = this[3].i32[0];
  return (v6 + this[4].i32[0]);
}

icu::UnicodeString *icu::Edits::Iterator::toString(icu::Edits::Iterator *this, icu::UnicodeString *a2)
{
  icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)"{", 0, 0xFFFFFFFFLL);
  icu::ICU_Utility::appendNumber(a2, (icu::UnicodeString *)*((unsigned int *)this + 8), 0xAu, 1);
  icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)L"..", 0, 0xFFFFFFFFLL);
  icu::ICU_Utility::appendNumber(a2, (icu::UnicodeString *)(*((_DWORD *)this + 6) + *((_DWORD *)this + 8)), 0xAu, 1);
  if (*((_BYTE *)this + 23))
    icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)"]", 0, 0xFFFFFFFFLL);
  else
    icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&unk_18BE358EA, 0, 0xFFFFFFFFLL);
  icu::ICU_Utility::appendNumber(a2, (icu::UnicodeString *)*((unsigned int *)this + 10), 0xAu, 1);
  icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)L"..", 0, 0xFFFFFFFFLL);
  icu::ICU_Utility::appendNumber(a2, (icu::UnicodeString *)(*((_DWORD *)this + 7) + *((_DWORD *)this + 10)), 0xAu, 1);
  if (*((_BYTE *)this + 23))
  {
    icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&unk_18BE358FE, 0, 0xFFFFFFFFLL);
    icu::ICU_Utility::appendNumber(a2, (icu::UnicodeString *)*((unsigned int *)this + 9), 0xAu, 1);
    icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)L"..", 0, 0xFFFFFFFFLL);
    icu::ICU_Utility::appendNumber(a2, (icu::UnicodeString *)(*((_DWORD *)this + 7) + *((_DWORD *)this + 9)), 0xAu, 1);
    icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)L"] }", 0, 0xFFFFFFFFLL);
  }
  else
  {
    icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)L"] (no-change) }", 0, 0xFFFFFFFFLL);
  }
  return a2;
}

uint64_t sub_18BBB9220(UErrorCode *a1)
{
  unsigned int v3;
  unint64_t v4;
  UErrorCode v5;
  uint64_t v6;
  _QWORD *v7;

  if (*(int *)a1 > 0)
    return 0;
  v3 = atomic_load(&dword_1ECD272D8);
  if (v3 == 2 || !icu::umtx_initImplPreInit(&dword_1ECD272D8))
  {
    if (dword_1ECD272DC >= 1)
      *a1 = dword_1ECD272DC;
  }
  else
  {
    v5 = *a1;
    if (*(int *)a1 <= 0)
    {
      v6 = icu::UMemory::operator new((icu::UMemory *)0x40, v4);
      if (v6)
      {
        v7 = (_QWORD *)v6;
        *(_OWORD *)(v6 + 32) = 0u;
        *(_OWORD *)(v6 + 48) = 0u;
        *(_OWORD *)v6 = 0u;
        *(_OWORD *)(v6 + 16) = 0u;
        sub_18BBB9378((_QWORD *)v6, a1);
        qword_1ECD272D0 = (uint64_t)v7;
        if (*(int *)a1 >= 1)
        {
          udata_close((_OWORD *)*v7);
          ucptrie_close(v7[1]);
          icu::UMemory::operator delete(v7);
          qword_1ECD272D0 = 0;
        }
      }
      else
      {
        qword_1ECD272D0 = 0;
        *a1 = U_MEMORY_ALLOCATION_ERROR;
      }
      sub_18BC0ECC4(0x15u, (uint64_t)sub_18BBB98F4);
      v5 = *a1;
    }
    dword_1ECD272DC = v5;
    icu::umtx_initImplPostInit(&dword_1ECD272D8);
  }
  return qword_1ECD272D0;
}

BOOL sub_18BBB932C(uint8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  unsigned __int32 v5;
  BOOL v6;

  a1.i32[0] = *((_DWORD *)a5 + 2);
  v5 = vmovn_s16((int16x8_t)vmovl_u8(a1)).u32[0];
  if (a5[2])
    v6 = 0;
  else
    v6 = v5 == 1785687365;
  return v6 && *a5 > 0x13u && *((_BYTE *)a5 + 12) == 1;
}

unsigned int *sub_18BBB9378(_QWORD *a1, UErrorCode *a2)
{
  unsigned int *result;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  signed int v8;
  signed int v9;
  char *v10;

  result = (unsigned int *)udata_openChoice(0, "icu", "uemoji", (unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_18BBB932C, (uint64_t)a1, a2);
  *a1 = result;
  if (*(int *)a2 <= 0)
  {
    result = (unsigned int *)udata_getMemory((uint64_t)result);
    v5 = *result;
    if ((int)v5 > 39)
    {
      v6 = result;
      result = ucptrie_openFromBinary(0, 2, (uint64_t)result + v5, result[1] - v5, 0, (int *)a2);
      a1[1] = result;
      if (*(int *)a2 <= 0)
      {
        v7 = 0;
        v8 = v6[4];
        do
        {
          v9 = v6[v7 + 5];
          if (v9 <= v8)
            v10 = 0;
          else
            v10 = (char *)v6 + v8;
          a1[v7++ + 2] = v10;
          v8 = v9;
        }
        while (v7 != 6);
      }
    }
    else
    {
      *a2 = U_INVALID_FORMAT_ERROR;
    }
  }
  return result;
}

uint64_t sub_18BBB945C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;

  v7 = 0;
  result = ucptrie_getRange(*(_QWORD *)(a1 + 8), 0, 0, 0, 0, 0, &v7);
  if ((result & 0x80000000) == 0)
  {
    v5 = result;
    v6 = 0;
    do
    {
      (*(void (**)(_QWORD, uint64_t))(a2 + 8))(*(_QWORD *)a2, v6);
      v6 = (v5 + 1);
      result = ucptrie_getRange(*(_QWORD *)(a1 + 8), v6, 0, 0, 0, 0, &v7);
      v5 = result;
    }
    while ((result & 0x80000000) == 0);
  }
  return result;
}

BOOL sub_18BBB94F4(unsigned int a1, int a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;

  v6 = 0;
  v4 = sub_18BBB9220((UErrorCode *)&v6);
  result = 0;
  if (v6 <= 0)
    return sub_18BBB9554(v4, a1, a2) != 0;
  return result;
}

uint64_t sub_18BBB9554(uint64_t a1, unsigned int a2, int a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if ((a3 - 72) < 0xFFFFFFF1 || ((0x3E60uLL >> (a3 - 57)) & 1) != 0)
    return 0;
  v3 = byte_18BDCC0C0[a3 - 57];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 8);
  if (HIWORD(a2))
  {
    if (HIWORD(a2) > 0x10u)
    {
      v6 = *(_DWORD *)(v4 + 20) - 1;
    }
    else if (*(_DWORD *)(v4 + 24) <= (signed int)a2)
    {
      v6 = *(_DWORD *)(v4 + 20) - 2;
    }
    else
    {
      v6 = ucptrie_internalSmallIndex((uint64_t *)v4, a2);
    }
  }
  else
  {
    v6 = (a2 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v4 + 2 * (a2 >> 6));
  }
  return (*(unsigned __int8 *)(v5 + v6) >> v3) & 1;
}

BOOL sub_18BBB9600(_WORD *a1, int a2, unsigned int a3)
{
  uint64_t v6;
  _BOOL8 result;
  int v8;

  v8 = 0;
  v6 = sub_18BBB9220((UErrorCode *)&v8);
  result = 0;
  if (v8 <= 0)
    return sub_18BBB9670(v6, a1, a2, a3) != 0;
  return result;
}

uint64_t sub_18BBB9670(uint64_t a1, _WORD *a2, int a3, unsigned int a4)
{
  uint64_t result;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  int v13;
  _WORD *v14;
  void *v15[4];

  if (!a2 && a3)
    return 0;
  if (a3 > 0)
  {
    if (a4 - 72 < 0xFFFFFFF9)
      return 0;
LABEL_9:
    if (a4 == 71)
      v8 = 65;
    else
      v8 = a4;
    if (a4 == 71)
      v9 = 70;
    else
      v9 = a4;
    if (v8 > v9)
      return 0;
    v10 = v8 - 65;
    v11 = v8 - 1;
    while (1)
    {
      v12 = *(void **)(a1 + 8 * v10 + 16);
      if (v12)
      {
        v15[0] = 0;
        v15[1] = v12;
        v15[2] = v12;
        v15[3] = (void *)0xFFFFFFFFLL;
        v14 = a2;
        v13 = icu::UCharsTrie::next((uint64_t)v15, &v14, a3);
        icu::UCharsTrie::~UCharsTrie(v15);
        if (v13 > 1)
          break;
      }
      ++v10;
      if (v9 <= (int)++v11)
        return 0;
    }
    return 1;
  }
  if (!a3)
    return 0;
  result = 0;
  if (a4 - 72 >= 0xFFFFFFF9 && *a2)
    goto LABEL_9;
  return result;
}

void sub_18BBB9798(uint64_t a1, uint64_t a2, int a3, UErrorCode *a4)
{
  BOOL v4;
  int v5;
  int v6;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[3];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = (a3 - 72) >= 0xFFFFFFF9 && *a4 <= U_ZERO_ERROR;
  if (v4)
  {
    v5 = a3 == 71 ? 70 : a3;
    v6 = a3 == 71 ? 65 : a3;
    if (v6 <= v5)
    {
      do
      {
        v10 = *(_QWORD *)(a1 + 8 * (v6 - 65) + 16);
        if (v10)
        {
          v20 = 0;
          v18 = 0u;
          v19 = 0u;
          v16 = 0u;
          v17 = 0u;
          memset(v15, 0, sizeof(v15));
          v14 = v10;
          icu::UCharsTrie::Iterator::Iterator(v15, &v14, 0, a4);
          while (icu::UCharsTrie::Iterator::next((icu::UCharsTrie::Iterator *)v15, a4))
          {
            v11 = (char *)v17;
            if ((v16 & 2) != 0)
              v11 = (char *)&v16 + 2;
            if ((v16 & 0x11) != 0)
              v12 = 0;
            else
              v12 = v11;
            if ((v16 & 0x8000u) == 0)
              v13 = (unsigned __int16)v16 >> 5;
            else
              v13 = DWORD1(v16);
            (*(void (**)(_QWORD, char *, uint64_t))(a2 + 24))(*(_QWORD *)a2, v12, v13);
          }
          icu::UCharsTrie::Iterator::~Iterator((icu::UCharsTrie::Iterator *)v15);
        }
        v4 = v5 <= v6++;
      }
      while (!v4);
    }
  }
}

uint64_t sub_18BBB98F4()
{
  _QWORD *v0;

  v0 = (_QWORD *)qword_1ECD272D0;
  if (qword_1ECD272D0)
  {
    udata_close(*(_OWORD **)qword_1ECD272D0);
    ucptrie_close(v0[1]);
    icu::UMemory::operator delete(v0);
  }
  qword_1ECD272D0 = 0;
  atomic_store(0, &dword_1ECD272D8);
  return 1;
}

uint64_t icu::ErrorCode::reset(icu::ErrorCode *this)
{
  uint64_t v1;

  v1 = *((unsigned int *)this + 2);
  *((_DWORD *)this + 2) = 0;
  return v1;
}

int *icu::ErrorCode::assertSuccess(int *this)
{
  if (this[2] >= 1)
    return (int *)(*(uint64_t (**)(int *))(*(_QWORD *)this + 16))(this);
  return this;
}

const char *icu::ErrorCode::errorName(icu::ErrorCode *this)
{
  return u_errorName((UErrorCode)*((_DWORD *)this + 2));
}

void sub_18BBB998C(void **a1)
{
  void *v1;

  icu::UVector::~UVector(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BBB99A0(uint64_t a1)
{
  void ***v2;

  *(_QWORD *)a1 = off_1E2246CD0;
  v2 = (void ***)(a1 + 8);
  sub_18BBBADC4((void ***)(a1 + 16));
  sub_18BBBADC4(v2);
  return a1;
}

void sub_18BBB99E0(void ***a1)
{
  void ***v2;

  *a1 = (void **)off_1E2246CD0;
  v2 = a1 + 1;
  sub_18BBBADC4(a1 + 2);
  sub_18BBBADC4(v2);
  icu::UMemory::operator delete(a1);
}

icu::BreakIterator *sub_18BBB9A20(icu::BreakIterator *a1, const char *a2, void **a3, void **a4, int *a5)
{
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _BYTE v15[224];
  _BYTE v16[224];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  icu::BreakIterator::getLocale(a2, 1, a5, (icu::Locale *)v16);
  icu::BreakIterator::getLocale(a2, 0, a5, (icu::Locale *)v15);
  icu::BreakIterator::BreakIterator(a1, (const icu::Locale *)v16, (const icu::Locale *)v15);
  icu::Locale::~Locale((icu::Locale *)v15);
  icu::Locale::~Locale((icu::Locale *)v16);
  *(_QWORD *)a1 = &off_1E2246CF0;
  v11 = icu::UMemory::operator new((icu::UMemory *)0x20, v10);
  if (v11)
  {
    *(_QWORD *)v11 = off_1E2246CD0;
    *(_QWORD *)(v11 + 8) = a3;
    *(_QWORD *)(v11 + 16) = a4;
    *(_DWORD *)(v11 + 24) = 1;
    *((_QWORD *)a1 + 61) = v11;
    *((_QWORD *)a1 + 62) = a2;
    *((_QWORD *)a1 + 63) = 0;
  }
  else
  {
    *((_QWORD *)a1 + 61) = 0;
    *((_QWORD *)a1 + 62) = a2;
    *((_QWORD *)a1 + 63) = 0;
    if (a3)
    {
      icu::UCharsTrie::~UCharsTrie(a3);
      icu::UMemory::operator delete(v12);
    }
    if (a4)
    {
      icu::UCharsTrie::~UCharsTrie(a4);
      icu::UMemory::operator delete(v13);
    }
    if (*a5 <= 0)
      *a5 = 7;
  }
  return a1;
}

void sub_18BBB9B5C(icu::BreakIterator *this)
{
  unsigned int *v2;
  unsigned int *v3;
  int v4;
  UText *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E2246CF0;
  v2 = (unsigned int *)*((_QWORD *)this + 61);
  v3 = v2 + 6;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (v2 && v4 <= 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 61) = 0;
  v5 = (UText *)*((_QWORD *)this + 63);
  if (v5)
    utext_close(v5);
  v6 = *((_QWORD *)this + 62);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  icu::BreakIterator::~BreakIterator(this);
}

void sub_18BBB9BE0(icu::BreakIterator *a1)
{
  void *v1;

  sub_18BBB9B5C(a1);
  icu::UMemory::operator delete(v1);
}

UText *sub_18BBB9BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  UText *result;

  v4 = *(_QWORD *)(a1 + 496);
  v5 = *(_QWORD *)(a1 + 504);
  *(_QWORD *)(a1 + 504) = 0;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v5, a2);
  result = *(UText **)(a1 + 504);
  if (result)
    result = utext_close(result);
  *(_QWORD *)(a1 + 504) = v6;
  return result;
}

uint64_t sub_18BBB9C40(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned int v4;
  int64_t NativeIndex;
  UChar32 v6;
  int v7;
  char v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  UChar32 v13;
  uint64_t v14;
  UChar32 v15;
  UChar32 i;
  int v17;
  _BOOL8 v18;
  void *v20;
  __int128 v21;
  uint64_t v22;

  utext_setNativeIndex(*(UText **)(a1 + 504), a2);
  if (utext_previous32(*(UText **)(a1 + 504)) != 32)
    utext_next32(*(UText **)(a1 + 504));
  v22 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 488) + 16);
  v20 = 0;
  v21 = *(_OWORD *)(v3 + 8);
  v4 = -1;
  LODWORD(v22) = *(_DWORD *)(v3 + 24);
  NativeIndex = -1;
  while (1)
  {
    v6 = utext_previous32(*(UText **)(a1 + 504));
    if (v6 == -1)
      break;
    v7 = icu::UCharsTrie::nextForCodePoint((icu::UCharsTrie *)&v20, v6);
    v8 = v7;
    if (v7 < 2)
    {
LABEL_17:
      if ((v8 & 1) == 0)
        break;
    }
    else
    {
      NativeIndex = utext_getNativeIndex(*(const UText **)(a1 + 504));
      v9 = (unsigned __int16 *)(*((_QWORD *)&v21 + 1) + 2);
      v10 = (unsigned __int16)**((_WORD **)&v21 + 1);
      if ((v10 & 0x8000) != 0)
      {
        v4 = v10 & 0x7FFF;
        if (v4 < 0x4000)
          goto LABEL_17;
        if (v4 == 0x7FFF)
        {
          v12 = *(unsigned __int16 *)(*((_QWORD *)&v21 + 1) + 2) << 16;
          v9 = (unsigned __int16 *)(*((_QWORD *)&v21 + 1) + 4);
        }
        else
        {
          v12 = (v4 << 16) - 0x40000000;
        }
        v4 = v12 | *v9;
        if ((v8 & 1) == 0)
          break;
      }
      else
      {
        v11 = v10 >> 6;
        if (v11 > 0x100)
        {
          if (v11 > 0x1FE)
          {
            v4 = *(unsigned __int16 *)(*((_QWORD *)&v21 + 1) + 4) | (*(unsigned __int16 *)(*((_QWORD *)&v21 + 1) + 2) << 16);
            goto LABEL_17;
          }
          v4 = (*v9 | ((v11 & 0x1FF) << 16)) - 16842752;
          if ((v8 & 1) == 0)
            break;
        }
        else
        {
          v4 = v11 - 1;
          if ((v8 & 1) == 0)
            break;
        }
      }
    }
  }
  icu::UCharsTrie::~UCharsTrie(&v20);
  if (NativeIndex < 0)
    return 0;
  if (NativeIndex)
  {
    v13 = utext_char32At(*(UText **)(a1 + 504), NativeIndex - 1);
    if (v13 != -1)
    {
      if (u_isUAlphabetic(v13))
        return 0;
    }
  }
  if (v4 == 2)
    return 1;
  if (v4 != 1 || !*(_QWORD *)(*(_QWORD *)(a1 + 488) + 8))
    return 0;
  utext_setNativeIndex(*(UText **)(a1 + 504), NativeIndex);
  v22 = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 488) + 8);
  v20 = 0;
  v21 = *(_OWORD *)(v14 + 8);
  LODWORD(v22) = *(_DWORD *)(v14 + 24);
  v15 = utext_next32(*(UText **)(a1 + 504));
  if (v15 == -1)
  {
    v18 = 1;
  }
  else
  {
    for (i = v15; i != -1; i = utext_next32(*(UText **)(a1 + 504)))
    {
      v17 = icu::UCharsTrie::nextForCodePoint((icu::UCharsTrie *)&v20, i);
      if ((v17 & 1) == 0)
        break;
    }
    v18 = v17 != 0;
  }
  icu::UCharsTrie::~UCharsTrie(&v20);
  return v18;
}

uint64_t sub_18BBB9E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  int v9;

  if ((_DWORD)a2 == -1)
    return 0xFFFFFFFFLL;
  v2 = a2;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 488) + 16))
  {
    v9 = 0;
    sub_18BBB9BF4(a1, (uint64_t)&v9);
    if (v9 > 0)
      return 0xFFFFFFFFLL;
    v5 = utext_nativeLength(*(UText **)(a1 + 504));
    if (v5 != (int)v2)
    {
      v6 = v5;
      do
      {
        if (!sub_18BBB9C40(a1, v2))
          break;
        v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 104))(*(_QWORD *)(a1 + 496));
        v2 = v7;
      }
      while ((_DWORD)v7 != -1 && v6 != (int)v7);
    }
  }
  return v2;
}

uint64_t sub_18BBB9F20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v5;

  v2 = a2;
  if ((a2 + 1) >= 2 && *(_QWORD *)(*(_QWORD *)(a1 + 488) + 16))
  {
    v5 = 0;
    sub_18BBB9BF4(a1, (uint64_t)&v5);
    if (v5 <= 0)
    {
      do
      {
        if (!sub_18BBB9C40(a1, v2))
          break;
        v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 96))(*(_QWORD *)(a1 + 496));
      }
      while ((v2 - 1) < 0xFFFFFFFE);
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v2;
}

uint64_t sub_18BBB9FB8(uint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 104))(*(_QWORD *)(a1 + 496));
  return sub_18BBB9E6C(a1, v2);
}

uint64_t sub_18BBB9FEC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 80))(*(_QWORD *)(a1 + 496));
}

uint64_t sub_18BBB9FFC(uint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 128))(*(_QWORD *)(a1 + 496));
  return sub_18BBB9F20(a1, v2);
}

uint64_t sub_18BBBA030(uint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 96))(*(_QWORD *)(a1 + 496));
  return sub_18BBB9F20(a1, v2);
}

uint64_t sub_18BBBA064(uint64_t a1, int a2)
{
  uint64_t result;
  int v5;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 136))(*(_QWORD *)(a1 + 496));
  if ((_DWORD)result)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 488) + 16))
    {
      v5 = 0;
      sub_18BBB9BF4(a1, (uint64_t)&v5);
      return sub_18BBB9C40(a1, a2) == 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_18BBBA0D8(uint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 144))(*(_QWORD *)(a1 + 496));
  return sub_18BBB9E6C(a1, v2);
}

uint64_t sub_18BBBA10C(uint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 120))(*(_QWORD *)(a1 + 496));
  return sub_18BBB9E6C(a1, v2);
}

uint64_t sub_18BBBA140(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 88))(*(_QWORD *)(a1 + 496));
}

void sub_18BBBA154(void **a1)
{
  *a1 = off_1E2246DB8;
  icu::UVector::~UVector(a1 + 1);
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18BBBA184(void **a1)
{
  void *v2;

  *a1 = off_1E2246DB8;
  icu::UVector::~UVector(a1 + 1);
  icu::UObject::~UObject((icu::UObject *)a1);
  icu::UMemory::operator delete(v2);
}

_QWORD *icu::FilteredBreakIteratorBuilder::FilteredBreakIteratorBuilder(_QWORD *this)
{
  *this = off_1E2246DF8;
  return this;
}

_QWORD *sub_18BBBA1C8(_QWORD *a1, icu::Locale *a2, int *a3)
{
  char *BaseName;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  char *NextResource;
  int v14;
  const UChar *String;
  int v19;
  const UChar *v20;
  int v21;
  void (**v22)(icu::UnicodeString *__hidden);
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *a1 = off_1E2246DB8;
  icu::UVector::UVector((uint64_t)(a1 + 1), (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, 1u, a3);
  a1[1] = &off_1E2246E38;
  if (*a3 <= 0)
  {
    v19 = 0;
    BaseName = (char *)icu::Locale::getBaseName(a2);
    v7 = ures_open("icudt74l-brkitr", BaseName, &v19);
    v8 = v7;
    if (v19 > 0 || v19 == -127)
    {
      *a3 = v19;
    }
    else
    {
      v9 = ures_getByKeyWithFallback((uint64_t)v7, "exceptions", 0, (UErrorCode *)&v19);
      v10 = (_QWORD *)v9;
      if (v19 > 0 || v19 == -127)
      {
        *a3 = v19;
      }
      else
      {
        v11 = (_QWORD *)ures_getByKeyWithFallback(v9, "SentenceBreak", 0, (UErrorCode *)&v19);
        if (v19 > 0 || v19 == -127)
        {
          *a3 = v19;
        }
        else
        {
          v12 = 0;
          v19 = *a3;
          do
          {
            NextResource = ures_getNextResource((uint64_t)v11, v12, &v19);
            v12 = NextResource;
            v14 = v19;
            if (!NextResource || v19 > 0)
              break;
            v26 = 0;
            v24 = 0u;
            v25 = 0u;
            v23 = 0u;
            v22 = off_1E2256B38;
            LOWORD(v23) = 2;
            v21 = 0;
            String = ures_getString((uint64_t)NextResource, &v21, a3);
            if (*a3 <= 0)
            {
              v20 = String;
              icu::UnicodeString::setTo((icu::UnicodeString *)&v22, 1, &v20, v21);
            }
            else
            {
              icu::UnicodeString::setToBogus((icu::UnicodeString *)&v22);
            }
            (*(void (**)(_QWORD *, void (***)(icu::UnicodeString *__hidden), int *))(*a1 + 24))(a1, &v22, a3);
            icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v22);
            v14 = v19;
          }
          while (v19 < 1);
          if (v14 >= 1 && v14 != 8 && *a3 <= 0)
            *a3 = v14;
          if (v12)
            ures_close(v12);
        }
        if (v11)
          ures_close(v11);
      }
      if (v10)
        ures_close(v10);
    }
    if (v8)
      ures_close(v8);
  }
  return a1;
}

icu::UnicodeString *sub_18BBBA460(uint64_t a1, UChar **a2, int *a3)
{
  icu::UnicodeString *result;
  uint64_t v7;
  icu::UVector *v8;

  if (*a3 > 0)
    return 0;
  result = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, (unint64_t)a2);
  if (result)
  {
    v7 = (uint64_t)result;
    icu::UnicodeString::UnicodeString(result, a2);
    if (*a3 > 0 || (v8 = (icu::UVector *)(a1 + 8), (icu::UVector::indexOf(v8, v7, 0) & 0x80000000) == 0))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      return 0;
    }
    icu::UVector::sortedInsert(v8, v7, sub_18BBBAD54, a3);
    return (icu::UnicodeString *)(*a3 < 1);
  }
  else
  {
    *a3 = 7;
  }
  return result;
}

uint64_t sub_18BBBA51C(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
    return icu::UVector::removeElement((icu::UVector *)(a1 + 8), a2);
  else
    return 0;
}

icu::BreakIterator *sub_18BBBA538(uint64_t a1, unint64_t a2, UErrorCode *a3)
{
  const char *v4;
  icu::UCharsTrieBuilder *v6;
  unint64_t v7;
  icu::UCharsTrieBuilder *v8;
  icu::UCharsTrieBuilder *v9;
  icu::UCharsTrieBuilder *v10;
  unint64_t v11;
  __n128 v12;
  icu::BreakIterator *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int *v22;
  int *v23;
  uint64_t v24;
  UChar **v25;
  UChar **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  UErrorCode *v30;
  uint64_t v31;
  int32_t v32;
  int32_t v33;
  int32_t v34;
  uint64_t v35;
  int v36;
  int32_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  int v44;
  int32_t v45;
  int32_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  int *v56;
  int v57;
  icu::UnicodeString *v58;
  int v59;
  uint64_t v60;
  int *v61;
  void **v62;
  void **v63;
  icu::BreakIterator *v64;
  void *v65;
  void *v66;
  const char *v68;
  icu::UCharsTrieBuilder *v69;
  uint64_t v70;
  icu::UCharsTrieBuilder *v71;
  UErrorCode *v72;
  int v73;
  uint64_t v74;
  _OWORD v75[4];
  uint64_t v76;

  v4 = (const char *)a2;
  v76 = *MEMORY[0x1E0C80C00];
  v6 = (icu::UCharsTrieBuilder *)icu::UMemory::operator new((icu::UMemory *)0x70, a2);
  v8 = v6;
  if (v6)
  {
    icu::UCharsTrieBuilder::UCharsTrieBuilder(v6, a3);
  }
  else if (*(int *)a3 <= 0)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  v9 = (icu::UCharsTrieBuilder *)icu::UMemory::operator new((icu::UMemory *)0x70, v7);
  if (!v9)
  {
    v13 = 0;
    if (*(int *)a3 <= 0)
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_104;
  }
  v10 = v9;
  v12.n128_f64[0] = icu::UCharsTrieBuilder::UCharsTrieBuilder(v9, a3);
  if (*(int *)a3 > 0)
  {
    v13 = 0;
    goto LABEL_103;
  }
  v14 = *(_DWORD *)(a1 + 16);
  v70 = v14;
  if (v14 <= 1)
    v14 = 1;
  v15 = v14;
  if (v14 < 0)
    v16 = -1;
  else
    v16 = ((uint64_t)v14 << 6) | 0x10;
  v17 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v16, v11);
  if (v17)
  {
    *v17 = 64;
    v17[1] = v15;
    v19 = (uint64_t)(v17 + 2);
    v20 = v17 + 2;
    do
    {
      *v20 = off_1E2256B38;
      *((_WORD *)v20 + 4) = 2;
      v20 += 8;
    }
    while (v20 != &v17[8 * v15 + 2]);
  }
  else
  {
    v19 = 0;
  }
  v21 = v70;
  v71 = v10;
  v72 = a3;
  v74 = v19;
  if ((int)v70 < 1)
  {
    v23 = 0;
  }
  else
  {
    v22 = (int *)uprv_malloc(4 * v70);
    v23 = v22;
    if (v22)
    {
      bzero(v22, 4 * v70);
      uprv_free(0);
    }
  }
  if (*(int *)(a1 + 16) >= 1)
  {
    v24 = 0;
    v25 = (UChar **)v19;
    do
    {
      v26 = (UChar **)icu::UVector::elementAt((icu::UVector *)(a1 + 8), v24);
      if (!v26)
      {
        v13 = 0;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_102;
      }
      icu::UnicodeString::operator=(v25, v26);
      v23[v24++] = 0;
      v25 += 8;
    }
    while (*(_DWORD *)(a1 + 16) > (int)v24);
  }
  if ((int)v70 < 1)
  {
    v62 = 0;
    goto LABEL_93;
  }
  v68 = v4;
  v69 = v8;
  v27 = 0;
  v28 = 0;
  v73 = 0;
  v29 = v70 << 6;
  v30 = v72;
  do
  {
    v31 = v19 + (v28 << 6);
    if (*(__int16 *)(v31 + 8) < 0)
      v32 = *(_DWORD *)(v31 + 12);
    else
      v32 = *(unsigned __int16 *)(v31 + 8) >> 5;
    v33 = icu::UnicodeString::doIndexOf(v31, 0x2Eu, 0, v32);
    if (v33 < 0)
      goto LABEL_74;
    v34 = v33;
    v35 = v19 + (v28 << 6);
    if (*(__int16 *)(v35 + 8) < 0)
      v36 = *(_DWORD *)(v35 + 12);
    else
      v36 = *(unsigned __int16 *)(v35 + 8) >> 5;
    v37 = v33 + 1;
    if (v33 + 1 == v36)
    {
      v30 = v72;
      goto LABEL_74;
    }
    v38 = 0;
    v39 = 0;
    v40 = -1;
    do
    {
      if (v27 == v38)
        goto LABEL_65;
      v41 = v19 + v38;
      v42 = *(unsigned __int16 *)(v19 + v38 + 8);
      if ((v42 & 1) != 0)
      {
        if ((*(_WORD *)(v19 + (v28 << 6) + 8) & 1) == 0)
          goto LABEL_65;
      }
      else
      {
        if ((v42 & 0x8000u) == 0)
          v43 = v42 >> 5;
        else
          v43 = *(_DWORD *)(v41 + 12);
        v44 = v43 & (v43 >> 31);
        v45 = v43 - v44;
        if (v45 <= v34)
          v46 = v45;
        else
          v46 = v37;
        v47 = v41 + 10;
        v48 = *(_QWORD *)(v41 + 24);
        if ((v42 & 2) != 0)
          v49 = v47;
        else
          v49 = v48;
        if (icu::UnicodeString::doCompare(v19 + (v28 << 6), 0, v34 + 1, v49, v44, v46))
          goto LABEL_65;
      }
      v50 = v23[v39];
      if (v50)
      {
        if ((v50 & 1) != 0)
          v40 = v39;
      }
      else
      {
        if (*(__int16 *)(v19 + v38 + 8) < 0)
          v51 = *(_DWORD *)(v19 + v38 + 12);
        else
          v51 = *(unsigned __int16 *)(v19 + v38 + 8) >> 5;
        if (v51 == v37)
          v52 = 3;
        else
          v52 = 2;
        v23[v39] = v52;
      }
LABEL_65:
      ++v39;
      v38 += 64;
    }
    while (v29 != v38);
    memset(v75, 0, sizeof(v75));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v75, (const icu::UnicodeString *)(v19 + (v28 << 6)), 0, (v34 + 1));
    if (v40 == -1)
    {
      v8 = v69;
      v21 = v70;
      v10 = v71;
      v30 = v72;
      if (!v23[v28])
      {
        if ((SWORD4(v75[0]) & 0x8000u) == 0)
          v53 = WORD4(v75[0]) >> 5;
        else
          v53 = HIDWORD(v75[0]);
        icu::UnicodeString::doReverse((icu::UnicodeString *)v75, 0, v53);
        icu::UCharsTrieBuilder::add(v69, (const icu::UnicodeString *)v75, 1u, v72);
        ++v73;
        v23[v28] = 2;
      }
    }
    else
    {
      v8 = v69;
      v21 = v70;
      v10 = v71;
      v30 = v72;
    }
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v75);
LABEL_74:
    ++v28;
    v27 += 64;
  }
  while (v28 != v21);
  v54 = 0;
  v55 = 0;
  v56 = v23;
  do
  {
    v57 = *v56;
    if ((*v56 & 1) == 0)
    {
      v58 = (icu::UnicodeString *)(v19 + v54);
      if (*(__int16 *)(v19 + v54 + 8) < 0)
        v59 = *((_DWORD *)v58 + 3);
      else
        v59 = *(unsigned __int16 *)(v19 + v54 + 8) >> 5;
      icu::UnicodeString::doReverse(v58, 0, v59);
      v19 = v74;
      icu::UCharsTrieBuilder::add(v8, (const icu::UnicodeString *)(v74 + v54), 2u, v30);
      ++v73;
      v57 = *v56;
    }
    if ((v57 & 2) != 0)
    {
      icu::UCharsTrieBuilder::add(v10, (const icu::UnicodeString *)(v19 + v54), 2u, v30);
      ++v55;
    }
    ++v56;
    v54 += 64;
  }
  while (v29 != v54);
  if (v73 <= 0)
  {
    v62 = 0;
    v4 = v68;
    goto LABEL_90;
  }
  v60 = icu::UCharsTrieBuilder::build((uint64_t)v8, 0, v30);
  v61 = (int *)v30;
  v62 = (void **)v60;
  v4 = v68;
  if (*v61 > 0)
    goto LABEL_99;
LABEL_90:
  if (v55 < 1)
  {
LABEL_93:
    v63 = 0;
    goto LABEL_94;
  }
  v63 = (void **)icu::UCharsTrieBuilder::build((uint64_t)v10, 0, v72);
  if (*(int *)v72 <= 0)
  {
LABEL_94:
    v64 = (icu::BreakIterator *)icu::UMemory::operator new((icu::UMemory *)0x200, v18);
    if (v64)
    {
      v13 = v64;
      sub_18BBB9A20(v64, v4, v63, v62, (int *)v72);
      v4 = 0;
      v10 = v71;
      goto LABEL_102;
    }
  }
  if (v63)
  {
    icu::UCharsTrie::~UCharsTrie(v63);
    icu::UMemory::operator delete(v65);
  }
  v10 = v71;
LABEL_99:
  if (v62)
  {
    icu::UCharsTrie::~UCharsTrie(v62);
    icu::UMemory::operator delete(v66);
  }
  v13 = 0;
LABEL_102:
  uprv_free(v23);
  sub_18BBBADF4(&v74);
LABEL_103:
  (*(void (**)(icu::UCharsTrieBuilder *, __n128))(*(_QWORD *)v10 + 8))(v10, v12);
LABEL_104:
  if (v8)
    (*(void (**)(icu::UCharsTrieBuilder *))(*(_QWORD *)v8 + 8))(v8);
  if (v4)
    (*(void (**)(const char *))(*(_QWORD *)v4 + 8))(v4);
  return v13;
}

_QWORD *icu::FilteredBreakIteratorBuilder::createInstance(icu::FilteredBreakIteratorBuilder *this, const icu::Locale *a2, UErrorCode *a3)
{
  _QWORD *result;
  _QWORD *v6;

  if (*(int *)a2 > 0)
    return 0;
  v6 = (_QWORD *)icu::UMemory::operator new((icu::UMemory *)0x30, (unint64_t)a2);
  if (!v6)
  {
    if (*(int *)a2 <= 0)
    {
      result = 0;
      *(_DWORD *)a2 = 7;
      return result;
    }
    return 0;
  }
  result = sub_18BBBA1C8(v6, this, (int *)a2);
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(_QWORD *))(*result + 8))(result);
    return 0;
  }
  return result;
}

_QWORD *icu::FilteredBreakIteratorBuilder::createEmptyInstance(icu::FilteredBreakIteratorBuilder *this, UErrorCode *a2)
{
  _QWORD *v2;
  _QWORD *v5;

  if (*(int *)this <= 0)
  {
    v5 = (_QWORD *)icu::UMemory::operator new((icu::UMemory *)0x30, (unint64_t)a2);
    if (v5)
    {
      v2 = v5;
      *v5 = off_1E2246DB8;
      icu::UVector::UVector((uint64_t)(v5 + 1), (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, 1u, (int *)this);
      v2[1] = &off_1E2246E38;
      if (*(int *)this < 1)
        return v2;
      (*(void (**)(_QWORD *))(*v2 + 8))(v2);
    }
    else if (*(int *)this <= 0)
    {
      v2 = 0;
      *(_DWORD *)this = 7;
      return v2;
    }
  }
  return 0;
}

uint64_t sub_18BBBAC24()
{
  return 0;
}

BOOL sub_18BBBAC2C(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

icu::BreakIterator *sub_18BBBAC38(uint64_t a1, unint64_t a2)
{
  icu::BreakIterator *v3;
  icu::BreakIterator *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = (icu::BreakIterator *)icu::UMemory::operator new((icu::UMemory *)0x200, a2);
  v4 = v3;
  if (v3)
  {
    icu::BreakIterator::BreakIterator(v3, (const icu::BreakIterator *)a1);
    *(_QWORD *)v4 = &off_1E2246CF0;
    v5 = *(_QWORD *)(a1 + 488);
    v6 = (unsigned int *)(v5 + 24);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    *((_QWORD *)v4 + 61) = v5;
    *((_QWORD *)v4 + 62) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 32))(*(_QWORD *)(a1 + 496));
    *((_QWORD *)v4 + 63) = 0;
  }
  return v4;
}

uint64_t sub_18BBBACB0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 40))(*(_QWORD *)(a1 + 496));
}

uint64_t sub_18BBBACC0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 48))(*(_QWORD *)(a1 + 496));
}

uint64_t sub_18BBBACD0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 56))(*(_QWORD *)(a1 + 496));
}

uint64_t sub_18BBBACE0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 64))(*(_QWORD *)(a1 + 496));
}

uint64_t sub_18BBBACF0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 72))(*(_QWORD *)(a1 + 496));
}

uint64_t sub_18BBBAD00(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 112))(*(_QWORD *)(a1 + 496));
}

uint64_t sub_18BBBAD10(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = -126;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t sub_18BBBAD24(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 176))(*(_QWORD *)(a1 + 496));
  return a1;
}

uint64_t sub_18BBBAD54(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int32_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;

  v2 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0)
    v3 = *(_DWORD *)(a1 + 12);
  else
    v3 = v2 >> 5;
  v4 = *(unsigned __int16 *)(a2 + 8);
  if ((v4 & 1) != 0)
    return (v2 & 1) == 0;
  if ((v4 & 0x8000u) == 0)
    v5 = v4 >> 5;
  else
    v5 = *(_DWORD *)(a2 + 12);
  if ((v4 & 2) != 0)
    v6 = a2 + 10;
  else
    v6 = *(_QWORD *)(a2 + 24);
  return icu::UnicodeString::doCompare(a1, 0, v3, v6, v5 & (v5 >> 31), v5 & ~(v5 >> 31));
}

void ***sub_18BBBADC4(void ***a1)
{
  void **v2;
  void *v3;

  v2 = *a1;
  if (v2)
  {
    icu::UCharsTrie::~UCharsTrie(v2);
    icu::UMemory::operator delete(v3);
  }
  return a1;
}

uint64_t *sub_18BBBADF4(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = (void *)(v2 - 16);
    v4 = *(_QWORD *)(v2 - 8);
    if (v4)
    {
      v5 = v4 << 6;
      v6 = v2 - 64;
      do
      {
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(v6 + v5));
        v5 -= 64;
      }
      while (v5);
    }
    icu::UMemory::operator delete[](v3);
  }
  return a1;
}

void icu::FilteredNormalizer2::~FilteredNormalizer2(icu::FilteredNormalizer2 *this)
{
  void *v1;

  icu::Normalizer2::~Normalizer2(this);
  icu::UMemory::operator delete(v1);
}

icu::UnicodeString *icu::FilteredNormalizer2::normalize(icu::FilteredNormalizer2 *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  __int16 v5;

  if (*(int *)a4 > 0)
    goto LABEL_9;
  if ((*((_WORD *)a2 + 4) & 1) != 0)
  {
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
    icu::UnicodeString::setToBogus(a3);
    return a3;
  }
  if (a3 == a2)
  {
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  else
  {
    if ((*((_WORD *)a3 + 4) & 1) != 0)
      v5 = 2;
    else
      v5 = *((_WORD *)a3 + 4) & 0x1F;
    *((_WORD *)a3 + 4) = v5;
    icu::FilteredNormalizer2::normalize((uint64_t)this, (uint64_t)a2, (uint64_t)a3, 2, (int *)a4);
  }
  return a3;
}

uint64_t icu::FilteredNormalizer2::normalize(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int *a5)
{
  unsigned int v6;
  BOOL v7;
  int v8;
  int v9;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  int v29;
  _BYTE v31[64];
  void (**v32)(icu::UnicodeString *__hidden);
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v33 = 0u;
  v34 = 0u;
  v36 = 0;
  v35 = 0u;
  v32 = off_1E2256B38;
  LOWORD(v33) = 2;
  v6 = *(unsigned __int16 *)(a2 + 8);
  v7 = (v6 & 0x8000u) != 0;
  v8 = v6 >> 5;
  v9 = *(_DWORD *)(a2 + 12);
  if ((v6 & 0x8000u) != 0)
    v8 = *(_DWORD *)(a2 + 12);
  if (v8 >= 1)
  {
    v14 = 0;
    v15 = a2 + 10;
    do
    {
      v16 = *(_QWORD *)(a2 + 24);
      if ((v6 & 2) != 0)
        v16 = v15;
      if ((v6 & 0x11) != 0)
        v16 = 0;
      v17 = v6 >> 5;
      if (v7)
        v17 = v9;
      if (v17 >= v14)
        v18 = v14;
      else
        v18 = v17;
      if (v14 >= 0)
        v19 = v18;
      else
        v19 = 0;
      v20 = icu::UnicodeSet::span(*(icu::UnicodeSet **)(a1 + 16), (UChar *)(v16 + 2 * v19), (v17 - v19), a4)+ v19;
      if (a4)
      {
        if (v20 == v14)
        {
          a4 = 0;
        }
        else
        {
          v21 = *(_QWORD *)(a1 + 8);
          icu::UnicodeString::tempSubString((icu::UnicodeString *)a2, v14, v20 - v14, (icu::UnicodeString *)v31);
          v22 = (*(uint64_t (**)(uint64_t, _BYTE *, void (***)(icu::UnicodeString *__hidden), int *))(*(_QWORD *)v21 + 24))(v21, v31, &v32, a5);
          v23 = *(unsigned __int16 *)(v22 + 8);
          v24 = (__int16)v23;
          v25 = v23 >> 5;
          if (v24 >= 0)
            v26 = v25;
          else
            v26 = *(unsigned int *)(v22 + 12);
          icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)v22, 0, v26);
          icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v31);
          a4 = 0;
          if (*a5 > 0)
            break;
        }
      }
      else
      {
        if (v20 != v14)
          icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)a2, v14, (v20 - v14));
        a4 = 2;
      }
      v27 = *(__int16 *)(a2 + 8);
      v6 = *(unsigned __int16 *)(a2 + 8);
      v28 = v27 < 0;
      v7 = v27 < 0;
      v29 = (unsigned __int16)v27 >> 5;
      v9 = *(_DWORD *)(a2 + 12);
      if (v28)
        v29 = *(_DWORD *)(a2 + 12);
      v14 = v20;
    }
    while (v20 < v29);
  }
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v32);
  return a3;
}

uint64_t icu::FilteredNormalizer2::normalizeUTF8(uint64_t result, int a2, char *a3, size_t a4, uint64_t a5, _DWORD *a6, int *a7)
{
  uint64_t v13;

  if (*a7 <= 0)
  {
    v13 = result;
    if ((a2 & 0x2000) == 0)
    {
      if (a6)
        icu::Edits::reset((uint64_t)a6);
    }
    return icu::FilteredNormalizer2::normalizeUTF8(v13, a2 | 0x2000u, a3, a4, a5, a6, 2, a7);
  }
  return result;
}

uint64_t icu::FilteredNormalizer2::normalizeUTF8(uint64_t result, uint64_t a2, char *a3, size_t a4, uint64_t a5, _DWORD *a6, int a7, int *a8)
{
  size_t v12;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;

  if ((int)a4 >= 1)
  {
    v12 = a4;
    v15 = result;
    do
    {
      result = icu::UnicodeSet::spanUTF8(*(icu::UnicodeSet **)(v15 + 16), a3, v12, a7);
      v16 = result;
      if (a7)
      {
        if ((_DWORD)result)
        {
          result = (*(uint64_t (**)(_QWORD, uint64_t, char *, _QWORD, uint64_t, _DWORD *, int *))(**(_QWORD **)(v15 + 8) + 32))(*(_QWORD *)(v15 + 8), a2, a3, result, a5, a6, a8);
          if (*a8 > 0)
            return result;
        }
        a7 = 0;
      }
      else
      {
        if ((_DWORD)result)
        {
          if (a6)
            result = (uint64_t)icu::Edits::addUnchanged(a6, result);
          if ((a2 & 0x4000) == 0)
            result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a5 + 16))(a5, a3, v16);
        }
        a7 = 2;
      }
      a3 += (int)v16;
      v17 = __OFSUB__((_DWORD)v12, (_DWORD)v16);
      v12 = (v12 - v16);
    }
    while (!(((v12 & 0x80000000) != 0) ^ v17 | ((_DWORD)v12 == 0)));
  }
  return result;
}

icu::UnicodeString *icu::FilteredNormalizer2::normalizeSecondAndAppend(icu::FilteredNormalizer2 *this, icu::UnicodeString *a2, const icu::UnicodeString *a3, UErrorCode *a4)
{
  return icu::FilteredNormalizer2::normalizeSecondAndAppend(this, a2, a3, 1, a4);
}

icu::UnicodeString *icu::FilteredNormalizer2::normalizeSecondAndAppend(icu::FilteredNormalizer2 *this, icu::UnicodeString *a2, const icu::UnicodeString *a3, int a4, UErrorCode *a5)
{
  unsigned int v7;
  unsigned int v9;
  icu::UnicodeSet *v12;
  char *v13;
  int v15;
  int v16;
  int32_t v17;
  unsigned int v18;
  UChar *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void);
  unsigned int v29;
  int v30;
  int32_t v31;
  uint64_t v32;
  _OWORD v33[4];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 > 0)
    return a2;
  v7 = *((unsigned __int16 *)a2 + 4);
  if ((v7 & 1) != 0 || (v9 = *((unsigned __int16 *)a3 + 4), (v9 & 1) != 0) || a2 == a3)
  {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return a2;
  }
  if (v7 > 0x1F)
  {
    v12 = (icu::UnicodeSet *)*((_QWORD *)this + 2);
    if ((v9 & 0x11) != 0)
    {
      v13 = 0;
    }
    else if ((v9 & 2) != 0)
    {
      v13 = (char *)a3 + 10;
    }
    else
    {
      v13 = (char *)*((_QWORD *)a3 + 3);
    }
    v15 = (__int16)v9;
    v16 = v9 >> 5;
    if (v15 < 0)
      v16 = *((_DWORD *)a3 + 3);
    v17 = icu::UnicodeSet::span(v12, (UChar *)&v13[2 * (v16 & (v16 >> 31))], v16 - (v16 & (v16 >> 31)), 2)
        + (v16 & (v16 >> 31));
    if (v17)
    {
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      icu::UnicodeString::tempSubString(a3, 0, v17, (icu::UnicodeString *)&v34);
      v18 = *((unsigned __int16 *)a2 + 4);
      if ((v18 & 0x11) != 0)
      {
        v19 = 0;
      }
      else if ((v18 & 2) != 0)
      {
        v19 = (UChar *)((char *)a2 + 10);
      }
      else
      {
        v19 = (UChar *)*((_QWORD *)a2 + 3);
      }
      v20 = (__int16)v18;
      v21 = v18 >> 5;
      if (v20 >= 0)
        v22 = v21;
      else
        v22 = *((unsigned int *)a2 + 3);
      v23 = icu::UnicodeSet::spanBack(*((icu::UnicodeSet **)this + 2), v19, v22, 2);
      if ((_DWORD)v23)
      {
        v24 = v23;
        memset(v33, 0, sizeof(v33));
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v33, a2, v23, 0x7FFFFFFFLL);
        v25 = 40;
        if (!a4)
          v25 = 48;
        (*(void (**)(void))(**((_QWORD **)this + 1) + v25))();
        if ((SWORD4(v33[0]) & 0x8000u) == 0)
          v26 = WORD4(v33[0]) >> 5;
        else
          v26 = HIDWORD(v33[0]);
        icu::UnicodeString::doReplace(a2, v24, 0x7FFFFFFFLL, (const icu::UnicodeString *)v33, 0, v26);
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v33);
      }
      else
      {
        v27 = **((_QWORD **)this + 1);
        if (a4)
          v28 = *(void (**)(void))(v27 + 40);
        else
          v28 = *(void (**)(void))(v27 + 48);
        v28();
      }
      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v34);
    }
    v29 = *((unsigned __int16 *)a3 + 4);
    v30 = (__int16)v29;
    v31 = v29 >> 5;
    if (v30 < 0)
      v31 = *((_DWORD *)a3 + 3);
    if (v17 < v31)
    {
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      icu::UnicodeString::tempSubString(a3, v17, 0x7FFFFFFF, (icu::UnicodeString *)&v34);
      if (a4)
      {
        icu::FilteredNormalizer2::normalize((uint64_t)this, (uint64_t)&v34, (uint64_t)a2, 0, (int *)a5);
      }
      else
      {
        if ((SWORD4(v34) & 0x8000u) == 0)
          v32 = WORD4(v34) >> 5;
        else
          v32 = HIDWORD(v34);
        icu::UnicodeString::doAppend((uint64_t)a2, (const icu::UnicodeString *)&v34, 0, v32);
      }
      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v34);
    }
    return a2;
  }
  if (a4)
    return (icu::UnicodeString *)(*(uint64_t (**)(icu::FilteredNormalizer2 *, const icu::UnicodeString *, icu::UnicodeString *, UErrorCode *))(*(_QWORD *)this + 24))(this, a3, a2, a5);
  else
    return icu::UnicodeString::operator=((UChar **)a2, (UChar **)a3);
}

icu::UnicodeString *icu::FilteredNormalizer2::append(icu::FilteredNormalizer2 *this, icu::UnicodeString *a2, const icu::UnicodeString *a3, UErrorCode *a4)
{
  return icu::FilteredNormalizer2::normalizeSecondAndAppend(this, a2, a3, 0, a4);
}

uint64_t icu::FilteredNormalizer2::getDecomposition(icu::UnicodeSet **this, uint64_t a2, icu::UnicodeString *a3)
{
  uint64_t result;

  result = icu::UnicodeSet::contains(this[2], a2);
  if ((_DWORD)result)
    return (*(unsigned int (**)(icu::UnicodeSet *, uint64_t, icu::UnicodeString *))(*(_QWORD *)this[1] + 56))(this[1], a2, a3) != 0;
  return result;
}

uint64_t icu::FilteredNormalizer2::getRawDecomposition(icu::UnicodeSet **this, uint64_t a2, icu::UnicodeString *a3)
{
  uint64_t result;

  result = icu::UnicodeSet::contains(this[2], a2);
  if ((_DWORD)result)
    return (*(unsigned int (**)(icu::UnicodeSet *, uint64_t, icu::UnicodeString *))(*(_QWORD *)this[1] + 64))(this[1], a2, a3) != 0;
  return result;
}

uint64_t icu::FilteredNormalizer2::composePair(icu::FilteredNormalizer2 *this, uint64_t a2, uint64_t a3)
{
  if (icu::UnicodeSet::contains(*((icu::UnicodeSet **)this + 2), a2)
    && icu::UnicodeSet::contains(*((icu::UnicodeSet **)this + 2), a3))
  {
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1), a2, a3);
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t icu::FilteredNormalizer2::getCombiningClass(icu::UnicodeSet **this, uint64_t a2)
{
  uint64_t result;

  result = icu::UnicodeSet::contains(this[2], a2);
  if ((_DWORD)result)
    return (*(uint64_t (**)(icu::UnicodeSet *, uint64_t))(*(_QWORD *)this[1] + 80))(this[1], a2);
  return result;
}

uint64_t icu::FilteredNormalizer2::isNormalized(icu::UnicodeSet **this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t result;
  unsigned int v6;
  BOOL v7;
  int v8;
  int v9;
  int v11;
  int v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  icu::UnicodeSet *v18;
  void *v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  _BYTE v24[64];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 > 0)
    return 0;
  v6 = *((unsigned __int16 *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    result = 0;
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  else
  {
    v7 = (v6 & 0x8000u) != 0;
    v8 = v6 >> 5;
    v9 = *((_DWORD *)a2 + 3);
    if ((v6 & 0x8000u) != 0)
      v8 = *((_DWORD *)a2 + 3);
    if (v8 >= 1)
    {
      v11 = 0;
      v12 = 2;
      do
      {
        v13 = (char *)*((_QWORD *)a2 + 3);
        if ((v6 & 2) != 0)
          v13 = (char *)a2 + 10;
        if ((v6 & 0x11) != 0)
          v13 = 0;
        v14 = v6 >> 5;
        if (v7)
          v14 = v9;
        if (v14 >= v11)
          v15 = v11;
        else
          v15 = v14;
        if (v11 >= 0)
          v16 = v15;
        else
          v16 = 0;
        v17 = icu::UnicodeSet::span(this[2], (UChar *)&v13[2 * v16], (v14 - v16), v12) + v16;
        if (v12)
        {
          v18 = this[1];
          icu::UnicodeString::tempSubString(a2, v11, v17 - v11, (icu::UnicodeString *)v24);
          if (!(*(unsigned int (**)(icu::UnicodeSet *, _BYTE *, UErrorCode *))(*(_QWORD *)v18 + 88))(v18, v24, a3))
          {
            icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v24);
            return 0;
          }
          v20 = *a3;
          icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v24);
          v12 = 0;
          if (v20 >= 1)
            return 0;
        }
        else
        {
          v12 = 2;
        }
        v21 = *((__int16 *)a2 + 4);
        v6 = *((unsigned __int16 *)a2 + 4);
        v22 = v21 < 0;
        v7 = v21 < 0;
        v23 = (unsigned __int16)v21 >> 5;
        v9 = *((_DWORD *)a2 + 3);
        if (v22)
          v23 = *((_DWORD *)a2 + 3);
        v11 = v17;
      }
      while (v17 < v23);
    }
    return 1;
  }
  return result;
}

uint64_t icu::FilteredNormalizer2::isNormalizedUTF8(uint64_t a1, char *a2, size_t a3, int *a4)
{
  size_t v5;
  int v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;

  if (*a4 > 0)
    return 0;
  v5 = a3;
  if ((int)a3 >= 1)
  {
    v9 = 2;
    do
    {
      v10 = icu::UnicodeSet::spanUTF8(*(icu::UnicodeSet **)(a1 + 16), a2, v5, v9);
      if (v9)
      {
        v9 = 0;
        if ((*(unsigned int (**)(_QWORD, char *, _QWORD, int *))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), a2, v10, a4))
        {
          v11 = *a4 <= 0;
        }
        else
        {
          v11 = 0;
        }
        if (!v11)
          return 0;
      }
      else
      {
        v9 = 2;
      }
      a2 += (int)v10;
      v12 = __OFSUB__((_DWORD)v5, v10);
      v5 = v5 - v10;
    }
    while (!(((v5 & 0x80000000) != 0) ^ v12 | ((_DWORD)v5 == 0)));
  }
  return 1;
}

uint64_t icu::FilteredNormalizer2::quickCheck(icu::UnicodeSet **this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  int v8;
  int v10;
  uint64_t v11;
  int v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  icu::UnicodeSet *v18;
  uint64_t v19;
  void *v20;
  int v21;
  BOOL v22;
  int v23;
  _BYTE v25[64];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 > 0)
    return 2;
  v5 = *((unsigned __int16 *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    return 2;
  }
  v6 = (v5 & 0x8000u) != 0;
  v7 = v5 >> 5;
  v8 = *((_DWORD *)a2 + 3);
  if ((v5 & 0x8000u) != 0)
    v7 = *((_DWORD *)a2 + 3);
  if (v7 < 1)
    return 1;
  v10 = 0;
  v11 = 1;
  v12 = 2;
  do
  {
    v13 = (char *)*((_QWORD *)a2 + 3);
    if ((v5 & 2) != 0)
      v13 = (char *)a2 + 10;
    if ((v5 & 0x11) != 0)
      v13 = 0;
    v14 = v5 >> 5;
    if (v6)
      v14 = v8;
    if (v14 >= v10)
      v15 = v10;
    else
      v15 = v14;
    if (v10 >= 0)
      v16 = v15;
    else
      v16 = 0;
    v17 = icu::UnicodeSet::span(this[2], (UChar *)&v13[2 * v16], (v14 - v16), v12) + v16;
    if (v12)
    {
      v18 = this[1];
      icu::UnicodeString::tempSubString(a2, v10, v17 - v10, (icu::UnicodeString *)v25);
      v19 = (*(uint64_t (**)(icu::UnicodeSet *, _BYTE *, UErrorCode *))(*(_QWORD *)v18 + 104))(v18, v25, a3);
      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v25);
      if ((_DWORD)v19 == 2)
        v11 = 2;
      else
        v11 = v11;
      if (*(int *)a3 > 0 || !(_DWORD)v19)
        return v19;
      v12 = 0;
    }
    else
    {
      v12 = 2;
    }
    v21 = *((__int16 *)a2 + 4);
    v5 = *((unsigned __int16 *)a2 + 4);
    v22 = v21 < 0;
    v6 = v21 < 0;
    v23 = (unsigned __int16)v21 >> 5;
    v8 = *((_DWORD *)a2 + 3);
    if (v22)
      v23 = *((_DWORD *)a2 + 3);
    v10 = v17;
    v19 = v11;
  }
  while (v17 < v23);
  return v19;
}

uint64_t icu::FilteredNormalizer2::spanQuickCheckYes(icu::UnicodeSet **this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v3;
  unsigned int v6;
  BOOL v7;
  int v8;
  unsigned int v9;
  int v11;
  int v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  icu::UnicodeSet *v18;
  int v19;
  BOOL v20;
  int v21;
  _BYTE v23[64];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 > 0)
    return 0;
  v6 = *((unsigned __int16 *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v3 = 0;
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  else
  {
    v7 = (v6 & 0x8000u) != 0;
    v8 = v6 >> 5;
    v9 = *((_DWORD *)a2 + 3);
    if ((v6 & 0x8000u) != 0)
      v8 = *((_DWORD *)a2 + 3);
    if (v8 >= 1)
    {
      v11 = 0;
      v12 = 2;
      do
      {
        v13 = (char *)*((_QWORD *)a2 + 3);
        if ((v6 & 2) != 0)
          v13 = (char *)a2 + 10;
        if ((v6 & 0x11) != 0)
          v13 = 0;
        v14 = v6 >> 5;
        if (v7)
          v14 = v9;
        if (v14 >= v11)
          v15 = v11;
        else
          v15 = v14;
        if (v11 >= 0)
          v16 = v15;
        else
          v16 = 0;
        v17 = icu::UnicodeSet::span(this[2], (UChar *)&v13[2 * v16], (v14 - v16), v12) + v16;
        if (v12)
        {
          v18 = this[1];
          icu::UnicodeString::tempSubString(a2, v11, v17 - v11, (icu::UnicodeString *)v23);
          v3 = (*(unsigned int (**)(icu::UnicodeSet *, _BYTE *, UErrorCode *))(*(_QWORD *)v18 + 112))(v18, v23, a3)+ v11;
          icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v23);
          if (*(int *)a3 > 0 || (int)v3 < v17)
            return v3;
          v12 = 0;
        }
        else
        {
          v12 = 2;
        }
        v19 = *((__int16 *)a2 + 4);
        v6 = *((unsigned __int16 *)a2 + 4);
        v20 = v19 < 0;
        v7 = v19 < 0;
        v21 = (unsigned __int16)v19 >> 5;
        v9 = *((_DWORD *)a2 + 3);
        if (v20)
          v21 = *((_DWORD *)a2 + 3);
        v11 = v17;
      }
      while (v17 < v21);
    }
    if ((v6 & 0x8000) != 0)
      return v9;
    else
      return v6 >> 5;
  }
  return v3;
}

BOOL icu::FilteredNormalizer2::hasBoundaryBefore(icu::UnicodeSet **this, uint64_t a2)
{
  return !icu::UnicodeSet::contains(this[2], a2)
      || (*(unsigned int (**)(icu::UnicodeSet *, uint64_t))(*(_QWORD *)this[1] + 120))(this[1], a2) != 0;
}

BOOL icu::FilteredNormalizer2::hasBoundaryAfter(icu::UnicodeSet **this, uint64_t a2)
{
  return !icu::UnicodeSet::contains(this[2], a2)
      || (*(unsigned int (**)(icu::UnicodeSet *, uint64_t))(*(_QWORD *)this[1] + 128))(this[1], a2) != 0;
}

BOOL icu::FilteredNormalizer2::isInert(icu::UnicodeSet **this, uint64_t a2)
{
  return !icu::UnicodeSet::contains(this[2], a2)
      || (*(unsigned int (**)(icu::UnicodeSet *, uint64_t))(*(_QWORD *)this[1] + 136))(this[1], a2) != 0;
}

_QWORD *unorm2_openFiltered(uint64_t a1, unint64_t a2, int *a3)
{
  _QWORD *result;
  int v7;

  if (*a3 > 0)
    return 0;
  if (a2)
  {
    result = (_QWORD *)icu::UMemory::operator new((icu::UMemory *)0x18, a2);
    if (result)
    {
      *result = off_1E2246ED8;
      result[1] = a1;
      result[2] = a2;
      return result;
    }
    v7 = 7;
  }
  else
  {
    result = 0;
    v7 = 1;
  }
  *a3 = v7;
  return result;
}

void u_getDataVersion(uint8_t *a1, int *a2)
{
  uint64_t v4;
  _QWORD *v5;

  if (a1 && *a2 <= 0)
  {
    v4 = ures_openDirect(0, (uint64_t)"icuver", (uint64_t)a2);
    v5 = (_QWORD *)v4;
    if (*a2 <= 0)
      ures_getVersionByKey(v4, "DataVersion", a1, a2);
    ures_close(v5);
  }
}

void sub_18BBBBF08(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2246F90;
  udata_close(*(_OWORD **)(a1 + 80));
  ucptrie_close(*(_QWORD *)(a1 + 88));
  icu::Normalizer2Impl::~Normalizer2Impl((icu::Normalizer2Impl *)a1);
}

void sub_18BBBBF48(uint64_t a1)
{
  void *v1;

  sub_18BBBBF08(a1);
  icu::UMemory::operator delete(v1);
}

BOOL sub_18BBBBF5C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  return *(unsigned __int16 *)a4 >= 0x14u
      && !a4[4]
      && !a4[5]
      && a4[8] == 78
      && a4[9] == 114
      && a4[10] == 109
      && a4[11] == 50
      && a4[12] == 4;
}

unsigned int *sub_18BBBBFC4(unsigned int *result, char *a2, const char *a3, UErrorCode *a4)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  if (*(int *)a4 <= 0)
  {
    v5 = (uint64_t)result;
    result = (unsigned int *)udata_openChoice(a2, "nrm", a3, (unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_18BBBBF5C, (uint64_t)result, a4);
    *(_QWORD *)(v5 + 80) = result;
    if (*(int *)a4 <= 0)
    {
      result = (unsigned int *)udata_getMemory((uint64_t)result);
      v6 = *result;
      if ((int)v6 > 75)
      {
        v7 = result;
        v8 = (int)result[1];
        result = ucptrie_openFromBinary(0, 0, (uint64_t)result + v6, (int)v8 - (int)v6, 0, (int *)a4);
        *(_QWORD *)(v5 + 88) = result;
        if (*(int *)a4 <= 0)
          return (unsigned int *)icu::Normalizer2Impl::init(v5, v7, (uint64_t)result, (uint64_t)v7 + v8, (uint64_t)v7 + (int)v7[2]);
      }
      else
      {
        *a4 = U_INVALID_FORMAT_ERROR;
      }
    }
  }
  return result;
}

uint64_t sub_18BBBC0A4(char *a1, const char *a2, UErrorCode *a3)
{
  uint64_t v7;
  uint64_t v8;

  if (*(int *)a3 > 0)
    return 0;
  v7 = icu::UMemory::operator new((icu::UMemory *)0x60, (unint64_t)a2);
  if (!v7)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    return 0;
  }
  v8 = v7;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 72) = 0;
  *(_QWORD *)v7 = off_1E2246F90;
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  sub_18BBBBFC4((unsigned int *)v7, a1, a2, a3);
  return sub_18BBD5CA8(v8, (int *)a3);
}

void sub_18BBBC13C(const char *a1, UErrorCode *a2)
{
  const char *v4;
  uint64_t *v5;

  v4 = "nfkc";
  if (!strcmp(a1, "nfkc"))
  {
    v5 = &qword_1ECD272E0;
  }
  else
  {
    v4 = "nfkc_cf";
    if (!strcmp(a1, "nfkc_cf"))
    {
      v5 = &qword_1EE009230;
    }
    else
    {
      v4 = "nfkc_scf";
      if (strcmp(a1, "nfkc_scf"))
        abort();
      v5 = &qword_1EE009238;
    }
  }
  *v5 = sub_18BBBC0A4(0, v4, a2);
  sub_18BC0ECC4(0xFu, (uint64_t)sub_18BBBC660);
}

uint64_t icu::Normalizer2::getNFKCInstance(icu::Normalizer2 *this, UErrorCode *a2)
{
  uint64_t v2;

  if (*(int *)this <= 0)
  {
    sub_18BBB1B60((unsigned int *)&unk_1ECD272F0, (void (*)(uint64_t, int *))sub_18BBBC13C, (uint64_t)"nfkc", (int *)this);
    v2 = qword_1ECD272E0;
  }
  else
  {
    v2 = 0;
  }
  if (v2)
    return v2 + 8;
  else
    return 0;
}

uint64_t icu::Normalizer2::getNFKDInstance(icu::Normalizer2 *this, UErrorCode *a2)
{
  uint64_t v2;

  if (*(int *)this <= 0)
  {
    sub_18BBB1B60((unsigned int *)&unk_1ECD272F0, (void (*)(uint64_t, int *))sub_18BBBC13C, (uint64_t)"nfkc", (int *)this);
    v2 = qword_1ECD272E0;
  }
  else
  {
    v2 = 0;
  }
  if (v2)
    return v2 + 32;
  else
    return 0;
}

uint64_t icu::Normalizer2::getNFKCCasefoldInstance(icu::Normalizer2 *this, UErrorCode *a2)
{
  uint64_t v2;

  if (*(int *)this <= 0)
  {
    sub_18BBB1B60((unsigned int *)&unk_1EE009240, (void (*)(uint64_t, int *))sub_18BBBC13C, (uint64_t)"nfkc_cf", (int *)this);
    v2 = qword_1EE009230;
  }
  else
  {
    v2 = 0;
  }
  if (v2)
    return v2 + 8;
  else
    return 0;
}

uint64_t icu::Normalizer2::getNFKCSimpleCasefoldInstance(icu::Normalizer2 *this, UErrorCode *a2)
{
  uint64_t v2;

  if (*(int *)this <= 0)
  {
    sub_18BBB1B60((unsigned int *)&unk_1EE009248, (void (*)(uint64_t, int *))sub_18BBBC13C, (uint64_t)"nfkc_scf", (int *)this);
    v2 = qword_1EE009238;
  }
  else
  {
    v2 = 0;
  }
  if (v2)
    return v2 + 8;
  else
    return 0;
}

uint64_t icu::Normalizer2::getInstance(char *a1, char *__s1, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  int32x2_t *v16;
  uint64_t *v17;

  if (*a4 > 0)
    return 0;
  if (!__s1 || !*__s1)
  {
    result = 0;
    *a4 = 1;
    return result;
  }
  if (a1)
    goto LABEL_6;
  if (!strcmp(__s1, "nfc"))
  {
    v9 = sub_18BBD5DDC(a4);
  }
  else if (!strcmp(__s1, "nfkc"))
  {
    sub_18BBB1B60((unsigned int *)&unk_1ECD272F0, (void (*)(uint64_t, int *))sub_18BBBC13C, (uint64_t)"nfkc", a4);
    v9 = qword_1ECD272E0;
  }
  else if (!strcmp(__s1, "nfkc_cf"))
  {
    sub_18BBB1B60((unsigned int *)&unk_1EE009240, (void (*)(uint64_t, int *))sub_18BBBC13C, (uint64_t)"nfkc_cf", a4);
    v9 = qword_1EE009230;
  }
  else
  {
    if (strcmp(__s1, "nfkc_scf"))
      goto LABEL_6;
    sub_18BBB1B60((unsigned int *)&unk_1EE009248, (void (*)(uint64_t, int *))sub_18BBBC13C, (uint64_t)"nfkc_scf", a4);
    v9 = qword_1EE009238;
  }
  if (v9)
    goto LABEL_31;
  if (*a4 > 0)
    return 0;
LABEL_6:
  umtx_lock(0);
  if (!qword_1ECD272E8)
  {
    umtx_unlock(0);
    goto LABEL_17;
  }
  v9 = uhash_get(qword_1ECD272E8, (uint64_t)__s1);
  umtx_unlock(0);
  if (!v9)
  {
LABEL_17:
    sub_18BC0ECC4(0xFu, (uint64_t)sub_18BBBC660);
    v10 = (uint64_t *)sub_18BBBC0A4(a1, __s1, (UErrorCode *)a4);
    v17 = v10;
    if (*a4 >= 1)
    {
LABEL_18:
      sub_18BBBCA68(&v17);
      return 0;
    }
    v11 = (uint64_t)v10;
    umtx_lock(0);
    v12 = qword_1ECD272E8;
    if (!qword_1ECD272E8)
    {
      v16 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0, a4);
      qword_1ECD272E8 = (uint64_t)v16;
      if (*a4 > 0)
        goto LABEL_40;
      uhash_setKeyDeleter((uint64_t)v16, (uint64_t)uprv_free);
      uhash_setValueDeleter(qword_1ECD272E8, (uint64_t)sub_18BBBC6F8);
      v12 = qword_1ECD272E8;
    }
    v9 = uhash_get(v12, (uint64_t)__s1);
    if (v9)
      goto LABEL_23;
    v13 = (int)(strlen(__s1) + 1);
    v14 = uprv_malloc(v13);
    if (v14)
    {
      v15 = (uint64_t)v14;
      memcpy(v14, __s1, v13);
      v17 = 0;
      uhash_put(qword_1ECD272E8, v15, v11, a4);
      v9 = v11;
LABEL_23:
      umtx_unlock(0);
      sub_18BBBCA68(&v17);
      if (!v9)
        return 0;
      goto LABEL_31;
    }
    *a4 = 7;
LABEL_40:
    umtx_unlock(0);
    goto LABEL_18;
  }
LABEL_31:
  if (*a4 > 0)
    return 0;
  switch(a3)
  {
    case 0:
      result = v9 + 8;
      break;
    case 1:
      result = v9 + 32;
      break;
    case 2:
      result = v9 + 48;
      break;
    case 3:
      result = v9 + 64;
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t sub_18BBBC660()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;

  if (qword_1ECD272E0)
  {
    v0 = sub_18BBD5CA4((uint64_t *)qword_1ECD272E0);
    icu::UMemory::operator delete(v0);
  }
  qword_1ECD272E0 = 0;
  atomic_store(0, (unsigned int *)&unk_1ECD272F0);
  if (qword_1EE009230)
  {
    v1 = sub_18BBD5CA4((uint64_t *)qword_1EE009230);
    icu::UMemory::operator delete(v1);
  }
  qword_1EE009230 = 0;
  atomic_store(0, (unsigned int *)&unk_1EE009240);
  if (qword_1EE009238)
  {
    v2 = sub_18BBD5CA4((uint64_t *)qword_1EE009238);
    icu::UMemory::operator delete(v2);
  }
  qword_1EE009238 = 0;
  atomic_store(0, (unsigned int *)&unk_1EE009248);
  uhash_close((void **)qword_1ECD272E8);
  qword_1ECD272E8 = 0;
  return 1;
}

void sub_18BBBC6F8(uint64_t *a1)
{
  uint64_t *v1;

  if (a1)
  {
    v1 = sub_18BBD5CA4(a1);
    icu::UMemory::operator delete(v1);
  }
}

uint64_t icu::Normalizer2Factory::getInstance(int a1, icu::Normalizer2Factory *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  if (*(int *)this > 0)
    return 0;
  switch(a1)
  {
    case 2:
      result = icu::Normalizer2::getNFDInstance(this, (UErrorCode *)this);
      break;
    case 3:
      sub_18BBB1B60((unsigned int *)&unk_1ECD272F0, (void (*)(uint64_t, int *))sub_18BBBC13C, (uint64_t)"nfkc", (int *)this);
      v3 = qword_1ECD272E0;
      v4 = qword_1ECD272E0 + 32;
      goto LABEL_10;
    case 4:
      result = icu::Normalizer2::getNFCInstance(this, (UErrorCode *)this);
      break;
    case 5:
      sub_18BBB1B60((unsigned int *)&unk_1ECD272F0, (void (*)(uint64_t, int *))sub_18BBBC13C, (uint64_t)"nfkc", (int *)this);
      v3 = qword_1ECD272E0;
      v4 = qword_1ECD272E0 + 8;
LABEL_10:
      if (v3)
        result = v4;
      else
        result = 0;
      break;
    case 6:
      result = icu::Normalizer2Factory::getFCDInstance(this, (UErrorCode *)this);
      break;
    default:
      result = icu::Normalizer2Factory::getNoopInstance(this, (UErrorCode *)this);
      break;
  }
  return result;
}

uint64_t icu::Normalizer2Factory::getNFKCImpl(icu::Normalizer2Factory *this, UErrorCode *a2)
{
  if (*(int *)this <= 0
    && (sub_18BBB1B60((unsigned int *)&unk_1ECD272F0, (void (*)(uint64_t, int *))sub_18BBBC13C, (uint64_t)"nfkc", (int *)this), qword_1ECD272E0))
  {
    return *(_QWORD *)qword_1ECD272E0;
  }
  else
  {
    return 0;
  }
}

uint64_t icu::Normalizer2Factory::getNFKC_CFImpl(icu::Normalizer2Factory *this, UErrorCode *a2)
{
  if (*(int *)this <= 0
    && (sub_18BBB1B60((unsigned int *)&unk_1EE009240, (void (*)(uint64_t, int *))sub_18BBBC13C, (uint64_t)"nfkc_cf", (int *)this), qword_1EE009230))
  {
    return *(_QWORD *)qword_1EE009230;
  }
  else
  {
    return 0;
  }
}

uint64_t unorm2_getNFKCInstance(int *a1)
{
  uint64_t v1;

  if (*a1 <= 0)
  {
    sub_18BBB1B60((unsigned int *)&unk_1ECD272F0, (void (*)(uint64_t, int *))sub_18BBBC13C, (uint64_t)"nfkc", a1);
    v1 = qword_1ECD272E0;
  }
  else
  {
    v1 = 0;
  }
  if (v1)
    return v1 + 8;
  else
    return 0;
}

uint64_t unorm2_getNFKDInstance(int *a1)
{
  uint64_t v1;

  if (*a1 <= 0)
  {
    sub_18BBB1B60((unsigned int *)&unk_1ECD272F0, (void (*)(uint64_t, int *))sub_18BBBC13C, (uint64_t)"nfkc", a1);
    v1 = qword_1ECD272E0;
  }
  else
  {
    v1 = 0;
  }
  if (v1)
    return v1 + 32;
  else
    return 0;
}

uint64_t unorm2_getNFKCCasefoldInstance(int *a1)
{
  uint64_t v1;

  if (*a1 <= 0)
  {
    sub_18BBB1B60((unsigned int *)&unk_1EE009240, (void (*)(uint64_t, int *))sub_18BBBC13C, (uint64_t)"nfkc_cf", a1);
    v1 = qword_1EE009230;
  }
  else
  {
    v1 = 0;
  }
  if (v1)
    return v1 + 8;
  else
    return 0;
}

uint64_t unorm2_getNFKCSimpleCasefoldInstance(int *a1)
{
  uint64_t v1;

  if (*a1 <= 0)
  {
    sub_18BBB1B60((unsigned int *)&unk_1EE009248, (void (*)(uint64_t, int *))sub_18BBBC13C, (uint64_t)"nfkc_scf", a1);
    v1 = qword_1EE009238;
  }
  else
  {
    v1 = 0;
  }
  if (v1)
    return v1 + 8;
  else
    return 0;
}

uint64_t sub_18BBBC9F8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Instance;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if ((a2 - 6) < 0xFFFFFFFC)
    return 1;
  v8 = v2;
  v9 = v3;
  v7 = 0;
  Instance = icu::Normalizer2Factory::getInstance(a2, (icu::Normalizer2Factory *)&v7);
  if (v7 <= 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)Instance + 168))(Instance, a1);
  else
    return 2;
}

uint64_t **sub_18BBBCA68(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;

  v2 = *a1;
  if (v2)
  {
    v3 = sub_18BBD5CA4(v2);
    icu::UMemory::operator delete(v3);
  }
  return a1;
}

_QWORD *icu::LocaleBuilder::LocaleBuilder(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = off_1E2246FD0;
  *(_QWORD *)((char *)this + 22) = 0;
  this[4] = 0;
  this[5] = 0;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = off_1E2246FD0;
  *(_QWORD *)((char *)this + 22) = 0;
  this[4] = 0;
  this[5] = 0;
  return this;
}

void icu::LocaleBuilder::~LocaleBuilder(icu::LocaleBuilder *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E2246FD0;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 12))
      uprv_free(*(void **)v2);
    icu::UMemory::operator delete((void *)v2);
  }
  v3 = *((_QWORD *)this + 5);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::LocaleBuilder::~LocaleBuilder(this);
  icu::UMemory::operator delete(v1);
}

icu::LocaleBuilder *icu::LocaleBuilder::setLocale(icu::LocaleBuilder *this, const icu::Locale *a2)
{
  unint64_t v4;
  icu::Locale *v5;
  const char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  icu::LocaleBuilder::clear(this);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v13, (const char *)a2 + 8);
  icu::LocaleBuilder::setLanguage((uint64_t)this, v13, v14);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v11, (const char *)a2 + 20);
  icu::LocaleBuilder::setScript((uint64_t)this, v11, v12);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v9, (const char *)a2 + 26);
  icu::LocaleBuilder::setRegion((uint64_t)this, v9, v10);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v7, (const char *)(*((_QWORD *)a2 + 26) + *((int *)a2 + 8)));
  icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8);
  v5 = icu::Locale::clone(a2, v4);
  *((_QWORD *)this + 5) = v5;
  if (!v5)
    *((_DWORD *)this + 2) = 7;
  return this;
}

icu::LocaleBuilder *icu::LocaleBuilder::clear(icu::LocaleBuilder *this)
{
  uint64_t v2;
  uint64_t v3;

  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 12) = 0;
  *((_BYTE *)this + 21) = 0;
  *((_BYTE *)this + 26) = 0;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 12))
      uprv_free(*(void **)v2);
    icu::UMemory::operator delete((void *)v2);
  }
  *((_QWORD *)this + 4) = 0;
  v3 = *((_QWORD *)this + 5);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 5) = 0;
  return this;
}

uint64_t icu::LocaleBuilder::setLanguage(uint64_t a1, void *a2, signed int a3)
{
  _BYTE *v6;

  if (*(int *)(a1 + 8) <= 0)
  {
    v6 = (_BYTE *)(a1 + 12);
    if (a3)
    {
      if (sub_18BC3EE74((char *)a2, a3))
      {
        memcpy((void *)(a1 + 12), a2, a3);
        v6[a3] = 0;
      }
      else
      {
        *(_DWORD *)(a1 + 8) = 1;
      }
    }
    else
    {
      *v6 = 0;
    }
  }
  return a1;
}

uint64_t icu::LocaleBuilder::setScript(uint64_t a1, void *a2, int a3)
{
  _BYTE *v6;

  if (*(int *)(a1 + 8) <= 0)
  {
    v6 = (_BYTE *)(a1 + 21);
    if (a3)
    {
      if (sub_18BC3EED0((char *)a2, a3))
      {
        memcpy((void *)(a1 + 21), a2, a3);
        v6[a3] = 0;
      }
      else
      {
        *(_DWORD *)(a1 + 8) = 1;
      }
    }
    else
    {
      *v6 = 0;
    }
  }
  return a1;
}

uint64_t icu::LocaleBuilder::setRegion(uint64_t a1, void *a2, int a3)
{
  _BYTE *v6;

  if (*(int *)(a1 + 8) <= 0)
  {
    v6 = (_BYTE *)(a1 + 26);
    if (a3)
    {
      if (sub_18BC3EF2C((char *)a2, a3))
      {
        memcpy((void *)(a1 + 26), a2, a3);
        v6[a3] = 0;
      }
      else
      {
        *(_DWORD *)(a1 + 8) = 1;
      }
    }
    else
    {
      *v6 = 0;
    }
  }
  return a1;
}

uint64_t icu::LocaleBuilder::setVariant(uint64_t a1, const char *a2, int a3)
{
  UErrorCode *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v4 = (UErrorCode *)(a1 + 8);
  if (*(int *)(a1 + 8) > 0)
    return a1;
  if (a3)
  {
    v8 = icu::UMemory::operator new((icu::UMemory *)0x40, (unint64_t)a2);
    if (v8)
    {
      v9 = v8;
      *(_QWORD *)v8 = v8 + 13;
      *(_DWORD *)(v8 + 8) = 40;
      *(_WORD *)(v8 + 12) = 0;
      *(_DWORD *)(v8 + 56) = 0;
      icu::CharString::append((icu::CharString *)v8, a2, a3, v4);
      if (*(int *)v4 >= 1)
        return a1;
      v10 = *(char **)v9;
      v11 = *(_DWORD *)(v9 + 56);
      if (v11 >= 1)
      {
        do
        {
          v12 = *v10;
          if (v12 == 95)
            v13 = 45;
          else
            v13 = uprv_asciitolower((char)v12);
          *v10++ = v13;
          --v11;
        }
        while (v11);
        v10 = *(char **)v9;
        v11 = *(_DWORD *)(v9 + 56);
      }
      if (sub_18BC3EFB4(v10, v11))
      {
        v14 = *(_QWORD *)(a1 + 32);
        if (v14)
        {
          if (*(_BYTE *)(v14 + 12))
            uprv_free(*(void **)v14);
          icu::UMemory::operator delete((void *)v14);
        }
        *(_QWORD *)(a1 + 32) = v9;
        return a1;
      }
      if (*(_BYTE *)(v9 + 12))
        uprv_free(*(void **)v9);
      icu::UMemory::operator delete((void *)v9);
      v16 = 1;
    }
    else
    {
      if (*(int *)v4 > 0)
        return a1;
      v16 = 7;
    }
    *v4 = v16;
    return a1;
  }
  v15 = *(_QWORD *)(a1 + 32);
  if (v15)
  {
    if (*(_BYTE *)(v15 + 12))
      uprv_free(*(void **)v15);
    icu::UMemory::operator delete((void *)v15);
  }
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

int *icu::LocaleBuilder::setLanguageTag(int *a1, char *a2, int a3)
{
  _OWORD v5[14];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  memset(v5, 0, sizeof(v5));
  icu::Locale::forLanguageTag(a2, a3, a1 + 2, (uint64_t)v5);
  if (a1[2] <= 0)
    icu::LocaleBuilder::setLocale((icu::LocaleBuilder *)a1, (const icu::Locale *)v5);
  icu::Locale::~Locale((icu::Locale *)v5);
  return a1;
}

uint64_t icu::LocaleBuilder::setExtension(uint64_t a1, int a2, const char *a3, int a4)
{
  UErrorCode *v5;
  uint64_t v9;
  int v11;
  char *v12;
  int v13;
  icu::Locale *Root;
  unint64_t v15;
  icu::Locale *v16;
  int v17;
  char **v18;
  char *UnicodeKeywords;
  char *v20;
  UErrorCode v21;
  uint64_t v22;
  const char *v23;
  int v24;
  const char *v26;
  uint64_t v27;
  char v28;
  const char *v29;
  uint64_t v30;
  char *__s[7];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v28 = a2;
  v5 = (UErrorCode *)(a1 + 8);
  if (*(int *)(a1 + 8) > 0)
    return a1;
  if (!uprv_isASCIILetter(a2) && (a2 - 48) >= 0xAu)
  {
    *v5 = U_ILLEGAL_ARGUMENT_ERROR;
    return a1;
  }
  memset(&__s[1], 0, 48);
  v32 = 0;
  __s[0] = (char *)&__s[1] + 5;
  LODWORD(__s[1]) = 40;
  v9 = (uint64_t)icu::CharString::append((icu::CharString *)__s, a3, a4, v5);
  if (*(int *)v5 <= 0)
  {
    v11 = v32;
    if ((int)v32 >= 1)
    {
      v12 = __s[0];
      do
      {
        v13 = *v12;
        if (v13 == 95)
          v9 = 45;
        else
          v9 = uprv_asciitolower((char)v13);
        *v12++ = v9;
        --v11;
      }
      while (v11);
      v11 = v32;
    }
    if (v11 && (v9 = sub_18BBBD294(a2, __s[0], v11), (v9 & 1) == 0))
    {
      v24 = 1;
    }
    else
    {
      if (*(_QWORD *)(a1 + 40)
        || (Root = (icu::Locale *)icu::Locale::getRoot((icu::Locale *)v9),
            v16 = icu::Locale::clone(Root, v15),
            (*(_QWORD *)(a1 + 40) = v16) != 0))
      {
        v17 = uprv_asciitolower(a2);
        v18 = *(char ***)(a1 + 40);
        if (v17 != 117)
        {
          icu::StringPiece::StringPiece((icu::StringPiece *)&v26, __s[0]);
          icu::Locale::setKeywordValue(v18, &v28, 1, v26, v27, v5);
          goto LABEL_6;
        }
        icu::Locale::setKeywordValue(*(char ***)(a1 + 40), "attribute", "", v5);
        UnicodeKeywords = icu::Locale::createUnicodeKeywords((icu::Locale *)v18, v5);
        v20 = UnicodeKeywords;
        v21 = *v5;
        if (*(int *)v5 <= 0 && UnicodeKeywords)
        {
          v22 = (*(uint64_t (**)(char *, _QWORD, UErrorCode *))(*(_QWORD *)UnicodeKeywords + 40))(UnicodeKeywords, 0, v5);
          if (v22)
          {
            v23 = (const char *)v22;
            do
            {
              icu::StringPiece::StringPiece((icu::StringPiece *)&v29, v23);
              icu::Locale::setUnicodeKeywordValue(v18, v29, v30, 0, 0, v5);
              v23 = (const char *)(*(uint64_t (**)(char *, _QWORD, UErrorCode *))(*(_QWORD *)v20 + 40))(v20, 0, v5);
            }
            while (v23);
          }
        }
        else if (!UnicodeKeywords)
        {
          goto LABEL_31;
        }
        (*(void (**)(char *))(*(_QWORD *)v20 + 8))(v20);
        v21 = *v5;
LABEL_31:
        if (v21 <= U_ZERO_ERROR && a4 != 0)
          sub_18BBBD314(*(char ***)(a1 + 40), (uint64_t)__s, v5);
        goto LABEL_6;
      }
      v24 = 7;
    }
    *v5 = v24;
  }
LABEL_6:
  if (BYTE4(__s[1]))
    uprv_free(__s[0]);
  return a1;
}

BOOL sub_18BBBD294(int a1, char *a2, int a3)
{
  int v5;
  int v6;

  v5 = uprv_asciitolower(a1);
  switch(v5)
  {
    case 't':
      v6 = sub_18BC3F4CC(a2, a3);
      break;
    case 'x':
      v6 = sub_18BC3F1D4(a2, a3);
      break;
    case 'u':
      v6 = sub_18BC3F6D8(a2, a3);
      break;
    default:
      v6 = sub_18BC3F120(a2, a3);
      break;
  }
  return v6 != 0;
}

void sub_18BBBD314(char **a1, uint64_t a2, UErrorCode *a3)
{
  char *v6;
  uint64_t v7;
  char *v8;
  int v9;
  char v10[224];
  void *v11[7];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  memset(&v11[1], 0, 48);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v8, "und-u-");
  v11[0] = (char *)&v11[1] + 5;
  LODWORD(v11[1]) = 40;
  WORD2(v11[1]) = 0;
  LODWORD(v12) = 0;
  icu::CharString::append((icu::CharString *)v11, v8, v9, a3);
  icu::CharString::append((icu::CharString *)v11, *(const char **)a2, *(_DWORD *)(a2 + 56), a3);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v6, (const char *)v11[0]);
  icu::Locale::forLanguageTag(v6, v7, (int *)a3, (uint64_t)v10);
  sub_18BBBDCA0(v10, 0, a1, 0, a3);
  icu::Locale::~Locale((icu::Locale *)v10);
  if (BYTE4(v11[1]))
    uprv_free(v11[0]);
}

uint64_t icu::LocaleBuilder::setUnicodeLocaleKeyword(uint64_t a1, char *a2, int a3, char *a4, int a5)
{
  UErrorCode *v6;
  char **v11;
  icu::Locale *Root;
  unint64_t v13;
  int v14;

  v6 = (UErrorCode *)(a1 + 8);
  if (*(int *)(a1 + 8) <= 0)
  {
    if (sub_18BC3F39C(a2, a3) && (!a5 || sub_18BC3F2E8(a4, a5)))
    {
      v11 = *(char ***)(a1 + 40);
      if (v11
        || (Root = (icu::Locale *)icu::Locale::getRoot(0),
            v11 = (char **)icu::Locale::clone(Root, v13),
            (*(_QWORD *)(a1 + 40) = v11) != 0))
      {
        icu::Locale::setUnicodeKeywordValue(v11, a2, a3, a4, a5, v6);
        return a1;
      }
      v14 = 7;
    }
    else
    {
      v14 = 1;
    }
    *v6 = v14;
  }
  return a1;
}

uint64_t icu::LocaleBuilder::addUnicodeLocaleAttribute(uint64_t a1, const char *a2, int a3)
{
  UErrorCode *v4;
  char *v5;
  int v6;
  int v7;
  char v8;
  _BOOL8 v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  icu::Locale *Root;
  unint64_t v15;
  char **v16;
  char *v17;
  int v18;
  int v19;
  char v20;
  char v21;
  char *v22;
  const char *v23;
  int v24;
  char *v26;
  int v27;
  char *v28;
  int v29;
  char *v30;
  int v31;
  char *v32;
  int v33;
  const char *v34;
  uint64_t v35;
  int v36;
  _QWORD v37[2];
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char *__s1[7];
  uint64_t v44;
  void *v45[7];
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  memset(&v45[1], 0, 48);
  v46 = 0;
  v4 = (UErrorCode *)(a1 + 8);
  v45[0] = (char *)&v45[1] + 5;
  LODWORD(v45[1]) = 40;
  icu::CharString::append((icu::CharString *)v45, a2, a3, (UErrorCode *)(a1 + 8));
  if (*(int *)(a1 + 8) > 0)
    goto LABEL_45;
  v5 = (char *)v45[0];
  v6 = v46;
  if ((int)v46 >= 1)
  {
    do
    {
      v7 = *v5;
      if (v7 == 95)
        v8 = 45;
      else
        v8 = uprv_asciitolower((char)v7);
      *v5++ = v8;
      --v6;
    }
    while (v6);
    v5 = (char *)v45[0];
    v6 = v46;
  }
  v9 = sub_18BC3F288(v5, v6);
  if (!v9)
  {
    v13 = 1;
    goto LABEL_13;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
    Root = (icu::Locale *)icu::Locale::getRoot((icu::Locale *)v9);
    v16 = (char **)icu::Locale::clone(Root, v15);
    *(_QWORD *)(a1 + 40) = v16;
    if (v16)
    {
      icu::Locale::setKeywordValue(v16, "attribute", (char *)v45[0], v4);
      goto LABEL_45;
    }
    v13 = 7;
LABEL_13:
    *v4 = v13;
    goto LABEL_45;
  }
  memset(&__s1[1], 0, 48);
  __s1[0] = (char *)&__s1[1] + 5;
  LODWORD(__s1[1]) = 40;
  v44 = 0;
  v37[0] = 0;
  v37[1] = 0;
  icu::CharStringByteSink::CharStringByteSink(v37, (uint64_t)__s1);
  v36 = 0;
  v10 = *(_QWORD *)(a1 + 40);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v34, "attribute");
  icu::Locale::getKeywordValue(v10, v34, v35, (uint64_t)v37, (UErrorCode *)&v36);
  if (v36 >= 1)
  {
    v42 = 0;
    v41 = 0u;
    v40 = 0u;
    v39 = 0u;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v32, (const char *)v45[0]);
    v11 = v32;
    v12 = v33;
    v38 = (char *)&v39 + 5;
    LODWORD(v39) = 40;
    WORD2(v39) = 0;
    LODWORD(v42) = 0;
LABEL_39:
    icu::CharString::append((icu::CharString *)&v38, v11, v12, v4);
    goto LABEL_40;
  }
  v17 = __s1[0];
  v18 = v44;
  if ((int)v44 >= 1)
  {
    do
    {
      v19 = *v17;
      if (v19 == 95)
        v20 = 45;
      else
        v20 = uprv_asciitolower((char)v19);
      *v17++ = v20;
      --v18;
    }
    while (v18);
    v17 = __s1[0];
    v18 = v44;
  }
  v39 = 0u;
  v41 = 0u;
  v40 = 0u;
  v38 = (char *)&v39 + 5;
  LODWORD(v39) = 40;
  v42 = 0;
  if (v18 < 1)
  {
LABEL_38:
    icu::StringPiece::StringPiece((icu::StringPiece *)&v26, (const char *)v45[0]);
    v11 = v26;
    v12 = v27;
    goto LABEL_39;
  }
  v21 = 0;
  v22 = &v17[v18];
  do
  {
    if ((v21 & 1) != 0)
      goto LABEL_30;
    v23 = (const char *)v45[0];
    v24 = strcmp(v17, (const char *)v45[0]);
    if (!v24)
      goto LABEL_41;
    if (v24 >= 1)
    {
      if ((_DWORD)v42)
      {
        icu::CharString::append((icu::CharString *)&v38, 95, v4);
        v23 = (const char *)v45[0];
      }
      icu::StringPiece::StringPiece((icu::StringPiece *)&v30, v23);
      icu::CharString::append((icu::CharString *)&v38, v30, v31, v4);
LABEL_30:
      v21 = 1;
      goto LABEL_32;
    }
    v21 = 0;
LABEL_32:
    if ((_DWORD)v42)
      icu::CharString::append((icu::CharString *)&v38, 95, v4);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v28, v17);
    icu::CharString::append((icu::CharString *)&v38, v28, v29, v4);
    v17 += strlen(v17) + 1;
  }
  while (v17 < v22);
  if ((v21 & 1) == 0)
  {
    if ((_DWORD)v42)
      icu::CharString::append((icu::CharString *)&v38, 95, v4);
    goto LABEL_38;
  }
LABEL_40:
  icu::Locale::setKeywordValue(*(char ***)(a1 + 40), "attribute", v38, v4);
LABEL_41:
  if (BYTE4(v39))
    uprv_free(v38);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v37);
  if (BYTE4(__s1[1]))
    uprv_free(__s1[0]);
LABEL_45:
  if (BYTE4(v45[1]))
    uprv_free(v45[0]);
  return a1;
}

uint64_t icu::LocaleBuilder::removeUnicodeLocaleAttribute(uint64_t a1, const char *a2, int a3)
{
  UErrorCode *v4;
  char *v6;
  int v7;
  int v8;
  char v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  char v14;
  int v15;
  char v16;
  const char *v17;
  char *v18;
  int v19;
  const char *v20;
  uint64_t v21;
  _QWORD v22[2];
  int v23;
  char *v24[7];
  uint64_t v25;
  char *__s1[7];
  uint64_t v27;
  void *v28[7];
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  memset(&v28[1], 0, 48);
  v29 = 0;
  v4 = (UErrorCode *)(a1 + 8);
  v28[0] = (char *)&v28[1] + 5;
  LODWORD(v28[1]) = 40;
  icu::CharString::append((icu::CharString *)v28, a2, a3, (UErrorCode *)(a1 + 8));
  if (*(int *)(a1 + 8) <= 0)
  {
    v6 = (char *)v28[0];
    v7 = v29;
    if ((int)v29 >= 1)
    {
      do
      {
        v8 = *v6;
        if (v8 == 95)
          v9 = 45;
        else
          v9 = uprv_asciitolower((char)v8);
        *v6++ = v9;
        --v7;
      }
      while (v7);
      v6 = (char *)v28[0];
      v7 = v29;
    }
    if (sub_18BC3F288(v6, v7))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        v23 = 0;
        memset(&__s1[1], 0, 48);
        __s1[0] = (char *)&__s1[1] + 5;
        LODWORD(__s1[1]) = 40;
        v27 = 0;
        v22[0] = 0;
        v22[1] = 0;
        icu::CharStringByteSink::CharStringByteSink(v22, (uint64_t)__s1);
        v10 = *(_QWORD *)(a1 + 40);
        icu::StringPiece::StringPiece((icu::StringPiece *)&v20, "attribute");
        icu::Locale::getKeywordValue(v10, v20, v21, (uint64_t)v22, (UErrorCode *)&v23);
        if (v23 <= 0)
        {
          v11 = v27;
          if ((_DWORD)v27)
          {
            v12 = __s1[0];
            if ((int)v27 >= 1)
            {
              v13 = 0;
              do
              {
                v14 = 0;
                v15 = v12[v13];
                if (v15 != 45 && v15 != 95)
                  v14 = uprv_asciitolower((char)v15);
                v12[v13] = v14;
                v11 = v27;
                ++v13;
              }
              while ((int)v13 < (int)v27);
              v12 = __s1[0];
            }
            memset(&v24[1], 0, 48);
            v25 = 0;
            v24[0] = (char *)&v24[1] + 5;
            LODWORD(v24[1]) = 40;
            if (v11 >= 1)
            {
              v16 = 0;
              v17 = &v12[v11];
              do
              {
                while (!strcmp(v12, (const char *)v28[0]))
                {
                  v12 += strlen(v12) + 1;
                  v16 = 1;
                  if (v12 >= v17)
                    goto LABEL_33;
                }
                if ((_DWORD)v25)
                  icu::CharString::append((icu::CharString *)v24, 95, v4);
                icu::StringPiece::StringPiece((icu::StringPiece *)&v18, v12);
                icu::CharString::append((icu::CharString *)v24, v18, v19, v4);
                v12 += strlen(v12) + 1;
              }
              while (v12 < v17);
              if ((v16 & 1) == 0)
                goto LABEL_34;
LABEL_33:
              icu::Locale::setKeywordValue(*(char ***)(a1 + 40), "attribute", v24[0], v4);
LABEL_34:
              if (BYTE4(v24[1]))
                uprv_free(v24[0]);
            }
          }
        }
        icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v22);
        if (BYTE4(__s1[1]))
          uprv_free(__s1[0]);
      }
    }
    else
    {
      *v4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  if (BYTE4(v28[1]))
    uprv_free(v28[0]);
  return a1;
}

icu::LocaleBuilder *icu::LocaleBuilder::clearExtensions(icu::LocaleBuilder *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 5);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 5) = 0;
  return this;
}

char *icu::LocaleBuilder::copyExtensionsFrom(char *this, const icu::Locale *a2, UErrorCode *a3)
{
  char *v5;
  char *v6;
  icu::Locale *v8;
  char **v9;
  icu::Locale *Root;
  unint64_t v11;

  if (*(int *)a3 <= 0)
  {
    v5 = this;
    this = icu::Locale::createKeywords(a2, a3);
    v6 = this;
    if (*(int *)a3 <= 0 && this != 0)
    {
      v8 = (icu::Locale *)(*(uint64_t (**)(char *, UErrorCode *))(*(_QWORD *)this + 32))(this, a3);
      if ((_DWORD)v8)
      {
        v9 = (char **)*((_QWORD *)v5 + 5);
        if (v9
          || (Root = (icu::Locale *)icu::Locale::getRoot(v8),
              v9 = (char **)icu::Locale::clone(Root, v11),
              (*((_QWORD *)v5 + 5) = v9) != 0))
        {
          sub_18BBBDCA0((char *)a2, v6, v9, 0, a3);
        }
        else
        {
          *((_DWORD *)v5 + 2) = 7;
        }
      }
      return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v6 + 8))(v6);
    }
    if (this)
      return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

char *sub_18BBBDCA0(char *this, char *a2, char **a3, int a4, UErrorCode *a5)
{
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  char *v12;
  int v13;
  char *v14;
  int v15;
  char v16;
  char *v17;
  int v18;
  char *v19;
  char *v20;
  char *v21;
  char v22;
  UErrorCode v23;
  char *v24;
  const char *v25;
  uint64_t v26;
  _QWORD v27[2];
  char *v28[7];
  int v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 <= 0)
  {
    v8 = a2;
    v9 = (uint64_t)this;
    if (a2)
    {
      this = 0;
    }
    else
    {
      this = icu::Locale::createKeywords((icu::Locale *)this, a5);
      v10 = *(int *)a5 > 0 || this == 0;
      v8 = this;
      if (v10)
      {
LABEL_40:
        if (this)
          return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)this + 8))(this);
        return this;
      }
    }
    v24 = this;
    do
    {
      v11 = (*(uint64_t (**)(char *, _QWORD, UErrorCode *))(*(_QWORD *)v8 + 40))(v8, 0, a5);
      if (!v11)
        break;
      v12 = (char *)v11;
      v30 = 0;
      memset(&v28[1], 0, 48);
      v27[1] = 0;
      v28[0] = (char *)&v28[1] + 5;
      LODWORD(v28[1]) = 40;
      v29 = 0;
      v27[0] = 0;
      icu::CharStringByteSink::CharStringByteSink(v27, (uint64_t)v28);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v25, v12);
      icu::Locale::getKeywordValue(v9, v25, v26, (uint64_t)v27, a5);
      if (*(int *)a5 > 0)
        goto LABEL_37;
      if (!strcmp(v12, "attribute"))
      {
        v13 = v29;
        if (v29 >= 1)
        {
          v14 = v28[0];
          do
          {
            v15 = *v14;
            if (v15 == 95)
              v16 = 45;
            else
              v16 = uprv_asciitolower((char)v15);
            *v14++ = v16;
            --v13;
          }
          while (v13);
        }
      }
      if (a4)
      {
        v17 = v28[0];
        v18 = v29;
        if (v12[1])
        {
          if (!strcmp(v12, "attribute"))
          {
            if (!sub_18BC3F2E8(v17, v18))
              goto LABEL_36;
          }
          else
          {
            v19 = uloc_toUnicodeLocaleKey((uint64_t)v12);
            v20 = uloc_toUnicodeLocaleType((uint64_t)v12, v17);
            if (!v19)
              goto LABEL_36;
            v21 = v20;
            if (!v20 || !sub_18BC3F39C(v19, -1) || !sub_18BC3F2E8(v21, -1))
              goto LABEL_36;
          }
        }
        else
        {
          v22 = uprv_asciitolower(*v12);
          if (!uprv_isASCIILetter(v22) && ((int)uprv_asciitolower(*v12) < 48 || (int)uprv_asciitolower(*v12) > 57)
            || !sub_18BBBD294(*v12, v17, v18))
          {
LABEL_36:
            *a5 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_37:
            icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v27);
            if (BYTE4(v28[1]))
              uprv_free(v28[0]);
            break;
          }
        }
      }
      icu::Locale::setKeywordValue(a3, v12, v28[0], a5);
      v23 = *a5;
      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v27);
      if (BYTE4(v28[1]))
        uprv_free(v28[0]);
    }
    while (v23 < U_ILLEGAL_ARGUMENT_ERROR);
    this = v24;
    goto LABEL_40;
  }
  return this;
}

void icu::LocaleBuilder::build(icu::LocaleBuilder *this@<X0>, UErrorCode *a2@<X1>, icu::Locale *a3@<X8>)
{
  UErrorCode v6;
  icu::CharString *v7;
  icu::CharString *v8;
  icu::CharString *v9;
  icu::Locale *v10;
  char *v11;
  icu::Locale *v12;
  char *v13;
  int v14;
  char *v15;
  int v16;
  char *v17;
  int v18;
  char *v19;
  int v20;
  _OWORD v21[14];
  void *v22[7];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 >= 1)
  {
    *((_OWORD *)a3 + 12) = 0u;
    *((_OWORD *)a3 + 13) = 0u;
    *((_OWORD *)a3 + 10) = 0u;
    *((_OWORD *)a3 + 11) = 0u;
    *((_OWORD *)a3 + 8) = 0u;
    *((_OWORD *)a3 + 9) = 0u;
    *((_OWORD *)a3 + 6) = 0u;
    *((_OWORD *)a3 + 7) = 0u;
    *((_OWORD *)a3 + 4) = 0u;
    *((_OWORD *)a3 + 5) = 0u;
    *((_OWORD *)a3 + 2) = 0u;
    *((_OWORD *)a3 + 3) = 0u;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
LABEL_5:
    icu::Locale::Locale(a3);
    icu::Locale::setToBogus(a3);
    return;
  }
  v6 = *((_DWORD *)this + 2);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    *a2 = v6;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
    *((_OWORD *)a3 + 2) = 0u;
    *((_OWORD *)a3 + 3) = 0u;
    *((_OWORD *)a3 + 4) = 0u;
    *((_OWORD *)a3 + 5) = 0u;
    *((_OWORD *)a3 + 6) = 0u;
    *((_OWORD *)a3 + 7) = 0u;
    *((_OWORD *)a3 + 8) = 0u;
    *((_OWORD *)a3 + 9) = 0u;
    *((_OWORD *)a3 + 10) = 0u;
    *((_OWORD *)a3 + 11) = 0u;
    *((_OWORD *)a3 + 12) = 0u;
    *((_OWORD *)a3 + 13) = 0u;
    goto LABEL_5;
  }
  v23 = 0;
  memset(&v22[1], 0, 48);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v19, (const char *)this + 12);
  v22[0] = (char *)&v22[1] + 5;
  LODWORD(v22[1]) = 40;
  WORD2(v22[1]) = 0;
  LODWORD(v23) = 0;
  icu::CharString::append((icu::CharString *)v22, v19, v20, a2);
  if (*((_BYTE *)this + 21))
  {
    v7 = icu::CharString::append((icu::CharString *)v22, 45, a2);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v17, (const char *)this + 21);
    icu::CharString::append(v7, v17, v18, a2);
  }
  if (*((_BYTE *)this + 26))
  {
    v8 = icu::CharString::append((icu::CharString *)v22, 45, a2);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v15, (const char *)this + 26);
    icu::CharString::append(v8, v15, v16, a2);
  }
  if (*((_QWORD *)this + 4))
  {
    v9 = icu::CharString::append((icu::CharString *)v22, 45, a2);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v13, **((const char ***)this + 4));
    icu::CharString::append(v9, v13, v14, a2);
  }
  if (*(int *)a2 < 1)
  {
    memset(v21, 0, sizeof(v21));
    icu::Locale::Locale((icu::Locale *)v21, (const char *)v22[0], 0, 0, 0);
    v11 = (char *)*((_QWORD *)this + 5);
    if (v11)
      sub_18BBBDCA0(v11, 0, (char **)v21, 1, a2);
    if (*(int *)a2 < 1)
    {
      icu::Locale::Locale((uint64_t)a3, (uint64_t)v21);
    }
    else
    {
      *((_OWORD *)a3 + 12) = 0u;
      *((_OWORD *)a3 + 13) = 0u;
      *((_OWORD *)a3 + 10) = 0u;
      *((_OWORD *)a3 + 11) = 0u;
      *((_OWORD *)a3 + 8) = 0u;
      *((_OWORD *)a3 + 9) = 0u;
      *((_OWORD *)a3 + 6) = 0u;
      *((_OWORD *)a3 + 7) = 0u;
      *((_OWORD *)a3 + 4) = 0u;
      *((_OWORD *)a3 + 5) = 0u;
      *((_OWORD *)a3 + 2) = 0u;
      *((_OWORD *)a3 + 3) = 0u;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v12 = (icu::Locale *)icu::Locale::Locale(a3);
      icu::Locale::setToBogus(v12);
    }
    icu::Locale::~Locale((icu::Locale *)v21);
  }
  else
  {
    *((_OWORD *)a3 + 12) = 0uLL;
    *((_OWORD *)a3 + 13) = 0uLL;
    *((_OWORD *)a3 + 10) = 0uLL;
    *((_OWORD *)a3 + 11) = 0uLL;
    *((_OWORD *)a3 + 8) = 0uLL;
    *((_OWORD *)a3 + 9) = 0uLL;
    *((_OWORD *)a3 + 6) = 0uLL;
    *((_OWORD *)a3 + 7) = 0uLL;
    *((_OWORD *)a3 + 4) = 0uLL;
    *((_OWORD *)a3 + 5) = 0uLL;
    *((_OWORD *)a3 + 2) = 0uLL;
    *((_OWORD *)a3 + 3) = 0uLL;
    *(_OWORD *)a3 = 0uLL;
    *((_OWORD *)a3 + 1) = 0uLL;
    v10 = (icu::Locale *)icu::Locale::Locale(a3);
    icu::Locale::setToBogus(v10);
  }
  if (BYTE4(v22[1]))
    uprv_free(v22[0]);
}

BOOL icu::LocaleBuilder::copyErrorTo(icu::LocaleBuilder *this, UErrorCode *a2)
{
  UErrorCode v3;

  if (*(int *)a2 > 0)
    return 1;
  v3 = *((_DWORD *)this + 2);
  *a2 = v3;
  return v3 > U_ZERO_ERROR;
}

uint64_t icu::LocaleMatcher::Result::Result(uint64_t result, uint64_t a2)
{
  int v2;

  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  v2 = *(unsigned __int8 *)(a2 + 24);
  *(_BYTE *)(result + 24) = v2;
  if (v2)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    *(_BYTE *)(a2 + 24) = 0;
  }
  return result;
}

{
  int v2;

  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  v2 = *(unsigned __int8 *)(a2 + 24);
  *(_BYTE *)(result + 24) = v2;
  if (v2)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    *(_BYTE *)(a2 + 24) = 0;
  }
  return result;
}

void icu::LocaleMatcher::Result::~Result(icu::LocaleMatcher::Result *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 24))
  {
    v2 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;

  if (*((_BYTE *)this + 24))
  {
    v2 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
}

uint64_t *icu::LocaleMatcher::Result::operator=(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;

  if (*((_BYTE *)a1 + 24))
  {
    v4 = *a1;
    if (*a1)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 24);
  *((_BYTE *)a1 + 24) = v5;
  if (v5)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    *(_BYTE *)(a2 + 24) = 0;
  }
  return a1;
}

void icu::LocaleMatcher::Result::makeResolvedLocale(icu::LocaleMatcher::Result *this@<X0>, UErrorCode *a2@<X1>, icu::Locale *a3@<X8>)
{
  uint64_t Root;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _OWORD v13[3];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 > 0 || (Root = *((_QWORD *)this + 1)) == 0)
  {
    Root = icu::Locale::getRoot(this);
LABEL_3:
    icu::Locale::Locale(a3, Root);
    return;
  }
  v7 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_3;
  if (icu::Locale::operator==(*((_QWORD *)this + 1), *(_QWORD *)this))
  {
    Root = *((_QWORD *)this + 1);
    goto LABEL_3;
  }
  memset(v13, 0, sizeof(v13));
  icu::LocaleBuilder::LocaleBuilder(v13);
  icu::LocaleBuilder::setLocale((icu::LocaleBuilder *)v13, *((const icu::Locale **)this + 1));
  if (*(_BYTE *)(v7 + 26))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v11, (const char *)(v7 + 26));
    icu::LocaleBuilder::setRegion((uint64_t)v13, v11, v12);
  }
  v8 = (const char *)(*(_QWORD *)(v7 + 208) + *(int *)(v7 + 32));
  if (*v8)
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v9, v8);
    icu::LocaleBuilder::setVariant((uint64_t)v13, v9, v10);
  }
  icu::LocaleBuilder::copyExtensionsFrom((char *)v13, (const icu::Locale *)v7, a2);
  icu::LocaleBuilder::build((icu::LocaleBuilder *)v13, a2, a3);
  icu::LocaleBuilder::~LocaleBuilder((icu::LocaleBuilder *)v13);
}

double icu::LocaleMatcher::Builder::Builder(uint64_t a1, uint64_t a2)
{
  double result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  result = *(double *)(a2 + 36);
  *(double *)(a1 + 36) = result;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

{
  double result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  result = *(double *)(a2 + 36);
  *(double *)(a1 + 36) = result;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

void icu::LocaleMatcher::Builder::~Builder(icu::LocaleMatcher::Builder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 6);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 7);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

double icu::LocaleMatcher::Builder::operator=(icu::LocaleMatcher::Builder *a1, uint64_t a2)
{
  uint64_t v3;
  double result;

  icu::LocaleMatcher::Builder::~Builder(a1);
  *(_DWORD *)v3 = *(_DWORD *)a2;
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(v3 + 32) = *(_BYTE *)(a2 + 32);
  result = *(double *)(a2 + 36);
  *(double *)(v3 + 36) = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

uint64_t icu::LocaleMatcher::Builder::clearSupportedLocales(icu::LocaleMatcher::Builder *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return icu::UVector::removeAllElements(result);
  return result;
}

uint64_t icu::LocaleMatcher::Builder::ensureSupportedLocaleVector(icu::LocaleMatcher::Builder *this, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  if (*(int *)this > 0)
    return 0;
  if (*((_QWORD *)this + 1))
    return 1;
  v4 = icu::UMemory::operator new((icu::UMemory *)0x28, a2);
  if (v4)
  {
    v5 = icu::UVector::UVector(v4, (uint64_t)uprv_deleteUObject, 0, (int *)this);
    if (*(int *)this <= 0)
    {
      *((_QWORD *)this + 1) = v5;
      return 1;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return 0;
  }
  if (*(int *)this > 0)
    return 0;
  result = 0;
  *(_DWORD *)this = 7;
  return result;
}

uint64_t icu::LocaleMatcher::Builder::setSupportedLocalesFromListString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  void *v8;
  _OWORD v11[2];

  memset(v11, 0, sizeof(v11));
  icu::LocalePriorityList::LocalePriorityList(v11, a2, a3, a1);
  if (*(int *)a1 <= 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
      icu::UVector::removeAllElements(v5);
    if (icu::LocaleMatcher::Builder::ensureSupportedLocaleVector((icu::LocaleMatcher::Builder *)a1, v4))
    {
      v6 = DWORD2(v11[0]);
      if (SDWORD2(v11[0]) >= 1)
      {
        v7 = 0;
        do
        {
          while (1)
          {
            v8 = (void *)icu::LocalePriorityList::orphanLocaleAt((uint64_t **)v11, v7);
            if (v8)
              break;
            if (++v7 >= v6)
              goto LABEL_14;
          }
          icu::UVector::adoptElement(*(icu::UVector **)(a1 + 8), v8, (UErrorCode *)a1);
          ++v7;
        }
        while (*(int *)a1 <= 0 && v7 < v6);
      }
    }
  }
LABEL_14:
  icu::LocalePriorityList::~LocalePriorityList((icu::LocalePriorityList *)v11);
  return a1;
}

icu::LocaleMatcher::Builder *icu::LocaleMatcher::Builder::setSupportedLocales(icu::LocaleMatcher::Builder *this, icu::Locale::Iterator *a2)
{
  uint64_t v4;
  icu::Locale *v5;
  unint64_t v6;
  icu::Locale *v7;

  if (icu::LocaleMatcher::Builder::ensureSupportedLocaleVector(this, (unint64_t)a2))
  {
    v4 = *((_QWORD *)this + 1);
    if (v4)
      icu::UVector::removeAllElements(v4);
    while ((*(unsigned int (**)(icu::Locale::Iterator *))(*(_QWORD *)a2 + 16))(a2))
    {
      if (*(int *)this > 0)
        break;
      v5 = (icu::Locale *)(*(uint64_t (**)(icu::Locale::Iterator *))(*(_QWORD *)a2 + 24))(a2);
      v7 = icu::Locale::clone(v5, v6);
      if (!v7 && *(_DWORD *)this <= 0)
        *(_DWORD *)this = 7;
      icu::UVector::adoptElement(*((icu::UVector **)this + 1), v7, (UErrorCode *)this);
    }
  }
  return this;
}

icu::UVector **icu::LocaleMatcher::Builder::addSupportedLocale(icu::UVector **this, const icu::Locale *a2)
{
  unint64_t v4;
  icu::Locale *v5;

  if (icu::LocaleMatcher::Builder::ensureSupportedLocaleVector((icu::LocaleMatcher::Builder *)this, (unint64_t)a2))
  {
    v5 = icu::Locale::clone(a2, v4);
    if (!v5 && *(int *)this <= 0)
      *(_DWORD *)this = 7;
    icu::UVector::adoptElement(this[1], v5, (UErrorCode *)this);
  }
  return this;
}

icu::LocaleMatcher::Builder *icu::LocaleMatcher::Builder::setNoDefaultLocale(icu::LocaleMatcher::Builder *this)
{
  uint64_t v2;

  if (*(int *)this <= 0)
  {
    v2 = *((_QWORD *)this + 3);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 3) = 0;
    *((_BYTE *)this + 32) = 0;
  }
  return this;
}

icu::LocaleMatcher::Builder *icu::LocaleMatcher::Builder::setDefaultLocale(icu::LocaleMatcher::Builder *this, const icu::Locale *a2)
{
  icu::Locale *v3;
  uint64_t v4;

  if (*(int *)this <= 0)
  {
    if (a2)
    {
      v3 = icu::Locale::clone(a2, (unint64_t)a2);
      if (!v3)
      {
        *(_DWORD *)this = 7;
        return this;
      }
    }
    else
    {
      v3 = 0;
    }
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *((_QWORD *)this + 3) = v3;
    *((_BYTE *)this + 32) = 1;
  }
  return this;
}

int *icu::LocaleMatcher::Builder::setFavorSubtag(int *result, int a2)
{
  if (*result <= 0)
    result[9] = a2;
  return result;
}

int *icu::LocaleMatcher::Builder::setDemotionPerDesiredLocale(int *result, int a2)
{
  if (*result <= 0)
    result[5] = a2;
  return result;
}

icu::LocaleMatcher::Builder *icu::LocaleMatcher::Builder::setMaxDistance(icu::LocaleMatcher::Builder *this, const icu::Locale *a2, const icu::Locale *a3)
{
  icu::Locale *v5;
  unint64_t v6;
  icu::Locale *v7;
  icu::Locale *v8;
  uint64_t v9;
  uint64_t v10;

  if (*(int *)this <= 0)
  {
    v5 = icu::Locale::clone(a2, (unint64_t)a2);
    v7 = icu::Locale::clone(a3, v6);
    v8 = v7;
    if (v5 && v7)
    {
      v9 = *((_QWORD *)this + 6);
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v10 = *((_QWORD *)this + 7);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      *((_QWORD *)this + 6) = v5;
      *((_QWORD *)this + 7) = v8;
    }
    else
    {
      if (v5)
        (*(void (**)(icu::Locale *))(*(_QWORD *)v5 + 8))(v5);
      if (v8)
        (*(void (**)(icu::Locale *))(*(_QWORD *)v8 + 8))(v8);
      *(_DWORD *)this = 7;
    }
  }
  return this;
}

uint64_t icu::LocaleMatcher::Builder::copyErrorTo(UErrorCode *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0)
    return 1;
  if (*(int *)this >= 1)
  {
    *a2 = *this;
    return 1;
  }
  return 0;
}

icu::LocaleMatcher *icu::LocaleMatcher::Builder::build@<X0>(icu::LocaleMatcher::Builder *this@<X0>, UErrorCode *a2@<X1>, icu::LocaleMatcher *a3@<X8>)
{
  if (*(int *)a2 <= 0 && *(int *)this >= 1)
    *a2 = *(UErrorCode *)this;
  return icu::LocaleMatcher::LocaleMatcher(a3, this, a2);
}

uint64_t icu::LocaleMatcher::putIfAbsent(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, int *a5)
{
  if (*a5 <= 0 && !uhash_containsKey(a1[7], a2))
  {
    uhash_putiAllowZero(a1[7], a2, a3, a5);
    if (*a5 <= 0)
    {
      *(_QWORD *)(a1[8] + 8 * (int)a4) = a2;
      *(_DWORD *)(a1[9] + 4 * (int)a4) = a3;
      return (a4 + 1);
    }
  }
  return a4;
}

icu::LocaleMatcher *icu::LocaleMatcher::LocaleMatcher(icu::LocaleMatcher *this, const icu::LocaleMatcher::Builder *a2, UErrorCode *a3)
{
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  icu::Locale *v9;
  icu::Locale *v10;
  icu::Locale *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  icu::Locale *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _BYTE v47[24];
  uint64_t v48;
  void **v49;
  _QWORD v50[3];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54[2];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = sub_18BBCE594((int *)a3);
  *((_QWORD *)this + 1) = sub_18BBC31F0((int *)a3);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v7 = *(_QWORD *)((char *)a2 + 36);
  *((_QWORD *)this + 4) = 0;
  v8 = (_QWORD *)((char *)this + 32);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 3) = v7;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 12) = 0;
  if (*(int *)a3 > 0)
    return this;
  v9 = (icu::Locale *)*((_QWORD *)a2 + 3);
  v50[0] = "und";
  v50[1] = "";
  v52 = 0;
  v53 = 0;
  v50[2] = "";
  v51 = 0;
  if (v9)
  {
    v10 = icu::Locale::clone(v9, v6);
    *((_QWORD *)this + 11) = v10;
    if (!v10)
      goto LABEL_46;
    v11 = v10;
    sub_18BBBF1B4(*(_QWORD *)this, (uint64_t)v10, (int *)a3, (uint64_t)v54);
    sub_18BBD08C8((uint64_t)v50, (uint64_t)v54);
    if (*((_QWORD *)&v55 + 1))
      sub_18BBD08C0((uint64_t)v54);
    if (*(int *)a3 > 0)
      goto LABEL_47;
    v12 = v50;
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v13 = *((_QWORD *)a2 + 1);
  if (!v13)
  {
    *((_DWORD *)this + 12) = 0;
    goto LABEL_34;
  }
  v14 = *(unsigned int *)(v13 + 8);
  *((_DWORD *)this + 12) = v14;
  if ((int)v14 < 1)
  {
LABEL_34:
    *((_QWORD *)this + 12) = v11;
    if (*((_DWORD *)a2 + 5) == 1)
      *((_DWORD *)this + 5) = *(_DWORD *)(*((_QWORD *)this + 1) + 84);
    if ((*((_DWORD *)this + 4) & 0x80000000) != 0)
    {
      if (*((_QWORD *)a2 + 6))
      {
        v56 = 0u;
        *(_OWORD *)v54 = 0u;
        v55 = 0u;
        sub_18BBBF1B4(*(_QWORD *)this, *((_QWORD *)a2 + 7), (int *)a3, (uint64_t)v54);
        v49 = v54;
        v32 = *((_QWORD *)this + 1);
        sub_18BBBF1B4(*(_QWORD *)this, *((_QWORD *)a2 + 6), (int *)a3, (uint64_t)v47);
        v33 = sub_18BBC33B4(v32, (uint64_t)v47, (uint64_t)&v49, 1, 800, *((_DWORD *)this + 6), *((_DWORD *)this + 7));
        if (v48)
          sub_18BBD08C0((uint64_t)v47);
        if (*(int *)a3 <= 0)
          v34 = ((v33 >> 3) & 0x7F) + 1;
        else
          v34 = 0;
        *((_DWORD *)this + 4) = v34;
        if (*((_QWORD *)&v55 + 1))
          sub_18BBD08C0((uint64_t)v54);
      }
      else
      {
        *((_DWORD *)this + 4) = *(_DWORD *)(*((_QWORD *)this + 1) + 72);
      }
    }
    goto LABEL_47;
  }
  *((_QWORD *)this + 4) = uprv_malloc(8 * v14);
  v16 = *((int *)this + 12);
  v17 = !is_mul_ok(v16, 0x30uLL);
  if (48 * v16 >= 0xFFFFFFFFFFFFFFF0)
    v17 = 1;
  if (v17)
    v18 = -1;
  else
    v18 = 48 * v16 + 16;
  v19 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v18, v15);
  if (v19)
  {
    *v19 = 48;
    v19[1] = v16;
    v20 = v19 + 2;
    if ((_DWORD)v16)
    {
      v21 = v19 + 2;
      do
      {
        *v21 = "und";
        v21[1] = "";
        v21[3] = 0;
        v21[4] = 0;
        v21[2] = "";
        *((_DWORD *)v21 + 10) = 0;
        v21 += 6;
      }
      while (v21 != &v20[6 * (int)v16]);
    }
    *((_QWORD *)this + 5) = v20;
    v22 = (void *)*((_QWORD *)this + 4);
    if (v22)
    {
      bzero(v22, 8 * *((int *)this + 12));
      LODWORD(v23) = *((_DWORD *)this + 12);
      if ((int)v23 >= 1)
      {
        v24 = 0;
        v25 = 0;
        do
        {
          v26 = (icu::Locale *)icu::UVector::elementAt(*((icu::UVector **)a2 + 1), v25);
          *(_QWORD *)(*v8 + 8 * v25) = icu::Locale::clone(v26, v27);
          v28 = *(_QWORD *)(*v8 + 8 * v25);
          if (!v28)
            goto LABEL_46;
          sub_18BBBF1B4(*(_QWORD *)this, v28, (int *)a3, (uint64_t)v54);
          v29 = sub_18BBD08C8(*((_QWORD *)this + 5) + v24, (uint64_t)v54);
          if (*((_QWORD *)&v55 + 1))
            sub_18BBD08C0((uint64_t)v54);
          sub_18BBD0A2C(v29);
          if (*(int *)a3 >= 1)
            goto LABEL_47;
          ++v25;
          v23 = *((int *)this + 12);
          v24 += 48;
        }
        while (v25 < v23);
      }
      *((_QWORD *)this + 7) = uhash_openSize((uint64_t)sub_18BBBF22C, (uint64_t)sub_18BBBF234, (uint64_t)uhash_compareLong, v23, (int *)a3);
      if (*(int *)a3 > 0)
        goto LABEL_47;
      *((_QWORD *)this + 8) = uprv_malloc(8 * *((int *)this + 12));
      v30 = uprv_malloc(4 * *((int *)this + 12));
      *((_QWORD *)this + 9) = v30;
      if (*((_QWORD *)this + 8))
      {
        if (v30)
        {
          v61 = 0;
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v56 = 0u;
          *(_OWORD *)v54 = 0u;
          v55 = 0u;
          sub_18BBBF248((uint64_t)v54, *((unsigned int *)this + 12), *a3);
          if (*(int *)a3 <= 0)
          {
            if (*((int *)this + 12) < 1)
            {
              LODWORD(v38) = 0;
LABEL_78:
              *((_DWORD *)this + 20) = v38;
              v31 = 1;
LABEL_79:
              if (BYTE4(v54[1]))
                uprv_free(v54[0]);
              if (!v31)
                goto LABEL_47;
              goto LABEL_34;
            }
            v36 = 0;
            v37 = 0;
            v46 = 0;
            v38 = 0;
            while (1)
            {
              v39 = *((_QWORD *)this + 5) + v36;
              if (v12 || !*((_BYTE *)a2 + 32))
              {
                if (v12 && sub_18BBD0930(v39, (uint64_t)v12))
                {
                  *((_BYTE *)v54[0] + v37) = 1;
                  v38 = icu::LocaleMatcher::putIfAbsent((uint64_t *)this, v39, v37, v38, (int *)a3);
                }
                else if (sub_18BBC3B3C(*((_QWORD *)this + 1), v39))
                {
                  *((_BYTE *)v54[0] + v37) = 2;
                  ++v46;
                }
                else
                {
                  *((_BYTE *)v54[0] + v37) = 3;
                }
              }
              else
              {
                v11 = *(icu::Locale **)(*((_QWORD *)this + 4) + 8 * v37);
                *((_BYTE *)v54[0] + v37) = 1;
                v38 = icu::LocaleMatcher::putIfAbsent((uint64_t *)this, v39, 0, v38, (int *)a3);
                v12 = (_QWORD *)v39;
              }
              if (*(int *)a3 >= 1)
                break;
              ++v37;
              v40 = *((int *)this + 12);
              v36 += 48;
              if (v37 >= v40)
              {
                if ((int)v40 >= 1 && v46 >= 1)
                {
                  v41 = 0;
                  v42 = 0;
                  v43 = v46 + v38;
                  do
                  {
                    if (*((_BYTE *)v54[0] + v42) == 2)
                    {
                      v38 = icu::LocaleMatcher::putIfAbsent((uint64_t *)this, *((_QWORD *)this + 5) + v41, v42, v38, (int *)a3);
                      LODWORD(v40) = *((_DWORD *)this + 12);
                    }
                    if (++v42 >= (int)v40)
                      break;
                    v41 += 48;
                  }
                  while ((int)v38 < v43);
                }
                if ((int)v40 >= 1)
                {
                  v44 = 0;
                  v45 = 0;
                  do
                  {
                    if (*((_BYTE *)v54[0] + v45) == 3)
                    {
                      v38 = icu::LocaleMatcher::putIfAbsent((uint64_t *)this, *((_QWORD *)this + 5) + v44, v45, v38, (int *)a3);
                      LODWORD(v40) = *((_DWORD *)this + 12);
                    }
                    ++v45;
                    v44 += 48;
                  }
                  while (v45 < (int)v40);
                }
                goto LABEL_78;
              }
            }
          }
          v31 = 0;
          goto LABEL_79;
        }
      }
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
LABEL_46:
  *a3 = U_MEMORY_ALLOCATION_ERROR;
LABEL_47:
  if (v51)
    sub_18BBD08C0((uint64_t)v50);
  return this;
}

double sub_18BBBF1B4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v5;
  double result;

  v5 = *a3 <= 0 && *(_BYTE *)(a2 + 216) == 0;
  if (v5 && **(_BYTE **)(a2 + 40))
  {
    sub_18BBCE828(a1, a2, (uint64_t)a3, a4);
  }
  else
  {
    *(_QWORD *)a4 = "und";
    *(_QWORD *)(a4 + 8) = "";
    *(_QWORD *)(a4 + 16) = "";
    *(_QWORD *)(a4 + 24) = 0;
    *(_DWORD *)(a4 + 32) = sub_18BBD0828("");
    *(_QWORD *)&result = 7;
    *(_QWORD *)(a4 + 36) = 7;
  }
  return result;
}

uint64_t sub_18BBBF22C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

BOOL sub_18BBBF234(uint64_t a1, uint64_t a2)
{
  return sub_18BBD09AC(a1, a2);
}

uint64_t sub_18BBBF248(uint64_t a1, size_t size, int a3)
{
  int v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = a1 + 13;
  *(_DWORD *)(a1 + 8) = 100;
  *(_BYTE *)(a1 + 12) = 0;
  if ((int)size >= 101 && a3 <= 0)
  {
    v4 = size;
    v5 = uprv_malloc(size);
    if (v5)
    {
      v6 = v5;
      if (*(_BYTE *)(a1 + 12))
        uprv_free(*(void **)a1);
      *(_QWORD *)a1 = v6;
      *(_DWORD *)(a1 + 8) = v4;
      *(_BYTE *)(a1 + 12) = 1;
    }
  }
  return a1;
}

__n128 icu::LocaleMatcher::LocaleMatcher(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  result = *(__n128 *)(a2 + 88);
  *(__n128 *)(a1 + 88) = result;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  return result;
}

void icu::LocaleMatcher::~LocaleMatcher(icu::LocaleMatcher *this)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_DWORD *)this + 12);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 12);
      }
    }
  }
  uprv_free(*((void **)this + 4));
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 - 8);
    if (v6)
    {
      v7 = 48 * v6;
      do
      {
        if (*(_QWORD *)(v5 + v7 - 24))
          sub_18BBD08C0(v5 + v7 - 48);
        v7 -= 48;
      }
      while (v7);
    }
    icu::UMemory::operator delete[]((void *)(v5 - 16));
  }
  uhash_close(*((void ***)this + 7));
  uprv_free(*((void **)this + 8));
  uprv_free(*((void **)this + 9));
  v8 = *((_QWORD *)this + 11);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

__n128 icu::LocaleMatcher::operator=(icu::LocaleMatcher *a1, uint64_t a2)
{
  uint64_t v3;
  __n128 result;

  icu::LocaleMatcher::~LocaleMatcher(a1);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(v3 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(v3 + 80) = *(_DWORD *)(a2 + 80);
  result = *(__n128 *)(a2 + 88);
  *(__n128 *)(v3 + 88) = result;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  return result;
}

uint64_t icu::LocaleMatcher::getBestMatch(icu::LocaleMatcher *this, const icu::Locale *a2, UErrorCode *a3)
{
  unsigned int BestSuppIndex;
  char *v7;
  _QWORD v8[6];

  if (*(int *)a3 > 0)
    return 0;
  sub_18BBBF1B4(*(_QWORD *)this, (uint64_t)a2, (int *)a3, (uint64_t)v8);
  BestSuppIndex = icu::LocaleMatcher::getBestSuppIndex((uint64_t)this, (uint64_t)v8, 0, (int *)a3);
  if (v8[3])
    sub_18BBD08C0((uint64_t)v8);
  if (*(int *)a3 > 0 || (BestSuppIndex & 0x80000000) != 0)
    v7 = (char *)this + 96;
  else
    v7 = (char *)(*((_QWORD *)this + 4) + 8 * BestSuppIndex);
  return *(_QWORD *)v7;
}

uint64_t icu::LocaleMatcher::getBestSuppIndex(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17[24];
  uint64_t v18;

  if (*a4 > 0)
    return 0xFFFFFFFFLL;
  v10 = 0;
  v11 = (8 * *(_DWORD *)(a1 + 16));
  v12 = -1;
  while (1)
  {
    if (*(_QWORD *)(a1 + 56))
    {
      sub_18BBD0A2C(a2);
      v17[0] = 0;
      v13 = uhash_getiAndFound(*(_QWORD *)(a1 + 56), a2, v17);
      if (v17[0])
      {
        v4 = v13;
        if (a3)
          sub_18BBBFA5C((icu::Locale *)a3, v10, a4);
        return v4;
      }
    }
    v14 = sub_18BBC33B4(*(_QWORD *)(a1 + 8), a2, *(_QWORD *)(a1 + 64), *(_DWORD *)(a1 + 80), v11, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28));
    if ((v14 & 0x80000000) == 0)
    {
      v15 = v14;
      if (a3)
      {
        sub_18BBBFA5C((icu::Locale *)a3, v10, a4);
        if (*a4 > 0)
          return 0xFFFFFFFFLL;
      }
      LODWORD(v11) = v15 & 0x3FF;
      v12 = v15 >> 10;
    }
    if (!a3)
      break;
    v11 = (v11 - 8 * *(_DWORD *)(a1 + 20));
    if ((int)v11 < 1 || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a3 + 8) + 16))(*(_QWORD *)(a3 + 8)))
      break;
    v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 8) + 24))(*(_QWORD *)(a3 + 8));
    *(_QWORD *)(a3 + 24) = v16;
    sub_18BBBF1B4(*(_QWORD *)a3, v16, a4, (uint64_t)v17);
    sub_18BBD08C8(a2, (uint64_t)v17);
    if (v18)
      sub_18BBD08C0((uint64_t)v17);
    if (*a4 > 0)
      return 0xFFFFFFFFLL;
    v10 = (v10 + 1);
  }
  if ((v12 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  return *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * v12);
}

uint64_t icu::LocaleMatcher::getBestMatch(icu::LocaleMatcher *this, icu::Locale::Iterator *a2, UErrorCode *a3)
{
  uint64_t v3;
  unsigned int BestSuppIndex;
  uint64_t *v9;
  _QWORD v10[6];
  uint64_t v11[2];
  __int128 v12;
  __int128 v13;

  if (*(int *)a3 > 0)
    return 0;
  if (!(*(unsigned int (**)(icu::Locale::Iterator *))(*(_QWORD *)a2 + 16))(a2))
    return *((_QWORD *)this + 12);
  v12 = 0u;
  v13 = 0u;
  v11[0] = *(_QWORD *)this;
  v11[1] = (uint64_t)a2;
  *(_QWORD *)&v13 = 0;
  DWORD2(v13) = -1;
  *((_QWORD *)&v12 + 1) = (*(uint64_t (**)(icu::Locale::Iterator *))(*(_QWORD *)a2 + 24))(a2);
  sub_18BBBF1B4(v11[0], *((uint64_t *)&v12 + 1), (int *)a3, (uint64_t)v10);
  BestSuppIndex = icu::LocaleMatcher::getBestSuppIndex((uint64_t)this, (uint64_t)v10, (uint64_t)v11, (int *)a3);
  if (v10[3])
    sub_18BBD08C0((uint64_t)v10);
  if (*(int *)a3 > 0 || (BestSuppIndex & 0x80000000) != 0)
    v9 = (uint64_t *)((char *)this + 96);
  else
    v9 = (uint64_t *)(*((_QWORD *)this + 4) + 8 * BestSuppIndex);
  v3 = *v9;
  if (!(_DWORD)v12 && (_QWORD)v13)
    (*(void (**)(_QWORD))(*(_QWORD *)v13 + 8))(v13);
  return v3;
}

uint64_t icu::LocaleMatcher::getBestMatchForListString(icu::LocaleMatcher *a1, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t BestMatch;
  _QWORD v8[4];
  _OWORD v9[2];

  memset(v9, 0, sizeof(v9));
  icu::LocalePriorityList::LocalePriorityList(v9, a2, a3, a4);
  v8[0] = &unk_1E2247010;
  v8[1] = v9;
  v8[2] = 0;
  v8[3] = (DWORD2(v9[0]) - HIDWORD(v9[0]));
  BestMatch = icu::LocaleMatcher::getBestMatch(a1, (icu::Locale::Iterator *)v8, a4);
  icu::Locale::Iterator::~Iterator((icu::Locale::Iterator *)v8);
  icu::LocalePriorityList::~LocalePriorityList((icu::LocalePriorityList *)v9);
  return BestMatch;
}

void icu::LocaleMatcher::getBestMatchResult(icu::LocaleMatcher *this@<X0>, const icu::Locale *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  const icu::Locale *v6;
  uint64_t *v7;
  int v8;
  unsigned int BestSuppIndex;
  uint64_t v11;
  _QWORD v12[6];

  if (*(int *)a3 >= 1)
    goto LABEL_2;
  v6 = a2;
  sub_18BBBF1B4(*(_QWORD *)this, (uint64_t)a2, (int *)a3, (uint64_t)v12);
  BestSuppIndex = icu::LocaleMatcher::getBestSuppIndex((uint64_t)this, (uint64_t)v12, 0, (int *)a3);
  if (v12[3])
    sub_18BBD08C0((uint64_t)v12);
  if (*(int *)a3 > 0 || (BestSuppIndex & 0x80000000) != 0)
  {
LABEL_2:
    v6 = 0;
    v7 = (uint64_t *)((char *)this + 96);
    v8 = -1;
    BestSuppIndex = -1;
  }
  else
  {
    v8 = 0;
    v7 = (uint64_t *)(*((_QWORD *)this + 4) + 8 * BestSuppIndex);
  }
  v11 = *v7;
  *(_QWORD *)a4 = v6;
  *(_QWORD *)(a4 + 8) = v11;
  *(_DWORD *)(a4 + 16) = v8;
  *(_DWORD *)(a4 + 20) = BestSuppIndex;
  *(_BYTE *)(a4 + 24) = 0;
}

void icu::LocaleMatcher::getBestMatchResult(icu::LocaleMatcher *this@<X0>, icu::Locale::Iterator *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  unsigned int BestSuppIndex;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  int v13;
  uint64_t v14;
  _QWORD v15[6];
  uint64_t v16[2];
  __int128 v17;
  __int128 v18;

  if (*(int *)a3 <= 0 && (*(unsigned int (**)(icu::Locale::Iterator *))(*(_QWORD *)a2 + 16))(a2))
  {
    v17 = 0u;
    v18 = 0u;
    v16[0] = *(_QWORD *)this;
    v16[1] = (uint64_t)a2;
    *(_QWORD *)&v18 = 0;
    DWORD2(v18) = -1;
    *((_QWORD *)&v17 + 1) = (*(uint64_t (**)(icu::Locale::Iterator *))(*(_QWORD *)a2 + 24))(a2);
    sub_18BBBF1B4(v16[0], *((uint64_t *)&v17 + 1), (int *)a3, (uint64_t)v15);
    BestSuppIndex = icu::LocaleMatcher::getBestSuppIndex((uint64_t)this, (uint64_t)v15, (uint64_t)v16, (int *)a3);
    if (v15[3])
      sub_18BBD08C0((uint64_t)v15);
    if (*(int *)a3 > 0 || (BestSuppIndex & 0x80000000) != 0)
    {
      v10 = 0;
      v12 = 0;
      v11 = (uint64_t *)((char *)this + 96);
      v13 = -1;
      BestSuppIndex = -1;
    }
    else
    {
      v10 = v18;
      *(_QWORD *)&v18 = 0;
      v11 = (uint64_t *)(*((_QWORD *)this + 4) + 8 * BestSuppIndex);
      v12 = 1;
      v13 = DWORD2(v18);
    }
    v14 = *v11;
    *(_QWORD *)a4 = v10;
    *(_QWORD *)(a4 + 8) = v14;
    *(_DWORD *)(a4 + 16) = v13;
    *(_DWORD *)(a4 + 20) = BestSuppIndex;
    *(_BYTE *)(a4 + 24) = v12;
    if (!(_DWORD)v17)
    {
      if ((_QWORD)v18)
        (*(void (**)(_QWORD))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  else
  {
    v6 = *((_QWORD *)this + 12);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = v6;
    *(_QWORD *)(a4 + 16) = -1;
    *(_BYTE *)(a4 + 24) = 0;
  }
}

icu::Locale *sub_18BBBFA5C(icu::Locale *result, unint64_t a2, int *a3)
{
  icu::Locale *v3;
  uint64_t v5;

  if (*a3 <= 0)
  {
    v3 = result;
    *((_DWORD *)result + 10) = a2;
    if (*((_DWORD *)result + 4) == 1)
    {
      *((_QWORD *)result + 4) = *((_QWORD *)result + 3);
    }
    else
    {
      v5 = *((_QWORD *)result + 4);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      result = (icu::Locale *)icu::UMemory::operator new((icu::UMemory *)0xE0, a2);
      if (result)
      {
        result = icu::Locale::Locale(result, *((_QWORD *)v3 + 3));
        *((_QWORD *)v3 + 4) = result;
      }
      else
      {
        *((_QWORD *)v3 + 4) = 0;
        *a3 = 7;
      }
    }
  }
  return result;
}

BOOL icu::LocaleMatcher::isMatch(icu::LocaleMatcher *this, const icu::Locale *a2, const icu::Locale *a3, UErrorCode *a4)
{
  _BOOL8 v7;
  uint64_t v8;
  int v9;
  _BYTE v11[24];
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v15 = 0u;
  v16 = 0u;
  v14 = 0u;
  sub_18BBBF1B4(*(_QWORD *)this, (uint64_t)a3, (int *)a4, (uint64_t)&v14);
  if (*(int *)a4 <= 0)
  {
    v13 = &v14;
    v8 = *((_QWORD *)this + 1);
    sub_18BBBF1B4(*(_QWORD *)this, (uint64_t)a2, (int *)a4, (uint64_t)v11);
    v9 = sub_18BBC33B4(v8, (uint64_t)v11, (uint64_t)&v13, 1, (8 * *((_DWORD *)this + 4)), *((_DWORD *)this + 6), *((_DWORD *)this + 7));
    if (v12)
      sub_18BBD08C0((uint64_t)v11);
    v7 = v9 >= 0;
  }
  else
  {
    v7 = 0;
  }
  if (*((_QWORD *)&v15 + 1))
    sub_18BBD08C0((uint64_t)&v14);
  return v7;
}

double icu::LocaleMatcher::internalMatch(icu::LocaleMatcher *this, const icu::Locale *a2, const icu::Locale *a3, UErrorCode *a4)
{
  double v7;
  uint64_t v8;
  __int16 v9;
  _BYTE v11[24];
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v15 = 0u;
  v16 = 0u;
  v14 = 0u;
  sub_18BBBF1B4(*(_QWORD *)this, (uint64_t)a3, (int *)a4, (uint64_t)&v14);
  v7 = 0.0;
  if (*(int *)a4 <= 0)
  {
    v13 = &v14;
    v8 = *((_QWORD *)this + 1);
    sub_18BBBF1B4(*(_QWORD *)this, (uint64_t)a2, (int *)a4, (uint64_t)v11);
    v9 = sub_18BBC33B4(v8, (uint64_t)v11, (uint64_t)&v13, 1, (8 * *((_DWORD *)this + 4)), *((_DWORD *)this + 6), *((_DWORD *)this + 7));
    if (v12)
      sub_18BBD08C0((uint64_t)v11);
    v7 = ((double)(v9 & 0x3FF) * -0.125 + 100.0) / 100.0;
  }
  if (*((_QWORD *)&v15 + 1))
    sub_18BBD08C0((uint64_t)&v14);
  return v7;
}

uint64_t uloc_acceptLanguage(icu::Locale *a1, int a2, int *a3, uint64_t a4, unsigned int a5, uint64_t a6, int *a7)
{
  uint64_t v7;
  uint64_t Root;
  _BYTE v17[224];
  _QWORD v18[3];
  _BYTE v19[224];
  _BYTE v20[232];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*a7 <= 0)
  {
    if (a1)
    {
      if (a2 < 0)
        goto LABEL_13;
    }
    else if (a2)
    {
      goto LABEL_13;
    }
    if (a4)
    {
      if ((a5 & 0x80000000) != 0)
        goto LABEL_13;
    }
    else if (a5)
    {
      goto LABEL_13;
    }
    if (a6)
    {
      memset(v20, 0, 224);
      Root = icu::Locale::getRoot(a1);
      icu::Locale::Locale((icu::Locale *)v20, Root);
      memset(v19, 0, sizeof(v19));
      icu::Locale::Locale((icu::Locale *)v17, (uint64_t)v20);
      v18[0] = off_1E2247058;
      v18[1] = a4;
      v18[2] = a4 + 8 * a5;
      icu::Locale::Locale((icu::Locale *)v19, (uint64_t)v17);
      icu::Locale::~Locale((icu::Locale *)v17);
      v7 = sub_18BBBFE64(a6, (icu::Locale::Iterator *)v18, a1, a2, a3, a7);
      v18[0] = off_1E2247058;
      icu::Locale::~Locale((icu::Locale *)v19);
      icu::Locale::Iterator::~Iterator((icu::Locale::Iterator *)v18);
      icu::Locale::~Locale((icu::Locale *)v20);
      return v7;
    }
LABEL_13:
    v7 = 0;
    *a7 = 1;
    return v7;
  }
  return 0;
}

uint64_t sub_18BBBFE64(uint64_t a1, icu::Locale::Iterator *a2, void *a3, int a4, int *a5, int *a6)
{
  uint64_t v6;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  __int128 v21;
  __int128 v22;
  _OWORD v23[2];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (*a6 > 0)
    return 0;
  v24 = 0u;
  v23[0] = 0u;
  v23[1] = 0x1FFFFFFFFuLL;
  LOBYTE(v24) = 1;
  DWORD2(v24) = 0;
  v25 = 0;
  v26 = 0;
  v13 = uenum_next(a1, 0, a6);
  if (v13)
  {
    v14 = (const char *)v13;
    while (1)
    {
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      icu::Locale::Locale((icu::Locale *)&v27, v14, 0, 0, 0);
      if (BYTE8(v40))
        break;
      icu::LocaleMatcher::Builder::addSupportedLocale((icu::UVector **)v23, (const icu::Locale *)&v27);
      icu::Locale::~Locale((icu::Locale *)&v27);
      v14 = (const char *)uenum_next(a1, 0, a6);
      if (!v14)
        goto LABEL_7;
    }
    *a6 = 1;
    icu::Locale::~Locale((icu::Locale *)&v27);
    v6 = 0;
  }
  else
  {
LABEL_7:
    *(_QWORD *)&v33 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    if (*a6 <= 0 && SLODWORD(v23[0]) >= 1)
      *a6 = v23[0];
    icu::LocaleMatcher::LocaleMatcher((icu::LocaleMatcher *)&v27, (const icu::LocaleMatcher::Builder *)v23, (UErrorCode *)a6);
    v21 = 0u;
    v22 = 0u;
    icu::LocaleMatcher::getBestMatchResult((icu::LocaleMatcher *)&v27, a2, (UErrorCode *)a6, (uint64_t)&v21);
    if (*a6 <= 0)
    {
      if ((v22 & 0x80000000) != 0)
      {
        v17 = 0;
        if (a5)
          *a5 = 0;
      }
      else
      {
        if (a5)
        {
          v15 = *((_QWORD *)&v21 + 1);
          if (icu::Locale::operator==(v21, *((uint64_t *)&v21 + 1)))
            v16 = 1;
          else
            v16 = 2;
          *a5 = v16;
        }
        else
        {
          v15 = *((_QWORD *)&v21 + 1);
        }
        v18 = *(const char **)(v15 + 40);
        v19 = strlen(v18);
        v17 = v19;
        if ((int)v19 <= a4)
          memcpy(a3, v18, (int)v19);
      }
      v6 = u_terminateChars((uint64_t)a3, a4, v17, a6);
    }
    else
    {
      v6 = 0;
    }
    if (BYTE8(v22) && (_QWORD)v21)
      (*(void (**)(_QWORD))(*(_QWORD *)v21 + 8))(v21);
    icu::LocaleMatcher::~LocaleMatcher((icu::LocaleMatcher *)&v27);
  }
  icu::LocaleMatcher::Builder::~Builder((icu::LocaleMatcher::Builder *)v23);
  return v6;
}

void sub_18BBC00D0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2247058;
  icu::Locale::~Locale((icu::Locale *)(a1 + 24));
  icu::Locale::Iterator::~Iterator((icu::Locale::Iterator *)a1);
}

uint64_t uloc_acceptLanguageFromHTTP(void *a1, int a2, int *a3, char *__s, uint64_t a5, int *a6)
{
  uint64_t v6;
  _QWORD v13[4];
  _QWORD v14[2];
  _OWORD v15[2];

  if (*a6 <= 0)
  {
    if (a1)
    {
      if (a2 < 0)
        goto LABEL_10;
    }
    else if (a2)
    {
      goto LABEL_10;
    }
    if (__s && a5)
    {
      memset(v15, 0, sizeof(v15));
      icu::StringPiece::StringPiece((icu::StringPiece *)v14, __s);
      icu::LocalePriorityList::LocalePriorityList(v15, v14[0], v14[1], a6);
      v13[0] = &unk_1E2247010;
      v13[1] = v15;
      v13[2] = 0;
      v13[3] = (DWORD2(v15[0]) - HIDWORD(v15[0]));
      v6 = sub_18BBBFE64(a5, (icu::Locale::Iterator *)v13, a1, a2, a3, a6);
      icu::Locale::Iterator::~Iterator((icu::Locale::Iterator *)v13);
      icu::LocalePriorityList::~LocalePriorityList((icu::LocalePriorityList *)v15);
      return v6;
    }
LABEL_10:
    v6 = 0;
    *a6 = 1;
    return v6;
  }
  return 0;
}

void sub_18BBC0200(icu::Locale::Iterator *a1)
{
  icu::Locale::Iterator::~Iterator(a1);
  JUMPOUT(0x18D77FE8CLL);
}

BOOL sub_18BBC0224(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) < *(_DWORD *)(a1 + 24);
}

uint64_t sub_18BBC0234(uint64_t a1)
{
  icu::LocalePriorityList *v2;
  int v3;
  uint64_t result;

  do
  {
    v2 = *(icu::LocalePriorityList **)(a1 + 8);
    v3 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v3 + 1;
    result = icu::LocalePriorityList::localeAt(v2, v3);
  }
  while (!result);
  ++*(_DWORD *)(a1 + 20);
  return result;
}

void sub_18BBC0274(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2247058;
  icu::Locale::~Locale((icu::Locale *)(a1 + 24));
  icu::Locale::Iterator::~Iterator((icu::Locale::Iterator *)a1);
  icu::UMemory::operator delete(v2);
}

BOOL sub_18BBC02A8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) != *(_QWORD *)(a1 + 16);
}

uint64_t sub_18BBC02B8(uint64_t a1)
{
  uint64_t v1;
  const char **v2;
  uint64_t v3;
  _BYTE v5[224];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = a1 + 24;
  v2 = *(const char ***)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v2 + 1;
  icu::Locale::Locale((icu::Locale *)v5, *v2, 0, 0, 0);
  v3 = icu::Locale::operator=(v1, (uint64_t)v5);
  icu::Locale::~Locale((icu::Locale *)v5);
  return v3;
}

uint64_t icu::LocalePriorityList::LocalePriorityList(uint64_t a1, unint64_t a2, int a3, UErrorCode *a4)
{
  const char *v7;
  uint64_t v8;
  __int128 v9;
  unsigned __int8 *v10;
  int64_t v11;
  const char *v12;
  int64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  int v18;
  int v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  int64_t v23;
  unsigned __int8 *v24;
  int64_t v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  char *v31;
  _OWORD v32[13];
  __int128 v33;
  char *v34;
  _OWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(int *)a4 > 0)
    return a1;
  v7 = (const char *)a2;
  v8 = icu::UMemory::operator new((icu::UMemory *)0x150, a2);
  if (!v8)
  {
    *(_QWORD *)a1 = 0;
    v29 = 7;
    goto LABEL_70;
  }
  *(_QWORD *)(v8 + 328) = 0;
  v9 = 0uLL;
  *(_OWORD *)(v8 + 248) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 264) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_QWORD *)v8 = v8 + 16;
  v10 = (unsigned __int8 *)&v7[a3];
  *(_DWORD *)(v8 + 8) = 20;
  *(_QWORD *)a1 = v8;
LABEL_4:
  v31 = (char *)v7;
  while (1)
  {
    if (v7 < (const char *)v10)
    {
      v11 = v10 - (unsigned __int8 *)v7;
      while (*v7 == 32)
      {
        ++v7;
        if (!--v11)
        {
          v7 = (const char *)v10;
          break;
        }
      }
    }
    v31 = (char *)v7;
    if (v7 == (const char *)v10)
      goto LABEL_68;
    if (*v7 == 44)
    {
      ++v7;
      goto LABEL_4;
    }
    LODWORD(v12) = (_DWORD)v7;
    if (v7 < (const char *)v10)
    {
      v13 = v10 - (unsigned __int8 *)v7;
      v12 = v7;
      while (1)
      {
        v14 = *(unsigned __int8 *)v12;
        v15 = v14 > 0x3B;
        v16 = (1 << v14) & 0x800100100000000;
        if (!v15 && v16 != 0)
          break;
        ++v12;
        if (!--v13)
        {
          LODWORD(v12) = (_DWORD)v10;
          break;
        }
      }
    }
    v18 = (_DWORD)v12 - (_DWORD)v7;
    if ((_DWORD)v12 == (_DWORD)v7)
      break;
    v36 = 0;
    v35[1] = v9;
    v35[2] = v9;
    v35[0] = v9;
    v34 = (char *)v35 + 5;
    LODWORD(v35[0]) = 40;
    icu::CharString::append((icu::CharString *)&v34, v7, v18, a4);
    if (*(int *)a4 > 0)
    {
      v19 = 1;
      goto LABEL_27;
    }
    v33 = 0u;
    memset(v32, 0, sizeof(v32));
    icu::Locale::Locale((icu::Locale *)v32, v34, 0, 0, 0);
    if (BYTE8(v33))
      goto LABEL_25;
    v20 = (unsigned __int8 *)&v31[v18];
    if (v20 < v10)
    {
      v21 = v10 - (unsigned __int8 *)v31 - v18;
      while (*v20 == 32)
      {
        ++v20;
        if (!--v21)
        {
          v20 = v10;
          break;
        }
      }
    }
    v31 = (char *)v20;
    if (v20 == v10)
    {
      v27 = 1000;
LABEL_64:
      icu::LocalePriorityList::add((icu::LocalePriorityList *)a1, (const icu::Locale *)v32, v27, a4);
      v19 = 3;
      goto LABEL_26;
    }
    if (*v20 == 59)
    {
      v22 = v20 + 1;
      if (v20 + 1 < v10)
      {
        v23 = v10 - v22;
        while (*v22 == 32)
        {
          ++v22;
          if (!--v23)
          {
            v22 = v10;
            break;
          }
        }
      }
      v31 = (char *)v22;
      if (v22 == v10 || *v22 != 113)
        goto LABEL_25;
      v24 = v22 + 1;
      if (v24 < v10)
      {
        v25 = v10 - v24;
        while (*v24 == 32)
        {
          ++v24;
          if (!--v25)
          {
            v24 = v10;
            break;
          }
        }
      }
      v31 = (char *)v24;
      if (v24 == v10)
        goto LABEL_25;
      if (*v24 != 61)
        goto LABEL_25;
      v31 = (char *)(v24 + 1);
      v26 = sub_18BBC0764((unint64_t *)&v31, v10);
      if (v26 < 0)
        goto LABEL_25;
      v27 = v26;
      v20 = (unsigned __int8 *)v31;
      if (v31 < (char *)v10)
      {
        v28 = (unsigned __int8 *)(v10 - (unsigned __int8 *)v31);
        while (*v20 == 32)
        {
          ++v20;
          if (!--v28)
          {
            v20 = v10;
            break;
          }
        }
      }
      v31 = (char *)v20;
    }
    else
    {
      v27 = 1000;
    }
    if (v20 == v10)
      goto LABEL_64;
    if (*v20 == 44)
    {
      icu::LocalePriorityList::add((icu::LocalePriorityList *)a1, (const icu::Locale *)v32, v27, a4);
      v19 = 0;
      v31 = (char *)(v20 + 1);
      goto LABEL_26;
    }
LABEL_25:
    v19 = 1;
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_26:
    icu::Locale::~Locale((icu::Locale *)v32);
LABEL_27:
    if (BYTE4(v35[0]))
      uprv_free(v34);
    if (v19)
    {
      if (v19 != 3)
        return a1;
LABEL_68:
      icu::LocalePriorityList::sort((uint64_t **)a1, a4);
      return a1;
    }
    v7 = v31;
    v9 = 0uLL;
  }
  v29 = 1;
LABEL_70:
  *a4 = v29;
  return a1;
}

uint64_t sub_18BBC0764(unint64_t *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  int64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;

  v2 = (unsigned __int8 *)*a1;
  if (*a1 < (unint64_t)a2)
  {
    v3 = a2 - v2;
    while (*v2 == 32)
    {
      ++v2;
      if (!--v3)
      {
        v2 = a2;
        break;
      }
    }
  }
  *a1 = (unint64_t)v2;
  if (v2 == a2)
    return 0xFFFFFFFFLL;
  v4 = *v2;
  if ((v4 - 50) < 0xFFFFFFFE)
    return 0xFFFFFFFFLL;
  v5 = (1000 * v4 - 48000);
  *a1 = (unint64_t)(v2 + 1);
  if (v2 + 1 != a2 && v2[1] == 46)
  {
    v7 = v2 + 2;
    *a1 = (unint64_t)v7;
    if (v7 != a2)
    {
      v8 = 100;
      do
      {
        if (*v7 - 48 > 9)
          break;
        v9 = (*v7 - 48);
        v10 = v9 <= 4 ? v5 : (int)v5 + 1;
        if (v8)
        {
          v10 = v5;
          v11 = v8;
        }
        else
        {
          v11 = -1;
        }
        LODWORD(v5) = v5 + v8 * v9;
        if (v8 >= 1)
        {
          v8 /= 0xAu;
        }
        else
        {
          LODWORD(v5) = v10;
          v8 = v11;
        }
        *a1 = (unint64_t)++v7;
      }
      while (v7 != a2);
    }
    if ((int)v5 >= 1001)
      return 0xFFFFFFFFLL;
    else
      return v5;
  }
  return v5;
}

uint64_t icu::LocalePriorityList::add(icu::LocalePriorityList *this, const icu::Locale *a2, int a3, UErrorCode *a4)
{
  uint64_t v4;
  int32x2_t *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  signed int v15;
  uint64_t v16;
  int v17;
  void *v18;
  void *v19;
  signed int v20;
  uint64_t v21;
  uint64_t v22;
  icu::Locale *v23;
  BOOL v24;

  if (*(int *)a4 > 0)
    return 0;
  v10 = (int32x2_t *)*((_QWORD *)this + 3);
  if (v10)
    goto LABEL_5;
  if (a3 < 1)
    return 1;
  v10 = uhash_open((uint64_t)icu::Locale::hashCode, (uint64_t)sub_18BBC0BC8, (uint64_t)uhash_compareLong, (int *)a4);
  *((_QWORD *)this + 3) = v10;
  if (*(int *)a4 <= 0)
  {
LABEL_5:
    v24 = 0;
    v11 = uhash_getiAndFound((uint64_t)v10, (uint64_t)a2, &v24);
    if (v24)
    {
      v13 = **(_QWORD **)this + 16 * v11;
      v14 = *(_QWORD *)v13;
      *(_QWORD *)v13 = 0;
      *(_DWORD *)(v13 + 8) = 0;
      ++*((_DWORD *)this + 3);
      if (a3 <= 0)
      {
        uhash_removei(*((_QWORD *)this + 3), (uint64_t)a2);
        v4 = 1;
        goto LABEL_36;
      }
      if (v14)
        goto LABEL_8;
LABEL_30:
      v23 = icu::Locale::clone(a2, v12);
      v14 = (uint64_t)v23;
      if (v23 && (!*((_BYTE *)v23 + 216) || *((_BYTE *)a2 + 216)))
      {
LABEL_8:
        v15 = *((_DWORD *)this + 2);
        v16 = *(_QWORD *)this;
        if (v15 == *(_DWORD *)(*(_QWORD *)this + 8))
        {
          if (v15 >= 50)
            v17 = 4 * v15;
          else
            v17 = 100;
          if (v17 < 1 || (v18 = uprv_malloc(16 * v17)) == 0)
          {
            *a4 = U_MEMORY_ALLOCATION_ERROR;
LABEL_39:
            v4 = 0;
LABEL_40:
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
            return v4;
          }
          v19 = v18;
          if (v15 >= 1)
          {
            v20 = *(_DWORD *)(v16 + 8);
            if (v20 >= v15)
              v20 = v15;
            if (v20 >= v17)
              v20 = v17;
            memcpy(v18, *(const void **)v16, 16 * v20);
          }
          if (*(_BYTE *)(v16 + 12))
            uprv_free(*(void **)v16);
          *(_QWORD *)v16 = v19;
          *(_DWORD *)(v16 + 8) = v17;
          *(_BYTE *)(v16 + 12) = 1;
          v15 = *((_DWORD *)this + 2);
        }
        uhash_putiAllowZero(*((_QWORD *)this + 3), v14, v15, (int *)a4);
        if (*(int *)a4 <= 0)
        {
          v21 = *((int *)this + 2);
          v22 = **(_QWORD **)this + 16 * v21;
          *(_QWORD *)v22 = v14;
          *((_DWORD *)this + 2) = v21 + 1;
          *(_DWORD *)(v22 + 8) = a3;
          *(_DWORD *)(v22 + 12) = v21;
          if (a3 <= 0x3E7)
            *((_BYTE *)this + 16) = 1;
          return 1;
        }
        goto LABEL_39;
      }
      v4 = 0;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
LABEL_36:
      if (!v14)
        return v4;
      goto LABEL_40;
    }
    if (a3 > 0)
      goto LABEL_30;
    return 1;
  }
  return 0;
}

void icu::LocalePriorityList::sort(uint64_t **this, UErrorCode *a2)
{
  uint64_t v3;

  if (*(int *)a2 <= 0)
  {
    v3 = *((unsigned int *)this + 2);
    if ((int)v3 - *((_DWORD *)this + 3) >= 2)
    {
      if (*((_BYTE *)this + 16))
        uprv_sortArray(**this, v3, 16, sub_18BBC0BDC, 0, 0, (int *)a2);
    }
  }
}

void icu::LocalePriorityList::~LocalePriorityList(icu::LocalePriorityList *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = *((_DWORD *)this + 2);
    if (v3 < 1)
      goto LABEL_14;
    v4 = 0;
    for (i = 0; i < v3; ++i)
    {
      v6 = *(_QWORD *)(**(_QWORD **)this + v4);
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v3 = *((_DWORD *)this + 2);
      }
      v4 += 16;
    }
    v2 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
LABEL_14:
      if (*(_BYTE *)(v2 + 12))
        uprv_free(*(void **)v2);
      icu::UMemory::operator delete((void *)v2);
    }
  }
  uhash_close(*((void ***)this + 3));
}

uint64_t icu::LocalePriorityList::localeAt(icu::LocalePriorityList *this, int a2)
{
  return *(_QWORD *)(**(_QWORD **)this + 16 * a2);
}

uint64_t icu::LocalePriorityList::orphanLocaleAt(uint64_t **this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (!*this)
    return 0;
  v2 = **this;
  v3 = 16 * a2;
  result = *(_QWORD *)(v2 + v3);
  *(_QWORD *)(v2 + v3) = 0;
  return result;
}

BOOL sub_18BBC0BC8(uint64_t a1, uint64_t a2)
{
  return icu::Locale::operator==(a1, a2);
}

uint64_t sub_18BBC0BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t result;

  v3 = *(_DWORD *)(a3 + 8);
  v4 = *(_DWORD *)(a2 + 8);
  result = (v3 - v4);
  if (v3 == v4)
    return (*(_DWORD *)(a2 + 12) - *(_DWORD *)(a3 + 12));
  return result;
}

uint64_t uprv_svc_hook()
{
  return 0;
}

void sub_18BBC0C08()
{
  int v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  icu::Locale *v7;
  unint64_t v8;
  icu::Locale *v9;
  char *Available;

  v0 = uloc_countAvailable();
  dword_1EE009250 = v0;
  if (v0)
  {
    v2 = v0;
    if (is_mul_ok(v0, 0xE0uLL))
      v3 = (224 * v0) | 0x10;
    else
      v3 = -1;
    v4 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v3, v1);
    if (v4)
    {
      *v4 = 224;
      v4[1] = v2;
      v5 = (uint64_t)(v4 + 2);
      v6 = 224 * v2;
      v7 = (icu::Locale *)(v4 + 2);
      do
      {
        v7 = (icu::Locale *)(icu::Locale::Locale(v7) + 224);
        v6 -= 224;
      }
      while (v6);
    }
    else
    {
      v5 = 0;
    }
    qword_1EE009258 = v5;
    if (v5)
      goto LABEL_13;
LABEL_10:
    dword_1EE009250 = 0;
    goto LABEL_15;
  }
  if (!qword_1EE009258)
    goto LABEL_10;
LABEL_13:
  v8 = dword_1EE009250;
  if (dword_1EE009250 >= 1)
  {
    do
    {
      v9 = (icu::Locale *)(qword_1EE009258 + 224 * (v8 - 1));
      Available = (char *)uloc_getAvailable((int)v8 - 1);
      icu::Locale::setFromPOSIXID(v9, Available);
    }
    while (v8-- > 1);
  }
LABEL_15:
  sub_18BC0ECC4(0xAu, (uint64_t)sub_18BBC0DC8);
}

uint64_t uloc_countAvailable()
{
  uint64_t v0;
  void *v2;
  uint64_t v3;

  v2 = &unk_1E2246C90;
  v3 = 0;
  sub_18BBC0EA4((int *)&v3);
  if ((int)v3 <= 0)
    v0 = dword_1EE009260[0];
  else
    v0 = 0;
  icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v2);
  return v0;
}

uint64_t uloc_getAvailable(int a1)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;

  v5 = &unk_1E2246C90;
  v6 = 0;
  sub_18BBC0EA4((int *)&v6);
  v2 = 0;
  if ((int)v6 <= 0 && dword_1EE009260[0] >= a1)
    v2 = *(_QWORD *)(qword_1EE009268 + 8 * a1);
  icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v5);
  return v2;
}

uint64_t sub_18BBC0DC8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (qword_1EE009258)
  {
    v0 = (void *)(qword_1EE009258 - 16);
    v1 = *(_QWORD *)(qword_1EE009258 - 8);
    if (v1)
    {
      v2 = 224 * v1;
      v3 = qword_1EE009258 - 224;
      do
      {
        icu::Locale::~Locale((icu::Locale *)(v3 + v2));
        v2 -= 224;
      }
      while (v2);
    }
    icu::UMemory::operator delete[](v0);
    qword_1EE009258 = 0;
  }
  dword_1EE009250 = 0;
  atomic_store(0, (unsigned int *)&unk_1EE009278);
  return 1;
}

uint64_t icu::Locale::getAvailableLocales(icu::Locale *this, int *a2)
{
  unsigned int v3;

  v3 = atomic_load((unsigned int *)&unk_1EE009278);
  if (v3 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1EE009278))
  {
    sub_18BBC0C08();
    icu::umtx_initImplPostInit((unsigned int *)&unk_1EE009278);
  }
  *(_DWORD *)this = dword_1EE009250;
  return qword_1EE009258;
}

void sub_18BBC0EA4(int *a1)
{
  unsigned int v2;
  _QWORD *v3;
  void (**v4)(icu::ResourceSink *__hidden);

  if (*a1 <= 0)
  {
    v2 = atomic_load(&dword_1EE009280);
    if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009280))
    {
      if (dword_1EE009284 >= 1)
        *a1 = dword_1EE009284;
    }
    else
    {
      sub_18BC0ECC4(0xDu, (uint64_t)sub_18BBC1040);
      v3 = (_QWORD *)ures_openDirect(0, (uint64_t)"res_index", (uint64_t)a1);
      v4 = &off_1E22470C0;
      ures_getAllItemsWithFallback((uint64_t)v3, "", (uint64_t)&v4, a1);
      icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v4);
      if (v3)
        ures_close(v3);
      dword_1EE009284 = *a1;
      icu::umtx_initImplPostInit(&dword_1EE009280);
    }
  }
}

_OWORD *uloc_openAvailableByType(unsigned int a1, int *a2)
{
  int v4;
  unint64_t v5;
  uint64_t v7;
  _DWORD *v8;

  if (*a2 > 0)
    return 0;
  if (a1 >= 3)
  {
    v4 = 1;
LABEL_4:
    *a2 = v4;
    return 0;
  }
  sub_18BBC0EA4(a2);
  if (*a2 > 0)
    return 0;
  v7 = icu::UMemory::operator new((icu::UMemory *)0x80, v5);
  if (!v7)
  {
    if (*a2 > 0)
      return 0;
    v4 = 7;
    goto LABEL_4;
  }
  v8 = (_DWORD *)icu::StringEnumeration::StringEnumeration(v7);
  *(_QWORD *)v8 = &off_1E2247108;
  v8[29] = a1;
  v8[30] = 0;
  if (*a2 > 0)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    return 0;
  }
  return uenum_openFromStringEnumeration((uint64_t)v8, a2);
}

uint64_t sub_18BBC1040()
{
  uprv_free((void *)qword_1EE009268);
  qword_1EE009268 = 0;
  dword_1EE009260[0] = 0;
  uprv_free((void *)qword_1EE009270);
  qword_1EE009270 = 0;
  dword_1EE009264 = 0;
  atomic_store(0, &dword_1EE009280);
  return 1;
}

void sub_18BBC109C(icu::ResourceSink *a1)
{
  void *v1;

  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v1);
}

_QWORD *sub_18BBC10B0(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  _QWORD *result;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  char *__s1;

  v16 = 0;
  __s1 = a2;
  memset(v15, 0, sizeof(v15));
  result = (*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 88))(v15, a3, a5);
  if (*a5 <= 0)
  {
    result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v15, 0, (const char **)&__s1, a3);
    if ((_DWORD)result)
    {
      v8 = 0;
      do
      {
        v9 = __s1;
        if (!strcmp(__s1, "InstalledLocales"))
        {
          v10 = 0;
        }
        else
        {
          if (strcmp(v9, "AliasLocales"))
            goto LABEL_14;
          v10 = 1;
        }
        v14 = 0;
        memset(v13, 0, sizeof(v13));
        result = (*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 88))(v13, a3, a5);
        if (*a5 > 0)
          return result;
        v11 = (int)v14;
        dword_1EE009260[v10] = v14;
        result = uprv_malloc(8 * v11);
        qword_1EE009268[v10] = (uint64_t)result;
        if (!result)
        {
          *a5 = 7;
          return result;
        }
        if (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v13, 0, (const char **)&__s1, a3))
        {
          v12 = 0;
          do
            *(_QWORD *)(qword_1EE009268[v10] + 8 * v12++) = __s1;
          while (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v13, v12, (const char **)&__s1, a3));
        }
LABEL_14:
        result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v15, ++v8, (const char **)&__s1, a3);
      }
      while ((_DWORD)result);
    }
  }
  return result;
}

void sub_18BBC1250(icu::StringEnumeration *a1)
{
  void *v1;

  icu::StringEnumeration::~StringEnumeration(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BBC1264(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v1 == 2)
    return (dword_1EE009264 + dword_1EE009260[0]);
  else
    return dword_1EE009260[v1];
}

uint64_t sub_18BBC1294(uint64_t a1, _DWORD *a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v4 = *(_DWORD *)(a1 + 116);
  v3 = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a1 + 120) = v3 + 1;
  if (v4 == 2)
  {
    v5 = dword_1EE009260[0];
    v4 = v3 >= dword_1EE009260[0];
    if (v3 < dword_1EE009260[0])
      v5 = 0;
    v3 -= v5;
  }
  if (v3 >= dword_1EE009260[v4])
  {
    v7 = 0;
    if (a2)
    {
      v8 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    v6 = qword_1EE009268[v4];
    v7 = *(_QWORD *)(v6 + 8 * v3);
    if (a2)
    {
      v8 = strlen(*(const char **)(v6 + 8 * v3));
LABEL_10:
      *a2 = v8;
    }
  }
  return v7;
}

uint64_t sub_18BBC1328(uint64_t result)
{
  *(_DWORD *)(result + 120) = 0;
  return result;
}

uint64_t icu::LocaleBased::getLocale@<X0>(const char **a1@<X0>, int a2@<W1>, int *a3@<X2>, icu::Locale *a4@<X8>)
{
  const char *v6;
  const char *v7;

  if (*a3 <= 0)
  {
    if (a2)
    {
      if (a2 == 1)
      {
        v6 = *a1;
      }
      else
      {
        v6 = 0;
        *a3 = 1;
      }
    }
    else
    {
      v6 = a1[1];
    }
  }
  else
  {
    v6 = 0;
  }
  if (v6)
    v7 = v6;
  else
    v7 = "";
  return icu::Locale::Locale(a4, v7, 0, 0, 0);
}

uint64_t icu::LocaleBased::getLocaleID(_QWORD *a1, int a2, int *a3)
{
  uint64_t result;

  if (*a3 > 0)
    return 0;
  if (!a2)
    return a1[1];
  if (a2 == 1)
    return *a1;
  result = 0;
  *a3 = 1;
  return result;
}

char *icu::LocaleBased::setLocaleIDs(char *this, const char *a2, const char *__src)
{
  char **v4;

  v4 = (char **)this;
  if (a2)
  {
    this = strncpy(*(char **)this, a2, 0x9DuLL);
    (*v4)[156] = 0;
  }
  if (__src)
  {
    this = strncpy(v4[1], __src, 0x9DuLL);
    v4[1][156] = 0;
  }
  return this;
}

char *icu::LocaleBased::setLocaleIDs(char **a1, uint64_t a2, uint64_t a3)
{
  strcpy(*a1, *(const char **)(a2 + 40));
  return strcpy(a1[1], *(const char **)(a3 + 40));
}

icu::UnicodeString *icu::Locale::getDisplayLanguage(icu::Locale *this, icu::UnicodeString *a2)
{
  uint64_t *Default;

  Default = icu::Locale::getDefault(this);
  return icu::Locale::getDisplayLanguage(this, (char **)Default, a2);
}

icu::UnicodeString *icu::Locale::getDisplayLanguage(icu::Locale *this, char **a2, icu::UnicodeString *a3)
{
  UChar *Buffer;
  int v7;
  int DisplayLanguage;
  int v9;
  int v10;
  UChar *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v18;

  v18 = 0;
  Buffer = (UChar *)icu::UnicodeString::getBuffer(a3, 157);
  if (Buffer)
  {
    if ((*((_WORD *)a3 + 4) & 2) != 0)
      v7 = 27;
    else
      v7 = *((_DWORD *)a3 + 4);
    DisplayLanguage = uloc_getDisplayLanguage(*((_QWORD *)this + 5), a2[5], Buffer, v7, &v18);
    v9 = DisplayLanguage;
    if (v18 <= 0)
      v10 = DisplayLanguage;
    else
      v10 = 0;
    icu::UnicodeString::releaseBuffer((uint64_t)a3, v10);
    if (v18 != 15)
      return a3;
    v11 = (UChar *)icu::UnicodeString::getBuffer(a3, v9);
    if (v11)
    {
      v18 = 0;
      if ((*((_WORD *)a3 + 4) & 2) != 0)
        v12 = 27;
      else
        v12 = *((_DWORD *)a3 + 4);
      v13 = uloc_getDisplayLanguage(*((_QWORD *)this + 5), a2[5], v11, v12, &v18);
      if (v18 <= 0)
        v14 = v13;
      else
        v14 = 0;
      icu::UnicodeString::releaseBuffer((uint64_t)a3, v14);
      return a3;
    }
  }
  v15 = *((unsigned __int16 *)a3 + 4);
  if ((v15 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)a3);
  }
  else
  {
    if ((v15 & 0x8000u) == 0)
      v16 = v15 >> 5;
    else
      v16 = *((_DWORD *)a3 + 3);
    if (v16)
      *((_WORD *)a3 + 4) &= 0x1Fu;
  }
  return a3;
}

uint64_t uloc_getDisplayLanguage(uint64_t a1, char *a2, UChar *a3, int a4, int *a5)
{
  uint64_t result;
  unsigned int Language;
  int v12;
  char v13[628];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a5 || *a5 > 0)
    return 0;
  if (a4 < 0
    || !a3 && a4
    || (bzero(v13, 0x274uLL), v12 = 0, Language = uloc_getLanguage(a1, v13, 628, &v12), v12 > 0)
    || v12 == -124)
  {
    result = 0;
    *a5 = 1;
  }
  else if (Language)
  {
    return sub_18BBC2EC0("icudt74l-lang", a2, "Languages", 0, v13, v13, a3, a4, a5);
  }
  else
  {
    return u_terminateUChars((uint64_t)a3, a4, 0, a5);
  }
  return result;
}

icu::UnicodeString *icu::Locale::getDisplayScript(icu::Locale *this, icu::UnicodeString *a2)
{
  uint64_t *Default;

  Default = icu::Locale::getDefault(this);
  return icu::Locale::getDisplayScript(this, (char **)Default, a2);
}

icu::UnicodeString *icu::Locale::getDisplayScript(icu::Locale *this, char **a2, icu::UnicodeString *a3)
{
  UChar *Buffer;
  int v7;
  int DisplayScript;
  int v9;
  int v10;
  UChar *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v18;

  v18 = 0;
  Buffer = (UChar *)icu::UnicodeString::getBuffer(a3, 157);
  if (Buffer)
  {
    if ((*((_WORD *)a3 + 4) & 2) != 0)
      v7 = 27;
    else
      v7 = *((_DWORD *)a3 + 4);
    DisplayScript = uloc_getDisplayScript(*((_QWORD *)this + 5), a2[5], Buffer, v7, &v18);
    v9 = DisplayScript;
    if (v18 <= 0)
      v10 = DisplayScript;
    else
      v10 = 0;
    icu::UnicodeString::releaseBuffer((uint64_t)a3, v10);
    if (v18 != 15)
      return a3;
    v11 = (UChar *)icu::UnicodeString::getBuffer(a3, v9);
    if (v11)
    {
      v18 = 0;
      if ((*((_WORD *)a3 + 4) & 2) != 0)
        v12 = 27;
      else
        v12 = *((_DWORD *)a3 + 4);
      v13 = uloc_getDisplayScript(*((_QWORD *)this + 5), a2[5], v11, v12, &v18);
      if (v18 <= 0)
        v14 = v13;
      else
        v14 = 0;
      icu::UnicodeString::releaseBuffer((uint64_t)a3, v14);
      return a3;
    }
  }
  v15 = *((unsigned __int16 *)a3 + 4);
  if ((v15 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)a3);
  }
  else
  {
    if ((v15 & 0x8000u) == 0)
      v16 = v15 >> 5;
    else
      v16 = *((_DWORD *)a3 + 3);
    if (v16)
      *((_WORD *)a3 + 4) &= 0x1Fu;
  }
  return a3;
}

uint64_t uloc_getDisplayScript(uint64_t a1, char *a2, UChar *a3, int a4, int *a5)
{
  uint64_t v10;
  int v11;
  int Script;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v19;
  int v20;
  char v21[628];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  if (a4 < 0 || !a3 && a4)
    goto LABEL_4;
  bzero(v21, 0x274uLL);
  v20 = 0;
  Script = uloc_getScript(a1, v21, 628, &v20);
  if (v20 > 0 || v20 == -124)
  {
    v10 = 0;
    v19 = 1;
  }
  else
  {
    if (Script)
      v14 = sub_18BBC2EC0("icudt74l-lang", a2, "Scripts%stand-alone", 0, v21, v21, a3, a4, &v19);
    else
      v14 = u_terminateUChars((uint64_t)a3, a4, 0, &v19);
    v10 = v14;
  }
  v11 = v19;
  if (a4 || v19 != 15)
  {
    if (v19 != -127)
      goto LABEL_5;
    if (!a5 || *a5 > 0)
      return 0;
    bzero(v21, 0x274uLL);
    v20 = 0;
    v17 = uloc_getScript(a1, v21, 628, &v20);
    if (v20 > 0 || v20 == -124)
    {
LABEL_4:
      v10 = 0;
      v11 = 1;
LABEL_5:
      *a5 = v11;
      return v10;
    }
    if (v17)
      return sub_18BBC2EC0("icudt74l-lang", a2, "Scripts", 0, v21, v21, a3, a4, a5);
    else
      return u_terminateUChars((uint64_t)a3, a4, 0, a5);
  }
  else
  {
    if (a5 && *a5 <= 0)
    {
      bzero(v21, 0x274uLL);
      v20 = 0;
      v16 = uloc_getScript(a1, v21, 628, &v20);
      if (v20 > 0 || v20 == -124)
      {
        v15 = 0;
        *a5 = 1;
      }
      else if (v16)
      {
        v15 = sub_18BBC2EC0("icudt74l-lang", a2, "Scripts", 0, v21, v21, a3, 0, a5);
      }
      else
      {
        v15 = u_terminateUChars((uint64_t)a3, 0, 0, a5);
      }
    }
    else
    {
      v15 = 0;
    }
    if (v15 <= (int)v10)
      return v10;
    else
      return v15;
  }
}

icu::UnicodeString *icu::Locale::getDisplayCountry(icu::Locale *this, icu::UnicodeString *a2)
{
  uint64_t *Default;

  Default = icu::Locale::getDefault(this);
  return icu::Locale::getDisplayCountry(this, (char **)Default, a2);
}

icu::UnicodeString *icu::Locale::getDisplayCountry(icu::Locale *this, char **a2, icu::UnicodeString *a3)
{
  UChar *Buffer;
  uint64_t v7;
  int DisplayCountry;
  int v9;
  int v10;
  UChar *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v18;

  v18 = 0;
  Buffer = (UChar *)icu::UnicodeString::getBuffer(a3, 157);
  if (Buffer)
  {
    if ((*((_WORD *)a3 + 4) & 2) != 0)
      v7 = 27;
    else
      v7 = *((unsigned int *)a3 + 4);
    DisplayCountry = uloc_getDisplayCountry(*((_QWORD *)this + 5), a2[5], Buffer, v7, &v18);
    v9 = DisplayCountry;
    if (v18 <= 0)
      v10 = DisplayCountry;
    else
      v10 = 0;
    icu::UnicodeString::releaseBuffer((uint64_t)a3, v10);
    if (v18 != 15)
      return a3;
    v11 = (UChar *)icu::UnicodeString::getBuffer(a3, v9);
    if (v11)
    {
      v18 = 0;
      if ((*((_WORD *)a3 + 4) & 2) != 0)
        v12 = 27;
      else
        v12 = *((unsigned int *)a3 + 4);
      v13 = uloc_getDisplayCountry(*((_QWORD *)this + 5), a2[5], v11, v12, &v18);
      if (v18 <= 0)
        v14 = v13;
      else
        v14 = 0;
      icu::UnicodeString::releaseBuffer((uint64_t)a3, v14);
      return a3;
    }
  }
  v15 = *((unsigned __int16 *)a3 + 4);
  if ((v15 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)a3);
  }
  else
  {
    if ((v15 & 0x8000u) == 0)
      v16 = v15 >> 5;
    else
      v16 = *((_DWORD *)a3 + 3);
    if (v16)
      *((_WORD *)a3 + 4) &= 0x1Fu;
  }
  return a3;
}

uint64_t uloc_getDisplayCountry(uint64_t a1, char *a2, UChar *a3, uint64_t a4, int *a5)
{
  int Country;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  char v22[628];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  Country = uloc_getCountry(a1, (char *)&v20, 4, a5);
  if (*a5 > 0 || Country < 1)
  {
    if (*a5 > 0)
      return 0;
    goto LABEL_11;
  }
  v12 = Country;
  if (!sub_18BBC2B70((const char *)&v20))
  {
LABEL_11:
    if ((a4 & 0x80000000) != 0
      || !a3 && (_DWORD)a4
      || (bzero(v22, 0x274uLL), v21 = 0, v15 = uloc_getCountry(a1, v22, 628, &v21), v21 > 0)
      || v21 == -124)
    {
      v14 = 0;
      *a5 = 1;
    }
    else if (v15)
    {
      return sub_18BBC2EC0("icudt74l-region", a2, "Countries", 0, v22, v22, a3, a4, a5);
    }
    else
    {
      return u_terminateUChars((uint64_t)a3, a4, 0, a5);
    }
    return v14;
  }
  v13 = uldn_open(a2, 0, a5);
  if (*a5 >= 1)
    return 0;
  v18 = v13;
  v14 = uldn_regionDisplayName(v13, (uint64_t)&v20, a3, a4, a5);
  uldn_close(v18);
  if ((_DWORD)v14 == v12)
  {
    v19 = 0;
    while (*((char *)&v20 + v19) == a3[v19])
    {
      if (v12 == ++v19)
        goto LABEL_28;
    }
    if (v12 != (_DWORD)v19)
      return v12;
LABEL_28:
    *a5 = -127;
    return v12;
  }
  return v14;
}

icu::UnicodeString *icu::Locale::getDisplayVariant(icu::Locale *this, icu::UnicodeString *a2)
{
  uint64_t *Default;

  Default = icu::Locale::getDefault(this);
  return icu::Locale::getDisplayVariant((char **)this, (char **)Default, a2);
}

icu::UnicodeString *icu::Locale::getDisplayVariant(char **this, char **a2, icu::UnicodeString *a3)
{
  UChar *Buffer;
  int v7;
  int DisplayVariant;
  int v9;
  int v10;
  UChar *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v18;

  v18 = 0;
  Buffer = (UChar *)icu::UnicodeString::getBuffer(a3, 157);
  if (Buffer)
  {
    if ((*((_WORD *)a3 + 4) & 2) != 0)
      v7 = 27;
    else
      v7 = *((_DWORD *)a3 + 4);
    DisplayVariant = uloc_getDisplayVariant(this[5], a2[5], Buffer, v7, &v18);
    v9 = DisplayVariant;
    if (v18 <= 0)
      v10 = DisplayVariant;
    else
      v10 = 0;
    icu::UnicodeString::releaseBuffer((uint64_t)a3, v10);
    if (v18 != 15)
      return a3;
    v11 = (UChar *)icu::UnicodeString::getBuffer(a3, v9);
    if (v11)
    {
      v18 = 0;
      if ((*((_WORD *)a3 + 4) & 2) != 0)
        v12 = 27;
      else
        v12 = *((_DWORD *)a3 + 4);
      v13 = uloc_getDisplayVariant(this[5], a2[5], v11, v12, &v18);
      if (v18 <= 0)
        v14 = v13;
      else
        v14 = 0;
      icu::UnicodeString::releaseBuffer((uint64_t)a3, v14);
      return a3;
    }
  }
  v15 = *((unsigned __int16 *)a3 + 4);
  if ((v15 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)a3);
  }
  else
  {
    if ((v15 & 0x8000u) == 0)
      v16 = v15 >> 5;
    else
      v16 = *((_DWORD *)a3 + 3);
    if (v16)
      *((_WORD *)a3 + 4) &= 0x1Fu;
  }
  return a3;
}

uint64_t uloc_getDisplayVariant(char *a1, char *a2, UChar *a3, int a4, int *a5)
{
  uint64_t result;
  int Variant;
  int v12;
  char v13[628];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a5 || *a5 > 0)
    return 0;
  if (a4 < 0
    || !a3 && a4
    || (bzero(v13, 0x274uLL), v12 = 0, Variant = uloc_getVariant(a1, v13, 628, &v12), v12 > 0)
    || v12 == -124)
  {
    result = 0;
    *a5 = 1;
  }
  else if (Variant)
  {
    return sub_18BBC2EC0("icudt74l-lang", a2, "Variants", 0, v13, v13, a3, a4, a5);
  }
  else
  {
    return u_terminateUChars((uint64_t)a3, a4, 0, a5);
  }
  return result;
}

icu::UnicodeString *icu::Locale::getDisplayName(icu::Locale *this, icu::UnicodeString *a2)
{
  uint64_t *Default;

  Default = icu::Locale::getDefault(this);
  return icu::Locale::getDisplayName((char **)this, (char **)Default, a2);
}

icu::UnicodeString *icu::Locale::getDisplayName(char **this, char **a2, icu::UnicodeString *a3)
{
  UChar *Buffer;
  unsigned int v7;
  int DisplayName;
  int v9;
  int v10;
  UChar *v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v18;

  v18 = 0;
  Buffer = (UChar *)icu::UnicodeString::getBuffer(a3, 157);
  if (Buffer)
  {
    if ((*((_WORD *)a3 + 4) & 2) != 0)
      v7 = 27;
    else
      v7 = *((_DWORD *)a3 + 4);
    DisplayName = uloc_getDisplayName(this[5], a2[5], Buffer, v7, &v18);
    v9 = DisplayName;
    if (v18 <= 0)
      v10 = DisplayName;
    else
      v10 = 0;
    icu::UnicodeString::releaseBuffer((uint64_t)a3, v10);
    if (v18 != 15)
      return a3;
    v11 = (UChar *)icu::UnicodeString::getBuffer(a3, v9);
    if (v11)
    {
      v18 = 0;
      if ((*((_WORD *)a3 + 4) & 2) != 0)
        v12 = 27;
      else
        v12 = *((_DWORD *)a3 + 4);
      v13 = uloc_getDisplayName(this[5], a2[5], v11, v12, &v18);
      if (v18 <= 0)
        v14 = v13;
      else
        v14 = 0;
      icu::UnicodeString::releaseBuffer((uint64_t)a3, v14);
      return a3;
    }
  }
  v15 = *((unsigned __int16 *)a3 + 4);
  if ((v15 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)a3);
  }
  else
  {
    if ((v15 & 0x8000u) == 0)
      v16 = v15 >> 5;
    else
      v16 = *((_DWORD *)a3 + 3);
    if (v16)
      *((_WORD *)a3 + 4) &= 0x1Fu;
  }
  return a3;
}

uint64_t uloc_getDisplayName(char *a1, char *a2, UChar *a3, unsigned int a4, int *a5)
{
  uint64_t v6;
  int Script;
  int Country;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const UChar *StringByKeyWithFallback;
  const UChar *v14;
  UChar *v15;
  UChar *v16;
  UChar *v17;
  UChar *v18;
  UChar *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  int v27;
  UChar *v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  UChar *v34;
  uint64_t v35;
  UChar *v36;
  UChar v37;
  uint64_t v38;
  int v39;
  int v40;
  UChar *v41;
  int v42;
  uint64_t v43;
  signed int DisplayLanguage;
  uint64_t v45;
  int v46;
  char *v47;
  uint64_t v48;
  _OWORD *v49;
  uint64_t v50;
  char *v51;
  int DisplayKeyword;
  uint64_t v53;
  int v54;
  UChar *v55;
  char v56;
  char *v57;
  int v58;
  int DisplayKeywordValue;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  UChar *v65;
  int v66;
  UChar v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  UChar *v74;
  UChar v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  __int16 v85;
  UChar *v86;
  UChar *ucs1;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  void **v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  int v100;
  uint64_t v101;
  int v102;
  __int16 v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v104 = 0;
  if (a5 && *a5 <= 0)
  {
    if ((a4 & 0x80000000) == 0 && (a3 || !a4))
    {
      v106 = 0;
      v105 = 0;
      v103 = 0;
      v102 = 0;
      v101 = 0;
      uloc_getLanguage((uint64_t)a1, (char *)&v105, 12, (int *)&v101);
      Script = uloc_getScript((uint64_t)a1, (char *)&v102, 6, (int *)&v101);
      Country = uloc_getCountry((uint64_t)a1, (char *)&v101 + 4, 4, (int *)&v101);
      if ((int)v101 <= 0
        && (Script >= 1
         && (!((unsigned __int16)v105 ^ 0x687A | BYTE2(v105))
          || (_DWORD)v105 == 6649209
          || !((unsigned __int16)v105 ^ 0x736B | BYTE2(v105))
          || !((unsigned __int16)v105 ^ 0x6170 | BYTE2(v105))
          || !((unsigned __int16)v105 ^ 0x7275 | BYTE2(v105)))
         || Country >= 1 && sub_18BBC2B70((const char *)&v101 + 4)))
      {
        v10 = uldn_open(a2, 0, (int *)&v101);
        if ((int)v101 <= 0)
        {
          v81 = v10;
          v6 = uldn_localeDisplayName(v10, (uint64_t)a1, a3, a4, a5);
          uldn_close(v81);
          return v6;
        }
      }
      LODWORD(v105) = 0;
      v11 = ures_open("icudt74l-lang", a2, (int *)&v105);
      v12 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v11, "localeDisplayPattern", 0, (UErrorCode *)&v105);
      StringByKeyWithFallback = ures_getStringByKeyWithFallback((uint64_t)v12, "separator", (int *)&v104 + 1, (UErrorCode *)&v105);
      ucs1 = (UChar *)ures_getStringByKeyWithFallback((uint64_t)v12, "pattern", (int *)&v104, (UErrorCode *)&v105);
      if (v12)
        ures_close(v12);
      if (v11)
        ures_close(v11);
      v14 = HIDWORD(v104) ? StringByKeyWithFallback : (const UChar *)L"{0}, {1}";
      v15 = u_strstr(v14, (const UChar *)"{");
      v16 = u_strstr(v14, (const UChar *)"{");
      if (v15)
      {
        if (v16 && v16 >= v15)
        {
          v17 = v15 + 3;
          HIDWORD(v104) = (unint64_t)((char *)v16 - (char *)(v15 + 3)) >> 1;
          if (!(_DWORD)v104 || (_DWORD)v104 == 9 && !u_strncmp(ucs1, (const UChar *)"{", 9))
          {
            v22 = 0;
            v100 = 0;
            LODWORD(v104) = 9;
            v23 = 93;
            v24 = 41;
            v25 = 91;
            v26 = 40;
            v92 = 5;
            ucs1 = (UChar *)"{";
LABEL_42:
            v27 = a4;
            v28 = a3;
            v29 = 0;
            v30 = 1;
            v31 = 1;
            v86 = v17;
            v84 = v24;
            v85 = v23;
            v83 = v26;
            while (1)
            {
              v82 = v29;
              v32 = v22;
              if (!(_DWORD)v22)
                goto LABEL_49;
              v33 = v22;
              v34 = v28;
              if ((int)v22 <= v27)
                break;
LABEL_50:
              v38 = 0;
              v39 = 0;
              v88 = 0;
              v93 = 0;
              v94 = 0;
              v91 = 0;
              v90 = v32;
              do
              {
                v40 = v27 - v32;
                v41 = &v28[(int)v32];
                if (v27 > (int)v32)
                  v34 = &v28[(int)v32];
                v42 = v40 & ~(v40 >> 31);
                if (v39 == v100)
                {
                  if ((_BYTE)v30)
                  {
                    v43 = v38;
                    DisplayLanguage = uloc_getDisplayLanguage((uint64_t)a1, a2, v34, v40 & ~(v40 >> 31), a5);
                    v38 = v43;
                    v28 = a3;
                    v27 = a4;
                    v45 = (DisplayLanguage + v32);
                    v93 = v32;
                    v94 = DisplayLanguage;
                    v30 = DisplayLanguage > 0;
                    v46 = 1;
                    goto LABEL_118;
                  }
                  v30 = 0;
                }
                else
                {
                  if (v31)
                  {
                    HIDWORD(v101) = 0;
                    v95 = v38;
                    switch((int)v38)
                    {
                      case 0:
                        if (*a5 <= 0)
                        {
                          if (v40 < 1 || v34)
                          {
                            v61 = v30;
                            bzero(&v105, 0x274uLL);
                            v102 = 0;
                            v62 = uloc_getScript((uint64_t)a1, (char *)&v105, 628, &v102);
                            if (v102 > 0 || v102 == -124)
                            {
                              LODWORD(v47) = 0;
                              *a5 = 1;
                            }
                            else if (v62)
                            {
                              LODWORD(v47) = sub_18BBC2EC0("icudt74l-lang", a2, "Scripts", 0, (char *)&v105, (const char *)&v105, v34, v40 & ~(v40 >> 31), a5);
                            }
                            else
                            {
                              LODWORD(v47) = u_terminateUChars((uint64_t)v34, v40 & ~(v40 >> 31), 0, a5);
                            }
                            v27 = a4;
                            v28 = a3;
                            v30 = v61;
                          }
                          else
                          {
                            LODWORD(v47) = 0;
                            *a5 = 1;
                          }
                        }
                        else
                        {
                          LODWORD(v47) = 0;
                        }
                        v46 = 0;
                        v56 = 1;
                        LODWORD(v88) = v32;
                        goto LABEL_101;
                      case 1:
                        v48 = v30;
                        LODWORD(v47) = uloc_getDisplayCountry((uint64_t)a1, a2, v34, v40 & ~(v40 >> 31), a5);
                        goto LABEL_65;
                      case 2:
                        v48 = v30;
                        LODWORD(v47) = uloc_getDisplayVariant(a1, a2, v34, v40 & ~(v40 >> 31), a5);
LABEL_65:
                        v30 = v48;
                        v28 = a3;
                        v27 = a4;
                        v46 = 0;
                        goto LABEL_89;
                      case 3:
                        v89 = v30;
                        v49 = uloc_openKeywords(a1, a5);
                        if (v91)
                          uenum_close(v91);
                        v50 = (uint64_t)v49;
                        goto LABEL_70;
                      default:
                        v89 = v30;
                        v50 = (uint64_t)v91;
LABEL_70:
                        v91 = (void **)v50;
                        v47 = (char *)uenum_next(v50, (uint64_t)&v101 + 4, a5);
                        if (v47)
                        {
                          v51 = v47;
                          DisplayKeyword = uloc_getDisplayKeyword(v47, a2, v34, v40 & ~(v40 >> 31), a5);
                          HIDWORD(v101) = DisplayKeyword;
                          if (DisplayKeyword)
                          {
                            if (DisplayKeyword < v42)
                              v34[DisplayKeyword] = 61;
                            v53 = DisplayKeyword + 1;
                            HIDWORD(v101) = v53;
                            v54 = v42 - v53;
                            v55 = &v34[v53];
                            if (v54 < 1)
                              v54 = 0;
                            else
                              v34 = v55;
                          }
                          else
                          {
                            v54 = v40 & ~(v40 >> 31);
                          }
                          if (*a5 == 15)
                            *a5 = 0;
                          v57 = v51;
                          v58 = v54;
                          DisplayKeywordValue = uloc_getDisplayKeywordValue(a1, v57, a2, v34, v54, a5);
                          v60 = HIDWORD(v101);
                          if (HIDWORD(v101))
                          {
                            v27 = a4;
                            v28 = a3;
                            v30 = v89;
                            if (!DisplayKeywordValue)
                              v60 = --HIDWORD(v101);
                            if (v40 > 0)
                              v34 = v41;
                          }
                          else
                          {
                            v42 = v58;
                            v27 = a4;
                            v28 = a3;
                            v30 = v89;
                          }
                          v46 = 0;
                          LODWORD(v47) = v60 + DisplayKeywordValue;
LABEL_89:
                          v56 = 1;
                        }
                        else
                        {
                          v56 = 0;
                          v46 = 1;
                          v27 = a4;
                          v28 = a3;
                          v30 = v89;
                        }
LABEL_101:
                        if ((int)v47 >= 1)
                        {
                          v63 = HIDWORD(v104);
                          v64 = HIDWORD(v104) + (_DWORD)v47;
                          if (HIDWORD(v104) + (int)v47 > v42)
                            goto LABEL_112;
                          v65 = &v34[v47];
                          do
                          {
                            v66 = *v34;
                            v67 = v25;
                            if (v66 == v83 || (v67 = v85, v66 == v84))
                              *v34 = v67;
                            ++v34;
                          }
                          while (v34 < v65);
                          if ((int)v63 < 1)
                          {
LABEL_112:
                            v70 = v95;
                          }
                          else
                          {
                            v68 = 0;
                            v69 = 2 * v63;
                            v70 = v95;
                            do
                            {
                              v34[v68 / 2] = v86[v68 / 2];
                              v68 += 2;
                            }
                            while (v69 != v68);
                            v34 = (UChar *)((char *)v34 + v68);
                          }
                          v32 = (v64 + v32);
LABEL_115:
                          v31 = 1;
                          goto LABEL_116;
                        }
                        v70 = v95;
                        if ((v56 & 1) != 0)
                          goto LABEL_115;
                        v76 = HIDWORD(v104);
                        if ((_DWORD)v32 == (_DWORD)v88)
                          v76 = 0;
                        v32 = (v32 - v76);
                        HIDWORD(v88) = v32 - v88;
                        v31 = (int)v32 > (int)v88;
LABEL_116:
                        v38 = (v70 + 1);
                        break;
                    }
                    goto LABEL_117;
                  }
                  v31 = 0;
                }
                v46 = 1;
LABEL_117:
                v45 = v32;
LABEL_118:
                if (*a5 == 15)
                  *a5 = 0;
                if (v46)
                {
                  if ((_BYTE)v30 && v31)
                  {
                    v71 = v33 + 3;
                    if (v39)
                      v33 = v104;
                    else
                      v33 = v92;
                    v72 = v33 - v71;
                    v73 = (v33 - v71 + v45);
                    if ((int)v73 <= v27)
                    {
                      v34 = &v28[(int)v45];
                      if (v72 >= 1)
                      {
                        v74 = &ucs1[v71];
                        do
                        {
                          v75 = *v74++;
                          *v34++ = v75;
                          ++v71;
                        }
                        while (v33 != v71);
                      }
                      v45 = v73;
                      v33 = v71;
                    }
                    else
                    {
                      v45 = (v72 + v45);
                    }
                  }
                  else if (v39)
                  {
                    if ((int)v45 >= 1)
                    {
                      v45 = (_BYTE)v30 ? v94 : HIDWORD(v88);
                      if (v28 && v90)
                      {
                        if ((int)(v45 + v90) <= v27)
                        {
                          v77 = v93;
                          if (!(_BYTE)v30)
                            v77 = v88;
                          v78 = v30;
                          v79 = v38;
                          u_memmove(v28, &v28[v77], v45);
                          v38 = v79;
                          v30 = v78;
                          v28 = a3;
                          v27 = a4;
                        }
                        else
                        {
                          v90 = 0;
                          v82 = 1;
                        }
                      }
                    }
                  }
                  else
                  {
                    v90 = 0;
                    v45 = 0;
                  }
                  ++v39;
                }
                v32 = v45;
              }
              while (v39 < 2);
              if (v91)
              {
                v80 = v30;
                uenum_close(v91);
                v30 = v80;
                v28 = a3;
                v27 = a4;
              }
              v29 = 1;
              v22 = v90;
              if (!v82)
                return u_terminateUChars((uint64_t)v28, v27, v45, a5);
            }
            if ((int)v22 >= 1)
            {
              v35 = v22;
              v36 = ucs1;
              v34 = v28;
              do
              {
                v37 = *v36++;
                *v34++ = v37;
                --v35;
              }
              while (v35);
              v33 = v22;
              goto LABEL_50;
            }
LABEL_49:
            v33 = 0;
            v34 = v28;
            goto LABEL_50;
          }
          v18 = u_strstr(ucs1, (const UChar *)"{");
          v19 = u_strstr(ucs1, (const UChar *)"{");
          if (v18 && v19)
          {
            v20 = (unint64_t)((char *)v18 - (char *)ucs1) >> 1;
            v21 = (unint64_t)((char *)v19 - (char *)ucs1) >> 1;
            v100 = (int)v21 < (int)v20;
            if ((int)v21 >= (int)v20)
              v22 = v20;
            else
              v22 = v21;
            if ((int)v21 >= (int)v20)
              LODWORD(v20) = (unint64_t)((char *)v19 - (char *)ucs1) >> 1;
            v92 = v20;
            if (u_strchr(ucs1, 0xFF08u))
            {
              v23 = -195;
              v24 = 65289;
              v25 = -197;
              v26 = 65288;
            }
            else
            {
              v23 = 93;
              v24 = 41;
              v25 = 91;
              v26 = 40;
            }
            goto LABEL_42;
          }
        }
      }
    }
    v6 = 0;
    *a5 = 1;
    return v6;
  }
  return 0;
}

icu::UnicodeString *icu::BreakIterator::getDisplayName(icu::BreakIterator *this, const icu::Locale *a2, icu::UnicodeString *a3)
{
  uint64_t *Default;

  Default = icu::Locale::getDefault(this);
  return icu::Locale::getDisplayName((char **)this, (char **)Default, a2);
}

BOOL sub_18BBC2B70(const char *a1)
{
  return !strcmp(a1, "CN") || !strcmp(a1, "HK") || !strcmp(a1, "MO") || strcmp(a1, "TW") == 0;
}

uint64_t uloc_getDisplayKeyword(char *a1, char *a2, UChar *a3, int a4, int *a5)
{
  if (a5 && *a5 <= 0)
  {
    if ((a4 & 0x80000000) == 0 && (a3 || !a4))
      return sub_18BBC2EC0("icudt74l-lang", a2, "Keys", 0, a1, a1, a3, a4, a5);
    *a5 = 1;
  }
  return 0;
}

uint64_t uloc_getDisplayKeywordValue(char *a1, char *a2, char *a3, UChar *a4, int a5, int *a6)
{
  uint64_t v7;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const UChar *StringByIndex;
  uint64_t v18;
  int32_t count[2];
  uint64_t v20;
  char *v21[7];
  int32_t length[2];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a6 || *a6 > 0)
    return 0;
  if (a5 < 0 || !a4 && a5)
  {
    v7 = 0;
    *a6 = 1;
    return v7;
  }
  memset(&v21[1], 0, 48);
  *(_QWORD *)length = 0;
  v20 = 0;
  v21[0] = (char *)&v21[1] + 5;
  LODWORD(v21[1]) = 40;
  *(_QWORD *)count = 0;
  icu::CharStringByteSink::CharStringByteSink(count, (uint64_t)v21);
  ulocimp_getKeywordValue(a1, a2, (uint64_t)count, a6);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)count);
  if (!uprv_stricmp(a2, "currency"))
  {
    count[0] = 0;
    v14 = ures_open("icudt74l-curr", a3, a6);
    v15 = (_QWORD *)ures_getByKey((uint64_t)v14, "Currencies", 0, a6);
    v16 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v15, v21[0], 0, (UErrorCode *)a6);
    StringByIndex = ures_getStringByIndex((uint64_t)v16, 1, count, a6);
    if (*a6 >= 1)
    {
      if (*a6 != 2)
      {
        v7 = 0;
        goto LABEL_22;
      }
      *a6 = -127;
    }
    if (StringByIndex)
    {
      v7 = count[0];
      if (count[0] <= a5)
      {
        u_memcpy(a4, StringByIndex, count[0]);
        v18 = count[0];
LABEL_21:
        v7 = u_terminateUChars((uint64_t)a4, a5, v18, a6);
        goto LABEL_22;
      }
    }
    else
    {
      v7 = length[0];
      if (length[0] <= a5)
      {
        u_charsToUChars(v21[0], a4, length[0]);
        v18 = length[0];
        goto LABEL_21;
      }
    }
    *a6 = 15;
LABEL_22:
    if (v16)
      ures_close(v16);
    if (v15)
      ures_close(v15);
    if (v14)
      ures_close(v14);
    goto LABEL_28;
  }
  v7 = sub_18BBC2EC0("icudt74l-lang", a3, "Types", a2, v21[0], v21[0], a4, a5, a6);
LABEL_28:
  if (BYTE4(v21[1]))
    uprv_free(v21[0]);
  return v7;
}

uint64_t sub_18BBC2EC0(const char *a1, char *a2, char *__s1, char *a4, char *a5, const char *a6, UChar *a7, int a8, int *a9)
{
  int v16;
  const UChar *StringByKey;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int32_t v21;
  size_t v22;
  int32_t v23;
  unsigned int v26;
  _OWORD v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  if (!a5)
  {
    v19 = ures_open(a1, a2, a9);
    v20 = v19;
    if (*a9 <= 0)
    {
      StringByKey = ures_getStringByKey((uint64_t)v19, __s1, (int *)&v26, a9);
      if (!v20)
        goto LABEL_9;
    }
    else
    {
      StringByKey = 0;
      if (!v19)
        goto LABEL_9;
    }
    ures_close(v20);
    goto LABEL_9;
  }
  v16 = strncmp(__s1, "Languages", 9uLL);
  if (!v16 && strtol(a5, 0, 10))
  {
    *a9 = 2;
    goto LABEL_16;
  }
  StringByKey = uloc_getTableStringWithFallback(a1, a2, __s1, a4, a5, (int *)&v26, a9);
  v18 = *a9;
  if (!v16 && v18 >= 1)
  {
    *a9 = 0;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    memset(v27, 0, sizeof(v27));
    icu::Locale::createCanonical((icu::Locale *)a5, (icu::Locale *)v27);
    StringByKey = uloc_getTableStringWithFallback(a1, a2, __s1, a4, *((char **)&v28 + 1), (int *)&v26, a9);
    icu::Locale::~Locale((icu::Locale *)v27);
LABEL_9:
    v18 = *a9;
  }
  if (v18 > 0)
  {
LABEL_16:
    v22 = strlen(a6);
    v26 = v22;
    v23 = uprv_min(v22, a8);
    u_charsToUChars(a6, a7, v23);
    *a9 = -127;
    return u_terminateUChars((uint64_t)a7, a8, v26, a9);
  }
  v21 = uprv_min(v26, a8);
  if (v21 >= 1 && StringByKey)
    u_memcpy(a7, StringByKey, v21);
  return u_terminateUChars((uint64_t)a7, a8, v26, a9);
}

void sub_18BBC30F4(int *a1)
{
  int8x16_t *v2;
  unint64_t v3;
  uint64_t v4;
  int64x2_t v5;
  int v6;
  uint64_t v7;

  v2 = (int8x16_t *)sub_18BBCE594(a1);
  if (*a1 <= 0)
  {
    v4 = (uint64_t)v2;
    v5.i64[0] = v2[20].i64[0];
    v5.i64[1] = v2[21].i64[1];
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vextq_s8(v2[19], v2[19], 8uLL)), (int32x4_t)vceqzq_s64(v5)))) & 1) != 0)
    {
      v6 = 2;
    }
    else
    {
      v7 = icu::UMemory::operator new((icu::UMemory *)0x58, v3);
      if (v7)
      {
        qword_1EE009288 = sub_18BBC3280(v7, (uint64_t *)(v4 + 304), v4);
        sub_18BC0ECC4(0xCu, (uint64_t)sub_18BBC31A8);
        return;
      }
      qword_1EE009288 = 0;
      v6 = 7;
    }
    *a1 = v6;
  }
}

uint64_t sub_18BBC31A8()
{
  void *v0;

  v0 = (void *)qword_1EE009288;
  if (qword_1EE009288)
  {
    icu::BytesTrie::~BytesTrie((void **)(qword_1EE009288 + 8));
    icu::UMemory::operator delete(v0);
  }
  qword_1EE009288 = 0;
  atomic_store(0, &dword_1EE009290);
  return 1;
}

uint64_t sub_18BBC31F0(int *a1)
{
  unsigned int v3;

  if (*a1 > 0)
    return 0;
  v3 = atomic_load(&dword_1EE009290);
  if (v3 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009290))
  {
    if (dword_1EE009294 >= 1)
      *a1 = dword_1EE009294;
  }
  else
  {
    sub_18BBC30F4(a1);
    dword_1EE009294 = *a1;
    icu::umtx_initImplPostInit(&dword_1EE009290);
  }
  return qword_1EE009288;
}

uint64_t sub_18BBC3280(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v7;
  _QWORD v8[3];
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  _QWORD v13[3];
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  *(_QWORD *)a1 = a3;
  v4 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = -1;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 1);
  *(_QWORD *)(a1 + 56) = a2[3];
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 8);
  v5 = (_DWORD *)a2[5];
  *(_DWORD *)(a1 + 68) = *v5;
  *(_DWORD *)(a1 + 72) = v5[1];
  *(_DWORD *)(a1 + 76) = v5[2];
  *(_DWORD *)(a1 + 80) = v5[3];
  v17 = 0;
  v13[0] = "en";
  v13[1] = "Latn";
  v13[2] = "US";
  v14 = 0;
  v15 = sub_18BBD0828("US");
  v16 = 7;
  v12 = 0;
  v8[0] = "en";
  v8[1] = "Latn";
  v8[2] = "GB";
  v9 = 0;
  v10 = sub_18BBD0828("GB");
  v11 = 7;
  v7 = v8;
  *(_DWORD *)(a1 + 84) = (sub_18BBC33B4(a1, (uint64_t)v13, (uint64_t)&v7, 1, 400, 0, 0) >> 3) & 0x7F;
  if (v9)
    sub_18BBD08C0((uint64_t)v8);
  if (v14)
    sub_18BBD08C0((uint64_t)v13);
  return a1;
}

uint64_t sub_18BBC33B4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, int a7)
{
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  signed int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  signed int v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v30;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  _OWORD v39[2];
  uint64_t v40;

  memset(v39, 0, sizeof(v39));
  *(_OWORD *)((char *)v39 + 8) = *(_OWORD *)(a1 + 16);
  DWORD2(v39[1]) = *(_DWORD *)(a1 + 32);
  v10 = sub_18BBC3778((icu::BytesTrie *)v39, *(unsigned __int8 **)a2, 0);
  if (a4 <= 1 || v10 < 0)
  {
    if (a4 < 1)
    {
      v12 = 4294967072;
      goto LABEL_53;
    }
    v11 = 0;
  }
  else
  {
    v11 = (*(_QWORD *)&v39[1] - *((_QWORD *)&v39[0] + 1)) | ((unint64_t)(DWORD2(v39[1]) + 2) << 59);
  }
  v12 = 0;
  v13 = 0;
  v34 = (v11 >> 59) - 2;
  v33 = v11 & 0x7FFFFFFFFFFFFFFLL;
  v30 = -1;
  v32 = -1;
  v36 = a4;
  v14 = v10;
  do
  {
    v15 = *(_QWORD *)(a3 + 8 * v13);
    if (v10 < 0)
      goto LABEL_12;
    if (v13)
    {
      DWORD2(v39[1]) = v34;
      *(_QWORD *)&v39[1] = *((_QWORD *)&v39[0] + 1) + v33;
    }
    v16 = sub_18BBC3778((icu::BytesTrie *)v39, *(unsigned __int8 **)v15, 1);
    if (v16 < 0)
    {
LABEL_12:
      if (!strcmp(*(const char **)a2, *(const char **)v15))
      {
        v19 = 0;
        v18 = 0;
      }
      else
      {
        v18 = 0;
        v19 = *(_DWORD *)(a1 + 68);
      }
      v17 = 1;
    }
    else
    {
      v17 = 0;
      v18 = v16 & 0x180;
      v19 = v16 & 0xFFFFFE7F;
    }
    v20 = a5 + 7;
    if (a6 == 1)
      v21 = v19 >> 2;
    else
      v21 = v19;
    if (v21 <= v20 >> 3)
    {
      if (((v18 == 0) & ~v17) != 0)
      {
        v23 = sub_18BBC3818((uint64_t)v39, (*(_QWORD *)&v39[1] - *((_QWORD *)&v39[0] + 1)) | ((unint64_t)(DWORD2(v39[1]) + 2) << 59), *(char **)(a2 + 8), *(char **)(v15 + 8));
        v18 = v23 & 0x100;
        v22 = v23 & 0xFFFFFEFF;
      }
      else
      {
        v22 = !strcmp(*(const char **)(a2 + 8), *(const char **)(v15 + 8)) ? 0 : *(_DWORD *)(a1 + 72);
      }
      v24 = v20 >> 3;
      v25 = v22 + v21;
      v26 = (v20 >> 3) - v25;
      if (v24 >= v25)
      {
        if (strcmp(*(const char **)(a2 + 16), *(const char **)(v15 + 16)))
        {
          if ((v17 | (v18 >> 8)) == 1)
          {
            v25 += *(_DWORD *)(a1 + 76);
          }
          else
          {
            if (*(_DWORD *)(a1 + 80) > v26)
              goto LABEL_48;
            v25 += sub_18BBC38C4((icu::BytesTrie *)v39, (*(_QWORD *)&v39[1] - *((_QWORD *)&v39[0] + 1)) | ((unint64_t)(DWORD2(v39[1]) + 2) << 59), *(char **)(*(_QWORD *)(a1 + 48)+ 8 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + *(int *)(a2 + 32))), *(char **)(*(_QWORD *)(a1 + 48)+ 8 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + *(int *)(v15 + 32))), v26);
          }
        }
        v27 = (8 * v25);
        if ((_DWORD)v27)
        {
          if ((int)v27 >= (int)a5)
          {
            if ((_DWORD)v27 == (_DWORD)a5 && (v32 & 0x80000000) == 0)
            {
              if (a7 != 1 || (v40 = a2, (sub_18BBC33B4(a1, v15, &v40, 1, a5, a6, 0) & 0x80000000) == 0))
              {
                v28 = v32;
                v30 = sub_18BBCF0C4(*(_QWORD *)a1, v15, *(const char ***)(a3 + 8 * v32), v30);
                if ((v30 & 1) != 0)
                  v28 = v13;
                v32 = v28;
              }
            }
          }
          else
          {
            if (a7 != 1)
              goto LABEL_40;
            v40 = a2;
            if ((sub_18BBC33B4(a1, v15, &v40, 1, a5, a6, 0) & 0x80000000) == 0)
              goto LABEL_40;
          }
        }
        else
        {
          v27 = (*(_DWORD *)(v15 + 36) ^ *(_DWORD *)(a2 + 36));
          if ((int)v27 < (int)a5)
          {
            if (a7 != 1 || (v40 = a2, (sub_18BBC33B4(a1, v15, &v40, 1, a5, a6, 0) & 0x80000000) == 0))
            {
              if (!(_DWORD)v27)
                goto LABEL_53;
LABEL_40:
              v30 = -1;
              a5 = v27;
              v32 = v13;
            }
          }
        }
      }
    }
LABEL_48:
    ++v13;
    v12 = (v12 + 1024);
    v10 = v14;
  }
  while (v36 != v13);
  if (v32 >= 0)
    v12 = a5 | (v32 << 10);
  else
    v12 = 4294967072;
LABEL_53:
  icu::BytesTrie::~BytesTrie((void **)v39);
  return v12;
}

uint64_t sub_18BBC3778(icu::BytesTrie *this, unsigned __int8 *a2, int a3)
{
  int v4;
  unsigned __int8 *v7;
  int v8;
  int v9;
  char v10;
  int v11;
  int v12;
  uint64_t result;

  v4 = *a2;
  if (!v4)
    return 0xFFFFFFFFLL;
  v7 = a2 + 1;
  while (1)
  {
    v9 = *v7++;
    v8 = v9;
    if (!v9)
      break;
    v10 = icu::BytesTrie::next(this, v4);
    v4 = v8;
    if ((v10 & 1) == 0)
      return 0xFFFFFFFFLL;
  }
  v11 = icu::BytesTrie::next(this, v4 | 0x80u);
  v12 = v11;
  if (!a3)
  {
    if ((v11 & 1) != 0)
      return 0;
    return 0xFFFFFFFFLL;
  }
  if (v11 < 2)
    return 0xFFFFFFFFLL;
  LODWORD(result) = icu::BytesTrie::readValue((icu::BytesTrie *)(*((_QWORD *)this + 2) + 1), (const unsigned __int8 *)(**((unsigned __int8 **)this + 2) >> 1));
  if (v12 == 2)
    return result | 0x100;
  else
    return result;
}

uint64_t sub_18BBC3818(uint64_t a1, unint64_t a2, char *a3, char *a4)
{
  uint64_t result;
  int v9;

  if ((sub_18BBC3778((icu::BytesTrie *)a1, (unsigned __int8 *)a3, 0) & 0x80000000) != 0
    || (result = sub_18BBC3778((icu::BytesTrie *)a1, (unsigned __int8 *)a4, 1), (result & 0x80000000) != 0))
  {
    *(_DWORD *)(a1 + 24) = (a2 >> 59) - 2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8) + (a2 & 0x7FFFFFFFFFFFFFFLL);
    v9 = icu::BytesTrie::next((icu::BytesTrie *)a1, 42);
    LODWORD(result) = strcmp(a3, a4);
    if ((_DWORD)result)
      LODWORD(result) = icu::BytesTrie::readValue((icu::BytesTrie *)(*(_QWORD *)(a1 + 16) + 1), (const unsigned __int8 *)(**(unsigned __int8 **)(a1 + 16) >> 1));
    if (v9 == 2)
      return result | 0x100;
    else
      return result;
  }
  return result;
}

uint64_t sub_18BBC38C4(icu::BytesTrie *this, unint64_t a2, char *a3, char *a4, int a5)
{
  int v7;
  _BYTE *v8;
  int v9;
  int v10;
  char *v12;
  uint64_t v13;
  char v14;
  char v15;
  int v16;
  uint64_t result;
  unint64_t v18;
  int v19;
  uint64_t v20;
  char *i;
  int v22;
  int v23;
  char *v25;
  uint64_t v26;

  v7 = *a3;
  v8 = a3 + 1;
  v9 = a4[1];
  v10 = *a4;
  if (a3[1] | v9)
  {
    v12 = a4;
    v13 = 0;
    v14 = 0;
    v15 = *a4;
    v16 = (a2 >> 59) - 2;
    v25 = a4 + 1;
    v26 = a2 & 0x7FFFFFFFFFFFFFFLL;
    v22 = v16;
    v23 = a4[1];
    while ((icu::BytesTrie::next(this, (char)v7 | 0x80u) & 1) == 0)
    {
      if ((v14 & 1) == 0)
      {
        result = sub_18BBC3AF0((uint64_t)this, a2);
        v13 = (int)v13 <= (int)result ? result : v13;
        if ((int)result > a5)
          return result;
      }
      v14 = 1;
LABEL_27:
      LOBYTE(v7) = *v8;
      if (!*v8)
        return v13;
      ++v8;
      *((_DWORD *)this + 6) = v16;
      *((_QWORD *)this + 2) = *((_QWORD *)this + 1) + v26;
      v15 = *v12;
    }
    if (v9)
      v18 = (*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) | ((unint64_t)(*((_DWORD *)this + 6) + 2) << 59);
    else
      v18 = 0;
    v19 = (v18 >> 59) - 2;
    v20 = v18 & 0x7FFFFFFFFFFFFFFLL;
    for (i = v25; ; ++i)
    {
      if ((int)icu::BytesTrie::next(this, v15 | 0x80u) < 2)
      {
        result = (v14 & 1) != 0 ? 0 : sub_18BBC3AF0((uint64_t)this, a2);
        v14 = 1;
      }
      else
      {
        result = icu::BytesTrie::readValue((icu::BytesTrie *)(*((_QWORD *)this + 2) + 1), (const unsigned __int8 *)(**((unsigned __int8 **)this + 2) >> 1));
      }
      if ((int)result > a5)
        break;
      if ((int)v13 <= (int)result)
        v13 = result;
      else
        v13 = v13;
      v15 = *i;
      if (!*i)
      {
        v12 = a4;
        v16 = v22;
        v9 = v23;
        goto LABEL_27;
      }
      *((_DWORD *)this + 6) = v19;
      *((_QWORD *)this + 2) = *((_QWORD *)this + 1) + v20;
    }
  }
  else if ((icu::BytesTrie::next(this, v7 | 0x80u) & 1) != 0 && (int)icu::BytesTrie::next(this, v10 | 0x80u) >= 2)
  {
    return icu::BytesTrie::readValue((icu::BytesTrie *)(*((_QWORD *)this + 2) + 1), (const unsigned __int8 *)(**((unsigned __int8 **)this + 2) >> 1));
  }
  else
  {
    return sub_18BBC3AF0((uint64_t)this, a2);
  }
  return result;
}

uint64_t sub_18BBC3AF0(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 24) = (a2 >> 59) - 2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8) + (a2 & 0x7FFFFFFFFFFFFFFLL);
  icu::BytesTrie::next((icu::BytesTrie *)a1, 42);
  return icu::BytesTrie::readValue((icu::BytesTrie *)(*(_QWORD *)(a1 + 16) + 1), (const unsigned __int8 *)(**(unsigned __int8 **)(a1 + 16) >> 1));
}

BOOL sub_18BBC3B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL8 result;

  if (*(int *)(a1 + 64) < 1)
    return 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = sub_18BBD0930(a2, *(_QWORD *)(a1 + 56) + v4);
    result = v6;
    if (v6)
      break;
    ++v5;
    v4 += 48;
  }
  while (v5 < *(int *)(a1 + 64));
  return result;
}

icu::Locale *sub_18BBC3BB4(icu::Locale *a1, const char *a2, uint64_t a3)
{
  icu::Locale *v6;
  uint64_t Root;
  int v8;
  char *v9;

  *(_QWORD *)a1 = 0;
  v6 = (icu::Locale *)((char *)a1 + 8);
  Root = icu::Locale::getRoot(a1);
  icu::Locale::Locale(v6, Root);
  if (a2)
  {
    v8 = strlen(a2);
    v9 = (char *)uprv_malloc(v8 + 1);
    *(_QWORD *)a1 = v9;
    if (v9)
    {
      strcpy(v9, a2);
      icu::Locale::operator=(v6, a3);
    }
  }
  return a1;
}

void **sub_18BBC3C30(void **a1)
{
  void *v2;

  v2 = *a1;
  if (v2)
  {
    uprv_free(v2);
    *a1 = 0;
  }
  icu::Locale::~Locale((icu::Locale *)(a1 + 1));
  return a1;
}

uint64_t sub_18BBC3C68(uint64_t a1, char *a2, char *a3, char *a4, uint64_t a5)
{
  const UChar *TableStringWithFallback;
  uint64_t v8;
  icu::UnicodeString *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  UChar *v18[9];

  v18[8] = *(UChar **)MEMORY[0x1E0C80C00];
  v17 = 0;
  TableStringWithFallback = uloc_getTableStringWithFallback(*(const char **)a1, *(char **)(a1 + 48), a2, a3, a4, (int *)&v17, (int32_t *)&v17 + 1);
  v8 = v17;
  if (SHIDWORD(v17) > 0 || (int)v17 < 1)
  {
    icu::UnicodeString::UnicodeString(v18, a4, 0xFFFFFFFFLL, 0);
    v10 = icu::UnicodeString::copyFrom((UChar **)a5, v18, 0);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v18);
  }
  else
  {
    v11 = (uint64_t)TableStringWithFallback;
    icu::UnicodeString::unBogus(a5);
    v12 = *(unsigned __int16 *)(a5 + 8);
    v13 = (__int16)v12;
    v14 = v12 >> 5;
    if (v13 >= 0)
      v15 = v14;
    else
      v15 = *(unsigned int *)(a5 + 12);
    return icu::UnicodeString::doReplace(a5, 0, v15, v11, 0, v8);
  }
  return (uint64_t)v10;
}

uint64_t sub_18BBC3D74(uint64_t a1, char *a2, char *a3, char *a4, uint64_t a5)
{
  const UChar *TableStringWithFallback;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;

  v14 = 0;
  TableStringWithFallback = uloc_getTableStringWithFallback(*(const char **)a1, *(char **)(a1 + 48), a2, a3, a4, (int *)&v14, (int32_t *)&v14 + 1);
  if (SHIDWORD(v14) <= 0)
  {
    v7 = (uint64_t)TableStringWithFallback;
    v8 = v14;
    icu::UnicodeString::unBogus(a5);
    v9 = *(unsigned __int16 *)(a5 + 8);
    v10 = (__int16)v9;
    v11 = v9 >> 5;
    if (v10 >= 0)
      v12 = v11;
    else
      v12 = *(unsigned int *)(a5 + 12);
    return icu::UnicodeString::doReplace(a5, 0, v12, v7, 0, v8);
  }
  else
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a5);
  }
  return a5;
}

uint64_t sub_18BBC3E34(uint64_t a1, uint64_t a2, int a3)
{
  *(_QWORD *)a1 = off_1E2247188;
  icu::Locale::Locale((icu::Locale *)(a1 + 8));
  *(_DWORD *)(a1 + 232) = a3;
  sub_18BBC3BB4((icu::Locale *)(a1 + 240), "icudt74l-lang", a2);
  sub_18BBC3BB4((icu::Locale *)(a1 + 472), "icudt74l-region", a2);
  icu::UnicodeString::UnicodeString(a1 + 712, 0);
  icu::UnicodeString::UnicodeString(a1 + 784, 0);
  icu::UnicodeString::UnicodeString(a1 + 856, 0);
  *(_DWORD *)(a1 + 920) = 256;
  *(_QWORD *)(a1 + 928) = 0;
  *(_QWORD *)(a1 + 936) = off_1E2256B38;
  *(_WORD *)(a1 + 944) = 2;
  *(_QWORD *)(a1 + 1000) = off_1E2256B38;
  *(_WORD *)(a1 + 1008) = 2;
  *(_QWORD *)(a1 + 1064) = off_1E2256B38;
  *(_WORD *)(a1 + 1072) = 2;
  *(_QWORD *)(a1 + 1128) = off_1E2256B38;
  *(_WORD *)(a1 + 1136) = 2;
  *(_QWORD *)(a1 + 1192) = off_1E2256B38;
  *(_WORD *)(a1 + 1200) = 2;
  *(_QWORD *)(a1 + 1256) = 0x30000000200;
  sub_18BBC3F1C(a1);
  return a1;
}

void sub_18BBC3F1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Root;
  uint64_t v5;
  int32_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  UErrorCode *v19;
  UErrorCode *v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  int v25;
  char *SentenceInstance;
  UErrorCode v27;
  void (**v28)(icu::ResourceSink *__hidden);
  uint64_t v29;
  uint64_t v30;
  void (**v31)(icu::UnicodeString *__hidden);
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  void (**v36)(icu::UnicodeString *__hidden);
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  void (**v41)(icu::UnicodeString *__hidden);
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 240;
  v3 = a1 + 248;
  Root = icu::Locale::getRoot((icu::Locale *)a1);
  if (icu::Locale::operator==(v3, Root))
    v5 = a1 + 480;
  else
    v5 = v3;
  icu::Locale::operator=((icu::Locale *)(a1 + 8), v5);
  v42 = 0u;
  v45 = 0;
  v44 = 0u;
  v43 = 0u;
  v41 = off_1E2256B38;
  LOWORD(v42) = 2;
  sub_18BBC3D74(v2, "localeDisplayPattern", 0, "separator", (uint64_t)&v41);
  if ((v42 & 1) != 0)
  {
    icu::UnicodeString::UnicodeString(&v36, "{0}, {1}", 0xFFFFFFFFLL, 0);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v41, (icu::UnicodeString *)&v36);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v36);
  }
  v27 = U_ZERO_ERROR;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(a1 + 704), (const icu::UnicodeString *)&v41, 2, 2, 0, &v27);
  v37 = 0u;
  v40 = 0;
  v39 = 0u;
  v38 = 0u;
  v36 = off_1E2256B38;
  LOWORD(v37) = 2;
  sub_18BBC3D74(v2, "localeDisplayPattern", 0, "pattern", (uint64_t)&v36);
  if ((v37 & 1) != 0)
  {
    icu::UnicodeString::UnicodeString(&v31, "{0} ({1})", 0xFFFFFFFFLL, 0);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v36, (icu::UnicodeString *)&v31);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v31);
  }
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(a1 + 776), (const icu::UnicodeString *)&v36, 2, 2, 0, &v27);
  if ((v37 & 0x8000u) == 0)
    v6 = (unsigned __int16)v37 >> 5;
  else
    v6 = DWORD1(v37);
  if ((icu::UnicodeString::doIndexOf((uint64_t)&v36, 0xFF08u, 0, v6) & 0x80000000) != 0)
  {
    LOWORD(v31) = 40;
    icu::UnicodeString::unBogus(a1 + 936);
    if (*(__int16 *)(a1 + 944) < 0)
      v8 = *(unsigned int *)(a1 + 948);
    else
      v8 = *(unsigned __int16 *)(a1 + 944) >> 5;
    icu::UnicodeString::doReplace(a1 + 936, 0, v8, (uint64_t)&v31, 0, 1);
    LOWORD(v31) = 91;
    icu::UnicodeString::unBogus(a1 + 1000);
    if (*(__int16 *)(a1 + 1008) < 0)
      v16 = *(unsigned int *)(a1 + 1012);
    else
      v16 = *(unsigned __int16 *)(a1 + 1008) >> 5;
    icu::UnicodeString::doReplace(a1 + 1000, 0, v16, (uint64_t)&v31, 0, 1);
    LOWORD(v31) = 41;
    icu::UnicodeString::unBogus(a1 + 1064);
    if (*(__int16 *)(a1 + 1072) < 0)
      v17 = *(unsigned int *)(a1 + 1076);
    else
      v17 = *(unsigned __int16 *)(a1 + 1072) >> 5;
    icu::UnicodeString::doReplace(a1 + 1064, 0, v17, (uint64_t)&v31, 0, 1);
    LOWORD(v31) = 93;
    icu::UnicodeString::unBogus(a1 + 1128);
    if (*(__int16 *)(a1 + 1136) < 0)
      v18 = *(unsigned int *)(a1 + 1140);
    else
      v18 = *(unsigned __int16 *)(a1 + 1136) >> 5;
    icu::UnicodeString::doReplace(a1 + 1128, 0, v18, (uint64_t)&v31, 0, 1);
    icu::UnicodeString::unBogus(a1 + 1192);
    if (*(__int16 *)(a1 + 1200) < 0)
      v12 = *(unsigned int *)(a1 + 1204);
    else
      v12 = *(unsigned __int16 *)(a1 + 1200) >> 5;
    v13 = &unk_18BE3593E;
    v14 = a1 + 1192;
    v15 = 3;
  }
  else
  {
    LOWORD(v31) = -248;
    icu::UnicodeString::unBogus(a1 + 936);
    if (*(__int16 *)(a1 + 944) < 0)
      v7 = *(unsigned int *)(a1 + 948);
    else
      v7 = *(unsigned __int16 *)(a1 + 944) >> 5;
    icu::UnicodeString::doReplace(a1 + 936, 0, v7, (uint64_t)&v31, 0, 1);
    LOWORD(v31) = -197;
    icu::UnicodeString::unBogus(a1 + 1000);
    if (*(__int16 *)(a1 + 1008) < 0)
      v9 = *(unsigned int *)(a1 + 1012);
    else
      v9 = *(unsigned __int16 *)(a1 + 1008) >> 5;
    icu::UnicodeString::doReplace(a1 + 1000, 0, v9, (uint64_t)&v31, 0, 1);
    LOWORD(v31) = -247;
    icu::UnicodeString::unBogus(a1 + 1064);
    if (*(__int16 *)(a1 + 1072) < 0)
      v10 = *(unsigned int *)(a1 + 1076);
    else
      v10 = *(unsigned __int16 *)(a1 + 1072) >> 5;
    icu::UnicodeString::doReplace(a1 + 1064, 0, v10, (uint64_t)&v31, 0, 1);
    LOWORD(v31) = -195;
    icu::UnicodeString::unBogus(a1 + 1128);
    if (*(__int16 *)(a1 + 1136) < 0)
      v11 = *(unsigned int *)(a1 + 1140);
    else
      v11 = *(unsigned __int16 *)(a1 + 1136) >> 5;
    icu::UnicodeString::doReplace(a1 + 1128, 0, v11, (uint64_t)&v31, 0, 1);
    icu::UnicodeString::unBogus(a1 + 1192);
    if (*(__int16 *)(a1 + 1200) < 0)
      v12 = *(unsigned int *)(a1 + 1204);
    else
      v12 = *(unsigned __int16 *)(a1 + 1200) >> 5;
    v13 = &unk_18BE35938;
    v14 = a1 + 1192;
    v15 = 2;
  }
  icu::UnicodeString::doReplace(v14, 0, v12, (uint64_t)v13, 0, v15);
  v32 = 0u;
  v33 = 0u;
  v35 = 0;
  v34 = 0u;
  v31 = off_1E2256B38;
  LOWORD(v32) = 2;
  sub_18BBC3C68(v2, "localeDisplayPattern", 0, "keyTypePattern", (uint64_t)&v31);
  if ((v32 & 1) != 0)
  {
    icu::UnicodeString::UnicodeString(&v28, "{0}={1}", 0xFFFFFFFFLL, 0);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v31, (icu::UnicodeString *)&v28);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v28);
  }
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(a1 + 848), (const icu::UnicodeString *)&v31, 2, 2, 0, &v27);
  *(_DWORD *)(a1 + 1264) = 0;
  *(_WORD *)(a1 + 1268) = 0;
  v21 = *(_DWORD *)(a1 + 920);
  if ((v21 - 259) > 1)
  {
LABEL_53:
    if (v21 != 258)
      goto LABEL_58;
    goto LABEL_54;
  }
  v22 = ures_open(0, *(char **)(a1 + 48), (int *)&v27);
  v23 = v22;
  if (v27 > U_ZERO_ERROR)
  {
    v24 = 0;
    v25 = 1;
    if (!v22)
      goto LABEL_50;
    goto LABEL_49;
  }
  v28 = &off_1E22472C8;
  v29 = 0;
  v30 = a1;
  ures_getAllItemsWithFallback((uint64_t)v22, "contextTransforms", (uint64_t)&v28, (int *)&v27);
  if (v27 == U_MISSING_RESOURCE_ERROR)
  {
    v27 = U_ZERO_ERROR;
  }
  else if (v27 > U_ZERO_ERROR)
  {
    v24 = 0;
    v25 = 1;
    goto LABEL_64;
  }
  v25 = 0;
  v24 = v29;
LABEL_64:
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v28);
  if (v23)
LABEL_49:
    ures_close(v23);
LABEL_50:
  if (v25)
    goto LABEL_58;
  if (!v24)
  {
    v21 = *(_DWORD *)(a1 + 920);
    goto LABEL_53;
  }
LABEL_54:
  v27 = U_ZERO_ERROR;
  SentenceInstance = icu::BreakIterator::createSentenceInstance((char **)(a1 + 8), (const icu::Locale *)&v27, v19, v20);
  *(_QWORD *)(a1 + 928) = SentenceInstance;
  if (v27 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (SentenceInstance)
      (*(void (**)(char *))(*(_QWORD *)SentenceInstance + 8))(SentenceInstance);
    *(_QWORD *)(a1 + 928) = 0;
  }
LABEL_58:
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v31);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v36);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v41);
}

uint64_t sub_18BBC4550(uint64_t a1, uint64_t a2, unsigned int *a3, int a4)
{
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)a1 = off_1E2247188;
  icu::Locale::Locale((icu::Locale *)(a1 + 8));
  *(_DWORD *)(a1 + 232) = 0;
  sub_18BBC3BB4((icu::Locale *)(a1 + 240), "icudt74l-lang", a2);
  sub_18BBC3BB4((icu::Locale *)(a1 + 472), "icudt74l-region", a2);
  icu::UnicodeString::UnicodeString(a1 + 712, 0);
  icu::UnicodeString::UnicodeString(a1 + 784, 0);
  icu::UnicodeString::UnicodeString(a1 + 856, 0);
  *(_DWORD *)(a1 + 920) = 256;
  *(_QWORD *)(a1 + 928) = 0;
  *(_QWORD *)(a1 + 936) = off_1E2256B38;
  *(_WORD *)(a1 + 944) = 2;
  *(_QWORD *)(a1 + 1000) = off_1E2256B38;
  *(_WORD *)(a1 + 1008) = 2;
  *(_QWORD *)(a1 + 1064) = off_1E2256B38;
  *(_WORD *)(a1 + 1072) = 2;
  *(_QWORD *)(a1 + 1128) = off_1E2256B38;
  *(_WORD *)(a1 + 1136) = 2;
  *(_QWORD *)(a1 + 1192) = off_1E2256B38;
  *(_WORD *)(a1 + 1200) = 2;
  *(_QWORD *)(a1 + 1256) = 0x30000000200;
  if (a4 >= 1)
  {
    v8 = a4 + 1;
    do
    {
      v10 = *a3++;
      v9 = v10;
      v11 = v10 >> 8;
      switch(v10 >> 8)
      {
        case 0u:
          *(_DWORD *)(a1 + 232) = v9;
          break;
        case 1u:
          *(_DWORD *)(a1 + 920) = v9;
          break;
        case 2u:
          goto LABEL_9;
        case 3u:
          *(_DWORD *)(a1 + 1260) = v9;
          break;
        default:
          if (v11 == 32)
          {
            if (v9 == 8193)
              v9 = 513;
            else
              v9 = 512;
LABEL_9:
            *(_DWORD *)(a1 + 1256) = v9;
          }
          break;
      }
      --v8;
    }
    while (v8 > 1);
  }
  sub_18BBC3F1C(a1);
  return a1;
}

void sub_18BBC46B4(icu::ResourceSink *a1)
{
  void *v1;

  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BBC46C8(uint64_t a1)
{
  uint64_t (**v2)();
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = off_1E2247188;
  *(_QWORD *)a1 = off_1E2247188;
  v3 = *(_QWORD *)(a1 + 928);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 1192));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 1128));
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 1064));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 1000));
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(a1 + 936));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 848));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 776));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 704));
  sub_18BBC3C30((void **)(a1 + 472));
  sub_18BBC3C30((void **)(a1 + 240));
  icu::Locale::~Locale((icu::Locale *)(a1 + 8));
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18BBC4764(uint64_t a1)
{
  void *v1;

  sub_18BBC46C8(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BBC4778(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_18BBC4780(uint64_t a1)
{
  return *(unsigned int *)(a1 + 232);
}

uint64_t sub_18BBC4788(unsigned int *a1, int a2)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      result = a1[58];
      break;
    case 1:
      result = a1[230];
      break;
    case 2:
      result = a1[314];
      break;
    case 3:
      result = a1[315];
      break;
    default:
      if (a2 == 32)
      {
        if (a1[314] == 513)
          result = 8193;
        else
          result = 0x2000;
      }
      else
      {
        result = 0;
      }
      break;
  }
  return result;
}

icu::UnicodeString *sub_18BBC47F0(uint64_t a1, unsigned int a2, icu::UnicodeString *this)
{
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  UChar32 v10;
  unsigned int v11;
  int v12;
  int v13;

  v6 = *((unsigned __int16 *)this + 4);
  v7 = (__int16)v6;
  v8 = v6 >> 5;
  if (v7 < 0)
    v8 = *((_DWORD *)this + 3);
  if (v8 < 1)
  {
LABEL_11:
    if (*(_QWORD *)(a1 + 928) && (*(_DWORD *)(a1 + 920) == 258 || *(_BYTE *)(a1 + a2 + 1264)))
    {
      umtx_lock((icu::UMutex *)&unk_1EE009298);
      icu::UnicodeString::toTitle((const UChar **)this, *(icu::BreakIterator **)(a1 + 928), (const icu::Locale *)(a1 + 8), 768);
      umtx_unlock((std::mutex **)&unk_1EE009298);
    }
  }
  else
  {
    v9 = 0;
    while (1)
    {
      v10 = icu::UnicodeString::char32At(this, v9);
      if (u_isupper(v10) || u_istitle(v10))
        break;
      if (!u_isspace(v10))
      {
        ++v9;
        v11 = *((unsigned __int16 *)this + 4);
        v12 = (__int16)v11;
        v13 = v11 >> 5;
        if (v12 < 0)
          v13 = *((_DWORD *)this + 3);
        if (v9 < v13)
          continue;
      }
      goto LABEL_11;
    }
  }
  return this;
}

icu::UnicodeString *sub_18BBC48EC(uint64_t a1, uint64_t a2, icu::UnicodeString *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  icu::UnicodeString *v8;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  int v16;
  char *v17;
  _BOOL4 v18;
  int v19;
  unsigned int v20;
  _BOOL4 v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  int32_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  int32_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  int v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  int32_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  int32_t v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  int v62;
  int32_t v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  int v70;
  int32_t v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  void *v80;
  _BOOL4 v81;
  void *v82;
  char v83;
  int v84;
  void *v85;
  _BOOL4 v86;
  void *v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  __int16 v92;
  int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  char *v103;
  int v104;
  icu::UnicodeString *v105;
  UErrorCode v107;
  UChar *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  UChar *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  UChar *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  UChar *v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  char v128[112];
  __int128 v129;
  _BYTE v130[29];
  UChar *v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;

  v8 = this;
  v136 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 216))
  {
    v135 = 0;
    v133 = 0u;
    v134 = 0u;
    v132 = 0u;
    v131 = (UChar *)off_1E2256B38;
    if (*(_BYTE *)(a2 + 8))
      v11 = (char *)(a2 + 8);
    else
      v11 = "root";
    v12 = *(_QWORD *)(a2 + 208);
    v13 = *(int *)(a2 + 32);
    v15 = (char *)(a2 + 20);
    v14 = *(unsigned __int8 *)(a2 + 20);
    v17 = (char *)(a2 + 26);
    v16 = *(unsigned __int8 *)(a2 + 26);
    LOWORD(v132) = 2;
    v18 = v14 != 0;
    v19 = v16 != 0;
    v103 = (char *)(v12 + v13);
    v104 = *(unsigned __int8 *)(v12 + v13);
    if (!(*(unsigned __int16 *)v11 ^ 0x687A | v11[2])
      || *(_DWORD *)v11 == 6649209
      || !(*(unsigned __int16 *)v11 ^ 0x736B | v11[2])
      || !(*(unsigned __int16 *)v11 ^ 0x6170 | v11[2])
      || !(*(unsigned __int16 *)v11 ^ 0x7275 | v11[2])
      || *(_DWORD *)v11 == 6515043
      || *(_DWORD *)v11 == 7301219
      || *(_DWORD *)v11 == 7827553
      || *(_DWORD *)(a1 + 232) == 1)
    {
      v129 = 0uLL;
      memset(v130, 0, sizeof(v130));
      memset(v128, 0, sizeof(v128));
      if (v14 && v16)
      {
        sub_18BBC53C0((uint64_t)v128, a2, (uint64_t)this, a4, a5, a6, a7, a8, v11, (uint64_t)"_");
        sub_18BBC5428(a1, v128, (uint64_t)&v131, 0);
        v20 = (unsigned __int16)v132;
        if ((v132 & 1) == 0)
        {
          v21 = 0;
          v19 = 0;
          goto LABEL_28;
        }
        goto LABEL_20;
      }
      if (v14)
      {
LABEL_20:
        sub_18BBC53C0((uint64_t)v128, a2, (uint64_t)this, a4, a5, a6, a7, a8, v11, (uint64_t)"_");
        sub_18BBC5428(a1, v128, (uint64_t)&v131, 0);
        v20 = (unsigned __int16)v132;
        v21 = (v132 & 1) != 0 && v18;
        if ((v132 & 1) == 0 || !v16)
        {
LABEL_28:
          if (v20 >= 0x20 && (v20 & 1) == 0)
            goto LABEL_33;
          goto LABEL_32;
        }
LABEL_27:
        sub_18BBC53C0((uint64_t)v128, a2, (uint64_t)this, a4, a5, a6, a7, a8, v11, (uint64_t)"_");
        sub_18BBC5428(a1, v128, (uint64_t)&v131, 0);
        v20 = (unsigned __int16)v132;
        v19 = v132 & (v16 != 0);
        v21 = v18;
        goto LABEL_28;
      }
      if (v16)
        goto LABEL_27;
      v19 = 0;
      v21 = 0;
    }
    else
    {
      v21 = v14 != 0;
    }
LABEL_32:
    sub_18BBC5428(a1, v11, (uint64_t)&v131, *(_DWORD *)(a1 + 1260) == 768);
    if ((v132 & 1) != 0)
    {
      v8 = this;
      icu::UnicodeString::setToBogus(this);
LABEL_149:
      icu::UnicodeString::~UnicodeString(v99, (icu::UnicodeString *)&v131);
      return v8;
    }
LABEL_33:
    v124 = 0u;
    v127 = 0;
    v126 = 0u;
    v125 = 0u;
    LOWORD(v124) = 2;
    v119 = 0u;
    v122 = 0;
    v123 = (UChar *)off_1E2256B38;
    v121 = 0u;
    v120 = 0u;
    v118 = (UChar *)off_1E2256B38;
    LOWORD(v119) = 2;
    v107 = U_ZERO_ERROR;
    if (v21)
    {
      memset(v128, 0, 64);
      sub_18BBC55F8(a1, v15, (icu::UnicodeString *)&v118, 1);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v128, &v118);
      if ((v128[8] & 1) != 0)
        goto LABEL_140;
      if (*(__int16 *)&v128[8] >= 0)
        v22 = *(unsigned __int16 *)&v128[8] >> 5;
      else
        v22 = *(unsigned int *)&v128[12];
      icu::UnicodeString::doAppend((uint64_t)&v123, (const icu::UnicodeString *)v128, 0, v22);
      icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v128);
    }
    if (v19)
    {
      memset(v128, 0, 64);
      sub_18BBC56F0((_DWORD *)a1, v17, (uint64_t)&v118);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v128, &v118);
      if ((v128[8] & 1) != 0)
        goto LABEL_140;
      sub_18BBC5834(a1, &v123, (UChar **)v128);
      icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v128);
    }
    if (!v104)
    {
LABEL_45:
      if ((v124 & 0x8000u) == 0)
        v26 = (unsigned __int16)v124 >> 5;
      else
        v26 = DWORD1(v124);
      v27 = *(unsigned __int16 *)(a1 + 944);
      v28 = (__int16)v27;
      v29 = v27 >> 5;
      if (v28 >= 0)
        v30 = v29;
      else
        v30 = *(unsigned int *)(a1 + 948);
      v31 = *(unsigned __int16 *)(a1 + 1008);
      v32 = (__int16)v31;
      v33 = v31 >> 5;
      if (v32 < 0)
        v33 = *(_DWORD *)(a1 + 1012);
      v105 = (icu::UnicodeString *)(a1 + 936);
      icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v123, 0, v26, (const icu::UnicodeString *)(a1 + 936), 0, v30, (const icu::UnicodeString *)(a1 + 1000), 0, v33);
      if ((v124 & 0x8000u) == 0)
        v34 = (unsigned __int16)v124 >> 5;
      else
        v34 = DWORD1(v124);
      v35 = *(unsigned __int16 *)(a1 + 1072);
      v36 = (__int16)v35;
      v37 = v35 >> 5;
      if (v36 >= 0)
        v38 = v37;
      else
        v38 = *(unsigned int *)(a1 + 1076);
      v39 = *(unsigned __int16 *)(a1 + 1136);
      v40 = (__int16)v39;
      v41 = v39 >> 5;
      if (v40 < 0)
        v41 = *(_DWORD *)(a1 + 1140);
      icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v123, 0, v34, (const icu::UnicodeString *)(a1 + 1064), 0, v38, (const icu::UnicodeString *)(a1 + 1128), 0, v41);
      v42 = icu::Locale::createKeywords((icu::Locale *)a2, &v107);
      v43 = v42;
      if (v42 && v107 <= U_ZERO_ERROR)
      {
        v114 = 0u;
        v117 = 0;
        v116 = 0u;
        v115 = 0u;
        v113 = (UChar *)off_1E2256B38;
        LOWORD(v114) = 2;
        memset(&v128[1], 0, 99);
        v44 = (*(uint64_t (**)(char *, _QWORD, UErrorCode *))(*(_QWORD *)v42 + 40))(v42, 0, &v107);
        if (v44)
        {
          v46 = (char *)v44;
          do
          {
            v128[0] = 0;
            icu::Locale::getKeywordValue((char **)a2, v46, v128, 100, &v107);
            if (v107 > U_ZERO_ERROR || v107 == U_STRING_NOT_TERMINATED_WARNING)
            {
              icu::UnicodeString::~UnicodeString((void *)v107, (icu::UnicodeString *)&v113);
              v8 = this;
              goto LABEL_147;
            }
            sub_18BBC5950(a1, v46, (icu::UnicodeString *)&v118, 1);
            if ((v119 & 0x8000u) == 0)
              v47 = (unsigned __int16)v119 >> 5;
            else
              v47 = DWORD1(v119);
            v48 = *(unsigned __int16 *)(a1 + 944);
            v49 = (__int16)v48;
            v50 = v48 >> 5;
            if (v49 >= 0)
              v51 = v50;
            else
              v51 = *(unsigned int *)(a1 + 948);
            v52 = *(unsigned __int16 *)(a1 + 1008);
            v53 = (__int16)v52;
            v54 = v52 >> 5;
            if (v53 < 0)
              v54 = *(_DWORD *)(a1 + 1012);
            icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v118, 0, v47, v105, 0, v51, (const icu::UnicodeString *)(a1 + 1000), 0, v54);
            if ((v119 & 0x8000u) == 0)
              v55 = (unsigned __int16)v119 >> 5;
            else
              v55 = DWORD1(v119);
            v56 = *(unsigned __int16 *)(a1 + 1072);
            v57 = (__int16)v56;
            v58 = v56 >> 5;
            if (v57 >= 0)
              v59 = v58;
            else
              v59 = *(unsigned int *)(a1 + 1076);
            v60 = *(unsigned __int16 *)(a1 + 1136);
            v61 = (__int16)v60;
            v62 = v60 >> 5;
            if (v61 < 0)
              v62 = *(_DWORD *)(a1 + 1140);
            icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v118, 0, v55, (const icu::UnicodeString *)(a1 + 1064), 0, v59, (const icu::UnicodeString *)(a1 + 1128), 0, v62);
            sub_18BBC59D0((_DWORD *)a1, v46, v128, (uint64_t)&v113, 1);
            if ((v114 & 0x8000u) == 0)
              v63 = (unsigned __int16)v114 >> 5;
            else
              v63 = DWORD1(v114);
            v64 = *(unsigned __int16 *)(a1 + 944);
            v65 = (__int16)v64;
            v66 = v64 >> 5;
            if (v65 >= 0)
              v67 = v66;
            else
              v67 = *(unsigned int *)(a1 + 948);
            v68 = *(unsigned __int16 *)(a1 + 1008);
            v69 = (__int16)v68;
            v70 = v68 >> 5;
            if (v69 < 0)
              v70 = *(_DWORD *)(a1 + 1012);
            icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v113, 0, v63, v105, 0, v67, (const icu::UnicodeString *)(a1 + 1000), 0, v70);
            if ((v114 & 0x8000u) == 0)
              v71 = (unsigned __int16)v114 >> 5;
            else
              v71 = DWORD1(v114);
            v72 = *(unsigned __int16 *)(a1 + 1072);
            v73 = (__int16)v72;
            v74 = v72 >> 5;
            if (v73 >= 0)
              v75 = v74;
            else
              v75 = *(unsigned int *)(a1 + 1076);
            v76 = *(unsigned __int16 *)(a1 + 1136);
            v77 = (__int16)v76;
            v78 = v76 >> 5;
            if (v77 < 0)
              v78 = *(_DWORD *)(a1 + 1140);
            icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v113, 0, v71, (const icu::UnicodeString *)(a1 + 1064), 0, v75, (const icu::UnicodeString *)(a1 + 1128), 0, v78);
            icu::UnicodeString::UnicodeString(&v108, v128, 0xFFFFFFFFLL, 0);
            if ((v114 & 1) != 0)
            {
              v83 = v109;
              icu::UnicodeString::~UnicodeString((void *)(unsigned __int16)v114, (icu::UnicodeString *)&v108);
              if ((v83 & 1) == 0)
                goto LABEL_123;
            }
            else
            {
              if ((v114 & 0x8000u) == 0)
                v79 = (unsigned __int16)v114 >> 5;
              else
                v79 = DWORD1(v114);
              if ((v109 & 0x8000u) == 0)
                v80 = (void *)((unsigned __int16)v109 >> 5);
              else
                v80 = (void *)DWORD1(v109);
              if ((v109 & 1) != 0 || v79 != (_DWORD)v80)
              {
                icu::UnicodeString::~UnicodeString(v80, (icu::UnicodeString *)&v108);
LABEL_123:
                sub_18BBC5834(a1, &v123, &v113);
                goto LABEL_131;
              }
              v81 = icu::UnicodeString::doEquals((icu::UnicodeString *)&v113, (const icu::UnicodeString *)&v108, v79);
              icu::UnicodeString::~UnicodeString(v82, (icu::UnicodeString *)&v108);
              if (!v81)
                goto LABEL_123;
            }
            icu::UnicodeString::UnicodeString(&v108, v46, 0xFFFFFFFFLL, 0);
            if ((v119 & 1) != 0)
            {
              v88 = v109;
              icu::UnicodeString::~UnicodeString((void *)(unsigned __int16)v119, (icu::UnicodeString *)&v108);
              if ((v88 & 1) != 0)
              {
LABEL_125:
                sub_18BBC5834(a1, &v123, &v118);
                LOWORD(v108) = 61;
                v89 = icu::UnicodeString::doAppend((uint64_t)&v123, (uint64_t)&v108, 0, 1);
                if ((v114 & 0x8000u) == 0)
                  v90 = (unsigned __int16)v114 >> 5;
                else
                  v90 = DWORD1(v114);
                icu::UnicodeString::doAppend(v89, (const icu::UnicodeString *)&v113, 0, v90);
                goto LABEL_131;
              }
            }
            else
            {
              if ((v119 & 0x8000u) == 0)
                v84 = (unsigned __int16)v119 >> 5;
              else
                v84 = DWORD1(v119);
              if ((v109 & 0x8000u) == 0)
                v85 = (void *)((unsigned __int16)v109 >> 5);
              else
                v85 = (void *)DWORD1(v109);
              if ((v109 & 1) != 0 || v84 != (_DWORD)v85)
              {
                icu::UnicodeString::~UnicodeString(v85, (icu::UnicodeString *)&v108);
              }
              else
              {
                v86 = icu::UnicodeString::doEquals((icu::UnicodeString *)&v118, (const icu::UnicodeString *)&v108, v84);
                icu::UnicodeString::~UnicodeString(v87, (icu::UnicodeString *)&v108);
                if (v86)
                  goto LABEL_125;
              }
            }
            v112 = 0;
            v110 = 0u;
            v111 = 0u;
            v109 = 0u;
            v108 = (UChar *)off_1E2256B38;
            LOWORD(v109) = 2;
            icu::SimpleFormatter::format((icu::SimpleFormatter *)(a1 + 848), (const icu::UnicodeString *)&v118, (const icu::UnicodeString *)&v113, (icu::UnicodeString *)&v108, &v107);
            sub_18BBC5834(a1, &v123, &v108);
            icu::UnicodeString::~UnicodeString(v91, (icu::UnicodeString *)&v108);
LABEL_131:
            v46 = (char *)(*(uint64_t (**)(char *, _QWORD, UErrorCode *))(*(_QWORD *)v43 + 40))(v43, 0, &v107);
          }
          while (v46);
        }
        icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)&v113);
      }
      if ((unsigned __int16)v124 < 0x20u)
      {
        v8 = this;
        icu::UnicodeString::operator=((UChar **)this, &v131);
      }
      else
      {
        v8 = this;
        if ((*((_WORD *)this + 4) & 1) != 0)
          v92 = 2;
        else
          v92 = *((_WORD *)this + 4) & 0x1F;
        *((_WORD *)this + 4) = v92;
        icu::SimpleFormatter::format((icu::SimpleFormatter *)(a1 + 776), (const icu::UnicodeString *)&v131, (const icu::UnicodeString *)&v123, this, &v107);
        v93 = sub_18BBC5BA4((uint64_t)this, a1 + 1192);
        if ((v93 & 0x80000000) == 0)
        {
          v94 = v93;
          memset(v128, 0, 64);
          v95 = *(unsigned __int16 *)(a1 + 1200);
          if ((v95 & 0x8000) != 0)
            v96 = *(_DWORD *)(a1 + 1204);
          else
            v96 = v95 >> 5;
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)v128, this, v96 + v93);
          sub_18BBC5C08(this, 0, v94);
          sub_18BBC5834(a1, (UChar **)this, (UChar **)v128);
          icu::UnicodeString::~UnicodeString(v100, (icu::UnicodeString *)v128);
        }
      }
      sub_18BBC47F0(a1, 0, v8);
      if (v43)
LABEL_147:
        (*(void (**)(char *))(*(_QWORD *)v43 + 8))(v43);
      goto LABEL_148;
    }
    memset(v128, 0, 64);
    sub_18BBC58D0(a1, v103, (icu::UnicodeString *)&v118, 1);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v128, &v118);
    if ((v128[8] & 1) == 0)
    {
      sub_18BBC5834(a1, &v123, (UChar **)v128);
      icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v128);
      goto LABEL_45;
    }
LABEL_140:
    v8 = this;
    icu::UnicodeString::setToBogus(this);
    icu::UnicodeString::~UnicodeString(v97, (icu::UnicodeString *)v128);
LABEL_148:
    icu::UnicodeString::~UnicodeString(v98, (icu::UnicodeString *)&v118);
    icu::UnicodeString::~UnicodeString(v101, (icu::UnicodeString *)&v123);
    goto LABEL_149;
  }
  icu::UnicodeString::setToBogus(this);
  return v8;
}

uint64_t sub_18BBC53C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10)
{
  uint64_t v10;
  char *i;
  char v12;
  char **v13;
  uint64_t *v14;

  if (result)
  {
    v14 = &a10;
    v10 = 0;
    for (i = a9; i; i = *v13)
    {
      for (; v10 != 156; *(_BYTE *)(result + v10++) = v12)
      {
        v12 = *i;
        if (!*i)
          break;
        ++i;
      }
      v13 = (char **)v14++;
    }
    *(_BYTE *)(result + v10) = 0;
  }
  return result;
}

uint64_t sub_18BBC5428(uint64_t a1, char *a2, uint64_t a3, int a4)
{
  int v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a1 + 1256);
  if (v8 == 514)
  {
    v9 = a1 + 240;
    v10 = "Languages%variant";
LABEL_5:
    sub_18BBC3D74(v9, v10, 0, a2, a3);
    if ((*(_WORD *)(a3 + 8) & 1) == 0)
      return a3;
    goto LABEL_6;
  }
  if (v8 == 513)
  {
    v9 = a1 + 240;
    v10 = "Languages%short";
    goto LABEL_5;
  }
LABEL_6:
  sub_18BBC3D74(a1 + 240, "Languages", 0, a2, a3);
  if ((*(_WORD *)(a3 + 8) & 1) != 0)
  {
    if (!strchr(a2, 95))
    {
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      memset(v14, 0, sizeof(v14));
      icu::Locale::createCanonical((icu::Locale *)a2, (icu::Locale *)v14);
      v11 = (char *)*((_QWORD *)&v15 + 1);
      if (*(_DWORD *)(a1 + 1256) == 513)
      {
        sub_18BBC3D74(a1 + 240, "Languages%short", 0, *((char **)&v15 + 1), a3);
        if ((*(_WORD *)(a3 + 8) & 1) == 0)
        {
          icu::Locale::~Locale((icu::Locale *)v14);
          return a3;
        }
      }
      sub_18BBC3D74(a1 + 240, "Languages", 0, v11, a3);
      icu::Locale::~Locale((icu::Locale *)v14);
      if ((*(_WORD *)(a3 + 8) & 1) == 0)
        return a3;
    }
    if (a4)
    {
      icu::UnicodeString::UnicodeString(v14, a2, 0xFFFFFFFFLL, 0);
      icu::UnicodeString::copyFrom((UChar **)a3, (UChar **)v14, 0);
      icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v14);
    }
  }
  return a3;
}

icu::UnicodeString *sub_18BBC55F8(uint64_t a1, char *a2, icu::UnicodeString *a3, int a4)
{
  int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  if (!a4)
  {
    sub_18BBC3D74(a1 + 240, "Scripts%stand-alone", 0, a2, (uint64_t)a3);
    if ((*((_WORD *)a3 + 4) & 1) == 0)
      goto LABEL_11;
  }
  v8 = *(_DWORD *)(a1 + 1256);
  if (v8 == 514)
  {
    v9 = a1 + 240;
    v10 = "Scripts%variant";
LABEL_7:
    sub_18BBC3D74(v9, v10, 0, a2, (uint64_t)a3);
    if ((*((_WORD *)a3 + 4) & 1) == 0)
      goto LABEL_10;
    goto LABEL_8;
  }
  if (v8 == 513)
  {
    v9 = a1 + 240;
    v10 = "Scripts%short";
    goto LABEL_7;
  }
LABEL_8:
  v11 = a1 + 240;
  if (*(_DWORD *)(a1 + 1260) != 768)
  {
    sub_18BBC3D74(v11, "Scripts", 0, a2, (uint64_t)a3);
    if (a4)
      return a3;
    goto LABEL_11;
  }
  sub_18BBC3C68(v11, "Scripts", 0, a2, (uint64_t)a3);
LABEL_10:
  if (!a4)
LABEL_11:
    sub_18BBC47F0(a1, 1u, a3);
  return a3;
}

uint64_t sub_18BBC56F0(_DWORD *a1, char *a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;

  if (uaprv_onCalciumDevice())
    v6 = strcmp(a2, "CN") || a1[230] != 259;
  else
    v6 = 0;
  v7 = a1[314];
  if (v7 == 514)
  {
    sub_18BBC3D74((uint64_t)(a1 + 118), "Countries%variant", 0, a2, a3);
    if ((*(_WORD *)(a3 + 8) & 1) == 0)
      return a3;
    v7 = a1[314];
  }
  if (((v7 != 522) & ~v6) != 0
    || (sub_18BBC3D74((uint64_t)(a1 + 118), "Countries%prc", 0, a2, a3), (*(_WORD *)(a3 + 8) & 1) != 0))
  {
    if (!strcmp(a2, "PS")
      || (sub_18BBC3D74((uint64_t)(a1 + 118), "Countries%short", 0, a2, a3), (*(_WORD *)(a3 + 8) & 1) != 0))
    {
      v8 = (uint64_t)(a1 + 118);
      if (a1[315] == 768)
        sub_18BBC3C68(v8, "Countries", 0, a2, a3);
      else
        sub_18BBC3D74(v8, "Countries", 0, a2, a3);
    }
  }
  return a3;
}

UChar **sub_18BBC5834(uint64_t a1, UChar **a2, UChar **a3)
{
  UErrorCode v5;
  icu::UnicodeString *v6[3];

  v6[2] = *(icu::UnicodeString **)MEMORY[0x1E0C80C00];
  if (*((unsigned __int16 *)a2 + 4) <= 0x1Fu)
  {
    icu::UnicodeString::copyFrom(a2, a3, 0);
  }
  else
  {
    v6[0] = (icu::UnicodeString *)a2;
    v6[1] = (icu::UnicodeString *)a3;
    v5 = U_ZERO_ERROR;
    icu::SimpleFormatter::formatAndReplace((icu::SimpleFormatter *)(a1 + 704), v6, 2u, a2, 0, 0, &v5);
  }
  return a2;
}

icu::UnicodeString *sub_18BBC58D0(uint64_t a1, char *a2, icu::UnicodeString *a3, int a4)
{
  int v7;
  uint64_t v8;

  v7 = *(_DWORD *)(a1 + 1260);
  v8 = a1 + 240;
  if (v7 == 768)
  {
    sub_18BBC3C68(v8, "Variants", 0, a2, (uint64_t)a3);
    if (!a4)
      goto LABEL_5;
  }
  else
  {
    sub_18BBC3D74(v8, "Variants", 0, a2, (uint64_t)a3);
    if (!a4)
LABEL_5:
      sub_18BBC47F0(a1, 3u, a3);
  }
  return a3;
}

icu::UnicodeString *sub_18BBC5950(uint64_t a1, char *a2, icu::UnicodeString *a3, int a4)
{
  int v7;
  uint64_t v8;

  v7 = *(_DWORD *)(a1 + 1260);
  v8 = a1 + 240;
  if (v7 == 768)
  {
    sub_18BBC3C68(v8, "Keys", 0, a2, (uint64_t)a3);
    if (!a4)
      goto LABEL_5;
  }
  else
  {
    sub_18BBC3D74(v8, "Keys", 0, a2, (uint64_t)a3);
    if (!a4)
LABEL_5:
      sub_18BBC47F0(a1, 4u, a3);
  }
  return a3;
}

uint64_t sub_18BBC59D0(_DWORD *a1, char *__s1, char *a3, uint64_t a4, int a5)
{
  uint64_t v10;
  const UChar *TerminatedBuffer;
  char *BaseName;
  const UChar *Name;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v22;
  int v23;
  _OWORD v24[4];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!strcmp(__s1, "currency"))
  {
    v23 = 0;
    memset(v24, 0, sizeof(v24));
    icu::UnicodeString::UnicodeString(v24, a3, 0xFFFFFFFFLL, 0);
    v22 = 0;
    TerminatedBuffer = (const UChar *)icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v24);
    BaseName = (char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 2));
    Name = ucurr_getName(TerminatedBuffer, BaseName, 1u, 0, (int *)&v22, &v23);
    if (v23 < 1)
    {
      v15 = (uint64_t)Name;
      v16 = v22;
      icu::UnicodeString::unBogus(a4);
      v17 = *(unsigned __int16 *)(a4 + 8);
      v18 = (__int16)v17;
      v19 = v17 >> 5;
      if (v18 >= 0)
        v20 = v19;
      else
        v20 = *(unsigned int *)(a4 + 12);
      icu::UnicodeString::doReplace(a4, 0, v20, v15, 0, v16);
      if (!a5)
        sub_18BBC47F0((uint64_t)a1, 5u, (icu::UnicodeString *)a4);
    }
    else
    {
      icu::UnicodeString::operator=((UChar **)a4, (UChar **)v24);
    }
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v24);
    return a4;
  }
  if (a1[314] == 513)
  {
    sub_18BBC3D74((uint64_t)(a1 + 60), "Types%short", __s1, a3, a4);
    if ((*(_WORD *)(a4 + 8) & 1) == 0)
      goto LABEL_6;
  }
  v10 = (uint64_t)(a1 + 60);
  if (a1[315] == 768)
  {
    sub_18BBC3C68(v10, "Types", __s1, a3, a4);
LABEL_6:
    if (!a5)
      goto LABEL_11;
    return a4;
  }
  sub_18BBC3D74(v10, "Types", __s1, a3, a4);
  if (!a5)
LABEL_11:
    sub_18BBC47F0((uint64_t)a1, 5u, (icu::UnicodeString *)a4);
  return a4;
}

uint64_t sub_18BBC5BA4(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int32_t v3;
  int32_t v4;
  uint64_t v5;

  v2 = *(unsigned __int16 *)(a2 + 8);
  if ((v2 & 0x8000u) == 0)
    v3 = v2 >> 5;
  else
    v3 = *(_DWORD *)(a2 + 12);
  if (*(__int16 *)(a1 + 8) < 0)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if ((v2 & 1) != 0)
      return 0xFFFFFFFFLL;
  }
  else
  {
    v4 = *(unsigned __int16 *)(a1 + 8) >> 5;
    if ((v2 & 1) != 0)
      return 0xFFFFFFFFLL;
  }
  if (v3 < 1)
    return 0xFFFFFFFFLL;
  if ((v2 & 2) != 0)
    v5 = a2 + 10;
  else
    v5 = *(_QWORD *)(a2 + 24);
  return icu::UnicodeString::indexOf(a1, v5, 0, v3, 0, v4);
}

uint64_t sub_18BBC5C08(icu::UnicodeString *this, uint64_t a2, int a3)
{
  unsigned int v5;
  unsigned int v6;

  v5 = *((unsigned __int16 *)this + 4);
  if (a3 || (v5 & 1) == 0)
  {
    if ((v5 & 0x8000) != 0)
      v6 = *((_DWORD *)this + 3);
    else
      v6 = v5 >> 5;
    if (v6 > a3)
    {
      if (a3 > 1023)
      {
        *((_WORD *)this + 4) = v5 | 0xFFE0;
        *((_DWORD *)this + 3) = a3;
      }
      else
      {
        *((_WORD *)this + 4) = *((_WORD *)this + 4) & 0x1F | (32 * a3);
      }
    }
  }
  else
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }
  return icu::UnicodeString::doReplace((uint64_t)this, 0, a2, 0, 0, 0);
}

uint64_t sub_18BBC5C90(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v7[224];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  icu::Locale::Locale((icu::Locale *)v7, a2, 0, 0, 0);
  v5 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 48))(a1, v7, a3);
  icu::Locale::~Locale((icu::Locale *)v7);
  return v5;
}

icu::UnicodeString *sub_18BBC5D28(uint64_t a1, char *a2, icu::UnicodeString *a3)
{
  void *v6;
  int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  _OWORD v13[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (strcmp("root", a2) && !strchr(a2, 95))
  {
    v7 = *(_DWORD *)(a1 + 1256);
    if (v7 == 514)
    {
      v8 = a1 + 240;
      v9 = "Languages%variant";
    }
    else
    {
      if (v7 != 513)
      {
LABEL_9:
        sub_18BBC3D74(a1 + 240, "Languages", 0, a2, (uint64_t)a3);
        if ((*((_WORD *)a3 + 4) & 1) != 0)
        {
          v24 = 0u;
          v25 = 0u;
          v22 = 0u;
          v23 = 0u;
          v20 = 0u;
          v21 = 0u;
          v18 = 0u;
          v19 = 0u;
          v16 = 0u;
          v17 = 0u;
          v14 = 0u;
          v15 = 0u;
          memset(v13, 0, sizeof(v13));
          icu::Locale::createCanonical((icu::Locale *)a2, (icu::Locale *)v13);
          v10 = (char *)*((_QWORD *)&v14 + 1);
          if (*(_DWORD *)(a1 + 1256) == 513)
          {
            sub_18BBC3D74(a1 + 240, "Languages%short", 0, *((char **)&v14 + 1), (uint64_t)a3);
            if ((*((_WORD *)a3 + 4) & 1) == 0)
            {
              sub_18BBC47F0(a1, 0, a3);
              icu::Locale::~Locale((icu::Locale *)v13);
              return a3;
            }
          }
          sub_18BBC3D74(a1 + 240, "Languages", 0, v10, (uint64_t)a3);
          icu::Locale::~Locale((icu::Locale *)v13);
          if ((*((_WORD *)a3 + 4) & 1) != 0 && *(_DWORD *)(a1 + 1260) == 768)
          {
            icu::UnicodeString::UnicodeString(v13, a2, 0xFFFFFFFFLL, 0);
            icu::UnicodeString::copyFrom((UChar **)a3, (UChar **)v13, 0);
            icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v13);
          }
        }
LABEL_16:
        sub_18BBC47F0(a1, 0, a3);
        return a3;
      }
      v8 = a1 + 240;
      v9 = "Languages%short";
    }
    sub_18BBC3D74(v8, v9, 0, a2, (uint64_t)a3);
    if ((*((_WORD *)a3 + 4) & 1) == 0)
      goto LABEL_16;
    goto LABEL_9;
  }
  icu::UnicodeString::UnicodeString(v13, a2, 0xFFFFFFFFLL, 0);
  a3 = icu::UnicodeString::operator=(a3, (icu::UnicodeString *)v13);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v13);
  return a3;
}

icu::UnicodeString *sub_18BBC5F44(uint64_t a1, char *a2, icu::UnicodeString *a3)
{
  return sub_18BBC55F8(a1, a2, a3, 0);
}

icu::UnicodeString *sub_18BBC5F4C(uint64_t a1, int32_t value, icu::UnicodeString *a3)
{
  char *Name;

  Name = (char *)uscript_getName(value);
  return sub_18BBC55F8(a1, Name, a3, 0);
}

icu::UnicodeString *sub_18BBC5F84(_DWORD *a1, char *a2, icu::UnicodeString *a3, int a4)
{
  _BOOL4 v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  if (uaprv_onCalciumDevice())
    v8 = strcmp(a2, "CN") || a1[230] != 259;
  else
    v8 = 0;
  v9 = a1[314];
  switch(v9)
  {
    case 522:
      goto LABEL_12;
    case 514:
      v10 = (uint64_t)(a1 + 118);
      v11 = "Countries%variant";
      goto LABEL_13;
    case 513:
      v10 = (uint64_t)(a1 + 118);
      v11 = "Countries%short";
      goto LABEL_13;
  }
  if (v8)
  {
LABEL_12:
    v10 = (uint64_t)(a1 + 118);
    v11 = "Countries%prc";
LABEL_13:
    sub_18BBC3D74(v10, v11, 0, a2, (uint64_t)a3);
    if ((*((_WORD *)a3 + 4) & 1) == 0)
      goto LABEL_16;
  }
  v12 = (uint64_t)(a1 + 118);
  if (a1[315] != 768)
  {
    sub_18BBC3D74(v12, "Countries", 0, a2, (uint64_t)a3);
    if (a4)
      return a3;
    goto LABEL_17;
  }
  sub_18BBC3C68(v12, "Countries", 0, a2, (uint64_t)a3);
LABEL_16:
  if (!a4)
LABEL_17:
    sub_18BBC47F0((uint64_t)a1, 2u, a3);
  return a3;
}

icu::UnicodeString *sub_18BBC60A8(_DWORD *a1, char *a2, icu::UnicodeString *a3)
{
  return sub_18BBC5F84(a1, a2, a3, 0);
}

icu::UnicodeString *sub_18BBC60B0(uint64_t a1, char *a2, icu::UnicodeString *a3)
{
  return sub_18BBC58D0(a1, a2, a3, 0);
}

icu::UnicodeString *sub_18BBC60B8(uint64_t a1, char *a2, icu::UnicodeString *a3)
{
  return sub_18BBC5950(a1, a2, a3, 0);
}

uint64_t sub_18BBC60C0(_DWORD *a1, char *a2, char *a3, uint64_t a4)
{
  return sub_18BBC59D0(a1, a2, a3, a4, 0);
}

uint64_t icu::LocaleDisplayNames::createInstance(uint64_t a1, unint64_t a2)
{
  int v2;
  uint64_t result;

  v2 = a2;
  result = icu::UMemory::operator new((icu::UMemory *)0x4F8, a2);
  if (result)
    return sub_18BBC3E34(result, a1, v2);
  return result;
}

uint64_t icu::LocaleDisplayNames::createInstance(uint64_t a1, unsigned int *a2, int a3)
{
  uint64_t result;
  int v7;

  result = icu::UMemory::operator new((icu::UMemory *)0x4F8, (unint64_t)a2);
  if (result)
  {
    if (a2)
      v7 = a3;
    else
      v7 = 0;
    return sub_18BBC4550(result, a1, a2, v7);
  }
  return result;
}

uint64_t uldn_open(const char *a1, unint64_t a2, int *a3)
{
  uint64_t Instance;
  const char *Default;
  _BYTE v7[224];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*a3 > 0)
    return 0;
  Default = a1;
  if (!a1)
    Default = (const char *)uloc_getDefault(0);
  icu::Locale::Locale((icu::Locale *)v7, Default, 0, 0, 0);
  Instance = icu::LocaleDisplayNames::createInstance((uint64_t)v7, a2);
  icu::Locale::~Locale((icu::Locale *)v7);
  return Instance;
}

uint64_t uldn_openForContext(const char *a1, unsigned int *a2, int a3, int *a4)
{
  uint64_t Instance;
  const char *Default;
  _BYTE v9[224];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*a4 > 0)
    return 0;
  Default = a1;
  if (!a1)
    Default = (const char *)uloc_getDefault(0);
  icu::Locale::Locale((icu::Locale *)v9, Default, 0, 0, 0);
  Instance = icu::LocaleDisplayNames::createInstance((uint64_t)v9, a2, a3);
  icu::Locale::~Locale((icu::Locale *)v9);
  return Instance;
}

uint64_t uldn_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t uldn_getLocale(uint64_t result)
{
  if (result)
    return *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result) + 40);
  return result;
}

uint64_t uldn_getDialectHandling(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t uldn_getContext(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  else
    return 0;
}

uint64_t uldn_localeDisplayName(uint64_t a1, uint64_t a2, UChar *a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  int v9;
  BOOL v11;
  int v12;
  uint64_t v13;
  UChar *v15;
  UChar *v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return 0;
  if (!a1
    || !a2
    || ((v9 = a4, !a3) ? (v11 = (int)a4 <= 0) : (v11 = 1), v11 ? (v12 = 0) : (v12 = 1), (a4 & 0x80000000) != 0 || v12))
  {
    v5 = 0;
    *a5 = 1;
  }
  else
  {
    memset(v17, 0, sizeof(v17));
    icu::UnicodeString::UnicodeString(v17, a3, 0, a4);
    (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)a1 + 56))(a1, a2, v17);
    if ((BYTE8(v17[0]) & 1) != 0)
    {
      v5 = 0;
      v13 = 1;
      *a5 = 1;
    }
    else
    {
      v16 = a3;
      v5 = icu::UnicodeString::extract((uint64_t)v17, &v16, v9, a5);
      v15 = v16;
      v13 = (uint64_t)&v15;
    }
    icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v17);
  }
  return v5;
}

uint64_t uldn_languageDisplayName(uint64_t a1, uint64_t a2, UChar *a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  int v9;
  BOOL v11;
  int v12;
  UChar *v14;
  UChar *v15;
  _OWORD v16[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return 0;
  if (!a1
    || !a2
    || ((v9 = a4, !a3) ? (v11 = (int)a4 <= 0) : (v11 = 1), v11 ? (v12 = 0) : (v12 = 1), (a4 & 0x80000000) != 0 || v12))
  {
    v5 = 0;
    *a5 = 1;
  }
  else
  {
    memset(v16, 0, sizeof(v16));
    icu::UnicodeString::UnicodeString(v16, a3, 0, a4);
    (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)a1 + 64))(a1, a2, v16);
    v15 = a3;
    v5 = icu::UnicodeString::extract((uint64_t)v16, &v15, v9, a5);
    v14 = v15;
    icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)v16);
  }
  return v5;
}

uint64_t uldn_scriptDisplayName(uint64_t a1, uint64_t a2, UChar *a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  int v9;
  BOOL v11;
  int v12;
  UChar *v14;
  UChar *v15;
  _OWORD v16[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return 0;
  if (!a1
    || !a2
    || ((v9 = a4, !a3) ? (v11 = (int)a4 <= 0) : (v11 = 1), v11 ? (v12 = 0) : (v12 = 1), (a4 & 0x80000000) != 0 || v12))
  {
    v5 = 0;
    *a5 = 1;
  }
  else
  {
    memset(v16, 0, sizeof(v16));
    icu::UnicodeString::UnicodeString(v16, a3, 0, a4);
    (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)a1 + 72))(a1, a2, v16);
    v15 = a3;
    v5 = icu::UnicodeString::extract((uint64_t)v16, &v15, v9, a5);
    v14 = v15;
    icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)v16);
  }
  return v5;
}

uint64_t uldn_scriptCodeDisplayName(uint64_t a1, int32_t value, UChar *a3, uint64_t a4, int *a5)
{
  const char *Name;

  Name = uscript_getName(value);
  return uldn_scriptDisplayName(a1, (uint64_t)Name, a3, a4, a5);
}

uint64_t uldn_regionDisplayName(uint64_t a1, uint64_t a2, UChar *a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  int v9;
  BOOL v11;
  int v12;
  UChar *v14;
  UChar *v15;
  _OWORD v16[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return 0;
  if (!a1
    || !a2
    || ((v9 = a4, !a3) ? (v11 = (int)a4 <= 0) : (v11 = 1), v11 ? (v12 = 0) : (v12 = 1), (a4 & 0x80000000) != 0 || v12))
  {
    v5 = 0;
    *a5 = 1;
  }
  else
  {
    memset(v16, 0, sizeof(v16));
    icu::UnicodeString::UnicodeString(v16, a3, 0, a4);
    (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)a1 + 88))(a1, a2, v16);
    v15 = a3;
    v5 = icu::UnicodeString::extract((uint64_t)v16, &v15, v9, a5);
    v14 = v15;
    icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)v16);
  }
  return v5;
}

uint64_t uldn_variantDisplayName(uint64_t a1, uint64_t a2, UChar *a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  int v9;
  BOOL v11;
  int v12;
  UChar *v14;
  UChar *v15;
  _OWORD v16[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return 0;
  if (!a1
    || !a2
    || ((v9 = a4, !a3) ? (v11 = (int)a4 <= 0) : (v11 = 1), v11 ? (v12 = 0) : (v12 = 1), (a4 & 0x80000000) != 0 || v12))
  {
    v5 = 0;
    *a5 = 1;
  }
  else
  {
    memset(v16, 0, sizeof(v16));
    icu::UnicodeString::UnicodeString(v16, a3, 0, a4);
    (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)a1 + 96))(a1, a2, v16);
    v15 = a3;
    v5 = icu::UnicodeString::extract((uint64_t)v16, &v15, v9, a5);
    v14 = v15;
    icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)v16);
  }
  return v5;
}

uint64_t uldn_keyDisplayName(uint64_t a1, uint64_t a2, UChar *a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  int v9;
  BOOL v11;
  int v12;
  UChar *v14;
  UChar *v15;
  _OWORD v16[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return 0;
  if (!a1
    || !a2
    || ((v9 = a4, !a3) ? (v11 = (int)a4 <= 0) : (v11 = 1), v11 ? (v12 = 0) : (v12 = 1), (a4 & 0x80000000) != 0 || v12))
  {
    v5 = 0;
    *a5 = 1;
  }
  else
  {
    memset(v16, 0, sizeof(v16));
    icu::UnicodeString::UnicodeString(v16, a3, 0, a4);
    (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)a1 + 104))(a1, a2, v16);
    v15 = a3;
    v5 = icu::UnicodeString::extract((uint64_t)v16, &v15, v9, a5);
    v14 = v15;
    icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)v16);
  }
  return v5;
}

uint64_t uldn_keyValueDisplayName(uint64_t a1, uint64_t a2, uint64_t a3, UChar *a4, uint64_t a5, int *a6)
{
  uint64_t v6;
  int v11;
  BOOL v13;
  int v14;
  UChar *v16;
  UChar *v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*a6 > 0)
    return 0;
  if (a1
    && a2
    && a3
    && ((v11 = a5, !a4) ? (v13 = (int)a5 <= 0) : (v13 = 1), v13 ? (v14 = 0) : (v14 = 1), (a5 & 0x80000000) == 0 && !v14))
  {
    memset(v18, 0, sizeof(v18));
    icu::UnicodeString::UnicodeString(v18, a4, 0, a5);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(*(_QWORD *)a1 + 112))(a1, a2, a3, v18);
    v17 = a4;
    v6 = icu::UnicodeString::extract((uint64_t)v18, &v17, v11, a6);
    v16 = v17;
    icu::UnicodeString::~UnicodeString(&v16, (icu::UnicodeString *)v18);
  }
  else
  {
    v6 = 0;
    *a6 = 1;
  }
  return v6;
}

_QWORD *sub_18BBC6B44(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  _QWORD *result;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _OWORD v14[2];
  uint64_t v15;
  char *__s1;

  v15 = 0;
  __s1 = a2;
  memset(v14, 0, sizeof(v14));
  result = (*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 88))(v14, a3, a5);
  if (*a5 <= 0)
  {
    result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v14, 0, (const char **)&__s1, a3);
    if ((_DWORD)result)
    {
      v9 = 1;
      while (1)
      {
        v10 = __s1;
        if (!strcmp(__s1, "key"))
          break;
        if (!strcmp(v10, "keyValue"))
        {
          v11 = 5;
          goto LABEL_17;
        }
        if (!strcmp(v10, "languages"))
        {
          v11 = 0;
          goto LABEL_17;
        }
        if (!strcmp(v10, "script"))
        {
          v11 = 1;
          goto LABEL_17;
        }
        if (!strcmp(v10, "territory"))
        {
          v11 = 2;
          goto LABEL_17;
        }
        if (!strcmp(v10, "variant"))
        {
          v11 = 3;
LABEL_17:
          v13 = 0;
          result = (_QWORD *)(*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(_QWORD *)a3 + 64))(a3, &v13, a5);
          if (*a5 > 0)
            return result;
          if (v13 >= 2)
          {
            v12 = *(_QWORD *)(a1 + 16);
            if (*((_DWORD *)result + (*(_DWORD *)(v12 + 920) != 259)))
            {
              *(_BYTE *)(v12 + v11 + 1264) = 1;
              *(_BYTE *)(a1 + 8) = 1;
            }
          }
        }
        result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v14, v9++, (const char **)&__s1, a3);
        if (!(_DWORD)result)
          return result;
      }
      v11 = 4;
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t *sub_18BBC6D10(char *a1, int *a2)
{
  char *DefaultLocaleID;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  int32x2_t *v9;
  uint64_t *v10;
  _QWORD v11[2];
  char *v12[9];

  v12[8] = *(char **)MEMORY[0x1E0C80C00];
  umtx_lock((icu::UMutex *)&unk_1ECD27310);
  DefaultLocaleID = a1;
  if (!a1)
    DefaultLocaleID = (char *)uprv_getDefaultLocaleID();
  memset(&v12[1], 0, 56);
  v11[1] = 0;
  v12[0] = (char *)&v12[1] + 5;
  LODWORD(v12[1]) = 40;
  v11[0] = 0;
  icu::CharStringByteSink::CharStringByteSink(v11, (uint64_t)v12);
  if (a1)
    ulocimp_getName(DefaultLocaleID);
  else
    ulocimp_canonicalize(DefaultLocaleID);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v11);
  if (*a2 >= 1)
    goto LABEL_7;
  v6 = qword_1ECD27300;
  if (!qword_1ECD27300)
  {
    v9 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0, a2);
    qword_1ECD27300 = (uint64_t)v9;
    if (*a2 >= 1)
      goto LABEL_7;
    uhash_setValueDeleter((uint64_t)v9, (uint64_t)sub_18BBC6EFC);
    sub_18BC0ECC4(7u, (uint64_t)sub_18BBC6F10);
    v6 = qword_1ECD27300;
  }
  v5 = (uint64_t *)uhash_get(v6, (uint64_t)v12[0]);
  if (!v5)
  {
    v10 = (uint64_t *)icu::UMemory::operator new((icu::UMemory *)0xE0, v7);
    if (v10)
    {
      v5 = v10;
      *v10 = (uint64_t)off_1E2247310;
      v10[5] = (uint64_t)(v10 + 6);
      v10[26] = 0;
      icu::Locale::setToBogus((icu::Locale *)v10);
      icu::Locale::init((icu::Locale *)v5, v12[0], 0);
      uhash_put(qword_1ECD27300, v5[5], (uint64_t)v5, a2);
      if (*a2 < 1)
        goto LABEL_10;
    }
    else
    {
      *a2 = 7;
    }
LABEL_7:
    v5 = (uint64_t *)qword_1ECD272F8;
    goto LABEL_11;
  }
LABEL_10:
  qword_1ECD272F8 = (uint64_t)v5;
LABEL_11:
  if (BYTE4(v12[1]))
    uprv_free(v12[0]);
  umtx_unlock((std::mutex **)&unk_1ECD27310);
  return v5;
}

uint64_t sub_18BBC6EFC(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_18BBC6F10()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (qword_1ECD27308)
  {
    v0 = (void *)(qword_1ECD27308 - 16);
    v1 = *(_QWORD *)(qword_1ECD27308 - 8);
    if (v1)
    {
      v2 = qword_1ECD27308 - 224;
      v3 = 224 * v1;
      do
      {
        icu::Locale::~Locale((icu::Locale *)(v2 + v3));
        v3 -= 224;
      }
      while (v3);
    }
    icu::UMemory::operator delete[](v0);
  }
  qword_1ECD27308 = 0;
  atomic_store(0, &dword_1ECD27360);
  if (qword_1ECD27300)
  {
    uhash_close((void **)qword_1ECD27300);
    qword_1ECD27300 = 0;
  }
  qword_1ECD272F8 = 0;
  return 1;
}

icu::Locale *icu::Locale::Locale(icu::Locale *a1)
{
  *(_QWORD *)a1 = off_1E2247310;
  *((_QWORD *)a1 + 5) = (char *)a1 + 48;
  *((_QWORD *)a1 + 26) = 0;
  icu::Locale::setToBogus(a1);
  return a1;
}

{
  *(_QWORD *)a1 = off_1E2247310;
  *((_QWORD *)a1 + 5) = (char *)a1 + 48;
  *((_QWORD *)a1 + 26) = 0;
  icu::Locale::setToBogus(a1);
  return a1;
}

icu::Locale *icu::Locale::init(icu::Locale *this, char *a2, int a3)
{
  char *v6;
  char *v7;
  char *v8;
  char *v10;
  char *v11;
  int Name;
  uint64_t Default;
  int v14;
  int v15;
  char *v16;
  int v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  BOOL v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  const char *v37;
  unsigned int v38;
  int32x2_t *v39;
  UErrorCode v40;
  unint64_t v41;
  UErrorCode v42;
  int v43;
  UErrorCode v44;
  char *v45[8];
  size_t __n;
  size_t v47;
  int v48;
  _OWORD v49[2];
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 216) = 0;
  v6 = (char *)*((_QWORD *)this + 26);
  v7 = (char *)*((_QWORD *)this + 5);
  v8 = (char *)this + 48;
  if (v6 != v7 && v6 != v8)
  {
    uprv_free(v6);
    v7 = (char *)*((_QWORD *)this + 5);
  }
  *((_QWORD *)this + 26) = 0;
  if (v7 != v8)
  {
    uprv_free(v7);
    *((_QWORD *)this + 5) = v8;
  }
  v50 = 0;
  memset(v49, 0, sizeof(v49));
  __n = 0;
  v47 = 0;
  v48 = 0;
  if (!a2)
  {
    Default = icu::Locale::getDefault((icu::Locale *)v7);
    icu::Locale::operator=(this, Default);
    return this;
  }
  *((_BYTE *)this + 26) = 0;
  *((_BYTE *)this + 20) = 0;
  *((_BYTE *)this + 8) = 0;
  v10 = (char *)this + 8;
  v44 = U_ZERO_ERROR;
  v11 = (char *)this + 48;
  if (a3)
    Name = uloc_canonicalize(a2, v11, 157, (int *)&v44);
  else
    Name = uloc_getName(a2, v11, 157, (int *)&v44);
  v14 = Name;
  if (v44 == U_BUFFER_OVERFLOW_ERROR || Name >= 157)
  {
    v15 = Name + 1;
    v16 = (char *)uprv_malloc(Name + 1);
    *((_QWORD *)this + 5) = v16;
    if (!v16)
    {
      *((_QWORD *)this + 5) = v8;
      goto LABEL_63;
    }
    v44 = U_ZERO_ERROR;
    if (a3)
      v17 = uloc_canonicalize(a2, v16, v15, (int *)&v44);
    else
      v17 = uloc_getName(a2, v16, v15, (int *)&v44);
    v14 = v17;
  }
  if (v44 > U_ZERO_ERROR || v44 == U_STRING_NOT_TERMINATED_WARNING)
    goto LABEL_63;
  *((_DWORD *)this + 8) = v14;
  v18 = (char *)*((_QWORD *)this + 5);
  *(_QWORD *)&v49[0] = v18;
  v19 = strchr(v18, 64);
  v20 = strchr(v18, 95);
  if (v20 && (!v19 || v20 < v19))
  {
    v43 = a3;
    v23 = 0;
    while (1)
    {
      v24 = (_QWORD *)v49 + v23;
      v21 = v23 + 1;
      v22 = v20 + 1;
      v24[1] = v20 + 1;
      *((_DWORD *)&__n + v23) = (_DWORD)v20 - *v24;
      v20 = strchr(v20 + 1, 95);
      if ((unint64_t)(v23 + 1) > 2)
        break;
      if (!v20)
        break;
      ++v23;
      if (v19)
      {
        if (v20 >= v19)
          break;
      }
    }
    a3 = v43;
    v10 = (char *)this + 8;
  }
  else
  {
    v21 = 0;
    v22 = v18;
  }
  v25 = strchr(v22, 64);
  v26 = strchr(v22, 46);
  v27 = v25 <= v26 || v26 == 0;
  v28 = !v27 || v25 == 0;
  v29 = v28 ? (int)v26 : (int)v25;
  v30 = v29 - (_DWORD)v22;
  v31 = (unint64_t)v25 | (unint64_t)v26 ? v30 : v14 + (_DWORD)v18 - (_DWORD)v22;
  *((_DWORD *)&__n + v21) = v31;
  v32 = __n;
  if ((int)__n > 11)
    goto LABEL_63;
  if ((int)__n >= 1)
  {
    memcpy(v10, v18, __n);
    *((_BYTE *)this + v32 + 8) = 0;
  }
  v33 = HIDWORD(__n);
  if (HIDWORD(__n) == 4)
  {
    v34 = *((_QWORD *)&v49[0] + 1);
    if (!uprv_isASCIILetter(**((_BYTE **)&v49[0] + 1))
      || !uprv_isASCIILetter(*(_BYTE *)(v34 + 1))
      || !uprv_isASCIILetter(*(_BYTE *)(v34 + 2))
      || !uprv_isASCIILetter(*(_BYTE *)(v34 + 3)))
    {
      v35 = 1;
      goto LABEL_60;
    }
    *((_DWORD *)this + 5) = *(_DWORD *)v34;
    *((_BYTE *)this + 24) = 0;
    v35 = 2;
    v33 = v47;
  }
  else
  {
    v35 = 1;
  }
  if (v33 - 2 >= 2)
  {
    if (v33)
      goto LABEL_60;
  }
  else
  {
    memcpy((char *)this + 26, *((const void **)v49 + v35), v33);
    *((_BYTE *)this + v33 + 26) = 0;
  }
  ++v35;
LABEL_60:
  if (*((int *)&__n + v35) >= 1)
    *((_DWORD *)this + 8) = *((_QWORD *)v49 + v35) - *((_DWORD *)this + 10);
  v44 = U_ZERO_ERROR;
  icu::Locale::initBaseName((char **)this, &v44);
  if (v44 > U_ZERO_ERROR)
    goto LABEL_63;
  if (a3)
  {
    v37 = (const char *)*((_QWORD *)this + 5);
    if (strcmp(v37, "c"))
    {
      if (strcmp(v37, "en") && strcmp(v37, "en_US"))
      {
        v38 = atomic_load(&dword_1EE009308);
        if (v38 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009308))
        {
          if (dword_1EE00930C >= 1)
          {
            v44 = dword_1EE00930C;
            goto LABEL_83;
          }
        }
        else
        {
          sub_18BC0ECC4(9u, (uint64_t)sub_18BBCBC2C);
          v39 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0, (int *)&v44);
          v40 = v44;
          if (v44 > U_ZERO_ERROR)
            goto LABEL_76;
          v41 = 0;
          do
          {
            uhash_puti((uint64_t)v39, (uint64_t)off_1E2247328[v41], 1u, (int *)&v44);
            v40 = v44;
            if (v41 > 0xB0)
              break;
            ++v41;
          }
          while (v44 < U_ILLEGAL_ARGUMENT_ERROR);
          if (v44 < U_ILLEGAL_ARGUMENT_ERROR)
          {
            qword_1EE009300 = (uint64_t)v39;
          }
          else
          {
LABEL_76:
            if (v39)
            {
              uhash_close((void **)v39);
              v40 = v44;
            }
          }
          dword_1EE00930C = v40;
          icu::umtx_initImplPostInit(&dword_1EE009308);
        }
        if (v44 <= U_ZERO_ERROR && uhash_geti(qword_1EE009300, (uint64_t)v37))
          return this;
LABEL_83:
        memset(&v45[1], 0, 56);
        v45[0] = (char *)&v45[1] + 5;
        LODWORD(v45[1]) = 40;
        if (sub_18BBC7DA4((uint64_t)this, (icu::CharString *)v45, (int *)&v44))
          icu::Locale::init(this, v45[0], 0);
        v42 = v44;
        if (BYTE4(v45[1]))
          uprv_free(v45[0]);
        if (v42 < U_ILLEGAL_ARGUMENT_ERROR)
          return this;
LABEL_63:
        icu::Locale::setToBogus(this);
      }
    }
  }
  return this;
}

uint64_t *sub_18BBC751C(char *a1)
{
  int v2;

  v2 = 0;
  return sub_18BBC6D10(a1, &v2);
}

uint64_t uloc_getDefault_0(icu::Locale *a1)
{
  return icu::Locale::getDefault(a1)[5];
}

uint64_t *icu::Locale::getDefault(icu::Locale *this)
{
  uint64_t v1;
  int v3;

  umtx_lock((icu::UMutex *)&unk_1ECD27310);
  v1 = qword_1ECD272F8;
  umtx_unlock((std::mutex **)&unk_1ECD27310);
  if (!v1)
  {
    v3 = 0;
    return sub_18BBC6D10(0, &v3);
  }
  return (uint64_t *)v1;
}

void *icu::Locale::getStaticClassID(icu::Locale *this)
{
  return &unk_1EE0092E8;
}

void *icu::Locale::getDynamicClassID(icu::Locale *this)
{
  return &unk_1EE0092E8;
}

void icu::Locale::~Locale(icu::Locale *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = off_1E2247310;
  v2 = (char *)*((_QWORD *)this + 26);
  v3 = (char *)*((_QWORD *)this + 5);
  v4 = (char *)this + 48;
  if (v2 != v3 && v2 != v4)
  {
    uprv_free(v2);
    v3 = (char *)*((_QWORD *)this + 5);
  }
  *((_QWORD *)this + 26) = 0;
  if (v3 != v4)
  {
    uprv_free(v3);
    *((_QWORD *)this + 5) = 0;
  }
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::Locale::~Locale(this);
  icu::UMemory::operator delete(v1);
}

icu::Locale *icu::Locale::Locale(icu::Locale *this)
{
  *(_QWORD *)this = off_1E2247310;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 26) = 0;
  return icu::Locale::init(this, 0, 0);
}

uint64_t icu::Locale::Locale(icu::Locale *this)
{
  *(_QWORD *)this = off_1E2247310;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 26) = 0;
  return icu::Locale::init(this, 0, 0);
}

void icu::Locale::setToBogus(icu::Locale *this)
{
  char *v2;
  char *v3;
  char *v4;

  v2 = (char *)*((_QWORD *)this + 26);
  v3 = (char *)*((_QWORD *)this + 5);
  v4 = (char *)this + 48;
  if (v2 != v3 && v2 != v4)
  {
    uprv_free(v2);
    v3 = (char *)*((_QWORD *)this + 5);
  }
  *((_QWORD *)this + 26) = 0;
  if (v3 != v4)
  {
    uprv_free(v3);
    *((_QWORD *)this + 5) = v4;
  }
  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 20) = 0;
  *((_BYTE *)this + 26) = 0;
  *((_BYTE *)this + 216) = 1;
  *((_DWORD *)this + 8) = 0;
}

icu::Locale *icu::Locale::Locale(icu::Locale *this, const char *__s, const char *a3, const char *a4, char *a5)
{
  const char *v6;
  unsigned int v10;
  unsigned int v11;
  const char *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  icu::CharString *v19;
  char v20;
  char *v22;
  int v23;
  char *v24;
  int v25;
  UErrorCode v26;
  char *v27[9];

  v6 = a4;
  v27[8] = *(char **)MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E2247310;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 26) = 0;
  if (!__s && !a3 && !a4)
  {
    icu::Locale::init(this, 0, 0);
    return this;
  }
  v26 = U_ZERO_ERROR;
  if (__s)
  {
    v10 = strlen(__s);
    if (v10 > 0x15555555)
    {
      icu::Locale::setToBogus(this);
      return this;
    }
  }
  else
  {
    v10 = 0;
  }
  memset(&v27[1], 0, 56);
  v27[0] = (char *)&v27[1] + 5;
  LODWORD(v27[1]) = 40;
  icu::CharString::append((icu::CharString *)v27, __s, v10, &v26);
  if (a3)
  {
    v11 = strlen(a3);
    if (v11 > 0x15555555)
    {
LABEL_41:
      icu::Locale::setToBogus(this);
      goto LABEL_42;
    }
    if (!v6)
      goto LABEL_23;
  }
  else
  {
    v11 = 0;
    if (!v6)
    {
LABEL_23:
      v12 = 0;
      v15 = 0;
      goto LABEL_24;
    }
  }
  do
  {
    v12 = v6;
    v13 = *(unsigned __int8 *)v6++;
  }
  while (v13 == 95);
  v14 = strlen(v12);
  if (v14 > 0x15555555)
    goto LABEL_41;
  if (v14 >= 1)
    v15 = 1;
  else
    v15 = v14;
  v16 = v14 - 2;
  while (v14 >= 2)
  {
    v17 = v6[v16--];
    --v14;
    if (v17 != 95)
    {
      v15 = v14 + 1;
      break;
    }
  }
LABEL_24:
  if (a5)
  {
    v18 = strlen(a5);
    if (v18 > 0x15555555)
      goto LABEL_41;
  }
  else
  {
    v18 = 0;
  }
  if (v15 | v11)
    icu::CharString::append((icu::CharString *)v27, 95, &v26);
  if (v11)
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v24, a3);
    icu::CharString::append((icu::CharString *)v27, v24, v25, &v26);
  }
  if (v15)
  {
    v19 = icu::CharString::append((icu::CharString *)v27, 95, &v26);
    icu::CharString::append(v19, v12, v15, &v26);
  }
  if (v18)
  {
    if (strchr(a5, 61))
    {
      v20 = 64;
    }
    else
    {
      v20 = 95;
      icu::CharString::append((icu::CharString *)v27, 95, &v26);
      if (v15)
        goto LABEL_39;
    }
    icu::CharString::append((icu::CharString *)v27, v20, &v26);
LABEL_39:
    icu::StringPiece::StringPiece((icu::StringPiece *)&v22, a5);
    icu::CharString::append((icu::CharString *)v27, v22, v23, &v26);
  }
  if (v26 >= U_ILLEGAL_ARGUMENT_ERROR)
    goto LABEL_41;
  icu::Locale::init(this, v27[0], 0);
LABEL_42:
  if (BYTE4(v27[1]))
    uprv_free(v27[0]);
  return this;
}

icu::Locale *icu::Locale::Locale(icu::Locale *this, uint64_t a2)
{
  *(_QWORD *)this = off_1E2247310;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 26) = 0;
  return icu::Locale::operator=(this, a2);
}

{
  *(_QWORD *)this = off_1E2247310;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 26) = 0;
  return icu::Locale::operator=(this, a2);
}

icu::Locale *icu::Locale::operator=(icu::Locale *this, uint64_t a2)
{
  const char *v4;
  void *v5;
  const char *v6;
  void *v7;

  if (this != (icu::Locale *)a2)
  {
    icu::Locale::setToBogus(this);
    v4 = *(const char **)(a2 + 40);
    if (v4 == (const char *)(a2 + 48))
    {
      strcpy((char *)this + 48, v4);
    }
    else if (v4)
    {
      v5 = uprv_strdup(*(const char **)(a2 + 40));
      *((_QWORD *)this + 5) = v5;
      if (!v5)
        return this;
    }
    else
    {
      *((_QWORD *)this + 5) = 0;
    }
    v6 = *(const char **)(a2 + 208);
    if (v6 == *(const char **)(a2 + 40))
    {
      *((_QWORD *)this + 26) = *((_QWORD *)this + 5);
    }
    else if (v6)
    {
      v7 = uprv_strdup(v6);
      *((_QWORD *)this + 26) = v7;
      if (!v7)
        return this;
    }
    strcpy((char *)this + 8, (const char *)(a2 + 8));
    strcpy((char *)this + 20, (const char *)(a2 + 20));
    strcpy((char *)this + 26, (const char *)(a2 + 26));
    *((_DWORD *)this + 8) = *(_DWORD *)(a2 + 32);
    *((_BYTE *)this + 216) = *(_BYTE *)(a2 + 216);
  }
  return this;
}

uint64_t icu::Locale::Locale(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1E2247310;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)(a1 + 208) = a1 + 48;
  return icu::Locale::operator=(a1, a2);
}

{
  *(_QWORD *)a1 = off_1E2247310;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)(a1 + 208) = a1 + 48;
  return icu::Locale::operator=(a1, a2);
}

uint64_t icu::Locale::operator=(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(void **)(a1 + 208);
  v5 = *(void **)(a1 + 40);
  v6 = (void *)(a1 + 48);
  if (v4 != v5 && v4 != v6)
  {
    uprv_free(v4);
    v5 = *(void **)(a1 + 40);
  }
  if (v5 != v6)
    uprv_free(v5);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = a2 + 48;
  v10 = *(_QWORD *)(a2 + 208);
  if (v8 == a2 + 48 || v10 == v9)
  {
    strcpy((char *)(a1 + 48), (const char *)(a2 + 48));
    v8 = *(_QWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 208);
  }
  if (v8 == v9)
    v8 = a1 + 48;
  *(_QWORD *)(a1 + 40) = v8;
  if (v10 != *(_QWORD *)(a2 + 40))
    v8 = v10;
  if (v10 == v9)
    v12 = a1 + 48;
  else
    v12 = v8;
  *(_QWORD *)(a1 + 208) = v12;
  strcpy((char *)(a1 + 8), (const char *)(a2 + 8));
  strcpy((char *)(a1 + 20), (const char *)(a2 + 20));
  strcpy((char *)(a1 + 26), (const char *)(a2 + 26));
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 208) = v9;
  return a1;
}

icu::Locale *icu::Locale::clone(icu::Locale *this, unint64_t a2)
{
  icu::Locale *result;

  result = (icu::Locale *)icu::UMemory::operator new((icu::UMemory *)0xE0, a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2247310;
    *((_QWORD *)result + 5) = (char *)result + 48;
    *((_QWORD *)result + 26) = 0;
    return icu::Locale::operator=(result, (uint64_t)this);
  }
  return result;
}

BOOL icu::Locale::operator==(uint64_t a1, uint64_t a2)
{
  return strcmp(*(const char **)(a2 + 40), *(const char **)(a1 + 40)) == 0;
}

char **ulocimp_getKnownCanonicalizedLocaleForTest(_DWORD *a1)
{
  *a1 = 178;
  return off_1E2247328;
}

uint64_t ulocimp_isCanonicalizedLocaleForTest(char *__s)
{
  int v1;
  int v2;
  int v4;
  void *v5[8];
  _OWORD v6[14];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  memset(v6, 0, sizeof(v6));
  icu::Locale::Locale((icu::Locale *)v6, __s, 0, 0, 0);
  v4 = 0;
  memset(&v5[1], 0, 56);
  v5[0] = (char *)&v5[1] + 5;
  LODWORD(v5[1]) = 40;
  v1 = sub_18BBC7DA4((uint64_t)v6, (icu::CharString *)v5, &v4);
  v2 = v4;
  if (BYTE4(v5[1]))
    uprv_free(v5[0]);
  icu::Locale::~Locale((icu::Locale *)v6);
  return (v2 < 1) & ~v1;
}

uint64_t sub_18BBC7DA4(uint64_t a1, icu::CharString *a2, int *a3)
{
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v21;
  int32x2_t *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v30;
  int32x2_t *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;
  int32x2_t *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v48;
  unint64_t v50;
  int32x2_t *v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v59;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  int v64;
  char *v65;
  char *v66;
  char *v67;
  const char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  int v73;
  const char *v74;
  const char *v75;
  int v76;
  char *v77;
  char *v78;
  char *v79;
  int v80;
  const char *v81;
  uint64_t v82;
  icu::LocaleBuilder *v83;
  size_t v84;
  unint64_t v85;
  int v86;
  char *v87;
  const char *v88;
  uint64_t v89;
  void **v90;
  char *v91;
  int v92;
  uint64_t v93;
  void **v94;
  _BOOL4 v95;
  char *v96;
  char *v97;
  const char *v98;
  unsigned int v99;
  const char *v100;
  const char *v101;
  char *v102;
  int v103;
  int v104;
  const char *v105;
  char *KeywordsStart;
  char *v108;
  icu::CharString *v109;
  icu::CharString *v110;
  uint64_t v111;
  signed int v112;
  icu::CharString *v113;
  const char *v114;
  char *Keywords;
  char *v116;
  uint64_t v117;
  char *v118;
  int v119;
  const char *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  icu::CharString *v124;
  icu::CharString *v125;
  icu::CharString *v126;
  uint64_t v127;
  uint64_t v128;
  void **v129;
  _QWORD *v130;
  char *v131;
  const char *v132;
  _QWORD *v133;
  int32x2_t *v134;
  const char *v135;
  int v136;
  char *__s[2];
  char *v138[2];
  _OWORD v139[2];
  __int128 v140;
  void *v141[2];
  __int128 v142;
  uint64_t v143;
  char *v144;
  int v145;
  char *v146;
  int v147;
  char *v148;
  int v149;
  char *v150;
  int v151;
  char *v152;
  int v153[2];
  char *v154;
  int v155[3];
  unsigned int v156;
  uint64_t v157;
  UErrorCode v158[2];
  char *v159[7];
  int v160;
  int v161;
  void *v162[7];
  uint64_t v163;
  char *v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  _OWORD v169[14];
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  v140 = 0u;
  *(_OWORD *)v138 = 0u;
  memset(v139, 0, sizeof(v139));
  LODWORD(v169[0]) = *a3;
  *(_OWORD *)__s = 0u;
  icu::UVector::UVector((uint64_t)v139, 0, (uint64_t)sub_18BBCABEC, (int *)v169);
  *((_QWORD *)&v140 + 1) = 0;
  if (*a3 >= 1)
  {
    v6 = 0;
    *((_QWORD *)&v140 + 1) = 0;
    goto LABEL_182;
  }
  v7 = atomic_load(&dword_1EE0092F8);
  if (v7 == 2 || !icu::umtx_initImplPreInit(&dword_1EE0092F8))
  {
    if (dword_1EE0092FC >= 1)
    {
      v6 = 0;
      *a3 = dword_1EE0092FC;
      *((_QWORD *)&v140 + 1) = qword_1EE0092F0;
      goto LABEL_182;
    }
  }
  else
  {
    sub_18BC0ECC4(8u, (uint64_t)sub_18BBCB6D8);
    v8 = (_QWORD *)ures_openDirect(0, (uint64_t)"metadata", (uint64_t)a3);
    v9 = (_QWORD *)ures_getByKey((uint64_t)v8, "alias", 0, a3);
    v10 = (_QWORD *)ures_getByKey((uint64_t)v9, "language", 0, a3);
    v11 = (_QWORD *)ures_getByKey((uint64_t)v9, "script", 0, a3);
    v133 = (_QWORD *)ures_getByKey((uint64_t)v9, "territory", 0, a3);
    v131 = (char *)ures_getByKey((uint64_t)v9, "variant", 0, a3);
    v12 = (_QWORD *)ures_getByKey((uint64_t)v9, "subdivision", 0, a3);
    v13 = 0;
    if (*a3 <= 0)
    {
      v157 = 0;
      *(_QWORD *)v158 = 0;
      v156 = 0;
      memset(v169, 0, 184);
      v14 = (uint64_t)v12;
      sub_18BBCB75C((int32x2_t *)v169, a3);
      v164 = 0;
      v162[0] = 0;
      sub_18BBCB804((uint64_t)v10, (uint64_t)v169, (void **)&v164, v162, (int *)&v158[1], (void (*)(uint64_t))nullsub_3, (void (*)(UChar *))nullsub_4, a3);
      v159[0] = 0;
      v141[0] = 0;
      sub_18BBCB804((uint64_t)v11, (uint64_t)v169, (void **)v159, v141, (int *)v158, (void (*)(uint64_t))nullsub_5, (void (*)(UChar *))nullsub_6, a3);
      v154 = 0;
      v152 = 0;
      sub_18BBCB804((uint64_t)v133, (uint64_t)v169, (void **)&v154, (void **)&v152, (int *)&v157 + 1, (void (*)(uint64_t))nullsub_7, (void (*)(UChar *))nullsub_8, a3);
      v150 = 0;
      v148 = 0;
      sub_18BBCB804((uint64_t)v131, (uint64_t)v169, (void **)&v150, (void **)&v148, (int *)&v157, (void (*)(uint64_t))nullsub_9, (void (*)(UChar *))nullsub_10, a3);
      v146 = 0;
      v144 = 0;
      v130 = (_QWORD *)v14;
      sub_18BBCB804(v14, (uint64_t)v169, (void **)&v146, (void **)&v144, (int *)&v156, (void (*)(uint64_t))nullsub_11, (void (*)(UChar *))nullsub_12, a3);
      v13 = 0;
      if (*a3 <= 0)
      {
        v122 = v10;
        v123 = v8;
        LOBYTE(v169[11]) = 1;
        v134 = uhash_openSize((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, (uint64_t)uhash_compareChars, 490, a3);
        if (*a3 <= 0)
        {
          v15 = v158[1];
          if (v158[1] >= U_ILLEGAL_ARGUMENT_ERROR)
          {
            v16 = 0;
            v17 = v164;
            v18 = (unsigned int *)v162[0];
            do
            {
              v19 = v18[v16];
              if ((int)v19 < 1 || LOBYTE(v169[11]) == 0)
                v21 = 0;
              else
                v21 = **(_QWORD **)&v169[5] + v19;
              uhash_put((uint64_t)v134, *(_QWORD *)&v17[8 * v16++], v21, a3);
            }
            while (*a3 <= 0 && v16 < v15);
          }
        }
        v121 = v11;
        v23 = uhash_openSize((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, (uint64_t)uhash_compareChars, 1, a3);
        if (*a3 <= 0)
        {
          v24 = v158[0];
          if (v158[0] >= U_ILLEGAL_ARGUMENT_ERROR)
          {
            v25 = 0;
            v26 = v159[0];
            v27 = (unsigned int *)v141[0];
            do
            {
              v28 = v27[v25];
              if ((int)v28 < 1 || LOBYTE(v169[11]) == 0)
                v30 = 0;
              else
                v30 = **(_QWORD **)&v169[5] + v28;
              uhash_put((uint64_t)v23, *(_QWORD *)&v26[8 * v25++], v30, a3);
            }
            while (*a3 <= 0 && v25 < v24);
          }
        }
        v127 = a1;
        v32 = uhash_openSize((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, (uint64_t)uhash_compareChars, 650, a3);
        if (*a3 <= 0)
        {
          v33 = HIDWORD(v157);
          if (SHIDWORD(v157) >= 1)
          {
            v34 = 0;
            v35 = v154;
            v36 = v152;
            do
            {
              v37 = *(unsigned int *)&v36[4 * v34];
              if ((int)v37 < 1 || LOBYTE(v169[11]) == 0)
                v39 = 0;
              else
                v39 = **(_QWORD **)&v169[5] + v37;
              uhash_put((uint64_t)v32, *(_QWORD *)&v35[8 * v34++], v39, a3);
            }
            while (*a3 <= 0 && v34 < v33);
          }
        }
        v124 = a2;
        v41 = uhash_openSize((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, (uint64_t)uhash_compareChars, 2, a3);
        if (*a3 <= 0)
        {
          v42 = v157;
          if ((int)v157 >= 1)
          {
            v43 = 0;
            v44 = v150;
            v45 = v148;
            do
            {
              v46 = *(unsigned int *)&v45[4 * v43];
              if ((int)v46 < 1 || LOBYTE(v169[11]) == 0)
                v48 = 0;
              else
                v48 = **(_QWORD **)&v169[5] + v46;
              uhash_put((uint64_t)v41, *(_QWORD *)&v44[8 * v43++], v48, a3);
            }
            while (*a3 <= 0 && v43 < v42);
          }
        }
        v129 = (void **)v23;
        v51 = uhash_openSize((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, (uint64_t)uhash_compareChars, 2, a3);
        v52 = *a3;
        if (*a3 <= 0)
        {
          v53 = v156;
          if ((int)v156 >= 1)
          {
            v54 = 0;
            v55 = v146;
            v56 = v144;
            do
            {
              v57 = *(unsigned int *)&v56[4 * v54];
              if ((int)v57 < 1 || LOBYTE(v169[11]) == 0)
                v59 = 0;
              else
                v59 = **(_QWORD **)&v169[5] + v57;
              uhash_put((uint64_t)v51, *(_QWORD *)&v55[8 * v54++], v59, a3);
              v52 = *a3;
            }
            while (*a3 <= 0 && v54 < v53);
          }
        }
        v8 = v123;
        a2 = v124;
        v10 = v122;
        if (v52 < 1)
        {
          v61 = (_QWORD *)icu::UMemory::operator new((icu::UMemory *)0x38, v50);
          v13 = (uint64_t)v61;
          if (v61)
          {
            v62 = *(_QWORD *)&v169[5];
            *(_QWORD *)&v169[5] = 0;
            v61[1] = v134;
            v61[2] = v129;
            v61[3] = v32;
            v61[4] = v41;
            v61[5] = v51;
            v61[6] = v62;
            uhash_close(0);
            uhash_close(0);
            uhash_close(0);
            uhash_close(0);
            uhash_close(0);
            v134 = 0;
            v129 = 0;
            v32 = 0;
            v41 = 0;
            v51 = 0;
          }
          else
          {
            *a3 = 7;
          }
        }
        else
        {
          v13 = 0;
        }
        uhash_close((void **)v51);
        uhash_close((void **)v41);
        uhash_close((void **)v32);
        uhash_close(v129);
        uhash_close((void **)v134);
        a1 = v127;
        v11 = v121;
      }
      uprv_free(v144);
      uprv_free(v146);
      uprv_free(v148);
      uprv_free(v150);
      uprv_free(v152);
      uprv_free(v154);
      uprv_free(v141[0]);
      uprv_free(v159[0]);
      uprv_free(v162[0]);
      uprv_free(v164);
      sub_18BBCBA64((uint64_t)v169);
      v12 = v130;
    }
    if (v12)
      ures_close(v12);
    if (v131)
      ures_close(v131);
    if (v133)
      ures_close(v133);
    if (v11)
      ures_close(v11);
    if (v10)
      ures_close(v10);
    if (v9)
      ures_close(v9);
    if (v8)
      ures_close(v8);
    qword_1EE0092F0 = v13;
    dword_1EE0092FC = *a3;
    icu::umtx_initImplPostInit(&dword_1EE0092F8);
  }
  v63 = *a3;
  *((_QWORD *)&v140 + 1) = qword_1EE0092F0;
  if (v63 > 0)
  {
    v6 = 0;
    goto LABEL_182;
  }
  *((_DWORD *)a2 + 14) = 0;
  **(_BYTE **)a2 = 0;
  v64 = *(unsigned __int8 *)(a1 + 26);
  v65 = (char *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 8))
    v65 = 0;
  v66 = (char *)(a1 + 20);
  if (!*(_BYTE *)(a1 + 20))
    v66 = 0;
  __s[0] = v65;
  __s[1] = v66;
  if (v64)
    v67 = (char *)(a1 + 26);
  else
    v67 = 0;
  v138[0] = v67;
  v68 = (const char *)(*(_QWORD *)(a1 + 208) + *(int *)(a1 + 32));
  memset(&v162[1], 0, 48);
  v162[0] = (char *)&v162[1] + 5;
  LODWORD(v162[1]) = 40;
  v163 = 0;
  icu::CharString::append((icu::CharString *)v162, v68, -1, (UErrorCode *)a3);
  if ((_DWORD)v163)
  {
    if (*a3 > 0)
      goto LABEL_124;
    v69 = (char *)v162[0];
    T_CString_toLowerCase((unsigned __int8 *)v162[0]);
    v70 = strchr(v69, 95);
    if (v70 && *a3 <= 0)
    {
      v71 = v70;
      do
      {
        *v71 = 0;
        if (*v69 && (icu::UVector::indexOf((icu::UVector *)v139, (uint64_t)v69, 0) & 0x80000000) != 0)
          icu::UVector::addElement((icu::UVector *)v139, v69, (UErrorCode *)a3);
        v69 = v71 + 1;
        v72 = strchr(v71 + 1, 95);
        if (!v72)
          break;
        v71 = v72;
      }
      while (*a3 < 1);
    }
    if (*v69 && (icu::UVector::indexOf((icu::UVector *)v139, (uint64_t)v69, 0) & 0x80000000) != 0)
      icu::UVector::addElement((icu::UVector *)v139, v69, (UErrorCode *)a3);
  }
  if (*a3 <= 0)
  {
    icu::UVector::sort((uint64_t)v139, (uint64_t)j__strcmp, a3);
    v143 = 0;
    *(_OWORD *)v141 = 0u;
    v142 = 0u;
    icu::UVector::UVector(v141, sub_18BBCBB1C, 0, 10, a3);
    if (*a3 > 0)
      goto LABEL_178;
    v73 = 0;
    v74 = "heploc";
    v75 = (char *)&v169[1] + 10;
    while (1)
    {
      if ((sub_18BBCAC08((uint64_t)__s, 1, 1, 1, (icu::UVector *)v141, a3) & 1) != 0
        || (sub_18BBCAC08((uint64_t)__s, 1, 1, 0, (icu::UVector *)v141, a3) & 1) != 0
        || (sub_18BBCAC08((uint64_t)__s, 1, 0, 1, (icu::UVector *)v141, a3) & 1) != 0
        || (sub_18BBCAC08((uint64_t)__s, 1, 0, 0, (icu::UVector *)v141, a3) & 1) != 0
        || (sub_18BBCAC08((uint64_t)__s, 0, 0, 1, (icu::UVector *)v141, a3) & 1) != 0)
      {
        goto LABEL_177;
      }
      v76 = *a3;
      if (*a3 >= 1)
        goto LABEL_178;
      if (v138[0])
      {
        v77 = (char *)uhash_get(*(_QWORD *)(*((_QWORD *)&v140 + 1) + 24), (uint64_t)v138[0]);
        if (v77)
        {
          v78 = v77;
          v79 = strchr(v77, 32);
          if (!v79)
          {
            v74 = "heploc";
LABEL_157:
            v138[0] = v78;
            goto LABEL_177;
          }
          v80 = (int)v79;
          memset(v169, 0, sizeof(v169));
          icu::LocaleBuilder::LocaleBuilder(&v164);
          if (__s[0])
            v81 = __s[0];
          else
            v81 = "und";
          icu::StringPiece::StringPiece((icu::StringPiece *)v159, v81);
          v82 = icu::LocaleBuilder::setLanguage((uint64_t)&v164, v159[0], (signed int)v159[1]);
          icu::StringPiece::StringPiece((icu::StringPiece *)&v154, __s[1]);
          v83 = (icu::LocaleBuilder *)icu::LocaleBuilder::setScript(v82, v154, v155[0]);
          icu::LocaleBuilder::build(v83, (UErrorCode *)a3, (icu::Locale *)v169);
          icu::LocaleBuilder::~LocaleBuilder((icu::LocaleBuilder *)&v164);
          icu::Locale::addLikelySubtags((icu::Locale *)v169, (UErrorCode *)a3);
          v164 = 0;
          v84 = strlen(v75);
          if (v84)
          {
            v86 = v84;
            v128 = a1;
            v87 = strstr(v78, v75);
            if (v87)
            {
              v88 = v87;
              v125 = a2;
              v89 = icu::UMemory::operator new((icu::UMemory *)0x40, v85);
              v90 = (void **)v89;
              if (v89)
              {
                *(_QWORD *)v89 = v89 + 13;
                *(_DWORD *)(v89 + 8) = 40;
                *(_WORD *)(v89 + 12) = 0;
                *(_DWORD *)(v89 + 56) = 0;
                icu::CharString::append((icu::CharString *)v89, v88, v86, (UErrorCode *)a3);
              }
              sub_18BBCBB94((void ***)&v164, v90, a3);
              v91 = v164;
              a2 = v125;
            }
            else
            {
              v91 = 0;
            }
            a1 = v128;
          }
          else
          {
            v91 = 0;
          }
          v92 = *a3;
          if (!v91 && v92 <= 0)
          {
            v93 = icu::UMemory::operator new((icu::UMemory *)0x40, v85);
            v94 = (void **)v93;
            if (v93)
            {
              *(_QWORD *)v93 = v93 + 13;
              *(_DWORD *)(v93 + 8) = 40;
              *(_WORD *)(v93 + 12) = 0;
              *(_DWORD *)(v93 + 56) = 0;
              icu::CharString::append((icu::CharString *)v93, v78, v80 - (_DWORD)v78, (UErrorCode *)a3);
            }
            sub_18BBCBB94((void ***)&v164, v94, a3);
            v92 = *a3;
          }
          if (v92 <= 0)
          {
            v96 = v164;
            v78 = *(char **)v164;
            v164 = 0;
            icu::UVector::adoptElement((icu::UVector *)v141, v96, (UErrorCode *)a3);
            v95 = *a3 < 1;
          }
          else
          {
            v95 = 0;
          }
          v74 = "heploc";
          sub_18BBCBB54((uint64_t *)&v164);
          icu::Locale::~Locale((icu::Locale *)v169);
          if (v95)
            goto LABEL_157;
        }
        v76 = *a3;
        if (*a3 > 0)
          goto LABEL_178;
      }
      if (__s[1])
      {
        v97 = (char *)uhash_get(*(_QWORD *)(*((_QWORD *)&v140 + 1) + 16), (uint64_t)__s[1]);
        if (v97)
        {
          __s[1] = v97;
          goto LABEL_177;
        }
        v76 = *a3;
      }
      v135 = v75;
      if (v76 > 0 || SDWORD2(v139[0]) < 1)
        goto LABEL_183;
      v98 = v74;
      v99 = 0;
      while (1)
      {
        v100 = (const char *)icu::UVector::elementAt((icu::UVector *)v139, v99);
        v101 = (const char *)uhash_get(*(_QWORD *)(*((_QWORD *)&v140 + 1) + 32), (uint64_t)v100);
        if (v101)
        {
          v102 = (char *)v101;
          if (!v100 || strcmp(v100, v101))
            break;
        }
        if ((int)++v99 >= SDWORD2(v139[0]))
        {
          v76 = *a3;
LABEL_183:
          if (v76 > 0)
            goto LABEL_178;
          KeywordsStart = locale_getKeywordsStart(*(char **)(a1 + 40));
          v108 = KeywordsStart;
          if (!v73 && SDWORD2(v139[0]) <= 1 && !KeywordsStart)
            goto LABEL_178;
          v158[1] = *a3;
          icu::StringPiece::StringPiece((icu::StringPiece *)v159, __s[0]);
          icu::CharString::append(a2, v159[0], (int)v159[1], &v158[1]);
          if (__s[1] && *__s[1])
          {
            v109 = icu::CharString::append(a2, 95, &v158[1]);
            icu::StringPiece::StringPiece((icu::StringPiece *)&v154, __s[1]);
            icu::CharString::append(v109, v154, v155[0], &v158[1]);
          }
          if (v138[0] && *v138[0])
          {
            v110 = icu::CharString::append(a2, 95, &v158[1]);
            icu::StringPiece::StringPiece((icu::StringPiece *)&v152, v138[0]);
            icu::CharString::append(v110, v152, v153[0], &v158[1]);
          }
          if (SDWORD2(v139[0]) >= 1)
          {
            if ((!__s[1] || !*__s[1]) && (!v138[0] || !*v138[0]))
              icu::CharString::append(a2, 95, &v158[1]);
            icu::UVector::sort((uint64_t)v139, (uint64_t)j__strcmp_0, (int *)&v158[1]);
            v111 = *((int *)a2 + 14);
            if (SDWORD2(v139[0]) >= 1)
            {
              v112 = 0;
              do
              {
                v113 = icu::CharString::append(a2, 95, &v158[1]);
                v114 = (const char *)icu::UVector::elementAt((icu::UVector *)v139, v112);
                icu::StringPiece::StringPiece((icu::StringPiece *)&v150, v114);
                icu::CharString::append(v113, v150, v151, &v158[1]);
                ++v112;
              }
              while (v112 < SDWORD2(v139[0]));
            }
            T_CString_toUpperCase((unsigned __int8 *)(*(_QWORD *)a2 + v111));
          }
          if (v138[1])
          {
            if (*v138[1])
            {
              v168 = 0;
              v167 = 0u;
              v166 = 0u;
              v165 = 0u;
              icu::StringPiece::StringPiece((icu::StringPiece *)&v148, "und_");
              v164 = (char *)&v165 + 5;
              LODWORD(v165) = 40;
              WORD2(v165) = 0;
              LODWORD(v168) = 0;
              icu::CharString::append((icu::CharString *)&v164, v148, v149, &v158[1]);
              icu::StringPiece::StringPiece((icu::StringPiece *)&v146, v138[1]);
              icu::CharString::append((icu::CharString *)&v164, v146, v147, &v158[1]);
              memset(v169, 0, sizeof(v169));
              icu::Locale::Locale((icu::Locale *)v169, v164, 0, 0, 0);
              icu::StringPiece::StringPiece((icu::StringPiece *)&v144, (const char *)(*((_QWORD *)&v169[2] + 1) + 1));
              icu::CharString::append(a2, v144, v145, &v158[1]);
              icu::Locale::~Locale((icu::Locale *)v169);
              if (BYTE4(v165))
                uprv_free(v164);
            }
          }
          if (*a3 > 0)
            goto LABEL_178;
          if (!v108)
            goto LABEL_239;
          v132 = v108;
          v126 = a2;
          memset((char *)&v169[2] + 8, 0, 184);
          memset((char *)v169 + 8, 0, 32);
          *(_QWORD *)&v169[0] = off_1E2247310;
          *((_QWORD *)&v169[2] + 1) = &v169[3];
          icu::Locale::operator=((icu::Locale *)v169, a1);
          Keywords = icu::Locale::createKeywords((icu::Locale *)a1, (UErrorCode *)a3);
          v116 = Keywords;
          if (*a3 > 0)
            goto LABEL_230;
          if (!Keywords)
            goto LABEL_230;
          v117 = (*(uint64_t (**)(char *, _QWORD, int *))(*(_QWORD *)Keywords + 40))(Keywords, 0, a3);
          if (!v117)
            goto LABEL_230;
          v118 = (char *)v117;
          v136 = 0;
          while (2)
          {
            if (strcmp("sd", v118) && strcmp("rg", v118) && strcmp("t", v118))
              goto LABEL_227;
            v166 = 0u;
            v167 = 0u;
            v165 = 0u;
            v164 = (char *)&v165 + 5;
            LODWORD(v165) = 40;
            v168 = 0;
            v154 = 0;
            *(_QWORD *)v155 = 0;
            icu::CharStringByteSink::CharStringByteSink(&v154, (uint64_t)&v164);
            icu::StringPiece::StringPiece((icu::StringPiece *)&v152, v118);
            icu::Locale::getKeywordValue(a1, v152, v153[0], (uint64_t)&v154, (UErrorCode *)a3);
            if (*a3 >= 1)
            {
              *a3 = 0;
              v119 = 6;
LABEL_223:
              icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&v154);
              if (BYTE4(v165))
                uprv_free(v164);
              if (v119 != 6 && v119)
                goto LABEL_232;
LABEL_227:
              v118 = (char *)(*(uint64_t (**)(char *, _QWORD, int *))(*(_QWORD *)v116 + 40))(v116, 0, a3);
              if (!v118)
              {
                if (v136)
                  v132 = locale_getKeywordsStart(*((char **)&v169[2] + 1));
LABEL_230:
                icu::StringPiece::StringPiece((icu::StringPiece *)&v164, v132);
                icu::CharString::append(v126, v164, v165, (UErrorCode *)a3);
                if (v116)
                {
                  v119 = 0;
LABEL_232:
                  (*(void (**)(char *))(*(_QWORD *)v116 + 8))(v116);
                  icu::Locale::~Locale((icu::Locale *)v169);
                  v6 = 0;
                  if (v119 || (a2 = v126, *a3 >= 1))
                  {
LABEL_179:
                    icu::UVector::~UVector((icu::UVector *)v141);
                    goto LABEL_180;
                  }
LABEL_239:
                  v120 = *(const char **)a2;
                  if (!strcmp(*(const char **)a2, *(const char **)(a1 + 40)))
                  {
                    v6 = 0;
                    *((_DWORD *)a2 + 14) = 0;
                    *v120 = 0;
                  }
                  else
                  {
                    v6 = 1;
                  }
                  goto LABEL_179;
                }
                icu::Locale::~Locale((icu::Locale *)v169);
                a2 = v126;
                if (*a3 <= 0)
                  goto LABEL_239;
LABEL_178:
                v6 = 0;
                goto LABEL_179;
              }
              continue;
            }
            break;
          }
          v161 = 0;
          memset(&v159[1], 0, 48);
          v159[0] = (char *)&v159[1] + 5;
          LODWORD(v159[1]) = 40;
          v160 = 0;
          if (strlen(v118) == 2)
          {
            if ((sub_18BBCB330((uint64_t)__s, (uint64_t)v164, v168, (icu::CharString *)v159, (UErrorCode *)a3) & 1) == 0)
            {
LABEL_221:
              v119 = *a3 > 0;
              if (BYTE4(v159[1]))
                uprv_free(v159[0]);
              goto LABEL_223;
            }
          }
          else if (!sub_18BBCB3E4((uint64_t)&v164, (uint64_t)v159, (UErrorCode *)a3))
          {
            goto LABEL_221;
          }
          ++v136;
          icu::Locale::setKeywordValue((char **)v169, v118, v159[0], (UErrorCode *)a3);
          goto LABEL_221;
        }
      }
      icu::UVector::setElementAt((uint64_t)v139, v102, v99);
      v74 = v98;
      v103 = strcmp(v100, v98);
      v75 = v135;
      if (!v103 && SDWORD2(v139[0]) >= 1)
      {
        v104 = 0;
        do
        {
          v105 = (const char *)icu::UVector::elementAt((icu::UVector *)v139, v104);
          if (!strcmp(v105, "hepburn"))
            icu::UVector::removeElementAt((uint64_t (**)(void))v139, v104);
          ++v104;
        }
        while (v104 < SDWORD2(v139[0]));
      }
LABEL_177:
      ++v73;
      if (*a3 > 0)
        goto LABEL_178;
    }
  }
LABEL_124:
  v6 = 0;
LABEL_180:
  if (BYTE4(v162[1]))
    uprv_free(v162[0]);
LABEL_182:
  icu::UVector::~UVector((icu::UVector *)v139);
  return v6;
}

char **icu::Locale::initBaseName(char **this, UErrorCode *a2)
{
  char **v3;
  char *v4;
  char *v5;
  BOOL v6;
  int64_t v8;

  if (*(int *)a2 <= 0)
  {
    v3 = this;
    v4 = this[5];
    v5 = strchr(v4, 64);
    this = (char **)strchr(v4, 61);
    if (v5)
      v6 = this == 0;
    else
      v6 = 1;
    if (v6 || v5 >= (char *)this)
    {
      v3[26] = v4;
    }
    else
    {
      v8 = v5 - v4;
      this = (char **)uprv_malloc(((v8 << 32) + 0x100000000) >> 32);
      v3[26] = (char *)this;
      if (this)
      {
        this = (char **)strncpy((char *)this, v3[5], (int)v8);
        *((_BYTE *)this + (int)v8) = 0;
        if (*((_DWORD *)v3 + 8) > (int)v8)
          *((_DWORD *)v3 + 8) = v8;
      }
      else
      {
        *a2 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
  }
  return this;
}

unsigned __int8 *icu::Locale::hashCode(icu::Locale *this)
{
  char *v1;
  int v2;

  v1 = (char *)*((_QWORD *)this + 5);
  v2 = strlen(v1);
  return ustr_hashCharsN((unsigned __int8 *)v1, v2);
}

uint64_t *icu::Locale::setDefault(uint64_t *this, const icu::Locale *a2, UErrorCode *a3)
{
  if (*(int *)a2 <= 0)
    return sub_18BBC6D10((char *)this[5], (int *)a2);
  return this;
}

void icu::Locale::addLikelySubtags(icu::Locale *this, UErrorCode *a2)
{
  _QWORD v4[2];
  char *v5[9];

  v5[8] = *(char **)MEMORY[0x1E0C80C00];
  if (*(int *)a2 <= 0)
  {
    memset(&v5[1], 0, 56);
    v4[1] = 0;
    v5[0] = (char *)&v5[1] + 5;
    LODWORD(v5[1]) = 40;
    v4[0] = 0;
    icu::CharStringByteSink::CharStringByteSink(v4, (uint64_t)v5);
    ulocimp_addLikelySubtags(*((_QWORD *)this + 5), v4, a2);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v4);
    if (*(int *)a2 <= 0)
    {
      icu::Locale::init(this, v5[0], 0);
      if (*((_BYTE *)this + 216))
        *a2 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    if (BYTE4(v5[1]))
      uprv_free(v5[0]);
  }
}

void icu::Locale::minimizeSubtags(char **this, UErrorCode *a2)
{
  _QWORD v4[2];
  char *v5[9];

  v5[8] = *(char **)MEMORY[0x1E0C80C00];
  if (*(int *)a2 <= 0)
  {
    memset(&v5[1], 0, 56);
    v4[1] = 0;
    v5[0] = (char *)&v5[1] + 5;
    LODWORD(v5[1]) = 40;
    v4[0] = 0;
    icu::CharStringByteSink::CharStringByteSink(v4, (uint64_t)v5);
    ulocimp_minimizeSubtags(this[5], (uint64_t)v4, a2);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v4);
    if (*(int *)a2 <= 0)
    {
      icu::Locale::init((icu::Locale *)this, v5[0], 0);
      if (*((_BYTE *)this + 216))
        *a2 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    if (BYTE4(v5[1]))
      uprv_free(v5[0]);
  }
}

void icu::Locale::canonicalize(const char **this, UErrorCode *a2)
{
  char *v4;
  int v5;
  char *v6[7];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 <= 0)
  {
    if (*((_BYTE *)this + 216))
    {
      *a2 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      v7 = 0;
      memset(&v6[1], 0, 48);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v4, this[5]);
      v6[0] = (char *)&v6[1] + 5;
      LODWORD(v6[1]) = 40;
      WORD2(v6[1]) = 0;
      LODWORD(v7) = 0;
      icu::CharString::append((icu::CharString *)v6, v4, v5, a2);
      if (*(int *)a2 <= 0)
      {
        icu::Locale::init((icu::Locale *)this, v6[0], 1);
        if (*((_BYTE *)this + 216))
          *a2 = U_ILLEGAL_ARGUMENT_ERROR;
      }
      if (BYTE4(v6[1]))
        uprv_free(v6[0]);
    }
  }
}

void icu::Locale::forLanguageTag(char *a1@<X0>, int a2@<W1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD v8[2];
  int v9;
  char *v10[9];

  v10[8] = *(char **)MEMORY[0x1E0C80C00];
  *(_OWORD *)(a4 + 40) = 0u;
  *(_QWORD *)(a4 + 216) = 0;
  *(_OWORD *)(a4 + 200) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_QWORD *)a4 = off_1E2247310;
  *(_QWORD *)(a4 + 40) = a4 + 48;
  icu::Locale::setToBogus((icu::Locale *)a4);
  if (*a3 <= 0)
  {
    memset(&v10[1], 0, 56);
    v10[0] = (char *)&v10[1] + 5;
    LODWORD(v10[1]) = 40;
    v9 = 0;
    v8[0] = 0;
    v8[1] = 0;
    icu::CharStringByteSink::CharStringByteSink(v8, (uint64_t)v10);
    ulocimp_forLanguageTag(a1, a2, (uint64_t)v8, &v9, a3);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v8);
    if (*a3 <= 0)
    {
      if (v9 != a2 || (icu::Locale::init((icu::Locale *)a4, v10[0], 0), *(_BYTE *)(a4 + 216)))
        *a3 = 1;
    }
    if (BYTE4(v10[1]))
      uprv_free(v10[0]);
  }
}

void icu::Locale::toLanguageTag(char **this, icu::ByteSink *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (*((_BYTE *)this + 216))
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    else
      ulocimp_toLanguageTag(this[5], (uint64_t)a2, 0, (int *)a3);
  }
}

icu::Locale *icu::Locale::createFromName@<X0>(icu::Locale *this@<X0>, uint64_t a2@<X8>)
{
  icu::Locale *v5;
  uint64_t *Default;

  if (this)
  {
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    v5 = icu::Locale::Locale((icu::Locale *)a2, "", 0, 0, 0);
    return icu::Locale::init(v5, (char *)this, 0);
  }
  else
  {
    Default = icu::Locale::getDefault(0);
    *(_QWORD *)a2 = off_1E2247310;
    *(_QWORD *)(a2 + 40) = a2 + 48;
    *(_QWORD *)(a2 + 208) = 0;
    return icu::Locale::operator=((icu::Locale *)a2, (uint64_t)Default);
  }
}

icu::Locale *icu::Locale::createCanonical@<X0>(icu::Locale *this@<X0>, icu::Locale *a2@<X8>)
{
  icu::Locale *v4;

  *((_OWORD *)a2 + 12) = 0u;
  *((_OWORD *)a2 + 13) = 0u;
  *((_OWORD *)a2 + 10) = 0u;
  *((_OWORD *)a2 + 11) = 0u;
  *((_OWORD *)a2 + 8) = 0u;
  *((_OWORD *)a2 + 9) = 0u;
  *((_OWORD *)a2 + 6) = 0u;
  *((_OWORD *)a2 + 7) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 5) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  v4 = icu::Locale::Locale(a2, "", 0, 0, 0);
  return icu::Locale::init(v4, (char *)this, 1);
}

char *icu::Locale::getISO3Language(icu::Locale *this)
{
  return uloc_getISO3Language(*((_QWORD *)this + 5));
}

char *icu::Locale::getISO3Country(icu::Locale *this)
{
  return uloc_getISO3Country(*((_QWORD *)this + 5));
}

uint64_t icu::Locale::getLCID(char **this)
{
  return uloc_getLCID(this[5]);
}

icu::Locale *icu::Locale::setFromPOSIXID(icu::Locale *this, char *a2)
{
  return icu::Locale::init(this, a2, 1);
}

uint64_t icu::Locale::getRoot(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 4032;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getLocale(icu::Locale *this)
{
  int v1;
  uint64_t LocaleCache;
  uint64_t v3;

  v1 = (int)this;
  LocaleCache = icu::Locale::getLocaleCache(this);
  v3 = v1;
  if (!LocaleCache)
    v3 = 0;
  return LocaleCache + 224 * v3;
}

uint64_t icu::Locale::getFrench(icu::Locale *this)
{
  uint64_t LocaleCache;

  LocaleCache = icu::Locale::getLocaleCache(this);
  return LocaleCache + 224 * (LocaleCache != 0);
}

uint64_t icu::Locale::getGerman(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 448;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getItalian(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 672;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getJapanese(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 896;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getKorean(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 1120;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getChinese(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 1344;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getSimplifiedChinese(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 2688;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getTraditionalChinese(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 2912;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getFrance(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 1568;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getGermany(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 1792;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getItaly(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 2016;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getJapan(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 2240;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getKorea(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 2464;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getChina(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 2688;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getPRC(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 2688;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getTaiwan(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 2912;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getUK(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 3136;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getUS(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 3360;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getCanada(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 3584;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getCanadaFrench(icu::Locale *this)
{
  uint64_t LocaleCache;
  uint64_t v2;

  LocaleCache = icu::Locale::getLocaleCache(this);
  v2 = 3808;
  if (!LocaleCache)
    v2 = 0;
  return LocaleCache + v2;
}

uint64_t icu::Locale::getLocaleCache(icu::Locale *this)
{
  unsigned int v1;
  unint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  icu::Locale *v5;
  icu::Locale *v6;
  int v7;
  _BYTE v9[224];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = atomic_load(&dword_1ECD27360);
  if (v1 != 2 && icu::umtx_initImplPreInit(&dword_1ECD27360))
  {
    v3 = (_OWORD *)icu::UMemory::operator new[]((icu::UMemory *)0x10B0, v2);
    if (v3)
    {
      *v3 = xmmword_18BDCC410;
      v4 = (uint64_t)(v3 + 1);
      v5 = (icu::Locale *)(v3 + 267);
      v6 = (icu::Locale *)(v3 + 1);
      do
      {
        *(_QWORD *)v6 = off_1E2247310;
        *((_QWORD *)v6 + 5) = (char *)v6 + 48;
        *((_QWORD *)v6 + 26) = 0;
        v6 = (icu::Locale *)((char *)icu::Locale::init(v6, 0, 0) + 224);
      }
      while (v6 != v5);
      qword_1ECD27308 = v4;
      sub_18BC0ECC4(7u, (uint64_t)sub_18BBC6F10);
      icu::Locale::Locale((icu::Locale *)v9, "", 0, 0, 0);
      icu::Locale::operator=(qword_1ECD27308 + 4032, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "en", 0, 0, 0);
      icu::Locale::operator=(qword_1ECD27308, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "fr", 0, 0, 0);
      icu::Locale::operator=(qword_1ECD27308 + 224, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "de", 0, 0, 0);
      icu::Locale::operator=(qword_1ECD27308 + 448, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "it", 0, 0, 0);
      icu::Locale::operator=(qword_1ECD27308 + 672, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "ja", 0, 0, 0);
      icu::Locale::operator=(qword_1ECD27308 + 896, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "ko", 0, 0, 0);
      icu::Locale::operator=(qword_1ECD27308 + 1120, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "zh", 0, 0, 0);
      icu::Locale::operator=(qword_1ECD27308 + 1344, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "fr", "FR", 0, 0);
      icu::Locale::operator=(qword_1ECD27308 + 1568, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "de", "DE", 0, 0);
      icu::Locale::operator=(qword_1ECD27308 + 1792, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "it", "IT", 0, 0);
      icu::Locale::operator=(qword_1ECD27308 + 2016, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "ja", "JP", 0, 0);
      icu::Locale::operator=(qword_1ECD27308 + 2240, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "ko", "KR", 0, 0);
      icu::Locale::operator=(qword_1ECD27308 + 2464, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "zh", "CN", 0, 0);
      icu::Locale::operator=(qword_1ECD27308 + 2688, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "zh", "TW", 0, 0);
      icu::Locale::operator=(qword_1ECD27308 + 2912, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "en", "GB", 0, 0);
      icu::Locale::operator=(qword_1ECD27308 + 3136, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "en", "US", 0, 0);
      icu::Locale::operator=(qword_1ECD27308 + 3360, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "en", "CA", 0, 0);
      icu::Locale::operator=(qword_1ECD27308 + 3584, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "fr", "CA", 0, 0);
      icu::Locale::operator=(qword_1ECD27308 + 3808, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      v7 = 0;
    }
    else
    {
      qword_1ECD27308 = 0;
      v7 = 7;
    }
    dword_1ECD27364 = v7;
    icu::umtx_initImplPostInit(&dword_1ECD27360);
  }
  return qword_1ECD27308;
}

void sub_18BBC9FF8(void **a1)
{
  void *v2;

  *a1 = off_1E22478C8;
  uprv_free(a1[15]);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 18));
  icu::StringEnumeration::~StringEnumeration((icu::StringEnumeration *)a1);
}

void sub_18BBCA038(void **a1)
{
  void *v1;

  sub_18BBC9FF8(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BBCA050(void **a1)
{
  void *v1;

  sub_18BBC9FF8(a1);
  icu::UMemory::operator delete(v1);
}

char *icu::Locale::createKeywords(icu::Locale *this, UErrorCode *a2)
{
  char *v2;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  void *v9[7];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 > 0)
    return 0;
  v5 = (char *)*((_QWORD *)this + 5);
  v2 = strchr(v5, 64);
  if (v2)
  {
    if (strchr(v5, 61) <= v2)
    {
      v2 = 0;
      *a2 = U_INVALID_FORMAT_ERROR;
    }
    else
    {
      memset(&v9[1], 0, 48);
      v10 = 0;
      v8[1] = 0;
      v9[0] = (char *)&v9[1] + 5;
      LODWORD(v9[1]) = 40;
      v8[0] = 0;
      icu::CharStringByteSink::CharStringByteSink(v8, (uint64_t)v9);
      sub_18BC3AB60(v2 + 1, 64, (uint64_t)v8, 0, (int *)a2);
      v2 = 0;
      if (*(int *)a2 <= 0 && (_DWORD)v10)
      {
        v7 = icu::UMemory::operator new((icu::UMemory *)0xD0, v6);
        v2 = (char *)v7;
        if (v7)
          sub_18BBCBC5C(v7, v9[0], v10, 0, (int *)a2);
        else
          *a2 = U_MEMORY_ALLOCATION_ERROR;
      }
      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v8);
      if (BYTE4(v9[1]))
        uprv_free(v9[0]);
    }
  }
  return v2;
}

char *icu::Locale::createUnicodeKeywords(icu::Locale *this, UErrorCode *a2)
{
  char *v2;
  char *v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD v8[2];
  void *v9[7];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 > 0)
    return 0;
  v5 = (char *)*((_QWORD *)this + 5);
  v2 = strchr(v5, 64);
  if (v2)
  {
    if (strchr(v5, 61) <= v2)
    {
      v2 = 0;
      *a2 = U_INVALID_FORMAT_ERROR;
    }
    else
    {
      memset(&v9[1], 0, 48);
      v10 = 0;
      v8[1] = 0;
      v9[0] = (char *)&v9[1] + 5;
      LODWORD(v9[1]) = 40;
      v8[0] = 0;
      icu::CharStringByteSink::CharStringByteSink(v8, (uint64_t)v9);
      sub_18BC3AB60(v2 + 1, 64, (uint64_t)v8, 0, (int *)a2);
      v2 = 0;
      if (*(int *)a2 <= 0 && (_DWORD)v10)
      {
        v7 = icu::UMemory::operator new((uint64_t *)v10, (icu::UMemory *)0xD0, v6);
        v2 = (char *)v7;
        if (v7)
        {
          sub_18BBCBC5C((uint64_t)v7, v9[0], v10, 0, (int *)a2);
          *(_QWORD *)v2 = &off_1E2247960;
        }
        else
        {
          *a2 = U_MEMORY_ALLOCATION_ERROR;
        }
      }
      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v8);
      if (BYTE4(v9[1]))
        uprv_free(v9[0]);
    }
  }
  return v2;
}

uint64_t icu::Locale::getKeywordValue(char **this, char *a2, char *a3, int a4, UErrorCode *a5)
{
  return uloc_getKeywordValue(this[5], a2, a3, a4, (int *)a5);
}

void icu::Locale::getKeywordValue(uint64_t a1, const char *a2, int a3, uint64_t a4, UErrorCode *a5)
{
  void *v8[9];

  v8[8] = *(void **)MEMORY[0x1E0C80C00];
  if (*(int *)a5 <= 0)
  {
    if (*(_BYTE *)(a1 + 216))
    {
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      memset(&v8[1], 0, 56);
      v8[0] = (char *)&v8[1] + 5;
      LODWORD(v8[1]) = 40;
      icu::CharString::append((icu::CharString *)v8, a2, a3, a5);
      if (*(int *)a5 <= 0)
        ulocimp_getKeywordValue(*(char **)(a1 + 40), (char *)v8[0], a4, (int *)a5);
      if (BYTE4(v8[1]))
        uprv_free(v8[0]);
    }
  }
}

void icu::Locale::getUnicodeKeywordValue(uint64_t a1, const char *a2, int a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v8;
  const char *v9;
  char *v10;
  char *v11;
  size_t v12;
  const char *v13;
  uint64_t v14;
  _QWORD v15[2];
  void *v16[8];
  void *v17[9];

  v17[8] = *(void **)MEMORY[0x1E0C80C00];
  memset(&v17[1], 0, 56);
  v17[0] = (char *)&v17[1] + 5;
  LODWORD(v17[1]) = 40;
  icu::CharString::append((icu::CharString *)v17, a2, a3, a5);
  if (*(int *)a5 <= 0)
  {
    v8 = uloc_toLegacyKey((char *)v17[0]);
    if (v8)
    {
      v9 = (const char *)v8;
      memset(&v16[1], 0, 56);
      v15[1] = 0;
      v16[0] = (char *)&v16[1] + 5;
      LODWORD(v16[1]) = 40;
      v15[0] = 0;
      icu::CharStringByteSink::CharStringByteSink(v15, (uint64_t)v16);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v13, v9);
      icu::Locale::getKeywordValue(a1, v13, v14, (uint64_t)v15, a5);
      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v15);
      if (*(int *)a5 <= 0)
      {
        v10 = uloc_toUnicodeLocaleType((uint64_t)v17[0], (char *)v16[0]);
        if (v10)
        {
          v11 = v10;
          v12 = strlen(v10);
          (*(void (**)(uint64_t, char *, size_t))(*(_QWORD *)a4 + 16))(a4, v11, v12);
        }
        else
        {
          *a5 = U_ILLEGAL_ARGUMENT_ERROR;
        }
      }
      if (BYTE4(v16[1]))
        uprv_free(v16[0]);
    }
    else
    {
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  if (BYTE4(v17[1]))
    uprv_free(v17[0]);
}

char **icu::Locale::setKeywordValue(char **this, char *a2, char *a3, UErrorCode *a4)
{
  char **v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char *v12;
  char *v13;

  if (*(int *)a4 <= 0)
  {
    v7 = this;
    if (*a4 == U_STRING_NOT_TERMINATED_WARNING)
      *a4 = U_ZERO_ERROR;
    v8 = strlen(this[5]);
    v9 = uprv_max((v8 + 1), 157);
    this = (char **)uloc_setKeywordValue(a2, a3, v7[5], v9, (int *)a4);
    v10 = *a4;
    if (*a4 == U_BUFFER_OVERFLOW_ERROR)
    {
      v11 = (_DWORD)this + 1;
      this = (char **)uprv_malloc((int)this + 1);
      if (!this)
      {
        *a4 = U_MEMORY_ALLOCATION_ERROR;
        return this;
      }
      v12 = (char *)this;
      v13 = v7[5];
      strcpy((char *)this, v13);
      if (v13 != (char *)(v7 + 6))
      {
        if (v7[26] == v13)
          v7[26] = v12;
        uprv_free(v13);
      }
      v7[5] = v12;
      *a4 = U_ZERO_ERROR;
      this = (char **)uloc_setKeywordValue(a2, a3, v12, v11, (int *)a4);
      v10 = *a4;
    }
    if (v10 <= 0 && v7[26] == v7[5])
      return icu::Locale::initBaseName(v7, a4);
  }
  return this;
}

void icu::Locale::setKeywordValue(char **a1, const char *a2, int a3, const char *a4, int a5, UErrorCode *a6)
{
  char *v10[8];
  char *v11[9];

  v11[8] = *(char **)MEMORY[0x1E0C80C00];
  memset(&v11[1], 0, 56);
  v11[0] = (char *)&v11[1] + 5;
  LODWORD(v11[1]) = 40;
  icu::CharString::append((icu::CharString *)v11, a2, a3, a6);
  memset(&v10[1], 0, 56);
  v10[0] = (char *)&v10[1] + 5;
  LODWORD(v10[1]) = 40;
  icu::CharString::append((icu::CharString *)v10, a4, a5, a6);
  icu::Locale::setKeywordValue(a1, v11[0], v10[0], a6);
  if (BYTE4(v10[1]))
    uprv_free(v10[0]);
  if (BYTE4(v11[1]))
    uprv_free(v11[0]);
}

void icu::Locale::setUnicodeKeywordValue(char **a1, const char *a2, int a3, const char *a4, int a5, UErrorCode *a6)
{
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13[7];
  uint64_t v14;
  void *v15[9];

  v15[8] = *(void **)MEMORY[0x1E0C80C00];
  memset(&v15[1], 0, 56);
  v15[0] = (char *)&v15[1] + 5;
  LODWORD(v15[1]) = 40;
  icu::CharString::append((icu::CharString *)v15, a2, a3, a6);
  memset(&v13[1], 0, 48);
  v14 = 0;
  v13[0] = (char *)&v13[1] + 5;
  LODWORD(v13[1]) = 40;
  icu::CharString::append((icu::CharString *)v13, a4, a5, a6);
  if (*(int *)a6 <= 0)
  {
    v10 = uloc_toLegacyKey((char *)v15[0]);
    if (!v10)
    {
LABEL_5:
      *a6 = U_ILLEGAL_ARGUMENT_ERROR;
      goto LABEL_8;
    }
    v11 = (char *)v10;
    if ((_DWORD)v14)
    {
      v12 = (char *)uloc_toLegacyType((uint64_t)v15[0], (_BYTE *)v13[0]);
      if (!v12)
        goto LABEL_5;
    }
    else
    {
      v12 = 0;
    }
    icu::Locale::setKeywordValue(a1, v11, v12, a6);
  }
LABEL_8:
  if (BYTE4(v13[1]))
    uprv_free(v13[0]);
  if (BYTE4(v15[1]))
    uprv_free(v15[0]);
}

uint64_t icu::Locale::getBaseName(icu::Locale *this)
{
  return *((_QWORD *)this + 26);
}

void *sub_18BBCA94C()
{
  return &unk_18BDCC420;
}

uint64_t sub_18BBCA958(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  int v4;

  v4 = 0;
  result = icu::UMemory::operator new((icu::UMemory *)0xD0, a2);
  if (result)
    return sub_18BBCBC5C(result, *(const void **)(a1 + 120), *(_DWORD *)(a1 + 136), *(_DWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120), &v4);
  return result;
}

uint64_t sub_18BBCA9A4(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  const char *v3;
  int v4;

  v1 = *(const char **)(a1 + 120);
  if (!*v1)
    return 0;
  LODWORD(v2) = 0;
  do
  {
    v2 = (v2 + 1);
    v3 = &v1[strlen(v1)];
    v4 = *((unsigned __int8 *)v3 + 1);
    v1 = v3 + 1;
  }
  while (v4);
  return v2;
}

_BYTE *sub_18BBCA9F0(uint64_t a1, _DWORD *a2, int *a3)
{
  _BYTE *v4;
  int v5;

  if (*a3 <= 0 && (v4 = *(_BYTE **)(a1 + 128), *v4))
  {
    v5 = strlen(*(const char **)(a1 + 128));
    *(_QWORD *)(a1 + 128) = &v4[v5 + 1];
    if (a2)
      goto LABEL_6;
  }
  else
  {
    v4 = 0;
    if (a2)
    {
      v5 = 0;
LABEL_6:
      *a2 = v5;
    }
  }
  return v4;
}

char *sub_18BBCAA60(icu::StringEnumeration *a1, UErrorCode *a2)
{
  const char *v4;
  int v6;

  v6 = 0;
  v4 = (const char *)(*(uint64_t (**)(icu::StringEnumeration *, int *, UErrorCode *))(*(_QWORD *)a1 + 40))(a1, &v6, a2);
  return icu::StringEnumeration::setChars(a1, v4, v6, a2);
}

uint64_t sub_18BBCAAB4(uint64_t result)
{
  *(_QWORD *)(result + 128) = *(_QWORD *)(result + 120);
  return result;
}

uint64_t sub_18BBCAAC0(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  const char *v3;
  int v4;

  v1 = *(const char **)(a1 + 120);
  if (!*v1)
    return 0;
  LODWORD(v2) = 0;
  do
  {
    if (uloc_toUnicodeLocaleKey((uint64_t)v1))
      v2 = (v2 + 1);
    else
      v2 = v2;
    v3 = &v1[strlen(v1)];
    v4 = *((unsigned __int8 *)v3 + 1);
    v1 = v3 + 1;
  }
  while (v4);
  return v2;
}

char *sub_18BBCAB18(uint64_t a1, _DWORD *a2, int *a3)
{
  char *v4;
  int v5;
  _BYTE *v8;
  _BYTE *v10;
  char *v11;

  if (*a3 <= 0)
  {
    v8 = *(_BYTE **)(a1 + 128);
    if (*v8)
    {
      *(_QWORD *)(a1 + 128) = &v8[(int)(strlen(*(const char **)(a1 + 128)) + 1)];
      v4 = uloc_toUnicodeLocaleKey((uint64_t)v8);
      if (v4)
      {
        if (!a2)
          return v4;
LABEL_9:
        v5 = strlen(v4);
        goto LABEL_4;
      }
      while (*a3 <= 0)
      {
        v10 = *(_BYTE **)(a1 + 128);
        if (!*v10)
          break;
        *(_QWORD *)(a1 + 128) = &v10[(int)(strlen(*(const char **)(a1 + 128)) + 1)];
        v11 = uloc_toUnicodeLocaleKey((uint64_t)v10);
        if (v11)
        {
          v4 = v11;
          if (a2)
            goto LABEL_9;
          return v4;
        }
      }
    }
  }
  v4 = 0;
  if (a2)
  {
    v5 = 0;
LABEL_4:
    *a2 = v5;
  }
  return v4;
}

BOOL sub_18BBCABEC(const char *a1, const char *a2)
{
  return strcmp(a1, a2) == 0;
}

uint64_t sub_18BBCAC08(uint64_t a1, int a2, int a3, int a4, icu::UVector *a5, int *a6)
{
  char v6;
  UErrorCode *v8;
  int v9;
  char **v10;
  int v11;
  const char *v12;
  const char *v13;
  unsigned int v14;
  uint64_t v15;
  icu::CharString *v16;
  icu::CharString *v17;
  int v18;
  char *v19;
  unint64_t v20;
  char *v21;
  const char *v22;
  char **v23;
  char *v24;
  char *v25;
  char *v26;
  const char *v27;
  char **v28;
  char *v29;
  char v30;
  const char *v31;
  const char *v32;
  char *v33;
  _BYTE *v34;
  const char *v35;
  BOOL v36;
  BOOL v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  char *v48;
  char *v49;
  char *v50;
  size_t v51;
  char *v52;
  char *v53;
  char *v54;
  const char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  const char *v61;
  char *v62;
  char *v63;
  int v64;
  char **v65;
  const char *v69;
  int v70;
  char *v71;
  const char *v72;
  icu::UVector *v73;
  char v74;
  char *v75;
  int v76;
  char *v77;
  int v78;
  char *v79;
  int v80;
  UErrorCode v81;
  void *v82[7];
  int v83;
  int v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  if (*a6 > 0)
    goto LABEL_2;
  v8 = (UErrorCode *)a6;
  v9 = a4;
  v10 = (char **)a1;
  if (a3)
  {
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_2;
  }
  if (!a4)
  {
    v11 = 1;
    if (a2)
      goto LABEL_9;
LABEL_12:
    v12 = "und";
    if (!a3)
      goto LABEL_10;
    goto LABEL_13;
  }
  v11 = *(_DWORD *)(a1 + 40);
  if (!v11)
    goto LABEL_2;
  if (!a2)
    goto LABEL_12;
LABEL_9:
  v12 = *(const char **)a1;
  if (!a3)
  {
LABEL_10:
    v13 = 0;
    goto LABEL_14;
  }
LABEL_13:
  v13 = *(const char **)(a1 + 16);
LABEL_14:
  if (v11 >= 1)
  {
    v14 = 0;
    v15 = 0;
    v72 = v13;
    v73 = (icu::UVector *)(a1 + 32);
    v70 = v11;
    v69 = v12;
    while (1)
    {
      if (v9)
        v15 = icu::UVector::elementAt(v73, v14);
      if (v15 && strlen((const char *)v15) < 4)
        v15 = 0;
      v84 = 0;
      memset(&v82[1], 0, 48);
      v82[0] = (char *)&v82[1] + 5;
      LODWORD(v82[1]) = 40;
      v83 = 0;
      v81 = *v8;
      icu::StringPiece::StringPiece((icu::StringPiece *)&v79, v12);
      icu::CharString::append((icu::CharString *)v82, v79, v80, &v81);
      if (v13 && *v13)
      {
        v16 = icu::CharString::append((icu::CharString *)v82, 95, &v81);
        icu::StringPiece::StringPiece((icu::StringPiece *)&v77, v13);
        icu::CharString::append(v16, v77, v78, &v81);
      }
      if (v15 && *(_BYTE *)v15)
      {
        v17 = icu::CharString::append((icu::CharString *)v82, 95, &v81);
        icu::StringPiece::StringPiece((icu::StringPiece *)&v75, (const char *)v15);
        icu::CharString::append(v17, v75, v76, &v81);
      }
      if (*(int *)v8 > 0)
      {
        v74 = 0;
        v18 = 1;
        goto LABEL_110;
      }
      v19 = (char *)uhash_get(*((_QWORD *)v10[9] + 1), (uint64_t)v82[0]);
      if (!v19)
      {
        v18 = 4;
        v13 = v72;
        goto LABEL_110;
      }
      v71 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v77 = 0;
      if (*(int *)v8 > 0)
        goto LABEL_31;
      v38 = v19;
      if (!strchr(v19, 95))
      {
        v71 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v77 = v38;
        goto LABEL_150;
      }
      v40 = icu::UMemory::operator new((icu::UMemory *)0x40, v39);
      if (v40)
      {
        v41 = strlen(v38);
        *(_QWORD *)v40 = v40 + 13;
        *(_DWORD *)(v40 + 8) = 40;
        *(_WORD *)(v40 + 12) = 0;
        *(_DWORD *)(v40 + 56) = 0;
        icu::CharString::append((icu::CharString *)v40, v38, v41, v8);
      }
      else if (*(int *)v8 <= 0)
      {
        *v8 = U_MEMORY_ALLOCATION_ERROR;
      }
      v79 = 0;
      icu::UVector::adoptElement(a5, (void *)v40, v8);
      if (*(int *)v8 >= 1)
      {
        sub_18BBCBB54((uint64_t *)&v79);
        v71 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
LABEL_31:
        v23 = &v77;
        goto LABEL_32;
      }
      v38 = *(char **)v40;
      v77 = v38;
      v48 = strchr(v38, 95);
      *v48 = 0;
      v22 = v48 + 1;
      v49 = strchr(v48 + 1, 95);
      v50 = v49;
      if (v49)
      {
        v51 = v49 - v22;
        *v50 = 0;
      }
      else
      {
        v51 = strlen(v22);
        v50 = 0;
      }
      if (v51 != 4)
      {
        v65 = v10;
        v55 = 0;
        v54 = v50;
        v56 = (char *)v22;
        goto LABEL_128;
      }
      v52 = v50;
      if (!uprv_isASCIILetter(*v22))
      {
        v61 = 0;
        v60 = 0;
        v20 = (unint64_t)v22;
        v56 = v52;
        goto LABEL_143;
      }
      v20 = (unint64_t)v52;
      if (!v52)
      {
        v56 = 0;
        v71 = 0;
        goto LABEL_149;
      }
      v65 = v10;
      v53 = strchr(v52, 95);
      if (v53)
        break;
      v51 = strlen(v52);
      v60 = 0;
      v59 = 0;
      v20 = 0;
      v71 = 0;
      v56 = v52;
      if ((v51 & 0xFFFFFFFFFFFFFFFELL) != 2)
        goto LABEL_141;
LABEL_149:
      v62 = v56;
      sub_18BBCBB54((uint64_t *)&v79);
      v21 = v62;
      if (!v38)
        goto LABEL_31;
LABEL_150:
      v63 = v21;
      v64 = strcmp(v38, "und");
      v21 = v63;
      v23 = v10;
      if (v64)
        goto LABEL_31;
LABEL_32:
      v24 = *v23;
      v77 = *v23;
      v25 = v10[1];
      v26 = v25;
      if (v22)
      {
        if (v25)
          v27 = v10[1];
        else
          v27 = v22;
        if (*v22)
          v26 = (char *)v27;
        else
          v26 = v10[1];
      }
      v28 = v10;
      v29 = v10[2];
      if (v21)
      {
        v30 = *v21;
        if (v29)
          v31 = v29;
        else
          v31 = v21;
        if (v72)
          v32 = 0;
        else
          v32 = v29;
        if (v30)
          v33 = (char *)v31;
        else
          v33 = (char *)v32;
        if (!v20)
          goto LABEL_56;
      }
      else
      {
        if (v72)
          v33 = 0;
        else
          v33 = v29;
        if (!v20)
          goto LABEL_56;
      }
      if (v15)
        v34 = (_BYTE *)v15;
      else
        v34 = (_BYTE *)v20;
      if (*(_BYTE *)v20)
        v20 = (unint64_t)v34;
      else
        v20 = 0;
LABEL_56:
      v35 = *v28;
      if ((unint64_t)v24 | (unint64_t)*v28)
      {
        v36 = v24 == 0;
        if (v35)
        {
          v37 = 1;
        }
        else
        {
          v36 = 0;
          v37 = v24 == 0;
        }
        if (!v37 || v36 || strcmp(v35, v24))
          goto LABEL_101;
      }
      if ((unint64_t)v25 | (unint64_t)v26)
      {
        v42 = v25 != 0;
        if (v26)
        {
          v42 = 0;
          v43 = v25 == 0;
        }
        else
        {
          v43 = 0;
        }
        if (v43 || v42 || strcmp(v25, v26))
          goto LABEL_101;
      }
      if ((unint64_t)v29 | (unint64_t)v33
        && ((v44 = v29 != 0, !v33) ? (v45 = 0) : (v44 = 0, v45 = v29 == 0), v45 || v44 || strcmp(v29, v33))
        || v15 | v20
        && ((v46 = v15 != 0, !v20) ? (v47 = 0) : (v46 = 0, v47 = v15 == 0),
            v47 || v46 || strcmp((const char *)v15, (const char *)v20))
        || v71)
      {
LABEL_101:
        v10 = v28;
        v28[1] = v26;
        v28[2] = v33;
        *v28 = v24;
        if (v15)
        {
          v9 = a4;
          v8 = (UErrorCode *)a6;
          v13 = v72;
          if (v20 && *(_BYTE *)v20)
            icu::UVector::setElementAt((uint64_t)v73, (void *)v20, v14);
          else
            icu::UVector::removeElementAt((uint64_t (**)(void))v73, v14);
          v74 = 1;
          v18 = 1;
          goto LABEL_109;
        }
        v74 = 1;
        v18 = 1;
        v9 = a4;
      }
      else
      {
        v18 = 4;
        v9 = a4;
        v10 = v28;
      }
      v8 = (UErrorCode *)a6;
      v13 = v72;
LABEL_109:
      v11 = v70;
      v12 = v69;
LABEL_110:
      if (BYTE4(v82[1]))
        uprv_free(v82[0]);
      if (v18 != 4)
      {
        v6 = v74;
        return v6 & 1;
      }
      if (v11 == ++v14)
        goto LABEL_2;
    }
    v54 = v53;
    v51 = v53 - v52;
    *v54 = 0;
    v55 = v22;
    v56 = v52;
LABEL_128:
    if ((v51 & 0xFFFFFFFFFFFFFFFELL) == 2)
    {
      if (!v54)
      {
        v20 = 0;
        v71 = 0;
        v22 = v55;
        v10 = v65;
        goto LABEL_149;
      }
      v57 = v56;
      v58 = strchr(v54, 95);
      if (v58)
      {
        v59 = v58;
        v51 = v58 - v54;
        *v59 = 0;
      }
      else
      {
        v51 = strlen(v54);
        v59 = 0;
      }
      v22 = v55;
      v60 = v57;
      v56 = v54;
    }
    else
    {
      v60 = 0;
      v22 = v55;
      v59 = v54;
    }
    v10 = v65;
LABEL_141:
    if (v51 < 4)
    {
      v20 = 0;
    }
    else
    {
      v61 = v22;
      v20 = (unint64_t)v56;
      v56 = v59;
LABEL_143:
      if (!v56)
      {
        v71 = 0;
        v22 = v61;
        goto LABEL_148;
      }
      v22 = v61;
    }
    v71 = v56;
LABEL_148:
    v56 = v60;
    goto LABEL_149;
  }
LABEL_2:
  v6 = 0;
  return v6 & 1;
}

uint64_t sub_18BBCB330(uint64_t a1, uint64_t a2, uint64_t a3, icu::CharString *a4, UErrorCode *a5)
{
  uint64_t result;
  const char *v8;
  char *v9;
  size_t v10;

  if (*(int *)a5 > 0)
    return 0;
  result = uhash_get(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 40), a2);
  if (result)
  {
    v8 = (const char *)result;
    v9 = strchr((char *)result, 32);
    if (v9)
      v10 = v9 - v8;
    else
      v10 = strlen(v8);
    if (v10 - 2 <= 6)
    {
      icu::CharString::append(a4, v8, v10, a5);
      if (v10 == 2)
        icu::CharString::append(a4, "zzzz", 4, a5);
    }
    return 1;
  }
  return result;
}

BOOL sub_18BBCB3E4(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  _BOOL8 v3;
  int v6;
  char *v7;
  char *TKeyStart;
  char *v9;
  int v10;
  int v11;
  int *v12;
  char *v13;
  char *v14;
  char *v15;
  unsigned int v17;
  char *v18;
  char *v19;
  char *v20;
  icu::CharString *v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  int v25;
  char *v26;
  int v27;
  _QWORD v28[2];
  int v29[12];
  int v30[4];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 <= 0)
  {
    v6 = *(_DWORD *)(a1 + 56);
    v7 = *(char **)a1;
    TKeyStart = ultag_getTKeyStart(*(char **)a1);
    v9 = TKeyStart;
    v10 = (_DWORD)TKeyStart + ~(_DWORD)v7;
    if (!TKeyStart)
      v10 = v6;
    if (TKeyStart == v7)
      v11 = 0;
    else
      v11 = v10;
    v28[0] = 0;
    v28[1] = 0;
    icu::CharStringByteSink::CharStringByteSink(v28, a2);
    if (v11 >= 1)
    {
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      *(_OWORD *)v30 = 0u;
      v31 = 0u;
      icu::LocaleBuilder::LocaleBuilder(v29);
      v12 = icu::LocaleBuilder::setLanguageTag(v29, v7, v11);
      icu::LocaleBuilder::build((icu::LocaleBuilder *)v12, a3, (icu::Locale *)v30);
      icu::LocaleBuilder::~LocaleBuilder((icu::LocaleBuilder *)v29);
      icu::Locale::canonicalize((const char **)v30, a3);
      if (*(int *)a3 > 0)
      {
LABEL_13:
        icu::Locale::~Locale((icu::Locale *)v30);
LABEL_25:
        v3 = 0;
LABEL_26:
        icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v28);
        return v3;
      }
      if (BYTE8(v43))
      {
        *a3 = U_ILLEGAL_ARGUMENT_ERROR;
        goto LABEL_13;
      }
      ulocimp_toLanguageTag(*((char **)&v32 + 1), (uint64_t)v28, 0, (int *)a3);
      if (*(int *)a3 > 0)
        goto LABEL_13;
      T_CString_toLowerCase(*(unsigned __int8 **)a2);
      icu::Locale::~Locale((icu::Locale *)v30);
    }
    if (v9)
    {
      *(_QWORD *)&v32 = 0;
      *(_OWORD *)v30 = 0u;
      v31 = 0u;
      icu::UVector::UVector((icu::UVector *)v30, a3);
      if (*(int *)a3 > 0)
      {
LABEL_24:
        icu::UVector::~UVector((icu::UVector *)v30);
        goto LABEL_25;
      }
      do
      {
        v15 = strchr(v9, 45);
        if (!v15)
          goto LABEL_23;
        v13 = ultag_getTKeyStart(v15);
        v14 = v13;
        if (v13)
          *(v13 - 1) = 0;
        icu::UVector::insertElementAt((uint64_t (**)(void *))v30, v9, v30[2], a3);
        if (*(int *)a3 > 0)
          goto LABEL_24;
        v9 = v14;
      }
      while (v14);
      icu::UVector::sort((uint64_t)v30, (uint64_t)j__strcmp_1, (int *)a3);
      if (v30[2] >= 1)
      {
        v17 = 0;
        while (1)
        {
          if (*(int *)(a2 + 56) >= 1)
            icu::CharString::append((icu::CharString *)a2, 45, a3);
          v18 = (char *)icu::UVector::elementAt((icu::UVector *)v30, v17);
          v19 = strchr(v18, 45);
          if (!v19)
            break;
          *v19 = 0;
          v20 = v19 + 1;
          icu::StringPiece::StringPiece((icu::StringPiece *)&v26, v18);
          v21 = icu::CharString::append((icu::CharString *)a2, v26, v27, a3);
          icu::CharString::append(v21, 45, a3);
          v22 = sub_18BC3E5B8((uint64_t)v18, v20, 0, 0);
          if (v22)
            v23 = (const char *)v22;
          else
            v23 = v20;
          icu::StringPiece::StringPiece((icu::StringPiece *)&v24, v23);
          icu::CharString::append((icu::CharString *)a2, v24, v25, a3);
          if ((int)++v17 >= v30[2])
            goto LABEL_37;
        }
LABEL_23:
        *a3 = U_ILLEGAL_ARGUMENT_ERROR;
        goto LABEL_24;
      }
LABEL_37:
      icu::UVector::~UVector((icu::UVector *)v30);
    }
    v3 = *a3 < U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_26;
  }
  return 0;
}

uint64_t sub_18BBCB6D8()
{
  void ***v0;
  uint64_t v1;

  atomic_store(0, &dword_1EE0092F8);
  v0 = (void ***)qword_1EE0092F0;
  if (qword_1EE0092F0)
  {
    v1 = *(_QWORD *)(qword_1EE0092F0 + 48);
    if (v1)
    {
      if (*(_BYTE *)(v1 + 12))
        uprv_free(*(void **)v1);
      icu::UMemory::operator delete((void *)v1);
    }
    uhash_close(v0[5]);
    uhash_close(v0[4]);
    uhash_close(v0[3]);
    uhash_close(v0[2]);
    uhash_close(v0[1]);
    icu::UMemory::operator delete(v0);
  }
  return 1;
}

int32x2_t *sub_18BBCB75C(int32x2_t *a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;

  a1[10] = 0;
  a1[11].i32[0] = 0;
  a1[12] = (int32x2_t)&a1[14];
  a1[13].i32[0] = 8;
  a1[13].i8[4] = 0;
  a1[22].i8[0] = 0;
  uhash_init(a1, (uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, (uint64_t)uhash_compareLong, a2);
  if (*a2 <= 0)
  {
    v5 = icu::UMemory::operator new((icu::UMemory *)0x40, v4);
    if (v5)
    {
      *(_QWORD *)v5 = v5 + 13;
      *(_DWORD *)(v5 + 8) = 40;
      *(_WORD *)(v5 + 12) = 0;
      *(_DWORD *)(v5 + 56) = 0;
      a1[10] = (int32x2_t)v5;
    }
    else
    {
      a1[10] = 0;
      *a2 = 7;
    }
  }
  return a1;
}

void sub_18BBCB804(uint64_t a1, uint64_t a2, void **a3, void **a4, int *a5, void (*a6)(uint64_t), void (*a7)(UChar *), int *a8)
{
  int Size;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  char *NextResource;
  uint64_t Key;
  const UChar *StringByKey;
  UChar *v26;

  if (*a8 <= 0)
  {
    Size = ures_getSize(a1);
    *a5 = Size;
    if (Size >= 1
      && (v17 = (uint64_t *)uprv_malloc(8 * Size)) != 0
      && (v18 = v17, uprv_free(*a3), *a3 = v18, v19 = *a5, (int)v19 >= 1)
      && (v20 = uprv_malloc(4 * v19)) != 0)
    {
      v21 = v20;
      uprv_free(*a4);
      *a4 = v21;
      v22 = *a8;
      while (v22 <= 0 && ures_hasNext(a1))
      {
        NextResource = ures_getNextResource(a1, 0, a8);
        Key = ures_getKey((uint64_t)NextResource);
        StringByKey = ures_getStringByKey((uint64_t)NextResource, "replacement", 0, a8);
        if (*a8 > 0)
        {
          if (NextResource)
            ures_close(NextResource);
          return;
        }
        v26 = (UChar *)StringByKey;
        a6(Key);
        a7(v26);
        *v18 = Key;
        *v21 = sub_18BBCB988(a2, v26, (UErrorCode *)a8);
        if (NextResource)
          ures_close(NextResource);
        v22 = *a8;
        ++v21;
        ++v18;
      }
    }
    else
    {
      *a8 = 7;
    }
  }
}

uint64_t sub_18BBCB988(uint64_t a1, UChar *a2, UErrorCode *a3)
{
  uint64_t v5;
  uint64_t v8;
  int32_t v9;

  if (*(int *)a3 > 0)
    return 0xFFFFFFFFLL;
  if (*(_BYTE *)(a1 + 176))
  {
    *a3 = U_NO_WRITE_PERMISSION;
    return 0xFFFFFFFFLL;
  }
  v5 = uhash_geti(a1, (uint64_t)a2);
  if (!(_DWORD)v5)
  {
    icu::CharString::append(*(icu::CharString **)(a1 + 80), 0, a3);
    v8 = *(_QWORD *)(a1 + 80);
    v5 = *(unsigned int *)(v8 + 56);
    v9 = u_strlen(a2);
    icu::CharString::appendInvariantChars((int *)v8, a2, v9, a3);
    uhash_puti(a1, (uint64_t)a2, v5, (int *)a3);
  }
  return v5;
}

uint64_t sub_18BBCBA64(uint64_t a1)
{
  uint64_t v2;

  uhash_close((void **)a1);
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 12))
      uprv_free(*(void **)v2);
    icu::UMemory::operator delete((void *)v2);
  }
  sub_18BBCBAB0(a1 + 88);
  return a1;
}

uint64_t sub_18BBCBAB0(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *(_DWORD *)a1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  if (*(_BYTE *)(a1 + 20))
    uprv_free(*(void **)(a1 + 8));
  return a1;
}

void sub_18BBCBB1C(void **a1)
{
  if (a1)
  {
    if (*((_BYTE *)a1 + 12))
      uprv_free(*a1);
    icu::UMemory::operator delete(a1);
  }
}

uint64_t *sub_18BBCBB54(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    if (*(_BYTE *)(v2 + 12))
      uprv_free(*(void **)v2);
    icu::UMemory::operator delete((void *)v2);
  }
  return a1;
}

void sub_18BBCBB94(void ***a1, void **a2, int *a3)
{
  void **v6;

  if (*a3 <= 0)
  {
    v6 = *a1;
    if (*a1)
    {
      if (*((_BYTE *)v6 + 12))
        uprv_free(*v6);
      icu::UMemory::operator delete(v6);
    }
    *a1 = a2;
    if (!a2)
      *a3 = 7;
  }
  else if (a2)
  {
    if (*((_BYTE *)a2 + 12))
      uprv_free(*a2);
    icu::UMemory::operator delete(a2);
  }
}

uint64_t sub_18BBCBC2C()
{
  atomic_store(0, &dword_1EE009308);
  if (qword_1EE009300)
    uhash_close((void **)qword_1EE009300);
  return 1;
}

uint64_t sub_18BBCBC5C(uint64_t a1, const void *a2, unsigned int a3, int a4, int *a5)
{
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  int v13;

  v10 = icu::StringEnumeration::StringEnumeration(a1);
  *(_QWORD *)v10 = off_1E22478C8;
  *(_QWORD *)(v10 + 120) = &unk_18BDCC420;
  *(_QWORD *)(v10 + 128) = &unk_18BDCC420;
  *(_DWORD *)(v10 + 136) = 0;
  *(_QWORD *)(v10 + 144) = off_1E2256B38;
  *(_WORD *)(v10 + 152) = 2;
  if (a3 && *a5 <= 0)
  {
    if (!a2 || (a3 & 0x80000000) != 0)
    {
      v13 = 1;
    }
    else
    {
      v11 = uprv_malloc(a3 + 1);
      *(_QWORD *)(a1 + 120) = v11;
      if (v11)
      {
        v12 = v11;
        memcpy(v11, a2, a3);
        v12[a3] = 0;
        *(_QWORD *)(a1 + 128) = &v12[a4];
        *(_DWORD *)(a1 + 136) = a3;
        return a1;
      }
      v13 = 7;
    }
    *a5 = v13;
  }
  return a1;
}

uint64_t uloc_addLikelySubtags(char *a1, char *a2, int a3, UErrorCode *a4)
{
  uint64_t v4;
  __int128 v10;
  __int128 v11;

  if (*(int *)a4 > 0)
    return 0;
  v10 = 0u;
  v11 = 0u;
  icu::CheckedArrayByteSink::CheckedArrayByteSink((uint64_t)&v10, a2, a3);
  sub_18BBCBDF0(a1, (uint64_t)&v10, a4);
  v4 = DWORD2(v11);
  if (*(int *)a4 < 1)
  {
    if (BYTE12(v11))
      *a4 = U_BUFFER_OVERFLOW_ERROR;
    else
      u_terminateChars((uint64_t)a2, a3, DWORD2(v11), (int *)a4);
  }
  else if (BYTE12(v11))
  {
    v4 = DWORD2(v11);
  }
  else
  {
    v4 = 0xFFFFFFFFLL;
  }
  icu::CheckedArrayByteSink::~CheckedArrayByteSink((icu::CheckedArrayByteSink *)&v10);
  return v4;
}

uint64_t sub_18BBCBDF0(char *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v6;
  const char *v7;
  int v8;
  size_t v9;
  uint64_t i;
  int v11;
  signed int v12;
  int v13;
  uint64_t v14;
  const char *v15;
  int v16;
  int v17;
  size_t v18;
  int v20;
  int v21;
  int v22;
  int v23;
  __int16 v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  char *__s1[9];

  __s1[8] = *(char **)MEMORY[0x1E0C80C00];
  memset(&__s1[1], 0, 56);
  v27 = 0;
  __s1[0] = (char *)&__s1[1] + 5;
  LODWORD(__s1[1]) = 40;
  v26 = 0;
  icu::CharStringByteSink::CharStringByteSink(&v26, (uint64_t)__s1);
  ulocimp_canonicalize(a1);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&v26);
  v6 = 0;
  if (*(int *)a3 <= 0)
  {
    v7 = __s1[0];
    v25 = 12;
    v22 = 6;
    v20 = 4;
    if (!__s1[0])
    {
LABEL_6:
      v6 = 0;
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
      goto LABEL_24;
    }
    if (!strcmp(__s1[0], "root"))
    {
      v9 = strlen(v7);
      (*(void (**)(uint64_t, const char *, size_t))(*(_QWORD *)a2 + 16))(a2, v7, v9);
    }
    else
    {
      LODWORD(v27) = 0;
      v26 = 0;
      v23 = 0;
      v24 = 0;
      v21 = 0;
      v8 = sub_18BBCCE44((uint64_t)v7, (char *)&v26, (int *)&v25, (char *)&v23, &v22, (char *)&v21, &v20, a3);
      if (*(int *)a3 > 0)
      {
        if (*a3 == U_BUFFER_OVERFLOW_ERROR)
          goto LABEL_6;
        goto LABEL_23;
      }
      for (i = v8; ; ++i)
      {
        v11 = v7[i];
        if (v11 != 95 && v11 != 45)
          break;
      }
      v12 = strlen(&v7[i]);
      if (v12 >= 1)
      {
        v13 = 0;
        v14 = v12;
        v15 = v7;
        do
        {
          v16 = 0;
          v17 = v15[i];
          if (v17 != 45 && v17 != 95)
          {
            if (v17 == 64)
              break;
            if (v13 > 8)
              goto LABEL_6;
            v16 = v13 + 1;
          }
          ++v15;
          v13 = v16;
          --v14;
        }
        while (v14);
      }
      if (!sub_18BBCD09C(&v26, v25, &v23, v22, &v21, v20, &v7[i], v12, a2, (int *)a3))
      {
        v18 = strlen(v7);
        (*(void (**)(uint64_t, const char *, size_t))(*(_QWORD *)a2 + 16))(a2, v7, v18);
LABEL_23:
        v6 = 0;
        goto LABEL_24;
      }
    }
    v6 = 1;
  }
LABEL_24:
  if (BYTE4(__s1[1]))
    uprv_free(__s1[0]);
  return v6;
}

uint64_t uloc_minimizeSubtags(char *a1, char *a2, int a3, UErrorCode *a4)
{
  uint64_t v4;
  __int128 v10;
  __int128 v11;

  if (*(int *)a4 > 0)
    return 0;
  v10 = 0u;
  v11 = 0u;
  icu::CheckedArrayByteSink::CheckedArrayByteSink((uint64_t)&v10, a2, a3);
  ulocimp_minimizeSubtags(a1, (uint64_t)&v10, a4);
  v4 = DWORD2(v11);
  if (*(int *)a4 < 1)
  {
    if (BYTE12(v11))
      *a4 = U_BUFFER_OVERFLOW_ERROR;
    else
      u_terminateChars((uint64_t)a2, a3, DWORD2(v11), (int *)a4);
  }
  else if (BYTE12(v11))
  {
    v4 = DWORD2(v11);
  }
  else
  {
    v4 = 0xFFFFFFFFLL;
  }
  icu::CheckedArrayByteSink::~CheckedArrayByteSink((icu::CheckedArrayByteSink *)&v10);
  return v4;
}

void ulocimp_minimizeSubtags(char *a1, uint64_t a2, UErrorCode *a3)
{
  const char *v6;
  UErrorCode v7;
  int v8;
  uint64_t i;
  int v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  const char *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  size_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  __int16 v31;
  int __n[15];
  uint64_t v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t __src;
  int v40;
  void *v41[9];

  v41[8] = *(void **)MEMORY[0x1E0C80C00];
  memset(&__n[3], 0, 48);
  v33 = 0;
  *(_QWORD *)&__n[1] = (char *)&__n[4] + 1;
  __n[3] = 40;
  v41[0] = 0;
  v41[1] = 0;
  icu::CharStringByteSink::CharStringByteSink(v41, (uint64_t)&__n[1]);
  ulocimp_canonicalize(a1);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v41);
  v6 = *(const char **)&__n[1];
  memset(&v41[1], 0, 56);
  v41[0] = (char *)&v41[1] + 5;
  LODWORD(v41[1]) = 40;
  v40 = 0;
  __src = 0;
  __n[0] = 12;
  v31 = 0;
  v29 = 6;
  v30 = 0;
  v27 = 4;
  v28 = 0;
  v7 = *a3;
  if (!*(_QWORD *)&__n[1] || v7 > U_ZERO_ERROR)
  {
LABEL_59:
    if (v7 > U_ZERO_ERROR)
      goto LABEL_61;
    goto LABEL_60;
  }
  if (!strcmp(*(const char **)&__n[1], "root"))
    goto LABEL_26;
  v8 = sub_18BBCCE44((uint64_t)v6, (char *)&__src, __n, (char *)&v30, &v29, (char *)&v28, &v27, a3);
  if (*(int *)a3 > 0)
  {
    if (*a3 != U_BUFFER_OVERFLOW_ERROR)
      goto LABEL_61;
LABEL_60:
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_61;
  }
  for (i = v8; ; ++i)
  {
    v10 = v6[i];
    if (v10 != 95 && v10 != 45)
      break;
  }
  v11 = (char *)&v6[i];
  v12 = strlen(&v6[i]);
  v13 = v12;
  if ((int)v12 >= 1)
  {
    v14 = 0;
    v15 = v12;
    v16 = v6;
    do
    {
      v17 = 0;
      v18 = v16[i];
      if (v18 != 45 && v18 != 95)
      {
        if (v18 == 64)
          break;
        if (v14 > 8)
          goto LABEL_58;
        v17 = v14 + 1;
      }
      ++v16;
      v14 = v17;
      --v15;
    }
    while (v15);
  }
  v35 = 0u;
  v38 = 0;
  v37 = 0u;
  v36 = 0u;
  v34 = (char *)&v35 + 5;
  LODWORD(v35) = 40;
  v25 = 0;
  v26 = 0;
  icu::CharStringByteSink::CharStringByteSink(&v25, (uint64_t)&v34);
  sub_18BBCD7EC(&__src, __n[0], &v30, v29, &v28, v27, 0, 0, 0, (uint64_t)&v25, (int *)a3);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&v25);
  v25 = 0;
  v26 = 0;
  icu::CharStringByteSink::CharStringByteSink(&v25, (uint64_t)v41);
  v19 = sub_18BBCBDF0((char *)v34, (uint64_t)&v25, a3);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&v25);
  if (BYTE4(v35))
    uprv_free(v34);
  if (*(int *)a3 <= 0)
  {
    if (v19)
    {
      __n[0] = 12;
      v29 = 6;
      v27 = 4;
      sub_18BBCCE44((uint64_t)v41[0], (char *)&__src, __n, (char *)&v30, &v29, (char *)&v28, &v27, a3);
      if (*(int *)a3 > 0)
        goto LABEL_61;
      v35 = 0u;
      v38 = 0;
      v37 = 0u;
      v36 = 0u;
      v34 = (char *)&v35 + 5;
      LODWORD(v35) = 40;
      v25 = 0;
      v26 = 0;
      icu::CharStringByteSink::CharStringByteSink(&v25, (uint64_t)&v34);
      sub_18BBCD09C(&__src, __n[0], 0, 0, 0, 0, 0, 0, (uint64_t)&v25, (int *)a3);
      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&v25);
      if (*(int *)a3 <= 0)
      {
        if (uprv_strnicmp((_BYTE *)v41[0], v34, v38))
        {
          v20 = 0;
        }
        else
        {
          sub_18BBCD7EC(&__src, __n[0], 0, 0, 0, 0, v11, v13, 0, a2, (int *)a3);
          v20 = 1;
        }
      }
      else
      {
        v20 = 2;
      }
      if (BYTE4(v35))
        uprv_free(v34);
      if (v20 != 2)
      {
        if (v20)
          goto LABEL_61;
        if (v27 < 1)
        {
LABEL_45:
          v23 = v29;
          if (v29 < 1)
          {
LABEL_57:
            sub_18BBCD7EC(&__src, __n[0], &v30, v23, &v28, v27, v11, v13, 0, a2, (int *)a3);
            goto LABEL_61;
          }
          v35 = 0u;
          v38 = 0;
          v37 = 0u;
          v36 = 0u;
          v34 = (char *)&v35 + 5;
          LODWORD(v35) = 40;
          v25 = 0;
          v26 = 0;
          icu::CharStringByteSink::CharStringByteSink(&v25, (uint64_t)&v34);
          sub_18BBCD09C(&__src, __n[0], &v30, v29, 0, 0, 0, 0, (uint64_t)&v25, (int *)a3);
          icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&v25);
          if (*(int *)a3 <= 0)
          {
            if ((_DWORD)v38 && !uprv_strnicmp((_BYTE *)v41[0], v34, v38))
            {
              sub_18BBCD7EC(&__src, __n[0], &v30, v29, 0, 0, v11, v13, 0, a2, (int *)a3);
              v24 = 1;
            }
            else
            {
              v24 = 0;
            }
          }
          else
          {
            v24 = 2;
          }
          if (BYTE4(v35))
            uprv_free(v34);
          if (v24 != 2)
          {
            if (v24)
              goto LABEL_61;
            v23 = v29;
            goto LABEL_57;
          }
          goto LABEL_58;
        }
        v35 = 0u;
        v38 = 0;
        v37 = 0u;
        v36 = 0u;
        v34 = (char *)&v35 + 5;
        LODWORD(v35) = 40;
        v25 = 0;
        v26 = 0;
        icu::CharStringByteSink::CharStringByteSink(&v25, (uint64_t)&v34);
        sub_18BBCD09C(&__src, __n[0], 0, 0, &v28, v27, 0, 0, (uint64_t)&v25, (int *)a3);
        icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&v25);
        if (*(int *)a3 <= 0)
        {
          if ((_DWORD)v38 && !uprv_strnicmp((_BYTE *)v41[0], v34, v38))
          {
            sub_18BBCD7EC(&__src, __n[0], 0, 0, &v28, v27, v11, v13, 0, a2, (int *)a3);
            v22 = 1;
          }
          else
          {
            v22 = 0;
          }
        }
        else
        {
          v22 = 2;
        }
        if (BYTE4(v35))
          uprv_free(v34);
        if (v22 != 2)
        {
          if (v22)
            goto LABEL_61;
          goto LABEL_45;
        }
      }
LABEL_58:
      v7 = *a3;
      goto LABEL_59;
    }
LABEL_26:
    v21 = strlen(v6);
    (*(void (**)(uint64_t, const char *, size_t))(*(_QWORD *)a2 + 16))(a2, v6, v21);
  }
LABEL_61:
  if (BYTE4(v41[1]))
    uprv_free(v41[0]);
  if (LOBYTE(__n[4]))
    uprv_free(*(void **)&__n[1]);
}

uint64_t uloc_isRightToLeft(char *a1)
{
  int Script;
  BOOL v3;
  int32_t PropertyValueEnum;
  uint64_t result;
  int Language;
  char *v7;
  int v8;
  _BOOL4 v9;
  int v10;
  _QWORD v13[2];
  int v14;
  void *v15[8];
  char __s2[8];
  char alias[8];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  *(_QWORD *)alias = 0;
  Script = uloc_getScript((uint64_t)a1, alias, 8, &v14);
  if (v14 > 0 || (v14 != -124 ? (v3 = Script == 0) : (v3 = 1), v3))
  {
    v14 = 0;
    *(_QWORD *)__s2 = 0;
    Language = uloc_getLanguage((uint64_t)a1, __s2, 8, &v14);
    result = 0;
    if (v14 > 0 || v14 == -124)
      return result;
    if (Language >= 1)
    {
      v7 = strstr("root-en-es-pt-zh-ja-ko-de-fr-it-ar+he+fa+ru-nl-pl-th-tr-", __s2);
      if (v7)
      {
        v8 = v7[Language];
        if (v8 == 45)
          return 0;
        if (v8 == 43)
          return 1;
      }
    }
    v14 = 0;
    memset(&v15[1], 0, 56);
    v15[0] = (char *)&v15[1] + 5;
    LODWORD(v15[1]) = 40;
    v13[0] = 0;
    v13[1] = 0;
    icu::CharStringByteSink::CharStringByteSink(v13, (uint64_t)v15);
    sub_18BBCBDF0(a1, (uint64_t)v13, (UErrorCode *)&v14);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v13);
    v9 = 1;
    if (v14 <= 0 && v14 != -124)
    {
      v10 = uloc_getScript((uint64_t)v15[0], alias, 8, &v14);
      v9 = v14 > 0 || v14 == -124 || v10 == 0;
    }
    if (BYTE4(v15[1]))
      uprv_free(v15[0]);
    if (!v9)
      goto LABEL_6;
    return 0;
  }
LABEL_6:
  if (!(*(_DWORD *)alias ^ 0x6E617241 | alias[4]))
    strcpy(alias, "Arab");
  PropertyValueEnum = u_getPropertyValueEnum(UCHAR_SCRIPT, alias);
  return uscript_isRightToLeft(PropertyValueEnum);
}

uint64_t icu::Locale::isRightToLeft(icu::Locale *this)
{
  char *BaseName;

  BaseName = (char *)icu::Locale::getBaseName(this);
  return uloc_isRightToLeft(BaseName);
}

uint64_t ulocimp_getRegionForSupplementalData(char *a1, int a2, char *a3, int a4, int *a5)
{
  uint64_t v5;
  char *v11;
  uint64_t v12;
  uint64_t Country;
  unsigned int v14;
  __int16 v15;
  char *v16;
  _QWORD v18[2];
  int v19;
  void *v20[8];
  void *v21[7];
  uint64_t v22;
  char __src[8];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return 0;
  *(_QWORD *)__src = 0;
  v19 = 0;
  memset(&v21[1], 0, 48);
  v22 = 0;
  v21[0] = (char *)&v21[1] + 5;
  LODWORD(v21[1]) = 40;
  v20[0] = 0;
  v20[1] = 0;
  icu::CharStringByteSink::CharStringByteSink(v20, (uint64_t)v21);
  ulocimp_getKeywordValue(a1, "rg", (uint64_t)v20, &v19);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v20);
  if (v19 > 0 || (int)v22 < 3 || (int)v22 > 7)
  {
    Country = uloc_getCountry((uint64_t)a1, __src, 8, a5);
    if (*a5 <= 0)
    {
      v12 = Country;
      if (a2 && !(_DWORD)Country)
      {
        v19 = 0;
        memset(&v20[1], 0, 56);
        v20[0] = (char *)&v20[1] + 5;
        LODWORD(v20[1]) = 40;
        v18[0] = 0;
        v18[1] = 0;
        icu::CharStringByteSink::CharStringByteSink(v18, (uint64_t)v20);
        sub_18BBCBDF0(a1, (uint64_t)v18, (UErrorCode *)&v19);
        icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v18);
        if (v19 <= 0)
        {
          v14 = uloc_getCountry((uint64_t)v20[0], __src, 8, a5);
          if (*a5 <= 0)
            v12 = v14;
          else
            v12 = 0;
        }
        if (BYTE4(v20[1]))
          uprv_free(v20[0]);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v11 = (char *)v21[0];
    if (uprv_isASCIILetter(*(_BYTE *)v21[0]))
    {
      __src[0] = uprv_toupper(*v11);
      __src[1] = uprv_toupper(v11[1]);
      v12 = 2;
    }
    else
    {
      v15 = *(_WORD *)v11;
      __src[2] = v11[2];
      *(_WORD *)__src = v15;
      v12 = 3;
    }
  }
  __src[(int)v12] = 0;
  v16 = strncpy(a3, __src, a4);
  v5 = u_terminateChars((uint64_t)v16, a4, v12, a5);
  if (BYTE4(v21[1]))
    uprv_free(v21[0]);
  return v5;
}

uint64_t ulocimp_setRegionToSupplementalRegion(char *a1, char *a2, int a3)
{
  uint64_t v5;
  std::string::size_type size;
  std::string *v7;
  std::string::value_type v8;
  std::string *v9;
  std::string *v10;
  std::string::value_type v11;
  std::string *v12;
  int v13;
  std::string *v14;
  size_t v15;
  char *v16;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  std::string v24;
  UErrorCode v25;
  _OWORD v26[2];
  char *__s[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[3];
  _OWORD v40[14];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v25 = U_ZERO_ERROR;
  memset(v40, 0, sizeof(v40));
  icu::Locale::Locale((icu::Locale *)v40, a1, 0, 0, 0);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v22, "rg");
  memset(&v24, 0, sizeof(v24));
  *(_QWORD *)&v26[0] = &off_1E2247A20;
  *((_QWORD *)&v26[0] + 1) = &v24;
  icu::Locale::getKeywordValue((uint64_t)v40, v22, v23, (uint64_t)v26, &v25);
  icu::ByteSink::~ByteSink((icu::ByteSink *)v26);
  v5 = 0;
  if (v25 <= U_ZERO_ERROR)
  {
    size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v24.__r_.__value_.__l.__size_;
    if (size < 2)
    {
      v5 = 0;
    }
    else
    {
      memset(v39, 0, sizeof(v39));
      icu::LocaleBuilder::LocaleBuilder(v39);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v20, (const char *)v40 + 8);
      icu::LocaleBuilder::setLanguage((uint64_t)v39, v20, v21);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v18, (const char *)&v40[1] + 4);
      icu::LocaleBuilder::setScript((uint64_t)v39, v18, v19);
      std::string::resize(&v24, 2uLL, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v24;
      else
        v7 = (std::string *)v24.__r_.__value_.__r.__words[0];
      v8 = uprv_toupper(v7->__r_.__value_.__s.__data_[0]);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v24;
      else
        v9 = (std::string *)v24.__r_.__value_.__r.__words[0];
      v9->__r_.__value_.__s.__data_[0] = v8;
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v24;
      else
        v10 = (std::string *)v24.__r_.__value_.__r.__words[0];
      v11 = uprv_toupper(v10->__r_.__value_.__s.__data_[1]);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v24;
      else
        v12 = (std::string *)v24.__r_.__value_.__r.__words[0];
      v12->__r_.__value_.__s.__data_[1] = v11;
      v13 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v24;
      else
        v14 = (std::string *)v24.__r_.__value_.__r.__words[0];
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v13 = v24.__r_.__value_.__r.__words[1];
      icu::LocaleBuilder::setRegion((uint64_t)v39, v14, v13);
      v25 = U_ZERO_ERROR;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      *(_OWORD *)__s = 0u;
      v28 = 0u;
      memset(v26, 0, sizeof(v26));
      icu::LocaleBuilder::build((icu::LocaleBuilder *)v39, &v25, (icu::Locale *)v26);
      v5 = 0;
      if (v25 <= U_ZERO_ERROR)
      {
        v15 = strlen(__s[1]);
        v16 = strncpy(a2, __s[1], a3);
        v5 = u_terminateChars((uint64_t)v16, a3, v15, (int *)&v25);
      }
      icu::Locale::~Locale((icu::Locale *)v26);
      icu::LocaleBuilder::~LocaleBuilder((icu::LocaleBuilder *)v39);
    }
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  icu::Locale::~Locale((icu::Locale *)v40);
  return v5;
}

uint64_t sub_18BBCCE44(uint64_t a1, char *a2, int *a3, char *a4, int *a5, char *a6, int *a7, UErrorCode *a8)
{
  int v9;
  UErrorCode v10;
  int v17;
  icu::CharString *v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v24;
  icu::CharString *v25;
  char *v26;
  char v27;
  uint64_t v28;

  v9 = a1;
  v28 = *MEMORY[0x1E0C80C00];
  v25 = (icu::CharString *)a1;
  v10 = *a8;
  if (a7 && a6 && a5 && a4 && a3 && a2 && a1 && v10 <= U_ZERO_ERROR)
  {
    sub_18BC3BA38(a1, &v25, a8, (uint64_t)&v26);
    v17 = icu::CharString::extract(&v26, a2, *a3, a8);
    if (v27)
      uprv_free(v26);
    if (*(int *)a8 <= 0)
    {
      *a3 = v17;
      v18 = v25;
      v19 = *(unsigned __int8 *)v25;
      if (v19 == 95 || v19 == 45)
      {
        v18 = (icu::CharString *)((char *)v25 + 1);
        v25 = (icu::CharString *)((char *)v25 + 1);
      }
      sub_18BC3BBB8(v18, &v25, a8, (uint64_t)&v26);
      v20 = icu::CharString::extract(&v26, a4, *a5, a8);
      if (v27)
        uprv_free(v26);
      if (*(int *)a8 <= 0)
      {
        *a5 = v20;
        if (v20 <= 0)
        {
          v21 = (uint64_t)v25;
        }
        else
        {
          if (!uprv_strnicmp(a4, "Zzzz", v20))
            *a5 = 0;
          v21 = (uint64_t)v25;
          v22 = *(unsigned __int8 *)v25;
          if (v22 == 95 || v22 == 45)
          {
            v21 = (uint64_t)v25 + 1;
            v25 = (icu::CharString *)((char *)v25 + 1);
          }
        }
        sub_18BC3BCC4(v21, (uint64_t *)&v25, a8, (uint64_t)&v26);
        v24 = icu::CharString::extract(&v26, a6, *a7, a8);
        if (v27)
          uprv_free(v26);
        if (*(int *)a8 <= 0)
        {
          *a7 = v24;
          if (v24 < 1)
          {
            if ((*(unsigned __int8 *)v25 | 0x40) != 0x40)
              v25 = (icu::CharString *)((char *)v25 - 1);
          }
          else if (!uprv_strnicmp(a6, "ZZ", v24))
          {
            *a7 = 0;
          }
        }
      }
    }
  }
  else if (v10 <= U_ZERO_ERROR)
  {
    *a8 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return ((_DWORD)v25 - v9);
}

BOOL sub_18BBCD09C(uint64_t *a1, uint64_t a2, const void *a3, int a4, const void *a5, int a6, _BYTE *a7, unsigned int a8, uint64_t a9, int *a10)
{
  _BOOL8 result;
  char *v18;
  int v19;
  char *v20;
  int v21;
  char *v22;
  int v23;
  uint64_t v24;
  char *v25;
  int v26;
  _QWORD v28[2];
  void *v29[8];
  _OWORD v30[10];
  _OWORD __dst[10];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (*a10 > 0)
    return 0;
  memset(v30, 0, 157);
  if (a4 < 1 || a6 < 1)
  {
    if (a4 < 1)
      goto LABEL_22;
  }
  else
  {
    *(_OWORD *)((char *)__dst + 8) = 0uLL;
    *(_OWORD *)((char *)&__dst[2] + 8) = 0uLL;
    *(_OWORD *)((char *)&__dst[1] + 8) = 0uLL;
    *(_QWORD *)&__dst[0] = (char *)__dst + 13;
    DWORD2(__dst[0]) = 40;
    *((_QWORD *)&__dst[3] + 1) = 0;
    v29[0] = 0;
    v29[1] = 0;
    icu::CharStringByteSink::CharStringByteSink(v29, (uint64_t)__dst);
    sub_18BBCD7EC(a1, a2, a3, a4, a5, a6, 0, 0, 0, (uint64_t)v29, a10);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v29);
    if (*a10 <= 0 && (v18 = sub_18BBCD604(*(const char **)&__dst[0], (char *)v30, (UErrorCode *)a10), *a10 <= 0))
    {
      if (v18)
      {
        sub_18BBCD7EC(0, 0, 0, 0, 0, 0, a7, a8, (uint64_t)v18, a9, a10);
        v19 = 1;
      }
      else
      {
        v19 = 0;
      }
    }
    else
    {
      v19 = 2;
    }
    if (BYTE12(__dst[0]))
      uprv_free(*(void **)&__dst[0]);
    if (v19)
    {
      if (v19 != 2)
        return 1;
      goto LABEL_55;
    }
  }
  memset((char *)__dst + 8, 0, 56);
  *(_QWORD *)&__dst[0] = (char *)__dst + 13;
  DWORD2(__dst[0]) = 40;
  v29[0] = 0;
  v29[1] = 0;
  icu::CharStringByteSink::CharStringByteSink(v29, (uint64_t)__dst);
  sub_18BBCD7EC(a1, a2, a3, a4, 0, 0, 0, 0, 0, (uint64_t)v29, a10);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v29);
  if (*a10 <= 0 && (v20 = sub_18BBCD604(*(const char **)&__dst[0], (char *)v30, (UErrorCode *)a10), *a10 <= 0))
  {
    if (v20)
    {
      sub_18BBCD7EC(0, 0, 0, 0, a5, a6, a7, a8, (uint64_t)v20, a9, a10);
      v21 = 1;
    }
    else
    {
      v21 = 0;
    }
  }
  else
  {
    v21 = 2;
  }
  if (BYTE12(__dst[0]))
    uprv_free(*(void **)&__dst[0]);
  if (v21 == 2)
    goto LABEL_55;
  if (v21)
    return 1;
LABEL_22:
  if (a6 >= 1)
  {
    memset((char *)__dst + 8, 0, 56);
    *(_QWORD *)&__dst[0] = (char *)__dst + 13;
    DWORD2(__dst[0]) = 40;
    v29[0] = 0;
    v29[1] = 0;
    icu::CharStringByteSink::CharStringByteSink(v29, (uint64_t)__dst);
    sub_18BBCD7EC(a1, a2, 0, 0, a5, a6, 0, 0, 0, (uint64_t)v29, a10);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v29);
    if (*a10 <= 0 && (v22 = sub_18BBCD604(*(const char **)&__dst[0], (char *)v30, (UErrorCode *)a10), *a10 <= 0))
    {
      if (v22)
      {
        sub_18BBCD7EC(0, 0, a3, a4, 0, 0, a7, a8, (uint64_t)v22, a9, a10);
        v23 = 1;
      }
      else
      {
        v23 = 0;
      }
    }
    else
    {
      v23 = 2;
    }
    if (BYTE12(__dst[0]))
      uprv_free(*(void **)&__dst[0]);
    if (v23 == 2)
      goto LABEL_55;
    if (v23)
      return 1;
  }
  memset(&v29[1], 0, 56);
  v28[1] = 0;
  v29[0] = (char *)&v29[1] + 5;
  LODWORD(v29[1]) = 40;
  v28[0] = 0;
  icu::CharStringByteSink::CharStringByteSink(v28, (uint64_t)v29);
  if (*a10 <= 0)
  {
    v24 = a8;
    if ((int)a2 <= 11)
    {
      memset(__dst, 0, 157);
      if ((int)a2 < 1)
        a2 = 0;
      else
        memcpy(__dst, a1, a2);
      (*(void (**)(_QWORD *, _OWORD *, uint64_t))(v28[0] + 16))(v28, __dst, a2);
      goto LABEL_47;
    }
  }
  else
  {
    v24 = a8;
    if (*a10 != 15)
      goto LABEL_47;
  }
  *a10 = 1;
LABEL_47:
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v28);
  if (*a10 <= 0 && (v25 = sub_18BBCD604((const char *)v29[0], (char *)v30, (UErrorCode *)a10), *a10 <= 0))
  {
    if (v25)
    {
      sub_18BBCD7EC(0, 0, a3, a4, a5, a6, a7, v24, (uint64_t)v25, a9, a10);
      v26 = 1;
    }
    else
    {
      v26 = 0;
    }
  }
  else
  {
    v26 = 2;
  }
  if (BYTE4(v29[1]))
    uprv_free(v29[0]);
  if (v26 != 2)
    return v26 != 0;
LABEL_55:
  if (*a10 <= 0)
  {
    result = 0;
    *a10 = 1;
    return result;
  }
  return 0;
}

char *sub_18BBCD604(const char *a1, char *a2, UErrorCode *a3)
{
  _QWORD *v6;
  char v7;
  const UChar *StringByKey;
  int v9;
  int v10;
  char *v12;
  int v13;
  char *v14;
  int v15;
  uint64_t v16;
  void *v17[9];

  v17[8] = *(void **)MEMORY[0x1E0C80C00];
  if (*(int *)a3 > 0)
    return 0;
  v16 = 0;
  v6 = (_QWORD *)ures_openDirect(0, (uint64_t)"likelySubtags", (uint64_t)&v16);
  if ((int)v16 > 0)
  {
    a2 = 0;
    *a3 = v16;
    goto LABEL_23;
  }
  memset(&v17[1], 0, 56);
  v17[0] = (char *)&v17[1] + 5;
  LODWORD(v17[1]) = 40;
  if (a1)
  {
    if (*a1)
    {
      if (*a1 == 95)
      {
        icu::StringPiece::StringPiece((icu::StringPiece *)&v14, "und");
        icu::CharString::append((icu::CharString *)v17, v14, v15, a3);
        icu::StringPiece::StringPiece((icu::StringPiece *)&v12, a1);
        icu::CharString::append((icu::CharString *)v17, v12, v13, a3);
        if (*(int *)a3 > 0)
        {
          a2 = 0;
          v7 = 0;
          goto LABEL_20;
        }
        a1 = (const char *)v17[0];
      }
    }
    else
    {
      a1 = "und";
    }
  }
  StringByKey = ures_getStringByKey((uint64_t)v6, a1, (int *)&v16 + 1, (int *)&v16);
  v9 = v16;
  if ((int)v16 < 1)
  {
    if (SHIDWORD(v16) < 157)
    {
      u_UCharsToChars(StringByKey, a2, HIDWORD(v16) + 1);
      goto LABEL_19;
    }
    a2 = 0;
    v9 = 5;
    goto LABEL_17;
  }
  if ((_DWORD)v16 != 2)
  {
    a2 = 0;
LABEL_17:
    *a3 = v9;
    goto LABEL_19;
  }
  a2 = 0;
LABEL_19:
  v7 = 1;
LABEL_20:
  if (BYTE4(v17[1]))
    uprv_free(v17[0]);
  if ((v7 & 1) != 0)
  {
LABEL_23:
    v10 = 1;
    if (!v6)
      goto LABEL_25;
    goto LABEL_24;
  }
  v10 = 0;
  if (v6)
LABEL_24:
    ures_close(v6);
LABEL_25:
  if (!v10)
    return 0;
  return a2;
}

uint64_t *sub_18BBCD7EC(uint64_t *__src, uint64_t __n, const void *a3, int a4, const void *a5, int a6, _BYTE *a7, uint64_t a8, uint64_t a9, uint64_t a10, int *a11)
{
  int v11;
  uint64_t v13;
  uint64_t *v20;
  size_t v21;
  uint64_t v22;
  int v23;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _OWORD __dst[10];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v11 = *a11;
  if (*a11 > 0)
    goto LABEL_2;
  v13 = __n;
  if ((int)__n > 11 || a4 > 5 || a6 > 3)
    goto LABEL_18;
  memset(__dst, 0, 157);
  if ((int)__n >= 1)
  {
    v20 = __src;
    v21 = v13;
LABEL_12:
    memcpy(__dst, v20, v21);
    goto LABEL_13;
  }
  if (!a9)
  {
    v13 = 0;
    if (a4 >= 1)
      goto LABEL_14;
    goto LABEL_15;
  }
  v29 = 0;
  v28 = 0;
  __src = (uint64_t *)uloc_getLanguage(a9, (char *)&v28, 12, a11);
  v11 = *a11;
  if (*a11 > 0 || (int)__src > 11)
    goto LABEL_2;
  v13 = (uint64_t)__src;
  if ((_DWORD)__src)
  {
    v21 = (int)__src;
    v20 = &v28;
    goto LABEL_12;
  }
LABEL_13:
  if (a4 > 0)
  {
LABEL_14:
    *((_BYTE *)__dst + (int)v13) = 95;
    v22 = (int)v13 + 1;
    memcpy((char *)__dst + v22, a3, a4);
    v13 = (v22 + a4);
    goto LABEL_15;
  }
  if (a9)
  {
    WORD2(v28) = 0;
    LODWORD(v28) = 0;
    __src = (uint64_t *)uloc_getScript(a9, (char *)&v28, 6, a11);
    v11 = *a11;
    if (*a11 > 0)
      goto LABEL_2;
    v26 = (int)__src;
    if ((int)__src > 5)
      goto LABEL_2;
    if ((int)__src >= 1)
    {
      *((_BYTE *)__dst + (int)v13) = 95;
      v27 = (int)v13 + 1;
      memcpy((char *)__dst + v27, &v28, __src);
      v13 = (v26 + v27);
    }
  }
LABEL_15:
  if (a6 >= 1)
  {
    *((_BYTE *)__dst + (int)v13) = 95;
    memcpy((char *)__dst + (int)v13 + 1, a5, a6);
    v13 = (v13 + 1 + a6);
LABEL_17:
    v23 = 1;
    goto LABEL_39;
  }
  if (a9)
  {
    LODWORD(v28) = 0;
    __src = (uint64_t *)uloc_getCountry(a9, (char *)&v28, 4, a11);
    v11 = *a11;
    if (*a11 <= 0)
    {
      v25 = (int)__src;
      if ((int)__src <= 3)
      {
        if ((int)__src >= 1)
        {
          *((_BYTE *)__dst + (int)v13) = 95;
          memcpy((char *)__dst + (int)v13 + 1, &v28, __src);
          v13 = (v25 + v13 + 1);
          goto LABEL_17;
        }
        goto LABEL_38;
      }
    }
LABEL_2:
    if (v11 != 15 && v11 > 0)
      return __src;
LABEL_18:
    *a11 = 1;
    return __src;
  }
LABEL_38:
  v23 = 0;
LABEL_39:
  __src = (uint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a10 + 16))(a10, __dst, v13);
  if ((int)a8 >= 1)
  {
    if (*a7 != 64)
    {
      (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a10 + 16))(a10, "_", 1);
      if (!v23)
        (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a10 + 16))(a10, "_", 1);
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a10 + 16))(a10, a7, a8);
  }
  return __src;
}

void sub_18BBCDB20(icu::ByteSink *a1)
{
  void *v1;

  icu::ByteSink::~ByteSink(a1);
  icu::UMemory::operator delete(v1);
}

std::string *sub_18BBCDB34(uint64_t a1, const std::string::value_type *a2, int a3)
{
  return std::string::append(*(std::string **)(a1 + 8), a2, a3);
}

uint64_t sub_18BBCDB40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  uprv_free(*(void **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 - 8);
    if (v3)
    {
      v4 = 48 * v3;
      do
      {
        if (*(_QWORD *)(v2 + v4 - 24))
          sub_18BBD08C0(v2 + v4 - 48);
        v4 -= 48;
      }
      while (v4);
    }
    icu::UMemory::operator delete[]((void *)(v2 - 16));
  }
  return a1;
}

uint64_t sub_18BBCDBB0(int *a1)
{
  unint64_t v2;
  uint64_t v3;
  _OWORD v5[12];
  __int128 v6;
  __int128 v7;
  _OWORD v8[3];
  uint64_t v9;

  v9 = 0;
  v7 = 0u;
  memset(v8, 0, sizeof(v8));
  v6 = 0u;
  memset(v5, 0, sizeof(v5));
  sub_18BBCB75C((int32x2_t *)v5 + 1, a1);
  v9 = 0;
  memset((char *)v8 + 8, 0, 36);
  v6 = 0u;
  v7 = 0u;
  LODWORD(v8[0]) = 0;
  sub_18BBCDC94((uint64_t)v5, (UErrorCode *)a1);
  if (*a1 <= 0)
  {
    v3 = icu::UMemory::operator new((icu::UMemory *)0x160, v2);
    if (v3)
    {
      qword_1EE009310 = sub_18BBCE624(v3, (uint64_t *)v5);
      sub_18BC0ECC4(0xBu, (uint64_t)sub_18BBCE554);
    }
    else
    {
      qword_1EE009310 = 0;
      *a1 = 7;
    }
  }
  return sub_18BBCF51C((uint64_t)v5);
}

void sub_18BBCDC94(uint64_t a1, UErrorCode *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  unsigned int v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  void *v74;
  void *v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  _OWORD v83[2];
  uint64_t v84;
  _QWORD v85[4];
  _OWORD v86[8];
  uint64_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = ures_openDirect(0, (uint64_t)"langInfo", (uint64_t)a2);
  if (*(int *)a2 <= 0)
  {
    v87 = 0;
    memset(v86, 0, sizeof(v86));
    icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v86);
    v85[2] = 0;
    v85[0] = &unk_1E2257598;
    v85[1] = 0;
    v85[3] = 0xFFFFFFFFLL;
    ures_getValueWithFallback(*(_QWORD *)a1, "likely", (uint64_t)v86, (uint64_t)v85, a2);
    v84 = 0;
    memset(v83, 0, sizeof(v83));
    sub_18BC62408((uint64_t)v85, (int *)a2, (uint64_t)v83);
    if (*(int *)a2 > 0)
    {
LABEL_12:
      icu::ResourceValue::~ResourceValue((icu::ResourceValue *)v85);
      icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v86);
      return;
    }
    v81 = 0;
    v82 = 0;
    v79 = 0;
    v80 = 0;
    v78 = 0;
    if (!sub_18BBCF3D8(a1, (icu::ResourceTable *)v83, "languageAliases", (icu::ResourceValue *)v85, &v82, (int *)&v79 + 1, a2)|| !sub_18BBCF3D8(a1, (icu::ResourceTable *)v83, "regionAliases", (icu::ResourceValue *)v85, &v81, (int *)&v79, a2)|| !sub_18BBCF3D8(a1, (icu::ResourceTable *)v83, "lsrs", (icu::ResourceValue *)v85, &v80, &v78, a2))
    {
LABEL_11:
      uprv_free(v80);
      uprv_free(v81);
      uprv_free(v82);
      goto LABEL_12;
    }
    if ((v79 & 0x100000000) != 0 || (v79 & 1) != 0 || (-1431655765 * v78 + 715827882) >= 0x55555555)
    {
      v4 = 3;
LABEL_10:
      *a2 = v4;
      goto LABEL_11;
    }
    if (!v78
      || !icu::ResourceTable::findValue((icu::ResourceTable *)v83, "trie", (icu::ResourceValue *)v85))
    {
      v4 = 2;
      goto LABEL_10;
    }
    v77 = 0;
    *(_QWORD *)(a1 + 208) = sub_18BC62320((uint64_t)v85, &v77, (int *)a2);
    if (*(int *)a2 > 0)
      goto LABEL_11;
    v76 = 0;
    ures_getValueWithFallback(*(_QWORD *)a1, "match", (uint64_t)v86, (uint64_t)v85, (UErrorCode *)&v76);
    v74 = 0;
    v75 = 0;
    v73 = 0;
    v5 = v76;
    if (v76 <= 0)
    {
      v71 = 0;
      v69 = 0u;
      v70 = 0u;
      sub_18BC62408((uint64_t)v85, (int *)a2, (uint64_t)&v69);
      if (*(int *)a2 > 0)
        goto LABEL_131;
      if (icu::ResourceTable::findValue((icu::ResourceTable *)&v69, "trie", (icu::ResourceValue *)v85))
      {
        *(_QWORD *)(a1 + 232) = sub_18BC62320((uint64_t)v85, &v77, (int *)a2);
        if (*(int *)a2 > 0)
          goto LABEL_131;
      }
      if (!icu::ResourceTable::findValue((icu::ResourceTable *)&v69, "regionToPartitions", (icu::ResourceValue *)v85))goto LABEL_134;
      *(_QWORD *)(a1 + 240) = sub_18BC62320((uint64_t)v85, &v77, (int *)a2);
      if (*(int *)a2 > 0)
        goto LABEL_131;
      if (v77 >= 1677)
      {
LABEL_134:
        if (!sub_18BBCF3D8(a1, (icu::ResourceTable *)&v69, "partitions", (icu::ResourceValue *)v85, &v75, (int *)&v73 + 1, a2)|| !sub_18BBCF3D8(a1, (icu::ResourceTable *)&v69, "paradigms", (icu::ResourceValue *)v85, &v74, (int *)&v73, a2))
        {
          goto LABEL_131;
        }
        if ((-1431655765 * v73 + 715827882) <= 0x55555554)
        {
          if (!icu::ResourceTable::findValue((icu::ResourceTable *)&v69, "distances", (icu::ResourceValue *)v85))goto LABEL_19;
          *(_QWORD *)(a1 + 272) = sub_18BC622BC((uint64_t)v85, &v77, (int *)a2);
          if (*(int *)a2 > 0)
            goto LABEL_131;
          if (v77 >= 4)
          {
LABEL_19:
            *(_BYTE *)(a1 + 184) = 1;
            *(_QWORD *)(a1 + 192) = uhash_openSize((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, (uint64_t)uhash_compareChars, SHIDWORD(v79) / 2, (int *)a2);
            uhash_close(0);
            if (SHIDWORD(v79) >= 1)
            {
              v6 = 0;
              do
              {
                v7 = *((unsigned int *)v82 + v6);
                if ((int)v7 < 1 || *(_BYTE *)(a1 + 184) == 0)
                  v9 = 0;
                else
                  v9 = **(_QWORD **)(a1 + 88) + v7;
                v10 = *((unsigned int *)v82 + v6 + 1);
                if (*(_BYTE *)(a1 + 184))
                  v11 = (int)v10 < 1;
                else
                  v11 = 1;
                if (v11)
                  v12 = 0;
                else
                  v12 = **(_QWORD **)(a1 + 88) + v10;
                uhash_put(*(_QWORD *)(a1 + 192), v9, v12, (int *)a2);
                v6 += 2;
              }
              while (SHIDWORD(v79) > (int)v6);
            }
            *(_QWORD *)(a1 + 200) = uhash_openSize((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, (uint64_t)uhash_compareChars, (int)v79 / 2, (int *)a2);
            uhash_close(0);
            if ((int)v79 >= 1)
            {
              v14 = 0;
              do
              {
                v15 = *((unsigned int *)v81 + v14);
                if ((int)v15 < 1 || *(_BYTE *)(a1 + 184) == 0)
                  v17 = 0;
                else
                  v17 = **(_QWORD **)(a1 + 88) + v15;
                v18 = *((unsigned int *)v81 + v14 + 1);
                if (*(_BYTE *)(a1 + 184))
                  v19 = (int)v18 < 1;
                else
                  v19 = 1;
                if (v19)
                  v20 = 0;
                else
                  v20 = **(_QWORD **)(a1 + 88) + v18;
                uhash_put(*(_QWORD *)(a1 + 200), v17, v20, (int *)a2);
                v14 += 2;
              }
              while ((int)v79 > (int)v14);
            }
            if (*(int *)a2 >= 1)
              goto LABEL_131;
            v21 = v78;
            v22 = v78 / 3;
            *(_DWORD *)(a1 + 224) = v78 / 3;
            v23 = v22;
            v24 = 48 * v22;
            v25 = !is_mul_ok(v23, 0x30uLL);
            v26 = __CFADD__(v24, 16);
            v27 = v24 + 16;
            if (v26)
              v25 = 1;
            if (v25)
              v28 = -1;
            else
              v28 = v27;
            v29 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v28, v13);
            if (v29)
            {
              *v29 = 48;
              v29[1] = v23;
              v31 = v29 + 2;
              if ((v21 + 2) >= 5)
              {
                v32 = v29 + 2;
                do
                {
                  *v32 = "und";
                  v32[1] = "";
                  v32[3] = 0;
                  v32[4] = 0;
                  v32[2] = "";
                  *((_DWORD *)v32 + 10) = 0;
                  v32 += 6;
                }
                while (v32 != &v31[6 * (int)v23]);
              }
              *(_QWORD *)(a1 + 216) = v31;
              if (v78 >= 1)
              {
                v33 = 0;
                v34 = 0;
                do
                {
                  v35 = *((unsigned int *)v80 + v34);
                  if ((int)v35 < 1 || *(_BYTE *)(a1 + 184) == 0)
                    v37 = 0;
                  else
                    v37 = **(_QWORD **)(a1 + 88) + v35;
                  v38 = (char *)v80 + 4 * v34;
                  v39 = *((unsigned int *)v38 + 1);
                  if (*(_BYTE *)(a1 + 184))
                    v40 = (int)v39 < 1;
                  else
                    v40 = 1;
                  if (v40)
                    v41 = 0;
                  else
                    v41 = **(_QWORD **)(a1 + 88) + v39;
                  v42 = 0;
                  if (*(_BYTE *)(a1 + 184))
                  {
                    v43 = *((unsigned int *)v38 + 2);
                    if ((int)v43 >= 1)
                      v42 = (char *)(**(_QWORD **)(a1 + 88) + v43);
                  }
                  *(_QWORD *)&v69 = v37;
                  *((_QWORD *)&v69 + 1) = v41;
                  v70 = (unint64_t)v42;
                  v44 = sub_18BBD0828(v42);
                  v72 = 0;
                  v71 = v44;
                  sub_18BBD08C8(*(_QWORD *)(a1 + 216) + v33, (uint64_t)&v69);
                  if (*((_QWORD *)&v70 + 1))
                    sub_18BBD08C0((uint64_t)&v69);
                  v34 += 3;
                  v33 += 48;
                }
                while (v78 > (int)v34);
              }
              if (v73 <= 0)
              {
LABEL_91:
                v52 = v73;
                if ((int)v73 >= 1)
                {
                  v53 = v73 / 3uLL;
                  *(_DWORD *)(a1 + 264) = v53;
                  v54 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)(48 * v53 + 16), v30);
                  if (v54)
                  {
                    *v54 = 48;
                    v54[1] = v53;
                    v55 = v54 + 2;
                    if (v52 >= 3)
                    {
                      v56 = v54 + 2;
                      do
                      {
                        *v56 = "und";
                        v56[1] = "";
                        v56[3] = 0;
                        v56[4] = 0;
                        v56[2] = "";
                        *((_DWORD *)v56 + 10) = 0;
                        v56 += 6;
                      }
                      while (v56 != &v55[6 * v53]);
                    }
                    if ((int)v73 >= 1)
                    {
                      v57 = 0;
                      v58 = (uint64_t)(v54 + 2);
                      do
                      {
                        v59 = *((unsigned int *)v74 + v57);
                        if ((int)v59 < 1 || *(_BYTE *)(a1 + 184) == 0)
                          v61 = 0;
                        else
                          v61 = **(_QWORD **)(a1 + 88) + v59;
                        v62 = (char *)v74 + 4 * v57;
                        v63 = *((unsigned int *)v62 + 1);
                        if (*(_BYTE *)(a1 + 184))
                          v64 = (int)v63 < 1;
                        else
                          v64 = 1;
                        if (v64)
                          v65 = 0;
                        else
                          v65 = **(_QWORD **)(a1 + 88) + v63;
                        v66 = 0;
                        if (*(_BYTE *)(a1 + 184))
                        {
                          v67 = *((unsigned int *)v62 + 2);
                          if ((int)v67 >= 1)
                            v66 = (char *)(**(_QWORD **)(a1 + 88) + v67);
                        }
                        *(_QWORD *)&v69 = v61;
                        *((_QWORD *)&v69 + 1) = v65;
                        v70 = (unint64_t)v66;
                        v68 = sub_18BBD0828(v66);
                        v72 = 0;
                        v71 = v68;
                        sub_18BBD08C8(v58, (uint64_t)&v69);
                        if (*((_QWORD *)&v70 + 1))
                          sub_18BBD08C0((uint64_t)&v69);
                        v57 += 3;
                        v58 += 48;
                      }
                      while ((int)v73 > (int)v57);
                    }
                    *(_QWORD *)(a1 + 256) = v55;
                    goto LABEL_131;
                  }
                  goto LABEL_129;
                }
LABEL_131:
                uprv_free(v74);
                uprv_free(v75);
                goto LABEL_11;
              }
              v45 = uprv_malloc(8 * HIDWORD(v73));
              *(_QWORD *)(a1 + 248) = v45;
              if (v45)
              {
                v46 = HIDWORD(v73);
                if (SHIDWORD(v73) >= 1)
                {
                  v47 = 0;
                  v48 = *(unsigned __int8 *)(a1 + 184);
                  do
                  {
                    v49 = *((unsigned int *)v75 + v47);
                    if ((int)v49 < 1 || v48 == 0)
                      v51 = 0;
                    else
                      v51 = **(_QWORD **)(a1 + 88) + v49;
                    *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * v47++) = v51;
                  }
                  while (v46 != v47);
                }
                goto LABEL_91;
              }
            }
            else
            {
              *(_QWORD *)(a1 + 216) = 0;
            }
LABEL_129:
            v5 = 7;
            goto LABEL_130;
          }
        }
      }
      v5 = 3;
    }
    else if (v76 == 2)
    {
      goto LABEL_19;
    }
LABEL_130:
    *a2 = v5;
    goto LABEL_131;
  }
}

uint64_t sub_18BBCE554()
{
  void *v0;

  if (qword_1EE009310)
  {
    v0 = (void *)sub_18BBCE778(qword_1EE009310);
    icu::UMemory::operator delete(v0);
  }
  qword_1EE009310 = 0;
  atomic_store(0, &dword_1EE009318);
  return 1;
}

uint64_t sub_18BBCE594(int *a1)
{
  unsigned int v3;

  if (*a1 > 0)
    return 0;
  v3 = atomic_load(&dword_1EE009318);
  if (v3 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009318))
  {
    if (dword_1EE00931C >= 1)
      *a1 = dword_1EE00931C;
  }
  else
  {
    sub_18BBCDBB0(a1);
    dword_1EE00931C = *a1;
    icu::umtx_initImplPostInit(&dword_1EE009318);
  }
  return qword_1EE009310;
}

uint64_t sub_18BBCE624(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  icu::BytesTrie *v6;
  uint64_t i;
  int v8;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[11];
  a2[11] = 0;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = a2[24];
  a2[24] = 0;
  v5 = a2[26];
  *(_QWORD *)(a1 + 24) = a2[25];
  a2[25] = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = (icu::BytesTrie *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v5;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)(a1 + 296) = a2[27];
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 29);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 31);
  *(_DWORD *)(a1 + 336) = *((_DWORD *)a2 + 66);
  *(_QWORD *)(a1 + 344) = a2[34];
  a2[31] = 0;
  a2[32] = 0;
  *a2 = 0;
  a2[27] = 0;
  icu::BytesTrie::next((icu::BytesTrie *)(a1 + 32), 42);
  *(_QWORD *)(a1 + 64) = (*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) | ((unint64_t)(*(_DWORD *)(a1 + 56) + 2) << 59);
  icu::BytesTrie::next(v6, 42);
  *(_QWORD *)(a1 + 72) = (*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) | ((unint64_t)(*(_DWORD *)(a1 + 56) + 2) << 59);
  icu::BytesTrie::next(v6, 42);
  *(_DWORD *)(a1 + 80) = icu::BytesTrie::readValue((icu::BytesTrie *)(*(_QWORD *)(a1 + 48) + 1), (const unsigned __int8 *)(**(unsigned __int8 **)(a1 + 48) >> 1));
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 56) = -1;
  for (i = 11; i != 37; ++i)
  {
    v8 = icu::BytesTrie::next(v6, (int)i + 86);
    v9 = *(_QWORD *)(a1 + 40);
    if (v8 == 1)
      *(_QWORD *)(a1 + 8 * i) = (*(_QWORD *)(a1 + 48) - v9) | ((unint64_t)(*(_DWORD *)(a1 + 56) + 2) << 59);
    *(_QWORD *)(a1 + 48) = v9;
    *(_DWORD *)(a1 + 56) = -1;
  }
  return a1;
}

uint64_t sub_18BBCE778(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  ures_close(*(_QWORD **)a1);
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 12))
      uprv_free(*(void **)v2);
    icu::UMemory::operator delete((void *)v2);
  }
  v3 = *(_QWORD *)(a1 + 296);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 - 8);
    if (v4)
    {
      v5 = 48 * v4;
      do
      {
        if (*(_QWORD *)(v3 + v5 - 24))
          sub_18BBD08C0(v3 + v5 - 48);
        v5 -= 48;
      }
      while (v5);
    }
    icu::UMemory::operator delete[]((void *)(v3 - 16));
  }
  sub_18BBCDB40(a1 + 304);
  icu::BytesTrie::~BytesTrie((void **)(a1 + 32));
  uhash_close(*(void ***)(a1 + 24));
  uhash_close(*(void ***)(a1 + 16));
  return a1;
}

void sub_18BBCE828(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE *v5;

  v5 = *(_BYTE **)(a2 + 40);
  if (*v5 == 64 && v5[1] == 120 && v5[2] == 61)
  {
    *(_QWORD *)a4 = v5;
    *(_QWORD *)(a4 + 8) = "";
    *(_QWORD *)(a4 + 16) = "";
    *(_QWORD *)(a4 + 24) = 0;
    *(_DWORD *)(a4 + 32) = sub_18BBD0828("");
    *(_QWORD *)(a4 + 36) = 7;
  }
  else
  {
    sub_18BBCE8C0((char *)(*(_QWORD *)(a2 + 208) + *(int *)(a2 + 32)), a1, a2 + 8, (const char *)(a2 + 20), (char *)(a2 + 26), a3, a4);
  }
}

void sub_18BBCE8C0(char *__s1@<X4>, uint64_t a2@<X0>, uint64_t a3@<X1>, const char *a4@<X2>, char *a5@<X3>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;

  v14 = *a5;
  if (v14 == 88)
  {
    v15 = a5[1];
    if (a5[1])
    {
      if (!a5[2])
      {
        switch(v15)
        {
          case 'C':
            v21 = a7;
            v22 = 44;
            break;
          case 'B':
            v21 = a7;
            v22 = 43;
            break;
          case 'A':
            v21 = a7;
            v22 = 39;
            break;
          default:
            goto LABEL_4;
        }
        v24 = a3;
        v25 = a4;
        v23 = a5;
        v26 = 7;
        goto LABEL_39;
      }
    }
  }
LABEL_4:
  if (*__s1 == 80 && __s1[1] == 83)
  {
    if (*a5)
      v16 = 7;
    else
      v16 = 6;
    if (!strcmp(__s1, "PSACCENT"))
    {
      if (v14)
        v23 = a5;
      else
        v23 = "XA";
      v21 = a7;
      v22 = 39;
    }
    else if (!strcmp(__s1, "PSBIDI"))
    {
      if (v14)
        v23 = a5;
      else
        v23 = "XB";
      v21 = a7;
      v22 = 43;
    }
    else
    {
      if (strcmp(__s1, "PSCRACK"))
        goto LABEL_12;
      if (v14)
        v23 = a5;
      else
        v23 = "XC";
      v21 = a7;
      v22 = 44;
    }
    v24 = a3;
    v25 = a4;
    v26 = v16;
LABEL_39:
    sub_18BBD08BC(v21, v22, v24, v25, v23, v26, a6);
    return;
  }
LABEL_12:
  v17 = uhash_get(*(_QWORD *)(a2 + 16), a3);
  if (v17)
    v18 = (char *)v17;
  else
    v18 = (char *)a3;
  v19 = uhash_get(*(_QWORD *)(a2 + 24), (uint64_t)a5);
  if (v19)
    v20 = (char *)v19;
  else
    v20 = a5;
  sub_18BBCEA90(v18, a2, a4, v20, a7);
}

double sub_18BBCEA90@<D0>(char *__s1@<X1>, uint64_t a2@<X0>, const char *a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  const char *v7;
  int v10;
  BOOL v11;
  char *v12;
  __int128 v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char **v24;
  const char *v25;
  int v26;
  int v27;
  uint64_t v28;
  double result;
  unint64_t v30;
  const char *v31;
  _OWORD v32[2];

  v7 = __s1;
  if (!strcmp(__s1, "und") || !strcmp(v7, "root"))
    v7 = "";
  if (!strcmp(a3, "Zzzz"))
    a3 = "";
  if (!strcmp(a4, "ZZ"))
    a4 = "";
  v10 = *(unsigned __int8 *)v7;
  if (*a3)
  {
    if (*a4)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      *(_QWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = a3;
LABEL_24:
      *(_QWORD *)(a5 + 16) = a4;
      *(_QWORD *)(a5 + 24) = 0;
      v12 = a4;
      goto LABEL_87;
    }
    if (strcmp(a3, "Aran"))
      goto LABEL_27;
    goto LABEL_25;
  }
  if (!strcmp(a3, "Aran"))
  {
LABEL_25:
    if (!v10)
    {
      if (*a4)
      {
        v21 = "IN";
        if (!strcmp(a4, "IN"))
        {
          v31 = "ks";
        }
        else
        {
          v21 = "PK";
          if (strcmp(a4, "PK"))
          {
            LOBYTE(v10) = 0;
            goto LABEL_27;
          }
          v31 = "ur";
        }
        *(_QWORD *)a5 = v31;
        *(_QWORD *)(a5 + 8) = "Aran";
        *(_QWORD *)(a5 + 16) = v21;
        *(_QWORD *)(a5 + 24) = 0;
        v12 = (char *)v21;
        goto LABEL_87;
      }
      *(_QWORD *)a5 = "ur";
      *(_QWORD *)(a5 + 8) = "Aran";
      goto LABEL_77;
    }
    if (*a4)
      goto LABEL_27;
    if (strcmp(v7, "ks"))
    {
      if (!strcmp(v7, "ur") || !strcmp(v7, "pa"))
      {
        *(_QWORD *)a5 = v7;
        *(_QWORD *)(a5 + 8) = "Aran";
LABEL_77:
        v12 = "PK";
LABEL_84:
        *(_QWORD *)(a5 + 16) = v12;
        *(_QWORD *)(a5 + 24) = 0;
        goto LABEL_87;
      }
LABEL_27:
      memset(v32, 0, sizeof(v32));
      v13 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)((char *)v32 + 8) = v13;
      DWORD2(v32[1]) = *(_DWORD *)(a2 + 56);
      v14 = (char)v10 - 97;
      if (v14 <= 0x19 && v7[1] && (v15 = *(_QWORD *)(a2 + 8 * v14 + 88)) != 0)
      {
        DWORD2(v32[1]) = (v15 >> 59) - 2;
        *(_QWORD *)&v32[1] = v13 + (v15 & 0x7FFFFFFFFFFFFFFLL);
        v16 = 1;
      }
      else
      {
        v16 = 0;
      }
      v17 = sub_18BBCF014((icu::BytesTrie *)v32, (uint64_t)v7, v16);
      if (v17 < 0)
      {
        v19 = 0;
        v20 = *(_QWORD *)(a2 + 64);
        DWORD2(v32[1]) = (v20 >> 59) - 2;
        *(_QWORD *)&v32[1] = *((_QWORD *)&v32[0] + 1) + (v20 & 0x7FFFFFFFFFFFFFFLL);
        v18 = 4;
      }
      else
      {
        v18 = 4 * (*v7 != 0);
        v19 = (*(_QWORD *)&v32[1] - *((_QWORD *)&v32[0] + 1)) | ((unint64_t)(DWORD2(v32[1]) + 2) << 59);
        if (v17)
        {
          if (*a3)
            v18 |= 2u;
          if (v17 != 1)
          {
LABEL_51:
            if (!*a4)
            {
              v22 = *(_QWORD *)(a2 + 296);
              v23 = v17;
              v24 = (const char **)(v22 + 48 * v17);
              if (!v18)
              {
                v25 = *v24;
                v28 = v22 + 48 * v17;
                a3 = *(const char **)(v28 + 8);
                a4 = *(char **)(v28 + 16);
                v18 = *(_DWORD *)(v28 + 36);
                goto LABEL_75;
              }
LABEL_54:
              if (*v7)
                v25 = v7;
              else
                v25 = "und";
              if ((v18 & 4) != 0)
              {
                if ((v18 & 2) != 0)
                  goto LABEL_59;
              }
              else
              {
                v25 = *v24;
                if ((v18 & 2) != 0)
                {
LABEL_59:
                  if ((v18 & 1) != 0)
                    goto LABEL_75;
                  goto LABEL_63;
                }
              }
              a3 = *(const char **)(v22 + 48 * v23 + 8);
              if ((v18 & 1) != 0)
              {
LABEL_75:
                *(_QWORD *)a5 = v25;
                *(_QWORD *)(a5 + 8) = a3;
                *(_QWORD *)(a5 + 16) = a4;
                *(_QWORD *)(a5 + 24) = 0;
                *(_DWORD *)(a5 + 32) = sub_18BBD0828(a4);
                *(_DWORD *)(a5 + 36) = v18;
                *(_DWORD *)(a5 + 40) = 0;
                icu::BytesTrie::~BytesTrie((void **)v32);
                return result;
              }
LABEL_63:
              a4 = *(char **)(v22 + 48 * v23 + 16);
              goto LABEL_75;
            }
LABEL_52:
            v18 |= 1u;
            v22 = *(_QWORD *)(a2 + 296);
            v23 = v17;
            v24 = (const char **)(v22 + 48 * v17);
            goto LABEL_54;
          }
          goto LABEL_50;
        }
      }
      v17 = sub_18BBCF014((icu::BytesTrie *)v32, (uint64_t)a3, 0);
      if (v17 < 0)
      {
        v18 |= 2u;
        if (!v19)
        {
          v30 = *(_QWORD *)(a2 + 72);
          DWORD2(v32[1]) = (v30 >> 59) - 2;
          *(_QWORD *)&v32[1] = *((_QWORD *)&v32[0] + 1) + (v30 & 0x7FFFFFFFFFFFFFFLL);
          v17 = sub_18BBCF014((icu::BytesTrie *)v32, (uint64_t)a4, 0);
          if ((v17 & 0x80000000) == 0)
            goto LABEL_51;
LABEL_79:
          v17 = *(_DWORD *)(a2 + 80);
          goto LABEL_52;
        }
        DWORD2(v32[1]) = (v19 >> 59) - 2;
        *(_QWORD *)&v32[1] = *((_QWORD *)&v32[0] + 1) + (v19 & 0x7FFFFFFFFFFFFFFLL);
        v17 = sub_18BBCF014((icu::BytesTrie *)v32, (uint64_t)"", 0);
      }
      else if (*a3)
      {
        v18 |= 2u;
      }
      if (v17 >= 1)
        goto LABEL_51;
      v19 = (*(_QWORD *)&v32[1] - *((_QWORD *)&v32[0] + 1)) | ((unint64_t)(DWORD2(v32[1]) + 2) << 59);
LABEL_50:
      v17 = sub_18BBCF014((icu::BytesTrie *)v32, (uint64_t)a4, 0);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_51;
      if (v19)
      {
        DWORD2(v32[1]) = (v19 >> 59) - 2;
        *(_QWORD *)&v32[1] = *((_QWORD *)&v32[0] + 1) + (v19 & 0x7FFFFFFFFFFFFFFLL);
        v17 = sub_18BBCF014((icu::BytesTrie *)v32, (uint64_t)"", 0);
        goto LABEL_52;
      }
      goto LABEL_79;
    }
    *(_QWORD *)a5 = "ks";
    *(_QWORD *)(a5 + 8) = "Aran";
LABEL_83:
    v12 = "IN";
    goto LABEL_84;
  }
  if (!v10 && !strcmp(a4, "PK"))
  {
    *(_QWORD *)a5 = "ur";
    *(_QWORD *)(a5 + 8) = "Aran";
    *(_QWORD *)(a5 + 16) = "PK";
    *(_QWORD *)(a5 + 24) = 0;
    v12 = "PK";
    goto LABEL_87;
  }
  if (!strcmp(v7, "ur"))
  {
    v26 = *a4;
    *(_QWORD *)a5 = "ur";
    *(_QWORD *)(a5 + 8) = "Aran";
    if (v26)
      goto LABEL_24;
    goto LABEL_77;
  }
  if (!strcmp(v7, "ks"))
  {
    v27 = *a4;
    *(_QWORD *)a5 = "ks";
    *(_QWORD *)(a5 + 8) = "Aran";
    if (v27)
      goto LABEL_24;
    goto LABEL_83;
  }
  if (strcmp(v7, "pa") || strcmp(a4, "PK"))
    goto LABEL_27;
  *(_QWORD *)a5 = "pa";
  *(_QWORD *)(a5 + 8) = "Aran";
  *(_QWORD *)(a5 + 16) = "PK";
  *(_QWORD *)(a5 + 24) = 0;
  v12 = "PK";
LABEL_87:
  *(_DWORD *)(a5 + 32) = sub_18BBD0828(v12);
  *(_QWORD *)&result = 7;
  *(_QWORD *)(a5 + 36) = 7;
  return result;
}

uint64_t sub_18BBCF014(icu::BytesTrie *this, uint64_t a2, int a3)
{
  int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  char v9;
  int v11;
  int v12;

  v5 = *(unsigned __int8 *)(a2 + a3);
  if (v5)
  {
    v6 = (unsigned __int8 *)(a3 + a2 + 1);
    while (1)
    {
      v8 = *v6++;
      v7 = v8;
      if (!v8)
        break;
      v9 = icu::BytesTrie::next(this, v5);
      v5 = v7;
      if ((v9 & 1) == 0)
        return 0xFFFFFFFFLL;
    }
    v11 = v5 | 0x80;
  }
  else
  {
    v11 = 42;
  }
  v12 = icu::BytesTrie::next(this, v11);
  switch(v12)
  {
    case 3:
      return 1;
    case 2:
      return icu::BytesTrie::readValue((icu::BytesTrie *)(*((_QWORD *)this + 2) + 1), (const unsigned __int8 *)(**((unsigned __int8 **)this + 2) >> 1));
    case 1:
      return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18BBCF0C4(uint64_t a1, uint64_t a2, const char **a3, unsigned int a4)
{
  char *v8;
  const char *v10;
  int v11;
  int v12;
  int v13;
  const char *v14;

  v8 = *(char **)a2;
  if (strcmp(*(const char **)a2, *a3))
    return 4294967292;
  v10 = *(const char **)(a2 + 8);
  if (!strcmp(v10, a3[1]))
  {
    v10 = *(const char **)(a2 + 16);
    if (!strcmp(v10, a3[2]))
      return a4 & 0xFFFFFFFE;
    if ((a4 & 0x80000002) == 2)
    {
      v13 = a4 >> 2;
      v12 = a4 & 0xFFFFFFFE;
    }
    else
    {
      v13 = sub_18BBCF1F0(a1, v8, v10);
      v12 = (4 * v13) | 2;
      v10 = *(const char **)(a2 + 16);
    }
    v14 = *(const char **)(*(_QWORD *)(a1 + 296) + 48 * v13 + 16);
  }
  else
  {
    if ((a4 & 0x80000002) != 0)
    {
      v11 = sub_18BBCF1F0(a1, v8, "");
      v12 = 4 * v11;
      v10 = *(const char **)(a2 + 8);
    }
    else
    {
      v11 = a4 >> 2;
      v12 = a4 & 0xFFFFFFFE;
    }
    v14 = *(const char **)(*(_QWORD *)(a1 + 296) + 48 * v11 + 8);
  }
  return v12 | (strcmp(v10, v14) == 0);
}

uint64_t sub_18BBCF1F0(uint64_t a1, char *__s1, const char *a3)
{
  const char *v4;
  __int128 v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD v19[2];

  v4 = __s1;
  if (!strcmp(__s1, "und"))
    v4 = "";
  if (!strcmp(a3, "Zzzz"))
    a3 = "";
  memset(v19, 0, sizeof(v19));
  v6 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)((char *)v19 + 8) = v6;
  DWORD2(v19[1]) = *(_DWORD *)(a1 + 56);
  v7 = *v4 - 97;
  if (v7 <= 0x19 && v4[1] && (v8 = *(_QWORD *)(a1 + 8 * v7 + 88)) != 0)
  {
    DWORD2(v19[1]) = (v8 >> 59) - 2;
    *(_QWORD *)&v19[1] = v6 + (v8 & 0x7FFFFFFFFFFFFFFLL);
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  v10 = sub_18BBCF014((icu::BytesTrie *)v19, (uint64_t)v4, v9);
  if ((v10 & 0x80000000) != 0)
  {
    v16 = *(_QWORD *)(a1 + 64);
    DWORD2(v19[1]) = (v16 >> 59) - 2;
    *(_QWORD *)&v19[1] = *((_QWORD *)&v19[0] + 1) + (v16 & 0x7FFFFFFFFFFFFFFLL);
    v11 = sub_18BBCF014((icu::BytesTrie *)v19, (uint64_t)a3, 0);
    if ((v11 & 0x80000000) != 0)
    {
LABEL_19:
      v17 = *(_QWORD *)(a1 + 72);
      DWORD2(v19[1]) = (v17 >> 59) - 2;
      *(_QWORD *)&v19[1] = *((_QWORD *)&v19[0] + 1) + (v17 & 0x7FFFFFFFFFFFFFFLL);
      goto LABEL_20;
    }
  }
  else
  {
    v11 = v10;
    if ((_DWORD)v10 == 1)
    {
LABEL_20:
      v11 = sub_18BBCF014((icu::BytesTrie *)v19, (uint64_t)"", 0);
      goto LABEL_21;
    }
    if ((_DWORD)v10)
      goto LABEL_21;
    v12 = DWORD2(v19[1]);
    v14 = *((_QWORD *)&v19[0] + 1);
    v13 = *(_QWORD *)&v19[1];
    v11 = sub_18BBCF014((icu::BytesTrie *)v19, (uint64_t)a3, 0);
    if ((v11 & 0x80000000) != 0)
    {
      v15 = (v13 - v14) | ((unint64_t)(v12 + 2) << 59);
      if (v15)
      {
        DWORD2(v19[1]) = (v15 >> 59) - 2;
        *(_QWORD *)&v19[1] = *((_QWORD *)&v19[0] + 1) + ((v13 - v14) & 0x7FFFFFFFFFFFFFFLL);
        v11 = sub_18BBCF014((icu::BytesTrie *)v19, (uint64_t)"", 0);
        goto LABEL_17;
      }
      goto LABEL_19;
    }
  }
LABEL_17:
  if ((int)v11 <= 0)
    goto LABEL_20;
LABEL_21:
  icu::BytesTrie::~BytesTrie((void **)v19);
  return v11;
}

uint64_t sub_18BBCF3D8(uint64_t a1, icu::ResourceTable *this, char *__s1, icu::ResourceValue *a4, void **a5, int *a6, UErrorCode *a7)
{
  uint64_t result;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  UChar *v18;
  int v19;
  _QWORD v20[2];
  uint64_t v21;

  if (icu::ResourceTable::findValue(this, __s1, a4))
  {
    v20[0] = 0;
    v20[1] = 0;
    v21 = 0;
    (*(void (**)(_QWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(_QWORD *)a4 + 80))(v20, a4, a7);
    if (*(int *)a7 > 0)
      return 0;
    v13 = v21;
    *a6 = v21;
    if ((_DWORD)v13)
    {
      if ((int)v13 < 1 || (v14 = uprv_malloc(4 * v13)) == 0)
      {
        result = 0;
        *a7 = U_MEMORY_ALLOCATION_ERROR;
        return result;
      }
      v15 = v14;
      uprv_free(*a5);
      *a5 = v15;
      if (*a6 >= 1)
      {
        v16 = 0;
        v17 = a1 + 8;
        while (1)
        {
          if (icu::ResourceArray::getValue((icu::ResourceArray *)v20, v16, a4))
          {
            v19 = 0;
            v18 = (UChar *)(*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(_QWORD *)a4 + 32))(a4, &v19, a7);
            *((_DWORD *)v15 + v16) = sub_18BBCB988(v17, v18, a7);
            if (*(int *)a7 > 0)
              break;
          }
          if (++v16 >= *a6)
            return 1;
        }
        return 0;
      }
    }
  }
  return 1;
}

uint64_t sub_18BBCF51C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  ures_close(*(_QWORD **)a1);
  v2 = *(_QWORD *)(a1 + 216);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 - 8);
    if (v3)
    {
      v4 = 48 * v3;
      do
      {
        if (*(_QWORD *)(v2 + v4 - 24))
          sub_18BBD08C0(v2 + v4 - 48);
        v4 -= 48;
      }
      while (v4);
    }
    icu::UMemory::operator delete[]((void *)(v2 - 16));
  }
  sub_18BBCDB40(a1 + 232);
  uhash_close(*(void ***)(a1 + 200));
  uhash_close(*(void ***)(a1 + 192));
  sub_18BBCBA64(a1 + 8);
  return a1;
}

uint64_t uprv_convertToPosix(int a1, void *a2, int a3, int *a4)
{
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  int *v13;
  const void *v14;
  size_t v15;
  uint64_t v16;
  int v17;
  int v18;

  v7 = 0;
  while (1)
  {
    v8 = *(int **)&dword_1E2247A60[v7 + 2];
    if ((a1 & 0x3FF) == *v8)
      break;
    v7 += 4;
    if (v7 == 564)
      goto LABEL_17;
  }
  v9 = dword_1E2247A60[v7];
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = v8;
    while (1)
    {
      v12 = *v11;
      v11 += 4;
      if (v12 == a1)
        break;
      if (v9 == ++v10)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v10 = 0;
  }
  v13 = &v8[4 * v10];
  v14 = (const void *)*((_QWORD *)v13 + 1);
  if (!v14)
  {
LABEL_17:
    v16 = 0xFFFFFFFFLL;
    v18 = 1;
    goto LABEL_21;
  }
  v15 = strlen(*((const char **)v13 + 1));
  v16 = v15;
  if ((int)v15 >= a3)
    v17 = a3;
  else
    v17 = v15;
  memcpy(a2, v14, v17);
  if ((int)v16 >= a3)
  {
    if ((_DWORD)v16 == a3)
      v18 = -124;
    else
      v18 = 15;
  }
  else
  {
    v18 = 0;
    *((_BYTE *)a2 + (int)v16) = 0;
    if (*a4 != -124)
      return v16;
  }
LABEL_21:
  *a4 = v18;
  return v16;
}

uint64_t uprv_convertToLCIDPlatform()
{
  return 0;
}

uint64_t uprv_convertToLCID(const char *a1, char *a2, int *a3)
{
  uint64_t v3;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  v3 = 0;
  if (a1 && a2)
  {
    if (strlen(a1) >= 2 && strlen(a2) >= 2)
    {
      LODWORD(v8) = 0;
      v9 = 0;
      v10 = 141;
      do
      {
        v11 = v8;
        v8 = (v10 + v9) >> 1;
        if ((_DWORD)v8 == v11)
          break;
        v12 = strcmp(a1, *(const char **)(*(_QWORD *)&dword_1E2247A60[4 * v8 + 2] + 8));
        v13 = (v10 + v9) >> 1;
        if ((v12 & 0x80000000) == 0)
        {
          v9 = (v10 + v9) >> 1;
          v13 = v10;
          if (!v12)
            return sub_18BBCF818((unsigned int *)&dword_1E2247A60[4 * v8], a2, a3);
        }
        v10 = v13;
      }
      while (v13 > v9);
      v14 = 0;
      v3 = 0xFFFFFFFFLL;
      do
      {
        v17 = 0;
        v15 = sub_18BBCF818((unsigned int *)&dword_1E2247A60[v14], a2, &v17);
        if (v17 == -128)
        {
          v3 = v15;
        }
        else if (!v17)
        {
          return v15;
        }
        v14 += 4;
      }
      while (v14 != 564);
      if ((_DWORD)v3 == -1)
      {
        v3 = 0;
        v16 = 1;
      }
      else
      {
        v16 = -128;
      }
      *a3 = v16;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t sub_18BBCF818(unsigned int *a1, char *__s, _DWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unsigned int *v18;

  v6 = strlen(__s);
  v7 = *a1;
  if (!(_DWORD)v7)
  {
    v10 = 0;
    v9 = 0;
LABEL_17:
    v17 = __s[v9];
    if (v17 == 64 || v17 == 95)
    {
      v18 = (unsigned int *)*((_QWORD *)a1 + 1);
      if (!*(_BYTE *)(*(_QWORD *)&v18[4 * v10 + 2] + v9))
      {
        *a3 = -128;
        v18 += 4 * v10;
        return *v18;
      }
    }
    else
    {
      v18 = (unsigned int *)*((_QWORD *)a1 + 1);
    }
    *a3 = 1;
    return *v18;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = *((_QWORD *)a1 + 1);
  while (1)
  {
    v12 = 0;
    v13 = *(_BYTE **)(v11 + 16 * v8 + 8);
    if (*__s && *__s == *v13)
    {
      v12 = 0;
      do
      {
        v14 = __s[v12 + 1];
        v15 = v13[++v12];
        if (v14)
          v16 = v14 == v15;
        else
          v16 = 0;
      }
      while (v16);
      v12 = v12;
    }
    if ((int)v12 > (int)v9 && !v13[v12])
    {
      v10 = v8;
      v9 = v12;
      if (v12 == v6)
        break;
    }
    if (++v8 == v7)
      goto LABEL_17;
  }
  v18 = (unsigned int *)(v11 + 16 * v8);
  return *v18;
}

const UChar *uloc_getTableStringWithFallback(const char *a1, char *a2, char *a3, char *a4, char *a5, int *a6, int32_t *a7)
{
  const char *v12;
  _QWORD *v14;
  const UChar *StringByKeyWithFallback;
  int32_t v17;
  const UChar *v18;
  int v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  const UChar *v24;
  int *v25;
  const char *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  int32_t length[2];
  _OWORD v31[8];
  uint64_t v32;
  _BYTE v33[128];
  uint64_t v34;
  _OWORD __s1[10];
  uint64_t v36;

  v12 = a2;
  v36 = *MEMORY[0x1E0C80C00];
  memset(__s1, 0, 157);
  length[1] = 0;
  v14 = ures_open(a1, a2, &length[1]);
  if (length[1] < 1)
  {
    if (length[1] == -127 || length[1] == -128 && *a7 != -127)
      *a7 = length[1];
    StringByKeyWithFallback = 0;
    while (1)
    {
      v34 = 0;
      memset(v33, 0, sizeof(v33));
      icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v33);
      v32 = 0;
      memset(v31, 0, sizeof(v31));
      icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v31);
      ures_getByKeyWithFallback((uint64_t)v14, a3, (uint64_t)v33, (UErrorCode *)&length[1]);
      if (a4)
        ures_getByKeyWithFallback((uint64_t)v33, a4, (uint64_t)v33, (UErrorCode *)&length[1]);
      v17 = length[1];
      if (length[1] > 0)
        goto LABEL_14;
      StringByKeyWithFallback = ures_getStringByKeyWithFallback((uint64_t)v33, a5, a6, (UErrorCode *)&length[1]);
      if (length[1] < 1)
        goto LABEL_16;
      *a7 = length[1];
      length[1] = 0;
      if (!strcmp(a3, "Countries"))
      {
        v20 = sub_18BC3B934(a5);
      }
      else
      {
        if (strcmp(a3, "Languages"))
          goto LABEL_16;
        v20 = sub_18BC3B9F4(a5);
      }
      if (!v20 || v20 == a5)
        break;
      StringByKeyWithFallback = ures_getStringByKeyWithFallback((uint64_t)v33, v20, a6, (UErrorCode *)&length[1]);
      v17 = length[1];
      if (length[1] > 0)
        goto LABEL_14;
LABEL_15:
      *a7 = v17;
LABEL_16:
      v19 = 2;
LABEL_17:
      icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v31);
      icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v33);
      if (v19)
        goto LABEL_3;
    }
    v17 = length[1];
    if (length[1] < 1)
      goto LABEL_16;
LABEL_14:
    *(_QWORD *)length = 0;
    *a7 = v17;
    v18 = ures_getStringByKeyWithFallback((uint64_t)v33, "Fallback", length, (UErrorCode *)&length[1]);
    v17 = length[1];
    if (length[1] <= 0)
    {
      u_UCharsToChars(v18, (char *)__s1, length[0]);
      if (!strcmp((const char *)__s1, v12))
      {
        v17 = 5;
      }
      else
      {
        v21 = v14;
        v22 = a4;
        v23 = a5;
        v24 = StringByKeyWithFallback;
        v25 = a6;
        v26 = v12;
        v27 = ures_open(a1, (char *)__s1, &length[1]);
        if (v21)
          ures_close(v21);
        v17 = length[1];
        if (length[1] < 1)
        {
          v19 = 0;
          v29 = v27;
          v12 = v26;
          a6 = v25;
          StringByKeyWithFallback = v24;
          a5 = v23;
          a4 = v22;
          v14 = v29;
          goto LABEL_17;
        }
        v28 = v27;
        v12 = v26;
        a6 = v25;
        StringByKeyWithFallback = v24;
        a5 = v23;
        a4 = v22;
        v14 = v28;
      }
    }
    goto LABEL_15;
  }
  StringByKeyWithFallback = 0;
  *a7 = length[1];
LABEL_3:
  if (v14)
    ures_close(v14);
  return StringByKeyWithFallback;
}

uint64_t uloc_getCharacterOrientation(char *a1, int32_t *a2)
{
  return sub_18BBCFC70(a1, "characters", a2);
}

uint64_t sub_18BBCFC70(char *a1, char *a2, int32_t *a3)
{
  uint64_t v3;
  const UChar *TableStringWithFallback;
  unsigned int v9;
  unint64_t v10;
  _QWORD v11[2];
  void *v12[9];

  v12[8] = *(void **)MEMORY[0x1E0C80C00];
  if (*a3 > 0)
    return 4;
  memset(&v12[1], 0, 56);
  v11[1] = 0;
  v12[0] = (char *)&v12[1] + 5;
  LODWORD(v12[1]) = 40;
  v11[0] = 0;
  icu::CharStringByteSink::CharStringByteSink(v11, (uint64_t)v12);
  ulocimp_canonicalize(a1);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v11);
  if (*a3 <= 0)
  {
    LODWORD(v11[0]) = 0;
    TableStringWithFallback = uloc_getTableStringWithFallback(0, (char *)v12[0], "layout", 0, a2, (int *)v11, a3);
    v3 = 4;
    if (*a3 <= 0 && LODWORD(v11[0]))
    {
      HIDWORD(v10) = *TableStringWithFallback;
      LODWORD(v10) = HIDWORD(v10) - 98;
      v9 = v10 >> 1;
      if (v9 < 0xA && ((0x321u >> v9) & 1) != 0)
        v3 = dword_18BDCC518[v9];
      else
        *a3 = 5;
    }
  }
  else
  {
    v3 = 4;
  }
  if (BYTE4(v12[1]))
    uprv_free(v12[0]);
  return v3;
}

uint64_t uloc_getLineOrientation(char *a1, int32_t *a2)
{
  return sub_18BBCFC70(a1, "lines", a2);
}

UChar **icu::LocaleUtility::canonicalLocaleString(UChar **this, UChar **a2, icu::UnicodeString *a3)
{
  unsigned int v4;
  int v5;
  int32_t v6;
  int32_t v7;
  int v8;
  unsigned int v9;
  int v10;
  int32_t v11;
  int32_t v12;
  int v13;
  int v15;
  unsigned int v16;
  int32_t v17;
  int v18;
  uint64_t v19;
  unint64_t i;
  unsigned int v21;
  unint64_t v22;
  const icu::UnicodeString *v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  UChar *v28;
  int v29;

  if (this)
  {
    icu::UnicodeString::operator=(a2, this);
    v4 = *((unsigned __int16 *)a2 + 4);
    v5 = (__int16)v4;
    v6 = v4 >> 5;
    if (v5 >= 0)
      v7 = v6;
    else
      v7 = *((_DWORD *)a2 + 3);
    v8 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x40u, 0, v7);
    v9 = *((unsigned __int16 *)a2 + 4);
    v10 = (__int16)v9;
    v11 = v9 >> 5;
    if (v10 >= 0)
      v12 = v11;
    else
      v12 = *((_DWORD *)a2 + 3);
    v13 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x2Eu, 0, v12);
    if (v13 >= v8 || v13 <= -1)
      v15 = v8;
    else
      v15 = v13;
    v16 = *((unsigned __int16 *)a2 + 4);
    if (v15 < 0)
    {
      if ((v16 & 0x8000) != 0)
        v15 = *((_DWORD *)a2 + 3);
      else
        v15 = v16 >> 5;
      v17 = v15;
    }
    else if ((v16 & 0x8000) != 0)
    {
      v17 = *((_DWORD *)a2 + 3);
    }
    else
    {
      v17 = v16 >> 5;
    }
    v18 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x5Fu, 0, v17);
    if (v18 >= 0)
      v19 = v18;
    else
      v19 = v15;
    if ((int)v19 < 1)
    {
      LODWORD(v19) = 0;
    }
    else
    {
      for (i = 0; i != v19; ++i)
      {
        v21 = *((unsigned __int16 *)a2 + 4);
        if ((v21 & 0x8000u) == 0)
          v22 = v21 >> 5;
        else
          v22 = *((unsigned int *)a2 + 3);
        if (i < v22)
        {
          v23 = (v21 & 2) != 0 ? (const icu::UnicodeString *)((char *)a2 + 10) : (const icu::UnicodeString *)a2[3];
          v24 = *((unsigned __int16 *)v23 + i);
          if ((v24 - 65) <= 0x19)
            icu::UnicodeString::setCharAt((icu::UnicodeString *)a2, i, v24 + 32);
        }
      }
    }
    if ((int)v19 < v15)
    {
      v25 = v19;
      do
      {
        v26 = *((unsigned __int16 *)a2 + 4);
        if ((v26 & 0x8000u) == 0)
          v27 = v26 >> 5;
        else
          v27 = *((unsigned int *)a2 + 3);
        if (v25 < v27)
        {
          if ((v26 & 2) != 0)
            v28 = (UChar *)a2 + 5;
          else
            v28 = a2[3];
          v29 = v28[v25];
          if ((v29 - 97) <= 0x19)
            icu::UnicodeString::setCharAt((icu::UnicodeString *)a2, v25, v29 - 32);
        }
        ++v25;
      }
      while (v15 != v25);
    }
  }
  else
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a2);
  }
  return a2;
}

const icu::UnicodeString *icu::LocaleUtility::initLocaleFromName(icu::LocaleUtility *this, const icu::UnicodeString *a2, icu::Locale *a3)
{
  unsigned int v4;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  _BYTE v13[224];
  _OWORD v14[8];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned __int16 *)this + 4);
  if ((v4 & 1) != 0 || ((v4 & 0x8000u) == 0 ? (v6 = v4 >> 5) : (v6 = *((_DWORD *)this + 3)), v6 >= 128))
  {
    icu::Locale::setToBogus(a2);
  }
  else
  {
    v7 = 0;
    memset(v14, 0, sizeof(v14));
    if ((v4 & 0x8000) != 0)
      goto LABEL_11;
LABEL_8:
    v8 = v4 >> 5;
    if (v8 >= v7)
      v9 = v7;
    else
      v9 = v8;
    while (1)
    {
      v10 = icu::UnicodeString::doIndexOf((uint64_t)this, 0x40u, v9, v8 - v9);
      if ((v10 & 0x80000000) != 0)
        break;
      v11 = v10;
      icu::UnicodeString::extract((uint64_t)this, v7, v10 - v7, (char *)v14 + v7, 128 - v7);
      *((_BYTE *)v14 + v11) = 64;
      v7 = v11 + 1;
      v4 = *((unsigned __int16 *)this + 4);
      if ((v4 & 0x8000) == 0)
        goto LABEL_8;
LABEL_11:
      v8 = *((_DWORD *)this + 3);
      if ((int)v8 >= (int)v7)
        v9 = v7;
      else
        v9 = *((_DWORD *)this + 3);
    }
    icu::UnicodeString::extract((uint64_t)this, v7, 0x7FFFFFFFLL, (char *)v14 + v7, 128 - v7);
    icu::Locale::createFromName((icu::Locale *)v14, (uint64_t)v13);
    icu::Locale::operator=((uint64_t)a2, (uint64_t)v13);
    icu::Locale::~Locale((icu::Locale *)v13);
  }
  return a2;
}

const icu::Locale *icu::LocaleUtility::initNameFromLocale(icu::LocaleUtility *this, const icu::Locale *a2, icu::UnicodeString *a3)
{
  uint64_t v4;
  void *v5;
  _BYTE v7[8];
  unsigned __int16 v8;
  unsigned int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 216))
  {
    icu::UnicodeString::setToBogus(a2);
  }
  else
  {
    icu::UnicodeString::UnicodeString(v7, *((_QWORD *)this + 5), 0xFFFFFFFFLL, 0);
    if ((v8 & 0x8000u) == 0)
      v4 = v8 >> 5;
    else
      v4 = v9;
    icu::UnicodeString::doAppend((uint64_t)a2, (const icu::UnicodeString *)v7, 0, v4);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v7);
  }
  return a2;
}

void ***icu::LocaleUtility::getAvailableLocaleNames(icu::LocaleUtility *this, const icu::UnicodeString *a2)
{
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  int32x2_t *v6;
  void **v7;
  uint64_t *v8;
  void ***v9;
  unint64_t v10;
  int32x2_t *v11;
  int32x2_t *v12;
  const char *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  icu::UnicodeString *v19;
  uint64_t v20;
  void *v21;
  UErrorCode v22;
  uint64_t v23;
  void ***v24;
  UErrorCode v26;
  UChar *v27[8];
  void *v28[7];
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v26 = U_ZERO_ERROR;
  v3 = atomic_load(&dword_1EE009328);
  if (v3 != 2 && icu::umtx_initImplPreInit(&dword_1EE009328))
  {
    sub_18BC0ECC4(5u, (uint64_t)sub_18BBD0678);
    v5 = icu::UMemory::operator new((icu::UMemory *)0x58, v4);
    if (v5)
    {
      v6 = (int32x2_t *)v5;
      v7 = 0;
      *v6 = 0;
      if (v26 > U_ZERO_ERROR)
      {
LABEL_7:
        qword_1EE009320 = (uint64_t)v6;
LABEL_8:
        if (v7)
          uhash_close(v7);
        icu::UMemory::operator delete(v6);
        qword_1EE009320 = 0;
        goto LABEL_15;
      }
      uhash_init(v6 + 1, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)&v26);
      if (v26 >= U_ILLEGAL_ARGUMENT_ERROR)
      {
        v7 = (void **)*v6;
        goto LABEL_7;
      }
      *v6 = (int32x2_t)&v6[1];
      uhash_setKeyDeleter((uint64_t)&v6[1], (uint64_t)uprv_deleteUObject);
      qword_1EE009320 = (uint64_t)v6;
      v7 = (void **)*v6;
      if (v26 >= U_ILLEGAL_ARGUMENT_ERROR)
        goto LABEL_8;
      uhash_setValueDeleter((uint64_t)v7, (uint64_t)uhash_deleteHashtable);
    }
    else
    {
      qword_1EE009320 = 0;
      v26 = U_MEMORY_ALLOCATION_ERROR;
    }
LABEL_15:
    dword_1EE00932C = v26;
    icu::umtx_initImplPostInit(&dword_1EE009328);
    goto LABEL_16;
  }
  if (dword_1EE00932C >= 1)
    v26 = dword_1EE00932C;
LABEL_16:
  v8 = (uint64_t *)qword_1EE009320;
  if (!qword_1EE009320)
    return 0;
  umtx_lock(0);
  v9 = (void ***)uhash_get(*v8, (uint64_t)this);
  umtx_unlock(0);
  if (!v9)
  {
    v11 = (int32x2_t *)icu::UMemory::operator new((icu::UMemory *)0x58, v10);
    v9 = (void ***)v11;
    if (v11)
    {
      *v11 = 0;
      if (v26 <= U_ZERO_ERROR)
      {
        v12 = v11 + 1;
        uhash_init(v11 + 1, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)&v26);
        if (v26 <= U_ZERO_ERROR)
        {
          *v9 = (void **)v12;
          uhash_setKeyDeleter((uint64_t)(v9 + 1), (uint64_t)uprv_deleteUObject);
          if (v26 <= U_ZERO_ERROR)
          {
            memset(&v28[1], 0, 48);
            v29 = 0;
            v28[0] = (char *)&v28[1] + 5;
            LODWORD(v28[1]) = 40;
            icu::CharString::appendInvariantChars((icu::CharString *)v28, this, &v26);
            if ((_DWORD)v29)
              v13 = (const char *)v28[0];
            else
              v13 = 0;
            v14 = (void **)ures_openAvailableLocales(v13, (int *)&v26);
            v15 = uenum_unext((uint64_t)v14, 0, (int *)&v26);
            if (v15)
            {
              v16 = v15;
              do
              {
                icu::UnicodeString::UnicodeString((uint64_t)v27, v16);
                v17 = (uint64_t)*v9;
                v19 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v18);
                v20 = (uint64_t)v19;
                if (v19)
                  icu::UnicodeString::UnicodeString(v19, v27);
                uhash_put(v17, v20, (uint64_t)v9, (int *)&v26);
                icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v27);
                v16 = uenum_unext((uint64_t)v14, 0, (int *)&v26);
              }
              while (v16);
            }
            v22 = v26;
            if (v26 < U_ILLEGAL_ARGUMENT_ERROR)
            {
              umtx_lock(0);
              v23 = uhash_get(*v8, (uint64_t)this);
              if (v23)
              {
                v24 = (void ***)v23;
                umtx_unlock(0);
                if (*v9)
                  uhash_close(*v9);
                icu::UMemory::operator delete(v9);
                v9 = v24;
              }
              else
              {
                sub_18BBB11FC(v8, (UChar **)this, (uint64_t)v9, (int *)&v26);
                umtx_unlock(0);
              }
            }
            else
            {
              if (*v9)
                uhash_close(*v9);
              icu::UMemory::operator delete(v9);
            }
            if (v14)
              uenum_close(v14);
            if (BYTE4(v28[1]))
              uprv_free(v28[0]);
            if (v22 > U_ZERO_ERROR)
              return 0;
          }
        }
      }
    }
  }
  return v9;
}

BOOL icu::LocaleUtility::isFallbackOf(icu::LocaleUtility *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  _BOOL8 result;
  unsigned int v5;
  int32_t v6;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int32_t v11;
  icu::LocaleUtility *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  char *v18;

  result = 0;
  v5 = *((unsigned __int16 *)this + 4);
  if ((v5 & 0x8000u) == 0)
    v6 = v5 >> 5;
  else
    v6 = *((_DWORD *)this + 3);
  if ((v5 & 1) == 0 && v6 >= 1)
  {
    v8 = *((unsigned __int16 *)a2 + 4);
    v9 = (__int16)v8;
    v10 = v8 >> 5;
    v11 = v9 >= 0 ? v10 : *((_DWORD *)a2 + 3);
    v12 = (v5 & 2) != 0 ? (icu::LocaleUtility *)((char *)this + 10) : (icu::LocaleUtility *)*((_QWORD *)this + 3);
    v13 = icu::UnicodeString::indexOf((uint64_t)a2, (uint64_t)v12, 0, v6, 0, v11);
    result = 0;
    if (!v13)
    {
      v14 = *((unsigned __int16 *)a2 + 4);
      if ((v14 & 0x8000u) == 0)
        v15 = v14 >> 5;
      else
        v15 = *((_DWORD *)a2 + 3);
      if (*((__int16 *)this + 4) < 0)
      {
        v17 = *((_DWORD *)this + 3);
        if (v15 != v17)
        {
LABEL_21:
          if (v15 <= v17)
            return 0;
          if ((v14 & 2) != 0)
            v18 = (char *)a2 + 10;
          else
            v18 = (char *)*((_QWORD *)a2 + 3);
          return *(unsigned __int16 *)&v18[2 * v17] == 95;
        }
      }
      else
      {
        v16 = *((unsigned __int16 *)this + 4);
        if (v15 != v16 >> 5)
        {
          v17 = v16 >> 5;
          goto LABEL_21;
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_18BBD0678()
{
  void *v0;

  v0 = (void *)qword_1EE009320;
  if (qword_1EE009320)
  {
    if (*(_QWORD *)qword_1EE009320)
      uhash_close(*(void ***)qword_1EE009320);
    icu::UMemory::operator delete(v0);
    qword_1EE009320 = 0;
  }
  return 1;
}

uint64_t sub_18BBD06B8(uint64_t a1, char a2, const char *a3, const char *a4, char *a5, int a6, UErrorCode *a7)
{
  icu::CharString *v13;
  icu::CharString *v14;
  uint64_t v15;
  icu::CharString *v16;
  char *v17;
  char *v19;
  int v20;
  char *v21;
  int v22;
  void *v23[7];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = sub_18BBD0828(a5);
  *(_DWORD *)(a1 + 36) = a6;
  *(_DWORD *)(a1 + 40) = 0;
  if (*(int *)a7 <= 0)
  {
    memset(&v23[1], 0, 48);
    v24 = 0;
    v23[0] = (char *)&v23[1] + 5;
    LODWORD(v23[1]) = 40;
    v13 = icu::CharString::append((icu::CharString *)v23, a2, a7);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v21, a3);
    v14 = icu::CharString::append(v13, v21, v22, a7);
    icu::CharString::append(v14, 0, a7);
    v15 = (int)v24;
    v16 = icu::CharString::append((icu::CharString *)v23, a2, a7);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v19, a4);
    icu::CharString::append(v16, v19, v20, a7);
    v17 = (char *)icu::CharString::cloneData((const void **)v23, a7);
    *(_QWORD *)(a1 + 24) = v17;
    if (*(int *)a7 <= 0)
    {
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = &v17[v15];
    }
    if (BYTE4(v23[1]))
      uprv_free(v23[0]);
  }
  return a1;
}

uint64_t sub_18BBD0828(char *a1)
{
  int v1;
  unsigned int v3;
  unsigned int v4;

  v1 = *a1;
  if ((v1 - 48) <= 9)
  {
    if ((a1[1] - 58) >= 0xF6u && (a1[2] - 58) >= 0xF6u && !a1[3])
      return (a1[2] + 10 * (a1[1] + 10 * v1) - 5327);
    return 0;
  }
  v3 = v1 - 65;
  if (v3 > 0x19)
    return 0;
  v4 = a1[1] - 65;
  if (v4 > 0x19 || a1[2])
    return 0;
  return v4 + 26 * v3 + 1001;
}

void sub_18BBD08C0(uint64_t a1)
{
  uprv_free(*(void **)(a1 + 24));
}

uint64_t sub_18BBD08C8(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)(a1 + 24);
  if (v4)
    uprv_free(v4);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  if (v5)
  {
    *(_QWORD *)a2 = "";
    *(_QWORD *)(a2 + 8) = "";
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 40) = 0;
  }
  return a1;
}

BOOL sub_18BBD0930(uint64_t a1, uint64_t a2)
{
  int v4;

  if (strcmp(*(const char **)a1, *(const char **)a2))
    return 0;
  if (strcmp(*(const char **)(a1 + 8), *(const char **)(a2 + 8)))
    return 0;
  v4 = *(_DWORD *)(a1 + 32);
  if (v4 != *(_DWORD *)(a2 + 32))
    return 0;
  if (v4 <= 0)
    return strcmp(*(const char **)(a1 + 16), *(const char **)(a2 + 16)) == 0;
  return 1;
}

BOOL sub_18BBD09AC(uint64_t a1, uint64_t a2)
{
  int v4;

  if (!strcmp(*(const char **)a1, *(const char **)a2)
    && !strcmp(*(const char **)(a1 + 8), *(const char **)(a2 + 8))
    && (v4 = *(_DWORD *)(a1 + 32), v4 == *(_DWORD *)(a2 + 32))
    && (v4 > 0 || !strcmp(*(const char **)(a1 + 16), *(const char **)(a2 + 16))))
  {
    return *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_18BBD0A2C(uint64_t a1)
{
  char *v2;
  int v3;
  int v4;

  if (!*(_DWORD *)(a1 + 40))
  {
    v2 = *(char **)a1;
    v3 = strlen(*(const char **)a1);
    LODWORD(v2) = ustr_hashCharsN((unsigned __int8 *)v2, v3);
    v4 = strlen(*(const char **)(a1 + 8));
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 36)
                         + 37
                         * (*(_DWORD *)(a1 + 32)
                          + 37 * (ustr_hashCharsN(*(unsigned __int8 **)(a1 + 8), v4) + 37 * (_DWORD)v2));
  }
  return a1;
}

void sub_18BBD0AAC()
{
  JUMPOUT(0x18D77FE8CLL);
}

void sub_18BBD0AC4()
{
  JUMPOUT(0x18D77FE8CLL);
}

uint64_t sub_18BBD0AD8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E224A1B0;
  uprv_free(*(void **)(a1 + 8));
  return a1;
}

void sub_18BBD0B0C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E224A1B0;
  uprv_free(*(void **)(a1 + 8));
  JUMPOUT(0x18D77FE8CLL);
}

uint64_t sub_18BBD0B50(uint64_t a1, uint64_t a2, int *a3)
{
  _QWORD *v6;
  int Int;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  const UChar *StringByKey;
  const UChar *v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  int *IntVector;
  int v17;
  unsigned int v18;
  const UChar *v19;
  int v20;
  int v21;
  int *v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;
  int *v27;
  int *v28;
  int v30;
  _QWORD v31[2];
  uint64_t v32;
  _QWORD v33[4];
  int v34;
  _OWORD v35[8];
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &off_1E224A298;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E224A298;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &off_1E224A298;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = &off_1E224A250;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = &off_1E224A298;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = &off_1E224A298;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = &off_1E224A250;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = &off_1E224A298;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = &off_1E224A250;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = a2;
  if (*a3 > 0)
    return a1;
  v6 = (_QWORD *)ures_getByKey(a2, "embeddings", 0, a3);
  Int = ures_getInt((uint64_t)v6, a3);
  v8 = ures_getByKey(a2, "hunits", 0, a3);
  v9 = (_QWORD *)v8;
  if (*a3 <= 0)
  {
    v10 = ures_getInt(v8, a3);
    StringByKey = ures_getStringByKey(a2, "type", 0, a3);
    if (*a3 <= 0)
    {
      v12 = StringByKey;
      if (u_strCompare(StringByKey, -1, word_18BE35946, -1, 0))
      {
        if (u_strCompare(v12, -1, (const UChar *)L"graphclust", -1, 0))
        {
LABEL_9:
          *(_QWORD *)(a1 + 16) = ures_getStringByKey(a2, "model", 0, a3);
          v14 = ures_getByKey(a2, "data", 0, a3);
          v15 = (_QWORD *)v14;
          if (*a3 <= 0)
          {
            v34 = 0;
            IntVector = ures_getIntVector(v14, &v34, a3);
            *(_QWORD *)a1 = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0, a3);
            v36 = 0;
            memset(v35, 0, sizeof(v35));
            icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v35);
            v33[2] = 0;
            v33[0] = &unk_1E2257598;
            v33[1] = 0;
            v33[3] = 0xFFFFFFFFLL;
            ures_getValueWithFallback(a2, "dict", (uint64_t)v35, (uint64_t)v33, (UErrorCode *)a3);
            v31[0] = 0;
            v31[1] = 0;
            v32 = 0;
            sub_18BC62384((uint64_t)v33, a3, (uint64_t)v31);
            if (*a3 <= 0)
            {
              v17 = v32;
              v30 = 0;
              if ((int)v32 < 1)
              {
LABEL_15:
                v20 = 4 * Int * v10;
                v21 = 4 * v10 * v10;
                *(_QWORD *)(a1 + 32) = IntVector;
                *(_DWORD *)(a1 + 40) = v17 + 1;
                *(_DWORD *)(a1 + 44) = Int;
                v22 = &IntVector[(v17 + 1) * Int];
                *(_QWORD *)(a1 + 56) = v22;
                *(_DWORD *)(a1 + 64) = Int;
                *(_DWORD *)(a1 + 68) = 4 * v10;
                v23 = &v22[v20];
                *(_QWORD *)(a1 + 80) = v23;
                *(_DWORD *)(a1 + 88) = v10;
                *(_DWORD *)(a1 + 92) = 4 * v10;
                v24 = &v23[v21];
                *(_QWORD *)(a1 + 104) = v24;
                *(_DWORD *)(a1 + 112) = 4 * v10;
                v25 = &v24[4 * v10];
                *(_QWORD *)(a1 + 128) = v25;
                *(_DWORD *)(a1 + 136) = Int;
                *(_DWORD *)(a1 + 140) = 4 * v10;
                v26 = &v25[v20];
                *(_QWORD *)(a1 + 152) = v26;
                *(_DWORD *)(a1 + 160) = v10;
                *(_DWORD *)(a1 + 164) = 4 * v10;
                v27 = &v26[v21];
                *(_QWORD *)(a1 + 176) = v27;
                *(_DWORD *)(a1 + 184) = 4 * v10;
                v28 = &v27[4 * v10];
                *(_QWORD *)(a1 + 200) = v28;
                *(_DWORD *)(a1 + 208) = 2 * v10;
                *(_DWORD *)(a1 + 212) = 4;
                *(_QWORD *)(a1 + 224) = &v28[8 * v10];
                *(_DWORD *)(a1 + 232) = 4;
              }
              else
              {
                v18 = 0;
                while (1)
                {
                  icu::ResourceArray::getValue((icu::ResourceArray *)v31, v18, (icu::ResourceValue *)v33);
                  v19 = sub_18BC621A0((uint64_t)v33, &v30, a3);
                  uhash_putiAllowZero(*(_QWORD *)a1, (uint64_t)v19, v18, a3);
                  if (*a3 >= 1)
                    break;
                  if (v17 == ++v18)
                    goto LABEL_15;
                }
              }
            }
            icu::ResourceValue::~ResourceValue((icu::ResourceValue *)v33);
            icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v35);
          }
          if (v15)
            ures_close(v15);
          goto LABEL_19;
        }
        v13 = 2;
      }
      else
      {
        v13 = 1;
      }
      *(_DWORD *)(a1 + 8) = v13;
      goto LABEL_9;
    }
  }
LABEL_19:
  if (v9)
    ures_close(v9);
  if (v6)
    ures_close(v6);
  return a1;
}

void sub_18BBD0F2C(uint64_t a1, UText *ut, int a3, int a4, icu::UVector32 *this, icu::UVector32 *a6, UErrorCode *a7)
{
  int v14;
  int v15;
  int v17;
  int v18;
  int v19;
  int NativeIndex;
  int v21;
  BOOL v22;

  v14 = a4 - a3;
  if (a4 - a3 < 0)
  {
    if (!icu::UVector32::expandCapacity(this, a4 - a3, a7))
      return;
LABEL_8:
    if (!icu::UVector32::expandCapacity(a6, v14, a7) || *(int *)a7 >= 1)
      return;
    goto LABEL_10;
  }
  if (*((_DWORD *)this + 3) < v14 && !icu::UVector32::expandCapacity(this, a4 - a3, a7))
    return;
  if (*((_DWORD *)a6 + 3) < v14)
    goto LABEL_8;
  if (*(int *)a7 > 0)
    return;
LABEL_10:
  utext_setNativeIndex(ut, a3);
  v21 = 0;
  if (*(int *)a7 <= 0)
  {
    do
    {
      NativeIndex = utext_getNativeIndex(ut);
      if (NativeIndex >= a4)
        return;
      LOWORD(v21) = utext_next32(ut);
      v15 = *((_DWORD *)this + 2);
      if (v15 < -1 || *((_DWORD *)this + 3) <= v15)
      {
        if (!icu::UVector32::expandCapacity(this, v15 + 1, a7))
          goto LABEL_20;
        v15 = *((_DWORD *)this + 2);
      }
      *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v15) = NativeIndex;
      ++*((_DWORD *)this + 2);
LABEL_20:
      v22 = 0;
      v17 = uhash_getiAndFound(*(_QWORD *)(a1 + 8), (uint64_t)&v21, &v22);
      if (v22)
        v18 = v17;
      else
        v18 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 48);
      v19 = *((_DWORD *)a6 + 2);
      if (v19 >= -1 && *((_DWORD *)a6 + 3) > v19)
        goto LABEL_27;
      if (icu::UVector32::expandCapacity(a6, v19 + 1, a7))
      {
        v19 = *((_DWORD *)a6 + 2);
LABEL_27:
        *(_DWORD *)(*((_QWORD *)a6 + 3) + 4 * v19) = v18;
        ++*((_DWORD *)a6 + 2);
      }
    }
    while (*(int *)a7 < 1);
  }
}

uint64_t sub_18BBD10F0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  BOOL v4;

  v4 = 0;
  result = uhash_getiAndFound(*(_QWORD *)(a1 + 8), a2, &v4);
  if (!v4)
    return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 48);
  return result;
}

void sub_18BBD113C(uint64_t a1, UText *a2, uint64_t a3, int a4, icu::UVector32 *this, icu::UVector32 *a6, UErrorCode *a7)
{
  int v14;
  UErrorCode *v15;
  UErrorCode *v16;
  char *CharacterInstance;
  int v18;
  int v19;
  int v20;
  int v21;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  UChar dest[4];
  uint64_t v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (*(int *)a7 <= 0)
  {
    v14 = a4 - a3;
    if (a4 - (int)a3 < 0)
    {
      if (!icu::UVector32::expandCapacity(this, a4 - (int)a3, a7))
        return;
    }
    else
    {
      if (*((_DWORD *)this + 3) < v14 && !icu::UVector32::expandCapacity(this, a4 - (int)a3, a7))
        return;
      if (*((_DWORD *)a6 + 3) >= v14)
      {
        if (*(int *)a7 > 0)
          return;
LABEL_12:
        icu::Locale::Locale((icu::Locale *)dest);
        CharacterInstance = icu::BreakIterator::createCharacterInstance((char **)dest, (const icu::Locale *)a7, v15, v16);
        icu::Locale::~Locale((icu::Locale *)dest);
        if (*(int *)a7 > 0)
        {
          if (!CharacterInstance)
            return;
LABEL_16:
          (*(void (**)(char *))(*(_QWORD *)CharacterInstance + 8))(CharacterInstance);
          return;
        }
        (*(void (**)(char *, UText *, UErrorCode *))(*(_QWORD *)CharacterInstance + 64))(CharacterInstance, a2, a7);
        if (*(int *)a7 > 0)
          goto LABEL_16;
        if ((_DWORD)a3)
          (*(void (**)(char *, uint64_t))(*(_QWORD *)CharacterInstance + 128))(CharacterInstance, a3);
        *(_QWORD *)dest = 0;
        v30 = 0;
        v31 = 0;
        v18 = (*(uint64_t (**)(char *))(*(_QWORD *)CharacterInstance + 104))(CharacterInstance);
        if (v18 == -1 || v18 >= a4)
        {
          v20 = a3;
LABEL_47:
          if (v20 < a4 && *(int *)a7 <= 0)
          {
            utext_extract(a2, v20, a4, dest, 10, a7);
            if (*(int *)a7 <= 0)
            {
              sub_18BBB7118(this, v20, a7);
              v27 = sub_18BBD10F0(a1, (uint64_t)dest);
              sub_18BBB7118(a6, v27, a7);
            }
          }
          goto LABEL_16;
        }
        v19 = a3;
        while (1)
        {
          v20 = v18;
          if (v18 > (int)a3)
            break;
LABEL_41:
          v18 = (*(uint64_t (**)(char *))(*(_QWORD *)CharacterInstance + 104))(CharacterInstance);
          v26 = v18 != -1 && v18 < a4;
          v19 = v20;
          if (!v26)
            goto LABEL_47;
        }
        utext_extract(a2, v19, v18, dest, 10, a7);
        if (*(int *)a7 > 0)
          goto LABEL_16;
        v21 = *((_DWORD *)this + 2);
        if (v21 < -1 || *((_DWORD *)this + 3) <= v21)
        {
          if (!icu::UVector32::expandCapacity(this, v21 + 1, a7))
            goto LABEL_32;
          v21 = *((_DWORD *)this + 2);
        }
        *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v21) = v19;
        ++*((_DWORD *)this + 2);
LABEL_32:
        v28 = 0;
        v23 = uhash_getiAndFound(*(_QWORD *)(a1 + 8), (uint64_t)dest, &v28);
        if (v28)
          v24 = v23;
        else
          v24 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 48);
        v25 = *((_DWORD *)a6 + 2);
        if (v25 < -1 || *((_DWORD *)a6 + 3) <= v25)
        {
          if (!icu::UVector32::expandCapacity(a6, v25 + 1, a7))
            goto LABEL_40;
          v25 = *((_DWORD *)a6 + 2);
        }
        *(_DWORD *)(*((_QWORD *)a6 + 3) + 4 * v25) = v24;
        ++*((_DWORD *)a6 + 2);
LABEL_40:
        if (*(int *)a7 > 0)
          goto LABEL_16;
        goto LABEL_41;
      }
    }
    if (!icu::UVector32::expandCapacity(a6, v14, a7) || *(int *)a7 >= 1)
      return;
    goto LABEL_12;
  }
}

void sub_18BBD147C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  void *v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  void *v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t (**v45)();
  void *v46;
  uint64_t v47;
  int v48;
  uint64_t (**v49)();
  void *v50;
  uint64_t v51;
  int v52;
  uint64_t (**v53)();
  void *v54;
  uint64_t v55;
  int v56;

  if ((*(int (**)(_QWORD *))(*a8 + 16))(a8) >= 1)
  {
    v16 = 0;
    do
    {
      *(float *)(a8[2] + 4 * v16) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 24))(a4, v16);
      ++v16;
    }
    while (v16 < (*(int (**)(_QWORD *))(*a8 + 16))(a8));
  }
  if ((*(int (**)(_QWORD *))(*a8 + 16))(a8) >= 1)
  {
    v17 = 0;
    do
    {
      if ((*(int (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5) >= 1)
      {
        v18 = 0;
        do
        {
          v19 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 24))(a5, v18);
          *(float *)(a8[2] + 4 * v17) = *(float *)(a8[2] + 4 * v17)
                                      + (float)(v19
                                              * (*(float (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v18, v17));
          v18 = (v18 + 1);
        }
        while ((int)v18 < (*(int (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5));
      }
      ++v17;
    }
    while (v17 < (*(int (**)(_QWORD *))(*a8 + 16))(a8));
  }
  if ((*(int (**)(_QWORD *))(*a8 + 16))(a8) >= 1)
  {
    v20 = 0;
    do
    {
      if ((*(int (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6) >= 1)
      {
        v21 = 0;
        do
        {
          v22 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 24))(a6, v21);
          *(float *)(a8[2] + 4 * v20) = *(float *)(a8[2] + 4 * v20)
                                      + (float)(v22
                                              * (*(float (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, v21, v20));
          v21 = (v21 + 1);
        }
        while ((int)v21 < (*(int (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6));
      }
      ++v20;
    }
    while (v20 < (*(int (**)(_QWORD *))(*a8 + 16))(a8));
  }
  v23 = a1;
  if (a1 <= 0)
  {
    uprv_free(0);
    v26 = a1;
  }
  else
  {
    v24 = (float *)a8[2];
    v25 = a1;
    do
    {
      *v24 = 1.0 / (float)(expf(-*v24) + 1.0);
      ++v24;
      --v25;
    }
    while (v25);
    uprv_free(0);
    v26 = a1;
    v27 = (float *)(a8[2] + 4 * a1);
    v28 = a1;
    do
    {
      *v27 = 1.0 / (float)(expf(-*v27) + 1.0);
      ++v27;
      --v28;
    }
    while (v28);
  }
  uprv_free(0);
  v29 = a8[2];
  v53 = &off_1E224A1B0;
  v54 = 0;
  v55 = v29 + 8 * a1;
  v56 = a1;
  if (a1 < 1)
  {
    v32 = 0;
  }
  else
  {
    v30 = 0;
    do
    {
      v31 = ((float (*)(uint64_t (***)(), uint64_t))v53[3])(&v53, v30);
      *(float *)(v55 + 4 * v30++) = tanhf(v31);
    }
    while (v30 < v56);
    v32 = v54;
  }
  v53 = &off_1E224A1B0;
  uprv_free(v32);
  if (a1 >= 1)
  {
    v33 = (float *)(a8[2] + 12 * a1);
    do
    {
      *v33 = 1.0 / (float)(expf(-*v33) + 1.0);
      ++v33;
      --v23;
    }
    while (v23);
  }
  uprv_free(0);
  v34 = a8[2] + 4 * v26;
  v53 = &off_1E224A1B0;
  v54 = 0;
  v55 = v34;
  v56 = a1;
  if ((*(int (**)(_QWORD *))(*a7 + 16))(a7) >= 1)
  {
    v35 = 0;
    do
    {
      *(float *)(a7[2] + 4 * v35) = ((float (*)(uint64_t (***)(), uint64_t))v53[3])(&v53, v35)
                                  * *(float *)(a7[2] + 4 * v35);
      ++v35;
    }
    while (v35 < (*(int (**)(_QWORD *))(*a7 + 16))(a7));
  }
  v36 = a8[2];
  v49 = &off_1E224A1B0;
  v50 = 0;
  v51 = v36;
  v52 = a1;
  v45 = &off_1E224A1B0;
  v46 = 0;
  v47 = v36 + 8 * a1;
  v48 = a1;
  if ((*(int (**)(_QWORD *))(*a7 + 16))(a7) < 1)
  {
    v39 = 0;
  }
  else
  {
    v37 = 0;
    do
    {
      v38 = ((float (*)(uint64_t (***)(), uint64_t))v49[3])(&v49, v37);
      *(float *)(a7[2] + 4 * v37) = *(float *)(a7[2] + 4 * v37)
                                  + (float)(v38
                                          * ((float (*)(uint64_t (***)(), uint64_t))v45[3])(&v45, v37));
      ++v37;
    }
    while (v37 < (*(int (**)(_QWORD *))(*a7 + 16))(a7));
    v39 = v46;
  }
  v45 = &off_1E224A1B0;
  uprv_free(v39);
  v49 = &off_1E224A1B0;
  uprv_free(v50);
  v53 = &off_1E224A1B0;
  uprv_free(v54);
  if (*(int *)(a6 + 24) >= 1)
  {
    v40 = 0;
    do
    {
      v41 = (*(float (**)(_QWORD *, uint64_t))(*a7 + 24))(a7, v40);
      *(float *)(*(_QWORD *)(a6 + 16) + 4 * v40++) = tanhf(v41);
    }
    while (v40 < *(int *)(a6 + 24));
  }
  v42 = a8[2] + 12 * a1;
  v53 = &off_1E224A1B0;
  v54 = 0;
  v55 = v42;
  v56 = a1;
  if ((*(int (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6) < 1)
  {
    v44 = 0;
  }
  else
  {
    v43 = 0;
    do
    {
      *(float *)(*(_QWORD *)(a6 + 16) + 4 * v43) = ((float (*)(uint64_t (***)(), uint64_t))v53[3])(&v53, v43)* *(float *)(*(_QWORD *)(a6 + 16) + 4 * v43);
      ++v43;
    }
    while (v43 < (*(int (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6));
    v44 = v54;
  }
  v53 = &off_1E224A1B0;
  uprv_free(v44);
}

uint64_t sub_18BBD19D4(uint64_t a1, UText *ut, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, UErrorCode *a7)
{
  int v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  float v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  float v53;
  int v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  int v59;
  int v60;
  int v61;
  BOOL v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (**v67)();
  void *v68;
  char *v69;
  int v70;
  uint64_t (**v71)();
  void *v72;
  char *v73;
  uint64_t v74;
  uint64_t (**v75)();
  void *v76;
  char *v77;
  uint64_t v78;
  uint64_t (**v79)();
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t (**v83)();
  void *v84;
  float *v85;
  uint64_t v86;
  uint64_t (**v87)();
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t (**v91)();
  void *v92;
  void *v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;

  if (*(int *)a7 > 0)
    return 0;
  v13 = *(_DWORD *)(a5 + 8);
  v14 = (int)a3;
  utext_setNativeIndex(ut, (int)a3);
  utext_moveIndex32(ut, 4);
  if (utext_getNativeIndex(ut) >= (int)a4)
    return 0;
  utext_setNativeIndex(ut, v14);
  v97 = 0u;
  v98 = 0u;
  icu::UVector32::UVector32((icu::UVector32 *)&v97, a7);
  v95 = 0u;
  v96 = 0u;
  icu::UVector32::UVector32((icu::UVector32 *)&v95, a7);
  if (*(int *)a7 > 0
    || ((*(void (**)(_QWORD, UText *, uint64_t, uint64_t, __int128 *, __int128 *, UErrorCode *))(**(_QWORD **)(a1 + 216) + 16))(*(_QWORD *)(a1 + 216), ut, a3, a4, &v97, &v95, a7), *(int *)a7 > 0))
  {
    v15 = 0;
    goto LABEL_6;
  }
  v64 = *((_QWORD *)&v98 + 1);
  v66 = *((_QWORD *)&v96 + 1);
  v17 = DWORD2(v95);
  v18 = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 88);
  v91 = &off_1E224A1B0;
  v19 = uprv_malloc(16 * v18);
  v92 = v19;
  v93 = v19;
  v94 = (4 * v18);
  if (*(int *)a7 <= 0)
  {
    if (v19)
      bzero(v19, 16 * v18);
    else
      *a7 = U_MEMORY_ALLOCATION_ERROR;
  }
  v87 = &off_1E224A1B0;
  v20 = uprv_malloc(4 * v18);
  v88 = v20;
  v89 = v20;
  v90 = v18;
  if (*(int *)a7 <= 0)
  {
    if (v20)
      bzero(v20, 4 * v18);
    else
      *a7 = U_MEMORY_ALLOCATION_ERROR;
  }
  v86 = 4;
  v83 = &off_1E224A1B0;
  v21 = uprv_malloc(0x10uLL);
  v84 = v21;
  v85 = (float *)v21;
  if (*(int *)a7 <= 0)
  {
    if (v21)
    {
      *v21 = 0;
      v21[1] = 0;
    }
    else
    {
      *a7 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  v22 = (char *)uprv_malloc(4 * v18 * (int)v17);
  v23 = v22;
  if (*(int *)a7 <= 0)
  {
    if (v22)
      bzero(v22, 4 * v18 * (int)v17);
    else
      *a7 = U_MEMORY_ALLOCATION_ERROR;
  }
  v65 = v17;
  v79 = &off_1E224A1B0;
  v24 = (char *)uprv_malloc(8 * v18);
  v25 = v24;
  v80 = v24;
  v81 = v24;
  v82 = (2 * v18);
  if (*(int *)a7 > 0)
  {
    v15 = 0;
    goto LABEL_82;
  }
  if (!v24)
  {
    v15 = 0;
    *a7 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_82;
  }
  v63 = v13;
  bzero(v24, 8 * v18);
  if ((int)v17 >= 1)
  {
    do
    {
      v75 = &off_1E224A1B0;
      v76 = 0;
      v77 = &v23[4 * (v17 - 1) * v18];
      v78 = v18;
      if (v17 - 1 != (_DWORD)v65 - 1)
      {
        v71 = &off_1E224A1B0;
        v72 = 0;
        v73 = &v23[4 * v17 * v18];
        LODWORD(v74) = v18;
        if (v18 < 1)
        {
          v28 = 0;
        }
        else
        {
          v26 = 0;
          do
          {
            v27 = ((float (*)(uint64_t (***)(), uint64_t))v71[3])(&v71, v26);
            *(float *)&v77[4 * v26++] = v27;
          }
          while (v26 < ((int (*)(uint64_t (***)()))v75[2])(&v75));
          v28 = v72;
        }
        v71 = &off_1E224A1B0;
        uprv_free(v28);
      }
      v29 = *(_QWORD *)(a1 + 208);
      v30 = v29 + 120;
      v31 = v29 + 144;
      v32 = v29 + 168;
      v33 = *(_QWORD *)(v29 + 32);
      LODWORD(v29) = *(_DWORD *)(v29 + 44);
      v34 = (void *)(v33 + 4 * (int)v29 * *(_DWORD *)(v66 + 4 * (v17 - 1)));
      v71 = &off_1E224A250;
      v72 = v34;
      LODWORD(v73) = v29;
      sub_18BBD147C(v18, v30, v31, v32, (uint64_t)&v71, (uint64_t)&v75, &v87, &v91);
      v75 = &off_1E224A1B0;
      uprv_free(v76);
      v62 = v17-- <= 1;
    }
    while (!v62);
    v25 = v81;
    LODWORD(v17) = v65;
  }
  v75 = &off_1E224A1B0;
  v76 = 0;
  v77 = v25;
  v78 = v18;
  v71 = &off_1E224A1B0;
  v72 = 0;
  v73 = &v25[4 * v18];
  v74 = v18;
  bzero(v89, 4 * (int)v90);
  if ((int)v17 < 1)
  {
LABEL_78:
    v15 = (*(_DWORD *)(a5 + 8) - v63);
    goto LABEL_81;
  }
  v35 = 0;
  while (1)
  {
    v36 = *(_QWORD *)(a1 + 208);
    v37 = v36 + 48;
    v38 = v36 + 72;
    v39 = v36 + 96;
    v40 = *(_QWORD *)(v36 + 32);
    LODWORD(v36) = *(_DWORD *)(v36 + 44);
    v41 = (void *)(v40 + 4 * (int)v36 * *(_DWORD *)(v66 + 4 * v35));
    v67 = &off_1E224A250;
    v68 = v41;
    LODWORD(v69) = v36;
    sub_18BBD147C(v18, v37, v38, v39, (uint64_t)&v67, (uint64_t)&v75, &v87, &v91);
    v67 = &off_1E224A1B0;
    v68 = 0;
    v69 = &v23[4 * v35 * v18];
    v70 = v18;
    if (((int (*)(uint64_t (***)()))v71[2])(&v71) >= 1)
    {
      v42 = 0;
      do
      {
        v43 = ((float (*)(uint64_t (***)(), uint64_t))v67[3])(&v67, v42);
        *(float *)&v73[4 * v42++] = v43;
      }
      while (v42 < ((int (*)(uint64_t (***)()))v71[2])(&v71));
    }
    v67 = &off_1E224A1B0;
    uprv_free(v68);
    v44 = *(_QWORD *)(a1 + 208);
    if (((int (*)(uint64_t))v83[2])((uint64_t)&v83) >= 1)
    {
      v45 = 0;
      v46 = v44 + 216;
      do
      {
        v47 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 24))(v46, v45);
        v85[v45++] = v47;
      }
      while (v45 < ((int (*)(uint64_t))v83[2])((uint64_t)&v83));
    }
    v48 = *(_QWORD *)(a1 + 208);
    if (((int (*)(uint64_t))v83[2])((uint64_t)&v83) >= 1)
    {
      v49 = 0;
      v50 = v48 + 192;
      do
      {
        if (((int (*)(uint64_t))v79[2])((uint64_t)&v79) >= 1)
        {
          v51 = 0;
          do
          {
            v52 = ((float (*)(uint64_t, int))v79[3])((uint64_t)&v79, v51);
            v53 = (*(float (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v50 + 32))(v50, v51, v49);
            v85[v49] = v85[v49] + (float)(v52 * v53);
            v51 = (v51 + 1);
          }
          while ((int)v51 < ((int (*)(uint64_t))v79[2])((uint64_t)&v79));
        }
        ++v49;
      }
      while (v49 < ((int (*)(uint64_t))v83[2])((uint64_t)&v83));
    }
    if ((int)v86 <= 1)
    {
      v54 = 0;
      v57 = v65;
    }
    else
    {
      v54 = 0;
      v55 = *v85;
      v56 = 1;
      v57 = v65;
      do
      {
        if (v85[v56] > v55)
        {
          v54 = v56;
          v55 = v85[v56];
        }
        ++v56;
      }
      while (v86 != v56);
    }
    if (v54)
      v58 = v54 == 3;
    else
      v58 = 1;
    v59 = v58;
    if (!v35 || !v59)
      goto LABEL_77;
    v60 = *(_DWORD *)(v64 + 4 * v35);
    v61 = *(_DWORD *)(a5 + 8);
    v62 = v61 < -1 || *(_DWORD *)(a5 + 12) <= v61;
    if (v62)
    {
      if (!icu::UVector32::expandCapacity((icu::UVector32 *)a5, v61 + 1, a7))
        goto LABEL_76;
      v61 = *(_DWORD *)(a5 + 8);
    }
    *(_DWORD *)(*(_QWORD *)(a5 + 24) + 4 * v61) = v60;
    ++*(_DWORD *)(a5 + 8);
LABEL_76:
    if (*(int *)a7 > 0)
      break;
LABEL_77:
    if (++v35 == v57)
      goto LABEL_78;
  }
  v15 = 0;
LABEL_81:
  v71 = &off_1E224A1B0;
  uprv_free(v72);
  v75 = &off_1E224A1B0;
  uprv_free(v76);
  v25 = v80;
LABEL_82:
  v79 = &off_1E224A1B0;
  uprv_free(v25);
  uprv_free(v23);
  v83 = &off_1E224A1B0;
  uprv_free(v84);
  v87 = &off_1E224A1B0;
  uprv_free(v88);
  v91 = &off_1E224A1B0;
  uprv_free(v92);
LABEL_6:
  icu::UVector32::~UVector32((void **)&v95);
  icu::UVector32::~UVector32((void **)&v97);
  return v15;
}

uint64_t sub_18BBD2108(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t (***sub_18BBD2110(uint64_t a1, int *a2))()
{
  uint64_t (***result)();
  int v4;
  uint64_t (**v5)();
  uint64_t (**v6)();

  if (*a2 > 0)
    return 0;
  v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 2)
  {
    result = (uint64_t (***)())icu::UMemory::operator new((icu::UMemory *)0x10, (unint64_t)a2);
    if (!result)
      return result;
    v5 = *(uint64_t (***)())a1;
    v6 = &off_1E224A358;
    goto LABEL_9;
  }
  if (v4 != 1)
    abort();
  result = (uint64_t (***)())icu::UMemory::operator new((icu::UMemory *)0x10, (unint64_t)a2);
  if (result)
  {
    v5 = *(uint64_t (***)())a1;
    v6 = &off_1E224A318;
LABEL_9:
    *result = v6;
    result[1] = v5;
  }
  return result;
}

_QWORD *sub_18BBD2190(_QWORD *a1, uint64_t a2, uint64_t a3, int *a4)
{
  _QWORD *v8;

  v8 = sub_18BBB392C(a1);
  *v8 = off_1E224A1E0;
  v8[26] = a2;
  a1[27] = sub_18BBD2110(a2, a4);
  if (*a4 < 1)
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, a3);
  else
    a1[26] = 0;
  return a1;
}

void sub_18BBD2210(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1E224A1E0;
  v2 = a1[26];
  if (v2)
  {
    uhash_close(*(void ***)v2);
    ures_close(*(_QWORD **)(v2 + 240));
    icu::UMemory::operator delete((void *)v2);
  }
  v3 = a1[27];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_18BBB3960((uint64_t)a1);
}

void sub_18BBD2274(_QWORD *a1)
{
  void *v1;

  sub_18BBD2210(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BBD2288(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 208) + 16);
}

void sub_18BBD2294(int32_t a1@<W0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  const char *ShortName;
  const UChar *StringByKey;
  const UChar *v10;
  int v11;

  v6 = ures_open("icudt74l-brkitr", "", a2);
  v7 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v6, "lstm", (uint64_t)v6, (UErrorCode *)a2);
  ShortName = uscript_getShortName(a1);
  *(_OWORD *)(a3 + 8) = 0u;
  *(_QWORD *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)a3 = off_1E2256B38;
  *(_WORD *)(a3 + 8) = 2;
  v11 = 0;
  StringByKey = ures_getStringByKey((uint64_t)v7, ShortName, &v11, a2);
  if (*a2 <= 0)
  {
    v10 = StringByKey;
    icu::UnicodeString::setTo((icu::UnicodeString *)a3, 1, &v10, v11);
  }
  else
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
  }
  ures_close(v7);
}

uint64_t CreateLSTMDataForScript(unsigned int a1, int *a2)
{
  uint64_t LSTMData;
  int *appended;
  int IndexOf;
  _QWORD *v6;
  void *v8[8];
  _OWORD v9[4];
  uint64_t v10;

  LSTMData = 0;
  v10 = *MEMORY[0x1E0C80C00];
  if (a1 <= 0x26 && ((1 << a1) & 0x4011800000) != 0)
  {
    memset(v9, 0, sizeof(v9));
    sub_18BBD2294(a1, a2, (uint64_t)v9);
    if (*a2 <= 0)
    {
      memset(&v8[1], 0, 56);
      v8[0] = (char *)&v8[1] + 5;
      LODWORD(v8[1]) = 40;
      appended = icu::CharString::appendInvariantChars((icu::CharString *)v8, (const icu::UnicodeString *)v9, (UErrorCode *)a2);
      IndexOf = icu::CharString::lastIndexOf((icu::CharString *)v8, 0x2Eu);
      icu::CharString::truncate((uint64_t)appended, IndexOf);
      v6 = (_QWORD *)ures_openDirect((uint64_t)"icudt74l-brkitr", (uint64_t)v8[0], (uint64_t)a2);
      if (*a2 <= 0)
      {
        LSTMData = CreateLSTMData((uint64_t)v6, a2);
      }
      else
      {
        if (v6)
          ures_close(v6);
        LSTMData = 0;
      }
      if (BYTE4(v8[1]))
        uprv_free(v8[0]);
    }
    else
    {
      LSTMData = 0;
    }
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v9);
  }
  return LSTMData;
}

uint64_t CreateLSTMData(uint64_t a1, int *a2)
{
  uint64_t result;

  result = icu::UMemory::operator new((icu::UMemory *)0xF8, (unint64_t)a2);
  if (result)
    return sub_18BBD0B50(result, a1, a2);
  return result;
}

_QWORD *CreateLSTMBreakEngine(int a1, uint64_t a2, UErrorCode *a3)
{
  const __int16 *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _OWORD v10[12];
  uint64_t v11;
  void (**v12)(icu::UnicodeString *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v16 = 0;
  v15 = 0u;
  v14 = 0u;
  v12 = off_1E2256B38;
  LOWORD(v13) = 2;
  if (a1 == 28)
  {
    v5 = L"[[:Mymr:]&[:LineBreak=SA:]]";
    goto LABEL_5;
  }
  if (a1 == 38)
  {
    v5 = L"[[:Thai:]&[:LineBreak=SA:]]";
LABEL_5:
    icu::UnicodeString::UnicodeString((uint64_t)v10, (uint64_t)v5);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v12, (icu::UnicodeString *)v10);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v10);
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v10);
    icu::UnicodeSet::applyPattern((icu::UnicodeSet *)v10, (const icu::UnicodeString *)&v12, a3);
    v7 = (_QWORD *)icu::UMemory::operator new((icu::UMemory *)0xE0, v6);
    v8 = v7;
    if (v7)
    {
      sub_18BBD2190(v7, a2, (uint64_t)v10, (int *)a3);
      if (*(int *)a3 >= 1)
      {
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
        v8 = 0;
      }
    }
    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v10);
    goto LABEL_13;
  }
  if (a2)
  {
    uhash_close(*(void ***)a2);
    ures_close(*(_QWORD **)(a2 + 240));
    icu::UMemory::operator delete((void *)a2);
  }
  v8 = 0;
LABEL_13:
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v12);
  return v8;
}

void DeleteLSTMData(uint64_t a1)
{
  if (a1)
  {
    uhash_close(*(void ***)a1);
    ures_close(*(_QWORD **)(a1 + 240));
    icu::UMemory::operator delete((void *)a1);
  }
}

uint64_t LSTMDataName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_18BBD26E4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

float sub_18BBD26EC(uint64_t a1, int a2)
{
  return *(float *)(*(_QWORD *)(a1 + 8) + 4 * a2);
}

uint64_t sub_18BBD26F8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

float sub_18BBD2700(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(_QWORD *)(a1 + 8) + 4 * (a3 + *(_DWORD *)(a1 + 20) * a2));
}

uint64_t sub_18BBD2714(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

float sub_18BBD271C(uint64_t a1, int a2)
{
  return *(float *)(*(_QWORD *)(a1 + 16) + 4 * a2);
}

icu::MessagePattern *icu::MessagePattern::MessagePattern(icu::MessagePattern *this, UErrorCode *a2)
{
  *(_QWORD *)this = off_1E224A3B0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = off_1E2256B38;
  *((_WORD *)this + 12) = 2;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *(_QWORD *)((char *)this + 119) = 0;
  icu::MessagePattern::init(this, a2);
  return this;
}

{
  *(_QWORD *)this = off_1E224A3B0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = off_1E2256B38;
  *((_WORD *)this + 12) = 2;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *(_QWORD *)((char *)this + 119) = 0;
  icu::MessagePattern::init(this, a2);
  return this;
}

uint64_t icu::MessagePattern::init(icu::MessagePattern *this, UErrorCode *a2)
{
  uint64_t result;
  uint64_t v5;

  if (*(int *)a2 > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x210, (unint64_t)a2);
  if (result)
  {
    v5 = result;
    bzero((void *)(result + 8), 0x208uLL);
    *(_QWORD *)v5 = v5 + 16;
    *(_DWORD *)(v5 + 8) = 32;
    *((_QWORD *)this + 10) = v5;
    *((_QWORD *)this + 11) = v5 + 16;
    return 1;
  }
  else
  {
    *((_QWORD *)this + 10) = 0;
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

uint64_t icu::MessagePattern::MessagePattern(uint64_t a1, int a2, UErrorCode *a3)
{
  *(_QWORD *)a1 = off_1E224A3B0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = off_1E2256B38;
  *(_WORD *)(a1 + 24) = 2;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 119) = 0;
  icu::MessagePattern::init((icu::MessagePattern *)a1, a3);
  return a1;
}

{
  *(_QWORD *)a1 = off_1E224A3B0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = off_1E2256B38;
  *(_WORD *)(a1 + 24) = 2;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 119) = 0;
  icu::MessagePattern::init((icu::MessagePattern *)a1, a3);
  return a1;
}

icu::MessagePattern *icu::MessagePattern::MessagePattern(icu::MessagePattern *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  *(_QWORD *)this = off_1E224A3B0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = off_1E2256B38;
  *((_WORD *)this + 12) = 2;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *(_QWORD *)((char *)this + 119) = 0;
  if (icu::MessagePattern::init(this, a4))
    icu::MessagePattern::parse(this, a2, a3, a4);
  return this;
}

icu::MessagePattern *icu::MessagePattern::parse(icu::MessagePattern *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  _QWORD *v7;
  _QWORD *v8;

  if (*(int *)a4 <= 0)
  {
    if (a3)
    {
      *(_QWORD *)&a3->line = 0;
      a3->preContext[0] = 0;
      a3->postContext[0] = 0;
    }
    icu::UnicodeString::operator=((UChar **)this + 2, a2);
    *((_DWORD *)this + 24) = 0;
    *((_DWORD *)this + 30) = 0;
    *(_DWORD *)((char *)this + 123) = 0;
  }
  icu::MessagePattern::parseMessage((uint64_t)this, 0, 0, 0, 0, a3, (int *)a4);
  v7 = (_QWORD *)*((_QWORD *)this + 10);
  if (v7)
    *((_QWORD *)this + 11) = *v7;
  v8 = (_QWORD *)*((_QWORD *)this + 13);
  if (v8)
    *((_QWORD *)this + 14) = *v8;
  return this;
}

icu::MessagePattern *icu::MessagePattern::MessagePattern(icu::MessagePattern *this, const icu::MessagePattern *a2)
{
  __int16 v4;
  UErrorCode v6;

  *(_QWORD *)this = off_1E224A3B0;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  icu::UnicodeString::UnicodeString((icu::MessagePattern *)((char *)this + 16), (UChar **)a2 + 2);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 30) = 0;
  *((_BYTE *)this + 124) = *((_BYTE *)a2 + 124);
  *((_BYTE *)this + 125) = *((_BYTE *)a2 + 125);
  *((_BYTE *)this + 126) = *((_BYTE *)a2 + 126);
  v6 = U_ZERO_ERROR;
  if (!icu::MessagePattern::copyStorage(this, a2, &v6))
  {
    if ((*((_WORD *)this + 12) & 1) != 0)
      v4 = 2;
    else
      v4 = *((_WORD *)this + 12) & 0x1F;
    *((_WORD *)this + 12) = v4;
    *((_DWORD *)this + 24) = 0;
    *((_DWORD *)this + 30) = 0;
    *(_DWORD *)((char *)this + 123) = 0;
  }
  return this;
}

uint64_t icu::MessagePattern::copyStorage(icu::MessagePattern *this, const icu::MessagePattern *a2, UErrorCode *a3)
{
  uint64_t result;
  _DWORD *v7;
  int v8;
  int v9;

  if (*(int *)a3 > 0)
    return 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 30) = 0;
  v7 = (_DWORD *)*((_QWORD *)this + 10);
  if (!v7)
  {
    result = icu::UMemory::operator new((icu::UMemory *)0x210, (unint64_t)a2);
    if (!result)
    {
      *((_QWORD *)this + 10) = 0;
      goto LABEL_18;
    }
    v7 = (_DWORD *)result;
    bzero((void *)(result + 8), 0x208uLL);
    *(_QWORD *)v7 = v7 + 4;
    v7[2] = 32;
    *((_QWORD *)this + 10) = v7;
    *((_QWORD *)this + 11) = v7 + 4;
  }
  v8 = *((_DWORD *)a2 + 24);
  if (v8 >= 1)
  {
    sub_18BBD2D1C(v7, *((const void ***)a2 + 10), v8, (int *)a3);
    if (*(int *)a3 > 0)
      return 0;
    *((_QWORD *)this + 11) = **((_QWORD **)this + 10);
    *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  }
  v9 = *((_DWORD *)a2 + 30);
  if (v9 < 1)
    return 1;
  result = *((_QWORD *)this + 13);
  if (result)
  {
LABEL_13:
    sub_18BBD2DDC((_DWORD *)result, *((const void ***)a2 + 13), v9, (int *)a3);
    if (*(int *)a3 <= 0)
    {
      *((_QWORD *)this + 14) = **((_QWORD **)this + 13);
      *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
      return 1;
    }
    return 0;
  }
  result = icu::UMemory::operator new((icu::UMemory *)0x50, (unint64_t)a2);
  if (result)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 8;
    *((_QWORD *)this + 13) = result;
    *((_QWORD *)this + 14) = result + 16;
    v9 = *((_DWORD *)a2 + 30);
    goto LABEL_13;
  }
  *((_QWORD *)this + 13) = 0;
LABEL_18:
  *a3 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

uint64_t icu::MessagePattern::clear(uint64_t this)
{
  __int16 v1;

  if ((*(_WORD *)(this + 24) & 1) != 0)
    v1 = 2;
  else
    v1 = *(_WORD *)(this + 24) & 0x1F;
  *(_WORD *)(this + 24) = v1;
  *(_DWORD *)(this + 96) = 0;
  *(_DWORD *)(this + 120) = 0;
  *(_DWORD *)(this + 123) = 0;
  return this;
}

uint64_t icu::MessagePattern::operator=(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  UErrorCode v6;

  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    icu::UnicodeString::operator=((UChar **)(a1 + 16), (UChar **)(a2 + 16));
    *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
    *(_WORD *)(a1 + 125) = *(_WORD *)(a2 + 125);
    v6 = U_ZERO_ERROR;
    if (!icu::MessagePattern::copyStorage((icu::MessagePattern *)a1, (const icu::MessagePattern *)a2, &v6))
    {
      if ((*(_WORD *)(a1 + 24) & 1) != 0)
        v4 = 2;
      else
        v4 = *(_WORD *)(a1 + 24) & 0x1F;
      *(_WORD *)(a1 + 24) = v4;
      *(_DWORD *)(a1 + 96) = 0;
      *(_DWORD *)(a1 + 120) = 0;
      *(_DWORD *)(a1 + 123) = 0;
    }
  }
  return a1;
}

_DWORD *sub_18BBD2D1C(_DWORD *result, const void **a2, int a3, int *a4)
{
  _DWORD *v7;
  size_t v8;
  void *v9;

  if (a3 >= 1 && *a4 <= 0)
  {
    v7 = result;
    if (result[2] >= a3)
    {
      v9 = *(void **)result;
      v8 = 16 * a3;
      return memcpy(v9, *a2, v8);
    }
    v8 = 16 * a3;
    result = uprv_malloc(v8);
    if (result)
    {
      v9 = result;
      if (*((_BYTE *)v7 + 12))
        uprv_free(*(void **)v7);
      *(_QWORD *)v7 = v9;
      v7[2] = a3;
      *((_BYTE *)v7 + 12) = 1;
      return memcpy(v9, *a2, v8);
    }
    *a4 = 7;
  }
  return result;
}

_DWORD *sub_18BBD2DDC(_DWORD *result, const void **a2, int a3, int *a4)
{
  _DWORD *v7;
  size_t v8;
  void *v9;

  if (a3 >= 1 && *a4 <= 0)
  {
    v7 = result;
    if (result[2] >= a3)
    {
      v9 = *(void **)result;
      v8 = 8 * a3;
      return memcpy(v9, *a2, v8);
    }
    v8 = 8 * a3;
    result = uprv_malloc(v8);
    if (result)
    {
      v9 = result;
      if (*((_BYTE *)v7 + 12))
        uprv_free(*(void **)v7);
      *(_QWORD *)v7 = v9;
      v7[2] = a3;
      *((_BYTE *)v7 + 12) = 1;
      return memcpy(v9, *a2, v8);
    }
    *a4 = 7;
  }
  return result;
}

void icu::MessagePattern::~MessagePattern(icu::MessagePattern *this)
{
  void (**v2)(icu::MessagePattern *__hidden);
  uint64_t v3;
  uint64_t v4;

  v2 = off_1E224A3B0;
  *(_QWORD *)this = off_1E224A3B0;
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 12))
      uprv_free(*(void **)v3);
    icu::UMemory::operator delete((void *)v3);
  }
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    if (*(_BYTE *)(v4 + 12))
      uprv_free(*(void **)v4);
    icu::UMemory::operator delete((void *)v4);
  }
  icu::UnicodeString::~UnicodeString(v2, (icu::MessagePattern *)((char *)this + 16));
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::MessagePattern::~MessagePattern(this);
  icu::UMemory::operator delete(v1);
}

icu::UnicodeString *icu::MessagePattern::preParse(icu::UnicodeString *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  icu::UnicodeString *v4;

  if (*(int *)a4 <= 0)
  {
    v4 = this;
    if (a3)
    {
      *(_QWORD *)&a3->line = 0;
      a3->preContext[0] = 0;
      a3->postContext[0] = 0;
    }
    this = icu::UnicodeString::operator=((UChar **)this + 2, a2);
    *((_DWORD *)v4 + 24) = 0;
    *((_DWORD *)v4 + 30) = 0;
    *(_DWORD *)((char *)v4 + 123) = 0;
  }
  return this;
}

uint64_t icu::MessagePattern::parseMessage(uint64_t a1, int a2, int a3, int a4, int a5, UParseError *a6, int *a7)
{
  uint64_t v7;
  int v10;
  uint64_t v16;
  _BOOL4 v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  int v28;
  _BOOL4 v30;
  BOOL v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  _BOOL4 v40;
  BOOL v41;
  _DWORD *v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;

  if (*a7 > 0)
    return 0;
  if (a4 >= 0x8000)
  {
    v7 = 0;
    v10 = 8;
LABEL_5:
    *a7 = v10;
    return v7;
  }
  v16 = *(int *)(a1 + 96);
  icu::MessagePattern::addPart(a1, 0, a2, a3, a4, a7);
  v7 = 0;
  if (*a7 > 0)
    return v7;
  v45 = v16;
  v7 = (a3 + a2);
  v19 = a5 == 3 || a5 == 5;
  while (1)
  {
    v20 = *(unsigned __int16 *)(a1 + 24);
    if (*(__int16 *)(a1 + 24) < 0)
      break;
    if ((int)v7 >= (int)(v20 >> 5))
      goto LABEL_89;
    v21 = v20 >> 5;
LABEL_18:
    v22 = (int)v7 + 1;
    if (v21 > v7)
    {
      v23 = a1 + 26;
      if ((v20 & 2) == 0)
        v23 = *(_QWORD *)(a1 + 40);
      v24 = *(unsigned __int16 *)(v23 + 2 * (int)v7);
      if (v24 == 39)
      {
        if ((v20 & 0x8000) != 0)
        {
          v25 = *(_DWORD *)(a1 + 28);
          if ((_DWORD)v22 == v25)
            goto LABEL_86;
        }
        else
        {
          if ((_DWORD)v22 == v20 >> 5)
            goto LABEL_86;
          v25 = v20 >> 5;
        }
        if (v25 <= v22)
        {
          v28 = 0xFFFF;
LABEL_51:
          if (*(_DWORD *)(a1 + 8) == 1
            || v28 == 123
            || v28 == 125
            || (v28 == 35 ? (v40 = v19) : (v40 = 0), v28 == 124 ? (v41 = a5 == 2) : (v41 = 0), v41 || v40))
          {
            while (1)
            {
              icu::MessagePattern::addPart(a1, 2, v7, 1, 0, a7);
              v32 = *(unsigned __int16 *)(a1 + 24);
              if ((int)v22 >= -1)
              {
                v35 = v22 + 1;
                if ((v32 & 0x8000) != 0)
                {
                  v34 = *(_DWORD *)(a1 + 28);
                  v33 = (int)v34 >= (int)v35 ? v22 + 1 : *(_DWORD *)(a1 + 28);
                }
                else
                {
                  v34 = v32 >> 5;
                  v33 = v34 >= v35 ? v22 + 1 : v34;
                }
              }
              else
              {
                v33 = 0;
                v34 = (v32 & 0x8000) != 0 ? *(_DWORD *)(a1 + 28) : v32 >> 5;
              }
              v36 = icu::UnicodeString::doIndexOf(a1 + 16, 0x27u, v33, v34 - v33);
              if (v36 < 0)
                break;
              v37 = *(unsigned __int16 *)(a1 + 24);
              if (*(__int16 *)(a1 + 24) < 0)
                v38 = *(_DWORD *)(a1 + 28);
              else
                v38 = v37 >> 5;
              v7 = (v36 + 1);
              if (v38 > v7)
              {
                v39 = a1 + 26;
                if ((v37 & 2) == 0)
                  v39 = *(_QWORD *)(a1 + 40);
                LODWORD(v22) = v36 + 1;
                if (*(_WORD *)(v39 + 2 * v7) == 39)
                  continue;
              }
              icu::MessagePattern::addPart(a1, 2, v36, 1, 0, a7);
              v22 = v7;
              goto LABEL_87;
            }
            if (*(__int16 *)(a1 + 24) < 0)
              v22 = *(unsigned int *)(a1 + 28);
            else
              v22 = *(unsigned __int16 *)(a1 + 24) >> 5;
          }
LABEL_86:
          icu::MessagePattern::addPart(a1, 3, v22, 0, 39, a7);
          *(_BYTE *)(a1 + 126) = 1;
          goto LABEL_87;
        }
        v27 = a1 + 26;
        if ((v20 & 2) == 0)
          v27 = *(_QWORD *)(a1 + 40);
        v28 = *(unsigned __int16 *)(v27 + 2 * v22);
        if (v28 != 39)
          goto LABEL_51;
        icu::MessagePattern::addPart(a1, 2, v7 + 1, 1, 0, a7);
        v22 = (v7 + 2);
      }
      else
      {
        v26 = !v19;
        if (v24 != 35)
          v26 = 1;
        if ((v26 & 1) != 0)
        {
          if (v24 == 123)
          {
            v22 = icu::MessagePattern::parseArg((icu::MessagePattern *)a1, v7, 1, a4, a6, (UErrorCode *)a7);
          }
          else
          {
            v30 = a5 == 2 && v24 == 124;
            v31 = v24 != 125 || a4 <= 0;
            if (!v31 || v30)
            {
              if (a5 == 2)
                v43 = v7;
              else
                v43 = v22;
              *(_DWORD *)(**(_QWORD **)(a1 + 80) + 16 * v45 + 12) = *(_DWORD *)(a1 + 96);
              v44 = v24 != 125 || a5 != 2;
              icu::MessagePattern::addPart(a1, 1, v7, v44, a4, a7);
              return v43;
            }
          }
        }
        else
        {
          icu::MessagePattern::addPart(a1, 4, v7, 1, 0, a7);
        }
      }
    }
LABEL_87:
    v7 = v22;
    if (*a7 >= 1)
      return 0;
  }
  v21 = *(_DWORD *)(a1 + 28);
  if ((int)v7 < v21)
    goto LABEL_18;
LABEL_89:
  if (a4 <= 0)
  {
    v42 = **(_DWORD ***)(a1 + 80);
  }
  else if (a4 != 1 || a5 != 2 || (v42 = **(_DWORD ***)(a1 + 80), !*v42))
  {
    icu::MessagePattern::setParseError((char *)a1, a6, 0);
    v7 = 0;
    v10 = 65801;
    goto LABEL_5;
  }
  v42[4 * v45 + 3] = *(_DWORD *)(a1 + 96);
  icu::MessagePattern::addPart(a1, 1, v7, 0, a4, a7);
  return v7;
}

_QWORD *icu::MessagePattern::postParse(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)this[10];
  if (v1)
    this[11] = *v1;
  v2 = (_QWORD *)this[13];
  if (v2)
    this[14] = *v2;
  return this;
}

icu::MessagePattern *icu::MessagePattern::parseChoiceStyle(icu::MessagePattern *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  _QWORD *v7;
  _QWORD *v8;

  if (*(int *)a4 <= 0)
  {
    if (a3)
    {
      *(_QWORD *)&a3->line = 0;
      a3->preContext[0] = 0;
      a3->postContext[0] = 0;
    }
    icu::UnicodeString::operator=((UChar **)this + 2, a2);
    *((_DWORD *)this + 24) = 0;
    *((_DWORD *)this + 30) = 0;
    *(_DWORD *)((char *)this + 123) = 0;
  }
  icu::MessagePattern::parseChoiceStyle(this, 0, 0, a3, a4);
  v7 = (_QWORD *)*((_QWORD *)this + 10);
  if (v7)
    *((_QWORD *)this + 11) = *v7;
  v8 = (_QWORD *)*((_QWORD *)this + 13);
  if (v8)
    *((_QWORD *)this + 14) = *v8;
  return this;
}

uint64_t icu::MessagePattern::parseChoiceStyle(icu::MessagePattern *this, int a2, int a3, UParseError *a4, UErrorCode *a5)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  icu::MessagePattern *v15;
  char *v16;
  UParseError *v17;
  int32_t v18;
  int v19;
  UErrorCode v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;

  if (*(int *)a5 > 0)
    return 0;
  v11 = icu::MessagePattern::skipWhiteSpace(this, a2);
  v12 = v11;
  v13 = *((unsigned __int16 *)this + 12);
  if ((v13 & 0x8000) != 0)
  {
    v14 = *((_DWORD *)this + 7);
    if ((_DWORD)v11 != v14)
      goto LABEL_7;
LABEL_12:
    v16 = (char *)this;
    v17 = a4;
    v18 = 0;
    goto LABEL_15;
  }
  if ((_DWORD)v11 == v13 >> 5)
    goto LABEL_12;
  v14 = v13 >> 5;
LABEL_7:
  if (v14 > v11)
  {
    v15 = (v13 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
    if (*((_WORD *)v15 + (int)v11) == 125)
      goto LABEL_12;
  }
  v19 = icu::MessagePattern::skipDouble(this, v11);
  if (v19 == (_DWORD)v12)
    goto LABEL_14;
  v21 = v19;
  while (1)
  {
    if (v21 - (int)v12 >= 0x10000)
    {
      icu::MessagePattern::setParseError((char *)this, a4, v12);
      v20 = U_INDEX_OUTOFBOUNDS_ERROR;
      goto LABEL_16;
    }
    icu::MessagePattern::parseDouble((char *)this, v12, v21, 1, a4, a5);
    if (*(int *)a5 > 0)
      return 0;
    v22 = icu::MessagePattern::skipWhiteSpace(this, v21);
    v23 = v22;
    v24 = *((unsigned __int16 *)this + 12);
    if ((v24 & 0x8000) != 0)
    {
      v25 = *((_DWORD *)this + 7);
      if (v22 == v25)
        goto LABEL_14;
    }
    else
    {
      if (v22 == v24 >> 5)
        goto LABEL_14;
      v25 = v24 >> 5;
    }
    if (v25 <= v22)
      goto LABEL_14;
    v26 = (char *)this + 26;
    if ((v24 & 2) == 0)
      v26 = (char *)*((_QWORD *)this + 5);
    v27 = *(unsigned __int16 *)&v26[2 * v22];
    if (v27 != 35 && v27 != 60 && v27 != 8804)
      goto LABEL_14;
    icu::MessagePattern::addPart((uint64_t)this, 11, v22, 1, 0, (int *)a5);
    result = icu::MessagePattern::parseMessage(this, (v23 + 1), 0, (a3 + 1), 2, a4, a5);
    if (*(int *)a5 > 0)
      return 0;
    v28 = *((unsigned __int16 *)this + 12);
    if (*((__int16 *)this + 12) < 0)
    {
      v29 = *((_DWORD *)this + 7);
      if ((_DWORD)result == v29)
        return result;
    }
    else
    {
      if ((_DWORD)result == v28 >> 5)
        return result;
      v29 = v28 >> 5;
    }
    if (v29 > result)
    {
      v30 = (char *)this + 26;
      if ((v28 & 2) == 0)
        v30 = (char *)*((_QWORD *)this + 5);
      if (*(_WORD *)&v30[2 * (int)result] == 125)
        break;
    }
    v12 = icu::MessagePattern::skipWhiteSpace(this, (int)result + 1);
    v21 = icu::MessagePattern::skipDouble(this, v12);
    if (v21 == (_DWORD)v12)
      goto LABEL_14;
  }
  if (a3 <= 0 && ***((_DWORD ***)this + 10))
  {
LABEL_14:
    v16 = (char *)this;
    v17 = a4;
    v18 = a2;
LABEL_15:
    icu::MessagePattern::setParseError(v16, v17, v18);
    v20 = U_PATTERN_SYNTAX_ERROR;
LABEL_16:
    result = 0;
    *a5 = v20;
  }
  return result;
}

icu::MessagePattern *icu::MessagePattern::parsePluralStyle(icu::MessagePattern *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  _QWORD *v7;
  _QWORD *v8;

  if (*(int *)a4 <= 0)
  {
    if (a3)
    {
      *(_QWORD *)&a3->line = 0;
      a3->preContext[0] = 0;
      a3->postContext[0] = 0;
    }
    icu::UnicodeString::operator=((UChar **)this + 2, a2);
    *((_DWORD *)this + 24) = 0;
    *((_DWORD *)this + 30) = 0;
    *(_DWORD *)((char *)this + 123) = 0;
  }
  icu::MessagePattern::parsePluralOrSelectStyle(this, 3, 0, 0, a3, (int *)a4);
  v7 = (_QWORD *)*((_QWORD *)this + 10);
  if (v7)
    *((_QWORD *)this + 11) = *v7;
  v8 = (_QWORD *)*((_QWORD *)this + 13);
  if (v8)
    *((_QWORD *)this + 14) = *v8;
  return this;
}

unint64_t icu::MessagePattern::parsePluralOrSelectStyle(icu::MessagePattern *this, uint64_t a2, int32_t a3, int a4, UParseError *a5, int *a6)
{
  unint64_t v6;
  char v11;
  char *v12;
  _BOOL4 v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  int v26;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v40;
  int v41;
  int32_t v42;
  char *v43;

  if (*a6 > 0)
    return 0;
  v11 = 0;
  v12 = (char *)this + 16;
  v43 = (char *)this + 26;
  v14 = (_DWORD)a2 == 3 || (_DWORD)a2 == 5;
  v40 = a4 + 1;
  v41 = 0;
  v42 = a3;
  v15 = a3;
  while (1)
  {
    v16 = icu::MessagePattern::skipWhiteSpace(this, v15);
    v6 = v16;
    v17 = *((unsigned __int16 *)this + 12);
    v18 = v17 >> 5;
    if ((v17 & 0x8000) != 0)
    {
      v19 = *((_DWORD *)this + 7);
      if ((_DWORD)v16 == v19)
      {
LABEL_59:
        v36 = 1;
        goto LABEL_62;
      }
    }
    else
    {
      v19 = v17 >> 5;
      if ((_DWORD)v16 == v17 >> 5)
        goto LABEL_59;
    }
    if (v19 > v16)
    {
      v20 = v43;
      if ((v17 & 2) == 0)
        v20 = (char *)*((_QWORD *)this + 5);
      if (*(_WORD *)&v20[2 * (int)v16] == 125)
        break;
    }
    if ((_DWORD)a2 != 5 && (_DWORD)a2 != 3)
      goto LABEL_26;
    if ((v17 & 0x8000) != 0)
      v18 = *((_DWORD *)this + 7);
    if (v18 <= v16)
      goto LABEL_26;
    v21 = v43;
    if ((v17 & 2) == 0)
      v21 = (char *)*((_QWORD *)this + 5);
    if (*(_WORD *)&v21[2 * (int)v16] == 61)
    {
      v34 = icu::MessagePattern::skipDouble(this, (v16 + 1));
      v35 = v34 - v6;
      if (v34 - (_DWORD)v6 == 1)
        goto LABEL_69;
      if (v35 >= 0x10000)
      {
LABEL_60:
        v37 = 8;
        icu::MessagePattern::setParseError((char *)this, a5, v6);
        goto LABEL_71;
      }
      v24 = v34;
      icu::MessagePattern::addPart((uint64_t)this, 11, v6, v35, 0, a6);
      icu::MessagePattern::parseDouble((char *)this, (v6 + 1), v24, 0, a5, (UErrorCode *)a6);
LABEL_45:
      if (*a6 > 0)
        return 0;
      v30 = icu::MessagePattern::skipWhiteSpace(this, v24);
      v31 = *((unsigned __int16 *)this + 12);
      if ((v31 & 0x8000) != 0)
      {
        v32 = *((_DWORD *)this + 7);
        if ((_DWORD)v30 == v32)
          goto LABEL_68;
      }
      else
      {
        if ((_DWORD)v30 == v31 >> 5)
          goto LABEL_68;
        v32 = v31 >> 5;
      }
      if (v32 <= v30)
        goto LABEL_68;
      v33 = v43;
      if ((v31 & 2) == 0)
        v33 = (char *)*((_QWORD *)this + 5);
      if (*(_WORD *)&v33[2 * (int)v30] != 123)
      {
LABEL_68:
        v42 = v6;
LABEL_69:
        v37 = 65799;
LABEL_70:
        icu::MessagePattern::setParseError((char *)this, a5, v42);
        goto LABEL_71;
      }
      v11 = 1;
      v15 = icu::MessagePattern::parseMessage(this, v30, 1, v40, a2, a5, a6);
      v6 = 0;
      if (*a6 >= 1)
        return v6;
    }
    else
    {
LABEL_26:
      v22 = icu::MessagePattern::skipIdentifier(this, v16);
      v23 = v22 - v6;
      if (v22 == (_DWORD)v6)
        goto LABEL_69;
      v24 = v22;
      if (v23 != 6 || !v14)
      {
        if (v23 >= 0x10000)
          goto LABEL_60;
LABEL_42:
        icu::MessagePattern::addPart((uint64_t)this, 11, v6, v23, 0, a6);
        v28 = icu::UnicodeString::doCompare((uint64_t)v12, v6, v23, (uint64_t)&aOffsetOther[7], 0, 5);
        v29 = v41;
        if (!v28)
          v29 = 1;
        v41 = v29;
        goto LABEL_45;
      }
      if (*((__int16 *)this + 12) < 0)
        v26 = *((_DWORD *)this + 7);
      else
        v26 = *((unsigned __int16 *)this + 12) >> 5;
      if (v22 >= v26 || icu::UnicodeString::doCompare((uint64_t)v12, v6, 7, (uint64_t)aOffsetOther, 0, 7))
        goto LABEL_42;
      if ((v11 & 1) != 0)
        goto LABEL_69;
      v6 = icu::MessagePattern::skipWhiteSpace(this, v24 + 1);
      v27 = icu::MessagePattern::skipDouble(this, v6);
      if (v27 == (_DWORD)v6)
        goto LABEL_69;
      if (v27 - (int)v6 >= 0x10000)
        goto LABEL_60;
      v15 = v27;
      icu::MessagePattern::parseDouble((char *)this, v6, v27, 0, a5, (UErrorCode *)a6);
      v11 = 1;
      if (*a6 >= 1)
        return 0;
    }
  }
  v36 = 0;
LABEL_62:
  v37 = 65799;
  if (a4 < 1)
  {
    if (v36 == (***((_DWORD ***)this + 10) == 0))
      goto LABEL_70;
  }
  else if ((v36 & 1) != 0)
  {
    goto LABEL_70;
  }
  if ((_BYTE)v41)
    return v6;
  v37 = 65807;
  icu::MessagePattern::setParseError((char *)this, a5, 0);
LABEL_71:
  v6 = 0;
  *a6 = v37;
  return v6;
}

icu::MessagePattern *icu::MessagePattern::parseSelectStyle(icu::MessagePattern *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  _QWORD *v7;
  _QWORD *v8;

  if (*(int *)a4 <= 0)
  {
    if (a3)
    {
      *(_QWORD *)&a3->line = 0;
      a3->preContext[0] = 0;
      a3->postContext[0] = 0;
    }
    icu::UnicodeString::operator=((UChar **)this + 2, a2);
    *((_DWORD *)this + 24) = 0;
    *((_DWORD *)this + 30) = 0;
    *(_DWORD *)((char *)this + 123) = 0;
  }
  icu::MessagePattern::parsePluralOrSelectStyle(this, 4, 0, 0, a3, (int *)a4);
  v7 = (_QWORD *)*((_QWORD *)this + 10);
  if (v7)
    *((_QWORD *)this + 11) = *v7;
  v8 = (_QWORD *)*((_QWORD *)this + 13);
  if (v8)
    *((_QWORD *)this + 14) = *v8;
  return this;
}

BOOL icu::MessagePattern::operator==(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  _BOOL8 result;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;

  if (a1 == a2)
    return 1;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
    return 0;
  v4 = *(unsigned __int16 *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 24) & 1) == 0)
      return 0;
  }
  else
  {
    if ((v4 & 0x8000) != 0)
      v5 = *(_DWORD *)(a1 + 28);
    else
      v5 = v4 >> 5;
    result = 0;
    v7 = *(unsigned __int16 *)(a2 + 24);
    if ((v7 & 0x8000u) == 0)
      v8 = v7 >> 5;
    else
      v8 = *(_DWORD *)(a2 + 28);
    if ((v7 & 1) != 0)
      return result;
    if (v5 != v8)
      return result;
    result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 16), (const icu::UnicodeString *)(a2 + 16), v5);
    if (!result)
      return result;
  }
  v9 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v9 != *(_DWORD *)(a2 + 96))
    return 0;
  if ((int)v9 < 1)
    return 1;
  v10 = **(_QWORD **)(a1 + 80);
  v11 = **(_QWORD **)(a2 + 80);
  result = icu::MessagePattern::Part::operator==(v10, v11);
  if (result)
  {
    v12 = v10 + 16;
    v13 = v11 + 16;
    v14 = 1;
    do
    {
      v15 = v14;
      if (v9 == v14)
        break;
      v16 = icu::MessagePattern::Part::operator==(v12, v13);
      v14 = v15 + 1;
      v12 += 16;
      v13 += 16;
    }
    while (v16);
    return v15 >= v9;
  }
  return result;
}

uint64_t icu::MessagePattern::hashCode(icu::MessagePattern *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  unsigned __int16 *v6;

  v2 = *((_DWORD *)this + 2);
  v3 = icu::UnicodeString::doHashCode((icu::MessagePattern *)((char *)this + 16));
  v4 = *((unsigned int *)this + 24);
  result = (v4 + 37 * (v3 + 37 * v2));
  if ((int)v4 >= 1)
  {
    v6 = (unsigned __int16 *)(*((_QWORD *)this + 11) + 8);
    do
    {
      result = (__int16)v6[1]
             + 37 * (result + *v6 + 37 * (*((_DWORD *)v6 - 1) + 37 * *((_DWORD *)v6 - 2)));
      v6 += 8;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t icu::MessagePattern::validateArgumentName(icu::MessagePattern *this, const icu::UnicodeString *a2)
{
  unsigned int v3;
  unsigned __int16 *v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;

  v3 = *((unsigned __int16 *)this + 4);
  if ((v3 & 0x11) != 0)
  {
    v4 = 0;
  }
  else if ((v3 & 2) != 0)
  {
    v4 = (unsigned __int16 *)((char *)this + 10);
  }
  else
  {
    v4 = (unsigned __int16 *)*((_QWORD *)this + 3);
  }
  v5 = (__int16)v3;
  v6 = v3 >> 5;
  if (v5 >= 0)
    v7 = v6;
  else
    v7 = *((_DWORD *)this + 3);
  if (!icu::PatternProps::isIdentifier(v4, v7))
    return 4294967294;
  v8 = *((unsigned __int16 *)this + 4);
  v9 = (__int16)v8;
  v10 = v8 >> 5;
  if (v9 >= 0)
    v11 = v10;
  else
    v11 = *((_DWORD *)this + 3);
  return icu::MessagePattern::parseArgNumber((uint64_t)this, 0, v11);
}

uint64_t icu::MessagePattern::parseArgNumber(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  char v9;
  unsigned __int16 *v10;
  int v11;

  if ((int)a2 >= a3)
    return 4294967294;
  v3 = *(unsigned __int16 *)(a1 + 8);
  if ((v3 & 0x8000u) == 0)
    v4 = v3 >> 5;
  else
    v4 = *(_DWORD *)(a1 + 12);
  if (v4 <= a2)
    return 0xFFFFFFFFLL;
  v5 = a2 + 1;
  v6 = a1 + 10;
  if ((v3 & 2) == 0)
    v6 = *(_QWORD *)(a1 + 24);
  v7 = *(unsigned __int16 *)(v6 + 2 * (int)a2);
  result = (v7 - 48);
  if (v7 == 48)
  {
    if (v5 == a3)
      return result;
    v9 = 1;
    goto LABEL_15;
  }
  if ((v7 - 49) > 8)
    return 0xFFFFFFFFLL;
  v9 = 0;
LABEL_15:
  if ((int)v5 < a3)
  {
    v10 = (unsigned __int16 *)(v6 + 2 * (int)v5);
    while (v4 > v5)
    {
      v11 = *v10;
      if ((v11 - 48) > 9)
        break;
      if ((int)result > 214748363)
        v9 = 1;
      LODWORD(result) = v11 + 10 * result - 48;
      ++v5;
      ++v10;
      if (a3 == v5)
        goto LABEL_22;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_22:
  if (v9)
    return 4294967294;
  else
    return result;
}

icu::UnicodeString *icu::MessagePattern::autoQuoteApostropheDeep@<X0>(UChar **this@<X0>, icu::UnicodeString *a2@<X8>)
{
  icu::UnicodeString *result;
  uint64_t v5;
  unint64_t v6;
  UChar *v7;
  UChar *v8;
  uint64_t v9;
  UChar v10;

  if (!*((_BYTE *)this + 126))
    return icu::UnicodeString::UnicodeString(a2, this + 2);
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  result = icu::UnicodeString::UnicodeString(a2, this + 2);
  v5 = *((unsigned int *)this + 24);
  if ((int)v5 >= 1)
  {
    v6 = v5 + 1;
    do
    {
      v7 = this[11];
      if (*(_DWORD *)&v7[8 * (v6 - 2)] == 3)
      {
        v8 = &v7[8 * (v6 - 2)];
        v9 = *((unsigned int *)v8 + 1);
        v10 = v8[5];
        result = (icu::UnicodeString *)icu::UnicodeString::doReplace((uint64_t)a2, v9, 0, (uint64_t)&v10, 0, 1);
      }
      --v6;
    }
    while (v6 > 1);
  }
  return result;
}

double icu::MessagePattern::getNumericValue(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 == 13)
    return *(double *)(*(_QWORD *)(a1 + 112) + 8 * *(__int16 *)(a2 + 10));
  if (*(_DWORD *)a2 == 12)
    return (double)*(__int16 *)(a2 + 10);
  return -123456789.0;
}

double icu::MessagePattern::getPluralOffset(icu::MessagePattern *this, int a2)
{
  uint64_t v2;
  int v3;
  double result;

  v2 = *((_QWORD *)this + 11);
  v3 = *(_DWORD *)(v2 + 16 * a2);
  result = 0.0;
  if ((v3 & 0xFFFFFFFE) == 0xC)
  {
    if (v3 == 13)
    {
      return *(double *)(*((_QWORD *)this + 14) + 8 * *(__int16 *)(v2 + 16 * a2 + 10));
    }
    else if (v3 == 12)
    {
      return (double)*(__int16 *)(v2 + 16 * a2 + 10);
    }
    else
    {
      return -123456789.0;
    }
  }
  return result;
}

BOOL icu::MessagePattern::Part::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && *(unsigned __int16 *)(a1 + 8) == *(unsigned __int16 *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10))
  {
    return *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  }
  return 0;
}

uint64_t icu::MessagePattern::addPart(uint64_t a1, int a2, int a3, __int16 a4, __int16 a5, int *a6)
{
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_18BBD5590(*(_QWORD *)(a1 + 80), *(_DWORD *)(a1 + 96), a6);
  if ((_DWORD)result)
  {
    v12 = *(_QWORD **)(a1 + 80);
    v13 = *(int *)(a1 + 96);
    *(_DWORD *)(a1 + 96) = v13 + 1;
    v14 = *v12 + 16 * v13;
    *(_DWORD *)v14 = a2;
    *(_DWORD *)(v14 + 4) = a3;
    *(_WORD *)(v14 + 8) = a4;
    *(_WORD *)(v14 + 10) = a5;
    *(_DWORD *)(v14 + 12) = 0;
  }
  return result;
}

uint64_t icu::MessagePattern::parseArg(icu::MessagePattern *this, int a2, int a3, int a4, UParseError *a5, UErrorCode *a6)
{
  uint64_t v12;
  uint64_t result;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  UErrorCode v18;
  int v19;
  unsigned int v20;
  __int16 v21;
  __int16 v22;
  icu::MessagePattern *v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  int v31;
  __int16 v32;
  signed int v33;
  int v34;
  unint64_t v35;
  char *v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int64_t v40;
  char *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  _BOOL4 isOrdinal;
  BOOL v49;
  __int16 v50;
  uint64_t v51;

  v12 = *((int *)this + 24);
  icu::MessagePattern::addPart((uint64_t)this, 5, a2, a3, 0, (int *)a6);
  result = 0;
  if (*(int *)a6 <= 0)
  {
    v14 = icu::MessagePattern::skipWhiteSpace(this, a3 + a2);
    v15 = v14;
    v16 = *((unsigned __int16 *)this + 12);
    if ((v16 & 0x8000) != 0)
      v17 = *((_DWORD *)this + 7);
    else
      v17 = v16 >> 5;
    if (v14 == v17)
      goto LABEL_6;
    v19 = icu::MessagePattern::skipIdentifier(this, v14);
    v20 = icu::MessagePattern::parseArgNumber((uint64_t)this + 16, v15, v19);
    v21 = v20;
    if ((v20 & 0x80000000) != 0)
    {
      if (v20 != -1)
        goto LABEL_69;
      v22 = v19 - v15;
      if ((int)(v19 - v15) >= 0x10000)
        goto LABEL_49;
      *((_BYTE *)this + 124) = 1;
      v23 = this;
      v24 = 8;
      v25 = v15;
      v21 = 0;
    }
    else
    {
      v22 = v19 - v15;
      if ((int)(v19 - v15) >= 0x10000 || v20 >> 15)
        goto LABEL_49;
      *((_BYTE *)this + 125) = 1;
      v23 = this;
      v24 = 7;
      v25 = v15;
    }
    icu::MessagePattern::addPart((uint64_t)v23, v24, v25, v22, v21, (int *)a6);
    v26 = icu::MessagePattern::skipWhiteSpace(this, v19);
    v27 = v26;
    v28 = *((unsigned __int16 *)this + 12);
    if ((v28 & 0x8000) != 0)
    {
      v29 = *((_DWORD *)this + 7);
      if (v26 != v29)
      {
LABEL_18:
        if (v29 <= v26)
          goto LABEL_69;
        if ((v28 & 2) != 0)
          v30 = (char *)this + 26;
        else
          v30 = (char *)*((_QWORD *)this + 5);
        v31 = *(unsigned __int16 *)&v30[2 * v26];
        if (v31 != 44)
        {
          if (v31 == 125)
          {
            v32 = 0;
LABEL_25:
            *(_DWORD *)(**((_QWORD **)this + 10) + 16 * v12 + 12) = *((_DWORD *)this + 24);
            icu::MessagePattern::addPart((uint64_t)this, 6, v27, 1, v32, (int *)a6);
            return (v27 + 1);
          }
          goto LABEL_69;
        }
        v33 = icu::MessagePattern::skipWhiteSpace(this, v26 + 1);
        v34 = 0;
        v35 = *((unsigned __int16 *)this + 12);
        v36 = (char *)this + 26;
        v37 = v33;
        v38 = v33;
        do
        {
          v39 = v34;
          if ((v35 & 0x8000) != 0)
          {
            v40 = *((int *)this + 7);
            if (v38 >= v40)
              break;
          }
          else
          {
            v40 = v35 >> 5;
            if (v38 >= (uint64_t)(v35 >> 5))
              break;
          }
          if (v40 <= v33 + v39)
            break;
          v41 = (char *)this + 26;
          if ((v35 & 2) == 0)
            v41 = (char *)*((_QWORD *)this + 5);
          v42 = (*(_WORD *)&v41[2 * v38++] & 0xFFDF) - 91;
          v34 = v39 + 1;
        }
        while (v42 > 0xFFFFFFE5);
        v43 = icu::MessagePattern::skipWhiteSpace(this, v33 + v39);
        v27 = v43;
        v44 = *((unsigned __int16 *)this + 12);
        if ((v44 & 0x8000) != 0)
          v45 = *((_DWORD *)this + 7);
        else
          v45 = v44 >> 5;
        if (v43 == v45)
          goto LABEL_6;
        if (!v39)
          goto LABEL_69;
        v46 = (v44 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v44 >> 5;
        if (v46 <= v43)
          goto LABEL_69;
        if ((v44 & 2) == 0)
          v36 = (char *)*((_QWORD *)this + 5);
        v47 = *(unsigned __int16 *)&v36[2 * v43];
        if (v47 != 44 && v47 != 125)
          goto LABEL_69;
        if (v39 >= 0x10000)
        {
LABEL_49:
          icu::MessagePattern::setParseError((char *)this, a5, v15);
          result = 0;
          v18 = U_INDEX_OUTOFBOUNDS_ERROR;
          goto LABEL_70;
        }
        if (v39 == 13)
        {
          if (icu::MessagePattern::isSelect(this, v37))
          {
            isOrdinal = icu::MessagePattern::isOrdinal(this, v37 + 6);
            v49 = !isOrdinal;
            v50 = 5;
            v51 = 5;
LABEL_57:
            if (v49)
              v50 = 1;
            *(_WORD *)(**((_QWORD **)this + 10) + 16 * v12 + 10) = v50;
            if (isOrdinal)
            {
LABEL_68:
              if (v47 != 125)
              {
                v32 = v51;
                v27 = icu::MessagePattern::parsePluralOrSelectStyle(this, v51, v27 + 1, a4, a5, (int *)a6);
                goto LABEL_25;
              }
              goto LABEL_69;
            }
LABEL_63:
            icu::MessagePattern::addPart((uint64_t)this, 9, v37, v39, 0, (int *)a6);
            if (v47 != 125)
              v27 = icu::MessagePattern::parseSimpleStyle(this, (v27 + 1), a5, a6);
            v32 = 1;
            goto LABEL_25;
          }
        }
        else if (v39 == 6)
        {
          if (icu::MessagePattern::isChoice(this, v37))
          {
            *(_WORD *)(**((_QWORD **)this + 10) + 16 * v12 + 10) = 2;
            if (v47 != 125)
            {
              v27 = icu::MessagePattern::parseChoiceStyle(this, v27 + 1, a4, a5, a6);
              v32 = 2;
              goto LABEL_25;
            }
LABEL_69:
            icu::MessagePattern::setParseError((char *)this, a5, v15);
            result = 0;
            v18 = U_PATTERN_SYNTAX_ERROR;
            goto LABEL_70;
          }
          if (icu::MessagePattern::isPlural(this, v37))
          {
            v51 = 3;
            *(_WORD *)(**((_QWORD **)this + 10) + 16 * v12 + 10) = 3;
            goto LABEL_68;
          }
          isOrdinal = icu::MessagePattern::isSelect(this, v37);
          v49 = !isOrdinal;
          v50 = 4;
          v51 = 4;
          goto LABEL_57;
        }
        *(_WORD *)(**((_QWORD **)this + 10) + 16 * v12 + 10) = 1;
        goto LABEL_63;
      }
    }
    else if (v26 != v28 >> 5)
    {
      v29 = v28 >> 5;
      goto LABEL_18;
    }
LABEL_6:
    icu::MessagePattern::setParseError((char *)this, a5, 0);
    result = 0;
    v18 = U_UNMATCHED_BRACES;
LABEL_70:
    *a6 = v18;
  }
  return result;
}

uint64_t icu::MessagePattern::addLimitPart(uint64_t a1, int a2, int a3, int a4, __int16 a5, __int16 a6, int *a7)
{
  *(_DWORD *)(**(_QWORD **)(a1 + 80) + 16 * a2 + 12) = *(_DWORD *)(a1 + 96);
  return icu::MessagePattern::addPart(a1, a3, a4, a5, a6, a7);
}

BOOL icu::MessagePattern::inTopLevelChoiceMessage(uint64_t a1, int a2, int a3)
{
  _BOOL8 result;

  result = 0;
  if (a2 == 1 && a3 == 2)
    return ***(_DWORD ***)(a1 + 80) != 0;
  return result;
}

char *icu::MessagePattern::setParseError(char *this, UParseError *a2, int32_t a3)
{
  char *v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  char *v14;
  UChar *postContext;

  if (a2)
  {
    v5 = this;
    a2->offset = a3;
    v6 = a3;
    if (a3 >= 16)
    {
      v7 = a3 - 15;
      v8 = *((unsigned __int16 *)this + 12);
      if (*((__int16 *)this + 12) < 0)
        v9 = *((_DWORD *)this + 7);
      else
        v9 = v8 >> 5;
      if (v9 <= v7)
      {
        v6 = 15;
      }
      else
      {
        if ((v8 & 2) != 0)
          v10 = this + 26;
        else
          v10 = (char *)*((_QWORD *)this + 5);
        if ((*(_WORD *)&v10[2 * v7] & 0xFC00) == 0xDC00)
          v6 = 14;
        else
          v6 = 15;
      }
    }
    icu::UnicodeString::doExtract(this + 16, a3 - v6, v6, (uint64_t)a2->preContext, 0);
    a2->preContext[v6] = 0;
    v11 = *((unsigned __int16 *)v5 + 12);
    if (*((__int16 *)v5 + 12) < 0)
    {
      v12 = *((_DWORD *)v5 + 7);
      v13 = v12 - a3;
      if ((int)(v12 - a3) <= 15)
      {
LABEL_26:
        postContext = a2->postContext;
        this = icu::UnicodeString::doExtract(v5 + 16, a3, v13, (uint64_t)postContext, 0);
        postContext[v13] = 0;
        return this;
      }
    }
    else
    {
      v12 = v11 >> 5;
      v13 = (v11 >> 5) - a3;
      if (v13 < 16)
        goto LABEL_26;
    }
    if (v12 <= a3 + 14)
    {
      v13 = 15;
    }
    else
    {
      if ((v11 & 2) != 0)
        v14 = v5 + 26;
      else
        v14 = (char *)*((_QWORD *)v5 + 5);
      if ((*(_WORD *)&v14[2 * a3 + 28] & 0xFC00) == 0xD800)
        v13 = 14;
      else
        v13 = 15;
    }
    goto LABEL_26;
  }
  return this;
}

unint64_t icu::MessagePattern::skipWhiteSpace(icu::MessagePattern *this, int a2)
{
  unsigned int v2;
  char *v3;
  unsigned int v4;

  v2 = *((unsigned __int16 *)this + 12);
  if ((v2 & 0x11) == 0)
  {
    if ((v2 & 2) != 0)
    {
      v3 = (char *)this + 26;
      if ((v2 & 0x8000) == 0)
        goto LABEL_6;
    }
    else
    {
      v3 = (char *)*((_QWORD *)this + 5);
      if ((v2 & 0x8000) == 0)
        goto LABEL_6;
    }
LABEL_8:
    v4 = *((_DWORD *)this + 7);
    return (unint64_t)((char *)icu::PatternProps::skipWhiteSpace((unsigned __int16 *)&v3[2 * a2], v4 - a2) - v3) >> 1;
  }
  v3 = 0;
  if ((v2 & 0x8000) != 0)
    goto LABEL_8;
LABEL_6:
  v4 = v2 >> 5;
  return (unint64_t)((char *)icu::PatternProps::skipWhiteSpace((unsigned __int16 *)&v3[2 * a2], v4 - a2) - v3) >> 1;
}

unint64_t icu::MessagePattern::skipIdentifier(icu::MessagePattern *this, int a2)
{
  unsigned int v2;
  char *v3;
  unsigned int v4;

  v2 = *((unsigned __int16 *)this + 12);
  if ((v2 & 0x11) == 0)
  {
    if ((v2 & 2) != 0)
    {
      v3 = (char *)this + 26;
      if ((v2 & 0x8000) == 0)
        goto LABEL_6;
    }
    else
    {
      v3 = (char *)*((_QWORD *)this + 5);
      if ((v2 & 0x8000) == 0)
        goto LABEL_6;
    }
LABEL_8:
    v4 = *((_DWORD *)this + 7);
    return (unint64_t)((char *)icu::PatternProps::skipIdentifier((unsigned __int16 *)&v3[2 * a2], v4 - a2) - v3) >> 1;
  }
  v3 = 0;
  if ((v2 & 0x8000) != 0)
    goto LABEL_8;
LABEL_6:
  v4 = v2 >> 5;
  return (unint64_t)((char *)icu::PatternProps::skipIdentifier((unsigned __int16 *)&v3[2 * a2], v4 - a2) - v3) >> 1;
}

BOOL icu::MessagePattern::isArgTypeChar(icu::MessagePattern *this)
{
  return (this & 0xFFFFFFDF) - 65 < 0x1A;
}

BOOL icu::MessagePattern::isChoice(icu::MessagePattern *this, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  icu::MessagePattern *v4;
  uint64_t v5;
  unsigned int v6;
  icu::MessagePattern *v7;
  uint64_t v8;
  unsigned int v9;
  icu::MessagePattern *v10;
  uint64_t v11;
  unsigned int v12;
  icu::MessagePattern *v13;
  uint64_t v14;
  unsigned int v15;
  icu::MessagePattern *v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;

  v2 = *((unsigned __int16 *)this + 12);
  if (*((__int16 *)this + 12) < 0)
    v3 = *((_DWORD *)this + 7);
  else
    v3 = v2 >> 5;
  if (v3 <= a2)
    return 0;
  v4 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v4 + (int)a2) & 0xFFDF) != 0x43)
    return 0;
  v5 = (int)a2 + 1;
  v6 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v6 <= v5)
    return 0;
  v7 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v7 + v5) & 0xFFDF) != 0x48)
    return 0;
  v8 = (int)a2 + 2;
  v9 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v9 <= v8)
    return 0;
  v10 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v10 + v8) & 0xFFDF) != 0x4F)
    return 0;
  v11 = (int)a2 + 3;
  v12 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v12 <= v11)
    return 0;
  v13 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v13 + v11) & 0xFFDF) != 0x49)
    return 0;
  v14 = (int)a2 + 4;
  v15 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v15 <= v14)
    return 0;
  v16 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v16 + v14) & 0xFFDF) != 0x43)
    return 0;
  v17 = (int)a2 + 5;
  v18 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v18 <= v17)
    return 0;
  if ((v2 & 2) != 0)
    v19 = (char *)this + 26;
  else
    v19 = (char *)*((_QWORD *)this + 5);
  return (*(_WORD *)&v19[2 * v17] & 0xFFDF) == 69;
}

BOOL icu::MessagePattern::isPlural(icu::MessagePattern *this, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  icu::MessagePattern *v4;
  uint64_t v5;
  unsigned int v6;
  icu::MessagePattern *v7;
  uint64_t v8;
  unsigned int v9;
  icu::MessagePattern *v10;
  uint64_t v11;
  unsigned int v12;
  icu::MessagePattern *v13;
  uint64_t v14;
  unsigned int v15;
  icu::MessagePattern *v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;

  v2 = *((unsigned __int16 *)this + 12);
  if (*((__int16 *)this + 12) < 0)
    v3 = *((_DWORD *)this + 7);
  else
    v3 = v2 >> 5;
  if (v3 <= a2)
    return 0;
  v4 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v4 + (int)a2) & 0xFFDF) != 0x50)
    return 0;
  v5 = (int)a2 + 1;
  v6 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v6 <= v5)
    return 0;
  v7 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v7 + v5) & 0xFFDF) != 0x4C)
    return 0;
  v8 = (int)a2 + 2;
  v9 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v9 <= v8)
    return 0;
  v10 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v10 + v8) & 0xFFDF) != 0x55)
    return 0;
  v11 = (int)a2 + 3;
  v12 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v12 <= v11)
    return 0;
  v13 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v13 + v11) & 0xFFDF) != 0x52)
    return 0;
  v14 = (int)a2 + 4;
  v15 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v15 <= v14)
    return 0;
  v16 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v16 + v14) & 0xFFDF) != 0x41)
    return 0;
  v17 = (int)a2 + 5;
  v18 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v18 <= v17)
    return 0;
  if ((v2 & 2) != 0)
    v19 = (char *)this + 26;
  else
    v19 = (char *)*((_QWORD *)this + 5);
  return (*(_WORD *)&v19[2 * v17] & 0xFFDF) == 76;
}

BOOL icu::MessagePattern::isSelect(icu::MessagePattern *this, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  icu::MessagePattern *v4;
  uint64_t v5;
  unsigned int v6;
  icu::MessagePattern *v7;
  uint64_t v8;
  unsigned int v9;
  icu::MessagePattern *v10;
  uint64_t v11;
  unsigned int v12;
  icu::MessagePattern *v13;
  uint64_t v14;
  unsigned int v15;
  icu::MessagePattern *v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;

  v2 = *((unsigned __int16 *)this + 12);
  if (*((__int16 *)this + 12) < 0)
    v3 = *((_DWORD *)this + 7);
  else
    v3 = v2 >> 5;
  if (v3 <= a2)
    return 0;
  v4 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v4 + (int)a2) & 0xFFDF) != 0x53)
    return 0;
  v5 = (int)a2 + 1;
  v6 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v6 <= v5)
    return 0;
  v7 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v7 + v5) & 0xFFDF) != 0x45)
    return 0;
  v8 = (int)a2 + 2;
  v9 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v9 <= v8)
    return 0;
  v10 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v10 + v8) & 0xFFDF) != 0x4C)
    return 0;
  v11 = (int)a2 + 3;
  v12 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v12 <= v11)
    return 0;
  v13 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v13 + v11) & 0xFFDF) != 0x45)
    return 0;
  v14 = (int)a2 + 4;
  v15 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v15 <= v14)
    return 0;
  v16 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v16 + v14) & 0xFFDF) != 0x43)
    return 0;
  v17 = (int)a2 + 5;
  v18 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v18 <= v17)
    return 0;
  if ((v2 & 2) != 0)
    v19 = (char *)this + 26;
  else
    v19 = (char *)*((_QWORD *)this + 5);
  return (*(_WORD *)&v19[2 * v17] & 0xFFDF) == 84;
}

BOOL icu::MessagePattern::isOrdinal(icu::MessagePattern *this, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  icu::MessagePattern *v4;
  uint64_t v5;
  unsigned int v6;
  icu::MessagePattern *v7;
  uint64_t v8;
  unsigned int v9;
  icu::MessagePattern *v10;
  uint64_t v11;
  unsigned int v12;
  icu::MessagePattern *v13;
  uint64_t v14;
  unsigned int v15;
  icu::MessagePattern *v16;
  uint64_t v17;
  unsigned int v18;
  icu::MessagePattern *v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;

  v2 = *((unsigned __int16 *)this + 12);
  if (*((__int16 *)this + 12) < 0)
    v3 = *((_DWORD *)this + 7);
  else
    v3 = v2 >> 5;
  if (v3 <= a2)
    return 0;
  v4 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v4 + (int)a2) & 0xFFDF) != 0x4F)
    return 0;
  v5 = (int)a2 + 1;
  v6 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v6 <= v5)
    return 0;
  v7 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v7 + v5) & 0xFFDF) != 0x52)
    return 0;
  v8 = (int)a2 + 2;
  v9 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v9 <= v8)
    return 0;
  v10 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v10 + v8) & 0xFFDF) != 0x44)
    return 0;
  v11 = (int)a2 + 3;
  v12 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v12 <= v11)
    return 0;
  v13 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v13 + v11) & 0xFFDF) != 0x49)
    return 0;
  v14 = (int)a2 + 4;
  v15 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v15 <= v14)
    return 0;
  v16 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v16 + v14) & 0xFFDF) != 0x4E)
    return 0;
  v17 = (int)a2 + 5;
  v18 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v18 <= v17)
    return 0;
  v19 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((_QWORD *)this + 5);
  if ((*((_WORD *)v19 + v17) & 0xFFDF) != 0x41)
    return 0;
  v20 = (int)a2 + 6;
  v21 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if (v21 <= v20)
    return 0;
  if ((v2 & 2) != 0)
    v22 = (char *)this + 26;
  else
    v22 = (char *)*((_QWORD *)this + 5);
  return (*(_WORD *)&v22[2 * v20] & 0xFFDF) == 76;
}

uint64_t icu::MessagePattern::parseSimpleStyle(icu::MessagePattern *this, uint64_t a2, UParseError *a3, UErrorCode *a4)
{
  uint64_t v4;
  int32_t v7;
  int v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  UErrorCode v21;

  if (*(int *)a4 > 0)
    return 0;
  v7 = a2;
  v9 = 0;
  v10 = (char *)this + 16;
  v11 = (char *)this + 26;
  v12 = a2;
  do
  {
    while (1)
    {
      while (1)
      {
        do
        {
          v4 = v12;
          v13 = *((unsigned __int16 *)this + 12);
          if (*((__int16 *)this + 12) < 0)
          {
            v14 = *((_DWORD *)this + 7);
            if ((int)v12 >= v14)
            {
LABEL_31:
              icu::MessagePattern::setParseError((char *)this, a3, 0);
              v4 = 0;
              v21 = U_UNMATCHED_BRACES;
LABEL_32:
              *a4 = v21;
              return v4;
            }
          }
          else
          {
            if ((int)v12 >= (int)(v13 >> 5))
              goto LABEL_31;
            v14 = v13 >> 5;
          }
          v12 = (v12 + 1);
        }
        while (v14 <= v4);
        v15 = v11;
        if ((v13 & 2) == 0)
          v15 = (char *)*((_QWORD *)this + 5);
        v16 = *(unsigned __int16 *)&v15[2 * (int)v4];
        if (v16 != 39)
          break;
        if ((int)v4 >= -1)
        {
          if ((v13 & 0x8000) != 0)
          {
            v19 = *((_DWORD *)this + 7);
            if (v19 >= (int)v12)
              v18 = v12;
            else
              v18 = *((_DWORD *)this + 7);
          }
          else
          {
            v19 = v13 >> 5;
            if (v19 >= v12)
              v18 = v12;
            else
              v18 = v19;
          }
        }
        else
        {
          v18 = 0;
          if ((v13 & 0x8000) != 0)
            v19 = *((_DWORD *)this + 7);
          else
            v19 = v13 >> 5;
        }
        v20 = icu::UnicodeString::doIndexOf((uint64_t)v10, 0x27u, v18, v19 - v18);
        if (v20 < 0)
        {
          icu::MessagePattern::setParseError((char *)this, a3, v7);
          v4 = 0;
          v21 = U_PATTERN_SYNTAX_ERROR;
          goto LABEL_32;
        }
        v12 = (v20 + 1);
      }
      if (v16 != 123)
        break;
      v17 = 1;
LABEL_30:
      v9 += v17;
    }
  }
  while (v16 != 125);
  if (v9 > 0)
  {
    v17 = -1;
    goto LABEL_30;
  }
  if ((int)v4 - v7 >= 0x10000)
  {
    icu::MessagePattern::setParseError((char *)this, a3, v7);
    v4 = 0;
    v21 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_32;
  }
  icu::MessagePattern::addPart((uint64_t)this, 10, v7, v4 - v7, 0, (int *)a4);
  return v4;
}

uint64_t icu::MessagePattern::skipDouble(icu::MessagePattern *this, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v11;

  v2 = *((unsigned __int16 *)this + 12);
  if (*((__int16 *)this + 12) < 0)
    v3 = *((unsigned int *)this + 7);
  else
    v3 = v2 >> 5;
  if ((int)v3 > (int)a2)
  {
    v4 = 2 * (int)a2;
    a2 = (int)a2;
    while (1)
    {
      v5 = v2 >> 5;
      if ((v2 & 0x8000) != 0)
        v5 = *((_DWORD *)this + 7);
      if (v5 <= a2)
        break;
      v6 = (char *)this + 26;
      if ((v2 & 2) == 0)
        v6 = (char *)*((_QWORD *)this + 5);
      v7 = *(_WORD *)&v6[v4];
      v8 = v7;
      if (v7 > 0x2Fu)
      {
        if (v7 >= 0x3Au)
        {
          v11 = v7 == 69 || v7 == 8734;
          if (!v11 && v7 != 101)
            return a2;
        }
      }
      else
      {
        v9 = (1 << v7) & 0x680000000000;
        if (v8 > 0x2E || v9 == 0)
          return a2;
      }
      ++a2;
      v4 += 2;
      if ((_DWORD)v3 == (_DWORD)a2)
        return v3;
    }
  }
  return a2;
}

char *icu::MessagePattern::parseDouble(char *this, unint64_t a2, int a3, int a4, UParseError *a5, UErrorCode *a6)
{
  __int16 v8;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  char *v20;
  double Infinity;
  int v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  uint64_t v26;
  double v27;
  int v28;
  char *v29;
  char __s[16];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*(int *)a6 > 0)
    return this;
  v8 = a3;
  v10 = this;
  v11 = *((unsigned __int16 *)this + 12);
  if (*((__int16 *)this + 12) < 0)
    v12 = *((_DWORD *)this + 7);
  else
    v12 = v11 >> 5;
  if (v12 <= a2)
    goto LABEL_47;
  v13 = (int)a2 + 1;
  if ((v11 & 2) != 0)
    v14 = this + 26;
  else
    v14 = (char *)*((_QWORD *)this + 5);
  v15 = *(unsigned __int16 *)&v14[2 * (int)a2];
  if (v15 == 43)
  {
    if ((_DWORD)v13 != a3)
    {
      if ((v11 & 0x8000) != 0)
        v17 = *((_DWORD *)this + 7);
      else
        v17 = v11 >> 5;
      if (v17 <= v13)
        goto LABEL_47;
      v18 = 0;
      if ((v11 & 2) != 0)
        v20 = this + 26;
      else
        v20 = (char *)*((_QWORD *)this + 5);
      v19 = 0x7FFF;
      goto LABEL_30;
    }
LABEL_50:
    this = icu::MessagePattern::setParseError(v10, a5, a2);
    *a6 = U_PATTERN_SYNTAX_ERROR;
    return this;
  }
  if (v15 != 45)
  {
    v18 = 0;
    v19 = 0x7FFF;
    goto LABEL_31;
  }
  if ((_DWORD)v13 == a3)
    goto LABEL_50;
  if ((v11 & 0x8000) != 0)
    v16 = *((_DWORD *)this + 7);
  else
    v16 = v11 >> 5;
  if (v16 <= v13)
    goto LABEL_47;
  if ((v11 & 2) != 0)
    v20 = this + 26;
  else
    v20 = (char *)*((_QWORD *)this + 5);
  v19 = 0x8000;
  v18 = 1;
LABEL_30:
  v15 = *(unsigned __int16 *)&v20[2 * v13];
  LODWORD(v13) = a2 + 2;
LABEL_31:
  if (v15 != 8734)
  {
    if ((v15 - 48) <= 9)
    {
      v22 = 0;
      v23 = (int)v13;
      while (1)
      {
        v22 = v15 + 10 * v22 - 48;
        if (v22 > v19)
          break;
        if (a3 == v23)
        {
          if (v18)
            v28 = -v22;
          else
            LOWORD(v28) = v22;
          return (char *)icu::MessagePattern::addPart((uint64_t)this, 12, a2, (unsigned __int16)a3 - (unsigned __int16)a2, v28, (int *)a6);
        }
        v24 = v11 >> 5;
        if ((v11 & 0x8000) != 0)
          v24 = *((_DWORD *)this + 7);
        if (v24 > v13)
        {
          v25 = this + 26;
          if ((v11 & 2) == 0)
            v25 = (char *)*((_QWORD *)this + 5);
          v15 = *(unsigned __int16 *)&v25[2 * v23];
          LODWORD(v13) = v13 + 1;
          ++v23;
          if ((v15 - 48) < 0xA)
            continue;
        }
        break;
      }
    }
LABEL_47:
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v26 = a3 - (uint64_t)(int)a2;
    *(_OWORD *)__s = 0u;
    v31 = 0u;
    if ((int)v26 <= 127)
    {
      icu::UnicodeString::extract((uint64_t)(this + 16), a2, a3 - (uint64_t)(int)a2, __s, 128);
      if ((int)v26 <= (int)strlen(__s))
      {
        v29 = 0;
        v27 = strtod(__s, &v29);
        if (v29 == &__s[v26])
          return (char *)icu::MessagePattern::addArgDoublePart((uint64_t)v10, v27, a2, v26, a6);
      }
    }
    goto LABEL_50;
  }
  if (!a4 || (_DWORD)v13 != a3)
    goto LABEL_50;
  Infinity = uprv_getInfinity();
  if (v18)
    Infinity = -Infinity;
  return (char *)icu::MessagePattern::addArgDoublePart((uint64_t)v10, Infinity, a2, v8 - (unsigned __int16)a2, a6);
}

BOOL icu::MessagePattern::inMessageFormatPattern(icu::MessagePattern *this, int a2)
{
  return a2 > 0 || ***((_DWORD ***)this + 10) == 0;
}

uint64_t icu::MessagePattern::addArgDoublePart(uint64_t this, double a2, unint64_t a3, __int16 a4, UErrorCode *a5)
{
  int v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  UErrorCode v12;
  uint64_t v13;
  uint64_t v14;

  if (*(int *)a5 <= 0)
  {
    v7 = a3;
    v9 = this;
    v10 = *(_DWORD *)(this + 120);
    v11 = *(_QWORD *)(this + 104);
    if (v11)
    {
      this = sub_18BBD565C(v11, v10, (int *)a5);
      if (!(_DWORD)this)
        return this;
      if (v10 >= 0x8000)
      {
        v12 = U_INDEX_OUTOFBOUNDS_ERROR;
LABEL_12:
        *a5 = v12;
        return this;
      }
      v13 = **(_QWORD **)(v9 + 104);
    }
    else
    {
      this = icu::UMemory::operator new((icu::UMemory *)0x50, a3);
      if (!this)
      {
        *(_QWORD *)(v9 + 104) = 0;
        v12 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_12;
      }
      *(_OWORD *)(this + 8) = 0u;
      *(_QWORD *)(this + 72) = 0;
      *(_OWORD *)(this + 56) = 0u;
      *(_OWORD *)(this + 40) = 0u;
      *(_OWORD *)(this + 24) = 0u;
      v13 = this + 16;
      *(_QWORD *)this = this + 16;
      *(_DWORD *)(this + 8) = 8;
      *(_QWORD *)(v9 + 104) = this;
    }
    v14 = *(int *)(v9 + 120);
    *(_DWORD *)(v9 + 120) = v14 + 1;
    *(double *)(v13 + 8 * v14) = a2;
    return icu::MessagePattern::addPart(v9, 13, v7, a4, v10, (int *)a5);
  }
  return this;
}

uint64_t sub_18BBD5590(uint64_t a1, int a2, int *a3)
{
  uint64_t result;
  int v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;

  if (*a3 > 0)
    return 0;
  if (*(_DWORD *)(a1 + 8) > a2)
    return 1;
  if (a2 >= 1 && (v7 = 2 * a2, (v8 = uprv_malloc(16 * (2 * a2))) != 0))
  {
    v9 = v8;
    v10 = *(_DWORD *)(a1 + 8);
    if (v10 >= a2)
      v10 = a2;
    if (v10 >= v7)
      v10 = v7;
    v11 = *(void **)a1;
    memcpy(v8, *(const void **)a1, 16 * v10);
    if (*(_BYTE *)(a1 + 12))
      uprv_free(v11);
    *(_QWORD *)a1 = v9;
    *(_DWORD *)(a1 + 8) = v7;
    result = 1;
    *(_BYTE *)(a1 + 12) = 1;
  }
  else
  {
    result = 0;
    *a3 = 7;
  }
  return result;
}

uint64_t sub_18BBD565C(uint64_t a1, int a2, int *a3)
{
  uint64_t result;
  int v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;

  if (*a3 > 0)
    return 0;
  if (*(_DWORD *)(a1 + 8) > a2)
    return 1;
  if (a2 >= 1 && (v7 = 2 * a2, (v8 = uprv_malloc(8 * (2 * a2))) != 0))
  {
    v9 = v8;
    v10 = *(_DWORD *)(a1 + 8);
    if (v10 >= a2)
      v10 = a2;
    if (v10 >= v7)
      v10 = v7;
    v11 = *(void **)a1;
    memcpy(v8, *(const void **)a1, 8 * v10);
    if (*(_BYTE *)(a1 + 12))
      uprv_free(v11);
    *(_QWORD *)a1 = v9;
    *(_DWORD *)(a1 + 8) = v7;
    result = 1;
    *(_BYTE *)(a1 + 12) = 1;
  }
  else
  {
    result = 0;
    *a3 = 7;
  }
  return result;
}

uint64_t icu::MessageImpl::appendReducedApostrophes(icu::MessageImpl *this, const icu::UnicodeString *a2, int a3, uint64_t a4, icu::UnicodeString *a5)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  __int16 v16;

  v7 = (int)a2;
  v9 = -1;
  while (1)
  {
    v10 = *((unsigned __int16 *)this + 4);
    if (v7 < 0)
    {
      v12 = 0;
      v11 = (v10 & 0x8000) != 0 ? *((_DWORD *)this + 3) : v10 >> 5;
    }
    else if ((v10 & 0x8000) != 0)
    {
      v11 = *((_DWORD *)this + 3);
      v12 = (int)v11 >= v7 ? v7 : *((_DWORD *)this + 3);
    }
    else
    {
      v11 = v10 >> 5;
      v12 = v11 >= v7 ? v7 : v11;
    }
    v13 = icu::UnicodeString::doIndexOf((uint64_t)this, 0x27u, v12, v11 - v12);
    if (v13 < 0)
      break;
    v14 = v13;
    if (v13 >= a3)
      break;
    if (v13 == v9)
    {
      v16 = 39;
      icu::UnicodeString::doAppend(a4, (uint64_t)&v16, 0, 1);
      ++v7;
      v9 = -1;
    }
    else
    {
      icu::UnicodeString::doAppend(a4, this, v7, (v13 - v7));
      v7 = v14 + 1;
      v9 = v14 + 1;
    }
  }
  return icu::UnicodeString::doAppend(a4, this, v7, (a3 - v7));
}

uint64_t icu::MessageImpl::appendSubMessageWithoutSkipSyntax(icu::MessageImpl *this, const icu::MessagePattern *a2, icu::UnicodeString *a3, icu::UnicodeString *a4)
{
  const icu::UnicodeString *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int *v10;
  int v11;
  const icu::UnicodeString *v12;
  icu::UnicodeString *v13;
  uint64_t v14;

  v6 = (icu::MessageImpl *)((char *)this + 16);
  v7 = *((_QWORD *)this + 11);
  v8 = *(_DWORD *)(v7 + 16 * (int)a2 + 4) + *(unsigned __int16 *)(v7 + 16 * (int)a2 + 8);
  while (1)
  {
    v9 = (int)a2 + 1;
    v10 = (int *)(v7 + 16 * v9);
    v11 = *v10;
    v12 = (const icu::UnicodeString *)v10[1];
    if (*v10 == 2)
    {
      icu::UnicodeString::doAppend((uint64_t)a3, v6, v8, ((_DWORD)v12 - v8));
      v8 = v10[1] + *((unsigned __int16 *)v10 + 4);
      goto LABEL_10;
    }
    if (v11 != 5)
      break;
    icu::UnicodeString::doAppend((uint64_t)a3, v6, v8, ((_DWORD)v12 - v8));
    v14 = *((_QWORD *)this + 11);
    if (*(_DWORD *)(v14 + 16 * v9 + 12) > (int)v9)
      LODWORD(v9) = *(_DWORD *)(v14 + 16 * v9 + 12);
    v8 = *(_DWORD *)(v14 + 16 * (int)v9 + 4) + *(unsigned __int16 *)(v14 + 16 * (int)v9 + 8);
    icu::MessageImpl::appendReducedApostrophes(v6, v12, v8, (uint64_t)a3, v13);
LABEL_10:
    v7 = *((_QWORD *)this + 11);
    LODWORD(a2) = v9;
  }
  if (v11 != 1)
    goto LABEL_10;
  return icu::UnicodeString::doAppend((uint64_t)a3, v6, v8, ((_DWORD)v12 - v8));
}

void *icu::Normalizer2::normalizeUTF8(void *result, uint64_t a2, const char *a3, int32_t a4, icu::ByteSink *a5, uint64_t a6, int *a7)
{
  void *v9;
  void *v10;
  void *v11;
  void (**v12)(icu::UnicodeString *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*a7 <= 0)
  {
    if (a6)
    {
      *a7 = 16;
    }
    else
    {
      v9 = result;
      memset(v17, 0, sizeof(v17));
      icu::UnicodeString::fromUTF8(a3, a4, (uint64_t)v17);
      v13 = 0u;
      v16 = 0;
      v15 = 0u;
      v14 = 0u;
      v12 = off_1E2256B38;
      LOWORD(v13) = 2;
      (*(void (**)(void *, _OWORD *, void (***)(icu::UnicodeString *__hidden), int *))(*(_QWORD *)v9 + 24))(v9, v17, &v12, a7);
      icu::UnicodeString::toUTF8((icu::UnicodeString *)&v12, a5);
      icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v12);
      return icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v17);
    }
  }
  return result;
}

uint64_t icu::Normalizer2::getRawDecomposition()
{
  return 0;
}

uint64_t icu::Normalizer2::composePair(icu::Normalizer2 *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t icu::Normalizer2::getCombiningClass(icu::Normalizer2 *this)
{
  return 0;
}

BOOL icu::Normalizer2::isNormalizedUTF8(uint64_t a1, const char *a2, int32_t a3, int *a4)
{
  _BOOL8 v4;
  void *v7;
  _BYTE v9[64];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*a4 > 0)
    return 0;
  icu::UnicodeString::fromUTF8(a2, a3, (uint64_t)v9);
  v4 = (*(unsigned int (**)(uint64_t, _BYTE *, int *))(*(_QWORD *)a1 + 88))(a1, v9, a4) != 0;
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v9);
  return v4;
}

void sub_18BBD5B14(icu::UObject *a1)
{
  void *v1;

  icu::UObject::~UObject(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BBD5B2C(icu::UObject *a1)
{
  void *v1;

  icu::UObject::~UObject(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BBD5B44(icu::UObject *a1)
{
  void *v1;

  icu::UObject::~UObject(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BBD5B5C(icu::UObject *a1)
{
  void *v1;

  icu::UObject::~UObject(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::Normalizer2Factory::getNoopInstance(icu::Normalizer2Factory *this, UErrorCode *a2)
{
  unsigned int v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;

  if (*(int *)this > 0)
    return 0;
  v4 = atomic_load(&dword_1EE009338);
  if (v4 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009338))
  {
    if (dword_1EE00933C >= 1)
      *(_DWORD *)this = dword_1EE00933C;
  }
  else
  {
    v6 = *(_DWORD *)this;
    if (*(int *)this <= 0)
    {
      v7 = (_QWORD *)icu::UMemory::operator new((icu::UMemory *)8, v5);
      if (v7)
      {
        *v7 = &off_1E224A778;
        qword_1EE009330 = (uint64_t)v7;
        sub_18BC0ECC4(0x10u, (uint64_t)sub_18BBD7788);
        v6 = *(_DWORD *)this;
      }
      else
      {
        qword_1EE009330 = 0;
        v6 = 7;
        *(_DWORD *)this = 7;
      }
    }
    dword_1EE00933C = v6;
    icu::umtx_initImplPostInit(&dword_1EE009338);
  }
  return qword_1EE009330;
}

uint64_t icu::Normalizer2Factory::getImpl(icu::Normalizer2Factory *this, const icu::Normalizer2 *a2)
{
  return *((_QWORD *)this + 1);
}

uint64_t *sub_18BBD5C50(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UObject::~UObject((icu::UObject *)(a1 + 8));
  icu::UObject::~UObject((icu::UObject *)(a1 + 6));
  icu::UObject::~UObject((icu::UObject *)(a1 + 4));
  icu::UObject::~UObject((icu::UObject *)(a1 + 1));
  return a1;
}

uint64_t sub_18BBD5CA8(uint64_t a1, int *a2)
{
  uint64_t result;

  if (*a2 >= 1)
  {
    if (!a1)
      return 0;
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    return 0;
  }
  result = icu::UMemory::operator new((icu::UMemory *)0x58, (unint64_t)a2);
  if (!result)
  {
    *a2 = 7;
    if (!a1)
      return 0;
    goto LABEL_3;
  }
  *(_QWORD *)result = a1;
  *(_QWORD *)(result + 8) = &off_1E224A5C8;
  *(_QWORD *)(result + 16) = a1;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = &off_1E224A4F0;
  *(_QWORD *)(result + 40) = a1;
  *(_QWORD *)(result + 48) = &off_1E224A6A0;
  *(_QWORD *)(result + 56) = a1;
  *(_QWORD *)(result + 64) = &off_1E224A5C8;
  *(_QWORD *)(result + 72) = a1;
  *(_BYTE *)(result + 80) = 1;
  return result;
}

uint64_t sub_18BBD5D44(int *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  if (*a1 > 0)
    return 0;
  v4 = (_QWORD *)icu::UMemory::operator new((icu::UMemory *)0x50, a2);
  if (!v4)
  {
    *a1 = 7;
    return 0;
  }
  v5 = (uint64_t)v4;
  *v4 = off_1E224A830;
  v4[4] = 0;
  v4[8] = 0;
  v4[9] = 0;
  icu::Normalizer2Impl::init((uint64_t)v4, "P", (uint64_t)&off_1E224A3E0, (uint64_t)&unk_18BDCC698, (uint64_t)&unk_18BDD0300);
  return sub_18BBD5CA8(v5, a1);
}

uint64_t sub_18BBD5DDC(int *a1)
{
  unsigned int v3;
  unint64_t v4;

  if (*a1 > 0)
    return 0;
  v3 = atomic_load(&dword_1ECD27370);
  if (v3 == 2 || !icu::umtx_initImplPreInit(&dword_1ECD27370))
  {
    if (dword_1ECD27374 >= 1)
      *a1 = dword_1ECD27374;
  }
  else
  {
    qword_1ECD27368 = sub_18BBD5D44(a1, v4);
    sub_18BC0ECC4(0x10u, (uint64_t)sub_18BBD7788);
    dword_1ECD27374 = *a1;
    icu::umtx_initImplPostInit(&dword_1ECD27370);
  }
  return qword_1ECD27368;
}

uint64_t icu::Normalizer2::getNFCInstance(icu::Normalizer2 *this, UErrorCode *a2)
{
  uint64_t v2;

  v2 = sub_18BBD5DDC((int *)this);
  if (v2)
    return v2 + 8;
  else
    return 0;
}

uint64_t icu::Normalizer2::getNFDInstance(icu::Normalizer2 *this, UErrorCode *a2)
{
  uint64_t v2;

  v2 = sub_18BBD5DDC((int *)this);
  if (v2)
    return v2 + 32;
  else
    return 0;
}

uint64_t icu::Normalizer2Factory::getFCDInstance(icu::Normalizer2Factory *this, UErrorCode *a2)
{
  uint64_t v2;

  v2 = sub_18BBD5DDC((int *)this);
  if (v2)
    return v2 + 48;
  else
    return 0;
}

uint64_t icu::Normalizer2Factory::getFCCInstance(icu::Normalizer2Factory *this, UErrorCode *a2)
{
  uint64_t v2;

  v2 = sub_18BBD5DDC((int *)this);
  if (v2)
    return v2 + 64;
  else
    return 0;
}

uint64_t icu::Normalizer2Factory::getNFCImpl(icu::Normalizer2Factory *this, UErrorCode *a2)
{
  uint64_t result;

  result = sub_18BBD5DDC((int *)this);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t unorm2_getNFCInstance(int *a1)
{
  uint64_t v1;

  v1 = sub_18BBD5DDC(a1);
  if (v1)
    return v1 + 8;
  else
    return 0;
}

uint64_t unorm2_getNFDInstance(int *a1)
{
  uint64_t v1;

  v1 = sub_18BBD5DDC(a1);
  if (v1)
    return v1 + 32;
  else
    return 0;
}

uint64_t unorm2_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t unorm2_normalize(const void *a1, UChar *a2, int a3, UChar *a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v6;
  int v8;
  icu::UnicodeString **v14;
  icu::UnicodeString **v15;
  UChar *v16;
  void *v17;
  _QWORD v18[2];
  UChar *v19;
  UChar *v20;
  icu::UnicodeString *v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[4];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(int *)a6 > 0)
    return 0;
  v8 = a5;
  if (a2)
  {
    if (a3 < -1)
      goto LABEL_13;
  }
  else if (a3)
  {
    goto LABEL_13;
  }
  if (!a4)
  {
    if (!(_DWORD)a5)
      goto LABEL_11;
LABEL_13:
    v6 = 0;
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    return v6;
  }
  if ((a5 & 0x80000000) != 0)
    goto LABEL_13;
LABEL_11:
  if (a2 && a2 == a4)
    goto LABEL_13;
  memset(v25, 0, sizeof(v25));
  icu::UnicodeString::UnicodeString(v25, a4, 0, a5);
  if (a3)
  {
    if (a1
    {
      v15 = v14;
      v24 = 0uLL;
      v21[0] = v14[1];
      v21[1] = (icu::UnicodeString *)v25;
      v23 = 0uLL;
      v22 = 0uLL;
      *(_QWORD *)((char *)&v23 + 5) = 0;
      if (icu::ReorderingBuffer::init((icu::ReorderingBuffer *)v21, a3, a6))
      {
        if (a3 < 0)
          v16 = 0;
        else
          v16 = &a2[a3];
        (*((void (**)(icu::UnicodeString **, UChar *, UChar *, icu::UnicodeString **, UErrorCode *))*v15 + 18))(v15, a2, v16, v21, a6);
      }
      if ((_QWORD)v22)
        icu::UnicodeString::releaseBuffer((uint64_t)v21[1], ((_QWORD)v23 - (_QWORD)v22) >> 1);
    }
    else
    {
      v23 = 0u;
      v24 = 0u;
      *(_OWORD *)v21 = 0u;
      v22 = 0u;
      v20 = a2;
      icu::UnicodeString::UnicodeString(v21, a3 >> 31, &v20);
      v18[1] = v20;
      (*(void (**)(const void *, icu::UnicodeString **, _OWORD *, UErrorCode *))(*(_QWORD *)a1 + 24))(a1, v21, v25, a6);
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v21);
    }
  }
  v19 = a4;
  v6 = icu::UnicodeString::extract((uint64_t)v25, &v19, v8, (int *)a6);
  v18[0] = v19;
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v25);
  return v6;
}

uint64_t unorm2_normalizeSecondAndAppend(_QWORD *a1, UChar *a2, uint64_t a3, uint64_t a4, UChar *a5, int a6, UErrorCode *a7)
{
  return sub_18BBD61A4(a1, a2, a3, a4, a5, a6, 1, a7);
}

uint64_t sub_18BBD61A4(_QWORD *a1, UChar *a2, uint64_t a3, uint64_t a4, UChar *a5, int a6, uint64_t a7, UErrorCode *a8)
{
  uint64_t v8;
  int v13;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  UChar *v19;
  unint64_t v20;
  uint64_t v21;
  UChar *v23;
  int v24;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  UChar *v28;
  UChar *v29;
  uint64_t v30;
  icu::UnicodeString *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[4];
  _DWORD v38[18];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*(int *)a8 <= 0)
  {
    v13 = a4;
    if (a5)
    {
      if (a6 < -1)
        goto LABEL_28;
    }
    else if (a6)
    {
      goto LABEL_28;
    }
    if (a2)
    {
      if ((int)a3 < -1 || (a4 & 0x80000000) != 0 || a2 == a5)
        goto LABEL_28;
LABEL_11:
      memset(v38, 0, 64);
      icu::UnicodeString::UnicodeString(v38, a2, a3, a4);
      if (SLOWORD(v38[2]) >= 0)
        v16 = LOWORD(v38[2]) >> 5;
      else
        v16 = v38[3];
      if (!a6)
        goto LABEL_33;
      if (!a1
      {
        memset(v37, 0, sizeof(v37));
        v29 = a5;
        icu::UnicodeString::UnicodeString(v37, a6 >> 31, &v29);
        v26[1] = v29;
        v21 = 40;
        if (!(_DWORD)a7)
          v21 = 48;
        (*(void (**)(_QWORD *, _DWORD *, _OWORD *, UErrorCode *))(*a1 + v21))(a1, v38, v37, a8);
        goto LABEL_32;
      }
      v18 = v17;
      memset((char *)v37 + 8, 0, 56);
      v36 = 0;
      *(_QWORD *)&v37[0] = off_1E2256B38;
      WORD4(v37[0]) = 2;
      v35 = 0;
      v30 = v17[1];
      v31 = (icu::UnicodeString *)v38;
      v33 = 0;
      v34 = 0uLL;
      v32 = 0;
      *(_QWORD *)((char *)&v34 + 5) = 0;
      if (icu::ReorderingBuffer::init((icu::ReorderingBuffer *)&v30, a6 + v16 + 1, a8))
      {
        if (a6 < 0)
          v19 = 0;
        else
          v19 = &a5[a6];
        (*(void (**)(_QWORD *, UChar *, UChar *, uint64_t, _OWORD *, uint64_t *, UErrorCode *))(*v18 + 152))(v18, a5, v19, a7, v37, &v30, a8);
      }
      if (v32)
        icu::UnicodeString::releaseBuffer((uint64_t)v31, (unint64_t)(v34 - v32) >> 1);
      v20 = *(unsigned int *)a8;
      if ((int)v20 <= 0)
      {
        LODWORD(v20) = LOWORD(v38[2]) >> 5;
        if (SLOWORD(v38[2]) >= 0)
          v20 = v20;
        else
          v20 = v38[3];
        if (!a2 || (int)v20 <= v13)
          goto LABEL_32;
      }
      else if (!a2)
      {
LABEL_32:
        icu::UnicodeString::~UnicodeString((void *)v20, (icu::UnicodeString *)v37);
LABEL_33:
        v28 = a2;
        v8 = icu::UnicodeString::extract((uint64_t)v38, &v28, v13, (int *)a8);
        v26[0] = v28;
        icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v38);
        return v8;
      }
      v23 = &a2[v16];
      v24 = WORD4(v37[0]) >> 5;
      if (SWORD4(v37[0]) < 0)
        v24 = HIDWORD(v37[0]);
      v25 = (uint64_t)&v23[-v24];
      icu::UnicodeString::doExtract((char *)v37, 0, 0x7FFFFFFF, v25, 0);
      v27 = v25;
      v20 = (unint64_t)&v27;
      if (v16 < v13)
        *v23 = 0;
      goto LABEL_32;
    }
    if (!(a4 | a3))
      goto LABEL_11;
LABEL_28:
    v8 = 0;
    *a8 = U_ILLEGAL_ARGUMENT_ERROR;
    return v8;
  }
  return 0;
}

uint64_t unorm2_append(_QWORD *a1, UChar *a2, uint64_t a3, uint64_t a4, UChar *a5, int a6, UErrorCode *a7)
{
  return sub_18BBD61A4(a1, a2, a3, a4, a5, a6, 0, a7);
}

uint64_t unorm2_getDecomposition(uint64_t a1, uint64_t a2, UChar *a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  int v7;
  UChar **v11;
  UChar *v13;
  UChar *v14;
  _OWORD v15[4];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return 0;
  v7 = a4;
  if (!a3)
  {
    if (!(_DWORD)a4)
      goto LABEL_5;
LABEL_8:
    v5 = 0;
    *a5 = 1;
    return v5;
  }
  if ((a4 & 0x80000000) != 0)
    goto LABEL_8;
LABEL_5:
  memset(v15, 0, sizeof(v15));
  icu::UnicodeString::UnicodeString(v15, a3, 0, a4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)a1 + 56))(a1, a2, v15))
  {
    v14 = a3;
    v5 = icu::UnicodeString::extract((uint64_t)v15, &v14, v7, a5);
    v13 = v14;
    v11 = &v13;
  }
  else
  {
    v5 = 0xFFFFFFFFLL;
  }
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v15);
  return v5;
}

uint64_t unorm2_getRawDecomposition(uint64_t a1, uint64_t a2, UChar *a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  int v7;
  UChar **v11;
  UChar *v13;
  UChar *v14;
  _OWORD v15[4];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return 0;
  v7 = a4;
  if (!a3)
  {
    if (!(_DWORD)a4)
      goto LABEL_5;
LABEL_8:
    v5 = 0;
    *a5 = 1;
    return v5;
  }
  if ((a4 & 0x80000000) != 0)
    goto LABEL_8;
LABEL_5:
  memset(v15, 0, sizeof(v15));
  icu::UnicodeString::UnicodeString(v15, a3, 0, a4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)a1 + 64))(a1, a2, v15))
  {
    v14 = a3;
    v5 = icu::UnicodeString::extract((uint64_t)v15, &v14, v7, a5);
    v13 = v14;
    v11 = &v13;
  }
  else
  {
    v5 = 0xFFFFFFFFLL;
  }
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v15);
  return v5;
}

uint64_t unorm2_composePair(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

uint64_t unorm2_getCombiningClass(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
}

uint64_t unorm2_isNormalized(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v10;
  _OWORD v11[4];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*a4 > 0)
    return 0;
  if (a2)
    v6 = 1;
  else
    v6 = a3 == 0;
  v7 = !v6;
  if (a3 < -1 || v7)
  {
    v5 = 0;
    *a4 = 1;
  }
  else
  {
    memset(v11, 0, sizeof(v11));
    v10 = a2;
    icu::UnicodeString::UnicodeString(v11, a3 >> 31, &v10);
    v5 = (*(uint64_t (**)(uint64_t, _OWORD *, int *))(*(_QWORD *)a1 + 88))(a1, v11, a4);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v11);
  }
  return v5;
}

uint64_t unorm2_quickCheck(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v10;
  _OWORD v11[4];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*a4 > 0)
    return 0;
  if (a2)
    v6 = 1;
  else
    v6 = a3 == 0;
  v7 = !v6;
  if (a3 < -1 || v7)
  {
    v5 = 0;
    *a4 = 1;
  }
  else
  {
    memset(v11, 0, sizeof(v11));
    v10 = a2;
    icu::UnicodeString::UnicodeString(v11, a3 >> 31, &v10);
    v5 = (*(uint64_t (**)(uint64_t, _OWORD *, int *))(*(_QWORD *)a1 + 104))(a1, v11, a4);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v11);
  }
  return v5;
}

uint64_t unorm2_spanQuickCheckYes(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v10;
  _OWORD v11[4];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*a4 > 0)
    return 0;
  if (a2)
    v6 = 1;
  else
    v6 = a3 == 0;
  v7 = !v6;
  if (a3 < -1 || v7)
  {
    v5 = 0;
    *a4 = 1;
  }
  else
  {
    memset(v11, 0, sizeof(v11));
    v10 = a2;
    icu::UnicodeString::UnicodeString(v11, a3 >> 31, &v10);
    v5 = (*(uint64_t (**)(uint64_t, _OWORD *, int *))(*(_QWORD *)a1 + 112))(a1, v11, a4);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v11);
  }
  return v5;
}

uint64_t unorm2_hasBoundaryBefore(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
}

uint64_t unorm2_hasBoundaryAfter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
}

uint64_t unorm2_isInert(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

uint8_t u_getCombiningClass(UChar32 c)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int v5;

  v1 = *(_QWORD *)&c;
  v5 = 0;
  v2 = sub_18BBD5DDC(&v5);
  if (v5 > 0)
    return 0;
  if (v2)
    v4 = v2 + 32;
  else
    v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v1);
}

uint64_t sub_18BBD6A58(signed int a1)
{
  _QWORD *v2;
  int v4;

  v4 = 0;
  v2 = (_QWORD *)sub_18BBD5DDC(&v4);
  if (v2)
    v2 = (_QWORD *)*v2;
  if (v4 <= 0)
    return sub_18BBD6AB4((uint64_t)v2, a1);
  else
    return 0;
}

uint64_t sub_18BBD6AB4(uint64_t a1, signed int a2)
{
  BOOL v2;

  if (*(unsigned __int16 *)(a1 + 8) > a2)
    return 0;
  if (a2 < 0x10000
    && (*(_BYTE *)(*(_QWORD *)(a1 + 56) + (a2 >> 8))
      ? (v2 = ((1 << (a2 >> 5)) & *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + (a2 >> 8))) == 0)
      : (v2 = 1),
        v2))
  {
    return 0;
  }
  else
  {
    return icu::Normalizer2Impl::getFCD16FromNormData((icu::Normalizer2Impl *)a1, a2);
  }
}

icu::UnicodeString *sub_18BBD6AFC(_QWORD *a1, uint64_t a2, icu::UnicodeString *this, UErrorCode *a4)
{
  __int16 v7;
  uint64_t v9;
  __int16 v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  icu::UnicodeString *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (*(int *)a4 >= 1)
    goto LABEL_4;
  v7 = *(_WORD *)(a2 + 8);
  if ((v7 & 0x11) != 0
    || ((v7 & 2) != 0 ? (v9 = a2 + 10) : (v9 = *(_QWORD *)(a2 + 24)), this == (icu::UnicodeString *)a2 || !v9))
  {
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_4:
    icu::UnicodeString::setToBogus(this);
    return this;
  }
  if ((*((_WORD *)this + 4) & 1) != 0)
    v11 = 2;
  else
    v11 = *((_WORD *)this + 4) & 0x1F;
  *((_WORD *)this + 4) = v11;
  v22 = 0u;
  v23 = 0u;
  v19 = a1[1];
  v20 = this;
  v21 = 0u;
  *(_QWORD *)((char *)&v22 + 5) = 0;
  v12 = *(unsigned __int16 *)(a2 + 8);
  v13 = (__int16)v12;
  v14 = v12 >> 5;
  if (v13 >= 0)
    v15 = v14;
  else
    v15 = *(_DWORD *)(a2 + 12);
  if (icu::ReorderingBuffer::init((icu::ReorderingBuffer *)&v19, v15, a4))
  {
    v16 = *(unsigned __int16 *)(a2 + 8);
    v17 = (__int16)v16;
    v18 = v16 >> 5;
    if (v17 < 0)
      v18 = *(_DWORD *)(a2 + 12);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t *, UErrorCode *))(*a1 + 144))(a1, v9, v9 + 2 * (int)v18, &v19, a4);
  }
  if ((_QWORD)v21)
    icu::UnicodeString::releaseBuffer((uint64_t)v20, ((_QWORD)v22 - (_QWORD)v21) >> 1);
  return this;
}

uint64_t sub_18BBD6C38(_QWORD *a1, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  return sub_18BBD77F0(a1, a2, a3, 1, a4);
}

uint64_t sub_18BBD6C44(_QWORD *a1, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  return sub_18BBD77F0(a1, a2, a3, 0, a4);
}

const UChar *sub_18BBD6C50(uint64_t a1, signed int a2, uint64_t a3)
{
  const UChar *result;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  const UChar *v10;
  unsigned int v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v12[0] = 0;
  v11 = 0;
  result = icu::Normalizer2Impl::getDecomposition(*(_QWORD *)(a1 + 8), a2, v12, (int *)&v11);
  if (result)
  {
    if (result == (const UChar *)v12)
    {
      v5 = v11;
      icu::UnicodeString::unBogus(a3);
      v6 = *(unsigned __int16 *)(a3 + 8);
      v7 = (__int16)v6;
      v8 = v6 >> 5;
      if (v7 >= 0)
        v9 = v8;
      else
        v9 = *(unsigned int *)(a3 + 12);
      icu::UnicodeString::doReplace(a3, 0, v9, (uint64_t)v12, 0, v5);
    }
    else
    {
      v10 = result;
      icu::UnicodeString::setTo((icu::UnicodeString *)a3, 0, &v10, v11);
    }
    return (const UChar *)1;
  }
  return result;
}

unsigned __int16 *sub_18BBD6D30(uint64_t a1, signed int a2, uint64_t a3)
{
  unsigned __int16 *result;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  const UChar *v10;
  unsigned int v11;
  _OWORD v12[4];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(v12, 0, 60);
  v11 = 0;
  result = icu::Normalizer2Impl::getRawDecomposition(*(_QWORD *)(a1 + 8), a2, v12, (int *)&v11);
  if (result)
  {
    if (result == (unsigned __int16 *)v12)
    {
      v5 = v11;
      icu::UnicodeString::unBogus(a3);
      v6 = *(unsigned __int16 *)(a3 + 8);
      v7 = (__int16)v6;
      v8 = v6 >> 5;
      if (v7 >= 0)
        v9 = v8;
      else
        v9 = *(unsigned int *)(a3 + 12);
      icu::UnicodeString::doReplace(a3, 0, v9, (uint64_t)v12, 0, v5);
    }
    else
    {
      v10 = result;
      icu::UnicodeString::setTo((icu::UnicodeString *)a3, 0, &v10, v11);
    }
    return (unsigned __int16 *)1;
  }
  return result;
}

uint64_t sub_18BBD6E1C(uint64_t a1, unsigned int a2, const unsigned __int16 *a3)
{
  return icu::Normalizer2Impl::composePair(*(icu::Normalizer2Impl **)(a1 + 8), a2, a3);
}

uint64_t sub_18BBD6E24(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  _WORD *v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = sub_18BBD79D4(v2, a2);
  if (v3 >> 10 >= 0x3F)
    return (v3 >> 1);
  if (*(unsigned __int16 *)(v2 + 18) <= v3 && *(unsigned __int16 *)(v2 + 26) > v3)
  {
    v5 = (_WORD *)(*(_QWORD *)(v2 + 48) + ((unsigned __int16)v3 & 0xFFFE));
    if ((*v5 & 0x80) != 0)
      return *((unsigned __int8 *)v5 - 2);
  }
  return 0;
}

BOOL sub_18BBD6E94(uint64_t a1, uint64_t a2, int *a3)
{
  _BOOL8 result;
  unsigned int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;

  if (*a3 > 0)
    return 0;
  v4 = *(unsigned __int16 *)(a2 + 8);
  if ((v4 & 0x11) != 0)
    goto LABEL_4;
  if ((v4 & 2) != 0)
  {
    v5 = a2 + 10;
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 24);
    if (!v5)
    {
LABEL_4:
      result = 0;
      *a3 = 1;
      return result;
    }
  }
  v6 = (__int16)v4;
  v7 = v4 >> 5;
  if (v6 < 0)
    v7 = *(_DWORD *)(a2 + 12);
  return v5 + 2 * (int)v7 == (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 160))(a1, v5, v5 + 2 * (int)v7, a3);
}

BOOL sub_18BBD6F2C(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_18BBD6E94(a1, a2, a3);
}

unint64_t sub_18BBD6F48(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t result;
  unsigned int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;

  if (*a3 > 0)
    return 0;
  v4 = *(unsigned __int16 *)(a2 + 8);
  if ((v4 & 0x11) != 0)
    goto LABEL_4;
  if ((v4 & 2) != 0)
  {
    v5 = a2 + 10;
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 24);
    if (!v5)
    {
LABEL_4:
      result = 0;
      *a3 = 1;
      return result;
    }
  }
  v6 = (__int16)v4;
  v7 = v4 >> 5;
  if (v6 < 0)
    v7 = *(_DWORD *)(a2 + 12);
  return (unint64_t)((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 160))(a1, v5, v5 + 2 * (int)v7, a3)- v5) >> 1;
}

uint64_t sub_18BBD6FDC()
{
  return 1;
}

uint64_t sub_18BBD6FE4(uint64_t result, icu::ByteSink *a2, icu::ByteSinkUtil *a3, int a4, icu::ByteSink *a5, icu::Edits *a6, UErrorCode *a7)
{
  uint64_t v13;

  if (*(int *)a7 <= 0)
  {
    v13 = result;
    if (((unsigned __int16)a2 & 0x2000) == 0)
    {
      if (a6)
        icu::Edits::reset((uint64_t)a6);
    }
    icu::Normalizer2Impl::decomposeUTF8(*(icu::Normalizer2Impl **)(v13 + 8), (unint64_t)a2, a3, (unsigned __int8 *)a3 + a4, a5, a6, a7);
    return (*(uint64_t (**)(icu::ByteSink *))(*(_QWORD *)a5 + 32))(a5);
  }
  return result;
}

BOOL sub_18BBD7090(uint64_t a1, icu::ByteSinkUtil *a2, int a3, UErrorCode *a4)
{
  return *(int *)a4 <= 0
      && (unsigned __int8 *)((char *)a2 + a3) == icu::Normalizer2Impl::decomposeUTF8(*(icu::Normalizer2Impl **)(a1 + 8), 0, a2, (unsigned __int8 *)a2 + a3, 0, 0, a4);
}

BOOL sub_18BBD70EC(uint64_t a1, signed int a2)
{
  return icu::Normalizer2Impl::hasDecompBoundaryBefore(*(icu::Normalizer2Impl **)(a1 + 8), a2);
}

BOOL sub_18BBD70F4(uint64_t a1, signed int a2)
{
  return icu::Normalizer2Impl::hasDecompBoundaryAfter(*(icu::Normalizer2Impl **)(a1 + 8), a2);
}

BOOL sub_18BBD70FC(uint64_t a1, unsigned int a2)
{
  return sub_18BBD7A5C(*(_QWORD *)(a1 + 8), a2);
}

UChar *sub_18BBD7104(uint64_t a1, UChar *a2, UChar *a3, UChar **a4, UErrorCode *a5)
{
  return icu::Normalizer2Impl::decompose(*(_QWORD *)(a1 + 8), a2, a3, a4, a5);
}

UChar *sub_18BBD710C(uint64_t a1, UChar *a2, UChar *a3, int a4, icu::UnicodeString *a5, UChar **a6, UErrorCode *a7)
{
  return icu::Normalizer2Impl::decomposeAndAppend(*(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, a7);
}

UChar *sub_18BBD7114(uint64_t a1, UChar *a2, UChar *a3, UErrorCode *a4)
{
  return icu::Normalizer2Impl::decompose(*(_QWORD *)(a1 + 8), a2, a3, 0, a4);
}

BOOL sub_18BBD7124(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = sub_18BBD79D4(v2, a2);
  return *(unsigned __int16 *)(v2 + 14) > v3 || *(unsigned __int16 *)(v2 + 30) <= v3;
}

uint64_t sub_18BBD7168(uint64_t result, icu::ByteSink *a2, icu::ByteSinkUtil *a3, int a4, icu::ByteSink *a5, icu::Edits *a6, UErrorCode *a7)
{
  uint64_t v13;

  if (*(int *)a7 <= 0)
  {
    v13 = result;
    if (((unsigned __int16)a2 & 0x2000) == 0)
    {
      if (a6)
        icu::Edits::reset((uint64_t)a6);
    }
    icu::Normalizer2Impl::composeUTF8(*(icu::Normalizer2Impl **)(v13 + 8), a2, *(char *)(v13 + 16), a3, (unsigned __int8 *)a3 + a4, a5, a6, a7);
    return (*(uint64_t (**)(icu::ByteSink *))(*(_QWORD *)a5 + 32))(a5);
  }
  return result;
}

uint64_t sub_18BBD7218(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v3;
  __int16 v6;
  UChar *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  void *v12;
  UChar *v14;
  icu::UnicodeString *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void (**v19)(icu::UnicodeString *__hidden);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 > 0)
    return 0;
  v6 = *(_WORD *)(a2 + 8);
  if ((v6 & 0x11) != 0)
  {
LABEL_4:
    v3 = 0;
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    return v3;
  }
  if ((v6 & 2) != 0)
  {
    v8 = (UChar *)(a2 + 10);
  }
  else
  {
    v8 = *(UChar **)(a2 + 24);
    if (!v8)
      goto LABEL_4;
  }
  v20 = 0u;
  v21 = 0u;
  v23 = 0;
  v22 = 0u;
  v19 = off_1E2256B38;
  LOWORD(v20) = 2;
  v18 = 0u;
  v14 = *(UChar **)(a1 + 8);
  v15 = (icu::UnicodeString *)&v19;
  v17 = 0u;
  v16 = 0u;
  *(_QWORD *)((char *)&v17 + 5) = 0;
  if (icu::ReorderingBuffer::init((icu::ReorderingBuffer *)&v14, 5, a3))
  {
    v9 = *(unsigned __int16 *)(a2 + 8);
    v10 = (__int16)v9;
    v11 = v9 >> 5;
    if (v10 < 0)
      v11 = *(_DWORD *)(a2 + 12);
    v3 = icu::Normalizer2Impl::compose(*(_QWORD *)(a1 + 8), v8, &v8[v11], *(char *)(a1 + 16), 0, &v14, a3);
  }
  else
  {
    v3 = 0;
  }
  v12 = (void *)v16;
  if ((_QWORD)v16)
    icu::UnicodeString::releaseBuffer((uint64_t)v15, ((_QWORD)v17 - (_QWORD)v16) >> 1);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v19);
  return v3;
}

uint64_t sub_18BBD7384(uint64_t a1, icu::ByteSinkUtil *a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
    return icu::Normalizer2Impl::composeUTF8(*(icu::Normalizer2Impl **)(a1 + 8), 0, *(char *)(a1 + 16), a2, (unsigned __int8 *)a2 + a3, 0, 0, a4);
  else
    return 0;
}

uint64_t sub_18BBD73C4(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v3;
  UChar *v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  if (*a3 > 0)
    return 2;
  v3 = *(unsigned __int16 *)(a2 + 8);
  if ((v3 & 0x11) != 0)
  {
LABEL_3:
    *a3 = 1;
    return 2;
  }
  if ((v3 & 2) != 0)
  {
    v5 = (UChar *)(a2 + 10);
  }
  else
  {
    v5 = *(UChar **)(a2 + 24);
    if (!v5)
      goto LABEL_3;
  }
  v6 = (__int16)v3;
  v8 = 1;
  v7 = v3 >> 5;
  if (v6 < 0)
    v7 = *(_DWORD *)(a2 + 12);
  icu::Normalizer2Impl::composeQuickCheck(*(_QWORD *)(a1 + 8), v5, &v5[v7], *(char *)(a1 + 16), &v8);
  return v8;
}

BOOL sub_18BBD7458(uint64_t a1, signed int a2)
{
  return sub_18BBD7AB0(*(unsigned __int16 **)(a1 + 8), a2);
}

BOOL sub_18BBD7460(uint64_t a1, unsigned int a2)
{
  return sub_18BBD7B10(*(_QWORD *)(a1 + 8), a2, *(char *)(a1 + 16));
}

BOOL sub_18BBD7470(uint64_t a1, unsigned int a2)
{
  return sub_18BBD7B80(*(_QWORD *)(a1 + 8), a2, *(char *)(a1 + 16));
}

uint64_t sub_18BBD7480(uint64_t a1, UChar *a2, unsigned __int16 *a3, UChar **this, UErrorCode *a5)
{
  return icu::Normalizer2Impl::compose(*(_QWORD *)(a1 + 8), a2, a3, *(char *)(a1 + 16), 1, this, a5);
}

void *sub_18BBD749C(uint64_t a1, UChar *a2, unsigned __int16 *a3, int a4, UChar **a5, icu::ReorderingBuffer *this, UErrorCode *a7)
{
  return icu::Normalizer2Impl::composeAndAppend(*(_QWORD *)(a1 + 8), a2, a3, a4, *(char *)(a1 + 16), a5, this, a7);
}

UChar *sub_18BBD74B8(uint64_t a1, UChar *a2, UChar *a3)
{
  return icu::Normalizer2Impl::composeQuickCheck(*(_QWORD *)(a1 + 8), a2, a3, *(char *)(a1 + 16), 0);
}

uint64_t sub_18BBD74CC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = sub_18BBD79D4(v2, a2);
  if (v3 > 0xFE01 || *(unsigned __int16 *)(v2 + 18) > v3)
    return 1;
  else
    return 2 * (*(unsigned __int16 *)(v2 + 30) <= v3);
}

BOOL sub_18BBD751C(uint64_t a1, signed int a2)
{
  return icu::Normalizer2Impl::hasDecompBoundaryBefore(*(icu::Normalizer2Impl **)(a1 + 8), a2);
}

BOOL sub_18BBD7524(uint64_t a1, signed int a2)
{
  return icu::Normalizer2Impl::hasDecompBoundaryAfter(*(icu::Normalizer2Impl **)(a1 + 8), a2);
}

BOOL sub_18BBD752C(uint64_t a1, signed int a2)
{
  return sub_18BBD6AB4(*(_QWORD *)(a1 + 8), a2) < 2;
}

unsigned __int16 *sub_18BBD754C(uint64_t a1, UChar *a2, UChar *a3, UChar **a4, UErrorCode *a5)
{
  return icu::Normalizer2Impl::makeFCD(*(icu::Normalizer2Impl **)(a1 + 8), a2, a3, a4, a5);
}

unsigned __int16 *sub_18BBD7554(uint64_t a1, UChar *a2, unsigned __int16 *a3, int a4, UChar **a5, icu::ReorderingBuffer *a6, UErrorCode *a7)
{
  return icu::Normalizer2Impl::makeFCDAndAppend(*(icu::Normalizer2Impl **)(a1 + 8), a2, a3, a4, a5, a6, a7);
}

unsigned __int16 *sub_18BBD755C(uint64_t a1, UChar *a2, UChar *a3, UErrorCode *a4)
{
  return icu::Normalizer2Impl::makeFCD(*(icu::Normalizer2Impl **)(a1 + 8), a2, a3, 0, a4);
}

UChar **sub_18BBD756C(uint64_t a1, UChar **a2, UChar **a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a3 == a2)
      *a4 = 1;
    else
      icu::UnicodeString::operator=(a3, a2);
  }
  return a3;
}

uint64_t sub_18BBD75B4(int a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, icu::Edits *this, int *a7)
{
  uint64_t result;

  if (*a7 <= 0)
  {
    if (this)
    {
      if ((a2 & 0x2000) == 0)
        icu::Edits::reset((uint64_t)this);
      icu::Edits::addUnchanged(this, a4);
    }
    if ((a2 & 0x4000) == 0)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 16))(a5, a3, a4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
  }
  return result;
}

icu::UnicodeString *sub_18BBD7654(int a1, icu::UnicodeString *this, icu::UnicodeString *a3, int *a4)
{
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;

  if (*a4 <= 0)
  {
    if (this == a3)
    {
      *a4 = 1;
    }
    else
    {
      v5 = *((unsigned __int16 *)a3 + 4);
      v6 = (__int16)v5;
      v7 = v5 >> 5;
      if (v6 >= 0)
        v8 = v7;
      else
        v8 = *((unsigned int *)a3 + 3);
      icu::UnicodeString::doAppend((uint64_t)this, a3, 0, v8);
    }
  }
  return this;
}

icu::UnicodeString *sub_18BBD76BC(int a1, icu::UnicodeString *this, icu::UnicodeString *a3, int *a4)
{
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;

  if (*a4 <= 0)
  {
    if (this == a3)
    {
      *a4 = 1;
    }
    else
    {
      v5 = *((unsigned __int16 *)a3 + 4);
      v6 = (__int16)v5;
      v7 = v5 >> 5;
      if (v6 >= 0)
        v8 = v7;
      else
        v8 = *((unsigned int *)a3 + 3);
      icu::UnicodeString::doAppend((uint64_t)this, a3, 0, v8);
    }
  }
  return this;
}

uint64_t sub_18BBD7724()
{
  return 0;
}

BOOL sub_18BBD772C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  return *a3 < 1;
}

BOOL sub_18BBD773C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  return *a4 < 1;
}

uint64_t sub_18BBD774C()
{
  return 1;
}

uint64_t sub_18BBD7754(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;

  v2 = *(unsigned __int16 *)(a2 + 8);
  v3 = (__int16)v2;
  v4 = v2 >> 5;
  if (v3 >= 0)
    return v4;
  else
    return *(unsigned int *)(a2 + 12);
}

uint64_t sub_18BBD7770()
{
  return 1;
}

uint64_t sub_18BBD7778()
{
  return 1;
}

uint64_t sub_18BBD7780()
{
  return 1;
}

uint64_t sub_18BBD7788()
{
  uint64_t *v0;

  if (qword_1EE009330)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1EE009330 + 8))(qword_1EE009330);
  qword_1EE009330 = 0;
  atomic_store(0, &dword_1EE009338);
  if (qword_1ECD27368)
  {
    v0 = sub_18BBD5C50((uint64_t *)qword_1ECD27368);
    icu::UMemory::operator delete(v0);
  }
  qword_1ECD27368 = 0;
  atomic_store(0, &dword_1ECD27370);
  return 1;
}

uint64_t sub_18BBD77F0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  unsigned int v7;
  unsigned int v9;
  uint64_t v11;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  icu::UnicodeString *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void (**v30)(icu::UnicodeString *__hidden);
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 <= 0)
  {
    v7 = *(unsigned __int16 *)(a2 + 8);
    if ((v7 & 1) != 0
      || (v9 = *(unsigned __int16 *)(a3 + 8), (v9 & 0x11) != 0)
      || ((v9 & 2) != 0 ? (v11 = a3 + 10) : (v11 = *(_QWORD *)(a3 + 24)), a2 == a3 || !v11))
    {
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      v14 = *(_DWORD *)(a2 + 12);
      v15 = (__int16)v9;
      v31 = 0u;
      v32 = 0u;
      v16 = (__int16)v7;
      v17 = v7 >> 5;
      if (v16 >= 0)
        v18 = v17;
      else
        v18 = v14;
      v34 = 0;
      v33 = 0uLL;
      v30 = off_1E2256B38;
      LOWORD(v31) = 2;
      v29 = 0uLL;
      v25 = a1[1];
      v26 = (icu::UnicodeString *)a2;
      v28 = 0uLL;
      v27 = 0uLL;
      v19 = v9 >> 5;
      if (v15 < 0)
        v19 = *(_DWORD *)(a3 + 12);
      *(_QWORD *)((char *)&v28 + 5) = 0;
      if (icu::ReorderingBuffer::init((icu::ReorderingBuffer *)&v25, v19 + v18, a5))
      {
        v20 = *(unsigned __int16 *)(a3 + 8);
        v21 = (__int16)v20;
        v22 = v20 >> 5;
        if (v21 < 0)
          v22 = *(_DWORD *)(a3 + 12);
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden), uint64_t *, UErrorCode *))(*a1 + 152))(a1, v11, v11 + 2 * (int)v22, a4, &v30, &v25, a5);
      }
      if ((_QWORD)v27)
        icu::UnicodeString::releaseBuffer((uint64_t)v26, ((_QWORD)v28 - (_QWORD)v27) >> 1);
      v23 = (void *)*(unsigned int *)a5;
      if ((int)v23 >= 1)
      {
        if ((v31 & 0x8000u) == 0)
          v24 = (unsigned __int16)v31 >> 5;
        else
          v24 = DWORD1(v31);
        icu::UnicodeString::doReplace((icu::UnicodeString *)a2, v18 - v24, 0x7FFFFFFFLL, (const icu::UnicodeString *)&v30, 0, v24);
      }
      icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v30);
    }
  }
  return a2;
}

uint64_t sub_18BBD79D4(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (a2 >> 10 == 54)
    return 1;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 8);
  if (HIWORD(a2))
  {
    if (HIWORD(a2) > 0x10u)
    {
      v5 = *(_DWORD *)(v3 + 20) - 1;
    }
    else if (*(_DWORD *)(v3 + 24) <= (signed int)a2)
    {
      v5 = *(_DWORD *)(v3 + 20) - 2;
    }
    else
    {
      v5 = ucptrie_internalSmallIndex((uint64_t *)v3, a2);
    }
  }
  else
  {
    v5 = (a2 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v3 + 2 * (a2 >> 6));
  }
  return *(unsigned __int16 *)(v4 + 2 * v5);
}

BOOL sub_18BBD7A5C(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  _BOOL8 result;

  v3 = sub_18BBD79D4(a1, a2);
  result = 1;
  if (v3 != 65024 && *(unsigned __int16 *)(a1 + 14) <= v3)
    return v3 < 0xFC01 && *(unsigned __int16 *)(a1 + 30) <= v3;
  return result;
}

BOOL sub_18BBD7AB0(unsigned __int16 *a1, signed int a2)
{
  unsigned int v3;

  if (a1[5] > a2)
    return 1;
  v3 = sub_18BBD79D4((uint64_t)a1, a2);
  if (a1[11] > v3)
    return 1;
  if (a1[13] <= v3)
    return a1[15] > v3;
  return 0;
}

BOOL sub_18BBD7B10(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v5;
  _BOOL8 result;
  unsigned int v7;
  BOOL v8;

  v5 = sub_18BBD79D4(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  v7 = v5;
  result = 1;
  if (a3 && v7 != 1)
  {
    if (*(unsigned __int16 *)(a1 + 26) <= v7)
      v8 = (v7 & 6) >= 3;
    else
      v8 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + ((unsigned __int16)v7 & 0xFFFE)) >= 0x200u;
    return !v8;
  }
  return result;
}

BOOL sub_18BBD7B80(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v5;
  uint64_t v7;

  v5 = sub_18BBD79D4(a1, a2);
  if (*(unsigned __int16 *)(a1 + 18) <= v5 || (v5 & 1) == 0)
    return 0;
  v7 = 1;
  if (a3 && v5 != 1)
    return *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + ((unsigned __int16)v5 & 0xFFFE)) < 0x200u;
  return v7;
}

icu::ReorderingBuffer *icu::ReorderingBuffer::ReorderingBuffer(icu::ReorderingBuffer *this, const icu::Normalizer2Impl *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  uint64_t Buffer;
  uint64_t v7;
  int v8;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  Buffer = icu::UnicodeString::getBuffer(a3, 8);
  *((_QWORD *)this + 2) = Buffer;
  *((_QWORD *)this + 3) = Buffer;
  *((_QWORD *)this + 4) = Buffer;
  v7 = *((_QWORD *)this + 1);
  if ((*(_BYTE *)(v7 + 8) & 2) != 0)
    v8 = 27;
  else
    v8 = *(_DWORD *)(v7 + 16);
  *((_DWORD *)this + 10) = v8;
  *((_BYTE *)this + 44) = 0;
  if (!Buffer && *(int *)a4 <= 0)
    *a4 = U_MEMORY_ALLOCATION_ERROR;
  return this;
}

uint64_t icu::ReorderingBuffer::init(icu::ReorderingBuffer *this, int a2, UErrorCode *a3)
{
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;

  v5 = *((_QWORD *)this + 1);
  if (*(__int16 *)(v5 + 8) < 0)
    v6 = *(_DWORD *)(v5 + 12);
  else
    v6 = *(unsigned __int16 *)(v5 + 8) >> 5;
  result = icu::UnicodeString::getBuffer((icu::UnicodeString *)v5, a2);
  *((_QWORD *)this + 2) = result;
  if (result)
  {
    v8 = result + 2 * v6;
    *((_QWORD *)this + 4) = v8;
    v9 = *((_QWORD *)this + 1);
    if ((*(_WORD *)(v9 + 8) & 2) != 0)
      v10 = 27;
    else
      v10 = *(_DWORD *)(v9 + 16);
    *((_DWORD *)this + 10) = v10 - v6;
    *((_QWORD *)this + 3) = result;
    if (v6)
    {
      *((_QWORD *)this + 6) = v8;
      v11 = icu::ReorderingBuffer::previousCC(this);
      *((_BYTE *)this + 44) = v11;
      if (v11 >= 2)
      {
        while (icu::ReorderingBuffer::previousCC(this) > 1)
          ;
      }
      *((_QWORD *)this + 3) = *((_QWORD *)this + 7);
    }
    else
    {
      *((_BYTE *)this + 44) = 0;
    }
    return 1;
  }
  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

uint64_t icu::ReorderingBuffer::previousCC(icu::ReorderingBuffer *this)
{
  unint64_t v1;
  unsigned int v2;
  unint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v1 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 7) = v1;
  if (*((_QWORD *)this + 3) >= v1)
    goto LABEL_7;
  v2 = *(unsigned __int16 *)(v1 - 2);
  *((_QWORD *)this + 6) = v1 - 2;
  if ((v2 & 0xFC00) == 0xDC00 && *((_QWORD *)this + 2) < v1 - 2)
  {
    v5 = *(unsigned __int16 *)(v1 - 4);
    v3 = v1 - 4;
    v4 = v5;
    if ((v5 & 0xFC00) == 0xD800)
    {
      *((_QWORD *)this + 6) = v3;
      v2 = v2 + (v4 << 10) - 56613888;
    }
  }
  v6 = *(_QWORD *)this;
  if (v2 >= *(unsigned __int16 *)(v6 + 10))
  {
    v8 = sub_18BBD79D4(v6, v2);
    v7 = v8 >> 1;
    if (v8 >> 10 <= 0x3E)
      LOBYTE(v7) = 0;
  }
  else
  {
LABEL_7:
    LOBYTE(v7) = 0;
  }
  return v7;
}

BOOL icu::ReorderingBuffer::equals(uint64_t a1, const UChar *a2, uint64_t a3)
{
  uint64_t v4;
  const UChar *v5;
  unint64_t v6;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(const UChar **)(a1 + 16);
  v6 = (unint64_t)(v4 - (_QWORD)v5) >> 1;
  return (_DWORD)v6 == ((unint64_t)(a3 - (_QWORD)a2) >> 1) && u_memcmp(v5, a2, v6) == 0;
}

BOOL icu::ReorderingBuffer::equals(icu::ReorderingBuffer *this, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;

  v3 = *((_QWORD *)this + 2);
  v4 = (unint64_t)(*((_QWORD *)this + 4) - v3) >> 1;
  v5 = (_DWORD)a3 - (_DWORD)a2;
  if ((int)a3 - (int)a2 < (int)v4 || ((int)a3 - (int)a2) / 3 > (int)v4)
    return 0;
  v7 = 0;
  v8 = 0;
  while (v7 < (int)v4)
  {
    if (v8 < v5)
    {
      v9 = v7 + 1;
      v10 = *(unsigned __int16 *)(v3 + 2 * v7);
      if ((v10 & 0xFC00) == 0xD800)
      {
        v7 += 2;
        v10 = *(unsigned __int16 *)(v3 + 2 * v9) + (v10 << 10) - 56613888;
      }
      else
      {
        ++v7;
      }
      v11 = v8 + 1;
      v12 = a2[v8];
      if ((char)a2[v8] < 0)
      {
        if (v12 > 0xDF)
        {
          if (v12 > 0xEF)
          {
            v12 = ((v12 & 7) << 18) | ((a2[v11] & 0x3F) << 12) | ((a2[v8 + 2] & 0x3F) << 6) | a2[v8 + 3] & 0x3F;
            v8 += 4;
          }
          else
          {
            v12 = ((v12 & 0xF) << 12) | ((a2[v11] & 0x3F) << 6) | a2[v8 + 2] & 0x3F;
            v8 += 3;
          }
        }
        else
        {
          v8 += 2;
          v12 = a2[v11] & 0x3F | ((v12 & 0x1F) << 6);
        }
      }
      else
      {
        ++v8;
      }
      if (v10 == v12)
        continue;
    }
    return 0;
  }
  return v8 >= v5;
}

uint64_t icu::ReorderingBuffer::appendSupplementary(icu::ReorderingBuffer *this, unsigned int a2, unsigned int a3, UErrorCode *a4)
{
  uint64_t result;
  _WORD *v8;

  if (*((int *)this + 10) > 1 || (result = icu::ReorderingBuffer::resize(this, 2, a4), (_DWORD)result))
  {
    if (a3 && *((unsigned __int8 *)this + 44) > a3)
    {
      icu::ReorderingBuffer::insert(this, a2, a3);
    }
    else
    {
      v8 = (_WORD *)*((_QWORD *)this + 4);
      *v8 = (a2 >> 10) - 10304;
      v8[1] = a2 & 0x3FF | 0xDC00;
      *((_QWORD *)this + 4) = v8 + 2;
      *((_BYTE *)this + 44) = a3;
      if (a3 <= 1)
        *((_QWORD *)this + 3) = v8 + 2;
    }
    *((_DWORD *)this + 10) -= 2;
    return 1;
  }
  return result;
}

uint64_t icu::ReorderingBuffer::resize(icu::ReorderingBuffer *this, int a2, UErrorCode *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  int v15;

  v6 = *((_QWORD *)this + 3);
  v7 = *((_QWORD *)this + 2);
  v8 = (unint64_t)(*((_QWORD *)this + 4) - v7) >> 1;
  icu::UnicodeString::releaseBuffer(*((_QWORD *)this + 1), v8);
  v9 = v8 + a2;
  v10 = *((_QWORD *)this + 1);
  if ((*(_WORD *)(v10 + 8) & 2) != 0)
    v11 = 54;
  else
    v11 = 2 * *(_DWORD *)(v10 + 16);
  if (v9 <= v11)
    v9 = v11;
  if (v9 <= 256)
    v12 = 256;
  else
    v12 = v9;
  result = icu::UnicodeString::getBuffer((icu::UnicodeString *)v10, v12);
  *((_QWORD *)this + 2) = result;
  if (result)
  {
    *((_QWORD *)this + 3) = result + 2 * (int)((unint64_t)(v6 - v7) >> 1);
    *((_QWORD *)this + 4) = result + 2 * (int)v8;
    v14 = *((_QWORD *)this + 1);
    if ((*(_WORD *)(v14 + 8) & 2) != 0)
      v15 = 27;
    else
      v15 = *(_DWORD *)(v14 + 16);
    *((_DWORD *)this + 10) = v15 - v8;
    return 1;
  }
  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

uint64_t icu::ReorderingBuffer::insert(icu::ReorderingBuffer *this, int a2, unsigned int a3)
{
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  uint64_t result;
  _WORD *v11;
  uint64_t v12;
  _WORD *v13;
  _WORD *v14;
  __int16 v15;
  __int16 v16;

  v6 = *((_QWORD *)this + 4);
  v7 = *(_WORD *)(v6 - 2);
  *((_QWORD *)this + 6) = v6 - 2;
  *((_QWORD *)this + 7) = v6;
  if ((v7 & 0xFC00) == 0xDC00 && *((_QWORD *)this + 2) < (unint64_t)(v6 - 2))
  {
    v9 = *(_WORD *)(v6 - 4);
    v8 = v6 - 4;
    if ((v9 & 0xFC00) == 0xD800)
      *((_QWORD *)this + 6) = v8;
  }
  do
    result = icu::ReorderingBuffer::previousCC(this);
  while (result > a3);
  v11 = (_WORD *)*((_QWORD *)this + 4);
  v12 = 1;
  if (a2 >= 0x10000)
    v12 = 2;
  *((_QWORD *)this + 4) = &v11[v12];
  v13 = (_WORD *)*((_QWORD *)this + 7);
  do
  {
    v14 = &v11[v12];
    v15 = *--v11;
    *(v14 - 1) = v15;
  }
  while (v11 != v13);
  if (a2 >= 0x10000)
  {
    v16 = a2 & 0x3FF | 0xDC00;
    a2 = (a2 >> 10) - 10304;
    v11[1] = v16;
  }
  *v13 = a2;
  if (a3 <= 1)
    *((_QWORD *)this + 3) = &v11[v12];
  return result;
}

uint64_t icu::ReorderingBuffer::append(icu::ReorderingBuffer *this, unsigned __int16 *a2, int a3, int a4, unsigned int a5, unsigned int a6, UErrorCode *a7)
{
  int v14;
  uint64_t result;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  _WORD *v29;
  unsigned int v30;
  _WORD *v31;
  _WORD *v32;
  uint64_t v33;
  __int16 v34;

  if (!a3)
    return 1;
  v14 = *((_DWORD *)this + 10);
  if (v14 < a3)
  {
    result = icu::ReorderingBuffer::resize(this, a3, a7);
    if (!(_DWORD)result)
      return result;
    v14 = *((_DWORD *)this + 10);
  }
  *((_DWORD *)this + 10) = v14 - a3;
  if (a5 && *((unsigned __int8 *)this + 44) > a5)
  {
    v16 = *a2;
    v17 = 1;
    if (a3 != 1 && (v16 & 0xFC00) == 0xD800)
    {
      v18 = a2[1];
      v19 = (v18 & 0xFC00) == 56320;
      v20 = v18 + (v16 << 10) - 56613888;
      v17 = v19 ? 2 : 1;
      if (v19)
        v16 = v20;
    }
    icu::ReorderingBuffer::insert(this, v16, a5);
    if (v17 < a3)
    {
      while (1)
      {
        v21 = v17 + 1;
        v22 = a2[v17];
        if ((v22 & 0xFC00) != 0xD800 || (_DWORD)v21 == a3)
        {
          ++v17;
        }
        else
        {
          v24 = a2[v21];
          v25 = (v24 & 0xFC00) == 56320;
          v26 = (v22 << 10) - 56613888 + v24;
          if (v25)
            v17 += 2;
          else
            ++v17;
          if (v25)
            v22 = v26;
        }
        if (v17 >= a3)
          break;
        v27 = *(_QWORD *)this;
        if (a4)
        {
          v28 = sub_18BBD840C(*(_QWORD *)this, v22);
          LODWORD(v29) = v28 >> 1;
          if (v28 >> 10 <= 0x3E)
            LOBYTE(v29) = 0;
        }
        else
        {
          v30 = sub_18BBD79D4(*(_QWORD *)this, v22);
          if (v30 >> 10 < 0x3F)
          {
            if (*(unsigned __int16 *)(v27 + 18) <= v30
              && *(unsigned __int16 *)(v27 + 26) > v30
              && (v29 = (_WORD *)(*(_QWORD *)(v27 + 48) + ((unsigned __int16)v30 & 0xFFFE)), (*v29 & 0x80) != 0))
            {
              LOBYTE(v29) = *((_BYTE *)v29 - 2);
            }
            else
            {
              LOBYTE(v29) = 0;
            }
          }
          else
          {
            LODWORD(v29) = v30 >> 1;
          }
        }
        sub_18BBD8480(this, v22, v29, a7);
      }
      sub_18BBD8480(this, v22, a6, a7);
    }
    return 1;
  }
  if (a6 > 1)
  {
    v31 = (_WORD *)*((_QWORD *)this + 4);
    if (a5 > 1)
      goto LABEL_47;
    v32 = v31 + 1;
  }
  else
  {
    v31 = (_WORD *)*((_QWORD *)this + 4);
    v32 = &v31[a3];
  }
  *((_QWORD *)this + 3) = v32;
LABEL_47:
  v33 = 2 * a3;
  do
  {
    v34 = *a2++;
    *v31++ = v34;
    v33 -= 2;
  }
  while (v33);
  *((_QWORD *)this + 4) = v31;
  *((_BYTE *)this + 44) = a6;
  return 1;
}

uint64_t sub_18BBD840C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 8);
  if (HIWORD(a2))
  {
    if (HIWORD(a2) > 0x10u)
    {
      v4 = *(_DWORD *)(v2 + 20) - 1;
    }
    else if (*(_DWORD *)(v2 + 24) <= (signed int)a2)
    {
      v4 = *(_DWORD *)(v2 + 20) - 2;
    }
    else
    {
      v4 = ucptrie_internalSmallIndex((uint64_t *)v2, a2);
    }
  }
  else
  {
    v4 = (a2 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v2 + 2 * (a2 >> 6));
  }
  return *(unsigned __int16 *)(v3 + 2 * v4);
}

uint64_t sub_18BBD8480(icu::ReorderingBuffer *a1, signed int a2, unsigned int a3, UErrorCode *a4)
{
  if (a2 >= 0x10000)
    return icu::ReorderingBuffer::appendSupplementary(a1, a2, a3, a4);
  else
    return sub_18BBDB9AC(a1, (unsigned __int16)a2, a3, a4);
}

uint64_t icu::ReorderingBuffer::appendZeroCC(icu::ReorderingBuffer *this, unsigned int a2, UErrorCode *a3)
{
  int v5;
  int v6;
  uint64_t result;
  _WORD *v8;
  _WORD *v9;
  _WORD *v10;

  if (a2 < 0x10000)
    v5 = 1;
  else
    v5 = 2;
  v6 = *((_DWORD *)this + 10);
  if (v6 < v5)
  {
    result = icu::ReorderingBuffer::resize(this, v5, a3);
    if (!(_DWORD)result)
      return result;
    v6 = *((_DWORD *)this + 10);
  }
  *((_DWORD *)this + 10) = v6 - v5;
  if (HIWORD(a2))
  {
    v10 = (_WORD *)*((_QWORD *)this + 4);
    *v10 = (a2 >> 10) - 10304;
    v10[1] = a2 & 0x3FF | 0xDC00;
    v9 = v10 + 2;
  }
  else
  {
    v8 = (_WORD *)*((_QWORD *)this + 4);
    *v8 = a2;
    v9 = v8 + 1;
  }
  *((_QWORD *)this + 3) = v9;
  *((_QWORD *)this + 4) = v9;
  *((_BYTE *)this + 44) = 0;
  return 1;
}

uint64_t icu::ReorderingBuffer::appendZeroCC(UChar **this, UChar *src, UChar *a3, UErrorCode *a4)
{
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  if (src == a3)
    return 1;
  v6 = (unint64_t)((char *)a3 - (char *)src) >> 1;
  if (*((_DWORD *)this + 10) >= (int)v6
    || (result = icu::ReorderingBuffer::resize((icu::ReorderingBuffer *)this, (unint64_t)((char *)a3 - (char *)src) >> 1, a4), (_DWORD)result))
  {
    u_memcpy(this[4], src, v6);
    v8 = (uint64_t)&this[4][(int)v6];
    *((_DWORD *)this + 10) -= v6;
    *((_BYTE *)this + 44) = 0;
    this[3] = (UChar *)v8;
    this[4] = (UChar *)v8;
    return 1;
  }
  return result;
}

uint64_t icu::ReorderingBuffer::remove(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(_QWORD *)(this + 8);
  v2 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 24) = v2;
  *(_QWORD *)(this + 32) = v2;
  if ((*(_BYTE *)(v1 + 8) & 2) != 0)
    v3 = 27;
  else
    v3 = *(_DWORD *)(v1 + 16);
  *(_DWORD *)(this + 40) = v3;
  *(_BYTE *)(this + 44) = 0;
  return this;
}

uint64_t icu::ReorderingBuffer::removeSuffix(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(this + 32);
  v3 = *(_QWORD *)(this + 16);
  if (a2 >= (v2 - v3) >> 1)
  {
    *(_QWORD *)(this + 32) = v3;
    v5 = *(_QWORD *)(this + 8);
    if ((*(_WORD *)(v5 + 8) & 2) != 0)
      v4 = 27;
    else
      v4 = *(_DWORD *)(v5 + 16);
  }
  else
  {
    v3 = v2 - 2 * a2;
    *(_QWORD *)(this + 32) = v3;
    v4 = *(_DWORD *)(this + 40) + a2;
  }
  *(_DWORD *)(this + 40) = v4;
  *(_BYTE *)(this + 44) = 0;
  *(_QWORD *)(this + 24) = v3;
  return this;
}

_QWORD *icu::ReorderingBuffer::skipPrevious(_QWORD *this)
{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  __int16 v4;

  v1 = this[6];
  v2 = *(_WORD *)(v1 - 2);
  this[6] = v1 - 2;
  this[7] = v1;
  if ((v2 & 0xFC00) == 0xDC00 && this[2] < (unint64_t)(v1 - 2))
  {
    v4 = *(_WORD *)(v1 - 4);
    v3 = v1 - 4;
    if ((v4 & 0xFC00) == 0xD800)
      this[6] = v3;
  }
  return this;
}

void icu::Normalizer2Impl::~Normalizer2Impl(icu::Normalizer2Impl *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E224A830;
  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (void *)sub_18BBDDE7C(v2);
    icu::UMemory::operator delete(v3);
  }
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::Normalizer2Impl::~Normalizer2Impl(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::Normalizer2Impl::init(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v5 = a2[9];
  *(_WORD *)(result + 8) = a2[8];
  *(_WORD *)(result + 10) = v5;
  *(_WORD *)(result + 12) = a2[18];
  v6 = a2[11];
  *(_WORD *)(result + 14) = a2[10];
  v7 = a2[15];
  *(_WORD *)(result + 16) = a2[14];
  *(_WORD *)(result + 18) = v6;
  *(_WORD *)(result + 20) = v7;
  v8 = a2[17];
  *(_WORD *)(result + 22) = a2[16];
  *(_WORD *)(result + 24) = v8;
  v9 = a2[13];
  *(_WORD *)(result + 26) = a2[12];
  *(_WORD *)(result + 28) = ((unsigned __int16)v9 >> 3) - 65;
  *(_WORD *)(result + 30) = v9;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 40) = a4;
  *(_QWORD *)(result + 48) = a4 + 2 * ((64512 - (unsigned __int16)v9) >> 1);
  *(_QWORD *)(result + 56) = a5;
  return result;
}

uint64_t icu::Normalizer2Impl::addLcccChars(icu::Normalizer2Impl *this, icu::UnicodeSet *a2)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  v8 = 0;
  result = ucptrie_getRange(*((_QWORD *)this + 4), 0, 1, 1, 0, 0, (int *)&v8);
  if ((result & 0x80000000) == 0)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = v8 < 0xFC01 || v8 == 65024;
      if (!v7
        || v8 >= *((unsigned __int16 *)this + 11)
        && v8 < *((unsigned __int16 *)this + 13)
        && sub_18BBD6AB4((uint64_t)this, v6) >= 0x100)
      {
        icu::UnicodeSet::add(a2, v6, v5);
      }
      v6 = v5 + 1;
      result = ucptrie_getRange(*((_QWORD *)this + 4), v5 + 1, 1, 1, 0, 0, (int *)&v8);
      v5 = result;
    }
    while ((result & 0x80000000) == 0);
  }
  return result;
}

uint64_t icu::Normalizer2Impl::addPropertyStarts(uint64_t a1, _QWORD *a2)
{
  int Range;
  int v5;
  uint64_t v6;
  unsigned __int16 v8;
  unsigned __int16 v9;
  int v10;
  unsigned __int16 v11;
  uint64_t v12;
  BOOL v13;
  int v15;

  v15 = 0;
  Range = ucptrie_getRange(*(_QWORD *)(a1 + 32), 0, 1, 1, 0, 0, &v15);
  if ((Range & 0x80000000) == 0)
  {
    v5 = Range;
    v6 = 0;
    do
    {
      ((void (*)(_QWORD, uint64_t))a2[1])(*a2, v6);
      if ((_DWORD)v6 != v5
        && *(unsigned __int16 *)(a1 + 26) <= (unsigned __int16)v15
        && (v15 & 6u) >= 3
        && *(unsigned __int16 *)(a1 + 30) > (unsigned __int16)v15)
      {
        v8 = sub_18BBD6AB4(a1, v6);
        if ((int)v6 < v5)
        {
          v9 = v8;
          do
          {
            v6 = (v6 + 1);
            v10 = sub_18BBD6AB4(a1, v6);
            if (v10 != v9)
            {
              v11 = v10;
              ((void (*)(_QWORD, uint64_t))a2[1])(*a2, v6);
              v9 = v11;
            }
          }
          while (v5 != (_DWORD)v6);
        }
      }
      v6 = (v5 + 1);
      v5 = ucptrie_getRange(*(_QWORD *)(a1 + 32), v6, 1, 1, 0, 0, &v15);
    }
    while ((v5 & 0x80000000) == 0);
  }
  v12 = 44032;
  do
  {
    ((void (*)(_QWORD, uint64_t))a2[1])(*a2, v12);
    ((void (*)(_QWORD, _QWORD))a2[1])(*a2, (v12 + 1));
    v13 = v12 >= 0xD788;
    v12 = (v12 + 28);
  }
  while (!v13);
  return ((uint64_t (*)(_QWORD, uint64_t))a2[1])(*a2, 55204);
}

uint64_t icu::Normalizer2Impl::addCanonIterPropertyStarts(icu::Normalizer2Impl *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t result;
  int v6;
  uint64_t v7;
  int v8;

  result = icu::Normalizer2Impl::ensureCanonIterData(a1, a3);
  if ((_DWORD)result)
  {
    v8 = 0;
    result = ucptrie_getRange(*(_QWORD *)(*((_QWORD *)a1 + 9) + 8), 0, 0, 0, (uint64_t)sub_18BBD8AD4, 0, &v8);
    if ((result & 0x80000000) == 0)
    {
      v6 = result;
      v7 = 0;
      do
      {
        (*(void (**)(_QWORD, uint64_t))(a2 + 8))(*(_QWORD *)a2, v7);
        v7 = (v6 + 1);
        result = ucptrie_getRange(*(_QWORD *)(*((_QWORD *)a1 + 9) + 8), v7, 0, 0, (uint64_t)sub_18BBD8AD4, 0, &v8);
        v6 = result;
      }
      while ((result & 0x80000000) == 0);
    }
  }
  return result;
}

BOOL icu::Normalizer2Impl::ensureCanonIterData(icu::Normalizer2Impl *this, UErrorCode *a2)
{
  unsigned int *v4;
  unsigned int v5;
  UErrorCode v6;

  if (*(int *)a2 <= 0)
  {
    v4 = (unsigned int *)((char *)this + 64);
    v5 = atomic_load((unsigned int *)this + 16);
    if (v5 == 2 || !icu::umtx_initImplPreInit((unsigned int *)this + 16))
    {
      v6 = *((_DWORD *)this + 17);
      if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
        *a2 = v6;
    }
    else
    {
      sub_18BBDE018((uint64_t)this, (int *)a2);
      *((UErrorCode *)this + 17) = *a2;
      icu::umtx_initImplPostInit(v4);
    }
  }
  return *a2 < U_ILLEGAL_ARGUMENT_ERROR;
}

uint64_t sub_18BBD8AD4(uint64_t a1, int a2)
{
  return a2 & 0x80000000;
}

uint64_t icu::Normalizer2Impl::copyLowPrefixFromNulTerminated(int a1, UChar *a2, int a3, UChar **this, UErrorCode *a5)
{
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;

  v5 = 0;
  do
  {
    v6 = a2[v5++];
    if (v6)
      v7 = v6 < a3;
    else
      v7 = 0;
  }
  while (v7);
  v8 = (uint64_t)&a2[v5 - 1];
  if (this && v5 != 1)
    icu::ReorderingBuffer::appendZeroCC(this, a2, &a2[v5 - 1], a5);
  return v8;
}

icu::UnicodeString *icu::Normalizer2Impl::decompose(UChar *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  unint64_t v5;
  UChar *v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;

  if (*(int *)a4 >= 1)
    goto LABEL_4;
  v5 = *((unsigned __int16 *)a2 + 4);
  if ((v5 & 0x11) != 0)
    goto LABEL_3;
  v7 = (UChar *)((char *)a2 + 10);
  if ((v5 & 2) == 0)
    v7 = (UChar *)*((_QWORD *)a2 + 3);
  if (a3 == a2 || !v7)
  {
LABEL_3:
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_4:
    icu::UnicodeString::setToBogus(a3);
    return a3;
  }
  v8 = (__int16)v5;
  v9 = v5 >> 5;
  v10 = v8 < 0;
  if (v8 >= 0)
    v11 = v9;
  else
    v11 = *((int *)a2 + 3);
  if (v10)
    v12 = *((_DWORD *)a2 + 3);
  else
    v12 = v9;
  icu::Normalizer2Impl::decompose(this, v7, &v7[v11], a3, v12, a4);
  return a3;
}

UChar *icu::Normalizer2Impl::decompose(UChar *a1, UChar *a2, UChar *a3, icu::UnicodeString *a4, int a5, UErrorCode *a6)
{
  int v11;
  __int16 v12;
  UChar *result;
  UChar *v14;
  icu::UnicodeString *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (a5 >= 0 || a3 == 0)
    v11 = a5;
  else
    v11 = (unint64_t)((char *)a3 - (char *)a2) >> 1;
  v12 = *((_WORD *)a4 + 4) & 0x1F;
  if ((*((_WORD *)a4 + 4) & 1) != 0)
    v12 = 2;
  *((_WORD *)a4 + 4) = v12;
  v17 = 0u;
  v18 = 0u;
  v14 = a1;
  v15 = a4;
  v16 = 0u;
  *(_QWORD *)((char *)&v17 + 5) = 0;
  result = (UChar *)icu::ReorderingBuffer::init((icu::ReorderingBuffer *)&v14, v11, a6);
  if ((_DWORD)result)
    result = icu::Normalizer2Impl::decompose((uint64_t)a1, a2, a3, &v14, a6);
  if ((_QWORD)v16)
    return (UChar *)icu::UnicodeString::releaseBuffer((uint64_t)v15, ((_QWORD)v17 - (_QWORD)v16) >> 1);
  return result;
}

UChar *icu::Normalizer2Impl::decompose(uint64_t a1, UChar *src, UChar *a3, UChar **this, UErrorCode *a5)
{
  int *v5;
  unsigned int v8;
  UChar *v9;
  UChar *v10;
  unsigned int v11;
  UChar *v12;
  UErrorCode *v13;
  UChar *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  UChar *v20;
  int v21;
  int v22;
  int appended;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  __int16 v29;
  UChar *v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  UChar *v35;
  unsigned __int8 v36;
  icu::ReorderingBuffer *v37;

  v5 = (int *)a5;
  v8 = *(unsigned __int16 *)(a1 + 8);
  if (a3)
  {
    v9 = a3;
    v10 = src;
  }
  else
  {
    v31 = 0;
    do
    {
      v32 = src[v31++];
      if (v32)
        v33 = v32 >= v8;
      else
        v33 = 1;
    }
    while (!v33);
    v10 = &src[v31 - 1];
    if (this && v31 != 1)
      icu::ReorderingBuffer::appendZeroCC(this, src, &src[v31 - 1], a5);
    if (*v5 > 0)
      return v10;
    v9 = u_strchr(v10, 0);
  }
  LOWORD(v11) = 0;
  v36 = 0;
  v12 = v10;
  v35 = v10;
  v37 = (icu::ReorderingBuffer *)this;
  while (2)
  {
    v10 = v12;
    while (2)
    {
      if (v10 == v9)
        return v9;
      v13 = (UErrorCode *)v5;
      v14 = v10;
      while (1)
      {
        v15 = *v14;
        if (v15 >= v8)
        {
          v16 = *(_QWORD *)(a1 + 32);
          v17 = *(_QWORD *)(v16 + 8);
          v11 = *(unsigned __int16 *)(v17
                                    + 2 * ((v15 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v16 + ((v15 >> 5) & 0x7FE))));
          v18 = *(unsigned __int16 *)(a1 + 14);
          if ((v11 & 0xFFFFFDFF) != 0xFC00 && v18 <= v11)
            break;
        }
        v20 = v14 + 1;
LABEL_14:
        v14 = v20;
        if (v20 == v9)
          goto LABEL_28;
      }
      if ((v15 & 0xFC00) != 0xD800)
        goto LABEL_29;
      v20 = v14 + 1;
      if (v14 + 1 != v9)
      {
        v21 = *v20;
        if ((v21 & 0xFC00) == 0xDC00)
        {
          LODWORD(v15) = v21 + ((_DWORD)v15 << 10) - 56613888;
          if ((int)v15 >= *(_DWORD *)(v16 + 24))
          {
            v22 = *(_DWORD *)(v16 + 20) - 2;
          }
          else
          {
            v22 = ucptrie_internalSmallIndex((uint64_t *)v16, v15);
            v18 = *(unsigned __int16 *)(a1 + 14);
          }
          v11 = *(unsigned __int16 *)(v17 + 2 * v22);
          if ((v11 & 0xFFFFFDFF) != 0xFC00 && v18 <= v11)
            goto LABEL_29;
          v20 = v14 + 2;
        }
        goto LABEL_14;
      }
LABEL_28:
      v14 = v9;
LABEL_29:
      v5 = (int *)v13;
      if (v14 == v10)
      {
        if (v10 == v9)
          return v9;
        v26 = 2;
        if (v15 < 0x10000)
          v26 = 1;
        v10 = &v14[v26];
        if (v37)
        {
LABEL_40:
          if (!icu::Normalizer2Impl::decompose((icu::Normalizer2Impl *)a1, v15, (unsigned __int16)v11, (UChar **)v37, v13))return v10;
          continue;
        }
        v12 = &v14[v26];
        v10 = v35;
        v27 = v36;
        goto LABEL_47;
      }
      break;
    }
    if (!v37)
    {
      if (v14 == v9)
        return v9;
      v27 = 0;
      v28 = 2;
      if (v15 < 0x10000)
        v28 = 1;
      v12 = &v14[v28];
      v10 = v14;
LABEL_47:
      if (*(unsigned __int16 *)(a1 + 14) <= (unsigned __int16)v11
        && *(unsigned __int16 *)(a1 + 30) > (unsigned __int16)v11)
      {
        return v10;
      }
      v29 = (unsigned __int16)v11 >> 1;
      if ((unsigned __int16)((unsigned __int16)v11 >> 10) <= 0x3Eu)
        LOBYTE(v29) = 0;
      v30 = (v29 & 0xFE) != 0 ? v10 : v12;
      v35 = v30;
      v36 = v29;
      if ((_BYTE)v29)
      {
        if (v27 > v29)
          return v10;
      }
      continue;
    }
    break;
  }
  appended = icu::ReorderingBuffer::appendZeroCC((UChar **)v37, v10, v14, v13);
  if (v14 != v9 && appended)
  {
    v25 = 2;
    if (v15 < 0x10000)
      v25 = 1;
    v10 = &v14[v25];
    goto LABEL_40;
  }
  return v14;
}

uint64_t icu::Normalizer2Impl::decompose(icu::Normalizer2Impl *this, signed int a2, unsigned int a3, UChar **a4, UErrorCode *a5)
{
  unsigned int v7;
  unsigned int v9;
  icu::ReorderingBuffer *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned __int16 *v16;
  unsigned int v17;
  unsigned __int8 v18;
  UChar src[2];
  __int16 v20;

  v7 = a2;
  if (*((unsigned __int16 *)this + 13) <= a3)
  {
    if (*((unsigned __int16 *)this + 15) <= a3)
    {
      v14 = a3 >> 1;
      if (a3 >> 10 <= 0x3E)
        LOBYTE(v14) = 0;
      v11 = v14;
      v10 = (icu::ReorderingBuffer *)a4;
      return sub_18BBD8480(v10, a2, v11, a5);
    }
    v7 = a2 + (a3 >> 3) - *((unsigned __int16 *)this + 14);
    a3 = sub_18BBD840C((uint64_t)this, v7);
  }
  v9 = *((unsigned __int16 *)this + 7);
  if (a3 < v9)
  {
    v10 = (icu::ReorderingBuffer *)a4;
    a2 = v7;
    v11 = 0;
    return sub_18BBD8480(v10, a2, v11, a5);
  }
  if (v9 == a3 || (*((unsigned __int16 *)this + 8) | 1) == a3)
  {
    v20 = 0;
    v12 = (int)(v7 - 44032) % 28;
    src[0] = (__int16)(v7 + 21504) / 588 + 4352;
    src[1] = (int)(v7 - 44032) / 28 % 21 + 4449;
    if (v12)
    {
      v20 = v12 + 4519;
      v13 = 3;
    }
    else
    {
      v13 = 2;
    }
    return icu::ReorderingBuffer::appendZeroCC(a4, src, &src[v13], a5);
  }
  else
  {
    v16 = (unsigned __int16 *)(*((_QWORD *)this + 6) + ((unsigned __int16)a3 & 0xFFFE));
    v17 = *v16;
    if ((v17 & 0x80) != 0)
      v18 = *((_BYTE *)v16 - 1);
    else
      v18 = 0;
    return icu::ReorderingBuffer::append((icu::ReorderingBuffer *)a4, v16 + 1, v17 & 0x1F, 1, v18, v17 >> 8, a5);
  }
}

unsigned __int16 *icu::Normalizer2Impl::decomposeShort(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, int a4, int a5, UChar **a6, UErrorCode *a7)
{
  unsigned __int16 *v7;
  unint64_t v14;
  unsigned __int16 *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;

  if (*(int *)a7 > 0)
    return 0;
  v7 = a2;
  if (a2 < a3)
  {
    do
    {
      v14 = *v7;
      if (a4)
      {
        if (v14 < *(unsigned __int16 *)(a1 + 10))
          break;
      }
      v15 = v7 + 1;
      if ((v14 & 0xF800) == 0xD800)
      {
        if ((v14 & 0x400) != 0 || v15 == a3 || (v16 = *v15, (v16 & 0xFC00) != 0xDC00))
        {
          v17 = *(_QWORD *)(a1 + 32);
          v18 = *(_DWORD *)(v17 + 20) - 1;
        }
        else
        {
          v15 = v7 + 2;
          LODWORD(v14) = v16 + ((_DWORD)v14 << 10) - 56613888;
          v17 = *(_QWORD *)(a1 + 32);
          if ((int)v14 >= *(_DWORD *)(v17 + 24))
          {
            v18 = *(_DWORD *)(v17 + 20) - 2;
          }
          else
          {
            v18 = ucptrie_internalSmallIndex((uint64_t *)v17, v14);
            v17 = *(_QWORD *)(a1 + 32);
          }
        }
      }
      else
      {
        v17 = *(_QWORD *)(a1 + 32);
        v18 = (v14 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v17 + ((v14 >> 5) & 0x7FE));
      }
      v19 = *(_QWORD *)(v17 + 8);
      v20 = *(unsigned __int16 *)(v19 + 2 * v18);
      if (a4)
      {
        if (*(unsigned __int16 *)(a1 + 22) > v20
          || *(unsigned __int16 *)(a1 + 26) <= v20 && *(unsigned __int16 *)(a1 + 30) > v20)
        {
          return v7;
        }
        if (!icu::Normalizer2Impl::decompose((icu::Normalizer2Impl *)a1, v14, v20, a6, a7))
          return 0;
        if ((v20 & 1) != 0)
        {
          if (!a5 || v20 == 1)
            return v15;
          if (!(*(unsigned __int16 *)(a1 + 26) <= v20
               ? (v20 & 6) >= 3
               : *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + ((unsigned __int16)v20 & 0xFFFE)) >= 0x200u))
            return v15;
        }
      }
      else if (!icu::Normalizer2Impl::decompose((icu::Normalizer2Impl *)a1, v14, *(unsigned __int16 *)(v19 + 2 * v18), a6, a7))
      {
        return 0;
      }
      v7 = v15;
    }
    while (v15 < a3);
  }
  return v7;
}

unsigned __int8 *icu::Normalizer2Impl::decomposeUTF8(icu::Normalizer2Impl *this, unint64_t a2, icu::ByteSinkUtil *a3, unsigned __int8 *a4, icu::ByteSink *a5, icu::Edits *a6, UErrorCode *a7)
{
  icu::ByteSinkUtil *v8;
  uint64_t v10;
  char v11;
  unsigned __int8 v12;
  unsigned int v14;
  uint64_t *v15;
  const char *v16;
  icu::ByteSinkUtil *v17;
  const unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  _BYTE *v27;
  unsigned int v28;
  uint64_t v29;
  icu::Edits *v30;
  icu::ByteSink *v31;
  UErrorCode *v32;
  unsigned int v33;
  icu::ByteSinkUtil *v35;
  uint64_t *v36;
  icu::ByteSinkUtil *v37;
  icu::ByteSink *v38;
  icu::Edits *v39;
  UErrorCode *v40;
  unsigned int v41;
  UErrorCode *v42;
  int v43;
  uint64_t Buffer;
  int v45;
  UErrorCode v46;
  int v47;
  UErrorCode v48;
  unsigned int v49;
  UErrorCode *v51;
  icu::Edits *v52;
  const char *v53;
  int appended;
  _BOOL4 v55;
  unsigned int v57;
  unsigned int v58;
  UErrorCode *v59;
  icu::Edits *v60;
  unsigned int v61;
  unsigned int v62;
  icu::ByteSink *v63;
  icu::ByteSink *v64;
  icu::ByteSink *v65;
  icu::Normalizer2Impl *v66;
  icu::UnicodeString *v67;
  uint64_t v68[2];
  uint64_t v69;
  int v70;
  unsigned __int8 v71;
  void (**v72)(icu::UnicodeString *__hidden);
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;

  v8 = a3;
  v77 = *MEMORY[0x1E0C80C00];
  v73 = 0u;
  v76 = 0;
  v75 = 0u;
  v74 = 0u;
  v72 = off_1E2256B38;
  LOWORD(v73) = 2;
  v10 = *((unsigned __int16 *)this + 4);
  if (v10 <= 0x7FF)
    v11 = (v10 >> 6) - 64;
  else
    v11 = -32;
  if (v10 <= 0x7F)
    v12 = *((_WORD *)this + 4);
  else
    v12 = v11;
  if (a3 == (icu::ByteSinkUtil *)a4)
  {
    v19 = (unsigned __int8 *)a3;
    if (a5)
    {
LABEL_100:
      if (v8 != (icu::ByteSinkUtil *)a4)
        icu::ByteSinkUtil::appendUnchanged(v8, a4, (const unsigned __int8 *)a5, (icu::ByteSink *)a2, a6, (icu::Edits *)a7, a7);
    }
    goto LABEL_102;
  }
  v14 = 0;
  v10 = (uint64_t)&v66;
  v15 = v68;
  v16 = " 000000000000\x1000";
  v17 = a3;
  while (2)
  {
    v18 = (const unsigned __int8 *)v17;
    v19 = (unsigned __int8 *)v17;
    while (1)
    {
      v21 = *v19++;
      v20 = v21;
      if (v21 >= v12)
        break;
LABEL_38:
      v18 = v19;
      if (v19 == a4)
        goto LABEL_97;
    }
    if ((v20 & 0x80) == 0)
      goto LABEL_33;
    v22 = a4;
    if (v19 == a4)
      goto LABEL_32;
    if (v20 < 0xE0)
    {
      if (v20 >= 0xC2)
      {
        v25 = *v19 ^ 0x80;
        if (v25 <= 0x3F)
        {
          v20 = *(unsigned __int16 *)(**((_QWORD **)this + 4) + 2 * (v20 & 0x1F)) + v25;
          goto LABEL_22;
        }
      }
    }
    else if (v20 > 0xEF)
    {
      if (v20 <= 0xF4)
      {
        v26 = *v19;
        v22 = v19;
        if (((byte_18BDD50F4[v26 >> 4] >> (v20 + 16)) & 1) == 0)
          goto LABEL_32;
        v27 = v18 + 2;
        v22 = a4;
        if (v18 + 2 == a4)
          goto LABEL_32;
        v22 = (unsigned __int8 *)(v18 + 2);
        if ((*v27 ^ 0x80u) > 0x3F)
          goto LABEL_32;
        v19 = (unsigned __int8 *)(v18 + 3);
        v22 = a4;
        if (v18 + 3 == a4)
          goto LABEL_32;
        if ((*v19 ^ 0x80u) <= 0x3F)
        {
          v28 = v26 & 0x3F | ((v20 - 240) << 6);
          v29 = *((_QWORD *)this + 4);
          if (v28 >= *(unsigned __int16 *)(v29 + 28))
          {
            v20 = *(_DWORD *)(v29 + 20) - 2;
          }
          else
          {
            v30 = a6;
            v61 = a2;
            v31 = a5;
            v63 = (icu::ByteSink *)v15;
            v32 = a7;
            v57 = v14;
            v20 = ucptrie_internalSmallU8Index(v29, v28, *v27 ^ 0x80u, *v19 ^ 0x80u);
            v14 = v57;
            v16 = " 000000000000\x1000";
            a7 = v32;
            v15 = (uint64_t *)v63;
            a5 = v31;
            a2 = v61;
            a6 = v30;
          }
          goto LABEL_22;
        }
      }
    }
    else
    {
      v23 = *v19;
      v22 = v19;
      if (((v16[v20 & 0xF] >> (*v19 >> 5)) & 1) == 0)
        goto LABEL_32;
      v19 = (unsigned __int8 *)(v18 + 2);
      v22 = a4;
      if (v18 + 2 == a4)
        goto LABEL_32;
      v24 = *v19 ^ 0x80;
      if (v24 <= 0x3F)
      {
        v20 = *(unsigned __int16 *)(**((_QWORD **)this + 4) + 2 * (v23 & 0x3F | ((v20 & 0xF) << 6)))
            + v24;
LABEL_22:
        ++v19;
        goto LABEL_33;
      }
    }
    v22 = v19;
LABEL_32:
    v20 = *(_DWORD *)(*((_QWORD *)this + 4) + 20) - 1;
    v19 = v22;
LABEL_33:
    v33 = *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 2 * (int)v20);
    v10 = *((unsigned __int16 *)this + 7);
    if ((v33 & 0xFFFFFDFF) == 0xFC00 || v10 > v33)
      goto LABEL_38;
    v62 = a2;
    if (v18 == (const unsigned __int8 *)v17)
      v35 = v8;
    else
      v35 = (icu::ByteSinkUtil *)v18;
    if (v18 != (const unsigned __int8 *)v17)
    {
      v14 = 0;
      if (a5)
      {
        v36 = v15;
        v37 = v8;
        v38 = a5;
        v39 = a6;
        v40 = a7;
        if (!icu::ByteSinkUtil::appendUnchanged(v37, v18, (const unsigned __int8 *)a5, (icu::ByteSink *)v62, a6, (icu::Edits *)a7, a7))break;
        v14 = 0;
        v35 = (icu::ByteSinkUtil *)v18;
        a6 = v39;
        a5 = v38;
        a7 = v40;
        v15 = v36;
        v16 = " 000000000000\x1000";
      }
    }
    v10 = *((unsigned __int16 *)this + 15);
    if (v10 <= v33)
    {
      v10 = v33 >> 1;
      v41 = v33 >> 10 <= 0x3E ? 0 : v33 >> 1;
      if (!(_BYTE)v41 || v14 <= v41)
      {
        if ((v41 & 0xFE) != 0)
          v14 = v33 >> 1;
        else
          v14 = v41;
        if ((v41 & 0xFE) != 0)
          v8 = v35;
        else
          v8 = (icu::ByteSinkUtil *)v19;
        if (v41 > 1u || a5 == 0)
        {
          a2 = v62;
        }
        else
        {
          v65 = a5;
          v51 = a7;
          v52 = a6;
          v53 = v16;
          appended = icu::ByteSinkUtil::appendUnchanged(v35, v19, (const unsigned __int8 *)a5, (icu::ByteSink *)v62, a6, (icu::Edits *)a7, a7);
          v16 = v53;
          a5 = v65;
          a6 = v52;
          v14 = v41;
          a2 = v62;
          a7 = v51;
          v8 = (icu::ByteSinkUtil *)v19;
          if (!appended)
            break;
        }
        goto LABEL_73;
      }
    }
    if (!a5)
    {
      v19 = (unsigned __int8 *)v35;
      break;
    }
    v58 = v14;
    v64 = a5;
    v59 = a7;
    v60 = a6;
    v8 = (icu::ByteSinkUtil *)v18;
    a2 = v62;
    if (v35 == (icu::ByteSinkUtil *)v18
      || (v8 = v35, !icu::Normalizer2Impl::norm16HasDecompBoundaryBefore(this, v33))
      || (v43 = icu::ByteSinkUtil::appendUnchanged(v8, v18, (const unsigned __int8 *)v64, (icu::ByteSink *)v62, v60, (icu::Edits *)v59, v42), v8 = (icu::ByteSinkUtil *)v18, v43))
    {
      *((_OWORD *)v15 + 1) = 0u;
      *((_OWORD *)v15 + 2) = 0u;
      *(_OWORD *)v15 = 0u;
      v66 = this;
      v67 = (icu::UnicodeString *)&v72;
      Buffer = icu::UnicodeString::getBuffer((icu::UnicodeString *)&v72, 8);
      v68[0] = Buffer;
      v68[1] = Buffer;
      v69 = Buffer;
      if ((*((_BYTE *)v67 + 8) & 2) != 0)
        v45 = 27;
      else
        v45 = *((_DWORD *)v67 + 4);
      a7 = v59;
      a6 = v60;
      v16 = " 000000000000\x1000";
      v14 = v58;
      v70 = v45;
      v71 = 0;
      v46 = *v59;
      a5 = v64;
      if (!Buffer && v46 <= U_ZERO_ERROR)
      {
        v47 = 0;
        v48 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_64;
      }
      if (v46 > U_ZERO_ERROR)
        goto LABEL_69;
      icu::Normalizer2Impl::decomposeShort((uint64_t)this, v8, v19, 0, 0, (icu::ReorderingBuffer *)&v66, v59);
      if (v71 >= 2u)
        v19 = icu::Normalizer2Impl::decomposeShort((uint64_t)this, v19, a4, 1, 0, (icu::ReorderingBuffer *)&v66, v59);
      a6 = v60;
      a5 = v64;
      a7 = v59;
      v16 = " 000000000000\x1000";
      v14 = v58;
      if (*(int *)v59 > 0)
      {
LABEL_69:
        v47 = 0;
        goto LABEL_70;
      }
      if (v19 - v18 >= 0x80000000)
      {
        v47 = 0;
        v48 = U_INDEX_OUTOFBOUNDS_ERROR;
LABEL_64:
        *a7 = v48;
LABEL_70:
        v10 = v68[0];
        if (v68[0])
        {
          v49 = v14;
          icu::UnicodeString::releaseBuffer((uint64_t)v67, (unint64_t)(v69 - v68[0]) >> 1);
          v14 = v49;
          v16 = " 000000000000\x1000";
          a7 = v59;
          a6 = v60;
          a5 = v64;
        }
        if (!v47)
          break;
LABEL_73:
        v17 = (icu::ByteSinkUtil *)v19;
        if (v19 != a4)
          continue;
LABEL_97:
        v19 = a4;
        if (a5)
          goto LABEL_100;
        break;
      }
      if (*((unsigned __int16 *)this + 15) <= v33
        && (v55 = icu::ReorderingBuffer::equals((icu::ReorderingBuffer *)&v66, (const unsigned __int8 *)v8, v19),
            a7 = v59,
            a6 = v60,
            a5 = v64,
            v55))
      {
        if (!icu::ByteSinkUtil::appendUnchanged(v8, v19, (const unsigned __int8 *)v64, (icu::ByteSink *)v62, v60, (icu::Edits *)v59, v59))
        {
LABEL_94:
          v47 = 0;
          a7 = v59;
          a6 = v60;
          a5 = v64;
          v16 = " 000000000000\x1000";
          v14 = v58;
          goto LABEL_70;
        }
      }
      else if (!icu::ByteSinkUtil::appendChange((uint64_t)v8, (uint64_t)v19, v68[0], (unint64_t)(v69 - v68[0]) >> 1, (uint64_t)a5, a6, (int *)a7))
      {
        goto LABEL_94;
      }
      v14 = 0;
      v47 = 1;
      v8 = (icu::ByteSinkUtil *)v19;
      a7 = v59;
      a6 = v60;
      a5 = v64;
      v16 = " 000000000000\x1000";
      goto LABEL_70;
    }
    break;
  }
LABEL_102:
  icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v72);
  return v19;
}

BOOL icu::Normalizer2Impl::norm16HasDecompBoundaryBefore(icu::Normalizer2Impl *this, unsigned int a2)
{
  _WORD *v3;

  if (*((unsigned __int16 *)this + 11) > a2)
    return 1;
  if (*((unsigned __int16 *)this + 13) <= a2)
    return a2 < 0xFC01 || a2 == 65024;
  v3 = (_WORD *)(*((_QWORD *)this + 6) + ((unsigned __int16)a2 & 0xFFFE));
  if ((*v3 & 0x80) == 0)
    return 1;
  return (unsigned __int16)*(v3 - 1) < 0x100u;
}

_BYTE *icu::Normalizer2Impl::decomposeShort(uint64_t a1, _BYTE *a2, _BYTE *a3, int a4, int a5, icu::ReorderingBuffer *this, UErrorCode *a7)
{
  _BYTE *v7;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unsigned __int8 v30;
  signed int v31;
  int v32;
  unsigned __int16 *v33;
  unsigned int v34;
  unsigned __int8 v35;
  BOOL v36;
  _BOOL4 v38;
  UChar src[2];
  __int16 v40;

  if (*(int *)a7 <= 0)
  {
    v7 = a2;
    if (a2 >= a3)
      return v7;
    v38 = a4 != 1;
    while (1)
    {
      v14 = v7 + 1;
      v15 = *v7;
      if ((char)*v7 < 0)
      {
        v16 = a3;
        if (v14 == a3)
          goto LABEL_26;
        if (v15 < 0xE0)
        {
          if (v15 < 0xC2 || (v20 = *v14 ^ 0x80, v20 > 0x3F))
          {
LABEL_25:
            v16 = v14;
LABEL_26:
            v15 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 20) - 1;
            v14 = v16;
            goto LABEL_27;
          }
          v15 = *(unsigned __int16 *)(**(_QWORD **)(a1 + 32) + 2 * (*v7 & 0x1F)) + v20;
        }
        else if (v15 > 0xEF)
        {
          if (v15 > 0xF4)
            goto LABEL_25;
          v21 = *v14;
          v16 = v7 + 1;
          if (((byte_18BDD50F4[v21 >> 4] >> (v15 + 16)) & 1) == 0)
            goto LABEL_26;
          v22 = v7 + 2;
          v16 = a3;
          if (v7 + 2 == a3)
            goto LABEL_26;
          v16 = v7 + 2;
          if ((*v22 ^ 0x80u) > 0x3F)
            goto LABEL_26;
          v14 = v7 + 3;
          v16 = a3;
          if (v7 + 3 == a3)
            goto LABEL_26;
          if ((*v14 ^ 0x80u) > 0x3F)
            goto LABEL_25;
          v23 = v21 & 0x3F | ((v15 - 240) << 6);
          v24 = *(_QWORD *)(a1 + 32);
          if (v23 >= *(unsigned __int16 *)(v24 + 28))
            v15 = *(_DWORD *)(v24 + 20) - 2;
          else
            v15 = ucptrie_internalSmallU8Index(v24, v23, *v22 ^ 0x80u, *v14 ^ 0x80u);
        }
        else
        {
          v17 = *v7 & 0xF;
          v18 = *v14;
          v16 = v7 + 1;
          if (((a00000000000000[v17] >> (*v14 >> 5)) & 1) == 0)
            goto LABEL_26;
          v14 = v7 + 2;
          v16 = a3;
          if (v7 + 2 == a3)
            goto LABEL_26;
          v19 = *v14 ^ 0x80;
          if (v19 > 0x3F)
            goto LABEL_25;
          v15 = *(unsigned __int16 *)(**(_QWORD **)(a1 + 32) + 2 * (v18 & 0x3Fu | ((_DWORD)v17 << 6))) + v19;
        }
        ++v14;
      }
LABEL_27:
      v25 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 2 * (int)v15);
      if (v25 >= *(unsigned __int16 *)(a1 + 26))
      {
        if (*(unsigned __int16 *)(a1 + 30) > v25)
        {
          if (a4)
            return v7;
          v26 = sub_18BBD9EFC((unint64_t)v7, (uint64_t)v14) + (v25 >> 3) - *(unsigned __int16 *)(a1 + 28);
          v25 = sub_18BBD840C(a1, v26);
          goto LABEL_34;
        }
        if (v25 >> 10 <= 0x3E)
          v30 = 0;
        else
          v30 = v25 >> 1;
        if (a4 == 1 && !v30)
          return v7;
        v31 = sub_18BBD9EFC((unint64_t)v7, (uint64_t)v14);
        if (!sub_18BBD8480(this, v31, v30, a7))
          return 0;
        v32 = v38;
        if (*((unsigned __int8 *)this + 44) > 1u)
          v32 = 1;
        if (v32 != 1)
          return v14;
LABEL_77:
        v7 = v14;
        if (v14 >= a3)
          return v7;
      }
      else
      {
        if (a4 && v25 < *(unsigned __int16 *)(a1 + 22))
          return v7;
        v26 = -1;
LABEL_34:
        v27 = *(unsigned __int16 *)(a1 + 14);
        if (v25 >= v27)
        {
          if (v27 == v25 || (*(unsigned __int16 *)(a1 + 16) | 1) == v25)
          {
            if ((v26 & 0x80000000) != 0)
              v26 = sub_18BBD9EFC((unint64_t)v7, (uint64_t)v14);
            v40 = 0;
            v28 = (int)(v26 - 44032) % 28;
            src[0] = (__int16)(v26 + 21504) / 588 + 4352;
            src[1] = (int)(v26 - 44032) / 28 % 21 + 4449;
            if (v28)
            {
              v40 = v28 + 4519;
              v29 = 3;
            }
            else
            {
              v29 = 2;
            }
            if (!icu::ReorderingBuffer::appendZeroCC((UChar **)this, src, &src[v29], a7))
              return 0;
          }
          else
          {
            v33 = (unsigned __int16 *)(*(_QWORD *)(a1 + 48) + ((unsigned __int16)v25 & 0xFFFE));
            v34 = *v33;
            if ((v34 & 0x80) != 0)
              v35 = *((_BYTE *)v33 - 1);
            else
              v35 = 0;
            if (a4 == 1 && !v35)
              return v7;
            if (!icu::ReorderingBuffer::append(this, v33 + 1, v34 & 0x1F, 1, v35, v34 >> 8, a7))
              return 0;
          }
        }
        else
        {
          if ((v26 & 0x80000000) != 0)
            v26 = sub_18BBD9EFC((unint64_t)v7, (uint64_t)v14);
          if (!sub_18BBD8480(this, v26, 0, a7))
            return 0;
        }
        if (a4 == 1)
        {
          if (*((unsigned __int8 *)this + 44) < 2u)
            return v14;
          goto LABEL_77;
        }
        if (a4 != 2 || (v25 & 1) == 0)
          goto LABEL_77;
        if (!a5 || v25 == 1)
          return v14;
        if (*(unsigned __int16 *)(a1 + 26) <= v25)
        {
          if ((v25 & 6) < 3)
            return v14;
          goto LABEL_77;
        }
        v36 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + ((unsigned __int16)v25 & 0xFFFE)) < 0x200u || v14 >= a3;
        v7 = v14;
        if (v36)
          return v7;
      }
    }
  }
  return 0;
}

uint64_t sub_18BBD9EFC(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  unsigned __int8 v5;
  unsigned __int8 v6;
  int v7;

  v2 = ~a1 + a2;
  result = *(unsigned __int8 *)a1;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
      return *(_BYTE *)(a1 + 1) & 0x3F | ((result & 0x1F) << 6);
    case 2:
      v5 = *(_BYTE *)(a1 + 1);
      v6 = *(_BYTE *)(a1 + 2);
      v7 = ((result & 0xF) << 12) | ((v5 & 0x3F) << 6);
      return v7 & 0xFFFFFFC0 | v6 & 0x3F;
    case 3:
      v7 = ((result & 7) << 18) | ((*(_BYTE *)(a1 + 1) & 0x3F) << 12) | ((*(_BYTE *)(a1 + 2) & 0x3F) << 6);
      v6 = *(_BYTE *)(a1 + 3);
      return v7 & 0xFFFFFFC0 | v6 & 0x3F;
    default:
      abort();
  }
}

_WORD *icu::Normalizer2Impl::getDecomposition(uint64_t a1, signed int a2, _WORD *a3, int *a4)
{
  unsigned int v6;
  unsigned int v8;
  _WORD *v9;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  __int16 *v16;
  __int16 v17;

  if (*(unsigned __int16 *)(a1 + 8) > a2)
    return 0;
  v6 = a2;
  v8 = sub_18BBD79D4(a1, a2);
  if (*(unsigned __int16 *)(a1 + 30) <= v8)
    return 0;
  if (*(unsigned __int16 *)(a1 + 26) <= v8)
  {
    v6 = v6 + (v8 >> 3) - *(unsigned __int16 *)(a1 + 28);
    if (HIWORD(v6))
    {
      v12 = (v6 >> 10) - 10304;
      a3[1] = v6 & 0x3FF | 0xDC00;
      v11 = 2;
    }
    else
    {
      v11 = 1;
      LOWORD(v12) = v6;
    }
    *a4 = v11;
    *a3 = v12;
    v8 = sub_18BBD840C(a1, v6);
    v9 = a3;
  }
  else
  {
    v9 = 0;
  }
  v13 = *(unsigned __int16 *)(a1 + 14);
  if (v8 >= v13)
  {
    if (v13 == v8 || (*(unsigned __int16 *)(a1 + 16) | 1) == v8)
    {
      v14 = (int)(v6 - 44032) % 28;
      *a3 = (__int16)(v6 + 21504) / 588 + 4352;
      a3[1] = (int)(v6 - 44032) / 28 % 21 + 4449;
      if (v14)
      {
        a3[2] = v14 + 4519;
        v15 = 3;
      }
      else
      {
        v15 = 2;
      }
      *a4 = v15;
      return a3;
    }
    else
    {
      v16 = (__int16 *)(*(_QWORD *)(a1 + 48) + ((unsigned __int16)v8 & 0xFFFE));
      v17 = *v16;
      v9 = v16 + 1;
      *a4 = v17 & 0x1F;
    }
  }
  return v9;
}

unsigned __int16 *icu::Normalizer2Impl::getRawDecomposition(uint64_t a1, signed int a2, _WORD *a3, int *a4)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  __int16 v11;
  int v12;
  int v13;
  BOOL v14;
  __int16 v15;
  int v16;
  unsigned __int16 *v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unsigned int v25;

  if (*(unsigned __int16 *)(a1 + 8) > a2)
    return 0;
  v8 = sub_18BBD79D4(a1, a2);
  v9 = *(unsigned __int16 *)(a1 + 14);
  if (v9 > v8 || *(unsigned __int16 *)(a1 + 30) <= v8)
    return 0;
  if (v9 == v8 || (*(unsigned __int16 *)(a1 + 16) | 1) == v8)
  {
    v10 = (a2 - 44032) % 28;
    v11 = a2 - v10;
    v12 = (a2 - 44032) / 588 + 4352;
    v13 = (a2 - 44032) / 28 % 21;
    v14 = v10 == 0;
    if (v10)
    {
      LOWORD(v13) = (a2 - 44032) % 28;
      v15 = 4519;
    }
    else
    {
      v15 = 4449;
    }
    if (!v14)
      LOWORD(v12) = v11;
    *a3 = v12;
    a3[1] = v15 + v13;
    v16 = 2;
LABEL_12:
    *a4 = v16;
    return a3;
  }
  if (*(unsigned __int16 *)(a1 + 26) > v8)
  {
    v18 = (unsigned __int16 *)(*(_QWORD *)(a1 + 48) + ((unsigned __int16)v8 & 0xFFFE));
    v19 = *v18;
    v20 = v19 & 0x1F;
    if ((v19 & 0x40) == 0)
    {
      *a4 = v20;
      return v18 + 1;
    }
    v22 = &v18[-((v19 >> 7) & 1)];
    v25 = *(v22 - 1);
    v24 = v22 - 1;
    v23 = v25;
    if (v25 <= 0x1FuLL)
    {
      *a4 = v23;
      return &v24[-v23];
    }
    *a3 = v23;
    u_memcpy(a3 + 1, v18 + 3, v20 - 2);
    v16 = v20 - 1;
    goto LABEL_12;
  }
  v21 = a2 + (v8 >> 3) - *(unsigned __int16 *)(a1 + 28);
  if (HIWORD(v21))
  {
    *a3 = (v21 >> 10) - 10304;
    *a4 = 2;
    a3[1] = v21 & 0x3FF | 0xDC00;
  }
  else
  {
    *a4 = 1;
    *a3 = v21;
  }
  return a3;
}

UChar *icu::Normalizer2Impl::decomposeAndAppend(uint64_t a1, UChar *a2, UChar *a3, int a4, icu::UnicodeString *this, UChar **a6, UErrorCode *a7)
{
  UChar *result;
  unsigned __int8 v14;
  unsigned __int8 v15;
  char v16;
  UChar *v17;
  UChar *v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  signed int v23;
  int v24;
  unsigned int v25;
  _WORD *v26;

  sub_18BBDA544((uint64_t)a6, this);
  if (a4)
    return icu::Normalizer2Impl::decompose(a1, a2, a3, a6, a7);
  if (a2 != a3)
  {
    v14 = 0;
    v15 = 0;
    v16 = 1;
    v17 = a2;
    v18 = a2;
    while (1)
    {
      v20 = *v18++;
      v19 = v20;
      if ((v20 & 0xF800) == 0xD800)
      {
        if ((v19 & 0x400) != 0 || v18 == a3)
        {
          v22 = *(_QWORD *)(a1 + 32);
        }
        else
        {
          v21 = *v18;
          v22 = *(_QWORD *)(a1 + 32);
          if ((v21 & 0xFC00) == 0xDC00)
          {
            v18 = v17 + 2;
            v23 = v21 + ((_DWORD)v19 << 10) - 56613888;
            if (v23 >= *(_DWORD *)(v22 + 24))
            {
              v24 = *(_DWORD *)(v22 + 20) - 2;
            }
            else
            {
              v24 = ucptrie_internalSmallIndex((uint64_t *)v22, v23);
              v22 = *(_QWORD *)(a1 + 32);
            }
            goto LABEL_14;
          }
        }
        v24 = *(_DWORD *)(v22 + 20) - 1;
      }
      else
      {
        v22 = *(_QWORD *)(a1 + 32);
        v24 = (v19 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v22 + ((v19 >> 5) & 0x7FE));
      }
LABEL_14:
      v25 = *(unsigned __int16 *)(*(_QWORD *)(v22 + 8) + 2 * v24);
      if (v25 >> 10 < 0x3F)
      {
        if (*(unsigned __int16 *)(a1 + 18) > v25)
          goto LABEL_27;
        if (*(unsigned __int16 *)(a1 + 26) <= v25)
          goto LABEL_27;
        v26 = (_WORD *)(*(_QWORD *)(a1 + 48) + ((unsigned __int16)v25 & 0xFFFE));
        if ((*v26 & 0x80) == 0)
          goto LABEL_27;
        LOWORD(v26) = *(v26 - 1);
      }
      else
      {
        LODWORD(v26) = v25 >> 1;
      }
      if (!(_BYTE)v26)
        goto LABEL_27;
      if ((v16 & 1) != 0)
        v15 = v26;
      v17 = v18;
      v14 = v26;
      v16 = 0;
      if (v18 == a3)
      {
        v14 = v26;
        v17 = a3;
        if (!a3)
          goto LABEL_28;
        goto LABEL_29;
      }
    }
  }
  v15 = 0;
  v14 = 0;
  v17 = a2;
LABEL_27:
  if (!a3)
LABEL_28:
    a3 = u_strchr(v17, 0);
LABEL_29:
  result = (UChar *)icu::ReorderingBuffer::append((icu::ReorderingBuffer *)a6, a2, (unint64_t)((char *)v17 - (char *)a2) >> 1, 0, v15, v14, a7);
  if ((_DWORD)result)
    return (UChar *)icu::ReorderingBuffer::appendZeroCC(a6, v17, a3, a7);
  return result;
}

uint64_t sub_18BBDA544(uint64_t a1, icu::UnicodeString *this)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = (unint64_t)(*(_QWORD *)(a1 + 32) - v3) >> 1;
  icu::UnicodeString::unBogus((uint64_t)this);
  v5 = *((unsigned __int16 *)this + 4);
  v6 = (__int16)v5;
  v7 = v5 >> 5;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = *((unsigned int *)this + 3);
  return icu::UnicodeString::doReplace((uint64_t)this, 0, v8, v3, 0, v4);
}

BOOL icu::Normalizer2Impl::hasDecompBoundaryBefore(icu::Normalizer2Impl *this, signed int a2)
{
  _BOOL8 result;
  int v4;
  BOOL v5;
  unsigned int v6;

  if (*((unsigned __int16 *)this + 6) > a2)
    return 1;
  if (a2 >= 0x10000
    || ((v4 = *(unsigned __int8 *)(*((_QWORD *)this + 7) + (a2 >> 8)),
         result = 1,
         *(_BYTE *)(*((_QWORD *)this + 7) + (a2 >> 8)))
      ? (v5 = ((1 << (a2 >> 5)) & v4) == 0)
      : (v5 = 1),
        !v5))
  {
    v6 = sub_18BBD79D4((uint64_t)this, a2);
    return icu::Normalizer2Impl::norm16HasDecompBoundaryBefore(this, v6);
  }
  return result;
}

BOOL icu::Normalizer2Impl::hasDecompBoundaryAfter(icu::Normalizer2Impl *this, signed int a2)
{
  unsigned int v5;

  if (*((unsigned __int16 *)this + 4) > a2)
    return 1;
  if (a2 < 0x10000
    && (!*(_BYTE *)(*((_QWORD *)this + 7) + (a2 >> 8))
     || ((1 << (a2 >> 5)) & *(unsigned __int8 *)(*((_QWORD *)this + 7) + (a2 >> 8))) == 0))
  {
    return 1;
  }
  v5 = sub_18BBD79D4((uint64_t)this, a2);
  return icu::Normalizer2Impl::norm16HasDecompBoundaryAfter(this, v5);
}

BOOL icu::Normalizer2Impl::norm16HasDecompBoundaryAfter(icu::Normalizer2Impl *this, unsigned int a2)
{
  unsigned __int16 *v3;
  unsigned int v4;
  _BOOL4 v6;

  if (*((unsigned __int16 *)this + 7) >= a2 || (*((unsigned __int16 *)this + 8) | 1) == a2)
    return 1;
  if (*((unsigned __int16 *)this + 13) <= a2)
  {
    v6 = a2 < 0xFC01 || a2 == 65024;
    if (*((unsigned __int16 *)this + 15) <= a2)
      return v6;
    else
      return (a2 & 6) < 3;
  }
  else
  {
    v3 = (unsigned __int16 *)(*((_QWORD *)this + 6) + ((unsigned __int16)a2 & 0xFFFE));
    v4 = *v3;
    if (v4 <= 0x1FF)
    {
      if (v4 < 0x100 || (v4 & 0x80) == 0)
        return 1;
      return *(v3 - 1) < 0x100u;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t icu::Normalizer2Impl::combine(icu::Normalizer2Impl *this, const unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;

  if ((int)a2 <= 13311)
  {
    v2 = 2 * ((unsigned __int16)a2 & 0x7FFF);
    while (1)
    {
      v3 = *(unsigned __int16 *)this;
      if (v2 <= v3)
        break;
      this = (icu::Normalizer2Impl *)((char *)this + 2 * (v3 & 1 | 2));
    }
    if (v2 == (v3 & 0x7FFE))
    {
      v9 = *((unsigned __int16 *)this + 1);
      if ((v3 & 1) != 0)
      {
        v10 = (_DWORD)v9 << 16;
        return v10 | *((unsigned __int16 *)this + 2);
      }
      return v9;
    }
    return 0xFFFFFFFFLL;
  }
  v4 = ((unsigned __int16)(a2 >> 9) + 13312) & 0xFFFE;
  v5 = ((unsigned __int16)a2 & 0x3FF) << 6;
  while (1)
  {
    v6 = *(unsigned __int16 *)this;
    if (v4 > v6)
    {
      v7 = v6 & 1 | 2;
      goto LABEL_12;
    }
    if (v4 != (v6 & 0x7FFE))
      return 0xFFFFFFFFLL;
    v8 = *((unsigned __int16 *)this + 1);
    if (v5 <= v8)
      break;
    if ((v6 & 0x8000) != 0)
      return 0xFFFFFFFFLL;
    v7 = 3;
LABEL_12:
    this = (icu::Normalizer2Impl *)((char *)this + 2 * v7);
  }
  if (v5 != (v8 & 0xFFC0))
    return 0xFFFFFFFFLL;
  v10 = (v8 & 0x3F) << 16;
  return v10 | *((unsigned __int16 *)this + 2);
}

icu::UnicodeSet *icu::Normalizer2Impl::addComposites(icu::Normalizer2Impl *this, const unsigned __int16 *a2, icu::UnicodeSet *a3)
{
  __int16 v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int16 v10;
  icu::UnicodeSet *result;

  do
  {
    v6 = *a2;
    v7 = a2[1];
    if ((*a2 & 1) != 0)
    {
      v8 = 3;
      v7 = a2[2] | ((v7 & 0x3F) << 16);
    }
    else
    {
      v8 = 2;
    }
    v9 = v7 >> 1;
    if ((v7 & 1) != 0)
    {
      v10 = sub_18BBD840C((uint64_t)this, v7 >> 1);
      icu::Normalizer2Impl::addComposites(this, (const unsigned __int16 *)(*((_QWORD *)this + 6)+ (v10 & 0xFFFE)+ 2 * (*(_WORD *)(*((_QWORD *)this + 6) + (v10 & 0xFFFE)) & 0x1F)+ 2), a3);
    }
    a2 += v8;
    result = icu::UnicodeSet::add(a3, v9);
  }
  while ((v6 & 0x8000) == 0);
  return result;
}

uint64_t icu::Normalizer2Impl::recompose(uint64_t this, icu::ReorderingBuffer *a2, int a3, int a4)
{
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  icu::Normalizer2Impl *v9;
  unsigned __int16 *v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  BOOL v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unint64_t v22;
  unsigned __int16 v23;
  unsigned int v24;
  _BOOL8 v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned __int16 *v30;
  unint64_t v31;
  unsigned __int16 v32;
  unint64_t v33;
  _WORD *v34;
  __int16 v35;
  unsigned int v36;
  unint64_t v37;
  unsigned __int16 v38;
  BOOL v39;
  unsigned __int16 *v40;
  int v42;
  unint64_t v43;

  v4 = (unsigned __int16 *)(*((_QWORD *)a2 + 2) + 2 * a3);
  v5 = *((_QWORD *)a2 + 4);
  if (v4 == (unsigned __int16 *)v5)
    return this;
  v6 = this;
  v40 = 0;
  v7 = 0;
  v8 = 0;
  v39 = 0;
  v42 = a4;
LABEL_3:
  while (2)
  {
    v43 = v5;
LABEL_4:
    v9 = (icu::Normalizer2Impl *)v7;
    while (1)
    {
      v10 = v4 + 1;
      v11 = *v4;
      if ((v11 & 0xF800) == 0xD800)
      {
        if ((v11 & 0x400) != 0 || v10 == (unsigned __int16 *)v5)
        {
          this = *(_QWORD *)(v6 + 32);
        }
        else
        {
          v12 = *v10;
          this = *(_QWORD *)(v6 + 32);
          if ((v12 & 0xFC00) == 0xDC00)
          {
            v4 += 2;
            v11 = (v12 + ((_DWORD)v11 << 10) - 56613888);
            if ((int)v11 >= *(_DWORD *)(this + 24))
            {
              v14 = *(_DWORD *)(this + 20) - 2;
            }
            else
            {
              v13 = ucptrie_internalSmallIndex((uint64_t *)this, v11);
              v5 = v43;
              a4 = v42;
              v14 = v13;
              this = *(_QWORD *)(v6 + 32);
            }
            goto LABEL_15;
          }
        }
        v14 = *(_DWORD *)(this + 20) - 1;
      }
      else
      {
        this = *(_QWORD *)(v6 + 32);
        v14 = (v11 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)this + ((v11 >> 5) & 0x7FE));
      }
      ++v4;
LABEL_15:
      v15 = *(unsigned __int16 *)(*(_QWORD *)(this + 8) + 2 * v14);
      if (v15 >> 10 <= 0x3E)
        v16 = 0;
      else
        v16 = v15 >> 1;
      v17 = *(unsigned __int16 *)(v6 + 30);
      v19 = v15 > 0xFE00 || v17 > v15 || v9 == 0;
      if (v19 || v8 && v8 >= v16)
        goto LABEL_29;
      if ((_DWORD)v15 == 65024)
        break;
      this = icu::Normalizer2Impl::combine(v9, (const unsigned __int16 *)v11);
      v5 = v43;
      a4 = v42;
      if ((this & 0x80000000) == 0)
      {
        v26 = this;
        v27 = this >> 1;
        v28 = -2;
        if (v11 < 0x10000)
          v28 = -1;
        v22 = (unint64_t)&v4[v28];
        v29 = (v27 - 0x10000) >> 20;
        if (v39)
        {
          if (!v29)
          {
            *v40 = (this >> 11) - 10304;
            v40[1] = (this >> 1) & 0x3FF | 0xDC00;
            goto LABEL_65;
          }
          *v40 = v27;
          if ((unint64_t)(v40 + 2) < v22)
          {
            v33 = (unint64_t)&v4[v28];
            if (v33 <= (unint64_t)(v40 + 3))
              v33 = (unint64_t)(v40 + 3);
            this = (uint64_t)memmove(v40 + 1, v40 + 2, ((v33 - (_QWORD)v40 - 5) & 0xFFFFFFFFFFFFFFFELL) + 2);
            v5 = v43;
            a4 = v42;
          }
          v39 = 0;
          v22 -= 2;
        }
        else if (v29)
        {
          v39 = 0;
          *v40 = v27;
        }
        else
        {
          if ((unint64_t)(v40 + 1) < v22)
          {
            v30 = &v4[v28];
            v31 = (unint64_t)v30;
            do
            {
              v32 = *(_WORD *)(v31 - 2);
              v31 -= 2;
              *v30 = v32;
              v30 = (unsigned __int16 *)v31;
            }
            while ((unint64_t)(v40 + 1) < v31);
          }
          v22 += 2;
          v40[1] = (this >> 1) & 0x3FF | 0xDC00;
          *v40 = (this >> 11) - 10304;
LABEL_65:
          v39 = 1;
        }
        if (v22 < (unint64_t)v4)
        {
          if ((unint64_t)v4 >= v5)
            goto LABEL_81;
          v34 = (_WORD *)v22;
          do
          {
            v35 = *v4++;
            *v34++ = v35;
          }
          while ((unint64_t)v4 < v5);
          v4 = (unsigned __int16 *)v22;
          v5 = (unint64_t)v34;
        }
        if (v4 == (unsigned __int16 *)v5)
        {
          v22 = (unint64_t)v4;
          goto LABEL_81;
        }
        v7 = 0;
        if ((v26 & 1) != 0)
        {
          v36 = v27;
          v37 = v5;
          v38 = sub_18BBD840C(v6, v36);
          v5 = v37;
          a4 = v42;
          v7 = *(_QWORD *)(v6 + 48)
             + (v38 & 0xFFFE)
             + 2 * (*(_WORD *)(*(_QWORD *)(v6 + 48) + (v38 & 0xFFFE)) & 0x1F)
             + 2;
        }
        goto LABEL_3;
      }
LABEL_29:
      if (v4 == (unsigned __int16 *)v5)
      {
        v22 = v5;
        goto LABEL_81;
      }
      v8 = v16;
      if (v16)
      {
        if (a4)
          v9 = 0;
      }
      else
      {
        v9 = 0;
        if ((unsigned __int16)(v15 + 1024) >= 0x402u)
        {
          v7 = v17 <= v15
             ? *(_QWORD *)(v6 + 40) + 2 * v15 - 2 * v17
             : *(_QWORD *)(v6 + 48) + 2 * (v15 >> 1);
          v9 = 0;
          if (v7)
          {
            v39 = (v11 & 0xFFFF0000) != 0;
            v20 = v4 - 1;
            if (v11 >= 0x10000)
              v20 = v4 - 2;
            v40 = v20;
            goto LABEL_4;
          }
        }
      }
    }
    if (v11 > 0x11A6 || (v21 = *v40 - 4352, v21 > 0x12))
    {
      v22 = (unint64_t)v4;
LABEL_58:
      v7 = 0;
      v4 = (unsigned __int16 *)v22;
      if (v22 != v5)
        continue;
    }
    else
    {
      v22 = (unint64_t)(v4 - 1);
      v23 = 28 * (v11 + 21 * v21) - 15004;
      if (v4 == (unsigned __int16 *)v5)
      {
        *v40 = v23;
      }
      else
      {
        v24 = *v4 - 4519;
        v25 = v24 < 0x1C;
        if (v24 >= 0x1C)
          LOWORD(v24) = 0;
        *v40 = v23 + v24;
        if ((unint64_t)&v4[v25] < v5)
        {
          do
          {
            *(v4 - 1) = v4[v25];
            ++v4;
          }
          while ((unint64_t)&v4[v25] < v5);
          v5 = (unint64_t)(v4 - 1);
          goto LABEL_58;
        }
      }
    }
    break;
  }
LABEL_81:
  *((_DWORD *)a2 + 10) += (*((_QWORD *)a2 + 4) - v22) >> 1;
  *((_QWORD *)a2 + 3) = v22;
  *((_QWORD *)a2 + 4) = v22;
  *((_BYTE *)a2 + 44) = 0;
  return this;
}

uint64_t icu::Normalizer2Impl::composePair(icu::Normalizer2Impl *this, unsigned int a2, const unsigned __int16 *a3)
{
  unsigned int v6;
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  icu::Normalizer2Impl *v12;
  unsigned int v13;

  v6 = sub_18BBD79D4((uint64_t)this, a2);
  if (v6 == 1)
    return 0xFFFFFFFFLL;
  v8 = v6;
  if (v6 < *((unsigned __int16 *)this + 8))
  {
    if (v6 == 2)
    {
      if (((_DWORD)a3 - 4449) <= 0x14)
        return 28 * (a3 + 21 * a2) - 2639516;
      return 0xFFFFFFFFLL;
    }
    v13 = *((unsigned __int16 *)this + 7);
    if (v13 == v6)
    {
      if (((_DWORD)a3 - 4520) <= 0x1A)
        return a2 + a3 - 4519;
      else
        return 0xFFFFFFFFLL;
    }
    v12 = (icu::Normalizer2Impl *)(*((_QWORD *)this + 6) + ((unsigned __int16)v6 & 0xFFFE));
    if (v8 > v13)
      v12 = (icu::Normalizer2Impl *)((char *)v12 + 2 * (*(_WORD *)v12 & 0x1F) + 2);
LABEL_18:
    if (a3 >> 16 <= 0x10)
      return ((int)icu::Normalizer2Impl::combine(v12, a3) >> 1);
    return 0xFFFFFFFFLL;
  }
  result = 0xFFFFFFFFLL;
  if (v8 >> 10 <= 0x3E)
  {
    v9 = *((unsigned __int16 *)this + 15);
    v10 = v8 >= v9;
    v11 = v8 - v9;
    if (v10)
    {
      v12 = (icu::Normalizer2Impl *)(*((_QWORD *)this + 5) + 2 * (v11 >> 1));
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t icu::Normalizer2Impl::compose(uint64_t a1, UChar *src, unsigned __int16 *a3, int a4, int a5, UChar **this, UErrorCode *a7)
{
  UChar *v11;
  unsigned int v13;
  unsigned __int16 *v14;
  UChar *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int16 *v21;
  int v22;
  int v23;
  unsigned int v25;
  unsigned __int16 *v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  signed int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  UChar *v35;
  int v36;
  unsigned int v37;
  int v38;
  __int16 v39;
  BOOL v40;
  BOOL v41;
  int appended;
  int v43;
  icu::ReorderingBuffer *v44;
  UChar **v45;
  UChar *v46;
  UChar *v47;
  _WORD *v48;
  __int16 v49;
  unsigned __int16 *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  signed int v60;
  int v61;
  unsigned __int16 v62;
  uint64_t v63;
  unsigned int v64;
  BOOL v65;
  UChar *v66;
  UChar *v67;
  unsigned int v68;
  int v70[2];
  int v71;
  icu::ReorderingBuffer *v72;
  int v73;

  v11 = src;
  v13 = *(unsigned __int16 *)(a1 + 10);
  if (a3)
  {
    v14 = a3;
  }
  else
  {
    v63 = 0;
    do
    {
      v64 = src[v63++];
      if (v64)
        v65 = v64 >= v13;
      else
        v65 = 1;
    }
    while (!v65);
    v66 = &src[v63 - 1];
    if (a5 && v63 != 1)
      icu::ReorderingBuffer::appendZeroCC(this, src, &src[v63 - 1], a7);
    if (*(int *)a7 > 0)
      return 0;
    v14 = u_strchr(&v11[v63 - 1], 0);
    if (v63 != 1)
    {
      v67 = &v11[v63];
      v68 = *(v67 - 2);
      v11 = v67 - 2;
      if (sub_18BBD7B10(a1, v68, a4))
        v11 = v66;
      else
        icu::ReorderingBuffer::removeSuffix((uint64_t)this, 1);
    }
  }
  if (v11 == v14)
    return 1;
  v73 = a5;
  v72 = (icu::ReorderingBuffer *)this;
  v15 = v11;
  v71 = a4;
  do
  {
    while (1)
    {
      v16 = *v11;
      if (v16 < v13
        || (v17 = *(_QWORD *)(a1 + 32),
            v18 = *(_QWORD *)(v17 + 8),
            v19 = *(unsigned __int16 *)(v18
                                      + 2
                                      * ((v16 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v17 + ((v16 >> 5) & 0x7FE)))),
            v20 = *(unsigned __int16 *)(a1 + 18),
            v20 > v19))
      {
        v21 = v11 + 1;
        goto LABEL_8;
      }
      v21 = v11 + 1;
      if ((v16 & 0xFC00) != 0xD800)
        break;
      if (v21 == v14)
      {
LABEL_139:
        v21 = v15;
        goto LABEL_140;
      }
      v22 = *v21;
      if ((v22 & 0xFC00) == 0xDC00)
      {
        LODWORD(v16) = ((_DWORD)v16 << 10) - 56613888 + v22;
        if ((int)v16 >= *(_DWORD *)(v17 + 24))
        {
          v23 = *(_DWORD *)(v17 + 20) - 2;
        }
        else
        {
          v23 = ucptrie_internalSmallIndex((uint64_t *)v17, v16);
          v20 = *(unsigned __int16 *)(a1 + 18);
        }
        v21 = v11 + 2;
        v19 = *(unsigned __int16 *)(v18 + 2 * v23);
        if (v20 <= v19)
          break;
      }
LABEL_8:
      v11 = v21;
      if (v21 == v14)
        goto LABEL_139;
    }
    if (*(unsigned __int16 *)(a1 + 30) > v19)
    {
      if (v73)
      {
        if (*(unsigned __int16 *)(a1 + 26) <= v19)
        {
          if ((v19 & 1) == 0
            || (v19 != 1 ? (v40 = (v19 & 6) >= 3) : (v40 = 0), v40 ? (v41 = v71 == 0) : (v41 = 1), !v41))
          {
            if (!icu::Normalizer2Impl::hasCompBoundaryBefore(a1, v21, v14))
              goto LABEL_92;
          }
          if (v15 != v11 && !icu::ReorderingBuffer::appendZeroCC((UChar **)v72, v15, v11, a7))
            return 1;
          appended = sub_18BBD8480(v72, v16 + (v19 >> 3) - *(unsigned __int16 *)(a1 + 28), 0, a7);
        }
        else
        {
          if (v19 >= *(unsigned __int16 *)(a1 + 20))
          {
            if (v19 < *(unsigned __int16 *)(a1 + 24)
              || !icu::Normalizer2Impl::hasCompBoundaryBefore(a1, v21, v14)
              && !icu::Normalizer2Impl::hasCompBoundaryAfter(a1, (uint64_t)v15, (uint64_t)v11, v71))
            {
              goto LABEL_92;
            }
            if (v15 == v11)
            {
LABEL_101:
              v11 = v21;
              goto LABEL_115;
            }
            v45 = (UChar **)v72;
            v46 = v15;
            v47 = v11;
          }
          else
          {
            if (((v19 & 1) == 0
               || v71
               && v19 != 1
               && *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + ((unsigned __int16)v19 & 0xFFFE)) >= 0x200u)
              && !icu::Normalizer2Impl::hasCompBoundaryBefore(a1, v21, v14))
            {
              goto LABEL_92;
            }
            if (v15 != v11 && !icu::ReorderingBuffer::appendZeroCC((UChar **)v72, v15, v11, a7))
              return 1;
            v48 = (_WORD *)(*(_QWORD *)(a1 + 48) + ((unsigned __int16)v19 & 0xFFFE));
            v49 = *v48;
            v46 = v48 + 1;
            v47 = &v46[v49 & 0x1F];
            v45 = (UChar **)v72;
          }
          appended = icu::ReorderingBuffer::appendZeroCC(v45, v46, v47, a7);
        }
LABEL_90:
        v11 = v21;
        if (appended)
          goto LABEL_115;
        return 1;
      }
      return 0;
    }
    if (v19 == 65024 && v15 != v11)
    {
      v35 = v11 - 1;
      v36 = *(v11 - 1);
      if (v16 > 0x11A6)
      {
        if ((v36 - 44032) >> 2 > 0xAE8
          || (unsigned __int16)(v36 + 21504) != 28
                                              * ((153391690 * (unint64_t)(unsigned __int16)(v36 + 21504)) >> 32))
        {
          goto LABEL_92;
        }
        if (!v73)
          return 0;
        if (v15 != v35 && !icu::ReorderingBuffer::appendZeroCC((UChar **)v72, v15, v35, a7))
          return 1;
        v43 = (unsigned __int16)(v16 + v36 - 4519);
        v44 = v72;
      }
      else
      {
        v37 = v36 - 4352;
        if (v37 > 0x12)
          goto LABEL_92;
        if (!v73)
          return 0;
        if (v21 == v14 || (v38 = *v21, (v38 - 4520) > 0x1A))
        {
          if (!icu::Normalizer2Impl::hasCompBoundaryBefore(a1, v21, v14))
            goto LABEL_92;
          v39 = 0;
          v35 = v11 - 1;
        }
        else
        {
          v39 = v38 - 4519;
          ++v21;
        }
        if (v15 != v35 && !icu::ReorderingBuffer::appendZeroCC((UChar **)v72, v15, v35, a7))
          return 1;
        v43 = (unsigned __int16)(v39 + 28 * (v16 + 21 * v37) - 15004);
        v44 = v72;
      }
      appended = sub_18BBDB9AC(v44, v43, 0, a7);
      goto LABEL_90;
    }
    if (v19 < 0xFE01)
      goto LABEL_92;
    v25 = v19 >> 1;
    if (v71
      && icu::Normalizer2Impl::getPreviousTrailCC(a1, (uint64_t)v15, (uint64_t)v11) > v25)
    {
      if (!v73)
        return 0;
LABEL_92:
      v50 = v15;
      if (v15 == v11)
        goto LABEL_95;
      if (*(unsigned __int16 *)(a1 + 22) > v19
        || *(unsigned __int16 *)(a1 + 26) <= v19 && *(unsigned __int16 *)(a1 + 30) > v19)
      {
        goto LABEL_94;
      }
      v50 = v11 - 1;
      v57 = *(v11 - 1);
      if ((v57 & 0xF800) != 0xD800)
      {
        v59 = *(_QWORD *)(a1 + 32);
        v61 = (v57 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v59 + ((v57 >> 5) & 0x7FE));
        goto LABEL_131;
      }
      if (v50 == v15 || (v57 & 0x400) == 0)
      {
        v59 = *(_QWORD *)(a1 + 32);
      }
      else
      {
        v58 = *(v11 - 2);
        v59 = *(_QWORD *)(a1 + 32);
        if ((v58 & 0xFC00) == 0xD800)
        {
          v60 = v57 - 56613888 + (v58 << 10);
          if (v60 >= *(_DWORD *)(v59 + 24))
          {
            v61 = *(_DWORD *)(v59 + 20) - 2;
          }
          else
          {
            v61 = ucptrie_internalSmallIndex((uint64_t *)v59, v60);
            v59 = *(_QWORD *)(a1 + 32);
          }
          v50 = v11 - 2;
LABEL_131:
          v62 = *(_WORD *)(*(_QWORD *)(v59 + 8) + 2 * v61);
          if ((v62 & 1) != 0)
          {
            if (v71 && v62 != 1)
            {
              if (*(unsigned __int16 *)(a1 + 26) <= v62)
              {
                if ((v62 & 6u) >= 3)
                  goto LABEL_95;
              }
              else if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + (v62 & 0xFFFE)) > 0x1FFu)
              {
                goto LABEL_95;
              }
            }
LABEL_94:
            v50 = v11;
          }
LABEL_95:
          if (!v73 || v15 == v50 || icu::ReorderingBuffer::appendZeroCC((UChar **)v72, v15, v50, a7))
          {
            *(_QWORD *)v70 = *((_QWORD *)v72 + 4);
            v51 = *((_QWORD *)v72 + 2);
            icu::Normalizer2Impl::decomposeShort(a1, v50, v21, 0, v71, (UChar **)v72, a7);
            v52 = 1;
            v53 = icu::Normalizer2Impl::decomposeShort(a1, v21, v14, 1, v71, (UChar **)v72, a7);
            if (*(int *)a7 > 0)
              return v52;
            v21 = v53;
            if ((char *)v53 - (char *)v50 >= 0xFFFFFFFFLL)
            {
              *a7 = U_INDEX_OUTOFBOUNDS_ERROR;
              return v52;
            }
            icu::Normalizer2Impl::recompose(a1, v72, (unint64_t)(*(_QWORD *)v70 - v51) >> 1, v71);
            if (!v73)
            {
              if (icu::ReorderingBuffer::equals((uint64_t)v72, v50, (uint64_t)v21))
              {
                v54 = *((_QWORD *)v72 + 1);
                v55 = *((_QWORD *)v72 + 2);
                *((_QWORD *)v72 + 3) = v55;
                *((_QWORD *)v72 + 4) = v55;
                if ((*(_BYTE *)(v54 + 8) & 2) != 0)
                  v56 = 27;
                else
                  v56 = *(_DWORD *)(v54 + 16);
                *((_DWORD *)v72 + 10) = v56;
                *((_BYTE *)v72 + 44) = 0;
                v11 = v21;
                goto LABEL_115;
              }
              return 0;
            }
            goto LABEL_101;
          }
          return 1;
        }
      }
      v61 = *(_DWORD *)(v59 + 20) - 1;
      goto LABEL_131;
    }
    do
    {
      if (v21 == v14)
      {
        if (v73)
          icu::ReorderingBuffer::appendZeroCC((UChar **)v72, v15, v14, a7);
        return 1;
      }
      v26 = v21;
      v28 = *v21++;
      v27 = v28;
      if ((v28 & 0xF800) != 0xD800)
      {
        v30 = *(_QWORD *)(a1 + 32);
        v32 = (v27 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v30 + ((v27 >> 5) & 0x7FE));
        goto LABEL_44;
      }
      if ((v27 & 0x400) != 0 || v21 == v14)
      {
        v30 = *(_QWORD *)(a1 + 32);
LABEL_43:
        v32 = *(_DWORD *)(v30 + 20) - 1;
        goto LABEL_44;
      }
      v29 = *v21;
      v30 = *(_QWORD *)(a1 + 32);
      if ((v29 & 0xFC00) != 0xDC00)
        goto LABEL_43;
      v21 = v26 + 2;
      v31 = ((_DWORD)v27 << 10) - 56613888 + v29;
      if (v31 >= *(_DWORD *)(v30 + 24))
      {
        v32 = *(_DWORD *)(v30 + 20) - 2;
      }
      else
      {
        v32 = ucptrie_internalSmallIndex((uint64_t *)v30, v31);
        v30 = *(_QWORD *)(a1 + 32);
      }
LABEL_44:
      v33 = *(unsigned __int16 *)(*(_QWORD *)(v30 + 8) + 2 * v32);
      if (v33 < 0xFE02)
        goto LABEL_121;
      v34 = v25;
      v25 = v33 >> 1;
    }
    while (v34 <= (v33 >> 1));
    if (!v73)
      return 0;
LABEL_121:
    if (*(unsigned __int16 *)(a1 + 22) <= v33
      && (*(unsigned __int16 *)(a1 + 26) > v33 || *(unsigned __int16 *)(a1 + 30) <= v33))
    {
      v21 = v26;
      goto LABEL_92;
    }
    if (*(unsigned __int16 *)(a1 + 18) <= v33)
      v11 = v26;
    else
      v11 = v21;
    v21 = v15;
LABEL_115:
    v15 = v21;
  }
  while (v11 != v14);
LABEL_140:
  v52 = 1;
  if (v73 && v21 != v14)
    icu::ReorderingBuffer::appendZeroCC((UChar **)v72, v21, v14, a7);
  return v52;
}

BOOL icu::Normalizer2Impl::hasCompBoundaryBefore(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unint64_t v4;
  int v5;
  signed int v6;
  uint64_t v7;
  int v8;
  unsigned int v10;

  if (a2 == a3)
    return 1;
  v4 = *a2;
  if (v4 < *(unsigned __int16 *)(a1 + 10))
    return 1;
  if ((v4 & 0xF800) == 0xD800)
  {
    if ((v4 & 0x400) != 0 || a2 + 1 == a3 || (v5 = a2[1], (v5 & 0xFC00) != 0xDC00))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(_DWORD *)(v7 + 20) - 1;
    }
    else
    {
      v6 = v5 + ((_DWORD)v4 << 10) - 56613888;
      v7 = *(_QWORD *)(a1 + 32);
      if (v6 >= *(_DWORD *)(v7 + 24))
      {
        v8 = *(_DWORD *)(v7 + 20) - 2;
      }
      else
      {
        v8 = ucptrie_internalSmallIndex((uint64_t *)v7, v6);
        v7 = *(_QWORD *)(a1 + 32);
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = (v4 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v7 + ((v4 >> 5) & 0x7FE));
  }
  v10 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 8) + 2 * v8);
  if (*(unsigned __int16 *)(a1 + 22) > v10)
    return 1;
  if (*(unsigned __int16 *)(a1 + 26) <= v10)
    return *(unsigned __int16 *)(a1 + 30) > v10;
  return 0;
}

BOOL icu::Normalizer2Impl::hasCompBoundaryAfter(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v6;
  int v7;
  signed int v8;
  uint64_t v9;
  int v10;
  _BOOL8 result;
  unsigned int v12;
  BOOL v13;

  if (a2 == a3)
    return 1;
  v6 = *(unsigned __int16 *)(a3 - 2);
  if ((v6 & 0xF800) == 0xD800)
  {
    if (a3 - 2 != a2 && (v6 & 0x400) != 0 && (v7 = *(unsigned __int16 *)(a3 - 4), (v7 & 0xFC00) == 0xD800))
    {
      v8 = v6 + (v7 << 10) - 56613888;
      v9 = *(_QWORD *)(a1 + 32);
      if (v8 >= *(_DWORD *)(v9 + 24))
      {
        v10 = *(_DWORD *)(v9 + 20) - 2;
      }
      else
      {
        v10 = ucptrie_internalSmallIndex((uint64_t *)v9, v8);
        v9 = *(_QWORD *)(a1 + 32);
      }
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_DWORD *)(v9 + 20) - 1;
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = (v6 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v9 + ((v6 >> 5) & 0x7FE));
  }
  v12 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 8) + 2 * v10);
  if ((v12 & 1) == 0)
    return 0;
  result = 1;
  if (a4 && v12 != 1)
  {
    if (*(unsigned __int16 *)(a1 + 26) <= v12)
      v13 = (v12 & 6) >= 3;
    else
      v13 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + ((unsigned __int16)v12 & 0xFFFE)) >= 0x200u;
    return !v13;
  }
  return result;
}

uint64_t sub_18BBDB9AC(icu::ReorderingBuffer *this, int a2, unsigned int a3, UErrorCode *a4)
{
  uint64_t result;
  _WORD *v8;
  _WORD *v9;

  if (*((_DWORD *)this + 10) || (result = icu::ReorderingBuffer::resize(this, 1, a4), (_DWORD)result))
  {
    if (a3 && *((unsigned __int8 *)this + 44) > a3)
    {
      icu::ReorderingBuffer::insert(this, a2, a3);
    }
    else
    {
      v8 = (_WORD *)*((_QWORD *)this + 4);
      *v8 = a2;
      v9 = v8 + 1;
      *((_QWORD *)this + 4) = v9;
      *((_BYTE *)this + 44) = a3;
      if (a3 <= 1)
        *((_QWORD *)this + 3) = v9;
    }
    --*((_DWORD *)this + 10);
    return 1;
  }
  return result;
}

uint64_t icu::Normalizer2Impl::getPreviousTrailCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  signed int v5;
  int v7;
  BOOL v8;
  int v9;
  uint64_t result;

  if (a2 == a3)
  {
    LOBYTE(result) = 0;
  }
  else
  {
    v4 = (unint64_t)(a3 - a2) >> 1;
    v5 = *(unsigned __int16 *)(a2 + 2 * ((((a3 - a2) << 31) - 0x100000000) >> 32));
    if ((v5 & 0xFC00) == 0xDC00 && (int)v4 >= 2)
    {
      v7 = *(unsigned __int16 *)(a2 + 2 * (v4 - 2));
      v8 = (v7 & 0xFC00) == 55296;
      v9 = v5 + (v7 << 10) - 56613888;
      if (v8)
        v5 = v9;
    }
    LOBYTE(result) = sub_18BBD6AB4(a1, v5);
  }
  return result;
}

UChar *icu::Normalizer2Impl::composeQuickCheck(uint64_t a1, UChar *a2, UChar *a3, int a4, _DWORD *a5)
{
  UChar *v5;
  unsigned int v7;
  UChar *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  unsigned __int16 *v12;
  UChar *v13;
  unsigned int v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  signed int v23;
  int v24;
  unsigned __int16 v25;
  unint64_t v26;
  unsigned __int16 *v27;
  int v28;
  uint64_t v29;
  signed int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned __int8 v34;
  int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  signed int v39;
  int v40;
  unsigned int v41;
  unsigned int v43;
  _BOOL4 v44;
  _DWORD *v47;

  v5 = a2;
  v7 = *(unsigned __int16 *)(a1 + 10);
  v47 = a5;
  if (a3)
  {
    v8 = a3;
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = a2[v9++];
      if (v10)
        v11 = v10 >= v7;
      else
        v11 = 1;
    }
    while (!v11);
    v12 = &a2[v9];
    v8 = u_strchr(&a2[v9 - 1], 0);
    if (v9 != 1)
    {
      v14 = *(v12 - 2);
      v13 = v12 - 2;
      if (sub_18BBD7B10(a1, v14, a4))
        v5 = &v5[v9 - 1];
      else
        v5 = v13;
    }
    a5 = v47;
  }
  v15 = v5;
LABEL_15:
  if (v5 == v8)
    return v8;
  v16 = v5;
  while (1)
  {
    v17 = *v16;
    if (v17 < v7
      || (v18 = *(_QWORD *)(a1 + 32),
          v19 = *(_QWORD *)(v18 + 8),
          v20 = *(unsigned __int16 *)(v19
                                    + 2 * ((v17 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v18 + ((v17 >> 5) & 0x7FE)))),
          v21 = *(unsigned __int16 *)(a1 + 18),
          v21 > v20))
    {
      v5 = v16 + 1;
      goto LABEL_20;
    }
    v5 = v16 + 1;
    if ((v17 & 0xFC00) != 0xD800)
      break;
    if (v5 == v8)
      return v8;
    v22 = *v5;
    if ((v22 & 0xFC00) == 0xDC00)
    {
      v23 = ((_DWORD)v17 << 10) - 56613888 + v22;
      if (v23 >= *(_DWORD *)(v18 + 24))
      {
        v24 = *(_DWORD *)(v18 + 20) - 2;
      }
      else
      {
        v24 = ucptrie_internalSmallIndex((uint64_t *)v18, v23);
        a5 = v47;
        v21 = *(unsigned __int16 *)(a1 + 18);
      }
      v5 = v16 + 2;
      v20 = *(unsigned __int16 *)(v19 + 2 * v24);
      if (v21 <= v20)
        break;
    }
LABEL_20:
    v16 = v5;
    if (v5 == v8)
      return v8;
  }
  if (v15 == v16)
  {
    v25 = 1;
    v16 = v15;
    goto LABEL_48;
  }
  if (*(unsigned __int16 *)(a1 + 22) > v20
    || *(unsigned __int16 *)(a1 + 26) <= v20 && *(unsigned __int16 *)(a1 + 30) > v20)
  {
    goto LABEL_31;
  }
  v27 = v16 - 1;
  v26 = *(v16 - 1);
  if ((v26 & 0xF800) != 0xD800)
  {
    v29 = *(_QWORD *)(a1 + 32);
    v32 = (v26 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v29 + ((v26 >> 5) & 0x7FE));
    goto LABEL_46;
  }
  if ((v26 & 0x400) == 0 || v27 == v15)
  {
    v29 = *(_QWORD *)(a1 + 32);
    goto LABEL_43;
  }
  v28 = *(v16 - 2);
  v29 = *(_QWORD *)(a1 + 32);
  if ((v28 & 0xFC00) != 0xD800)
  {
LABEL_43:
    v32 = *(_DWORD *)(v29 + 20) - 1;
    goto LABEL_46;
  }
  v30 = v26 - 56613888 + (v28 << 10);
  if (v30 >= *(_DWORD *)(v29 + 24))
  {
    v32 = *(_DWORD *)(v29 + 20) - 2;
  }
  else
  {
    v31 = ucptrie_internalSmallIndex((uint64_t *)v29, v30);
    a5 = v47;
    v32 = v31;
    v29 = *(_QWORD *)(a1 + 32);
  }
  v27 = v16 - 2;
LABEL_46:
  v25 = *(_WORD *)(*(_QWORD *)(v29 + 8) + 2 * v32);
  if ((v25 & 1) == 0)
  {
    v16 = v27;
    goto LABEL_48;
  }
  if (a4 && v25 != 1)
  {
    if (*(unsigned __int16 *)(a1 + 26) <= v25)
    {
      v44 = (v25 & 6u) < 3;
      if ((v25 & 6u) >= 3)
        goto LABEL_85;
    }
    else
    {
      v43 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + (v25 & 0xFFFE));
      v44 = v43 < 0x200;
      if (v43 > 0x1FF)
      {
LABEL_85:
        v16 = v27;
        if (!v44)
          goto LABEL_48;
        goto LABEL_31;
      }
    }
    if (!v44)
      goto LABEL_48;
  }
LABEL_31:
  v25 = 1;
LABEL_48:
  v33 = *(unsigned __int16 *)(a1 + 30);
  if (v33 <= v20)
  {
    v34 = v20 >> 10 <= 0x3E ? 0 : v20 >> 1;
    if (!a4
      || !v34
      || *(unsigned __int16 *)(a1 + 14) >= v25
      || *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + (v25 & 0xFFFE) + 1) <= v34)
    {
      while (1)
      {
        v15 = v5;
        if ((unsigned __int16)v20 <= 0xFE01u)
        {
          if (!a5)
            return v16;
          *a5 = 2;
        }
        if (v5 == v8)
          return v8;
        ++v5;
        v36 = *v15;
        if ((v36 & 0xF800) != 0xD800)
        {
          v38 = *(_QWORD *)(a1 + 32);
          v35 = (v36 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v38 + ((v36 >> 5) & 0x7FE));
          goto LABEL_71;
        }
        if ((v36 & 0x400) != 0 || v5 == v8)
          break;
        v37 = *v5;
        v38 = *(_QWORD *)(a1 + 32);
        if ((v37 & 0xFC00) != 0xDC00)
          goto LABEL_70;
        v5 = v15 + 2;
        v39 = ((_DWORD)v36 << 10) - 56613888 + v37;
        if (v39 >= *(_DWORD *)(v38 + 24))
        {
          v35 = *(_DWORD *)(v38 + 20) - 2;
        }
        else
        {
          v40 = ucptrie_internalSmallIndex((uint64_t *)v38, v39);
          a5 = v47;
          v35 = v40;
          v38 = *(_QWORD *)(a1 + 32);
          LOWORD(v33) = *(_WORD *)(a1 + 30);
        }
LABEL_71:
        v20 = *(unsigned __int16 *)(*(_QWORD *)(v38 + 8) + 2 * v35);
        if (v20 >= (unsigned __int16)v33)
        {
          v41 = v34;
          v34 = v20 >> 10 <= 0x3E ? 0 : v20 >> 1;
          if (v41 <= v34 || v34 == 0)
            continue;
        }
        if (*(unsigned __int16 *)(a1 + 18) > v20)
          goto LABEL_15;
        goto LABEL_92;
      }
      v38 = *(_QWORD *)(a1 + 32);
LABEL_70:
      v35 = *(_DWORD *)(v38 + 20) - 1;
      goto LABEL_71;
    }
  }
LABEL_92:
  if (a5)
    *a5 = 0;
  return v16;
}

void *icu::Normalizer2Impl::composeAndAppend(uint64_t a1, UChar *src, unsigned __int16 *a3, int a4, int a5, UChar **a6, icu::ReorderingBuffer *this, UErrorCode *a8)
{
  unsigned __int16 *v12;
  UChar *v13;
  unsigned __int16 *NextCompBoundary;
  unint64_t v17;
  uint64_t PreviousCompBoundary;
  uint64_t v19;
  UChar *v20;
  int v21;
  UErrorCode v22;
  void *v23;
  void *result;
  unsigned __int16 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v12 = a3;
  v13 = src;
  v30 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 2) == *((_QWORD *)this + 4)
    || (NextCompBoundary = icu::Normalizer2Impl::findNextCompBoundary(a1, src, a3, a5),
        v17 = (char *)NextCompBoundary - (char *)v13,
        NextCompBoundary == v13))
  {
LABEL_12:
    if (a4)
      return (void *)icu::Normalizer2Impl::compose(a1, v13, v12, a5, 1, (UChar **)this, a8);
    if (!v12)
      v12 = u_strchr(v13, 0);
    return (void *)icu::ReorderingBuffer::appendZeroCC((UChar **)this, v13, v12, a8);
  }
  v25 = NextCompBoundary;
  PreviousCompBoundary = icu::Normalizer2Impl::findPreviousCompBoundary(a1, *((_QWORD *)this + 2), *((_QWORD *)this + 4), a5);
  v19 = (unint64_t)(*((_QWORD *)this + 4) - PreviousCompBoundary) >> 1;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  icu::UnicodeString::UnicodeString((uint64_t)&v26, PreviousCompBoundary, v19);
  icu::ReorderingBuffer::removeSuffix((uint64_t)this, v19);
  icu::UnicodeString::operator=(a6, (UChar **)&v26);
  icu::UnicodeString::doAppend((uint64_t)&v26, (uint64_t)v13, 0, v17 >> 1);
  if ((BYTE8(v26) & 0x11) != 0)
  {
    v20 = 0;
  }
  else if ((BYTE8(v26) & 2) != 0)
  {
    v20 = (UChar *)((unint64_t)&v26 | 0xA);
  }
  else
  {
    v20 = (UChar *)*((_QWORD *)&v27 + 1);
  }
  v21 = WORD4(v26) >> 5;
  if (SWORD4(v26) < 0)
    v21 = HIDWORD(v26);
  icu::Normalizer2Impl::compose(a1, v20, &v20[v21], a5, 1, (UChar **)this, a8);
  v22 = *a8;
  result = icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v26);
  if (v22 <= U_ZERO_ERROR)
  {
    v13 = v25;
    goto LABEL_12;
  }
  return result;
}

unsigned __int16 *icu::Normalizer2Impl::findNextCompBoundary(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, int a4)
{
  unsigned __int16 *v4;
  unint64_t v8;
  unsigned __int16 *v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;

  v4 = a2;
  if (a2 != a3)
  {
    while (1)
    {
      v9 = v4 + 1;
      v8 = *v4;
      if ((v8 & 0xF800) == 0xD800)
      {
        if ((v8 & 0x400) != 0 || v9 == a3)
        {
          v11 = *(_QWORD *)(a1 + 32);
        }
        else
        {
          v10 = *v9;
          v11 = *(_QWORD *)(a1 + 32);
          if ((v10 & 0xFC00) == 0xDC00)
          {
            v9 = v4 + 2;
            LODWORD(v8) = v10 + ((_DWORD)v8 << 10) - 56613888;
            if ((int)v8 >= *(_DWORD *)(v11 + 24))
            {
              v12 = *(_DWORD *)(v11 + 20) - 2;
            }
            else
            {
              v12 = ucptrie_internalSmallIndex((uint64_t *)v11, v8);
              v11 = *(_QWORD *)(a1 + 32);
            }
            goto LABEL_11;
          }
        }
        v12 = *(_DWORD *)(v11 + 20) - 1;
      }
      else
      {
        v11 = *(_QWORD *)(a1 + 32);
        v12 = (v8 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v11 + ((v8 >> 5) & 0x7FE));
      }
LABEL_11:
      if (v8 < *(unsigned __int16 *)(a1 + 10))
        return v4;
      v13 = *(unsigned __int16 *)(*(_QWORD *)(v11 + 8) + 2 * v12);
      if (*(unsigned __int16 *)(a1 + 22) > v13)
        return v4;
      v14 = *(unsigned __int16 *)(a1 + 26);
      if (v14 <= v13 && *(unsigned __int16 *)(a1 + 30) > v13)
        return v4;
      if ((v13 & 1) != 0)
      {
        if (!a4 || v13 == 1)
          return v9;
        if (!(v14 <= v13
             ? (v13 & 6) >= 3
             : *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + ((unsigned __int16)v13 & 0xFFFE)) >= 0x200u))
          return v9;
        v4 = v9;
        if (v9 == a3)
          return v4;
      }
      else
      {
        v4 = v9;
        if (v9 == a3)
          return a3;
      }
    }
  }
  return v4;
}

uint64_t icu::Normalizer2Impl::findPreviousCompBoundary(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  BOOL v14;

  v4 = a3;
  if (a3 != a2)
  {
    while (1)
    {
      v8 = v4 - 2;
      v9 = *(unsigned __int16 *)(v4 - 2);
      if ((v9 & 0xF800) != 0xD800)
      {
        v11 = *(_QWORD *)(a1 + 32);
        v12 = (v9 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v11 + ((v9 >> 5) & 0x7FE));
        goto LABEL_13;
      }
      if (v8 == a2 || (v9 & 0x400) == 0)
        break;
      v10 = *(unsigned __int16 *)(v4 - 4);
      v11 = *(_QWORD *)(a1 + 32);
      if ((v10 & 0xFC00) != 0xD800)
        goto LABEL_10;
      LODWORD(v9) = v9 + (v10 << 10) - 56613888;
      if ((int)v9 >= *(_DWORD *)(v11 + 24))
      {
        v12 = *(_DWORD *)(v11 + 20) - 2;
      }
      else
      {
        v12 = ucptrie_internalSmallIndex((uint64_t *)v11, v9);
        v11 = *(_QWORD *)(a1 + 32);
      }
      v8 = v4 - 4;
LABEL_13:
      v13 = *(unsigned __int16 *)(*(_QWORD *)(v11 + 8) + 2 * v12);
      if ((v13 & 1) != 0)
      {
        if (!a4 || v13 == 1)
          return v4;
        if (*(unsigned __int16 *)(a1 + 26) <= v13)
        {
          if ((v13 & 6) < 3)
            return v4;
        }
        else if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + ((unsigned __int16)v13 & 0xFFFE)) < 0x200u)
        {
          return v4;
        }
      }
      if (v9 < *(unsigned __int16 *)(a1 + 10) || *(unsigned __int16 *)(a1 + 22) > v13)
        return v8;
      if (*(unsigned __int16 *)(a1 + 26) <= v13)
      {
        v14 = *(unsigned __int16 *)(a1 + 30) > v13 || v8 == a2;
        v4 = v8;
        if (v14)
          return v4;
      }
      else
      {
        v4 = v8;
        if (v8 == a2)
          return a2;
      }
    }
    v11 = *(_QWORD *)(a1 + 32);
LABEL_10:
    v12 = *(_DWORD *)(v11 + 20) - 1;
    goto LABEL_13;
  }
  return v4;
}

uint64_t icu::Normalizer2Impl::composeUTF8(icu::Normalizer2Impl *this, icu::ByteSink *a2, unsigned int a3, icu::ByteSinkUtil *a4, unsigned __int8 *a5, icu::ByteSink *a6, icu::Edits *a7, UErrorCode *a8)
{
  char v8;
  icu::ByteSink *v11;
  __int128 v12;
  uint64_t p_dst;
  char v14;
  unsigned __int8 v15;
  uint64_t *v18;
  icu::ByteSinkUtil *v19;
  icu::ByteSinkUtil *v20;
  const unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;
  const unsigned __int8 *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  _BYTE *v28;
  unsigned int v29;
  uint64_t v30;
  icu::Edits *v31;
  uint64_t *v32;
  unsigned int v33;
  icu::Edits *v34;
  _BOOL4 v35;
  icu::Edits *v36;
  int v37;
  _WORD *v38;
  icu::Edits *v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  icu::Edits *v46;
  unsigned int PreviousTrailCC;
  const unsigned __int8 *v48;
  char v49;
  int v50;
  unsigned int v51;
  icu::ByteSinkUtil *v52;
  uint64_t v53;
  unsigned __int8 v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  _BYTE *v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  BOOL v62;
  BOOL v63;
  icu::Edits *v64;
  _BOOL4 hasCompBoundaryBefore;
  icu::Edits *v66;
  int v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  UErrorCode *v72;
  int v73;
  icu::Edits *v74;
  uint64_t v75;
  UErrorCode *v76;
  uint64_t v77;
  icu::ByteSink *v78;
  icu::ByteSinkUtil *v79;
  uint64_t v80;
  int v81;
  icu::Edits *v82;
  int v83;
  int v84;
  char *v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  const unsigned __int8 *v89;
  icu::ByteSink *v90;
  int appended;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  icu::Edits *v95;
  icu::ByteSinkUtil *v96;
  UChar32 v97;
  uint64_t v98;
  uint64_t *v99;
  int Index;
  unsigned __int16 v101;
  uint64_t Buffer;
  int v103;
  UErrorCode v104;
  int v105;
  icu::ByteSinkUtil *v106;
  icu::ByteSinkUtil *v107;
  int v108;
  int v109;
  icu::Edits *v110;
  icu::ByteSink *v112;
  icu::ByteSink *v113;
  icu::ByteSink *v114;
  uint64_t *v115;
  signed __int8 v116[4];
  int v117;
  unsigned int v118;
  UErrorCode *v119;
  icu::ByteSink *v120;
  icu::Normalizer2Impl *__dst;
  icu::UnicodeString *v122;
  uint64_t v123[2];
  uint64_t v124;
  int v125;
  char v126;
  void (**v127)(icu::UnicodeString *__hidden);
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;

  v11 = a2;
  v132 = *MEMORY[0x1E0C80C00];
  v12 = 0uLL;
  v128 = 0u;
  v131 = 0;
  v130 = 0u;
  v129 = 0u;
  v127 = off_1E2256B38;
  LOWORD(v128) = 2;
  p_dst = *((unsigned __int16 *)this + 5);
  if (p_dst <= 0x7FF)
    v14 = (p_dst >> 6) - 64;
  else
    v14 = -32;
  if (p_dst <= 0x7F)
    v15 = *((_WORD *)this + 5);
  else
    v15 = v14;
  if (a4 == (icu::ByteSinkUtil *)a5)
  {
    v19 = a4;
    goto LABEL_203;
  }
  p_dst = (uint64_t)&__dst;
  v18 = v123;
  v19 = a4;
  v119 = a8;
  v120 = a6;
  v118 = a2;
LABEL_9:
  v20 = a4;
  v21 = (const unsigned __int8 *)a4;
  while (1)
  {
    v23 = *v21++;
    v22 = v23;
    if (v23 >= v15)
      break;
LABEL_35:
    v20 = (icu::ByteSinkUtil *)v21;
    if (v21 == a5)
      goto LABEL_203;
  }
  a4 = (icu::ByteSinkUtil *)v21;
  if ((v22 & 0x80) != 0)
  {
    a4 = (icu::ByteSinkUtil *)a5;
    if (v21 != a5)
    {
      if (v22 < 0xE0)
      {
        a4 = (icu::ByteSinkUtil *)v21;
        if (v22 >= 0xC2)
        {
          v26 = *v21 ^ 0x80;
          a4 = (icu::ByteSinkUtil *)v21;
          if (v26 <= 0x3F)
          {
            v22 = *(unsigned __int16 *)(**((_QWORD **)this + 4) + 2 * (v22 & 0x1F)) + v26;
            v24 = v21;
            goto LABEL_22;
          }
        }
        goto LABEL_32;
      }
      if (v22 > 0xEF)
      {
        a4 = (icu::ByteSinkUtil *)v21;
        if (v22 > 0xF4)
          goto LABEL_32;
        v27 = *v21;
        a4 = (icu::ByteSinkUtil *)v21;
        if (((byte_18BDD50F4[v27 >> 4] >> (v22 + 16)) & 1) == 0)
          goto LABEL_32;
        v28 = (char *)v20 + 2;
        a4 = (icu::ByteSinkUtil *)a5;
        if ((unsigned __int8 *)((char *)v20 + 2) == a5)
          goto LABEL_32;
        a4 = (icu::ByteSinkUtil *)((char *)v20 + 2);
        if ((*v28 ^ 0x80u) > 0x3F)
          goto LABEL_32;
        v24 = (const unsigned __int8 *)v20 + 3;
        a4 = (icu::ByteSinkUtil *)a5;
        if ((unsigned __int8 *)((char *)v20 + 3) == a5)
          goto LABEL_32;
        if ((*v24 ^ 0x80u) <= 0x3F)
        {
          v29 = v27 & 0x3F | ((v22 - 240) << 6);
          v30 = *((_QWORD *)this + 4);
          if (v29 >= *(unsigned __int16 *)(v30 + 28))
          {
            v22 = *(_DWORD *)(v30 + 20) - 2;
          }
          else
          {
            *(_DWORD *)v116 = a3;
            v31 = a7;
            v32 = v18;
            v22 = ucptrie_internalSmallU8Index(v30, v29, *v28 ^ 0x80u, *v24 ^ 0x80u);
            v18 = v32;
            a8 = v119;
            a6 = v120;
            v12 = 0uLL;
            a3 = *(_DWORD *)v116;
            v11 = (icu::ByteSink *)v118;
            a7 = v31;
          }
          goto LABEL_22;
        }
      }
      else
      {
        a4 = (icu::ByteSinkUtil *)v21;
        if (((a00000000000000[v22 & 0xF] >> (*v21 >> 5)) & 1) == 0)
          goto LABEL_32;
        v24 = (const unsigned __int8 *)v20 + 2;
        a4 = (icu::ByteSinkUtil *)a5;
        if ((unsigned __int8 *)((char *)v20 + 2) == a5)
          goto LABEL_32;
        v25 = *v24 ^ 0x80;
        if (v25 <= 0x3F)
        {
          v22 = *(unsigned __int16 *)(**((_QWORD **)this + 4) + 2
                                                              * (*v21 & 0x3F | ((v22 & 0xF) << 6)))
              + v25;
LABEL_22:
          a4 = (icu::ByteSinkUtil *)(v24 + 1);
          goto LABEL_33;
        }
      }
      a4 = (icu::ByteSinkUtil *)v24;
    }
LABEL_32:
    v22 = *(_DWORD *)(*((_QWORD *)this + 4) + 20) - 1;
  }
LABEL_33:
  v33 = *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 2 * (int)v22);
  p_dst = *((unsigned __int16 *)this + 9);
  if (p_dst > v33)
  {
    v21 = (const unsigned __int8 *)a4;
    goto LABEL_35;
  }
  p_dst = *((unsigned __int16 *)this + 15);
  v117 = a3;
  v115 = v18;
  if (p_dst <= v33)
  {
    if (v33 == 65024)
    {
      if (v20 - v19 < 3
        || (v41 = *((unsigned __int8 *)v20 - 3), (v41 + 31) > 0xCu)
        || (v42 = *((unsigned __int8 *)v20 - 2) ^ 0x80, v42 > 0x3F)
        || (v43 = *((unsigned __int8 *)v20 - 1) ^ 0x80, v43 > 0x3F)
        || v41 >= 0xED && v42 > 0x1F)
      {
        v44 = -1;
      }
      else
      {
        v44 = (v42 << 6) | ((v41 & 0xF) << 12) | v43;
      }
      p_dst = *v21;
      if ((_DWORD)p_dst == 133)
      {
        v70 = v44 - 4352;
        if (v70 > 0x12)
          goto LABEL_153;
        if (a6)
        {
          v113 = a7;
          v71 = sub_18BBDD520((unsigned __int8 *)a4, (uint64_t)a5);
          if (v71 < 0)
          {
            if (!icu::Normalizer2Impl::hasCompBoundaryBefore(this, (const unsigned __int8 *)a4, a5))
            {
              a7 = v113;
              goto LABEL_152;
            }
            v73 = 0;
          }
          else
          {
            v73 = v71;
            a4 = (icu::ByteSinkUtil *)((char *)a4 + 3);
          }
          v87 = (uint64_t)v120;
          v88 = *((unsigned __int8 *)v20 + 2);
          v89 = (const unsigned __int8 *)v20 - 3;
          v90 = v113;
          if (v19 == (icu::ByteSinkUtil *)v89
            || (appended = icu::ByteSinkUtil::appendUnchanged(v19, v89, (const unsigned __int8 *)v120, (icu::ByteSink *)v118, v113, (icu::Edits *)v119, v72), v87 = (uint64_t)v120, v90 = v113, appended))
          {
            icu::ByteSinkUtil::appendCodePoint((icu::ByteSinkUtil *)((_DWORD)a4 - (_DWORD)v89), v73 + 28 * (v88 + 21 * v70) + 39524, v87, v90, v90);
            a6 = v120;
            v11 = (icu::ByteSink *)v118;
            a7 = v113;
            goto LABEL_143;
          }
          goto LABEL_210;
        }
      }
      else
      {
        if ((v44 - 44032) >> 2 > 0xAE8)
          goto LABEL_153;
        p_dst = ((unsigned __int16)(v44 + 21504)
                             - 28 * ((153391690 * (unint64_t)(unsigned __int16)(v44 + 21504)) >> 32));
        if ((_DWORD)p_dst)
          goto LABEL_153;
        if (a6)
        {
          v74 = a7;
          v75 = sub_18BBDD520((unsigned __int8 *)v20, (uint64_t)a4);
          v77 = (uint64_t)v120;
          v78 = v74;
          p_dst = v75;
          if (v19 == (icu::ByteSinkUtil *)((char *)v20 - 3)
            || (v79 = v19,
                v80 = p_dst,
                v81 = icu::ByteSinkUtil::appendUnchanged(v79, (const unsigned __int8 *)v20 - 3, (const unsigned __int8 *)v120, (icu::ByteSink *)v118, v74, (icu::Edits *)v119, v76), p_dst = v80, v77 = (uint64_t)v120, v78 = v74, v81))
          {
            icu::ByteSinkUtil::appendCodePoint((icu::ByteSinkUtil *)((_DWORD)a4 - ((_DWORD)v20 - 3)), p_dst + v44, v77, v78, v78);
            a6 = v120;
            v11 = (icu::ByteSink *)v118;
            a7 = v74;
            goto LABEL_143;
          }
LABEL_210:
          v8 = 1;
          goto LABEL_206;
        }
      }
LABEL_211:
      v8 = 0;
      goto LABEL_206;
    }
    if (v33 < 0xFE01)
      goto LABEL_153;
    v45 = v33 >> 1;
    p_dst = a3;
    if (a3)
    {
      v46 = a7;
      PreviousTrailCC = icu::Normalizer2Impl::getPreviousTrailCC(this, (uint8_t *)v19, (uint8_t *)v20);
      v18 = v115;
      a8 = v119;
      a6 = v120;
      v12 = 0uLL;
      v11 = (icu::ByteSink *)v118;
      a7 = v46;
      if (PreviousTrailCC > v45)
      {
        if (v120)
          goto LABEL_153;
        goto LABEL_211;
      }
    }
    while (1)
    {
      if (a4 == (icu::ByteSinkUtil *)a5)
      {
        if (a6)
          icu::ByteSinkUtil::appendUnchanged(v19, a5, (const unsigned __int8 *)a6, v11, a7, (icu::Edits *)a8, (UErrorCode *)a7);
        goto LABEL_210;
      }
      v48 = (const unsigned __int8 *)a4;
      v50 = *(char *)a4;
      a4 = (icu::ByteSinkUtil *)((char *)a4 + 1);
      v49 = v50;
      v51 = v50;
      if ((v50 & 0x80000000) == 0)
        goto LABEL_87;
      v52 = (icu::ByteSinkUtil *)a5;
      if (a4 == (icu::ByteSinkUtil *)a5)
        goto LABEL_86;
      if (v51 < 0xE0)
      {
        if (v51 < 0xC2 || (v56 = *(unsigned __int8 *)a4 ^ 0x80, v56 > 0x3F))
        {
LABEL_85:
          v52 = a4;
LABEL_86:
          v51 = *(_DWORD *)(*((_QWORD *)this + 4) + 20) - 1;
          a4 = v52;
          goto LABEL_87;
        }
        v51 = *(unsigned __int16 *)(**((_QWORD **)this + 4) + 2 * (v49 & 0x1F)) + v56;
      }
      else if (v51 > 0xEF)
      {
        if (v51 > 0xF4)
          goto LABEL_85;
        v57 = *(unsigned __int8 *)a4;
        v52 = a4;
        if (((byte_18BDD50F4[v57 >> 4] >> (v51 + 16)) & 1) == 0)
          goto LABEL_86;
        v58 = v48 + 2;
        v52 = (icu::ByteSinkUtil *)a5;
        if (v48 + 2 == a5)
          goto LABEL_86;
        v52 = (icu::ByteSinkUtil *)(v48 + 2);
        if ((*v58 ^ 0x80u) > 0x3F)
          goto LABEL_86;
        a4 = (icu::ByteSinkUtil *)(v48 + 3);
        v52 = (icu::ByteSinkUtil *)a5;
        if (v48 + 3 == a5)
          goto LABEL_86;
        if ((*(_BYTE *)a4 ^ 0x80u) > 0x3F)
          goto LABEL_85;
        v59 = v57 & 0x3F | ((v51 - 240) << 6);
        v60 = *((_QWORD *)this + 4);
        if (v59 >= *(unsigned __int16 *)(v60 + 28))
        {
          v51 = *(_DWORD *)(v60 + 20) - 2;
        }
        else
        {
          v112 = a7;
          v51 = ucptrie_internalSmallU8Index(v60, v59, *v58 ^ 0x80u, *(_BYTE *)a4 ^ 0x80u);
          a7 = v112;
          v18 = v115;
          a8 = v119;
          a6 = v120;
          v12 = 0uLL;
          v11 = (icu::ByteSink *)v118;
        }
      }
      else
      {
        v53 = v49 & 0xF;
        v54 = *(_BYTE *)a4;
        v52 = a4;
        if (((a00000000000000[v53] >> (*(_BYTE *)a4 >> 5)) & 1) == 0)
          goto LABEL_86;
        a4 = (icu::ByteSinkUtil *)(v48 + 2);
        v52 = (icu::ByteSinkUtil *)a5;
        if (v48 + 2 == a5)
          goto LABEL_86;
        v55 = *(unsigned __int8 *)a4 ^ 0x80;
        if (v55 > 0x3F)
          goto LABEL_85;
        v51 = *(unsigned __int16 *)(**((_QWORD **)this + 4) + 2 * (v54 & 0x3Fu | ((_DWORD)v53 << 6))) + v55;
      }
      a4 = (icu::ByteSinkUtil *)((char *)a4 + 1);
LABEL_87:
      p_dst = *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 2 * (int)v51);
      if (p_dst < 0xFE02)
        goto LABEL_132;
      v61 = v45;
      v45 = p_dst >> 1;
      if (v61 > (p_dst >> 1))
      {
        if (!a6)
          goto LABEL_211;
LABEL_132:
        if (*((unsigned __int16 *)this + 11) <= p_dst
          && (*((unsigned __int16 *)this + 13) > p_dst
           || *((unsigned __int16 *)this + 15) <= p_dst))
        {
          a4 = (icu::ByteSinkUtil *)v48;
          goto LABEL_153;
        }
        if (*((unsigned __int16 *)this + 9) <= p_dst)
          a4 = (icu::ByteSinkUtil *)v48;
LABEL_199:
        a3 = v117;
        v12 = 0uLL;
        v18 = v115;
        if (a4 == (icu::ByteSinkUtil *)a5)
        {
LABEL_203:
          v8 = 1;
          if (a6 && v19 != (icu::ByteSinkUtil *)a5)
            icu::ByteSinkUtil::appendUnchanged(v19, a5, (const unsigned __int8 *)a6, v11, a7, (icu::Edits *)a8, (UErrorCode *)a7);
          goto LABEL_206;
        }
        goto LABEL_9;
      }
    }
  }
  if (!a6)
    goto LABEL_211;
  if (*((unsigned __int16 *)this + 13) <= v33)
  {
    if ((v33 & 1) == 0 || (v33 != 1 ? (v62 = (v33 & 6) >= 3) : (v62 = 0), v62 ? (v63 = a3 == 0) : (v63 = 1), !v63))
    {
      v64 = a7;
      hasCompBoundaryBefore = icu::Normalizer2Impl::hasCompBoundaryBefore(this, (const unsigned __int8 *)a4, a5);
      a8 = v119;
      a6 = v120;
      a7 = v64;
      if (!hasCompBoundaryBefore)
        goto LABEL_152;
    }
    if (v19 != v20)
    {
      v66 = a7;
      v67 = icu::ByteSinkUtil::appendUnchanged(v19, (const unsigned __int8 *)v20, (const unsigned __int8 *)a6, (icu::ByteSink *)v118, a7, (icu::Edits *)a8, (UErrorCode *)a7);
      a6 = v120;
      a7 = v66;
      if (!v67)
        goto LABEL_210;
    }
    v68 = (v33 >> 3) - *((unsigned __int16 *)this + 14);
    LODWORD(__dst) = 0;
    if ((_DWORD)a4 - (_DWORD)v20 == 1)
    {
      LOBYTE(__dst) = *(_BYTE *)v20 + v68;
      v69 = 1;
    }
    else
    {
      v114 = a7;
      v84 = v68 + *((unsigned __int8 *)a4 - 1);
      if ((v84 & 0xFFFFFFC0) == 0x80)
      {
        if ((char *)a4 - 1 <= (char *)v20 + 1)
          v85 = (char *)v20 + 1;
        else
          v85 = (char *)a4 - 1;
        memcpy(&__dst, v20, v85 - (char *)v20);
        v69 = ((_DWORD)v85 + ~(_DWORD)v20 + 2);
        *((_BYTE *)&__dst + ((_DWORD)v85 - (_DWORD)v20)) = v84;
      }
      else
      {
        v86 = sub_18BBD9EFC((unint64_t)v20, (uint64_t)a4) + v68;
        if (v86 > 0x7F)
        {
          if (v86 > 0x7FF)
          {
            if (HIWORD(v86))
            {
              v93 = (v86 >> 18) | 0xFFFFFFF0;
              BYTE1(__dst) = (v86 >> 12) & 0x3F | 0x80;
              v94 = 2;
            }
            else
            {
              v93 = (v86 >> 12) | 0xFFFFFFE0;
              v94 = 1;
            }
            a7 = v114;
            a6 = v120;
            LOBYTE(__dst) = v93;
            v92 = v94 + 1;
            *(_BYTE *)((unint64_t)&__dst | v94) = (v86 >> 6) & 0x3F | 0x80;
          }
          else
          {
            LOBYTE(__dst) = (v86 >> 6) | 0xC0;
            v92 = 1;
            a7 = v114;
            a6 = v120;
          }
          v69 = v92 + 1;
          *((_BYTE *)&__dst + v92) = v86 & 0x3F | 0x80;
          goto LABEL_196;
        }
        LOBYTE(__dst) = v86;
        v69 = 1;
      }
      a7 = v114;
      a6 = v120;
    }
LABEL_196:
    v110 = a7;
    if (a7)
    {
      icu::Edits::addReplace(a7, (_DWORD)a4 - (_DWORD)v20, v69);
      a6 = v120;
    }
    (*(void (**)(icu::ByteSink *, icu::Normalizer2Impl **, uint64_t))(*(_QWORD *)a6 + 16))(a6, &__dst, v69);
    a8 = v119;
    a6 = v120;
    v19 = a4;
    a7 = v110;
    v11 = (icu::ByteSink *)v118;
    goto LABEL_199;
  }
  if (v33 >= *((unsigned __int16 *)this + 10))
  {
    if (v33 < *((unsigned __int16 *)this + 12))
      goto LABEL_153;
    v82 = a7;
    if (!icu::Normalizer2Impl::hasCompBoundaryBefore(this, (const unsigned __int8 *)a4, a5)
      && !icu::Normalizer2Impl::hasCompBoundaryAfter(this, (const unsigned __int8 *)v19, (const unsigned __int8 *)v20, v117))
    {
      a7 = v82;
      goto LABEL_152;
    }
    a8 = v119;
    a6 = v120;
    a7 = v82;
    v11 = (icu::ByteSink *)v118;
    if (v19 == v20
      || (v83 = icu::ByteSinkUtil::appendUnchanged(v19, (const unsigned __int8 *)v20, (const unsigned __int8 *)v120, (icu::ByteSink *)v118, v82, (icu::Edits *)v119, (UErrorCode *)v82), a8 = v119, a6 = v120, v11 = (icu::ByteSink *)v118, a7 = v82, v83))
    {
      if (!a7)
      {
LABEL_144:
        v19 = a4;
        goto LABEL_199;
      }
      icu::Edits::addReplace(a7, (_DWORD)a4 - (_DWORD)v20, 0);
      a6 = v120;
      v11 = (icu::ByteSink *)v118;
      a7 = v82;
LABEL_143:
      a8 = v119;
      goto LABEL_144;
    }
    goto LABEL_210;
  }
  if ((v33 & 1) != 0
    && (!a3 || v33 == 1 || *(unsigned __int16 *)(*((_QWORD *)this + 6) + ((unsigned __int16)v33 & 0xFFFE)) < 0x200u)
    || (v34 = a7,
        v35 = icu::Normalizer2Impl::hasCompBoundaryBefore(this, (const unsigned __int8 *)a4, a5),
        a8 = v119,
        a6 = v120,
        a7 = v34,
        v35))
  {
    if (v19 == v20
      || (v36 = a7,
          v37 = icu::ByteSinkUtil::appendUnchanged(v19, (const unsigned __int8 *)v20, (const unsigned __int8 *)a6, (icu::ByteSink *)v118, a7, (icu::Edits *)a8, (UErrorCode *)a7), a8 = v119, a6 = v120, a7 = v36, v37))
    {
      v38 = (_WORD *)(*((_QWORD *)this + 6) + ((unsigned __int16)v33 & 0xFFFE));
      v39 = a7;
      v40 = icu::ByteSinkUtil::appendChange((uint64_t)v20, (uint64_t)a4, (uint64_t)(v38 + 1), *v38 & 0x1F, (uint64_t)a6, a7, (int *)a8);
      a8 = v119;
      a6 = v120;
      v11 = (icu::ByteSink *)v118;
      a7 = v39;
      v19 = a4;
      if (v40)
        goto LABEL_199;
    }
    goto LABEL_210;
  }
LABEL_152:
  v12 = 0uLL;
  v18 = v115;
LABEL_153:
  v95 = a7;
  v96 = v19;
  if (v19 != v20)
  {
    if (*((unsigned __int16 *)this + 11) > v33
      || *((unsigned __int16 *)this + 13) <= v33 && *((unsigned __int16 *)this + 15) > v33)
    {
      goto LABEL_166;
    }
    v96 = (icu::ByteSinkUtil *)((char *)v20 - 1);
    v97 = *((unsigned __int8 *)v20 - 1);
    v98 = *((_QWORD *)this + 4);
    if (*((char *)v20 - 1) < 0)
    {
      v99 = v18;
      Index = ucptrie_internalU8PrevIndex(v98, v97, (const uint8_t *)v19, (uint64_t)v20 - 1);
      v18 = v99;
      v12 = 0uLL;
      v96 = (icu::ByteSinkUtil *)((char *)v96 - (Index & 7));
      v97 = Index >> 3;
      v98 = *((_QWORD *)this + 4);
    }
    v101 = *(_WORD *)(*(_QWORD *)(v98 + 8) + 2 * v97);
    if ((v101 & 1) != 0)
    {
      if (v117 && *(_WORD *)(*(_QWORD *)(v98 + 8) + 2 * v97) != 1)
      {
        if (*((unsigned __int16 *)this + 13) <= v101)
        {
          if ((v101 & 6u) >= 3)
            goto LABEL_167;
        }
        else if (*(unsigned __int16 *)(*((_QWORD *)this + 6) + (v101 & 0xFFFE)) > 0x1FFu)
        {
          goto LABEL_167;
        }
      }
LABEL_166:
      v96 = v20;
    }
  }
LABEL_167:
  *((_OWORD *)v18 + 1) = v12;
  *((_OWORD *)v18 + 2) = v12;
  *(_OWORD *)v18 = v12;
  __dst = this;
  v122 = (icu::UnicodeString *)&v127;
  Buffer = icu::UnicodeString::getBuffer((icu::UnicodeString *)&v127, 8);
  v123[0] = Buffer;
  v123[1] = Buffer;
  v124 = Buffer;
  if ((*((_BYTE *)v122 + 8) & 2) != 0)
    v103 = 27;
  else
    v103 = *((_DWORD *)v122 + 4);
  a8 = v119;
  a6 = v120;
  a7 = v95;
  v125 = v103;
  v126 = 0;
  v104 = *v119;
  v11 = (icu::ByteSink *)v118;
  if (!Buffer && v104 <= U_ZERO_ERROR)
  {
    *v119 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_174;
  }
  if (v104 > U_ZERO_ERROR)
  {
LABEL_174:
    v105 = 2;
    goto LABEL_175;
  }
  icu::Normalizer2Impl::decomposeShort((uint64_t)this, v96, a4, 0, v117, (icu::ReorderingBuffer *)&__dst, v119);
  v105 = 2;
  v106 = (icu::ByteSinkUtil *)icu::Normalizer2Impl::decomposeShort((uint64_t)this, a4, a5, 2, v117, (icu::ReorderingBuffer *)&__dst, v119);
  a8 = v119;
  a4 = v106;
  if (*(int *)v119 > 0)
  {
LABEL_182:
    a7 = v95;
    v11 = (icu::ByteSink *)v118;
    goto LABEL_183;
  }
  if (v106 - v96 >= 0x80000000)
  {
    *v119 = U_INDEX_OUTOFBOUNDS_ERROR;
    v105 = 1;
    v8 = 1;
    goto LABEL_182;
  }
  icu::Normalizer2Impl::recompose((uint64_t)this, (icu::ReorderingBuffer *)&__dst, 0, v117);
  if (icu::ReorderingBuffer::equals((icu::ReorderingBuffer *)&__dst, (const unsigned __int8 *)v96, (const unsigned __int8 *)a4))
  {
    v107 = v19;
    a7 = v95;
    v11 = (icu::ByteSink *)v118;
    goto LABEL_186;
  }
  a7 = v95;
  v11 = (icu::ByteSink *)v118;
  a6 = v120;
  if (v120)
  {
    a8 = v119;
    if (v19 == v96
      || (v108 = icu::ByteSinkUtil::appendUnchanged(v19, (const unsigned __int8 *)v96, (const unsigned __int8 *)v120, (icu::ByteSink *)v118, v95, (icu::Edits *)v119, (UErrorCode *)v95), a8 = v119, a6 = v120, v11 = (icu::ByteSink *)v118, a7 = v95, v108))
    {
      v109 = icu::ByteSinkUtil::appendChange((uint64_t)v96, (uint64_t)a4, v123[0], (unint64_t)(v124 - v123[0]) >> 1, (uint64_t)a6, a7, (int *)a8);
      v11 = (icu::ByteSink *)v118;
      a7 = v95;
      v107 = a4;
      if (v109)
      {
LABEL_186:
        v105 = 0;
        v19 = v107;
      }
      a8 = v119;
LABEL_183:
      a6 = v120;
    }
  }
  else
  {
    v8 = 0;
    v105 = 1;
    a8 = v119;
  }
LABEL_175:
  p_dst = v123[0];
  if (v123[0])
  {
    icu::UnicodeString::releaseBuffer((uint64_t)v122, (unint64_t)(v124 - v123[0]) >> 1);
    a8 = v119;
    a6 = v120;
    v11 = (icu::ByteSink *)v118;
    a7 = v95;
  }
  if (!v105)
    goto LABEL_199;
  if (v105 == 2)
    goto LABEL_210;
LABEL_206:
  icu::UnicodeString::~UnicodeString((void *)p_dst, (icu::UnicodeString *)&v127);
  return v8;
}

BOOL icu::Normalizer2Impl::hasCompBoundaryBefore(icu::Normalizer2Impl *this, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;

  if (a2 == a3)
    return 1;
  v4 = a2 + 1;
  v5 = *a2;
  if (*(char *)a2 < 0)
  {
    if (v4 != a3)
    {
      if (v5 < 0xE0)
      {
        if (v5 >= 0xC2)
        {
          v10 = *v4 ^ 0x80;
          if (v10 <= 0x3F)
          {
            v5 = *(unsigned __int16 *)(**((_QWORD **)this + 4) + 2 * (*a2 & 0x1F)) + v10;
            goto LABEL_23;
          }
        }
      }
      else if (v5 > 0xEF)
      {
        if (v5 <= 0xF4)
        {
          v11 = *v4;
          if (((byte_18BDD50F4[v11 >> 4] >> (v5 + 16)) & 1) != 0
            && a2 + 2 != a3
            && (a2[2] ^ 0x80u) <= 0x3F
            && a2 + 3 != a3
            && (a2[3] ^ 0x80u) <= 0x3F)
          {
            v12 = v11 & 0x3F | ((v5 - 240) << 6);
            v13 = *((_QWORD *)this + 4);
            if (v12 >= *(unsigned __int16 *)(v13 + 28))
              v5 = *(_DWORD *)(v13 + 20) - 2;
            else
              v5 = ucptrie_internalSmallU8Index(v13, v12, a2[2] ^ 0x80u, a2[3] ^ 0x80u);
            goto LABEL_23;
          }
        }
      }
      else
      {
        v6 = *a2 & 0xF;
        v7 = *v4;
        if (((a00000000000000[v6] >> (v7 >> 5)) & 1) != 0 && a2 + 2 != a3)
        {
          v8 = a2[2] ^ 0x80;
          if (v8 <= 0x3F)
          {
            v5 = *(unsigned __int16 *)(**((_QWORD **)this + 4) + 2 * (v7 & 0x3F | ((_DWORD)v6 << 6))) + v8;
            goto LABEL_23;
          }
        }
      }
    }
    v5 = *(_DWORD *)(*((_QWORD *)this + 4) + 20) - 1;
  }
LABEL_23:
  v14 = *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 2 * (int)v5);
  if (*((unsigned __int16 *)this + 11) > v14)
    return 1;
  if (*((unsigned __int16 *)this + 13) <= v14)
    return *((unsigned __int16 *)this + 15) > v14;
  return 0;
}

BOOL icu::Normalizer2Impl::hasCompBoundaryAfter(icu::Normalizer2Impl *this, const unsigned __int8 *a2, const unsigned __int8 *a3, int a4)
{
  const unsigned __int8 *v8;
  int v9;
  UChar32 v10;
  unsigned int v11;
  _BOOL8 result;
  BOOL v13;

  if (a2 == a3)
    return 1;
  v9 = *((char *)a3 - 1);
  v8 = a3 - 1;
  v10 = v9;
  if (v9 < 0)
    v10 = (int)ucptrie_internalU8PrevIndex(*((_QWORD *)this + 4), v10, a2, (uint64_t)v8) >> 3;
  v11 = *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 2 * v10);
  if ((v11 & 1) == 0)
    return 0;
  result = 1;
  if (a4 && v11 != 1)
  {
    if (*((unsigned __int16 *)this + 13) <= v11)
      v13 = (v11 & 6) >= 3;
    else
      v13 = *(unsigned __int16 *)(*((_QWORD *)this + 6) + ((unsigned __int16)v11 & 0xFFFE)) >= 0x200u;
    return !v13;
  }
  return result;
}

uint64_t sub_18BBDD520(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  int v3;

  if (a2 - (uint64_t)a1 < 3 || *a1 != 225)
    return 0xFFFFFFFFLL;
  v2 = a1[1];
  if (v2 != 135)
  {
    if (v2 == 134)
    {
      v3 = a1[2];
      if ((v3 + 64) >= 0xE8u)
        return (v3 - 167);
    }
    return 0xFFFFFFFFLL;
  }
  if ((char)a1[2] >= -125)
    return 0xFFFFFFFFLL;
  return a1[2] - 103;
}

uint64_t icu::Normalizer2Impl::getPreviousTrailCC(icu::Normalizer2Impl *this, uint8_t *s, uint8_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  UChar32 v6;
  uint64_t result;
  int32_t pi;
  uint64_t v9;
  uint64_t v10;

  if (s == a3)
  {
    LOBYTE(result) = 0;
  }
  else
  {
    v9 = v3;
    v10 = v4;
    pi = (_DWORD)a3 - (_DWORD)s - 1;
    v6 = s[(int)a3 - (int)s - 1];
    if ((v6 & 0x80) != 0)
      v6 = utf8_prevCharSafeBody(s, 0, &pi, v6, -1);
    LOBYTE(result) = sub_18BBD6AB4((uint64_t)this, v6);
  }
  return result;
}

uint64_t icu::Normalizer2Impl::getFCD16FromNormData(icu::Normalizer2Impl *this, unsigned int a2)
{
  unsigned int v4;
  unsigned __int16 *v5;
  unsigned int v6;
  unsigned int v7;

  v4 = sub_18BBD79D4((uint64_t)this, a2);
  if (v4 >= *((unsigned __int16 *)this + 13))
  {
    if (v4 >> 10 >= 0x3F)
      return (unsigned __int16)((v4 >> 1) | (v4 >> 1 << 8));
    if (v4 >= *((unsigned __int16 *)this + 15))
    {
LABEL_11:
      LOWORD(v7) = 0;
      return (unsigned __int16)v7;
    }
    if ((v4 & 6) < 3)
      return (v4 & 6) >> 1;
    v4 = sub_18BBD840C((uint64_t)this, a2 + (v4 >> 3) - *((unsigned __int16 *)this + 14));
  }
  if (v4 <= *((unsigned __int16 *)this + 7) || (*((unsigned __int16 *)this + 8) | 1) == v4)
    goto LABEL_11;
  v5 = (unsigned __int16 *)(*((_QWORD *)this + 6) + ((unsigned __int16)v4 & 0xFFFE));
  v6 = *v5;
  v7 = v6 >> 8;
  if ((v6 & 0x80) != 0)
    LOWORD(v7) = v7 | (*((unsigned __int8 *)v5 - 1) << 8);
  return (unsigned __int16)v7;
}

unsigned __int16 *icu::Normalizer2Impl::makeFCD(icu::Normalizer2Impl *this, UChar *src, UChar *a3, UChar **a4, UErrorCode *a5)
{
  unsigned __int16 *v7;
  UChar *v9;
  unsigned int v10;
  unsigned __int16 *NextFCDBoundary;
  BOOL v12;
  unsigned int v13;
  UChar *v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  UChar *v18;
  int v20;
  int v21;
  unsigned int FCD16FromNormData;
  unsigned __int16 *v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  signed int v35;
  UErrorCode *v36;
  icu::ReorderingBuffer *v37;

  v7 = src;
  if (a3)
  {
    v9 = a3;
    v10 = 0;
    NextFCDBoundary = src;
  }
  else
  {
    v29 = 0;
    do
    {
      v30 = src[v29++];
      if (v30)
        v31 = v30 >= *((unsigned __int16 *)this + 6);
      else
        v31 = 1;
    }
    while (!v31);
    NextFCDBoundary = &src[v29 - 1];
    if (a4 && v29 != 1)
      icu::ReorderingBuffer::appendZeroCC(a4, src, &src[v29 - 1], a5);
    if (*(int *)a5 > 0)
      return NextFCDBoundary;
    if (NextFCDBoundary <= v7)
    {
      v10 = 0;
    }
    else
    {
      v33 = &v7[v29];
      v35 = *(v33 - 2);
      v34 = v33 - 2;
      v10 = sub_18BBD6AB4((uint64_t)this, v35);
      if (v10 <= 1)
        v7 = NextFCDBoundary;
      else
        v7 = v34;
    }
    v9 = u_strchr(NextFCDBoundary, 0);
  }
  v12 = NextFCDBoundary == v9;
  if (NextFCDBoundary == v9)
    return v9;
  v36 = a5;
  v37 = (icu::ReorderingBuffer *)a4;
  while (2)
  {
    v13 = v10;
    v14 = NextFCDBoundary;
    while (1)
    {
      v15 = *v14;
      if (v15 >= *((unsigned __int16 *)this + 6))
        break;
      v13 = ~(_DWORD)v15;
LABEL_14:
      v17 = 1;
LABEL_27:
      v14 += v17;
      if (v14 == v9)
      {
        if (v37 != 0 && !v12)
          icu::ReorderingBuffer::appendZeroCC((UChar **)v37, NextFCDBoundary, v9, v36);
        return v9;
      }
    }
    if (*(_BYTE *)(*((_QWORD *)this + 7) + (v15 >> 8)))
      v16 = ((1 << (v15 >> 5)) & *(unsigned __int8 *)(*((_QWORD *)this + 7) + (v15 >> 8))) == 0;
    else
      v16 = 1;
    if (v16)
    {
      v13 = 0;
      goto LABEL_14;
    }
    v18 = v14 + 1;
    if ((v15 & 0xFC00) == 0xD800 && v18 != v9)
    {
      v20 = *v18;
      v16 = (v20 & 0xFC00) == 56320;
      v21 = ((_DWORD)v15 << 10) - 56613888 + v20;
      if (v16)
        LODWORD(v15) = v21;
    }
    FCD16FromNormData = icu::Normalizer2Impl::getFCD16FromNormData(this, v15);
    v10 = FCD16FromNormData;
    if (FCD16FromNormData <= 0xFF)
    {
      if (v15 < 0x10000)
        v17 = 1;
      else
        v17 = 2;
      v13 = FCD16FromNormData;
      goto LABEL_27;
    }
    if (v14 == NextFCDBoundary)
    {
      v14 = NextFCDBoundary;
    }
    else
    {
      if (v37 && !icu::ReorderingBuffer::appendZeroCC((UChar **)v37, NextFCDBoundary, v14, v36))
        return v14;
      if ((v13 & 0x80000000) != 0)
      {
        if (~v13 >= *((unsigned __int16 *)this + 4))
        {
          v26 = icu::Normalizer2Impl::getFCD16FromNormData(this, ~v13);
          LOBYTE(v13) = v26;
          if (v26 <= 1)
            v27 = 0;
          else
            v27 = -1;
          v7 = &v14[v27];
        }
        else
        {
          LOBYTE(v13) = 0;
          v7 = v14;
        }
      }
      else
      {
        v23 = v14 - 1;
        v24 = *(v14 - 1);
        if ((v24 & 0xFC00) == 0xDC00 && NextFCDBoundary < v23)
        {
          v25 = *(v14 - 2);
          if ((v25 & 0xFC00) == 0xD800)
          {
            v13 = icu::Normalizer2Impl::getFCD16FromNormData(this, v24 - 56613888 + (v25 << 10));
            v23 = v14 - 2;
          }
        }
        if (v13 <= 1)
          v7 = v14;
        else
          v7 = v23;
      }
    }
    v28 = 2;
    if (v15 < 0x10000)
      v28 = 1;
    NextFCDBoundary = &v14[v28];
    if (v13 <= v10 >> 8)
    {
      if ((v10 & 0xFE) == 0)
        v7 = &v14[v28];
      if (!v37 || icu::ReorderingBuffer::appendZeroCC(v37, v15, v36))
        goto LABEL_57;
    }
    else
    {
      if (!v37)
        return v7;
      icu::ReorderingBuffer::removeSuffix((uint64_t)v37, (unint64_t)((char *)v14 - (char *)v7) >> 1);
      NextFCDBoundary = icu::Normalizer2Impl::findNextFCDBoundary((uint64_t)this, NextFCDBoundary, v9);
      icu::Normalizer2Impl::decomposeShort((uint64_t)this, v7, NextFCDBoundary, 0, 0, (UChar **)v37, v36);
      v10 = 0;
      v7 = NextFCDBoundary;
      if (*(int *)v36 >= 1)
        return NextFCDBoundary;
LABEL_57:
      v12 = NextFCDBoundary == v9;
      if (NextFCDBoundary != v9)
        continue;
      return v9;
    }
    return NextFCDBoundary;
  }
}

unsigned __int16 *icu::Normalizer2Impl::findNextFCDBoundary(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unint64_t v6;
  unsigned __int16 *v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;

  while (a2 < a3)
  {
    v7 = a2 + 1;
    v6 = *a2;
    if ((v6 & 0xF800) == 0xD800)
    {
      if ((v6 & 0x400) != 0 || v7 == a3)
      {
        v9 = *(_QWORD *)(a1 + 32);
      }
      else
      {
        v8 = *v7;
        v9 = *(_QWORD *)(a1 + 32);
        if ((v8 & 0xFC00) == 0xDC00)
        {
          v7 = a2 + 2;
          LODWORD(v6) = v8 + ((_DWORD)v6 << 10) - 56613888;
          if ((int)v6 >= *(_DWORD *)(v9 + 24))
          {
            v10 = *(_DWORD *)(v9 + 20) - 2;
          }
          else
          {
            v10 = ucptrie_internalSmallIndex((uint64_t *)v9, v6);
            v9 = *(_QWORD *)(a1 + 32);
          }
          goto LABEL_11;
        }
      }
      v10 = *(_DWORD *)(v9 + 20) - 1;
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = (v6 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v9 + ((v6 >> 5) & 0x7FE));
    }
LABEL_11:
    if (v6 >= *(unsigned __int16 *)(a1 + 12))
    {
      v11 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 8) + 2 * v10);
      if (!icu::Normalizer2Impl::norm16HasDecompBoundaryBefore((icu::Normalizer2Impl *)a1, v11))
      {
        a2 = v7;
        if (!icu::Normalizer2Impl::norm16HasDecompBoundaryAfter((icu::Normalizer2Impl *)a1, v11))
          continue;
      }
    }
    return a2;
  }
  return a2;
}

unsigned __int16 *icu::Normalizer2Impl::makeFCDAndAppend(icu::Normalizer2Impl *this, UChar *src, unsigned __int16 *a3, int a4, UChar **a5, icu::ReorderingBuffer *a6, UErrorCode *a7)
{
  UChar *v10;
  UChar *v11;
  unsigned __int16 *NextFCDBoundary;
  unint64_t v15;
  unsigned __int16 *v16;
  unint64_t PreviousFCDBoundary;
  uint64_t v18;
  UChar *v19;
  int v20;
  UErrorCode v21;
  void *v22;
  unsigned __int16 *result;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v10 = a3;
  v11 = src;
  v28 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a6 + 2) == *((_QWORD *)a6 + 4)
    || (NextFCDBoundary = icu::Normalizer2Impl::findNextFCDBoundary((uint64_t)this, src, a3),
        v15 = (char *)NextFCDBoundary - (char *)v11,
        NextFCDBoundary == v11))
  {
LABEL_12:
    if (a4)
      return icu::Normalizer2Impl::makeFCD(this, v11, v10, (UChar **)a6, a7);
    if (!v10)
      v10 = u_strchr(v11, 0);
    return (unsigned __int16 *)icu::ReorderingBuffer::appendZeroCC((UChar **)a6, v11, v10, a7);
  }
  v16 = NextFCDBoundary;
  PreviousFCDBoundary = icu::Normalizer2Impl::findPreviousFCDBoundary(this, *((_QWORD *)a6 + 2), *((_QWORD *)a6 + 4));
  v18 = (*((_QWORD *)a6 + 4) - PreviousFCDBoundary) >> 1;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  icu::UnicodeString::UnicodeString((uint64_t)&v24, PreviousFCDBoundary, v18);
  icu::ReorderingBuffer::removeSuffix((uint64_t)a6, v18);
  icu::UnicodeString::operator=(a5, (UChar **)&v24);
  icu::UnicodeString::doAppend((uint64_t)&v24, (uint64_t)v11, 0, v15 >> 1);
  if ((BYTE8(v24) & 0x11) != 0)
  {
    v19 = 0;
  }
  else if ((BYTE8(v24) & 2) != 0)
  {
    v19 = (UChar *)((unint64_t)&v24 | 0xA);
  }
  else
  {
    v19 = (UChar *)*((_QWORD *)&v25 + 1);
  }
  v20 = WORD4(v24) >> 5;
  if (SWORD4(v24) < 0)
    v20 = HIDWORD(v24);
  icu::Normalizer2Impl::makeFCD(this, v19, &v19[v20], (UChar **)a6, a7);
  v21 = *a7;
  result = (unsigned __int16 *)icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v24);
  if (v21 <= U_ZERO_ERROR)
  {
    v11 = v16;
    goto LABEL_12;
  }
  return result;
}

unint64_t icu::Normalizer2Impl::findPreviousFCDBoundary(icu::Normalizer2Impl *this, unint64_t a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;

  while (a3 > a2)
  {
    v7 = a3 - 2;
    v6 = *(unsigned __int16 *)(a3 - 2);
    if ((v6 & 0xF800) == 0xD800)
    {
      if (v7 == a2 || (v6 & 0x400) == 0)
      {
        v9 = *((_QWORD *)this + 4);
      }
      else
      {
        v8 = *(unsigned __int16 *)(a3 - 4);
        v9 = *((_QWORD *)this + 4);
        if ((v8 & 0xFC00) == 0xD800)
        {
          LODWORD(v6) = v6 + (v8 << 10) - 56613888;
          if ((int)v6 >= *(_DWORD *)(v9 + 24))
          {
            v10 = *(_DWORD *)(v9 + 20) - 2;
          }
          else
          {
            v10 = ucptrie_internalSmallIndex((uint64_t *)v9, v6);
            v9 = *((_QWORD *)this + 4);
          }
          v7 = a3 - 4;
          goto LABEL_13;
        }
      }
      v10 = *(_DWORD *)(v9 + 20) - 1;
    }
    else
    {
      v9 = *((_QWORD *)this + 4);
      v10 = (v6 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v9 + ((v6 >> 5) & 0x7FE));
    }
LABEL_13:
    if (v6 >= *((unsigned __int16 *)this + 4))
    {
      v11 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 8) + 2 * v10);
      if (!icu::Normalizer2Impl::norm16HasDecompBoundaryAfter(this, v11))
      {
        a3 = v7;
        if (!icu::Normalizer2Impl::norm16HasDecompBoundaryBefore(this, v11))
          continue;
      }
    }
    return a3;
  }
  return a3;
}

uint64_t sub_18BBDDE7C(uint64_t a1)
{
  umutablecptrie_close(*(void ***)a1);
  ucptrie_close(*(_QWORD *)(a1 + 8));
  icu::UVector::~UVector((icu::UVector *)(a1 + 16));
  return a1;
}

void sub_18BBDDEB4(uint64_t a1, unsigned int a2, unsigned int a3, int *a4)
{
  unint64_t v8;
  int v9;
  icu::UnicodeSet *v10;
  icu::UnicodeSet *v11;
  void *v12;

  v9 = umutablecptrie_get(*(_QWORD *)a1, a3);
  if (a2 && (v9 & 0x3FFFFF) == 0)
  {
    umutablecptrie_set(*(_QWORD *)a1, a3, v9 | a2, a4);
    return;
  }
  if ((v9 & 0x200000) != 0)
  {
    v11 = (icu::UnicodeSet *)icu::UVector::elementAt((icu::UVector *)(a1 + 16), v9 & 0x1FFFFF);
LABEL_9:
    icu::UnicodeSet::add(v11, a2);
    return;
  }
  v10 = (icu::UnicodeSet *)icu::UMemory::operator new((icu::UMemory *)0xC8, v8);
  if (!v10)
  {
    if (*a4 <= 0)
      *a4 = 7;
    return;
  }
  v11 = v10;
  icu::UnicodeSet::UnicodeSet(v10);
  if (*a4 > 0)
  {
    icu::UnicodeSet::~UnicodeSet(v11);
    icu::UMemory::operator delete(v12);
    return;
  }
  umutablecptrie_set(*(_QWORD *)a1, a3, v9 & 0xFFC00000 | *(_DWORD *)(a1 + 24) | 0x200000, a4);
  icu::UVector::adoptElement((icu::UVector *)(a1 + 16), v11, (UErrorCode *)a4);
  if (*a4 <= 0)
  {
    if ((v9 & 0x1FFFFF) != 0)
      icu::UnicodeSet::add(v11, v9 & 0x1FFFFF);
    goto LABEL_9;
  }
}

void sub_18BBDE018(uint64_t a1, int *a2)
{
  void ***v4;
  uint64_t v5;
  uint64_t *v6;
  signed int Range;
  signed int v8;
  signed int v9;
  char *v10;
  void ***v11;
  void *v12;
  int v13;

  v4 = (void ***)icu::UMemory::operator new((icu::UMemory *)0x38, (unint64_t)a2);
  if (!v4)
  {
    v6 = (uint64_t *)(a1 + 72);
    *a2 = 7;
    goto LABEL_11;
  }
  v5 = (uint64_t)v4;
  *v4 = umutablecptrie_open(0, 0, a2);
  *(_QWORD *)(v5 + 8) = 0;
  icu::UVector::UVector(v5 + 16, (uint64_t)uprv_deleteUObject, 0, a2);
  *(_QWORD *)(a1 + 72) = v5;
  v6 = (uint64_t *)(a1 + 72);
  if (*a2 > 0)
    goto LABEL_9;
  v13 = 0;
  Range = ucptrie_getRange(*(_QWORD *)(a1 + 32), 0, 1, 1, 0, 0, &v13);
  if ((Range & 0x80000000) == 0)
  {
    v8 = Range;
    v9 = 0;
    do
    {
      if (v13 != 1)
        icu::Normalizer2Impl::makeCanonIterDataFromNorm16(a1, v9, v8, (unsigned __int16)v13, *(uint64_t **)(a1 + 72), a2);
      v9 = v8 + 1;
      v8 = ucptrie_getRange(*(_QWORD *)(a1 + 32), (v8 + 1), 1, 1, 0, 0, &v13);
    }
    while ((v8 & 0x80000000) == 0);
  }
  v10 = umutablecptrie_buildImmutable();
  v11 = (void ***)*v6;
  v11[1] = (void **)v10;
  umutablecptrie_close(*v11);
  v5 = *v6;
  *(_QWORD *)*v6 = 0;
  if (*a2 >= 1)
  {
LABEL_9:
    v12 = (void *)sub_18BBDDE7C(v5);
    icu::UMemory::operator delete(v12);
LABEL_11:
    *v6 = 0;
  }
}

void icu::Normalizer2Impl::makeCanonIterDataFromNorm16(uint64_t a1, signed int a2, signed int a3, unsigned int a4, uint64_t *a5, int *a6)
{
  unsigned int v8;
  unsigned int v11;
  unsigned int v12;
  signed int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  _WORD *v20;
  __int16 v21;
  int v23;
  unsigned int v24;
  _WORD *v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  signed int v32;

  if (a4 != 1)
  {
    v8 = a2;
    if (*(unsigned __int16 *)(a1 + 14) <= a4)
    {
      if (*(unsigned __int16 *)(a1 + 18) <= a4 && a2 <= a3)
        goto LABEL_10;
    }
    else if (a2 <= a3)
    {
LABEL_10:
      if (a4 >> 10 >= 0x3F)
        v11 = 0x80000000;
      else
        v11 = -1073741824;
      v12 = a4 >> 3;
      if (a3 <= a2)
        v13 = a2;
      else
        v13 = a3;
      v31 = v11;
      v32 = v13;
      v30 = a4 >> 3;
      while (1)
      {
        v14 = umutablecptrie_get(*a5, v8);
        v15 = v14;
        if (*(unsigned __int16 *)(a1 + 30) <= a4)
          break;
        v16 = *(unsigned __int16 *)(a1 + 14);
        if (v16 > a4)
        {
          v17 = v14 | 0x40000000;
          goto LABEL_21;
        }
        v18 = v8;
        v19 = a4;
        if (*(unsigned __int16 *)(a1 + 26) <= a4)
        {
          v18 = v8 + v12 - *(unsigned __int16 *)(a1 + 28);
          v19 = sub_18BBD840C(a1, v18);
          v16 = *(unsigned __int16 *)(a1 + 14);
        }
        if (v19 > v16)
        {
          v20 = (_WORD *)(*(_QWORD *)(a1 + 48) + ((unsigned __int16)v19 & 0xFFFE));
          v21 = *v20;
          if (v8 == v18)
          {
            v17 = v15;
            if ((v21 & 0x80) != 0)
            {
              if (*((_BYTE *)v20 - 2))
                v17 = v15 | 0x80000000;
              else
                v17 = v15;
            }
          }
          else
          {
            v17 = v15;
          }
          v23 = v21 & 0x1F;
          if ((v21 & 0x1F) != 0)
          {
            v25 = v20 + 1;
            v24 = (unsigned __int16)v20[1];
            if ((v24 & 0xFC00) == 0xD800)
            {
              v24 = (v24 << 10) - 56613888 + (unsigned __int16)v20[2];
              v26 = 2;
            }
            else
            {
              v26 = 1;
            }
            sub_18BBDDEB4((uint64_t)a5, v8, v24, a6);
            if (v19 >= *(unsigned __int16 *)(a1 + 18) && v26 < v23)
            {
              do
              {
                v27 = v26 + 1;
                v28 = (unsigned __int16)v25[v26];
                if ((v28 & 0xFC00) == 0xD800)
                {
                  v26 += 2;
                  v28 = (v28 << 10) - 56613888 + (unsigned __int16)v25[v27];
                }
                else
                {
                  ++v26;
                }
                v29 = umutablecptrie_get(*a5, v28);
                if ((v29 & 0x80000000) == 0)
                  umutablecptrie_set(*a5, v28, v29 | 0x80000000, a6);
              }
              while (v26 < v23);
            }
            v12 = v30;
            v11 = v31;
          }
          v13 = v32;
          goto LABEL_21;
        }
        sub_18BBDDEB4((uint64_t)a5, v8, v18, a6);
LABEL_32:
        if (v8++ == v13)
          return;
      }
      v17 = v14 | v11;
LABEL_21:
      if (v17 != v15)
        umutablecptrie_set(*a5, v8, v17, a6);
      goto LABEL_32;
    }
  }
}

uint64_t icu::Normalizer2Impl::getCanonValue(icu::Normalizer2Impl *this, unsigned int a2)
{
  return ucptrie_get(*(_QWORD *)(*((_QWORD *)this + 9) + 8), a2);
}

uint64_t icu::Normalizer2Impl::getCanonStartSet(icu::Normalizer2Impl *this, unsigned int a2)
{
  return icu::UVector::elementAt((icu::UVector *)(*((_QWORD *)this + 9) + 16), a2);
}

BOOL icu::Normalizer2Impl::isCanonSegmentStarter(icu::Normalizer2Impl *this, unsigned int a2)
{
  return (int)ucptrie_get(*(_QWORD *)(*((_QWORD *)this + 9) + 8), a2) >= 0;
}

uint64_t icu::Normalizer2Impl::getCanonStartSet(icu::Normalizer2Impl *this, unsigned int a2, icu::UnicodeSet *a3)
{
  int v6;
  int v7;
  unsigned int v8;
  const icu::UnicodeSet *v10;
  unsigned int v11;
  const unsigned __int16 *v12;

  v6 = ucptrie_get(*(_QWORD *)(*((_QWORD *)this + 9) + 8), a2);
  if ((v6 & 0x7FFFFFFF) == 0)
    return 0;
  v7 = v6;
  icu::UnicodeSet::clear(a3);
  v8 = v7 & 0x1FFFFF;
  if ((v7 & 0x200000) == 0)
  {
    if (v8)
      icu::UnicodeSet::add(a3, v8);
    if ((v7 & 0x40000000) == 0)
      return 1;
    goto LABEL_9;
  }
  v10 = (const icu::UnicodeSet *)icu::UVector::elementAt((icu::UVector *)(*((_QWORD *)this + 9) + 16), v8);
  icu::UnicodeSet::addAll((icu::UVector **)a3, v10);
  if ((v7 & 0x40000000) != 0)
  {
LABEL_9:
    v11 = sub_18BBD840C((uint64_t)this, a2);
    if (v11 == 2)
    {
      icu::UnicodeSet::add(a3, 588 * a2 - 2514944, 588 * a2 - 2514357);
    }
    else
    {
      v12 = (const unsigned __int16 *)sub_18BBDE510((uint64_t)this, v11);
      icu::Normalizer2Impl::addComposites(this, v12, a3);
    }
  }
  return 1;
}

uint64_t sub_18BBDE510(uint64_t a1, unsigned int a2)
{
  uint64_t v3;

  if (*(unsigned __int16 *)(a1 + 14) <= a2 && *(unsigned __int16 *)(a1 + 30) > a2)
    return *(_QWORD *)(a1 + 48)
         + ((unsigned __int16)a2 & 0xFFFE)
         + 2 * (*(_WORD *)(*(_QWORD *)(a1 + 48) + ((unsigned __int16)a2 & 0xFFFE)) & 0x1F)
         + 2;
  if ((unsigned __int16)(a2 + 1024) < 0x402u)
    return 0;
  v3 = *(unsigned __int16 *)(a1 + 30);
  if (v3 <= a2)
    return *(_QWORD *)(a1 + 40) + 2 * a2 - 2 * v3;
  else
    return *(_QWORD *)(a1 + 48) + ((unsigned __int16)a2 & 0xFFFE);
}

uint64_t unorm2_swap(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unsigned int v21;
  uint64_t v22;
  int v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  size_t __n[2];
  uint64_t v41;

  v10 = a3;
  v41 = *MEMORY[0x1E0C80C00];
  v13 = udata_swapDataHeader(a1, (unsigned __int16 *)a2, a3, a4, a5, a6, a7, a8);
  if (!a5 || *a5 > 0)
    return 0;
  v21 = *(unsigned __int8 *)(a2 + 16);
  v22 = *(unsigned __int8 *)(a2 + 12);
  if (__PAIR64__(*(unsigned __int8 *)(a2 + 13), v22) != 0x720000004ELL
    || *(_BYTE *)(a2 + 14) != 109
    || *(_BYTE *)(a2 + 15) != 50
    || !*(_BYTE *)(a2 + 16)
    || v21 >= 5)
  {
    udata_printError(a1, (uint64_t)"unorm2_swap(): data format %02x.%02x.%02x.%02x (format version %02x) is not recognized as Normalizer2 data\n", v14, v15, v16, v17, v18, v19, v22);
    result = 0;
    v27 = 16;
LABEL_22:
    *a5 = v27;
    return result;
  }
  v23 = v13;
  if (a4)
    v24 = (char *)a4 + v13;
  else
    v24 = 0;
  if ((v10 & 0x80000000) == 0)
  {
    v25 = v21 == 2 ? 60 : 76;
    v26 = v21 == 1 ? 56 : v25;
    v10 = (v10 - v13);
    if ((int)v10 < v26)
    {
      udata_printError(a1, (uint64_t)"unorm2_swap(): too few bytes (%d after header) for Normalizer2 data\n", v14, v15, v16, v17, v18, v19, v10);
LABEL_28:
      result = 0;
      v27 = 8;
      goto LABEL_22;
    }
  }
  v28 = 0;
  v29 = (char *)(a2 + v13);
  v39 = 0u;
  *(_OWORD *)__n = 0u;
  do
  {
    *(_DWORD *)((char *)&__n[-2] + v28) = udata_readInt32(a1, *(unsigned int *)&v29[v28]);
    v28 += 4;
  }
  while (v28 != 32);
  v36 = HIDWORD(__n[1]);
  if ((v10 & 0x80000000) == 0)
  {
    if ((int)v10 < SHIDWORD(__n[1]))
    {
      udata_printError(a1, (uint64_t)"unorm2_swap(): too few bytes (%d after header) for all of Normalizer2 data\n", v30, v31, v32, v33, v34, v35, v10);
      goto LABEL_28;
    }
    if (v29 != v24)
      memcpy(v24, v29, SHIDWORD(__n[1]));
    v37 = (int)v39;
    (*(void (**)(uint64_t, char *, _QWORD, char *, int *))(a1 + 56))(a1, v29, (int)v39, v24, a5);
    v38 = SDWORD1(v39);
    utrie_swapAnyVersion(a1, (unsigned int *)&v29[v37], DWORD1(v39) - v37, (unsigned __int16 *)&v24[v37], a5);
    (*(void (**)(uint64_t, char *, _QWORD, char *, int *))(a1 + 48))(a1, &v29[v38], (DWORD2(v39) - v38), &v24[v38], a5);
  }
  return (v36 + v23);
}

void *icu::Normalizer::getStaticClassID(icu::Normalizer *this)
{
  return &unk_1EE009340;
}

void *icu::Normalizer::getDynamicClassID(icu::Normalizer *this)
{
  return &unk_1EE009340;
}

uint64_t icu::Normalizer::Normalizer(uint64_t a1, const icu::UnicodeString *a2, int a3)
{
  icu::StringCharacterIterator *v5;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E224A870;
  *(_DWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 28) = 0;
  v5 = (icu::StringCharacterIterator *)icu::UMemory::operator new((icu::UMemory *)0x60, (unint64_t)a2);
  if (v5)
    v5 = (icu::StringCharacterIterator *)icu::StringCharacterIterator::StringCharacterIterator(v5, a2);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = off_1E2256B38;
  *(_WORD *)(a1 + 56) = 2;
  *(_DWORD *)(a1 + 112) = 0;
  icu::Normalizer::init((icu::Normalizer *)a1);
  return a1;
}

_QWORD *icu::Normalizer::init(icu::Normalizer *this)
{
  _QWORD *result;
  UErrorCode *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;

  v7 = 0;
  result = (_QWORD *)icu::Normalizer2Factory::getInstance(*((_DWORD *)this + 6), (icu::Normalizer2Factory *)&v7);
  *((_QWORD *)this + 2) = result;
  if ((*((_BYTE *)this + 28) & 0x20) != 0)
  {
    v4 = *((_QWORD *)this + 1);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    result = (_QWORD *)icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)v3);
    v5 = result;
    if (result)
    {
      v6 = *((_QWORD *)this + 2);
      result = (_QWORD *)sub_18BC4F3B4((UErrorCode *)&v7);
      *v5 = off_1E2246ED8;
      v5[1] = v6;
      v5[2] = result;
    }
    *((_QWORD *)this + 1) = v5;
    *((_QWORD *)this + 2) = v5;
  }
  if (v7 >= 1)
  {
    v7 = 0;
    result = (_QWORD *)icu::Normalizer2Factory::getNoopInstance((icu::Normalizer2Factory *)&v7, v3);
    *((_QWORD *)this + 2) = result;
  }
  return result;
}

uint64_t icu::Normalizer::Normalizer(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v9;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E224A870;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = 0;
  v7 = icu::UMemory::operator new((icu::UMemory *)0x20, (unint64_t)a2);
  if (v7)
  {
    v9 = *a2;
    v7 = icu::UCharCharacterIterator::UCharCharacterIterator(v7, &v9, a3);
  }
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = off_1E2256B38;
  *(_WORD *)(a1 + 56) = 2;
  *(_DWORD *)(a1 + 112) = 0;
  icu::Normalizer::init((icu::Normalizer *)a1);
  return a1;
}

uint64_t icu::Normalizer::Normalizer(uint64_t a1, uint64_t a2, int a3)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E224A870;
  *(_DWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = off_1E2256B38;
  *(_WORD *)(a1 + 56) = 2;
  *(_DWORD *)(a1 + 112) = 0;
  icu::Normalizer::init((icu::Normalizer *)a1);
  return a1;
}

{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E224A870;
  *(_DWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = off_1E2256B38;
  *(_WORD *)(a1 + 56) = 2;
  *(_DWORD *)(a1 + 112) = 0;
  icu::Normalizer::init((icu::Normalizer *)a1);
  return a1;
}

icu::Normalizer *icu::Normalizer::Normalizer(icu::Normalizer *this, const icu::Normalizer *a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E224A870;
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 4) + 64))(*((_QWORD *)a2 + 4));
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  icu::UnicodeString::UnicodeString((icu::Normalizer *)((char *)this + 48), (UChar **)a2 + 6);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  icu::Normalizer::init(this);
  return this;
}

void icu::Normalizer::~Normalizer(icu::Normalizer *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E224A870;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  icu::UnicodeString::~UnicodeString((icu::Normalizer *)((char *)this + 48));
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::Normalizer::~Normalizer(this);
  icu::UMemory::operator delete(v1);
}

icu::Normalizer *icu::Normalizer::clone(icu::Normalizer *this, unint64_t a2)
{
  icu::Normalizer *result;

  result = (icu::Normalizer *)icu::UMemory::operator new((icu::UMemory *)0x78, a2);
  if (result)
    return icu::Normalizer::Normalizer(result, this);
  return result;
}

uint64_t icu::Normalizer::hashCode(icu::Normalizer *this)
{
  int v2;
  int v3;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4));
  v3 = *((_DWORD *)this + 6) + *((_DWORD *)this + 7);
  return v3
       + icu::UnicodeString::doHashCode((icu::Normalizer *)((char *)this + 48))
       + *((_DWORD *)this + 28)
       + *((_DWORD *)this + 10)
       + *((_DWORD *)this + 11)
       + v2;
}

uint64_t icu::Normalizer::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  if (a1 == a2)
    return 1;
  if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24) || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
    return 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
  if (!(_DWORD)result)
    return result;
  v5 = *(unsigned __int16 *)(a1 + 56);
  if ((v5 & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 56) & 1) != 0)
      goto LABEL_18;
    return 0;
  }
  if ((v5 & 0x8000) != 0)
    v6 = *(_DWORD *)(a1 + 60);
  else
    v6 = v5 >> 5;
  result = 0;
  v7 = *(unsigned __int16 *)(a2 + 56);
  if ((v7 & 0x8000u) == 0)
    v8 = v7 >> 5;
  else
    v8 = *(_DWORD *)(a2 + 60);
  if ((v7 & 1) == 0 && v6 == v8)
  {
    result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 48), (const icu::UnicodeString *)(a2 + 48), v6);
    if ((_DWORD)result)
    {
LABEL_18:
      if (*(_DWORD *)(a1 + 112) == *(_DWORD *)(a2 + 112))
        return *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44);
      return 0;
    }
  }
  return result;
}

void icu::Normalizer::normalize(const icu::UnicodeString *a1, int a2, char a3, icu::UnicodeString *this, icu::Normalizer2Factory *a5)
{
  icu::UnicodeString *v9;
  uint64_t Instance;
  void *v11;
  _QWORD v12[3];
  UChar *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((*((_WORD *)a1 + 4) & 1) != 0 || *(int *)a5 >= 1)
  {
    icu::UnicodeString::setToBogus(this);
    if (*(int *)a5 <= 0)
      *(_DWORD *)a5 = 1;
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
    v17 = 0;
    v16 = 0u;
    v13 = (UChar *)off_1E2256B38;
    LOWORD(v14) = 2;
    if (a1 == this)
      v9 = (icu::UnicodeString *)&v13;
    else
      v9 = this;
    Instance = icu::Normalizer2Factory::getInstance(a2, a5);
    v11 = (void *)*(unsigned int *)a5;
    if ((int)v11 <= 0)
    {
      if ((a3 & 0x20) != 0)
      {
        v12[0] = off_1E2246ED8;
        v12[1] = Instance;
        v12[2] = sub_18BC4F3B4((UErrorCode *)a5);
        icu::FilteredNormalizer2::normalize((icu::FilteredNormalizer2 *)v12, a1, v9, (UErrorCode *)a5);
        icu::FilteredNormalizer2::~FilteredNormalizer2((icu::FilteredNormalizer2 *)v12);
      }
      else
      {
        (*(void (**)(uint64_t, const icu::UnicodeString *, icu::UnicodeString *, icu::Normalizer2Factory *))(*(_QWORD *)Instance + 24))(Instance, a1, v9, a5);
      }
    }
    if (v9 == (icu::UnicodeString *)&v13)
    {
      v11 = (void *)*(unsigned int *)a5;
      if ((int)v11 <= 0)
        icu::UnicodeString::operator=((UChar **)this, &v13);
    }
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v13);
  }
}

void icu::Normalizer::compose(icu::Normalizer *this, const icu::UnicodeString *a2, char a3, icu::UnicodeString *a4, icu::UnicodeString *a5, UErrorCode *a6)
{
  int v6;

  if ((_DWORD)a2)
    v6 = 5;
  else
    v6 = 4;
  icu::Normalizer::normalize(this, v6, a3, a4, a5);
}

void icu::Normalizer::decompose(icu::Normalizer *this, const icu::UnicodeString *a2, char a3, icu::UnicodeString *a4, icu::UnicodeString *a5, UErrorCode *a6)
{
  int v6;

  if ((_DWORD)a2)
    v6 = 3;
  else
    v6 = 2;
  icu::Normalizer::normalize(this, v6, a3, a4, a5);
}

uint64_t icu::Normalizer::quickCheck(const icu::UnicodeString *a1, int a2, char a3, icu::Normalizer2Factory *this)
{
  icu::UnicodeSet *Instance;
  uint64_t v8;
  icu::UnicodeSet *v10[3];

  Instance = (icu::UnicodeSet *)icu::Normalizer2Factory::getInstance(a2, this);
  if (*(int *)this > 0)
    return 2;
  if ((a3 & 0x20) == 0)
    return (*(uint64_t (**)(icu::UnicodeSet *, const icu::UnicodeString *, icu::Normalizer2Factory *))(*(_QWORD *)Instance + 104))(Instance, a1, this);
  v10[0] = (icu::UnicodeSet *)off_1E2246ED8;
  v10[1] = Instance;
  v10[2] = (icu::UnicodeSet *)sub_18BC4F3B4((UErrorCode *)this);
  v8 = icu::FilteredNormalizer2::quickCheck(v10, a1, (UErrorCode *)this);
  icu::FilteredNormalizer2::~FilteredNormalizer2((icu::FilteredNormalizer2 *)v10);
  return v8;
}

uint64_t icu::Normalizer::isNormalized(const icu::UnicodeString *a1, int a2, char a3, icu::Normalizer2Factory *this)
{
  icu::UnicodeSet *Instance;
  uint64_t isNormalized;
  icu::UnicodeSet *v10[3];

  Instance = (icu::UnicodeSet *)icu::Normalizer2Factory::getInstance(a2, this);
  if (*(int *)this > 0)
    return 0;
  if ((a3 & 0x20) == 0)
    return (*(uint64_t (**)(icu::UnicodeSet *, const icu::UnicodeString *, icu::Normalizer2Factory *))(*(_QWORD *)Instance + 88))(Instance, a1, this);
  v10[0] = (icu::UnicodeSet *)off_1E2246ED8;
  v10[1] = Instance;
  v10[2] = (icu::UnicodeSet *)sub_18BC4F3B4((UErrorCode *)this);
  isNormalized = icu::FilteredNormalizer2::isNormalized(v10, a1, (UErrorCode *)this);
  icu::FilteredNormalizer2::~FilteredNormalizer2((icu::FilteredNormalizer2 *)v10);
  return isNormalized;
}

icu::UnicodeString *icu::Normalizer::concatenate(uint64_t a1, const icu::UnicodeString *a2, icu::UnicodeString *this, int a4, char a5, icu::Normalizer2Factory *a6)
{
  UChar **v11;
  uint64_t Instance;
  void *v13;
  _QWORD v15[3];
  UChar *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if ((*(_WORD *)(a1 + 8) & 1) != 0 || (*((_WORD *)a2 + 4) & 1) != 0 || *(int *)a6 >= 1)
  {
    icu::UnicodeString::setToBogus(this);
    if (*(int *)a6 <= 0)
      *(_DWORD *)a6 = 1;
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
    v20 = 0;
    v19 = 0u;
    v16 = (UChar *)off_1E2256B38;
    LOWORD(v17) = 2;
    if (a2 == this)
      v11 = &v16;
    else
      v11 = (UChar **)this;
    icu::UnicodeString::operator=(v11, (UChar **)a1);
    Instance = icu::Normalizer2Factory::getInstance(a4, a6);
    v13 = (void *)*(unsigned int *)a6;
    if ((int)v13 <= 0)
    {
      if ((a5 & 0x20) != 0)
      {
        v15[0] = off_1E2246ED8;
        v15[1] = Instance;
        v15[2] = sub_18BC4F3B4((UErrorCode *)a6);
        icu::FilteredNormalizer2::append((icu::FilteredNormalizer2 *)v15, (icu::UnicodeString *)v11, a2, (UErrorCode *)a6);
        icu::FilteredNormalizer2::~FilteredNormalizer2((icu::FilteredNormalizer2 *)v15);
      }
      else
      {
        (*(void (**)(uint64_t, UChar **, const icu::UnicodeString *, icu::Normalizer2Factory *))(*(_QWORD *)Instance + 48))(Instance, v11, a2, a6);
      }
    }
    if (v11 == &v16)
    {
      v13 = (void *)*(unsigned int *)a6;
      if ((int)v13 <= 0)
        icu::UnicodeString::operator=((UChar **)this, &v16);
    }
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v16);
  }
  return this;
}

uint64_t icu::Normalizer::current(icu::Normalizer *this)
{
  int v2;
  int v3;

  v2 = *((_DWORD *)this + 28);
  if (*((__int16 *)this + 28) < 0)
    v3 = *((_DWORD *)this + 15);
  else
    v3 = *((unsigned __int16 *)this + 28) >> 5;
  if (v2 < v3)
    return icu::UnicodeString::char32At((icu::Normalizer *)((char *)this + 48), v2);
  if (icu::Normalizer::nextNormalize(this))
  {
    v2 = *((_DWORD *)this + 28);
    return icu::UnicodeString::char32At((icu::Normalizer *)((char *)this + 48), v2);
  }
  return 0xFFFFLL;
}

BOOL icu::Normalizer::nextNormalize(icu::Normalizer *this)
{
  __int16 v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  unint64_t v7;
  int v9;
  _OWORD v10[4];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((*((_WORD *)this + 28) & 1) != 0)
    v2 = 2;
  else
    v2 = *((_WORD *)this + 28) & 0x1F;
  *((_WORD *)this + 28) = v2;
  *((_DWORD *)this + 28) = 0;
  *((_DWORD *)this + 10) = *((_DWORD *)this + 11);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 120))(*((_QWORD *)this + 4));
  if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 56))(*((_QWORD *)this + 4)))
    return 0;
  memset(v10, 0, sizeof(v10));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 48))(*((_QWORD *)this + 4));
  icu::UnicodeString::UnicodeString((uint64_t)v10, v3);
  while ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 56))(*((_QWORD *)this + 4)))
  {
    v4 = *((_QWORD *)this + 2);
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 48))(*((_QWORD *)this + 4));
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 120))(v4, v5))
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 200))(*((_QWORD *)this + 4), 0xFFFFFFFFLL, 1);
      break;
    }
    icu::UnicodeString::append((uint64_t)v10, v5);
  }
  *((_DWORD *)this + 11) = *(_DWORD *)(*((_QWORD *)this + 4) + 12);
  v9 = 0;
  (*(void (**)(_QWORD, _OWORD *, char *, int *))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2), v10, (char *)this + 48, &v9);
  v6 = 0;
  v7 = v9;
  if (v9 <= 0)
  {
    v7 = *((unsigned __int16 *)this + 28);
    v6 = v7 > 0x1F;
  }
  icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)v10);
  return v6;
}

uint64_t icu::Normalizer::next(icu::Normalizer *this)
{
  int v2;
  int v3;
  uint64_t result;
  int v5;

  v2 = *((_DWORD *)this + 28);
  if (*((__int16 *)this + 28) < 0)
    v3 = *((_DWORD *)this + 15);
  else
    v3 = *((unsigned __int16 *)this + 28) >> 5;
  if (v2 >= v3)
  {
    if (!icu::Normalizer::nextNormalize(this))
      return 0xFFFFLL;
    v2 = *((_DWORD *)this + 28);
  }
  result = icu::UnicodeString::char32At((icu::Normalizer *)((char *)this + 48), v2);
  if (result < 0x10000)
    v5 = 1;
  else
    v5 = 2;
  *((_DWORD *)this + 28) += v5;
  return result;
}

uint64_t icu::Normalizer::previous(icu::Normalizer *this)
{
  int v2;
  uint64_t result;
  int v4;

  v2 = *((_DWORD *)this + 28);
  if (v2 <= 0)
  {
    if (!icu::Normalizer::previousNormalize(this))
      return 0xFFFFLL;
    v2 = *((_DWORD *)this + 28);
  }
  result = icu::UnicodeString::char32At((icu::Normalizer *)((char *)this + 48), v2 - 1);
  if (result >= 0x10000)
    v4 = -2;
  else
    v4 = -1;
  *((_DWORD *)this + 28) += v4;
  return result;
}

BOOL icu::Normalizer::previousNormalize(icu::Normalizer *this)
{
  __int16 v2;
  uint64_t v3;
  void *v4;
  unsigned int v5;
  _BOOL8 v6;
  int v9;
  void (**v10)(icu::UnicodeString *__hidden);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((*((_WORD *)this + 28) & 1) != 0)
    v2 = 2;
  else
    v2 = *((_WORD *)this + 28) & 0x1F;
  *((_WORD *)this + 28) = v2;
  *((_DWORD *)this + 28) = 0;
  *((_DWORD *)this + 11) = *((_DWORD *)this + 10);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 120))(*((_QWORD *)this + 4));
  if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 184))(*((_QWORD *)this + 4)))
    return 0;
  v11 = 0u;
  v12 = 0u;
  v14 = 0;
  v13 = 0u;
  v10 = off_1E2256B38;
  LOWORD(v11) = 2;
  do
  {
    if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 184))(*((_QWORD *)this + 4)))
      break;
    v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 176))(*((_QWORD *)this + 4));
    icu::UnicodeString::replace((icu::UnicodeString *)&v10, 0, 0, v3);
  }
  while (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2), v3));
  *((_DWORD *)this + 10) = *(_DWORD *)(*((_QWORD *)this + 4) + 12);
  v9 = 0;
  (*(void (**)(_QWORD, void (***)(icu::UnicodeString *__hidden), char *, int *))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2), &v10, (char *)this + 48, &v9);
  v4 = (void *)*((unsigned __int16 *)this + 28);
  if (((unsigned __int16)v4 & 0x8000) != 0)
    v5 = *((_DWORD *)this + 15);
  else
    v5 = v4 >> 5;
  *((_DWORD *)this + 28) = v5;
  v6 = v4 > 0x1F && v9 < 1;
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v10);
  return v6;
}

uint64_t icu::Normalizer::reset(icu::Normalizer *this)
{
  uint64_t result;
  __int16 v3;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 4) + 192))(*((_QWORD *)this + 4), 0, 0);
  *((_DWORD *)this + 10) = result;
  *((_DWORD *)this + 11) = result;
  if ((*((_WORD *)this + 28) & 1) != 0)
    v3 = 2;
  else
    v3 = *((_WORD *)this + 28) & 0x1F;
  *((_WORD *)this + 28) = v3;
  *((_DWORD *)this + 28) = 0;
  return result;
}

uint64_t icu::Normalizer::clearBuffer(uint64_t this)
{
  __int16 v1;

  if ((*(_WORD *)(this + 56) & 1) != 0)
    v1 = 2;
  else
    v1 = *(_WORD *)(this + 56) & 0x1F;
  *(_WORD *)(this + 56) = v1;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

uint64_t icu::Normalizer::setIndexOnly(icu::Normalizer *this)
{
  uint64_t result;
  int v3;
  __int16 v4;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 120))(*((_QWORD *)this + 4));
  v3 = *(_DWORD *)(*((_QWORD *)this + 4) + 12);
  *((_DWORD *)this + 10) = v3;
  *((_DWORD *)this + 11) = v3;
  if ((*((_WORD *)this + 28) & 1) != 0)
    v4 = 2;
  else
    v4 = *((_WORD *)this + 28) & 0x1F;
  *((_WORD *)this + 28) = v4;
  *((_DWORD *)this + 28) = 0;
  return result;
}

uint64_t icu::Normalizer::first(icu::Normalizer *this)
{
  int v2;
  __int16 v3;

  v2 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 4) + 192))(*((_QWORD *)this + 4), 0, 0);
  *((_DWORD *)this + 10) = v2;
  *((_DWORD *)this + 11) = v2;
  if ((*((_WORD *)this + 28) & 1) != 0)
    v3 = 2;
  else
    v3 = *((_WORD *)this + 28) & 0x1F;
  *((_WORD *)this + 28) = v3;
  *((_DWORD *)this + 28) = 0;
  return icu::Normalizer::next(this);
}

uint64_t icu::Normalizer::last(icu::Normalizer *this)
{
  int v2;
  __int16 v3;

  v2 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 4) + 192))(*((_QWORD *)this + 4), 0, 2);
  *((_DWORD *)this + 10) = v2;
  *((_DWORD *)this + 11) = v2;
  if ((*((_WORD *)this + 28) & 1) != 0)
    v3 = 2;
  else
    v3 = *((_WORD *)this + 28) & 0x1F;
  *((_WORD *)this + 28) = v3;
  *((_DWORD *)this + 28) = 0;
  return icu::Normalizer::previous(this);
}

uint64_t icu::Normalizer::getIndex(icu::Normalizer *this)
{
  int v1;
  uint64_t v2;

  if (*((__int16 *)this + 28) < 0)
    v1 = *((_DWORD *)this + 15);
  else
    v1 = *((unsigned __int16 *)this + 28) >> 5;
  v2 = 44;
  if (*((_DWORD *)this + 28) < v1)
    v2 = 40;
  return *(unsigned int *)((char *)this + v2);
}

uint64_t icu::Normalizer::startIndex(icu::Normalizer *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 4) + 16);
}

uint64_t icu::Normalizer::endIndex(icu::Normalizer *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 4) + 20);
}

_QWORD *icu::Normalizer::setMode(icu::Normalizer *this, int a2)
{
  *((_DWORD *)this + 6) = a2;
  return icu::Normalizer::init(this);
}

uint64_t icu::Normalizer::getUMode(icu::Normalizer *this)
{
  return *((unsigned int *)this + 6);
}

_QWORD *icu::Normalizer::setOption(icu::Normalizer *this, int a2, int a3)
{
  int v3;

  if (a3)
    v3 = *((_DWORD *)this + 7) | a2;
  else
    v3 = *((_DWORD *)this + 7) & ~a2;
  *((_DWORD *)this + 7) = v3;
  return icu::Normalizer::init(this);
}

BOOL icu::Normalizer::getOption(icu::Normalizer *this, int a2)
{
  return (*((_DWORD *)this + 7) & a2) != 0;
}

icu::StringCharacterIterator *icu::Normalizer::setText(icu::StringCharacterIterator *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  icu::StringCharacterIterator *v5;
  icu::StringCharacterIterator *v6;
  uint64_t v7;
  __int16 v8;

  if (*(int *)a3 <= 0)
  {
    v5 = this;
    this = (icu::StringCharacterIterator *)icu::UMemory::operator new((icu::UMemory *)0x60, (unint64_t)a2);
    if (this)
    {
      v6 = this;
      icu::StringCharacterIterator::StringCharacterIterator(this, a2);
      v7 = *((_QWORD *)v5 + 4);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      *((_QWORD *)v5 + 4) = v6;
      this = (icu::StringCharacterIterator *)(*(uint64_t (**)(icu::StringCharacterIterator *, _QWORD, _QWORD))(*(_QWORD *)v6 + 192))(v6, 0, 0);
      *((_DWORD *)v5 + 10) = (_DWORD)this;
      *((_DWORD *)v5 + 11) = (_DWORD)this;
      if ((*((_WORD *)v5 + 28) & 1) != 0)
        v8 = 2;
      else
        v8 = *((_WORD *)v5 + 28) & 0x1F;
      *((_WORD *)v5 + 28) = v8;
      *((_DWORD *)v5 + 28) = 0;
    }
    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return this;
}

uint64_t icu::Normalizer::setText(uint64_t this, const icu::CharacterIterator *a2, UErrorCode *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (*(int *)a3 <= 0)
  {
    v4 = this;
    this = (*(uint64_t (**)(const icu::CharacterIterator *))(*(_QWORD *)a2 + 64))(a2);
    if (this)
    {
      v5 = this;
      v6 = *(_QWORD *)(v4 + 32);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      *(_QWORD *)(v4 + 32) = v5;
      this = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 192))(v5, 0, 0);
      *(_DWORD *)(v4 + 40) = this;
      *(_DWORD *)(v4 + 44) = this;
      if ((*(_WORD *)(v4 + 56) & 1) != 0)
        v7 = 2;
      else
        v7 = *(_WORD *)(v4 + 56) & 0x1F;
      *(_WORD *)(v4 + 56) = v7;
      *(_DWORD *)(v4 + 112) = 0;
    }
    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return this;
}

uint64_t icu::Normalizer::setText(uint64_t result, uint64_t *a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  if (*a4 <= 0)
  {
    v7 = result;
    result = icu::UMemory::operator new((icu::UMemory *)0x20, (unint64_t)a2);
    if (result)
    {
      v8 = result;
      v11 = *a2;
      icu::UCharCharacterIterator::UCharCharacterIterator(result, &v11, a3);
      v9 = *(_QWORD *)(v7 + 32);
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      *(_QWORD *)(v7 + 32) = v8;
      result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 192))(v8, 0, 0);
      *(_DWORD *)(v7 + 40) = result;
      *(_DWORD *)(v7 + 44) = result;
      if ((*(_WORD *)(v7 + 56) & 1) != 0)
        v10 = 2;
      else
        v10 = *(_WORD *)(v7 + 56) & 0x1F;
      *(_WORD *)(v7 + 56) = v10;
      *(_DWORD *)(v7 + 112) = 0;
    }
    else
    {
      *a4 = 7;
    }
  }
  return result;
}

uint64_t icu::Normalizer::getText(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 208))(*(_QWORD *)(a1 + 32));
}

void *icu::ParsePosition::getStaticClassID(icu::ParsePosition *this)
{
  return &unk_1EE009341;
}

void *icu::ParsePosition::getDynamicClassID(icu::ParsePosition *this)
{
  return &unk_1EE009341;
}

void icu::ParsePosition::~ParsePosition(icu::ParsePosition *this)
{
  void *v1;

  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v1);
}

double icu::ParsePosition::clone(icu::ParsePosition *this, unint64_t a2)
{
  uint64_t v3;
  double result;

  v3 = icu::UMemory::operator new((icu::UMemory *)0x10, a2);
  if (v3)
  {
    *(_QWORD *)v3 = off_1E224A8B0;
    result = *((double *)this + 1);
    *(double *)(v3 + 8) = result;
  }
  return result;
}

BOOL icu::PatternProps::isSyntax(icu::PatternProps *this)
{
  if ((this & 0x80000000) != 0)
    return 0;
  if (this <= 0xFF)
    return (byte_18BDD521C[this] >> 1) & 1;
  if (this >> 4 < 0x201)
    return 0;
  if (this <= 0x3030)
    return (dword_18BDD5148[byte_18BDD5170[(unint64_t)((_DWORD)this - 0x2000) >> 5]] >> (char)this) & 1;
  if (((_DWORD)this - 64830) <= 0x108)
    return ((_DWORD)this - 65093) < 0xFFFFFEFB;
  return 0;
}

BOOL icu::PatternProps::isSyntaxOrWhiteSpace(icu::PatternProps *this)
{
  int v1;

  if ((this & 0x80000000) != 0)
    return 0;
  if (this <= 0xFF)
  {
    LOBYTE(v1) = byte_18BDD521C[this];
    return v1 & 1;
  }
  if (this < 0x200E)
    return 0;
  if (this <= 0x3030)
  {
    v1 = dword_18BDD51F4[byte_18BDD5170[(unint64_t)((_DWORD)this - 0x2000) >> 5]] >> (char)this;
    return v1 & 1;
  }
  return ((_DWORD)this - 64830) <= 0x108 && ((_DWORD)this - 65093) < 0xFFFFFEFB;
}

BOOL icu::PatternProps::isWhiteSpace(icu::PatternProps *this)
{
  if ((this & 0x80000000) != 0)
    return 0;
  if (this <= 0xFF)
    return (byte_18BDD521C[this] >> 2) & 1;
  if (((_DWORD)this - 8206) <= 0x1B)
    return ((_DWORD)this - 8232) < 0xFFFFFFE8;
  return 0;
}

unsigned __int16 *icu::PatternProps::skipWhiteSpace(unsigned __int16 *result, int a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  if (a2 >= 1)
  {
    v2 = (uint64_t)&result[a2 - 1 + 1];
    v3 = a2 + 1;
    do
    {
      v4 = *result;
      if (v4 > 0xFF)
      {
        if (v4 - 8206 > 0x1B || v4 - 8232 >= 0xFFFFFFE8)
          return result;
      }
      else if (((byte_18BDD521C[*result] >> 2) & 1) == 0)
      {
        return result;
      }
      ++result;
      --v3;
    }
    while (v3 > 1);
    return (unsigned __int16 *)v2;
  }
  return result;
}

uint64_t icu::PatternProps::skipWhiteSpace(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned int v7;

  v2 = *(unsigned __int16 *)(a1 + 8);
  if ((v2 & 0x8000u) == 0)
    v3 = v2 >> 5;
  else
    v3 = *(unsigned int *)(a1 + 12);
  if ((int)v3 > (int)a2)
  {
    v4 = a1 + 10;
    if ((v2 & 2) == 0)
      v4 = *(_QWORD *)(a1 + 24);
    if (v3 <= a2)
      v5 = a2;
    else
      v5 = v3;
    v6 = (unsigned __int16 *)(v4 + 2 * (int)a2);
    a2 = (int)a2;
    while (v3 > a2)
    {
      v7 = *v6;
      if (v7 > 0xFF)
      {
        if (v7 - 8206 > 0x1B || v7 - 8232 >= 0xFFFFFFE8)
          return a2;
      }
      else if (((byte_18BDD521C[*v6] >> 2) & 1) == 0)
      {
        return a2;
      }
      ++a2;
      ++v6;
      if ((_DWORD)v3 == (_DWORD)a2)
        return v3;
    }
    return v5;
  }
  return a2;
}

unsigned __int16 *icu::PatternProps::trimWhiteSpace(unsigned __int16 *result, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v2 = *a2;
  if ((int)v2 < 1)
    return result;
  v3 = *result;
  if (v3 > 0xFF)
  {
    if (v3 - 8206 > 0x1B || v3 - 8232 >= 0xFFFFFFE8)
    {
LABEL_7:
      v4 = result[(v2 - 1)];
      if (v4 > 0xFF)
      {
        if (v4 - 8206 > 0x1B || v4 - 8232 >= 0xFFFFFFE8)
          return result;
      }
      else if (((byte_18BDD521C[result[(v2 - 1)]] >> 2) & 1) == 0)
      {
        return result;
      }
    }
  }
  else if (((byte_18BDD521C[*result] >> 2) & 1) == 0)
  {
    goto LABEL_7;
  }
  v5 = 0;
  while (1)
  {
    v6 = result[v5];
    if (v6 > 0xFF)
      break;
    if (((byte_18BDD521C[result[v5]] >> 2) & 1) == 0)
      goto LABEL_20;
LABEL_18:
    if (v2 == ++v5)
    {
      v7 = *a2;
      goto LABEL_27;
    }
  }
  if (v6 - 8206 <= 0x1B && v6 - 8232 < 0xFFFFFFE8)
    goto LABEL_18;
LABEL_20:
  v8 = &result[(int)v2 - 1];
  do
  {
    v7 = v2;
    v10 = *v8--;
    v9 = v10;
    if (v10 > 0xFF)
    {
      if (v9 - 8206 > 0x1B)
        break;
      v11 = v9 - 8232 < 0xFFFFFFE8;
    }
    else
    {
      v11 = (byte_18BDD521C[v9] >> 2) & 1;
    }
    LODWORD(v2) = v7 - 1;
  }
  while (v11);
  LODWORD(v2) = v5;
LABEL_27:
  *a2 = v7 - v2;
  result += v2;
  return result;
}

uint64_t icu::PatternProps::isIdentifier(unsigned __int16 *a1, int a2)
{
  unsigned __int16 *v2;
  unint64_t v3;

  if (a2 < 1)
    return 0;
  v2 = a1;
  v3 = (unint64_t)&a1[a2];
  while (!icu::PatternProps::isSyntaxOrWhiteSpace((icu::PatternProps *)*v2))
  {
    if ((unint64_t)++v2 >= v3)
      return 1;
  }
  return 0;
}

unsigned __int16 *icu::PatternProps::skipIdentifier(unsigned __int16 *a1, int a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  int v4;

  v2 = a1;
  if (a2 >= 1)
  {
    v3 = (uint64_t)&a1[a2 - 1 + 1];
    v4 = a2 + 1;
    while (!icu::PatternProps::isSyntaxOrWhiteSpace((icu::PatternProps *)*v2))
    {
      ++v2;
      if (--v4 <= 1)
        return (unsigned __int16 *)v3;
    }
  }
  return v2;
}

uint64_t icu::PluralMapBase::toCategory(icu::PluralMapBase *this, const char *a2)
{
  uint64_t v3;

  v3 = 0;
  while (strcmp((const char *)this, off_1E224A8E0[v3]))
  {
    if (++v3 == 6)
      return 0xFFFFFFFFLL;
  }
  return v3;
}

uint64_t icu::PluralMapBase::toCategory(icu::PluralMapBase *this, const icu::UnicodeString *a2)
{
  uint64_t v2;
  const char *v3;
  UErrorCode v5;
  char *__s1[9];

  __s1[8] = *(char **)MEMORY[0x1E0C80C00];
  memset(&__s1[1], 0, 56);
  __s1[0] = (char *)&__s1[1] + 5;
  LODWORD(__s1[1]) = 40;
  v5 = U_ZERO_ERROR;
  icu::CharString::appendInvariantChars((icu::CharString *)__s1, this, &v5);
  if (v5 > U_ZERO_ERROR)
  {
LABEL_5:
    v2 = 0xFFFFFFFFLL;
  }
  else
  {
    v2 = 0;
    v3 = __s1[0];
    while (strcmp(v3, off_1E224A8E0[v2]))
    {
      if (++v2 == 6)
        goto LABEL_5;
    }
  }
  if (BYTE4(__s1[1]))
    uprv_free(__s1[0]);
  return v2;
}

char *icu::PluralMapBase::getCategoryName(icu::PluralMapBase *this, Category a2)
{
  if (this <= 5)
    return off_1E224A8E0[this];
  else
    return 0;
}

uint64_t uprv_compareASCIIPropertyNames(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  unint64_t v14;
  BOOL v15;
  uint64_t result;

  while (1)
  {
    v4 = 256;
    v5 = a1;
    while (1)
    {
      v7 = *v5++;
      v6 = v7;
      v8 = (1 << (v7 - 32)) & 0x8000000000002001;
      v9 = (v7 - 32) > 0x3F || v8 == 0;
      if (v9 && (v6 - 9) > 4)
        break;
      v4 += 256;
    }
    if (v6)
      v4 += uprv_asciitolower((char)v6);
    v10 = 256;
    v11 = a2;
    while (1)
    {
      v13 = *v11++;
      v12 = v13;
      v14 = (1 << (v13 - 32)) & 0x8000000000002001;
      v15 = (v13 - 32) > 0x3F || v14 == 0;
      if (v15 && (v12 - 9) > 4)
        break;
      v10 += 256;
    }
    if (v12)
      v10 += uprv_asciitolower((char)v12);
    if (!(v10 | v4))
      break;
    if (v4 != v10)
    {
      result = v4 - v10;
      if (v4 != v10)
        return result;
    }
    a1 += v4 >> 8;
    a2 += v10 >> 8;
  }
  return 0;
}

uint64_t uprv_compareEBCDICPropertyNames(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t result;

  while (2)
  {
    v4 = 256;
    v5 = a1;
    while (1)
    {
      v7 = *v5++;
      v6 = v7;
      if (v7 <= 0x25)
      {
        if (((1 << v6) & 0x2000203820) != 0)
          goto LABEL_9;
        if (!v6)
          goto LABEL_11;
      }
      if ((v6 - 64) > 0x2D || ((1 << (v6 - 64)) & 0x200100000001) == 0)
        break;
LABEL_9:
      v4 += 256;
    }
    v4 += uprv_ebcdictolower(v6);
LABEL_11:
    v9 = 256;
    v10 = a2;
    while (2)
    {
      v12 = *v10++;
      v11 = v12;
      if (v12 <= 0x25)
      {
        if (((1 << v11) & 0x2000203820) == 0)
        {
          if (!v11)
            goto LABEL_21;
          break;
        }
LABEL_19:
        v9 += 256;
        continue;
      }
      break;
    }
    if ((v11 - 64) <= 0x2D && ((1 << (v11 - 64)) & 0x200100000001) != 0)
      goto LABEL_19;
    v9 += uprv_ebcdictolower(v11);
LABEL_21:
    if (!(v9 | v4))
      return 0;
    if (v4 == v9
      || (result = v4 - v9, v4 == v9))
    {
      a1 += v4 >> 8;
      a2 += v9 >> 8;
      continue;
    }
    return result;
  }
}

uint64_t sub_18BBE02A4(int a1)
{
  int v1;
  int v2;
  int *v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v1 = 1;
  v2 = 7;
  while (1)
  {
    v3 = (int *)((char *)&unk_18BDD531C + 4 * v1);
    v4 = *v3;
    v5 = a1 - *v3;
    if (a1 < *v3)
      return 0;
    v6 = v3[1];
    v7 = v1 + 2;
    if (v6 > a1)
      break;
    v1 = v7 + 2 * (v6 - v4);
    if (--v2 <= 1)
      return 0;
  }
  return (v7 + 2 * v5);
}

uint64_t sub_18BBE02F8(uint64_t result, signed int a2)
{
  uint64_t v2;
  int v3;
  int i;
  unsigned int *v5;
  unsigned int v6;
  signed int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  signed int v11;

  if ((_DWORD)result)
  {
    LODWORD(v2) = result + 2;
    v3 = dword_18BDD531C[(int)result + 1];
    if (v3 > 15)
    {
      v9 = result + v3 - 14;
      v2 = (int)v2;
      v10 = (int)v9;
      do
      {
        v11 = dword_18BDD531C[v2];
        if (v11 > a2)
          break;
        if (v11 == a2)
          return dword_18BDD531C[v9];
        ++v2;
        ++v9;
      }
      while (v2 < v10);
    }
    else if (v3 >= 1)
    {
      for (i = v3 + 1; i > 1; --i)
      {
        v5 = &dword_18BDD531C[(int)v2];
        v6 = *v5;
        if ((int)*v5 > a2)
          break;
        v7 = v5[1];
        v8 = v2 + 2;
        if (v7 > a2)
        {
          v9 = v8 + a2 - v6;
          return dword_18BDD531C[v9];
        }
        LODWORD(v2) = v8 - v6 + v7;
      }
    }
    return 0;
  }
  return result;
}

const char *sub_18BBE03A4(char *a1, int a2)
{
  const char *v2;
  unsigned int v3;

  if (a2 < 0)
    return 0;
  if (*a1 <= a2)
    return 0;
  v2 = a1 + 1;
  if (a2)
  {
    v3 = a2 + 1;
    do
    {
      v2 += strlen(v2) + 1;
      --v3;
    }
    while (v3 > 1);
  }
  if (*v2)
    return v2;
  else
    return 0;
}

BOOL sub_18BBE0410(icu::BytesTrie *a1, char *a2)
{
  char *v2;
  char v3;
  int v5;
  int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  v2 = a2;
  v3 = *a2;
  if (*a2)
  {
    v5 = 1;
    while (1)
    {
      ++v2;
      while (1)
      {
        v6 = uprv_asciitolower(v3);
        v7 = v6 - 32 > 0x3F
          || ((1 << (v6 - 32)) & 0x8000000000002001) == 0;
        if (v7 && (v6 - 9) > 4)
          break;
        v8 = *v2++;
        v3 = v8;
        if (!v8)
          return v5 > 1;
      }
      if ((v5 & 1) == 0)
        break;
      v5 = icu::BytesTrie::next(a1, v6);
      v3 = *v2;
      if (!*v2)
        return v5 > 1;
    }
    return 0;
  }
  else
  {
    v5 = 1;
    return v5 > 1;
  }
}

const char *__cdecl u_getPropertyName_0(UProperty property, UPropertyNameChoice nameChoice)
{
  int v3;

  v3 = sub_18BBE02A4(property);
  if (v3)
    return sub_18BBE03A4(&byte_18BDDA633[dword_18BDD531C[v3]], nameChoice);
  else
    return 0;
}

const char *__cdecl u_getPropertyValueName_0(UProperty property, int32_t value, UPropertyNameChoice nameChoice)
{
  int v5;
  int v6;

  v5 = sub_18BBE02A4(property);
  if (v5 && (v6 = sub_18BBE02F8(dword_18BDD531C[v5 + 1], value)) != 0)
    return sub_18BBE03A4(&byte_18BDDA633[v6], nameChoice);
  else
    return 0;
}

uint64_t sub_18BBE058C(int a1, char *a2)
{
  uint64_t Value;
  void *v4;
  char *v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v4 = 0;
  v5 = (char *)&unk_18BDD698C + a1;
  v6 = (unsigned __int8 *)v5;
  Value = 0xFFFFFFFFLL;
  v7 = 0xFFFFFFFFLL;
  if (sub_18BBE0410((icu::BytesTrie *)&v4, a2))
    Value = icu::BytesTrie::readValue((icu::BytesTrie *)(v6 + 1), (const unsigned __int8 *)(*v6 >> 1));
  icu::BytesTrie::~BytesTrie(&v4);
  return Value;
}

int32_t u_getPropertyValueEnum_0(UProperty property, const char *alias)
{
  int v3;
  uint64_t v4;

  v3 = sub_18BBE02A4(property);
  if (v3 && (v4 = (int)dword_18BDD531C[v3 + 1], (_DWORD)v4))
    return sub_18BBE058C(dword_18BDD531C[v4], (char *)alias);
  else
    return -1;
}

UProperty u_getPropertyEnum(const char *alias)
{
  return sub_18BBE058C(0, (char *)alias);
}

const char *uscript_getName(int32_t value)
{
  return u_getPropertyValueName_0(UCHAR_SCRIPT, value, U_LONG_PROPERTY_NAME);
}

const char *uscript_getShortName(int32_t value)
{
  return u_getPropertyValueName_0(UCHAR_SCRIPT, value, U_SHORT_PROPERTY_NAME);
}

_QWORD *upvec_open(int a1, int *a2)
{
  _QWORD *v2;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _DWORD *v8;
  int v9;

  if (*a2 <= 0)
  {
    if (a1 <= 0)
    {
      v2 = 0;
      v9 = 1;
    }
    else
    {
      v4 = a1 + 2;
      v2 = uprv_malloc(0x20uLL);
      v5 = uprv_malloc((int)(v4 << 14));
      v6 = v5;
      if (v2 && v5)
      {
        v2[2] = 0;
        v2[3] = 0;
        *v2 = v5;
        *((_DWORD *)v2 + 2) = v4;
        *(_QWORD *)((char *)v2 + 12) = 0x300001000;
        bzero(v5, (int)(12 * v4));
        *v6 = 0x11000000000000;
        v7 = (_QWORD *)((char *)v6 + 4 * v4);
        *v7 = 0x11000100110000;
        v8 = (_DWORD *)v7 + v4;
        *v8 = 1114113;
        v8[1] = 1114114;
        return v2;
      }
      uprv_free(v2);
      uprv_free(v6);
      v2 = 0;
      v9 = 7;
    }
    *a2 = v9;
    return v2;
  }
  return 0;
}

void upvec_close(void **a1)
{
  if (a1)
  {
    uprv_free(*a1);
    uprv_free(a1);
  }
}

void upvec_setValue(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int *a7)
{
  int v9;
  int v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _BOOL4 v20;
  _BOOL4 v21;
  int v22;
  int v23;
  int v24;
  char *v25;
  uint64_t v26;
  void *v27;
  _BYTE *v28;
  unint64_t v29;
  int v30;
  _BOOL4 v31;
  _BOOL4 v32;
  _BOOL4 v33;
  int *v34;
  _BOOL4 v35;
  _BOOL4 v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;

  if (*a7 <= 0)
  {
    v9 = 1;
    if (!a1)
      goto LABEL_11;
    if (a2 < 0)
      goto LABEL_11;
    if (a2 > a3)
      goto LABEL_11;
    v12 = 1114114;
    if (a3 > 1114113 || a4 < 0)
      goto LABEL_11;
    v13 = *(int *)(a1 + 8);
    if ((int)v13 - 2 <= a4)
    {
      v9 = 1;
      goto LABEL_11;
    }
    if (*(_BYTE *)(a1 + 24))
    {
      v9 = 30;
LABEL_11:
      *a7 = v9;
      return;
    }
    v41 = a3 + 1;
    v15 = a4 + 2;
    v16 = a6 & a5;
    v17 = (char *)sub_18BBE0AC0((uint64_t *)a1, a2);
    v18 = sub_18BBE0AC0((uint64_t *)a1, a3);
    v19 = (char *)v18;
    v20 = *(_DWORD *)v17 != a2 && v16 != (*(_DWORD *)&v17[4 * v15] & a6);
    v21 = v41 != *(_DWORD *)(v18 + 4) && v16 != (*(_DWORD *)(v18 + 4 * v15) & a6);
    if (v20 || v21)
    {
      v22 = *(_DWORD *)(a1 + 12);
      v23 = *(_DWORD *)(a1 + 16);
      v24 = v21 + v20 + v23;
      if (v24 <= v22)
      {
        v40 = v15;
        v26 = *(_QWORD *)a1;
      }
      else
      {
        if (v22 >= 0x10000)
        {
          if (v22 >= 0x110002)
          {
            v9 = 5;
            goto LABEL_11;
          }
        }
        else
        {
          v12 = 0x10000;
        }
        v37 = *(_DWORD *)(a1 + 16);
        v38 = v21 + v20 + v23;
        v40 = v15;
        v35 = v20;
        v36 = v21;
        v27 = uprv_malloc(4 * (int)v13 * v12);
        if (!v27)
        {
          v9 = 7;
          goto LABEL_11;
        }
        v26 = (uint64_t)v27;
        v28 = *(_BYTE **)a1;
        memcpy(v27, *(const void **)a1, 4 * (int)v13 * (uint64_t)v37);
        v17 = (char *)(v26 + v17 - v28);
        v19 = (char *)(v26 + v19 - v28);
        uprv_free(v28);
        v23 = v37;
        *(_QWORD *)a1 = v26;
        *(_DWORD *)(a1 + 12) = v12;
        v20 = v35;
        v21 = v36;
        v24 = v38;
      }
      v25 = &v19[4 * v13];
      v29 = (v26 + 4 * (unint64_t)(v23 * v13) - (unint64_t)v25) >> 2;
      if ((int)v29 >= 1)
      {
        v39 = v24;
        if (v20)
          v30 = 2;
        else
          v30 = 1;
        v31 = v21;
        v32 = v20;
        memmove(&v19[4 * (v30 + v21) * (int)v13], &v19[4 * v13], 4 * (int)v29);
        v24 = v39;
        v20 = v32;
        v21 = v31;
      }
      *(_DWORD *)(a1 + 16) = v24;
      v15 = v40;
      if (v20)
      {
        v33 = v21;
        memmove(&v17[4 * v13], v17, 4 * (int)(v13 + ((unint64_t)(v19 - v17) >> 2)));
        v21 = v33;
        *(_DWORD *)&v17[4 * v13] = a2;
        *((_DWORD *)v17 + 1) = a2;
        v17 += 4 * v13;
      }
      else
      {
        v25 = v19;
      }
      if (v21)
      {
        memcpy(&v25[4 * v13], v25, 4 * v13);
        *(_DWORD *)&v25[4 * v13] = v41;
        *((_DWORD *)v25 + 1) = v41;
      }
    }
    else
    {
      v25 = (char *)v18;
    }
    *(_DWORD *)(a1 + 20) = ((uint64_t)&v25[-*(_QWORD *)a1] >> 2) / v13;
    v34 = (int *)&v17[4 * v15];
    *v34 = *v34 & ~a6 | v16;
    if (v17 != v25)
    {
      do
      {
        v34 += v13;
        *v34 = *v34 & ~a6 | v16;
      }
      while (v34 != (int *)&v25[4 * v15]);
    }
  }
}

uint64_t sub_18BBE0AC0(uint64_t *a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  v2 = *((int *)a1 + 2);
  v3 = *((_DWORD *)a1 + 4);
  v4 = *((_DWORD *)a1 + 5);
  v5 = *a1;
  v6 = (_DWORD *)(*a1 + 4 * v4 * (int)v2);
  if (*v6 <= a2)
  {
    if (v6[1] > a2)
      return *a1 + 4 * v4 * (int)v2;
    v7 = &v6[v2];
    if (v7[1] <= a2)
    {
      v7 += v2;
      v9 = v7[1];
      v10 = __OFSUB__(a2, v9);
      v11 = a2 - v9;
      if (v11 < 0 == v10)
      {
        if (v11 <= 9)
        {
          v12 = v4 + 2;
          do
          {
            ++v12;
            v13 = v6[3 * (int)v2 + 1];
            v6 += v2;
          }
          while (v13 <= a2);
          *((_DWORD *)a1 + 5) = v12;
          return (uint64_t)&v6[2 * v2];
        }
        goto LABEL_16;
      }
      v8 = v4 + 2;
    }
    else
    {
      v8 = v4 + 1;
    }
    *((_DWORD *)a1 + 5) = v8;
    return (uint64_t)v7;
  }
  if (*(_DWORD *)(v5 + 4) > a2)
  {
    *((_DWORD *)a1 + 5) = 0;
    return v5;
  }
LABEL_16:
  if (v3 < 2)
  {
    v14 = 0;
LABEL_27:
    *((_DWORD *)a1 + 5) = v14;
    v5 += 4 * v14 * (int)v2;
    return v5;
  }
  v14 = 0;
  while (1)
  {
    v15 = v3 + v14;
    if (v3 + v14 < 0 != __OFADD__(v3, v14))
      ++v15;
    v16 = v15 >> 1;
    v7 = (_DWORD *)(v5 + 4 * v16 * (int)v2);
    if (*v7 <= a2)
      break;
    v3 = v16;
LABEL_24:
    if (v14 >= v3 - 1)
      goto LABEL_27;
  }
  if (v7[1] <= a2)
  {
    v14 = v16;
    goto LABEL_24;
  }
  *((_DWORD *)a1 + 5) = v16;
  return (uint64_t)v7;
}

uint64_t upvec_getValue(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t result;

  result = 0;
  if ((a3 & 0x80000000) == 0 && a2 <= 0x110001 && !*(_BYTE *)(a1 + 24))
  {
    if (*(_DWORD *)(a1 + 8) - 2 <= a3)
      return 0;
    else
      return *(unsigned int *)(sub_18BBE0AC0((uint64_t *)a1, a2) + 4 * (a3 + 2));
  }
  return result;
}

_DWORD *upvec_getRow(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4)
{
  _DWORD *result;
  _DWORD *v6;

  result = 0;
  if ((a2 & 0x80000000) == 0 && !*(_BYTE *)(a1 + 24))
  {
    if (*(_DWORD *)(a1 + 16) <= a2)
    {
      return 0;
    }
    else
    {
      v6 = (_DWORD *)(*(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 8) * a2);
      if (a3)
        *a3 = *v6;
      if (a4)
        *a4 = v6[1] - 1;
      return v6 + 2;
    }
  }
  return result;
}

void upvec_compact(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t, int *), uint64_t a3, int *a4)
{
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  int v24;
  size_t __len;
  size_t v26;
  unsigned int v27;

  if (*a4 <= 0)
  {
    if (a2)
    {
      if (!*(_BYTE *)(a1 + 24))
      {
        *(_BYTE *)(a1 + 24) = 1;
        v23 = *(int *)(a1 + 8);
        v24 = *(_DWORD *)(a1 + 16);
        uprv_sortArray(*(_QWORD *)a1, v24, 4 * v23, sub_18BBE0F1C, a1, 0, a4);
        if (*a4 <= 0)
        {
          v8 = v23 - 2;
          v9 = *(unsigned int **)a1;
          v10 = (2 - v23);
          v11 = v24;
          v12 = v23 - 2;
          v27 = 2 - v23;
          if (v24 < 1)
          {
LABEL_14:
            a2(a3, 0x200000, 0x200000, (v10 + v8), &v9[-v8], v12, a4);
            if (*a4 <= 0)
            {
              v15 = v23 - 2;
              v16 = v24;
              if (v24 < 1)
              {
LABEL_23:
                *(_DWORD *)(a1 + 16) = (int)v27 / v15 + 1;
              }
              else
              {
                v17 = (_DWORD *)(*(_QWORD *)a1 + 8);
                while (1)
                {
                  v19 = *(v17 - 2);
                  v18 = *(v17 - 1);
                  v20 = *(_QWORD *)a1;
                  v21 = v27;
                  if ((v27 & 0x80000000) != 0
                    || (v22 = memcmp(v17, (const void *)(v20 + 4 * v27), 4 * (int)v12), v21 = v27, v15 = v23 - 2, v22))
                  {
                    v27 = v21 + v15;
                    memmove((void *)(v20 + 4 * (int)(v21 + v15)), v17, 4 * v12);
                    v15 = v23 - 2;
                  }
                  if ((int)v19 < 1114112)
                  {
                    a2(a3, v19, (v18 - 1), v27, (unsigned int *)(*(_QWORD *)a1 + 4 * (int)v27), v12, a4);
                    v15 = v23 - 2;
                    if (*a4 > 0)
                      break;
                  }
                  v17 += v23;
                  if (!--v16)
                    goto LABEL_23;
                }
              }
            }
          }
          else
          {
            __len = -1 * v8;
            v26 = 4 * (int)v8;
            while (1)
            {
              v13 = *v9;
              if ((v10 & 0x80000000) != 0 || (v14 = memcmp(v9 + 2, &v9[__len], v26), v8 = v23 - 2, v14))
                v10 = (v10 + v8);
              if ((int)v13 >= 1114112)
              {
                a2(a3, v13, v13, v10, v9 + 2, v12, a4);
                v8 = v23 - 2;
                if (*a4 > 0)
                  break;
              }
              v9 += v23;
              if (!--v11)
                goto LABEL_14;
            }
          }
        }
      }
    }
    else
    {
      *a4 = 1;
    }
  }
}

uint64_t sub_18BBE0F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = v3 + 1;
  v5 = 2;
  while (1)
  {
    v6 = *(_DWORD *)(a2 + 4 * v5);
    v7 = *(_DWORD *)(a3 + 4 * v5);
    if (v6 != v7)
      break;
    if (v5 + 1 == v3)
      v5 = 0;
    else
      ++v5;
    if (--v4 <= 1)
      return 0;
  }
  if (v6 < v7)
    return 0xFFFFFFFFLL;
  else
    return 1;
}

uint64_t upvec_getArray(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (!*(_BYTE *)(a1 + 24))
    return 0;
  if (a2)
    *a2 = *(_DWORD *)(a1 + 16);
  if (a3)
    *a3 = *(_DWORD *)(a1 + 8) - 2;
  return *(_QWORD *)a1;
}

void *upvec_cloneArray(uint64_t a1, _DWORD *a2, _DWORD *a3, int *a4)
{
  void *v4;
  size_t v9;
  void *v10;
  int v11;

  if (*a4 > 0)
    return 0;
  if (!*(_BYTE *)(a1 + 24))
  {
    v4 = 0;
    v11 = 1;
LABEL_11:
    *a4 = v11;
    return v4;
  }
  v9 = 4 * *(_DWORD *)(a1 + 16) * (*(_DWORD *)(a1 + 8) - 2);
  v10 = uprv_malloc(v9);
  v4 = v10;
  if (!v10)
  {
    v11 = 7;
    goto LABEL_11;
  }
  memcpy(v10, *(const void **)a1, v9);
  if (a2)
    *a2 = *(_DWORD *)(a1 + 16);
  if (a3)
    *a3 = *(_DWORD *)(a1 + 8) - 2;
  return v4;
}

void *upvec_compactToUTrie2WithRowIndexes(uint64_t a1, int *a2)
{
  void *result;
  void *v4[3];

  memset(v4, 0, sizeof(v4));
  upvec_compact(a1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t, int *))upvec_compactToUTrie2Handler, (uint64_t)v4, a2);
  utrie2_freeze((uint64_t)v4[0], 0, a2);
  result = v4[0];
  if (*a2 >= 1)
  {
    utrie2_close((void **)v4[0]);
    return 0;
  }
  return result;
}

_OWORD *upvec_compactToUTrie2Handler(_OWORD *result, signed int a2, unsigned int a3, signed int a4, uint64_t a5, uint64_t a6, int *a7)
{
  _QWORD *v7;

  v7 = result;
  if (a2 < 1114112)
    return (_OWORD *)utrie2_setRange32(*(_QWORD *)result, a2, a3, a4, 1, a7);
  switch(a2)
  {
    case 0x200000:
      *((_DWORD *)result + 4) = a4;
      if (a4 < 0x10000)
      {
        result = utrie2_open(*((_DWORD *)result + 2), *((_DWORD *)result + 3), a7);
        *v7 = result;
      }
      else
      {
        *a7 = 8;
      }
      break;
    case 0x110001:
      *((_DWORD *)result + 3) = a4;
      break;
    case 0x110000:
      *((_DWORD *)result + 2) = a4;
      break;
  }
  return result;
}

uint64_t u_strToPunycode(_WORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int *a6)
{
  uint64_t v8;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  char v19;
  char v20;
  int v21;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  char v29;
  char v30;
  char v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int *v39;
  uint64_t v40;
  int v41;
  int v42;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  char v54;
  int v55;
  char v56;
  int v57;
  int v58;
  signed int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  _DWORD v63[1000];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (!a6 || *a6 > 0)
    return 0;
  if (!a1 || (v8 = a2, (int)a2 < -1) || !a3 && a4)
  {
    v12 = 1;
LABEL_8:
    *a6 = v12;
    return 0;
  }
  if ((int)a2 >= 1001)
  {
LABEL_11:
    v12 = 31;
    goto LABEL_8;
  }
  bzero(v63, 0xFA0uLL);
  if ((_DWORD)v8 == -1)
  {
    LOWORD(v24) = *a1;
    if (*a1)
    {
      v14 = 0;
      v25 = 0;
      v26 = 0;
      v16 = 0;
      while (v26 < 1000)
      {
        v24 = (unsigned __int16)v24;
        if ((unsigned __int16)v24 > 0x7Fu)
        {
          if (a5)
            v32 = (*(_BYTE *)(a5 + v25) != 0) << 31;
          else
            v32 = 0;
          if ((v24 & 0xF800) == 0xD800)
          {
            if ((v24 & 0xFC00) != 0xD800 || (++v26, v33 = (unsigned __int16)a1[v26], (v33 & 0xFC00) != 0xDC00))
            {
LABEL_130:
              v12 = 10;
              goto LABEL_8;
            }
            v24 = ((unsigned __int16)v24 << 10) - 56613888 + v33;
          }
          v63[v14] = v24 | v32;
        }
        else
        {
          v63[v14] = 0;
          if ((int)v16 < a4)
          {
            if (a5)
            {
              v27 = *(unsigned __int8 *)(a5 + v25);
              v28 = v27 == 0;
              if (v27)
                v29 = -97;
              else
                v29 = -65;
              if (v28)
                v30 = 32;
              else
                v30 = -32;
              if ((v29 + v24) >= 0x1Au)
                v31 = 0;
              else
                v31 = v30;
              LOBYTE(v24) = v31 + v24;
            }
            *(_WORD *)(a3 + 2 * (int)v16) = (char)v24;
          }
          v16 = (v16 + 1);
        }
        ++v14;
        v25 = ++v26;
        LOWORD(v24) = a1[v26];
        if (!(_WORD)v24)
        {
LABEL_71:
          v8 = v16;
          if ((int)v16 >= 1)
          {
            if ((int)v16 < a4)
              *(_WORD *)(a3 + 2 * v16) = 45;
            v8 = (v16 + 1);
          }
          if ((int)v16 >= (int)v14)
            return u_terminateUChars(a3, a4, v8, a6);
          v34 = 0;
          v35 = 128;
          v36 = 72;
          v37 = v16;
          while (1)
          {
            v38 = 0x7FFFFFFF;
            if ((_DWORD)v14)
            {
              v39 = v63;
              v40 = v14;
              do
              {
                v41 = *v39++;
                v42 = v41 & 0x7FFFFFFF;
                if ((v41 & 0x7FFFFFFF) < v38 && v35 <= v42)
                  v38 = v42;
                --v40;
              }
              while (v40);
            }
            v44 = v38 - v35;
            if (v44 > ((v34 + v37) ^ 0x7FFFFFFF) / (v37 + 1))
              break;
            v45 = v34 + v44 * (v37 + 1);
            if ((_DWORD)v14)
            {
              v46 = 0;
              do
              {
                v47 = v63[v46];
                if ((v47 & 0x7FFFFFFF) >= v38)
                {
                  if ((v47 & 0x7FFFFFFF) == v38)
                  {
                    v48 = 36 - v36;
                    if (v36 <= 10)
                      v48 = 26;
                    if (v36 > 35)
                      v49 = 1;
                    else
                      v49 = v48;
                    if (v45 >= v49)
                    {
                      v8 = (int)v8;
                      v51 = 46;
                      v50 = v45;
                      do
                      {
                        v52 = v50 - v49;
                        v50 = (v50 - v49) / (36 - v49);
                        if (v8 < a4)
                        {
                          v53 = v52 - v50 * (36 - v49) + v49;
                          if (v53 >= 26)
                            v54 = 22;
                          else
                            v54 = 97;
                          *(_WORD *)(a3 + 2 * v8) = (char)(v54 + v53);
                        }
                        ++v8;
                        if (v51 >= v36)
                          v55 = 26;
                        else
                          v55 = v51 - v36 + 26;
                        if (v51 - v36 + 26 < 1)
                          v49 = 1;
                        else
                          v49 = v55;
                        v51 += 36;
                      }
                      while (v50 >= v49);
                    }
                    else
                    {
                      v50 = v45;
                    }
                    if ((int)v8 < a4)
                    {
                      if (v50 > 25)
                      {
                        v56 = v50 + 22;
                      }
                      else if (v47 < 0)
                      {
                        v56 = v50 + 65;
                      }
                      else
                      {
                        v56 = v50 + 97;
                      }
                      *(_WORD *)(a3 + 2 * (int)v8) = v56;
                    }
                    v57 = v37 + 1;
                    if (v37 == (_DWORD)v16)
                      v58 = 700;
                    else
                      v58 = 2;
                    v59 = v45 / v58 / v57 + v45 / v58;
                    if (v59 < 456)
                    {
                      v60 = 0;
                    }
                    else
                    {
                      v60 = 0;
                      v61 = v59;
                      do
                      {
                        v59 = v61 / 0x23;
                        v60 += 36;
                        v62 = v61 >> 3;
                        v61 /= 0x23u;
                      }
                      while (v62 > 0x7CA);
                    }
                    v45 = 0;
                    v8 = (v8 + 1);
                    v36 = 36 * v59 / (v59 + 38) + v60;
                    v37 = v57;
                  }
                }
                else
                {
                  ++v45;
                }
                ++v46;
              }
              while (v46 != v14);
            }
            v34 = v45 + 1;
            v35 = v38 + 1;
            if (v37 >= (int)v14)
              return u_terminateUChars(a3, a4, v8, a6);
          }
          v12 = 5;
          goto LABEL_8;
        }
      }
      goto LABEL_11;
    }
    v8 = 0;
  }
  else if ((_DWORD)v8)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    v16 = 0;
    while (1)
    {
      v17 = (unsigned __int16)a1[(int)v15];
      if (v17 > 0x7F)
      {
        if (a5)
          v21 = (*(_BYTE *)(a5 + (int)v15) != 0) << 31;
        else
          v21 = 0;
        if ((v17 & 0xF800) == 0xD800)
        {
          v15 = (int)v15 + 1;
          if ((v17 & 0xFC00) != 0xD800 || (int)v15 >= (int)v8)
            goto LABEL_130;
          v23 = (unsigned __int16)a1[v15];
          if ((v23 & 0xFC00) != 0xDC00)
            goto LABEL_130;
          v17 = (v17 << 10) - 56613888 + v23;
        }
        v63[v14] = v17 | v21;
      }
      else
      {
        v63[v14] = 0;
        if ((int)v16 < a4)
        {
          if (a5)
          {
            if (*(_BYTE *)(a5 + (int)v15))
              v18 = -97;
            else
              v18 = -65;
            if (*(_BYTE *)(a5 + (int)v15))
              v19 = -32;
            else
              v19 = 32;
            if ((v18 + v17) >= 0x1Au)
              v20 = 0;
            else
              v20 = v19;
            LOBYTE(v17) = v20 + v17;
          }
          *(_WORD *)(a3 + 2 * (int)v16) = (char)v17;
        }
        v16 = (v16 + 1);
      }
      ++v14;
      LODWORD(v15) = v15 + 1;
      if ((int)v15 >= (int)v8)
        goto LABEL_71;
    }
  }
  return u_terminateUChars(a3, a4, v8, a6);
}

uint64_t u_strFromPunycode(UChar *s, unint64_t a2, uint64_t a3, int a4, uint64_t a5, int *a6)
{
  unint64_t v8;
  int v12;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  signed int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  BOOL v53;
  int v54;
  uint64_t v55;
  _WORD *v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;

  if (!a6 || *a6 > 0)
    return 0;
  if (!s || (v8 = a2, (int)a2 < -1) || !a3 && a4)
  {
    v12 = 1;
LABEL_8:
    *a6 = v12;
    return 0;
  }
  if ((_DWORD)a2 == -1)
    v8 = u_strlen(s);
  if ((int)v8 >= 2001)
  {
    v12 = 31;
    goto LABEL_8;
  }
  if ((int)v8 < 1)
  {
    v20 = 0;
    v15 = v8;
  }
  else
  {
    v14 = v8;
    do
    {
      v15 = v14 - 1;
      if (v14 < 2)
        break;
      v16 = s[--v14];
    }
    while (v16 != 45);
    if ((int)v15 >= 1)
    {
      v17 = v15;
      while (1)
      {
        v18 = v17 - 1;
        v19 = s[(v17 - 1)];
        if (v19 >= 0x80)
          break;
        if (v17 <= a4)
        {
          *(_WORD *)(a3 + 2 * (v17 - 1)) = v19;
          if (a5)
            *(_BYTE *)(a5 + (v17 - 1)) = v19 - 65 < 0x1A;
        }
        --v17;
        if ((unint64_t)(v18 + 1) <= 1)
        {
          v20 = v15 + 1;
          goto LABEL_28;
        }
      }
LABEL_104:
      v12 = 10;
      goto LABEL_8;
    }
    v20 = 0;
  }
LABEL_28:
  if (v20 < (int)v8)
  {
    v21 = 0;
    v22 = (int)v8;
    v23 = 128;
    v24 = 72;
    v25 = 1000000000;
    v26 = v15;
    while (2)
    {
      v27 = v24 + 26;
      v28 = v20++;
      v29 = -v24;
      v30 = 1;
      v31 = 36;
      v32 = v21;
      while (1)
      {
        v33 = s[v28];
        if (v33 > 0x5A)
        {
          if (v33 > 0x7A)
            goto LABEL_104;
          v34 = v33 - 97;
          if (v34 < 0)
            goto LABEL_104;
        }
        else if (v33 > 0x39)
        {
          v34 = v33 - 65;
          if (v34 < 0)
            goto LABEL_104;
        }
        else
        {
          if (v33 < 0x30)
            goto LABEL_104;
          v34 = v33 - 22;
        }
        if (v34 > (v32 ^ 0x7FFFFFFF) / v30)
          goto LABEL_105;
        v32 += v34 * v30;
        v35 = v31 >= v27 ? 26 : v29 + v31;
        v36 = v29 + v31 < 1 ? 1 : v35;
        if (v34 < v36)
          break;
        if (v30 <= 0x7FFFFFFF / (36 - v36))
        {
          ++v28;
          v30 *= 36 - v36;
          v31 += 36;
          ++v20;
          if (v28 < v22)
            continue;
        }
        goto LABEL_105;
      }
      ++v26;
      v37 = v32 - v21;
      if (v21)
        v38 = 2;
      else
        v38 = 700;
      v39 = v37 / v38 / v26 + v37 / v38;
      if (v39 < 456)
      {
        v40 = 0;
      }
      else
      {
        v40 = 0;
        v41 = v37 / v38 / v26 + v37 / v38;
        do
        {
          v39 = v41 / 0x23;
          v40 += 36;
          v42 = v41 >> 3;
          v41 /= 0x23u;
        }
        while (v42 > 0x7CA);
      }
      if (v32 / v26 > (int)(v23 ^ 0x7FFFFFFF)
        || (v23 += v32 / v26, (int)v23 >= 1114112)
        || (v23 & 0xFFFFF800) == 0xD800)
      {
LABEL_105:
        v12 = 12;
        goto LABEL_8;
      }
      v43 = v32 % v26;
      v44 = HIWORD(v23);
      if (HIWORD(v23))
        v45 = 2;
      else
        v45 = 1;
      v46 = (v45 + v15);
      if (!a3 || (int)v46 > a4)
        goto LABEL_100;
      v47 = v43 - v25;
      if (v43 <= v25)
      {
        if (v44)
          v25 = v32 % v26;
        else
          ++v25;
        v49 = v32 % v26;
      }
      else if (v47 < 1)
      {
        v49 = v25;
      }
      else
      {
        v48 = v47 + 1;
        v49 = v25;
        do
        {
          if (v49 >= (int)v15)
          {
            if ((v15 & 0x80000000) == 0)
              break;
            v50 = *(_WORD *)(a3 + 2 * v49);
            if (!v50)
              break;
          }
          else
          {
            v50 = *(_WORD *)(a3 + 2 * v49);
          }
          v51 = v49 + 1;
          if ((v50 & 0xFC00) != 0xD800 || (_DWORD)v51 == (_DWORD)v15)
          {
            ++v49;
          }
          else
          {
            v49 += 2;
            if ((*(_WORD *)(a3 + 2 * v51) & 0xFC00) != 0xDC00)
              v49 = v51;
          }
          --v48;
        }
        while (v48 > 1);
      }
      v53 = __OFSUB__((_DWORD)v15, v49);
      v54 = v15 - v49;
      if ((v54 < 0) ^ v53 | (v54 == 0))
      {
        if (!v44)
        {
          *(_WORD *)(a3 + 2 * v49) = v23;
          if (!a5)
            goto LABEL_100;
          goto LABEL_94;
        }
      }
      else
      {
        v59 = HIWORD(v23);
        v60 = v43;
        v61 = v46;
        v62 = v26;
        v63 = v25;
        v64 = v23;
        v65 = v22;
        v66 = v49;
        v57 = v45;
        v58 = v54;
        v56 = (_WORD *)(a3 + 2 * v49);
        memmove(&v56[v45], v56, 2 * v54);
        if (a5)
        {
          memmove((void *)(a5 + v66 + v57), (const void *)(a5 + v66), v58);
          v22 = v65;
          v49 = v66;
          v25 = v63;
          v23 = v64;
          v46 = v61;
          v26 = v62;
          v43 = v60;
          if (!v59)
          {
            *v56 = v64;
LABEL_94:
            *(_BYTE *)(a5 + v49) = s[v28] - 65 < 0x1A;
            goto LABEL_100;
          }
        }
        else
        {
          v22 = v65;
          v49 = v66;
          v25 = v63;
          v23 = v64;
          v46 = v61;
          v26 = v62;
          v43 = v60;
          if (!v59)
          {
            *v56 = v64;
            goto LABEL_100;
          }
        }
      }
      *(_WORD *)(a3 + 2 * v49) = (v23 >> 10) - 10304;
      v55 = v49 + 1;
      *(_WORD *)(a3 + 2 * v55) = v23 & 0x3FF | 0xDC00;
      if (a5)
      {
        *(_BYTE *)(a5 + v49) = s[v28] - 65 < 0x1A;
        if (v23 >= 0x10000)
          *(_BYTE *)(a5 + v55) = 0;
      }
LABEL_100:
      v24 = 36 * v39 / (v39 + 38) + v40;
      v21 = v43 + 1;
      LODWORD(v15) = v46;
      if ((int)v8 > v20)
        continue;
      return u_terminateUChars(a3, a4, v46, a6);
    }
  }
  v46 = v15;
  return u_terminateUChars(a3, a4, v46, a6);
}

double uprv_getUTCtime()
{
  timeval v1;

  v1.tv_sec = 0;
  *(_QWORD *)&v1.tv_usec = 0;
  gettimeofday(&v1, 0);
  return (double)(1000 * v1.tv_sec + v1.tv_usec / 1000);
}

double uprv_getRawUTCtime()
{
  timeval v1;

  v1.tv_sec = 0;
  *(_QWORD *)&v1.tv_usec = 0;
  gettimeofday(&v1, 0);
  return (double)(1000 * v1.tv_sec + v1.tv_usec / 1000);
}

BOOL uprv_isNaN(double a1)
{
  return (*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000;
}

BOOL uprv_isInfinite(double a1)
{
  return (*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000;
}

BOOL uprv_isPositiveInfinity(double a1)
{
  return a1 > 0.0 && (*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000;
}

BOOL uprv_isNegativeInfinity(double a1)
{
  return a1 < 0.0 && (*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000;
}

double uprv_getNaN()
{
  return NAN;
}

double uprv_getInfinity()
{
  return INFINITY;
}

double uprv_floor(double a1)
{
  return floor(a1);
}

double uprv_ceil(double a1)
{
  return ceil(a1);
}

double uprv_round(double a1)
{
  return floor(a1 + 0.5);
}

double uprv_fabs(double a1)
{
  return fabs(a1);
}

double uprv_pow10(int a1)
{
  return __exp10((double)a1);
}

double uprv_fmax(double a1, double a2)
{
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
    || (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001)
  {
    return NAN;
  }
  if (((*(_QWORD *)&a1 & 0x8000000000000000) == 0 || a1 != 0.0 || a2 != 0.0) && a1 > a2)
    return a1;
  return a2;
}

double uprv_fmin(double a1, double a2)
{
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
    || (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001)
  {
    return NAN;
  }
  if ((a1 != 0.0 || a2 != 0.0 || (*(_QWORD *)&a2 & 0x8000000000000000) == 0) && a1 <= a2)
    return a1;
  return a2;
}

BOOL uprv_add32_overflow(int a1, int a2, _DWORD *a3)
{
  int v3;
  _BOOL8 result;

  v3 = a1 + a2;
  result = __OFADD__(a1, a2);
  *a3 = v3;
  return result;
}

BOOL uprv_mul32_overflow(int a1, int a2, _DWORD *a3)
{
  uint64_t v3;

  v3 = a2 * (uint64_t)a1;
  *a3 = v3;
  return v3 != (int)v3;
}

double uprv_trunc(double a1)
{
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000)
    return NAN;
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000)
    return INFINITY;
  if ((*(_QWORD *)&a1 & 0x8000000000000000) != 0)
    return ceil(a1);
  return floor(a1);
}

double uprv_maxMantissa()
{
  return 1.80143985e16;
}

uint64_t uprv_maximumPtr(unint64_t a1)
{
  if (a1 >= 0xFFFFFFFF80000001)
    return -1;
  else
    return a1 + 0x7FFFFFFF;
}

uint64_t uprv_timezone()
{
  return *MEMORY[0x1E0C85968];
}

void uprv_tzname_clear_cache()
{
  qword_1ECD27378 = 0;
}

const char *uprv_tzname(int a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  char *v8;
  char *v9;
  ssize_t v10;
  _DWORD *v11;
  _DWORD *v12;
  FILE *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  int v19;
  tm v21;
  tm v22;
  char *v23;

  v2 = getenv("TZ");
  v23 = v2;
  if (v2)
  {
    v3 = v2;
    if (sub_18BBE2170(v2))
    {
      if (*v3 == 58)
        v23 = v3 + 1;
      sub_18BBE224C((const char **)&v23);
      return v23;
    }
  }
  v4 = qword_1ECD27378;
  if (qword_1ECD27378)
    return (const char *)v4;
  if (!realpath("/var/db/timezone/localtime", (char *)&qword_1ECD27380)
    || (qword_1ECD27380 == 0x2F62642F7261762FLL ? (v5 = *(_QWORD *)algn_1ECD27388 == 0x656E6F7A656D6974) : (v5 = 0),
        v5 ? (v6 = qword_1ECD27390 == 0x69746C61636F6C2FLL) : (v6 = 0),
        v6 ? (v7 = *(uint64_t *)((char *)&qword_1ECD27390 + 3) == 0x656D69746C6163) : (v7 = 0),
        v7))
  {
    v11 = uprv_malloc(0x20uLL);
    if (v11)
    {
      v12 = v11;
      v11[7] = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
      *(_QWORD *)v11 = 0;
      *((_BYTE *)v11 + 24) = 0;
      qword_1ECD27378 = sub_18BBE22A4("/var/db/timezone/zoneinfo/", (uint64_t)v11);
      if (*(_QWORD *)v12)
        uprv_free(*(void **)v12);
      v13 = (FILE *)*((_QWORD *)v12 + 2);
      if (v13)
        fclose(v13);
      uprv_free(v12);
    }
    v4 = qword_1ECD27378;
    if (qword_1ECD27378 && sub_18BBE2170((char *)qword_1ECD27378))
      return (const char *)v4;
  }
  else
  {
    v8 = strstr((char *)&qword_1ECD27380, "/zoneinfo/");
    v9 = v8;
    if (v8 && strcmp(v8 + 10, "posixrules"))
      goto LABEL_47;
    v10 = readlink("/var/db/timezone/localtime", (char *)&qword_1ECD27380, 0x3FFuLL);
    if (v10 >= 1)
    {
      *((_BYTE *)&qword_1ECD27380 + v10) = 0;
      v9 = strstr((char *)&qword_1ECD27380, "/zoneinfo/");
    }
    if (v9)
    {
LABEL_47:
      *(_QWORD *)&v22.tm_sec = v9 + 10;
      sub_18BBE224C((const char **)&v22);
      v4 = *(_QWORD *)&v22.tm_sec;
      if (sub_18BBE2170(*(char **)&v22.tm_sec))
      {
        qword_1ECD27378 = v4;
        return (const char *)v4;
      }
    }
  }
  memset(&v22, 0, sizeof(v22));
  memset(&v21, 0, sizeof(v21));
  localtime_r(&qword_18BDE0170, &v22);
  localtime_r(&qword_18BDE0178, &v21);
  v14 = 0;
  if (v21.tm_isdst <= 0)
    v15 = v22.tm_isdst > 0;
  else
    v15 = 2;
  v16 = MEMORY[0x1E0C85988];
  v17 = (const char *)*MEMORY[0x1E0C85988];
  v18 = *(const char **)(MEMORY[0x1E0C85988] + 8);
  v19 = *MEMORY[0x1E0C85968];
  while (dword_1E224A910[v14] != v19
       || dword_1E224A910[v14 + 1] != v15
       || strcmp(*(const char **)&dword_1E224A910[v14 + 2], v17)
       || strcmp(*(const char **)&dword_1E224A910[v14 + 4], v18))
  {
    v14 += 8;
    if (v14 == 472)
      return *(const char **)(v16 + 8 * a1);
  }
  return *(const char **)&dword_1E224A910[v14 + 6];
}

BOOL sub_18BBE2170(char *__s1)
{
  int v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  int v6;

  v2 = *__s1;
  if (*__s1)
  {
    v3 = 0;
    while (v2 != 44 && (v2 - 48) >= 0xA)
    {
      v4 = v3 + 1;
      v2 = __s1[++v3];
      if (!v2)
      {
        LODWORD(v3) = v4;
        break;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  v5 = (v3 + 2);
  v3 = v3;
  do
    v6 = __s1[v3];
  while ((v6 - 48) <= 9 && v3++ < v5);
  return !v6
      || !strcmp(__s1, "PST8PDT")
      || !strcmp(__s1, "MST7MDT")
      || !strcmp(__s1, "CST6CDT")
      || strcmp(__s1, "EST5EDT") == 0;
}

uint64_t sub_18BBE224C(const char **a1)
{
  const char *v2;
  uint64_t result;

  v2 = *a1;
  result = strncmp(*a1, "posix/", 6uLL);
  if (!(_DWORD)result || (result = strncmp(v2, "right/", 6uLL), !(_DWORD)result))
    *a1 = v2 + 6;
  return result;
}

uint64_t sub_18BBE22A4(const char *a1, uint64_t a2)
{
  uint64_t v4;
  DIR *v5;
  unint64_t v6;
  DIR *v7;
  uint64_t *v8;
  dirent *v9;
  char *v10;
  const char *d_name;
  int v12;
  DIR *v13;
  const char *v14;
  FILE *v15;
  FILE *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  size_t v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  icu::CharString *v25;
  char *v27;
  FILE *__stream;
  UErrorCode v29;
  char *__filename[7];
  int v31;
  int v32;
  char *v33[7];
  int v34[2];
  const char *__ptr[68];

  __ptr[65] = *(const char **)MEMORY[0x1E0C80C00];
  v29 = U_ZERO_ERROR;
  memset(&v33[1], 0, 48);
  *(_QWORD *)v34 = 0;
  v33[0] = (char *)&v33[1] + 5;
  LODWORD(v33[1]) = 40;
  icu::CharString::append((icu::CharString *)v33, a1, -1, &v29);
  v4 = 0;
  if (v29 <= U_ZERO_ERROR)
  {
    v5 = opendir(a1);
    if (!v5)
    {
      v4 = 0;
      goto LABEL_49;
    }
    v7 = v5;
    if (!qword_1EE009348)
    {
      v8 = icu::UMemory::operator new(0, (icu::UMemory *)0x40, v6);
      if (!v8)
      {
        v4 = 0;
        qword_1EE009348 = 0;
LABEL_48:
        closedir(v7);
        goto LABEL_49;
      }
      *v8 = (uint64_t)v8 + 13;
      *((_DWORD *)v8 + 2) = 40;
      *((_WORD *)v8 + 6) = 0;
      *((_DWORD *)v8 + 14) = 0;
      qword_1EE009348 = (uint64_t)v8;
      sub_18BC0ECC4(0x19u, (uint64_t)sub_18BBE27AC);
    }
    v9 = readdir(v7);
    v4 = 0;
    if (v9)
    {
      v10 = (char *)&__filename[1] + 5;
      while (1)
      {
        d_name = v9->d_name;
        if (!strcmp(v9->d_name, ".")
          || !strcmp(d_name, "..")
          || !strcmp("posixrules", d_name)
          || !strcmp("localtime", d_name))
        {
          goto LABEL_17;
        }
        v32 = 0;
        memset(&__filename[1], 0, 48);
        __filename[0] = v10;
        LODWORD(__filename[1]) = 40;
        v31 = 0;
        icu::CharString::append((icu::CharString *)__filename, v33[0], v34[0], &v29);
        icu::CharString::append((icu::CharString *)__filename, d_name, -1, &v29);
        if (v29 > U_ZERO_ERROR)
        {
LABEL_13:
          v12 = 0;
          goto LABEL_14;
        }
        v13 = opendir(__filename[0]);
        if (v13)
          break;
        v14 = __filename[0];
        if (!*(_QWORD *)(a2 + 16))
          *(_QWORD *)(a2 + 16) = fopen("/var/db/timezone/localtime", "r");
        v15 = fopen(v14, "r");
        *(_DWORD *)(a2 + 28) = 0;
        __stream = v15;
        if (!v15)
          goto LABEL_45;
        v27 = v10;
        v16 = *(FILE **)(a2 + 16);
        if (!v16)
          goto LABEL_44;
        if (!*(_QWORD *)(a2 + 8))
        {
          fseek(v16, 0, 2);
          *(_QWORD *)(a2 + 8) = MEMORY[0x18D78003C](*(_QWORD *)(a2 + 16));
        }
        fseek(__stream, 0, 2);
        v17 = MEMORY[0x18D78003C](__stream);
        if (v17 != *(_QWORD *)(a2 + 8))
          goto LABEL_44;
        v18 = v17;
        if (!*(_QWORD *)a2)
        {
          rewind(*(FILE **)(a2 + 16));
          v19 = uprv_malloc(*(_QWORD *)(a2 + 8));
          *(_QWORD *)a2 = v19;
          fread(v19, 1uLL, *(_QWORD *)(a2 + 8), *(FILE **)(a2 + 16));
        }
        rewind(__stream);
        if (v18 >= 1)
        {
          while (1)
          {
            memset(&__ptr[4], 0, 480);
            v20 = v18 >= 512 ? 512 : v18;
            memset(__ptr, 0, 32);
            v21 = fread(__ptr, 1uLL, v20, __stream);
            v22 = *(int *)(a2 + 28);
            if (memcmp((const void *)(*(_QWORD *)a2 + v22), __ptr, v21))
              break;
            *(_DWORD *)(a2 + 28) = v22 + v21;
            v23 = v18 <= v21;
            v18 -= v21;
            if (v23)
              goto LABEL_39;
          }
LABEL_44:
          fclose(__stream);
          v10 = v27;
LABEL_45:
          v12 = 1;
          goto LABEL_14;
        }
LABEL_39:
        fclose(__stream);
        v24 = v31;
        if (v31 >= 26)
          v24 = 26;
        __ptr[0] = &__filename[0][v24];
        sub_18BBE224C(__ptr);
        v25 = (icu::CharString *)qword_1EE009348;
        *(_DWORD *)(qword_1EE009348 + 56) = 0;
        **(_BYTE **)v25 = 0;
        icu::CharString::append(v25, __ptr[0], -1, &v29);
        if (v29 <= U_ZERO_ERROR)
          v4 = *(_QWORD *)qword_1EE009348;
        v12 = 0;
        v10 = v27;
LABEL_14:
        if (BYTE4(__filename[1]))
          uprv_free(__filename[0]);
        if (!v12)
          goto LABEL_48;
LABEL_17:
        v9 = readdir(v7);
        if (!v9)
          goto LABEL_48;
      }
      closedir(v13);
      icu::CharString::append((icu::CharString *)__filename, 47, &v29);
      if (v29 > U_ZERO_ERROR)
        goto LABEL_13;
      v4 = sub_18BBE22A4(__filename[0], a2);
      if (v4)
        goto LABEL_13;
      goto LABEL_45;
    }
    goto LABEL_48;
  }
LABEL_49:
  if (BYTE4(v33[1]))
    uprv_free(v33[0]);
  return v4;
}

void u_setDataDirectory(const char *directory)
{
  int v2;
  char *v3;
  const char *v4;

  if (directory && *directory)
  {
    v2 = strlen(directory);
    v3 = (char *)uprv_malloc(v2 + 2);
    if (!v3)
      return;
    v4 = v3;
    strcpy(v3, directory);
  }
  else
  {
    v4 = "";
  }
  if (qword_1ECD27780)
  {
    if (*(_BYTE *)qword_1ECD27780)
      uprv_free((void *)qword_1ECD27780);
  }
  qword_1ECD27780 = (uint64_t)v4;
  sub_18BC0ECC4(0x19u, (uint64_t)sub_18BBE27AC);
}

uint64_t sub_18BBE27AC()
{
  void *v0;
  void *v1;

  if (qword_1ECD27780 && *(_BYTE *)qword_1ECD27780)
    uprv_free((void *)qword_1ECD27780);
  qword_1ECD27780 = 0;
  atomic_store(0, (unsigned int *)&unk_1ECD277A0);
  v0 = (void *)qword_1ECD27788;
  if (qword_1ECD27788)
  {
    if (*(_BYTE *)(qword_1ECD27788 + 12))
      uprv_free(*(void **)qword_1ECD27788);
    icu::UMemory::operator delete(v0);
  }
  qword_1ECD27788 = 0;
  atomic_store(0, &dword_1ECD284D8);
  v1 = (void *)qword_1EE009348;
  if (qword_1EE009348)
  {
    if (*(_BYTE *)(qword_1EE009348 + 12))
      uprv_free(*(void **)qword_1EE009348);
    icu::UMemory::operator delete(v1);
  }
  qword_1EE009348 = 0;
  if (qword_1ECD27790 && byte_1ECD27798 == 1)
  {
    uprv_free((void *)qword_1ECD27790);
    qword_1ECD27790 = 0;
    byte_1ECD27798 = 0;
  }
  return 1;
}

unsigned __int8 *uprv_pathIsAbsolute(unsigned __int8 *result)
{
  if (result)
    return (unsigned __int8 *)(*result == 47);
  return result;
}

const char *u_getDataDirectory(void)
{
  unsigned int v0;
  char *v1;

  v0 = atomic_load((unsigned int *)&unk_1ECD277A0);
  if (v0 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1ECD277A0))
  {
    if (!qword_1ECD27780)
    {
      v1 = getenv("ICU_DATA");
      if (!v1 || !*v1)
        v1 = "/usr/share/icu/";
      u_setDataDirectory(v1);
    }
    icu::umtx_initImplPostInit((unsigned int *)&unk_1ECD277A0);
  }
  return (const char *)qword_1ECD27780;
}

const char *__cdecl u_getTimeZoneFilesDirectory(UErrorCode *status)
{
  unsigned int v2;

  if (*(int *)status > 0)
    return "";
  v2 = atomic_load(&dword_1ECD284D8);
  if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_1ECD284D8))
  {
    if (dword_1ECD284DC >= 1)
    {
      *status = dword_1ECD284DC;
      return "";
    }
  }
  else
  {
    sub_18BBE29AC(status);
    dword_1ECD284DC = *status;
    icu::umtx_initImplPostInit(&dword_1ECD284D8);
  }
  if (*(int *)status > 0)
    return "";
  return *(const char **)qword_1ECD27788;
}

icu::CharString *sub_18BBE29AC(UErrorCode *a1)
{
  unint64_t v2;
  icu::CharString *result;
  char *v4;
  char *v5;
  const char *v6;
  int v7;
  icu::CharString *v8;
  icu::CharString *v9;
  stat v10;
  char __s[23];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  sub_18BC0ECC4(0x19u, (uint64_t)sub_18BBE27AC);
  result = (icu::CharString *)icu::UMemory::operator new((icu::UMemory *)0x40, v2);
  if (result)
  {
    *(_QWORD *)result = (char *)result + 13;
    *((_DWORD *)result + 2) = 40;
    *((_WORD *)result + 6) = 0;
    *((_DWORD *)result + 14) = 0;
    qword_1ECD27788 = (uint64_t)result;
    v4 = getenv("ICU_TIMEZONE_FILES_DIR");
    v5 = v4;
    memset(&v10.st_birthtimespec, 0, 64);
    if (v4)
      v6 = v4;
    else
      v6 = "/var/db/timezone/icutz";
    memset(&v10, 0, 80);
    v7 = stat(v6, &v10);
    if (v7)
      v8 = 0;
    else
      v8 = (icu::CharString *)v6;
    if (!v5 && !v7)
    {
      v13 = 0;
      v12 = 0;
      v14 = 0;
      strcpy(__s, "/var/db/timezone/icutz");
      *(_WORD *)&__s[strlen(__s)] = 47;
      strcat(__s, "icutz44l");
      strcat(__s, ".dat");
      if (stat(__s, &v10))
        v8 = 0;
      else
        v8 = (icu::CharString *)v6;
    }
    if (v8)
      v9 = v8;
    else
      v9 = (icu::CharString *)"";
    return sub_18BBE2BE0(v9, a1);
  }
  else
  {
    qword_1ECD27788 = 0;
    *a1 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

void u_setTimeZoneFilesDirectory(const char *path, UErrorCode *status)
{
  unsigned int v4;

  if (*(int *)status <= 0)
  {
    v4 = atomic_load(&dword_1ECD284D8);
    if (v4 == 2 || !icu::umtx_initImplPreInit(&dword_1ECD284D8))
    {
      if (dword_1ECD284DC >= 1)
        *status = dword_1ECD284DC;
    }
    else
    {
      sub_18BBE29AC(status);
      dword_1ECD284DC = *status;
      icu::umtx_initImplPostInit(&dword_1ECD284D8);
    }
  }
  sub_18BBE2BE0((icu::CharString *)path, status);
}

icu::CharString *sub_18BBE2BE0(icu::CharString *__s, UErrorCode *a2)
{
  icu::CharString *v3;
  char *v4;
  int v5;

  if (*(int *)a2 <= 0)
  {
    v3 = (icu::CharString *)qword_1ECD27788;
    *(_DWORD *)(qword_1ECD27788 + 56) = 0;
    **(_BYTE **)v3 = 0;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v4, (const char *)__s);
    return icu::CharString::append(v3, v4, v5, a2);
  }
  return __s;
}

uint64_t uprv_getDefaultLocaleID()
{
  char *v0;
  char *v1;
  uint64_t v2;
  size_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  size_t v18;

  v0 = (char *)qword_1ECD277A8;
  if (!qword_1ECD277A8)
  {
    v1 = setlocale(6, 0);
    if ((!v1 || (v0 = v1, !strcmp("C", v1)) || !strcmp("POSIX", v0))
      && (v0 = getenv("LC_ALL")) == 0
      && (v0 = getenv("LC_MESSAGES")) == 0
      && (v0 = getenv("LANG")) == 0
      || !strcmp("C", v0)
      || !strcmp("POSIX", v0))
    {
      v0 = "en_US_POSIX";
    }
    qword_1ECD277A8 = (uint64_t)v0;
  }
  v2 = qword_1ECD27790;
  if (!qword_1ECD27790)
  {
    v4 = strlen(v0);
    v5 = (char *)uprv_malloc(v4 + 11);
    if (v5)
    {
      v6 = v5;
      v7 = strcpy(v5, v0);
      v8 = strchr(v7, 46);
      if (v8)
        *v8 = 0;
      v9 = strchr(v6, 64);
      if (v9)
        *v9 = 0;
      if (!strcmp("C", v6) || !strcmp("POSIX", v6))
        strcpy(v6, "en_US_POSIX");
      v10 = strrchr(v0, 64);
      if (v10)
      {
        v11 = v10;
        if (!strcmp(v10 + 1, "nynorsk"))
          v12 = "NY";
        else
          v12 = v11 + 1;
        v13 = strchr(v6, 95);
        v14 = &v6[strlen(v6)];
        if (v13)
          *(_WORD *)v14 = 95;
        else
          strcpy(v14, "__");
        v15 = strchr(v12, 46);
        if (v15)
        {
          v16 = v15;
          v17 = strlen(v6);
          v18 = v16 - v12;
          LODWORD(v16) = v17 + (_DWORD)v16 - (_DWORD)v12;
          strncat(v6, v12, v18);
          v6[(int)v16] = 0;
        }
        else
        {
          strcat(v6, v12);
        }
      }
      v2 = qword_1ECD27790;
      if (qword_1ECD27790)
      {
        uprv_free(v6);
      }
      else
      {
        qword_1ECD27790 = (uint64_t)v6;
        byte_1ECD27798 = 1;
        sub_18BC0ECC4(0x19u, (uint64_t)sub_18BBE27AC);
        return qword_1ECD27790;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void u_versionFromString(UVersionInfo versionArray, const char *versionString)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  char *__endptr;

  if (versionArray)
  {
    if (!versionString
      || (__endptr = 0, *versionArray = strtoul(versionString, &__endptr, 10),
                          v4 = __endptr,
                          __endptr == versionString))
    {
      v8 = 0;
LABEL_11:
      bzero(&versionArray[v8], (4 - v8));
    }
    else
    {
      v5 = 1;
      while (v5 != 4)
      {
        v6 = v5;
        if (*v4 == 46)
        {
          v7 = v4 + 1;
          versionArray[v5] = strtoul(v4 + 1, &__endptr, 10);
          v4 = __endptr;
          v5 = v6 + 1;
          if (__endptr != v7)
            continue;
        }
        v8 = (unsigned __int16)v6;
        if ((unsigned __int16)v6 <= 3u)
          goto LABEL_11;
        return;
      }
    }
  }
}

void u_versionFromUString(UVersionInfo versionArray, const UChar *versionString)
{
  int32_t v4;
  int32_t v5;
  uint64_t v6;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  if (versionArray && versionString)
  {
    v6 = 0;
    v7[0] = 0;
    *(_QWORD *)((char *)v7 + 5) = 0;
    v4 = u_strlen(versionString);
    if (v4 >= 20)
      v5 = 20;
    else
      v5 = v4;
    u_UCharsToChars(versionString, (char *)&v6, v5);
    *((_BYTE *)&v7[-1] + v5) = 0;
    u_versionFromString(versionArray, (const char *)&v6);
  }
}

void u_versionToString(const UVersionInfo versionArray, char *versionString)
{
  unsigned __int16 v2;
  uint64_t v3;
  unsigned int v4;
  char v5;
  const uint8_t *__attribute__((__org_typedef(UVersionInfo))) v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  if (versionString)
  {
    if (versionArray)
    {
      v2 = 4;
      while (!versionArray[v2 - 1])
      {
        if (!--v2)
        {
          v2 = 0;
          break;
        }
      }
      if (v2 <= 2u)
        v3 = 2;
      else
        v3 = v2;
      v4 = *versionArray;
      if (v4 >= 0x64)
      {
        v5 = *versionArray / 0x64u;
        *versionString++ = v5 | 0x30;
        LOBYTE(v4) = v4 - 100 * v5;
      }
      if (v4 >= 0xAu)
      {
        *versionString++ = (v4 / 0xAu) | 0x30;
        LOBYTE(v4) = v4 % 0xAu;
      }
      *versionString = v4 | 0x30;
      v6 = versionArray + 1;
      v7 = v3 - 1;
      do
      {
        versionString[1] = 46;
        v9 = *v6++;
        v8 = v9;
        if (v9 < 0x64)
        {
          versionString += 2;
        }
        else
        {
          v10 = (41 * v8) >> 12;
          versionString[2] = v10 | 0x30;
          versionString += 3;
          LOBYTE(v8) = v8 - 100 * v10;
        }
        if (v8 >= 0xAu)
        {
          *versionString++ = (v8 / 0xAu) | 0x30;
          LOBYTE(v8) = v8 % 0xAu;
        }
        *versionString = v8 | 0x30;
        --v7;
      }
      while (v7);
      ++versionString;
    }
    *versionString = 0;
  }
}

void u_getVersion(UVersionInfo versionArray)
{
  u_versionFromString(versionArray, "74.2");
}

void *uprv_dl_open(const char *a1, int *a2)
{
  void *result;

  if (*a2 > 0)
    return 0;
  result = dlopen(a1, 10);
  if (!result)
    *a2 = 2;
  return result;
}

void *uprv_dl_close(void *__handle, int *a2)
{
  if (*a2 <= 0)
    return (void *)dlclose(__handle);
  return __handle;
}

void *uprv_dlsym_func(void *a1, const char *a2, int *a3)
{
  void *result;

  if (*a3 > 0)
    return 0;
  result = dlsym(a1, a2);
  if (!result)
    *a3 = 2;
  return result;
}

uint64_t uaprv_onCalciumDevice()
{
  os_eligibility_get_domain_answer();
  return 0;
}

void *icu::RuleBasedBreakIterator::getStaticClassID(icu::RuleBasedBreakIterator *this)
{
  return &unk_1EE009350;
}

void *icu::RuleBasedBreakIterator::getDynamicClassID(icu::RuleBasedBreakIterator *this)
{
  return &unk_1EE009350;
}

icu::RuleBasedBreakIterator *icu::RuleBasedBreakIterator::RuleBasedBreakIterator(icu::RuleBasedBreakIterator *a1, uint64_t a2, UErrorCode *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  icu::RuleBasedBreakIterator::RuleBasedBreakIterator(a1, a3);
  v7 = icu::UMemory::operator new((icu::UMemory *)0x90, v6);
  if (v7)
  {
    v8 = sub_18BBEA8F0(v7, a2, (int *)a3);
    *((_QWORD *)a1 + 79) = v8;
    if (*(int *)a3 < 1)
    {
      v9 = *(unsigned int *)(*(_QWORD *)(v8 + 8) + 12);
      if ((_DWORD)v9)
      {
        v10 = uprv_malloc(4 * v9);
        *((_QWORD *)a1 + 96) = v10;
        if (!v10)
          goto LABEL_7;
      }
    }
  }
  else
  {
    *((_QWORD *)a1 + 79) = 0;
    if (*(int *)a3 < 1)
LABEL_7:
      *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return a1;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  icu::RuleBasedBreakIterator::RuleBasedBreakIterator(a1, a3);
  v7 = icu::UMemory::operator new((icu::UMemory *)0x90, v6);
  if (v7)
  {
    v8 = sub_18BBEA8F0(v7, a2, (int *)a3);
    *((_QWORD *)a1 + 79) = v8;
    if (*(int *)a3 < 1)
    {
      v9 = *(unsigned int *)(*(_QWORD *)(v8 + 8) + 12);
      if ((_DWORD)v9)
      {
        v10 = uprv_malloc(4 * v9);
        *((_QWORD *)a1 + 96) = v10;
        if (!v10)
          goto LABEL_7;
      }
    }
  }
  else
  {
    *((_QWORD *)a1 + 79) = 0;
    if (*(int *)a3 < 1)
LABEL_7:
      *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return a1;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  icu::RuleBasedBreakIterator::RuleBasedBreakIterator(a1, a3);
  v7 = icu::UMemory::operator new((icu::UMemory *)0x90, v6);
  if (v7)
  {
    v8 = sub_18BBEAA90(v7, a2, a3);
    *((_QWORD *)a1 + 79) = v8;
    if (*(int *)a3 < 1)
    {
      v9 = *(unsigned int *)(*(_QWORD *)(v8 + 8) + 12);
      if ((_DWORD)v9)
      {
        v10 = uprv_malloc(4 * v9);
        *((_QWORD *)a1 + 96) = v10;
        if (!v10)
          goto LABEL_7;
      }
    }
  }
  else
  {
    *((_QWORD *)a1 + 79) = 0;
    if (*(int *)a3 < 1)
LABEL_7:
      *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return a1;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  icu::RuleBasedBreakIterator::RuleBasedBreakIterator(a1, a3);
  v7 = icu::UMemory::operator new((icu::UMemory *)0x90, v6);
  if (v7)
  {
    v8 = sub_18BBEAA90(v7, a2, a3);
    *((_QWORD *)a1 + 79) = v8;
    if (*(int *)a3 < 1)
    {
      v9 = *(unsigned int *)(*(_QWORD *)(v8 + 8) + 12);
      if ((_DWORD)v9)
      {
        v10 = uprv_malloc(4 * v9);
        *((_QWORD *)a1 + 96) = v10;
        if (!v10)
          goto LABEL_7;
      }
    }
  }
  else
  {
    *((_QWORD *)a1 + 79) = 0;
    if (*(int *)a3 < 1)
LABEL_7:
      *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return a1;
}

icu::RuleBasedBreakIterator *icu::RuleBasedBreakIterator::RuleBasedBreakIterator(icu::RuleBasedBreakIterator *this, UErrorCode *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _OWORD *v6;
  UErrorCode *v7;
  unint64_t v8;
  icu::RuleBasedBreakIterator::DictionaryCache *v9;
  unint64_t v10;
  void **v11;
  icu::RuleBasedBreakIterator::BreakCache *v12;
  icu::RuleBasedBreakIterator::BreakCache *v13;
  UErrorCode v14;
  void *v15;
  int v17;
  void *v18;

  v4 = (_QWORD *)icu::BreakIterator::BreakIterator((uint64_t)this);
  *v4 = off_1E224B080;
  v5 = v4 + 61;
  *(_QWORD *)((char *)v4 + 668) = 0;
  v6 = v4 + 85;
  v4 += 91;
  *(_OWORD *)v5 = xmmword_18BDE01A0;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *(_OWORD *)((char *)v5 + 140) = 0u;
  *v6 = 0u;
  v6[1] = 0u;
  *((_DWORD *)this + 178) = 0;
  *((_QWORD *)this + 90) = v4;
  v18 = &unk_18BE35972;
  icu::UCharCharacterIterator::UCharCharacterIterator(v4, &v18, 0);
  *((_BYTE *)this + 760) = 0;
  *((_QWORD *)this + 96) = 0;
  *((_BYTE *)this + 776) = 0;
  v17 = 0;
  if (a2)
    v7 = a2;
  else
    v7 = (UErrorCode *)&v17;
  utext_openUChars((UText *)v5, 0, 0, v7);
  v9 = (icu::RuleBasedBreakIterator::DictionaryCache *)icu::UMemory::operator new((icu::UMemory *)0x40, v8);
  v11 = (void **)v9;
  if (v9)
  {
    icu::RuleBasedBreakIterator::DictionaryCache::DictionaryCache(v9, this, v7);
  }
  else if (*(int *)v7 <= 0)
  {
    *v7 = U_MEMORY_ALLOCATION_ERROR;
  }
  v12 = (icu::RuleBasedBreakIterator::BreakCache *)icu::UMemory::operator new((icu::UMemory *)0x340, v10);
  if (v12)
  {
    v13 = icu::RuleBasedBreakIterator::BreakCache::BreakCache(v12, this, v7);
    if (*(int *)v7 <= 0)
    {
      *((_QWORD *)this + 86) = v11;
      *((_QWORD *)this + 85) = v13;
      *((_DWORD *)this + 166) = 0;
      *(_OWORD *)((char *)this + 648) = 0u;
      return this;
    }
    *((UErrorCode *)this + 160) = *v7;
    (*(void (**)(icu::RuleBasedBreakIterator::BreakCache *))(*(_QWORD *)v13 + 8))(v13);
    if (!v11)
      return this;
    goto LABEL_15;
  }
  v14 = *v7;
  if (*(int *)v7 <= 0)
  {
    v14 = U_MEMORY_ALLOCATION_ERROR;
    *v7 = U_MEMORY_ALLOCATION_ERROR;
  }
  *((_DWORD *)this + 160) = v14;
  if (v11)
  {
LABEL_15:
    icu::RuleBasedBreakIterator::DictionaryCache::~DictionaryCache(v11);
    icu::UMemory::operator delete(v15);
  }
  return this;
}

icu::RuleBasedBreakIterator *icu::RuleBasedBreakIterator::RuleBasedBreakIterator(icu::RuleBasedBreakIterator *a1, uint64_t a2, char a3, UErrorCode *a4)
{
  icu::RuleBasedBreakIterator *result;

  result = icu::RuleBasedBreakIterator::RuleBasedBreakIterator(a1, a2, a4);
  *((_BYTE *)result + 776) = a3;
  return result;
}

{
  icu::RuleBasedBreakIterator *result;

  result = icu::RuleBasedBreakIterator::RuleBasedBreakIterator(a1, a2, a4);
  *((_BYTE *)result + 776) = a3;
  return result;
}

icu::RuleBasedBreakIterator *icu::RuleBasedBreakIterator::RuleBasedBreakIterator(icu::RuleBasedBreakIterator *this, const unsigned __int8 *a2, unsigned int a3, UErrorCode *a4)
{
  unint64_t v8;
  UErrorCode v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  icu::RuleBasedBreakIterator::RuleBasedBreakIterator(this, a4);
  if (*(int *)a4 <= 0)
  {
    v9 = U_ILLEGAL_ARGUMENT_ERROR;
    if (!a2 || a3 < 0x50)
      goto LABEL_6;
    if (*((_DWORD *)a2 + 2) > a3)
    {
      v9 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_6:
      *a4 = v9;
      return this;
    }
    v11 = icu::UMemory::operator new((icu::UMemory *)0x90, v8);
    if (!v11)
    {
      *((_QWORD *)this + 79) = 0;
      if (*(int *)a4 >= 1)
        return this;
      goto LABEL_14;
    }
    v12 = sub_18BBEA94C(v11, (uint64_t)a2, 0, (int *)a4);
    *((_QWORD *)this + 79) = v12;
    if (*(int *)a4 < 1)
    {
      v13 = *(unsigned int *)(*(_QWORD *)(v12 + 8) + 12);
      if ((_DWORD)v13)
      {
        v14 = uprv_malloc(4 * v13);
        *((_QWORD *)this + 96) = v14;
        if (!v14)
        {
LABEL_14:
          v9 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_6;
        }
      }
    }
  }
  return this;
}

{
  unint64_t v8;
  UErrorCode v9;
  uint64_t *v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  icu::RuleBasedBreakIterator::RuleBasedBreakIterator(this, a4);
  if (*(int *)a4 <= 0)
  {
    v9 = U_ILLEGAL_ARGUMENT_ERROR;
    if (!a2 || a3 < 0x50)
      goto LABEL_6;
    v10 = (uint64_t *)*((unsigned int *)a2 + 2);
    if (v10 > a3)
    {
      v9 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_6:
      *a4 = v9;
      return this;
    }
    v12 = icu::UMemory::operator new(v10, (icu::UMemory *)0x90, v8);
    if (!v12)
    {
      *((_QWORD *)this + 79) = 0;
      if (*(int *)a4 >= 1)
        return this;
      goto LABEL_14;
    }
    v13 = sub_18BBEA94C((uint64_t)v12, (uint64_t)a2, 0, (int *)a4);
    *((_QWORD *)this + 79) = v13;
    if (*(int *)a4 < 1)
    {
      v14 = *(unsigned int *)(*(_QWORD *)(v13 + 8) + 12);
      if ((_DWORD)v14)
      {
        v15 = uprv_malloc(4 * v14);
        *((_QWORD *)this + 96) = v15;
        if (!v15)
        {
LABEL_14:
          v9 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_6;
        }
      }
    }
  }
  return this;
}

icu::RuleBasedBreakIterator *icu::RuleBasedBreakIterator::RuleBasedBreakIterator(icu::RuleBasedBreakIterator *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  icu::RuleBasedBreakIterator *v8;
  icu::RuleBasedBreakIterator *v9;

  icu::RuleBasedBreakIterator::RuleBasedBreakIterator(this, a4);
  if (*(int *)a4 <= 0)
  {
    v8 = sub_18BBEBC04(a2, (uint64_t)a3, a4);
    if (*(int *)a4 <= 0)
    {
      v9 = v8;
      icu::RuleBasedBreakIterator::operator=((uint64_t)this, (uint64_t)v8);
      (*(void (**)(icu::RuleBasedBreakIterator *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  return this;
}

{
  icu::RuleBasedBreakIterator *v8;
  icu::RuleBasedBreakIterator *v9;

  icu::RuleBasedBreakIterator::RuleBasedBreakIterator(this, a4);
  if (*(int *)a4 <= 0)
  {
    v8 = sub_18BBEBC04(a2, (uint64_t)a3, a4);
    if (*(int *)a4 <= 0)
    {
      v9 = v8;
      icu::RuleBasedBreakIterator::operator=((uint64_t)this, (uint64_t)v8);
      (*(void (**)(icu::RuleBasedBreakIterator *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  return this;
}

uint64_t icu::RuleBasedBreakIterator::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  UErrorCode status;

  if (a1 != a2)
  {
    icu::BreakIterator::operator=((char *)a1, (const char *)a2);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a1 + 696);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      *(_QWORD *)(a1 + 696) = 0;
    }
    status = U_ZERO_ERROR;
    utext_clone((UText *)(a1 + 488), (const UText *)(a2 + 488), 0, 1, &status);
    v5 = *(_QWORD *)(a1 + 720);
    v6 = a1 + 728;
    if (v5 != a1 + 728 && v5 != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 720) = v6;
    v8 = *(_QWORD *)(a2 + 720);
    if (v8 && v8 != a2 + 728)
      *(_QWORD *)(a1 + 720) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
    icu::UCharCharacterIterator::operator=(a1 + 728, a2 + 728);
    if (!*(_QWORD *)(a1 + 720))
      *(_QWORD *)(a1 + 720) = v6;
    v9 = *(_QWORD *)(a1 + 632);
    if (v9)
    {
      sub_18BBEAB40(v9);
      *(_QWORD *)(a1 + 632) = 0;
    }
    v10 = *(_QWORD *)(a2 + 632);
    if (v10)
      *(_QWORD *)(a1 + 632) = sub_18BBEAB7C(v10);
    uprv_free(*(void **)(a1 + 768));
    *(_QWORD *)(a1 + 768) = 0;
    v11 = *(_QWORD *)(a1 + 632);
    if (v11)
    {
      v12 = *(unsigned int *)(*(_QWORD *)(v11 + 8) + 12);
      if ((_DWORD)v12)
        *(_QWORD *)(a1 + 768) = uprv_malloc(4 * v12);
    }
    v13 = *(_QWORD *)(a1 + 648);
    if (v13)
      MEMORY[0x18D77FE74](v13, 0x1000C80BDFB0063);
    *(_QWORD *)(a1 + 648) = 0;
    v14 = *(_QWORD *)(a1 + 656);
    if (v14)
      MEMORY[0x18D77FE74](v14, 0x1000C80789AEA99);
    *(_QWORD *)(a1 + 656) = 0;
    v15 = *(_DWORD *)(a2 + 664);
    *(_DWORD *)(a1 + 664) = v15;
    if (v15)
    {
      *(_QWORD *)(a1 + 656) = operator new[]();
      if (*(int *)(a1 + 664) >= 1)
      {
        v16 = 0;
        do
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + 8 * v16) = *(_QWORD *)(*(_QWORD *)(a2 + 656) + 8 * v16);
          ++v16;
        }
        while (v16 < *(int *)(a1 + 664));
      }
    }
    v17 = *(_DWORD *)(a2 + 668);
    *(_DWORD *)(a1 + 668) = v17;
    v18 = *(_DWORD *)(a2 + 672);
    *(_DWORD *)(a1 + 672) = v18;
    *(_BYTE *)(a1 + 760) = *(_BYTE *)(a2 + 760);
    icu::RuleBasedBreakIterator::BreakCache::reset(*(_QWORD *)(a1 + 680), v17, v18);
    icu::RuleBasedBreakIterator::DictionaryCache::reset(*(icu::RuleBasedBreakIterator::DictionaryCache **)(a1 + 688));
  }
  return a1;
}

icu::RuleBasedBreakIterator *icu::RuleBasedBreakIterator::RuleBasedBreakIterator(icu::RuleBasedBreakIterator *this)
{
  return icu::RuleBasedBreakIterator::RuleBasedBreakIterator(this, 0);
}

{
  return icu::RuleBasedBreakIterator::RuleBasedBreakIterator(this, 0);
}

uint64_t icu::RuleBasedBreakIterator::RuleBasedBreakIterator(icu::RuleBasedBreakIterator *this, const icu::RuleBasedBreakIterator *a2)
{
  icu::RuleBasedBreakIterator *v3;

  v3 = icu::RuleBasedBreakIterator::RuleBasedBreakIterator(this, 0);
  return icu::RuleBasedBreakIterator::operator=((uint64_t)v3, (uint64_t)a2);
}

{
  icu::RuleBasedBreakIterator *v3;

  v3 = icu::RuleBasedBreakIterator::RuleBasedBreakIterator(this, 0);
  return icu::RuleBasedBreakIterator::operator=((uint64_t)v3, (uint64_t)a2);
}

void icu::RuleBasedBreakIterator::~RuleBasedBreakIterator(icu::RuleBasedBreakIterator *this)
{
  icu::RuleBasedBreakIterator *v2;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = off_1E224B080;
  v2 = (icu::RuleBasedBreakIterator *)*((_QWORD *)this + 90);
  if (v2 != (icu::RuleBasedBreakIterator *)((char *)this + 728) && v2 != 0)
    (*(void (**)(icu::RuleBasedBreakIterator *))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 90) = 0;
  utext_close((UText *)((char *)this + 488));
  v4 = *((_QWORD *)this + 79);
  if (v4)
  {
    sub_18BBEAB40(v4);
    *((_QWORD *)this + 79) = 0;
  }
  v5 = *((_QWORD *)this + 85);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 85) = 0;
  v6 = (void **)*((_QWORD *)this + 86);
  if (v6)
  {
    icu::RuleBasedBreakIterator::DictionaryCache::~DictionaryCache(v6);
    icu::UMemory::operator delete(v7);
  }
  *((_QWORD *)this + 86) = 0;
  v8 = *((_QWORD *)this + 87);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 87) = 0;
  v9 = *((_QWORD *)this + 88);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 88) = 0;
  uprv_free(*((void **)this + 96));
  *((_QWORD *)this + 96) = 0;
  v10 = *((_QWORD *)this + 81);
  if (v10)
    MEMORY[0x18D77FE74](v10, 0x1000C80BDFB0063);
  *((_QWORD *)this + 81) = 0;
  v11 = *((_QWORD *)this + 82);
  if (v11)
    MEMORY[0x18D77FE74](v11, 0x1000C80789AEA99);
  *((_QWORD *)this + 82) = 0;
  *((_DWORD *)this + 166) = 0;
  icu::UCharCharacterIterator::~UCharCharacterIterator((icu::RuleBasedBreakIterator *)((char *)this + 728));
  icu::BreakIterator::~BreakIterator(this);
}

{
  void *v1;

  icu::RuleBasedBreakIterator::~RuleBasedBreakIterator(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::RuleBasedBreakIterator::initLatin1Cat(icu::RuleBasedBreakIterator *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = 0;
  *((_QWORD *)this + 81) = operator new[]();
  do
  {
    result = ucptrie_get(*(_QWORD *)(*((_QWORD *)this + 79) + 48), v2);
    *(_WORD *)(*((_QWORD *)this + 81) + 2 * v2++) = result;
  }
  while (v2 != 256);
  return result;
}

void icu::RuleBasedBreakIterator::setCategoryOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD **v6;
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  int *v11;
  UChar32 v13;
  int Delimiter;
  UChar32 v15;
  int v17;
  char *v19;
  int32_t IntPropertyValue;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  int v26;
  _OWORD v27[2];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 656);
  if (v4)
    MEMORY[0x18D77FE74](v4, 0x1000C80789AEA99);
  *(_QWORD *)(a1 + 656) = 0;
  *(_DWORD *)(a1 + 664) = 0;
  if (strcmp((const char *)(a2 + 8), "da"))
  {
    v26 = 0;
    v5 = ulocdata_open(*(char **)(a2 + 40), &v26);
    if (v26 <= 0)
    {
      v6 = (_QWORD **)v5;
      v7 = 0;
      v8 = 0;
      v9 = 1;
      memset(v27, 0, sizeof(v27));
      do
      {
        v10 = v9;
        v25 = 0;
        v24 = 0;
        v26 = 0;
        v11 = &dword_18BDE01B0[2 * v7];
        if (ulocdata_getDelimiter((uint64_t)v6, *v11, (UChar *)&v24, 3, &v26) == 1 && v26 < 1)
          v13 = (unsigned __int16)v24;
        else
          v13 = 0;
        v26 = 0;
        Delimiter = ulocdata_getDelimiter((uint64_t)v6, v11[1], (UChar *)&v24, 3, &v26);
        v15 = 0;
        if (v26 <= 0 && Delimiter == 1)
        {
          v17 = (unsigned __int16)v24;
          if ((unsigned __int16)v24 == 8220)
            v17 = 8221;
          if (v17 == 8216)
            v15 = 0;
          else
            v15 = v17;
        }
        if (v13 != v15)
        {
          if (u_getIntPropertyValue(v13, UCHAR_LINE_BREAK) == 23 && v13 != 8217)
          {
            v19 = (char *)v27 + 8 * v8;
            *(_DWORD *)v19 = v13;
            ++v8;
            *((_WORD *)v19 + 2) = ucptrie_get(*(_QWORD *)(*(_QWORD *)(a1 + 632) + 48), 0x7Bu);
          }
          IntPropertyValue = u_getIntPropertyValue(v15, UCHAR_LINE_BREAK);
          if (v15 != 8217 && IntPropertyValue == 23)
          {
            v21 = (char *)v27 + 8 * v8;
            *(_DWORD *)v21 = v15;
            ++v8;
            *((_WORD *)v21 + 2) = ucptrie_get(*(_QWORD *)(*(_QWORD *)(a1 + 632) + 48), 0x7Du);
          }
        }
        v9 = 0;
        v7 = 1;
      }
      while ((v10 & 1) != 0);
      ulocdata_close(v6);
      if (v8 > 0)
      {
        *(_DWORD *)(a1 + 664) = v8;
        v22 = operator new[]();
        v23 = 0;
        *(_QWORD *)(a1 + 656) = v22;
        do
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v23) = *(_QWORD *)((char *)v27 + v23);
          v23 += 8;
        }
        while (8 * v8 != v23);
      }
    }
  }
}

icu::RuleBasedBreakIterator *icu::RuleBasedBreakIterator::clone@<X0>(icu::RuleBasedBreakIterator *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::RuleBasedBreakIterator *result;
  icu::RuleBasedBreakIterator *v5;

  result = (icu::RuleBasedBreakIterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x310, a2);
  if (result)
  {
    v5 = icu::RuleBasedBreakIterator::RuleBasedBreakIterator(result, 0);
    return (icu::RuleBasedBreakIterator *)icu::RuleBasedBreakIterator::operator=((uint64_t)v5, (uint64_t)this);
  }
  return result;
}

uint64_t icu::RuleBasedBreakIterator::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int **v5;
  unsigned int **v6;

  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if ((_DWORD)result)
  {
    if (a1 == a2)
      return 1;
    if (*(_DWORD *)(a2 + 8) == *(_DWORD *)(a1 + 8))
    {
      result = utext_equals((const UText *)(a1 + 488), (const UText *)(a2 + 488));
      if (!(_DWORD)result)
        return result;
      if (*(_DWORD *)(a1 + 668) == *(_DWORD *)(a2 + 668)
        && *(_DWORD *)(a1 + 672) == *(_DWORD *)(a2 + 672)
        && *(unsigned __int8 *)(a1 + 760) == *(unsigned __int8 *)(a2 + 760))
      {
        v5 = *(unsigned int ***)(a2 + 632);
        v6 = *(unsigned int ***)(a1 + 632);
        if (v5 == v6 || v5 && v6 && sub_18BBEAAE8(v5, v6))
          return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t icu::RuleBasedBreakIterator::hashCode(icu::RuleBasedBreakIterator *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 79);
  if (result)
    return sub_18BBEAB34(result);
  return result;
}

uint64_t icu::RuleBasedBreakIterator::setText(uint64_t this, UText *a2, UErrorCode *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v8;

  if (*(int *)a3 <= 0)
  {
    v5 = this;
    icu::RuleBasedBreakIterator::BreakCache::reset(*(_QWORD *)(this + 680), 0, 0);
    icu::RuleBasedBreakIterator::DictionaryCache::reset(*(icu::RuleBasedBreakIterator::DictionaryCache **)(v5 + 688));
    utext_clone((UText *)(v5 + 488), a2, 0, 1, a3);
    v8 = &unk_18BE35972;
    icu::UCharCharacterIterator::setText(v5 + 728, (uint64_t *)&v8, 0);
    v6 = *(_QWORD *)(v5 + 720);
    if (v6 != v5 + 728 && v6 != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *(_QWORD *)(v5 + 720) = v5 + 728;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
  }
  return this;
}

UText *icu::RuleBasedBreakIterator::getUText(icu::RuleBasedBreakIterator *this, UText *dest, UErrorCode *status)
{
  return utext_clone(dest, (const UText *)((char *)this + 488), 0, 1, status);
}

uint64_t icu::RuleBasedBreakIterator::getText(icu::RuleBasedBreakIterator *this)
{
  return *((_QWORD *)this + 90);
}

uint64_t icu::RuleBasedBreakIterator::adoptText(icu::RuleBasedBreakIterator *this, icu::CharacterIterator *a2)
{
  icu::RuleBasedBreakIterator *v4;
  __n128 v6;
  UErrorCode status;

  v4 = (icu::RuleBasedBreakIterator *)*((_QWORD *)this + 90);
  if (v4 != (icu::RuleBasedBreakIterator *)((char *)this + 728) && v4 != 0)
    (*(void (**)(icu::RuleBasedBreakIterator *))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 90) = a2;
  status = U_ZERO_ERROR;
  icu::RuleBasedBreakIterator::BreakCache::reset(*((_QWORD *)this + 85), 0, 0);
  icu::RuleBasedBreakIterator::DictionaryCache::reset(*((icu::RuleBasedBreakIterator::DictionaryCache **)this + 86));
  if (a2 && !*((_DWORD *)a2 + 4))
    v6.n128_f64[0] = utext_openCharacterIterator((UText *)((char *)this + 488), (int *)a2, &status);
  else
    utext_openUChars((UText *)((char *)this + 488), 0, 0, &status);
  return (*(uint64_t (**)(icu::RuleBasedBreakIterator *, __n128))(*(_QWORD *)this + 80))(this, v6);
}

uint64_t icu::RuleBasedBreakIterator::setText(icu::RuleBasedBreakIterator *this, const icu::UnicodeString *a2)
{
  char *v4;
  unsigned int v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  char *v10;
  char *v12;
  UErrorCode status;

  status = U_ZERO_ERROR;
  icu::RuleBasedBreakIterator::BreakCache::reset(*((_QWORD *)this + 85), 0, 0);
  icu::RuleBasedBreakIterator::DictionaryCache::reset(*((icu::RuleBasedBreakIterator::DictionaryCache **)this + 86));
  utext_openConstUnicodeString((UText *)((char *)this + 488), (uint64_t)a2, &status);
  v4 = (char *)this + 728;
  v5 = *((unsigned __int16 *)a2 + 4);
  if ((v5 & 0x11) != 0)
  {
    v6 = 0;
  }
  else if ((v5 & 2) != 0)
  {
    v6 = (char *)a2 + 10;
  }
  else
  {
    v6 = (char *)*((_QWORD *)a2 + 3);
  }
  v7 = (__int16)v5;
  v12 = v6;
  v8 = v5 >> 5;
  if (v7 >= 0)
    v9 = v8;
  else
    v9 = *((_DWORD *)a2 + 3);
  icu::UCharCharacterIterator::setText((uint64_t)this + 728, (uint64_t *)&v12, v9);
  v10 = (char *)*((_QWORD *)this + 90);
  if (v10 != v4 && v10)
    (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 90) = v4;
  return (*(uint64_t (**)(icu::RuleBasedBreakIterator *))(*(_QWORD *)this + 80))(this);
}

icu::RuleBasedBreakIterator *icu::RuleBasedBreakIterator::refreshInputText(icu::RuleBasedBreakIterator *this, UText *a2, UErrorCode *a3)
{
  int64_t NativeIndex;

  if (*(int *)a3 <= 0)
  {
    if (!a2
      || (NativeIndex = utext_getNativeIndex((const UText *)((char *)this + 488)),
          utext_clone((UText *)((char *)this + 488), a2, 0, 1, a3),
          *(int *)a3 <= 0)
      && (utext_setNativeIndex((UText *)((char *)this + 488), NativeIndex),
          utext_getNativeIndex((const UText *)((char *)this + 488)) != NativeIndex))
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return this;
}

uint64_t icu::RuleBasedBreakIterator::first(icu::RuleBasedBreakIterator ***this)
{
  UErrorCode v3;

  v3 = U_ZERO_ERROR;
  if (!icu::RuleBasedBreakIterator::BreakCache::seek((icu::RuleBasedBreakIterator::BreakCache *)this[85], 0))icu::RuleBasedBreakIterator::BreakCache::populateNear(this[85], 0, &v3);
  icu::RuleBasedBreakIterator::BreakCache::current((icu::RuleBasedBreakIterator::BreakCache *)this[85]);
  return 0;
}

int64_t icu::RuleBasedBreakIterator::last(icu::RuleBasedBreakIterator *this)
{
  int64_t v2;

  v2 = utext_nativeLength((UText *)((char *)this + 488));
  (*(void (**)(icu::RuleBasedBreakIterator *, int64_t))(*(_QWORD *)this + 136))(this, v2);
  return v2;
}

uint64_t icu::RuleBasedBreakIterator::next(icu::RuleBasedBreakIterator *this, int a2)
{
  unsigned int v2;
  uint64_t result;
  int v5;

  v2 = a2;
  if (a2 < 1)
  {
    if (a2 < 0)
    {
      v5 = a2 + 1;
      do
      {
        result = (*(uint64_t (**)(icu::RuleBasedBreakIterator *))(*(_QWORD *)this + 96))(this);
        if (!v5)
          break;
        ++v5;
      }
      while ((_DWORD)result != -1);
    }
    else
    {
      return (*(uint64_t (**)(icu::RuleBasedBreakIterator *))(*(_QWORD *)this + 112))(this);
    }
  }
  else
  {
    do
    {
      result = (*(uint64_t (**)(icu::RuleBasedBreakIterator *))(*(_QWORD *)this + 104))(this);
      if (v2 < 2)
        break;
      --v2;
    }
    while ((_DWORD)result != -1);
  }
  return result;
}

uint64_t icu::RuleBasedBreakIterator::next(icu::RuleBasedBreakIterator *this)
{
  sub_18BBE450C(*((_QWORD *)this + 85));
  if (*((_BYTE *)this + 760))
    return 0xFFFFFFFFLL;
  else
    return *((unsigned int *)this + 167);
}

uint64_t sub_18BBE450C(uint64_t result)
{
  int v1;
  unsigned int v2;
  int v3;
  uint64_t v4;

  v1 = *(_DWORD *)(result + 28);
  if (v1 == *(_DWORD *)(result + 20))
    return icu::RuleBasedBreakIterator::BreakCache::nextOL((icu::RuleBasedBreakIterator::BreakCache *)result);
  v2 = ((_BYTE)v1 + 1) & 0x7F;
  v3 = *(_DWORD *)(result + 4 * v2 + 32);
  v4 = *(_QWORD *)(result + 8);
  *(_DWORD *)(v4 + 668) = v3;
  *(_DWORD *)(result + 24) = v3;
  *(_DWORD *)(result + 28) = v2;
  *(_DWORD *)(v4 + 672) = *(unsigned __int16 *)(result + 2 * v2 + 544);
  return result;
}

uint64_t icu::RuleBasedBreakIterator::previous(icu::RuleBasedBreakIterator *this)
{
  UErrorCode v3;

  v3 = U_ZERO_ERROR;
  icu::RuleBasedBreakIterator::BreakCache::previous(*((_DWORD **)this + 85), &v3);
  if (*((_BYTE *)this + 760))
    return 0xFFFFFFFFLL;
  else
    return *((unsigned int *)this + 167);
}

uint64_t icu::RuleBasedBreakIterator::following(icu::RuleBasedBreakIterator::BreakCache **this, int64_t nativeIndex)
{
  int v3;
  UErrorCode v5;

  if ((nativeIndex & 0x80000000) != 0)
    return (*((uint64_t (**)(icu::RuleBasedBreakIterator::BreakCache **))*this + 10))(this);
  utext_setNativeIndex((UText *)(this + 61), nativeIndex);
  v3 = utext_getNativeIndex((const UText *)(this + 61));
  v5 = U_ZERO_ERROR;
  icu::RuleBasedBreakIterator::BreakCache::following(this[85], v3, &v5);
  if (*((_BYTE *)this + 760))
    return 0xFFFFFFFFLL;
  else
    return *((unsigned int *)this + 167);
}

uint64_t icu::RuleBasedBreakIterator::preceding(icu::RuleBasedBreakIterator::BreakCache **this, int a2)
{
  UText *v4;
  int NativeIndex;
  UErrorCode v7;

  v4 = (UText *)(this + 61);
  if (utext_nativeLength((UText *)(this + 61)) < a2)
    return (*((uint64_t (**)(icu::RuleBasedBreakIterator::BreakCache **))*this + 11))(this);
  utext_setNativeIndex(v4, a2);
  NativeIndex = utext_getNativeIndex(v4);
  v7 = U_ZERO_ERROR;
  icu::RuleBasedBreakIterator::BreakCache::preceding(this[85], NativeIndex, &v7);
  if (*((_BYTE *)this + 760))
    return 0xFFFFFFFFLL;
  else
    return *((unsigned int *)this + 167);
}

uint64_t icu::RuleBasedBreakIterator::isBoundary(icu::RuleBasedBreakIterator *this, int64_t nativeIndex)
{
  int v3;
  int64_t v4;
  int v5;
  int v6;
  int v7;
  UErrorCode v9;

  if ((nativeIndex & 0x80000000) != 0)
  {
    (*(void (**)(icu::RuleBasedBreakIterator *))(*(_QWORD *)this + 80))(this);
  }
  else
  {
    v3 = nativeIndex;
    v4 = nativeIndex;
    utext_setNativeIndex((UText *)((char *)this + 488), nativeIndex);
    v5 = utext_getNativeIndex((const UText *)((char *)this + 488));
    v9 = U_ZERO_ERROR;
    if (icu::RuleBasedBreakIterator::BreakCache::seek(*((icu::RuleBasedBreakIterator::BreakCache **)this + 85), v5)|| icu::RuleBasedBreakIterator::BreakCache::populateNear(*((icu::RuleBasedBreakIterator ***)this + 85), v5, &v9))
    {
      v6 = icu::RuleBasedBreakIterator::BreakCache::current(*((icu::RuleBasedBreakIterator::BreakCache **)this + 85));
      v7 = v6;
      if (v5 < v3 && v6 == v3 && utext_char32At((UText *)((char *)this + 488), v4) == -1)
        return 0;
      if (v7 == v3)
        return 1;
    }
    (*(void (**)(icu::RuleBasedBreakIterator *))(*(_QWORD *)this + 104))(this);
  }
  return 0;
}

uint64_t icu::RuleBasedBreakIterator::current(icu::RuleBasedBreakIterator *this)
{
  return *((unsigned int *)this + 167);
}

int64_t icu::RuleBasedBreakIterator::handleNext(icu::RuleBasedBreakIterator *this)
{
  uint64_t v2;
  uint64_t v3;
  int ValueWidth;
  int64_t v5;
  int64_t v6;
  UChar32 v7;
  UChar32 v8;
  int64_t v9;
  UChar32 v10;
  UChar32 v11;
  int64_t v12;
  UChar32 v13;
  UChar32 v14;
  int64_t v15;
  UChar32 v16;
  UChar32 v17;
  int v19;

  v2 = *((_QWORD *)this + 79);
  v3 = *(_QWORD *)(v2 + 8);
  ValueWidth = ucptrie_getValueWidth(*(_QWORD *)(v2 + 48));
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if (ValueWidth == 2)
    {
      v9 = sub_18BBE4B10((uint64_t)this);
      do
      {
        v6 = v9;
        if (!*((_DWORD *)this + 2))
          break;
        v10 = utext_char32At((UText *)((char *)this + 488), (int)v9 - 1);
        v11 = utext_char32At((UText *)((char *)this + 488), (int)v6);
        if (v11 == -1 || v10 == -1)
          break;
        if (*((_DWORD *)this + 2) == 1)
        {
          v19 = 0;
          if (uscript_getScript(v11, &v19) != 18 || uscript_getScript(v10, &v19) != 18)
            return v6;
        }
        else if (!u_isalpha(v11) || !u_isalpha(v10))
        {
          return v6;
        }
        v9 = sub_18BBE4B10((uint64_t)this);
      }
      while ((int)v9 > (int)v6);
    }
    else
    {
      v15 = sub_18BBE4E90((uint64_t)this);
      do
      {
        v6 = v15;
        if (!*((_DWORD *)this + 2))
          break;
        v16 = utext_char32At((UText *)((char *)this + 488), (int)v15 - 1);
        v17 = utext_char32At((UText *)((char *)this + 488), (int)v6);
        if (v17 == -1 || v16 == -1)
          break;
        if (*((_DWORD *)this + 2) == 1)
        {
          v19 = 0;
          if (uscript_getScript(v17, &v19) != 18 || uscript_getScript(v16, &v19) != 18)
            return v6;
        }
        else if (!u_isalpha(v17) || !u_isalpha(v16))
        {
          return v6;
        }
        v15 = sub_18BBE4E90((uint64_t)this);
      }
      while ((int)v15 > (int)v6);
    }
  }
  else if (ValueWidth == 2)
  {
    v5 = sub_18BBE5210((uint64_t)this);
    do
    {
      v6 = v5;
      if (!*((_DWORD *)this + 2))
        break;
      v7 = utext_char32At((UText *)((char *)this + 488), (int)v5 - 1);
      v8 = utext_char32At((UText *)((char *)this + 488), (int)v6);
      if (v8 == -1 || v7 == -1)
        break;
      if (*((_DWORD *)this + 2) == 1)
      {
        v19 = 0;
        if (uscript_getScript(v8, &v19) != 18 || uscript_getScript(v7, &v19) != 18)
          return v6;
      }
      else if (!u_isalpha(v8) || !u_isalpha(v7))
      {
        return v6;
      }
      v5 = sub_18BBE5210((uint64_t)this);
    }
    while ((int)v5 > (int)v6);
  }
  else
  {
    v12 = sub_18BBE5590((uint64_t)this);
    do
    {
      v6 = v12;
      if (!*((_DWORD *)this + 2))
        break;
      v13 = utext_char32At((UText *)((char *)this + 488), (int)v12 - 1);
      v14 = utext_char32At((UText *)((char *)this + 488), (int)v6);
      if (v14 == -1 || v13 == -1)
        break;
      if (*((_DWORD *)this + 2) == 1)
      {
        v19 = 0;
        if (uscript_getScript(v14, &v19) != 18 || uscript_getScript(v13, &v19) != 18)
          return v6;
      }
      else if (!u_isalpha(v14) || !u_isalpha(v13))
      {
        return v6;
      }
      v12 = sub_18BBE5590((uint64_t)this);
    }
    while ((int)v12 > (int)v6);
  }
  return v6;
}

int64_t icu::RuleBasedBreakIterator::handleNextInternal(icu::RuleBasedBreakIterator *this)
{
  uint64_t v2;
  uint64_t v3;
  int ValueWidth;

  v2 = *((_QWORD *)this + 79);
  v3 = *(_QWORD *)(v2 + 8);
  ValueWidth = ucptrie_getValueWidth(*(_QWORD *)(v2 + 48));
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if (ValueWidth == 2)
      return sub_18BBE4B10((uint64_t)this);
    else
      return sub_18BBE4E90((uint64_t)this);
  }
  else if (ValueWidth == 2)
  {
    return sub_18BBE5210((uint64_t)this);
  }
  else
  {
    return sub_18BBE5590((uint64_t)this);
  }
}

int64_t sub_18BBE4B10(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t result;
  int v30;
  int64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  UText *ut;

  v2 = *(unsigned int **)(*(_QWORD *)(a1 + 632) + 8);
  v3 = v2[1];
  v34 = v2[2];
  *(_DWORD *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 712) = 0;
  v4 = *(unsigned int *)(a1 + 668);
  ut = (UText *)(a1 + 488);
  v5 = (int)v4 - *(_QWORD *)(a1 + 520);
  if (v5 < 0 || v5 >= *(int *)(a1 + 516) || *(unsigned __int16 *)(*(_QWORD *)(a1 + 536) + 2 * v5) >> 10 > 0x36u)
  {
    utext_setNativeIndex(ut, (int)v4);
    LODWORD(v5) = *(_DWORD *)(a1 + 528);
  }
  else
  {
    *(_DWORD *)(a1 + 528) = v5;
  }
  if ((int)v5 >= *(_DWORD *)(a1 + 532)
    || (v6 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 536) + 2 * (int)v5), v6 >> 11 > 0x1A))
  {
    v6 = utext_next32(ut);
    if (v6 == -1)
    {
      *(_BYTE *)(a1 + 760) = 1;
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 528) = v5 + 1;
  }
  v30 = v4;
  v31 = (int)v4;
  v7 = v2 + 5;
  v8 = v2[4] & 2;
  v9 = ((v2[4] & 2) >> 1) ^ 1;
  v10 = v3;
  v35 = v4;
LABEL_11:
  v33 = v6 >> 6;
  v32 = v6 & 0x3F;
  v11 = (int)v6;
  while (1)
  {
    if ((_DWORD)v11 == -1)
    {
      if (v9 == 2)
        break;
      v13 = 0;
      v9 = 2;
      v8 = 1;
    }
    else if (v9 == 1)
    {
      if ((int)v11 <= 255 && (v12 = *(_QWORD *)(a1 + 648)) != 0)
      {
        v8 = *(unsigned __int16 *)(v12 + 2 * v11);
      }
      else
      {
        v14 = *(unsigned int *)(a1 + 664);
        if ((int)v14 < 1)
        {
LABEL_24:
          v16 = *(_QWORD *)(*(_QWORD *)(a1 + 632) + 48);
          v17 = *(_QWORD *)(v16 + 8);
          if (WORD1(v11))
          {
            if (WORD1(v11) > 0x10u)
            {
              v18 = *(_DWORD *)(v16 + 20) - 1;
            }
            else if (*(_DWORD *)(v16 + 24) <= (int)v11)
            {
              v18 = *(_DWORD *)(v16 + 20) - 2;
            }
            else
            {
              v18 = ucptrie_internalSmallIndex((uint64_t *)v16, v11);
            }
          }
          else
          {
            v18 = v32 + *(unsigned __int16 *)(*(_QWORD *)v16 + 2 * v33);
          }
          v8 = *(unsigned __int8 *)(v17 + v18);
          v19 = *(_DWORD *)(a1 + 712);
          if (v34 <= v8)
            ++v19;
          *(_DWORD *)(a1 + 712) = v19;
        }
        else
        {
          v15 = (unsigned __int16 *)(*(_QWORD *)(a1 + 656) + 4);
          while ((_DWORD)v11 != *((_DWORD *)v15 - 1))
          {
            v15 += 4;
            if (!--v14)
              goto LABEL_24;
          }
          v8 = *v15;
        }
      }
      v13 = 1;
      v9 = 1;
    }
    else
    {
      v13 = 0;
    }
    v20 = *((unsigned __int8 *)v7 + v10 + v8 + 3);
    v10 = (v3 * v20);
    v21 = (char *)v7 + v10;
    v22 = *((unsigned __int8 *)v7 + v10);
    if (*((_BYTE *)v7 + v10))
    {
      if ((_DWORD)v22 == 1)
      {
        if (v9)
        {
          v23 = *(unsigned int *)(a1 + 528);
          if ((int)v23 <= *(_DWORD *)(a1 + 516))
            v35 = *(_QWORD *)(a1 + 520) + v23;
          else
            v35 = (*(uint64_t (**)(UText *))(*(_QWORD *)(a1 + 544) + 64))(ut);
        }
        *(_DWORD *)(a1 + 672) = v21[2];
      }
      else
      {
        v24 = *(unsigned int *)(*(_QWORD *)(a1 + 768) + 4 * v22);
        if ((v24 & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 672) = v21[2];
          *(_DWORD *)(a1 + 668) = v24;
          return v24;
        }
      }
    }
    v25 = v21[1];
    if (v25 >= 2)
    {
      v26 = *(unsigned int *)(a1 + 528);
      if ((int)v26 <= *(_DWORD *)(a1 + 516))
        v27 = *(_QWORD *)(a1 + 520) + v26;
      else
        LODWORD(v27) = (*(uint64_t (**)(UText *))(*(_QWORD *)(a1 + 544) + 64))(ut);
      *(_DWORD *)(*(_QWORD *)(a1 + 768) + 4 * v25) = v27;
    }
    if (!v20)
      break;
    if (v13)
    {
      v28 = *(int *)(a1 + 528);
      if ((int)v28 >= *(_DWORD *)(a1 + 532)
        || (v6 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 536) + 2 * v28), v6 >> 11 > 0x1A))
      {
        v6 = utext_next32(ut);
        v9 = 1;
      }
      else
      {
        *(_DWORD *)(a1 + 528) = v28 + 1;
        v9 = 1;
      }
      goto LABEL_11;
    }
    if (v9 <= 1)
      v9 = 1;
  }
  result = v35;
  if ((_DWORD)v35 == v30)
  {
    utext_setNativeIndex(ut, v31);
    utext_next32(ut);
    result = utext_getNativeIndex(ut);
    *(_DWORD *)(a1 + 672) = 0;
  }
  *(_DWORD *)(a1 + 668) = result;
  return result;
}

int64_t sub_18BBE4E90(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t result;
  int v30;
  int64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  UText *ut;

  v2 = *(unsigned int **)(*(_QWORD *)(a1 + 632) + 8);
  v3 = v2[1];
  v34 = v2[2];
  *(_DWORD *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 712) = 0;
  v4 = *(unsigned int *)(a1 + 668);
  ut = (UText *)(a1 + 488);
  v5 = (int)v4 - *(_QWORD *)(a1 + 520);
  if (v5 < 0 || v5 >= *(int *)(a1 + 516) || *(unsigned __int16 *)(*(_QWORD *)(a1 + 536) + 2 * v5) >> 10 > 0x36u)
  {
    utext_setNativeIndex(ut, (int)v4);
    LODWORD(v5) = *(_DWORD *)(a1 + 528);
  }
  else
  {
    *(_DWORD *)(a1 + 528) = v5;
  }
  if ((int)v5 >= *(_DWORD *)(a1 + 532)
    || (v6 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 536) + 2 * (int)v5), v6 >> 11 > 0x1A))
  {
    v6 = utext_next32(ut);
    if (v6 == -1)
    {
      *(_BYTE *)(a1 + 760) = 1;
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 528) = v5 + 1;
  }
  v30 = v4;
  v31 = (int)v4;
  v7 = v2 + 5;
  v8 = v2[4] & 2;
  v9 = ((v2[4] & 2) >> 1) ^ 1;
  v10 = v3;
  v35 = v4;
LABEL_11:
  v33 = v6 >> 6;
  v32 = v6 & 0x3F;
  v11 = (int)v6;
  while (1)
  {
    if ((_DWORD)v11 == -1)
    {
      if (v9 == 2)
        break;
      v13 = 0;
      v9 = 2;
      v8 = 1;
    }
    else if (v9 == 1)
    {
      if ((int)v11 <= 255 && (v12 = *(_QWORD *)(a1 + 648)) != 0)
      {
        v8 = *(unsigned __int16 *)(v12 + 2 * v11);
      }
      else
      {
        v14 = *(unsigned int *)(a1 + 664);
        if ((int)v14 < 1)
        {
LABEL_24:
          v16 = *(_QWORD *)(*(_QWORD *)(a1 + 632) + 48);
          v17 = *(_QWORD *)(v16 + 8);
          if (WORD1(v11))
          {
            if (WORD1(v11) > 0x10u)
            {
              v18 = *(_DWORD *)(v16 + 20) - 1;
            }
            else if (*(_DWORD *)(v16 + 24) <= (int)v11)
            {
              v18 = *(_DWORD *)(v16 + 20) - 2;
            }
            else
            {
              v18 = ucptrie_internalSmallIndex((uint64_t *)v16, v11);
            }
          }
          else
          {
            v18 = v32 + *(unsigned __int16 *)(*(_QWORD *)v16 + 2 * v33);
          }
          v8 = *(unsigned __int16 *)(v17 + 2 * v18);
          v19 = *(_DWORD *)(a1 + 712);
          if (v34 <= v8)
            ++v19;
          *(_DWORD *)(a1 + 712) = v19;
        }
        else
        {
          v15 = (unsigned __int16 *)(*(_QWORD *)(a1 + 656) + 4);
          while ((_DWORD)v11 != *((_DWORD *)v15 - 1))
          {
            v15 += 4;
            if (!--v14)
              goto LABEL_24;
          }
          v8 = *v15;
        }
      }
      v13 = 1;
      v9 = 1;
    }
    else
    {
      v13 = 0;
    }
    v20 = *((unsigned __int8 *)v7 + v10 + v8 + 3);
    v10 = (v3 * v20);
    v21 = (char *)v7 + v10;
    v22 = *((unsigned __int8 *)v7 + v10);
    if (*((_BYTE *)v7 + v10))
    {
      if ((_DWORD)v22 == 1)
      {
        if (v9)
        {
          v23 = *(unsigned int *)(a1 + 528);
          if ((int)v23 <= *(_DWORD *)(a1 + 516))
            v35 = *(_QWORD *)(a1 + 520) + v23;
          else
            v35 = (*(uint64_t (**)(UText *))(*(_QWORD *)(a1 + 544) + 64))(ut);
        }
        *(_DWORD *)(a1 + 672) = v21[2];
      }
      else
      {
        v24 = *(unsigned int *)(*(_QWORD *)(a1 + 768) + 4 * v22);
        if ((v24 & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 672) = v21[2];
          *(_DWORD *)(a1 + 668) = v24;
          return v24;
        }
      }
    }
    v25 = v21[1];
    if (v25 >= 2)
    {
      v26 = *(unsigned int *)(a1 + 528);
      if ((int)v26 <= *(_DWORD *)(a1 + 516))
        v27 = *(_QWORD *)(a1 + 520) + v26;
      else
        LODWORD(v27) = (*(uint64_t (**)(UText *))(*(_QWORD *)(a1 + 544) + 64))(ut);
      *(_DWORD *)(*(_QWORD *)(a1 + 768) + 4 * v25) = v27;
    }
    if (!v20)
      break;
    if (v13)
    {
      v28 = *(int *)(a1 + 528);
      if ((int)v28 >= *(_DWORD *)(a1 + 532)
        || (v6 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 536) + 2 * v28), v6 >> 11 > 0x1A))
      {
        v6 = utext_next32(ut);
        v9 = 1;
      }
      else
      {
        *(_DWORD *)(a1 + 528) = v28 + 1;
        v9 = 1;
      }
      goto LABEL_11;
    }
    if (v9 <= 1)
      v9 = 1;
  }
  result = v35;
  if ((_DWORD)v35 == v30)
  {
    utext_setNativeIndex(ut, v31);
    utext_next32(ut);
    result = utext_getNativeIndex(ut);
    *(_DWORD *)(a1 + 672) = 0;
  }
  *(_DWORD *)(a1 + 668) = result;
  return result;
}

int64_t sub_18BBE5210(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t result;
  int v30;
  int64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  UText *ut;

  v2 = *(unsigned int **)(*(_QWORD *)(a1 + 632) + 8);
  v3 = v2[1];
  v34 = v2[2];
  *(_DWORD *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 712) = 0;
  v4 = *(unsigned int *)(a1 + 668);
  ut = (UText *)(a1 + 488);
  v5 = (int)v4 - *(_QWORD *)(a1 + 520);
  if (v5 < 0 || v5 >= *(int *)(a1 + 516) || *(unsigned __int16 *)(*(_QWORD *)(a1 + 536) + 2 * v5) >> 10 > 0x36u)
  {
    utext_setNativeIndex(ut, (int)v4);
    LODWORD(v5) = *(_DWORD *)(a1 + 528);
  }
  else
  {
    *(_DWORD *)(a1 + 528) = v5;
  }
  if ((int)v5 >= *(_DWORD *)(a1 + 532)
    || (v6 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 536) + 2 * (int)v5), v6 >> 11 > 0x1A))
  {
    v6 = utext_next32(ut);
    if (v6 == -1)
    {
      *(_BYTE *)(a1 + 760) = 1;
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 528) = v5 + 1;
  }
  v30 = v4;
  v31 = (int)v4;
  v7 = v2 + 5;
  v8 = v2[4] & 2;
  v9 = ((v2[4] & 2) >> 1) ^ 1;
  v10 = v3;
  v35 = v4;
LABEL_11:
  v33 = v6 >> 6;
  v32 = v6 & 0x3F;
  v11 = (int)v6;
  while (1)
  {
    if ((_DWORD)v11 == -1)
    {
      if (v9 == 2)
        break;
      v13 = 0;
      v9 = 2;
      v8 = 1;
    }
    else if (v9 == 1)
    {
      if ((int)v11 <= 255 && (v12 = *(_QWORD *)(a1 + 648)) != 0)
      {
        v8 = *(unsigned __int16 *)(v12 + 2 * v11);
      }
      else
      {
        v14 = *(unsigned int *)(a1 + 664);
        if ((int)v14 < 1)
        {
LABEL_24:
          v16 = *(_QWORD *)(*(_QWORD *)(a1 + 632) + 48);
          v17 = *(_QWORD *)(v16 + 8);
          if (WORD1(v11))
          {
            if (WORD1(v11) > 0x10u)
            {
              v18 = *(_DWORD *)(v16 + 20) - 1;
            }
            else if (*(_DWORD *)(v16 + 24) <= (int)v11)
            {
              v18 = *(_DWORD *)(v16 + 20) - 2;
            }
            else
            {
              v18 = ucptrie_internalSmallIndex((uint64_t *)v16, v11);
            }
          }
          else
          {
            v18 = v32 + *(unsigned __int16 *)(*(_QWORD *)v16 + 2 * v33);
          }
          v8 = *(unsigned __int8 *)(v17 + v18);
          v19 = *(_DWORD *)(a1 + 712);
          if (v34 <= v8)
            ++v19;
          *(_DWORD *)(a1 + 712) = v19;
        }
        else
        {
          v15 = (unsigned __int16 *)(*(_QWORD *)(a1 + 656) + 4);
          while ((_DWORD)v11 != *((_DWORD *)v15 - 1))
          {
            v15 += 4;
            if (!--v14)
              goto LABEL_24;
          }
          v8 = *v15;
        }
      }
      v13 = 1;
      v9 = 1;
    }
    else
    {
      v13 = 0;
    }
    v20 = *(unsigned __int16 *)((char *)v7 + 2 * v8 + v10 + 6);
    v10 = (v3 * v20);
    v21 = (char *)v7 + v10;
    v22 = *(unsigned __int16 *)((char *)v7 + v10);
    if (*(_WORD *)((char *)v7 + v10))
    {
      if ((_DWORD)v22 == 1)
      {
        if (v9)
        {
          v23 = *(unsigned int *)(a1 + 528);
          if ((int)v23 <= *(_DWORD *)(a1 + 516))
            v35 = *(_QWORD *)(a1 + 520) + v23;
          else
            v35 = (*(uint64_t (**)(UText *))(*(_QWORD *)(a1 + 544) + 64))(ut);
        }
        *(_DWORD *)(a1 + 672) = *((unsigned __int16 *)v21 + 2);
      }
      else
      {
        v24 = *(unsigned int *)(*(_QWORD *)(a1 + 768) + 4 * v22);
        if ((v24 & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 672) = *((unsigned __int16 *)v21 + 2);
          *(_DWORD *)(a1 + 668) = v24;
          return v24;
        }
      }
    }
    v25 = *((unsigned __int16 *)v21 + 1);
    if (v25 >= 2)
    {
      v26 = *(unsigned int *)(a1 + 528);
      if ((int)v26 <= *(_DWORD *)(a1 + 516))
        v27 = *(_QWORD *)(a1 + 520) + v26;
      else
        LODWORD(v27) = (*(uint64_t (**)(UText *))(*(_QWORD *)(a1 + 544) + 64))(ut);
      *(_DWORD *)(*(_QWORD *)(a1 + 768) + 4 * v25) = v27;
    }
    if (!v20)
      break;
    if (v13)
    {
      v28 = *(int *)(a1 + 528);
      if ((int)v28 >= *(_DWORD *)(a1 + 532)
        || (v6 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 536) + 2 * v28), v6 >> 11 > 0x1A))
      {
        v6 = utext_next32(ut);
        v9 = 1;
      }
      else
      {
        *(_DWORD *)(a1 + 528) = v28 + 1;
        v9 = 1;
      }
      goto LABEL_11;
    }
    if (v9 <= 1)
      v9 = 1;
  }
  result = v35;
  if ((_DWORD)v35 == v30)
  {
    utext_setNativeIndex(ut, v31);
    utext_next32(ut);
    result = utext_getNativeIndex(ut);
    *(_DWORD *)(a1 + 672) = 0;
  }
  *(_DWORD *)(a1 + 668) = result;
  return result;
}

int64_t sub_18BBE5590(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t result;
  int v30;
  int64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  UText *ut;

  v2 = *(unsigned int **)(*(_QWORD *)(a1 + 632) + 8);
  v3 = v2[1];
  v34 = v2[2];
  *(_DWORD *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 712) = 0;
  v4 = *(unsigned int *)(a1 + 668);
  ut = (UText *)(a1 + 488);
  v5 = (int)v4 - *(_QWORD *)(a1 + 520);
  if (v5 < 0 || v5 >= *(int *)(a1 + 516) || *(unsigned __int16 *)(*(_QWORD *)(a1 + 536) + 2 * v5) >> 10 > 0x36u)
  {
    utext_setNativeIndex(ut, (int)v4);
    LODWORD(v5) = *(_DWORD *)(a1 + 528);
  }
  else
  {
    *(_DWORD *)(a1 + 528) = v5;
  }
  if ((int)v5 >= *(_DWORD *)(a1 + 532)
    || (v6 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 536) + 2 * (int)v5), v6 >> 11 > 0x1A))
  {
    v6 = utext_next32(ut);
    if (v6 == -1)
    {
      *(_BYTE *)(a1 + 760) = 1;
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 528) = v5 + 1;
  }
  v30 = v4;
  v31 = (int)v4;
  v7 = v2 + 5;
  v8 = v2[4] & 2;
  v9 = ((v2[4] & 2) >> 1) ^ 1;
  v10 = v3;
  v35 = v4;
LABEL_11:
  v33 = v6 >> 6;
  v32 = v6 & 0x3F;
  v11 = (int)v6;
  while (1)
  {
    if ((_DWORD)v11 == -1)
    {
      if (v9 == 2)
        break;
      v13 = 0;
      v9 = 2;
      v8 = 1;
    }
    else if (v9 == 1)
    {
      if ((int)v11 <= 255 && (v12 = *(_QWORD *)(a1 + 648)) != 0)
      {
        v8 = *(unsigned __int16 *)(v12 + 2 * v11);
      }
      else
      {
        v14 = *(unsigned int *)(a1 + 664);
        if ((int)v14 < 1)
        {
LABEL_24:
          v16 = *(_QWORD *)(*(_QWORD *)(a1 + 632) + 48);
          v17 = *(_QWORD *)(v16 + 8);
          if (WORD1(v11))
          {
            if (WORD1(v11) > 0x10u)
            {
              v18 = *(_DWORD *)(v16 + 20) - 1;
            }
            else if (*(_DWORD *)(v16 + 24) <= (int)v11)
            {
              v18 = *(_DWORD *)(v16 + 20) - 2;
            }
            else
            {
              v18 = ucptrie_internalSmallIndex((uint64_t *)v16, v11);
            }
          }
          else
          {
            v18 = v32 + *(unsigned __int16 *)(*(_QWORD *)v16 + 2 * v33);
          }
          v8 = *(unsigned __int16 *)(v17 + 2 * v18);
          v19 = *(_DWORD *)(a1 + 712);
          if (v34 <= v8)
            ++v19;
          *(_DWORD *)(a1 + 712) = v19;
        }
        else
        {
          v15 = (unsigned __int16 *)(*(_QWORD *)(a1 + 656) + 4);
          while ((_DWORD)v11 != *((_DWORD *)v15 - 1))
          {
            v15 += 4;
            if (!--v14)
              goto LABEL_24;
          }
          v8 = *v15;
        }
      }
      v13 = 1;
      v9 = 1;
    }
    else
    {
      v13 = 0;
    }
    v20 = *(unsigned __int16 *)((char *)v7 + 2 * v8 + v10 + 6);
    v10 = (v3 * v20);
    v21 = (char *)v7 + v10;
    v22 = *(unsigned __int16 *)((char *)v7 + v10);
    if (*(_WORD *)((char *)v7 + v10))
    {
      if ((_DWORD)v22 == 1)
      {
        if (v9)
        {
          v23 = *(unsigned int *)(a1 + 528);
          if ((int)v23 <= *(_DWORD *)(a1 + 516))
            v35 = *(_QWORD *)(a1 + 520) + v23;
          else
            v35 = (*(uint64_t (**)(UText *))(*(_QWORD *)(a1 + 544) + 64))(ut);
        }
        *(_DWORD *)(a1 + 672) = *((unsigned __int16 *)v21 + 2);
      }
      else
      {
        v24 = *(unsigned int *)(*(_QWORD *)(a1 + 768) + 4 * v22);
        if ((v24 & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 672) = *((unsigned __int16 *)v21 + 2);
          *(_DWORD *)(a1 + 668) = v24;
          return v24;
        }
      }
    }
    v25 = *((unsigned __int16 *)v21 + 1);
    if (v25 >= 2)
    {
      v26 = *(unsigned int *)(a1 + 528);
      if ((int)v26 <= *(_DWORD *)(a1 + 516))
        v27 = *(_QWORD *)(a1 + 520) + v26;
      else
        LODWORD(v27) = (*(uint64_t (**)(UText *))(*(_QWORD *)(a1 + 544) + 64))(ut);
      *(_DWORD *)(*(_QWORD *)(a1 + 768) + 4 * v25) = v27;
    }
    if (!v20)
      break;
    if (v13)
    {
      v28 = *(int *)(a1 + 528);
      if ((int)v28 >= *(_DWORD *)(a1 + 532)
        || (v6 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 536) + 2 * v28), v6 >> 11 > 0x1A))
      {
        v6 = utext_next32(ut);
        v9 = 1;
      }
      else
      {
        *(_DWORD *)(a1 + 528) = v28 + 1;
        v9 = 1;
      }
      goto LABEL_11;
    }
    if (v9 <= 1)
      v9 = 1;
  }
  result = v35;
  if ((_DWORD)v35 == v30)
  {
    utext_setNativeIndex(ut, v31);
    utext_next32(ut);
    result = utext_getNativeIndex(ut);
    *(_DWORD *)(a1 + 672) = 0;
  }
  *(_DWORD *)(a1 + 668) = result;
  return result;
}

uint64_t icu::RuleBasedBreakIterator::handleSafePrevious(icu::RuleBasedBreakIterator *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int ValueWidth;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;

  v4 = *((_QWORD *)this + 79);
  v5 = *(_QWORD *)(v4 + 16);
  ValueWidth = ucptrie_getValueWidth(*(_QWORD *)(v4 + 48));
  v7 = *(_QWORD *)(*((_QWORD *)this + 79) + 16);
  v8 = a2 - *((_QWORD *)this + 65);
  if ((*(_BYTE *)(v5 + 16) & 4) != 0)
  {
    if (ValueWidth != 2)
    {
      if (v8 < 0
        || (v12 = *((int *)this + 129), v8 >= v12)
        || *(unsigned __int16 *)(*((_QWORD *)this + 67) + 2 * v8) >> 10 > 0x36u)
      {
        utext_setNativeIndex((UText *)((char *)this + 488), a2);
        if (!*((_QWORD *)this + 79))
          return 0xFFFFFFFFLL;
        LODWORD(v8) = *((_DWORD *)this + 132);
        LODWORD(v12) = *((_DWORD *)this + 129);
      }
      else
      {
        *((_DWORD *)this + 132) = v8;
      }
      if ((int)v8 <= (int)v12)
      {
        if (!(*((_QWORD *)this + 65) + (int)v8))
          return 0xFFFFFFFFLL;
      }
      else if (!(*(uint64_t (**)(char *))(*((_QWORD *)this + 68) + 64))((char *)this + 488))
      {
        return 0xFFFFFFFFLL;
      }
      v21 = *((_DWORD *)this + 132);
      v14 = __OFSUB__(v21, 1);
      v22 = v21 - 1;
      if (v22 < 0 != v14
        || (v16 = *(unsigned __int16 *)(*((_QWORD *)this + 67) + 2 * v22), v16 >> 11 > 0x1A))
      {
        v16 = utext_previous32((UText *)((char *)this + 488));
        if ((_DWORD)v16 == -1)
          goto LABEL_120;
      }
      else
      {
        *((_DWORD *)this + 132) = v22;
      }
      v51 = *(_DWORD *)(v7 + 4);
      do
      {
        v52 = *(_QWORD *)(*((_QWORD *)this + 79) + 48);
        v53 = *(_QWORD *)(v52 + 8);
        if (WORD1(v16))
        {
          if (WORD1(v16) > 0x10u)
          {
            v54 = *(_DWORD *)(v52 + 20) - 1;
          }
          else if (*(_DWORD *)(v52 + 24) <= (int)v16)
          {
            v54 = *(_DWORD *)(v52 + 20) - 2;
          }
          else
          {
            v54 = ucptrie_internalSmallIndex((uint64_t *)v52, v16);
          }
        }
        else
        {
          v54 = (v16 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v52 + 2 * (v16 >> 6));
        }
        v55 = v7 + 20 + v51 + *(unsigned __int16 *)(v53 + 2 * v54);
        v56 = *(unsigned __int8 *)(v55 + 3);
        if (!*(_BYTE *)(v55 + 3))
          break;
        v57 = *(_DWORD *)(v7 + 4);
        v58 = *((_DWORD *)this + 132);
        v14 = __OFSUB__(v58, 1);
        v59 = v58 - 1;
        if (v59 < 0 != v14
          || (v16 = *(unsigned __int16 *)(*((_QWORD *)this + 67) + 2 * v59),
              v16 >> 11 > 0x1A))
        {
          v16 = utext_previous32((UText *)((char *)this + 488));
        }
        else
        {
          *((_DWORD *)this + 132) = v59;
        }
        v51 = v57 * v56;
      }
      while ((_DWORD)v16 != -1);
      goto LABEL_120;
    }
    if (v8 < 0
      || (v10 = *((int *)this + 129), v8 >= v10)
      || *(unsigned __int16 *)(*((_QWORD *)this + 67) + 2 * v8) >> 10 > 0x36u)
    {
      utext_setNativeIndex((UText *)((char *)this + 488), a2);
      if (!*((_QWORD *)this + 79))
        return 0xFFFFFFFFLL;
      LODWORD(v8) = *((_DWORD *)this + 132);
      LODWORD(v10) = *((_DWORD *)this + 129);
    }
    else
    {
      *((_DWORD *)this + 132) = v8;
    }
    if ((int)v8 <= (int)v10)
    {
      if (!(*((_QWORD *)this + 65) + (int)v8))
        return 0xFFFFFFFFLL;
    }
    else if (!(*(uint64_t (**)(char *))(*((_QWORD *)this + 68) + 64))((char *)this + 488))
    {
      return 0xFFFFFFFFLL;
    }
    v17 = *((_DWORD *)this + 132);
    v14 = __OFSUB__(v17, 1);
    v18 = v17 - 1;
    if (v18 < 0 != v14
      || (v16 = *(unsigned __int16 *)(*((_QWORD *)this + 67) + 2 * v18), v16 >> 11 > 0x1A))
    {
      v16 = utext_previous32((UText *)((char *)this + 488));
      if ((_DWORD)v16 == -1)
        goto LABEL_120;
    }
    else
    {
      *((_DWORD *)this + 132) = v18;
    }
    v33 = *(_DWORD *)(v7 + 4);
    do
    {
      v34 = *(_QWORD *)(*((_QWORD *)this + 79) + 48);
      v35 = *(_QWORD *)(v34 + 8);
      if (WORD1(v16))
      {
        if (WORD1(v16) > 0x10u)
        {
          v36 = *(_DWORD *)(v34 + 20) - 1;
        }
        else if (*(_DWORD *)(v34 + 24) <= (int)v16)
        {
          v36 = *(_DWORD *)(v34 + 20) - 2;
        }
        else
        {
          v36 = ucptrie_internalSmallIndex((uint64_t *)v34, v16);
        }
      }
      else
      {
        v36 = (v16 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v34 + 2 * (v16 >> 6));
      }
      v37 = v7 + 20 + v33 + *(unsigned __int8 *)(v35 + v36);
      v38 = *(unsigned __int8 *)(v37 + 3);
      if (!*(_BYTE *)(v37 + 3))
        break;
      v39 = *(_DWORD *)(v7 + 4);
      v40 = *((_DWORD *)this + 132);
      v14 = __OFSUB__(v40, 1);
      v41 = v40 - 1;
      if (v41 < 0 != v14
        || (v16 = *(unsigned __int16 *)(*((_QWORD *)this + 67) + 2 * v41), v16 >> 11 > 0x1A))
      {
        v16 = utext_previous32((UText *)((char *)this + 488));
      }
      else
      {
        *((_DWORD *)this + 132) = v41;
      }
      v33 = v39 * v38;
    }
    while ((_DWORD)v16 != -1);
    goto LABEL_120;
  }
  if (ValueWidth != 2)
  {
    if (v8 < 0
      || (v11 = *((int *)this + 129), v8 >= v11)
      || *(unsigned __int16 *)(*((_QWORD *)this + 67) + 2 * v8) >> 10 > 0x36u)
    {
      utext_setNativeIndex((UText *)((char *)this + 488), a2);
      if (!*((_QWORD *)this + 79))
        return 0xFFFFFFFFLL;
      LODWORD(v8) = *((_DWORD *)this + 132);
      LODWORD(v11) = *((_DWORD *)this + 129);
    }
    else
    {
      *((_DWORD *)this + 132) = v8;
    }
    if ((int)v8 <= (int)v11)
    {
      if (!(*((_QWORD *)this + 65) + (int)v8))
        return 0xFFFFFFFFLL;
    }
    else if (!(*(uint64_t (**)(char *))(*((_QWORD *)this + 68) + 64))((char *)this + 488))
    {
      return 0xFFFFFFFFLL;
    }
    v19 = *((_DWORD *)this + 132);
    v14 = __OFSUB__(v19, 1);
    v20 = v19 - 1;
    if (v20 < 0 != v14
      || (v16 = *(unsigned __int16 *)(*((_QWORD *)this + 67) + 2 * v20), v16 >> 11 > 0x1A))
    {
      v16 = utext_previous32((UText *)((char *)this + 488));
      if ((_DWORD)v16 == -1)
        goto LABEL_120;
    }
    else
    {
      *((_DWORD *)this + 132) = v20;
    }
    v42 = *(_DWORD *)(v7 + 4);
    do
    {
      v43 = *(_QWORD *)(*((_QWORD *)this + 79) + 48);
      v44 = *(_QWORD *)(v43 + 8);
      if (WORD1(v16))
      {
        if (WORD1(v16) > 0x10u)
        {
          v45 = *(_DWORD *)(v43 + 20) - 1;
        }
        else if (*(_DWORD *)(v43 + 24) <= (int)v16)
        {
          v45 = *(_DWORD *)(v43 + 20) - 2;
        }
        else
        {
          v45 = ucptrie_internalSmallIndex((uint64_t *)v43, v16);
        }
      }
      else
      {
        v45 = (v16 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v43 + 2 * (v16 >> 6));
      }
      v46 = v7 + 20 + v42 + 2 * *(unsigned __int16 *)(v44 + 2 * v45);
      v47 = *(unsigned __int16 *)(v46 + 6);
      if (!*(_WORD *)(v46 + 6))
        break;
      v48 = *(_DWORD *)(v7 + 4);
      v49 = *((_DWORD *)this + 132);
      v14 = __OFSUB__(v49, 1);
      v50 = v49 - 1;
      if (v50 < 0 != v14
        || (v16 = *(unsigned __int16 *)(*((_QWORD *)this + 67) + 2 * v50), v16 >> 11 > 0x1A))
      {
        v16 = utext_previous32((UText *)((char *)this + 488));
      }
      else
      {
        *((_DWORD *)this + 132) = v50;
      }
      v42 = v48 * v47;
    }
    while ((_DWORD)v16 != -1);
    goto LABEL_120;
  }
  if (v8 < 0
    || (v9 = *((int *)this + 129), v8 >= v9)
    || *(unsigned __int16 *)(*((_QWORD *)this + 67) + 2 * v8) >> 10 > 0x36u)
  {
    utext_setNativeIndex((UText *)((char *)this + 488), a2);
    if (!*((_QWORD *)this + 79))
      return 0xFFFFFFFFLL;
    LODWORD(v8) = *((_DWORD *)this + 132);
    LODWORD(v9) = *((_DWORD *)this + 129);
  }
  else
  {
    *((_DWORD *)this + 132) = v8;
  }
  if ((int)v8 > (int)v9)
  {
    if (!(*(uint64_t (**)(char *))(*((_QWORD *)this + 68) + 64))((char *)this + 488))
      return 0xFFFFFFFFLL;
    goto LABEL_41;
  }
  if (!(*((_QWORD *)this + 65) + (int)v8))
    return 0xFFFFFFFFLL;
LABEL_41:
  v13 = *((_DWORD *)this + 132);
  v14 = __OFSUB__(v13, 1);
  v15 = v13 - 1;
  if (v15 < 0 == v14)
  {
    v16 = *(unsigned __int16 *)(*((_QWORD *)this + 67) + 2 * v15);
    if (v16 >> 11 <= 0x1A)
    {
      *((_DWORD *)this + 132) = v15;
      goto LABEL_58;
    }
  }
  v16 = utext_previous32((UText *)((char *)this + 488));
  if ((_DWORD)v16 != -1)
  {
LABEL_58:
    v24 = *(_DWORD *)(v7 + 4);
    do
    {
      v25 = *(_QWORD *)(*((_QWORD *)this + 79) + 48);
      v26 = *(_QWORD *)(v25 + 8);
      if (WORD1(v16))
      {
        if (WORD1(v16) > 0x10u)
        {
          v27 = *(_DWORD *)(v25 + 20) - 1;
        }
        else if (*(_DWORD *)(v25 + 24) <= (int)v16)
        {
          v27 = *(_DWORD *)(v25 + 20) - 2;
        }
        else
        {
          v27 = ucptrie_internalSmallIndex((uint64_t *)v25, v16);
        }
      }
      else
      {
        v27 = (v16 & 0x3F) + *(unsigned __int16 *)(*(_QWORD *)v25 + 2 * (v16 >> 6));
      }
      v28 = v7 + 20 + v24 + 2 * *(unsigned __int8 *)(v26 + v27);
      v29 = *(unsigned __int16 *)(v28 + 6);
      if (!*(_WORD *)(v28 + 6))
        break;
      v30 = *(_DWORD *)(v7 + 4);
      v31 = *((_DWORD *)this + 132);
      v14 = __OFSUB__(v31, 1);
      v32 = v31 - 1;
      if (v32 < 0 != v14
        || (v16 = *(unsigned __int16 *)(*((_QWORD *)this + 67) + 2 * v32), v16 >> 11 > 0x1A))
      {
        v16 = utext_previous32((UText *)((char *)this + 488));
      }
      else
      {
        *((_DWORD *)this + 132) = v32;
      }
      v24 = v30 * v29;
    }
    while ((_DWORD)v16 != -1);
  }
LABEL_120:
  v60 = *((unsigned int *)this + 132);
  if ((int)v60 <= *((_DWORD *)this + 129))
    return *((_QWORD *)this + 65) + v60;
  else
    return (*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)this + 68) + 64))((char *)this + 488, v16);
}

uint64_t icu::RuleBasedBreakIterator::getRuleStatus(icu::RuleBasedBreakIterator *this)
{
  return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 79) + 32)
                         + 4
                         * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 79) + 32) + 4 * *((int *)this + 168))
                          + *((_DWORD *)this + 168)));
}

uint64_t icu::RuleBasedBreakIterator::getRuleStatusVec(icu::RuleBasedBreakIterator *this, int *a2, int a3, UErrorCode *a4)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t i;

  if (*(int *)a4 > 0)
    return 0;
  v6 = *(_QWORD *)(*((_QWORD *)this + 79) + 32);
  result = *(unsigned int *)(v6 + 4 * *((int *)this + 168));
  v7 = result;
  if ((int)result > a3)
  {
    *a4 = U_BUFFER_OVERFLOW_ERROR;
    v7 = a3;
  }
  if (v7 >= 1)
  {
    for (i = 0; i != v7; ++i)
      a2[i] = *(_DWORD *)(v6 + 4 * ((int)i + *((_DWORD *)this + 168) + 1));
  }
  return result;
}

unint64_t icu::RuleBasedBreakIterator::tokenize(uint64_t a1, int a2, char *a3, _QWORD *a4)
{
  char *v6;
  char *v9;
  int v10;
  char *v11;
  int v12;
  int v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  int *v18;
  unsigned int v19;
  int v20;
  int64_t Internal;
  int v22[2];

  if (*(_BYTE *)(a1 + 760))
    return 0;
  v6 = a3;
  if (a2 < 1)
    return (unint64_t)(v6 - a3) >> 4;
  v9 = &a3[16 * a2];
  v10 = *(_DWORD *)(a1 + 668);
  v11 = a3;
  while (1)
  {
    v12 = v10;
    *(_QWORD *)v22 = 0;
    if (icu::RuleBasedBreakIterator::DictionaryCache::following(*(icu::RuleBasedBreakIterator::DictionaryCache **)(a1 + 688), v10, &v22[1], v22))goto LABEL_6;
    Internal = icu::RuleBasedBreakIterator::handleNextInternal((icu::RuleBasedBreakIterator *)a1);
    v22[1] = Internal;
    if ((_DWORD)Internal == -1)
      break;
    v10 = Internal;
    *(_DWORD *)(a1 + 668) = Internal;
    v13 = *(_DWORD *)(a1 + 672);
    if (!*(_DWORD *)(a1 + 712))
      goto LABEL_7;
    icu::RuleBasedBreakIterator::DictionaryCache::populateDictionary(*(_QWORD *)(a1 + 688), v12, Internal, v13, *(_DWORD *)(a1 + 672));
    if (!icu::RuleBasedBreakIterator::DictionaryCache::following(*(icu::RuleBasedBreakIterator::DictionaryCache **)(a1 + 688), v12, &v22[1], v22))
    {
      v13 = *(_DWORD *)(a1 + 672);
      v10 = *(_DWORD *)(a1 + 668);
      goto LABEL_7;
    }
LABEL_6:
    v13 = v22[0];
    v10 = v22[1];
    *(_DWORD *)(a1 + 668) = v22[1];
    *(_DWORD *)(a1 + 672) = v13;
LABEL_7:
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 632) + 32);
    v15 = (int *)(v14 + 4 * v13);
    v16 = *v15;
    v17 = v15[v16];
    if (v17 == -1)
    {
      v6 = v11;
    }
    else
    {
      v6 = v11 + 16;
      *(_QWORD *)v11 = v12;
      *((_QWORD *)v11 + 1) = v10 - v12;
      if (a4)
      {
        if ((int)v16 >= 2)
        {
          v18 = (int *)(v14 + 4 * v16 + 4 * v13 - 4);
          v19 = v16 + 1;
          do
          {
            v20 = *v18--;
            v17 |= v20;
            --v19;
          }
          while (v19 > 2);
        }
        *a4++ = v17;
      }
    }
    v11 = v6;
    if (v6 >= v9)
      return (unint64_t)(v6 - a3) >> 4;
  }
  v6 = v11;
  return (unint64_t)(v6 - a3) >> 4;
}

uint64_t icu::RuleBasedBreakIterator::getBinaryRules(icu::RuleBasedBreakIterator *this, unsigned int *a2)
{
  uint64_t v2;
  uint64_t result;

  *a2 = 0;
  v2 = *((_QWORD *)this + 79);
  if (!v2)
    return 0;
  result = *(_QWORD *)v2;
  *a2 = *(_DWORD *)(*(_QWORD *)v2 + 8);
  return result;
}

uint64_t icu::RuleBasedBreakIterator::createBufferClone(icu::RuleBasedBreakIterator *this, void *a2, int *a3, UErrorCode *a4)
{
  uint64_t result;
  UErrorCode v6;

  if (*(int *)a4 > 0)
    return 0;
  if (*a3)
  {
    result = (*(uint64_t (**)(icu::RuleBasedBreakIterator *, void *))(*(_QWORD *)this + 32))(this, a2);
    if (result)
      v6 = U_SAFECLONE_ALLOCATED_WARNING;
    else
      v6 = U_MEMORY_ALLOCATION_ERROR;
    *a4 = v6;
  }
  else
  {
    result = 0;
    *a3 = 1;
  }
  return result;
}

uint64_t sub_18BBE6200()
{
  if (qword_1EE009358)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1EE009358 + 8))(qword_1EE009358);
  qword_1EE009358 = 0;
  if (qword_1EE009360)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1EE009360 + 8))(qword_1EE009360);
  qword_1EE009360 = 0;
  atomic_store(0, &dword_1EE009370);
  atomic_store(0, (unsigned int *)&unk_1EE009378);
  return 1;
}

void sub_18BBE626C(int *a1)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  void *v10;

  if (*a1 <= 0)
  {
    v2 = atomic_load(&dword_1EE009370);
    if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009370))
    {
      if (dword_1EE009374 >= 1)
        *a1 = dword_1EE009374;
    }
    else
    {
      v5 = icu::UMemory::operator new(v4, (icu::UMemory *)0x28, v3);
      if (v5)
      {
        qword_1EE009358 = (uint64_t)icu::UStack::UStack((uint64_t)v5, (uint64_t)sub_18BBE6764, 0, a1);
        v7 = (uint64_t *)*a1;
        if ((int)v7 <= 0)
        {
          v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x10, v6);
          if (v8)
          {
            v9 = v8;
            sub_18BBAC4C0(v8);
            if (*a1 <= 0)
            {
              qword_1EE009368 = (uint64_t)v9;
              if (*(_QWORD *)(qword_1EE009358 + 24))
                icu::UVector::adoptElement((icu::UVector *)qword_1EE009358, v9, (UErrorCode *)a1);
              else
                icu::UVector::addElement((icu::UVector *)qword_1EE009358, v9, (UErrorCode *)a1);
              v10 = (void *)uprv_svc_hook();
              if (v10)
              {
                if (*(_QWORD *)(qword_1EE009358 + 24))
                  icu::UVector::adoptElement((icu::UVector *)qword_1EE009358, v10, (UErrorCode *)a1);
                else
                  icu::UVector::addElement((icu::UVector *)qword_1EE009358, v10, (UErrorCode *)a1);
              }
            }
            else
            {
              (*(void (**)(uint64_t *))(*v9 + 8))(v9);
            }
          }
          else if (*a1 <= 0)
          {
            *a1 = 7;
          }
        }
      }
      else
      {
        qword_1EE009358 = 0;
      }
      sub_18BC0ECC4(3u, (uint64_t)sub_18BBE6200);
      dword_1EE009374 = *a1;
      icu::umtx_initImplPostInit(&dword_1EE009370);
    }
  }
}

void *icu::RuleBasedBreakIterator::getLanguageBreakEngine@<X0>(icu::RuleBasedBreakIterator *this@<X0>, const char *a2@<X2>, unint64_t a3@<X1>, uint64_t *a4@<X8>)
{
  icu::UVector *v7;
  signed int v8;
  BOOL v9;
  void *v10;
  icu::UStack *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  signed int v15;
  uint64_t v16;
  uint64_t v17;
  icu::UVector *v18;
  uint64_t *v19;
  uint64_t *v20;
  UErrorCode v22;
  unsigned int v23;

  v22 = U_ZERO_ERROR;
  v7 = (icu::UVector *)*((_QWORD *)this + 87);
  if (!v7)
  {
    v11 = (icu::UStack *)icu::UMemory::operator new(a4, (icu::UMemory *)0x28, a3);
    if (v11)
    {
      v7 = icu::UStack::UStack(v11, &v22);
      *((_QWORD *)this + 87) = v7;
      if (v22 < U_ILLEGAL_ARGUMENT_ERROR)
        goto LABEL_2;
      (*(void (**)(icu::UVector *))(*(_QWORD *)v7 + 8))(v7);
    }
    v10 = 0;
    *((_QWORD *)this + 87) = 0;
    return v10;
  }
LABEL_2:
  v8 = *((_DWORD *)v7 + 2);
  while (1)
  {
    v9 = __OFSUB__(v8--, 1);
    if (v8 < 0 != v9)
      break;
    v10 = (void *)icu::UVector::elementAt(*((icu::UVector **)this + 87), v8);
    if ((*(unsigned int (**)(void *, unint64_t, const char *))(*(_QWORD *)v10 + 24))(v10, a3, a2))
      return v10;
  }
  v23 = 0;
  sub_18BBE626C((int *)&v23);
  v13 = (uint64_t *)v23;
  if ((int)v23 <= 0)
  {
    v13 = (uint64_t *)qword_1EE009358;
    v15 = *(_DWORD *)(qword_1EE009358 + 8);
    while (1)
    {
      v9 = __OFSUB__(v15--, 1);
      if (v15 < 0 != v9)
        break;
      v16 = icu::UVector::elementAt((icu::UVector *)qword_1EE009358, v15);
      v17 = (*(uint64_t (**)(uint64_t, unint64_t, const char *))(*(_QWORD *)v16 + 16))(v16, a3, a2);
      if (v17)
      {
        v10 = (void *)v17;
        v18 = (icu::UVector *)*((_QWORD *)this + 87);
        if (*((_QWORD *)v18 + 3))
          icu::UVector::adoptElement(v18, v10, &v22);
        else
          icu::UVector::addElement(v18, v10, &v22);
        return v10;
      }
    }
  }
  v14 = *((_QWORD *)this + 88);
  if (v14)
    goto LABEL_12;
  v19 = icu::UMemory::operator new(v13, (icu::UMemory *)0x10, v12);
  v20 = v19;
  if (v19)
  {
    sub_18BBAC338(v19);
    *((_QWORD *)this + 88) = v20;
  }
  else
  {
    *((_QWORD *)this + 88) = 0;
    if (v22 < U_ILLEGAL_ARGUMENT_ERROR)
      return 0;
  }
  icu::UVector::insertElementAt(*((uint64_t (***)(void *))this + 87), v20, 0, &v22);
  v14 = *((_QWORD *)this + 88);
  if (v22 < U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_12:
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v14 + 40))(v14, a3);
    return (void *)*((_QWORD *)this + 88);
  }
  else
  {
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v10 = 0;
    *((_QWORD *)this + 88) = 0;
  }
  return v10;
}

void icu::RuleBasedBreakIterator::registerExternalBreakEngine(uint64_t a1, int *a2)
{
  int v4;

  v4 = *a2;
  if (a1 || v4 > 0)
  {
    if (v4 <= 0 && (sub_18BBE626C(a2), *a2 <= 0))
    {
      (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)qword_1EE009368 + 24))(qword_1EE009368, a1, a2);
    }
    else if (a1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    }
  }
  else
  {
    *a2 = 7;
  }
}

uint64_t icu::RuleBasedBreakIterator::dumpCache(icu::RuleBasedBreakIterator::BreakCache **this)
{
  return icu::RuleBasedBreakIterator::BreakCache::dumpCache(this[85]);
}

uint64_t icu::RuleBasedBreakIterator::dumpTables(icu::RuleBasedBreakIterator *this)
{
  return nullsub_17(*((_QWORD *)this + 79));
}

uint64_t icu::RuleBasedBreakIterator::getRules(icu::RuleBasedBreakIterator *this)
{
  uint64_t v1;
  unsigned int v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;

  v1 = *((_QWORD *)this + 79);
  if (v1)
    return sub_18BBEAB94(v1);
  v3 = atomic_load((unsigned int *)&unk_1EE009378);
  if (v3 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1EE009378))
  {
    v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x40, v4);
    if (v6)
    {
      *v6 = (uint64_t)off_1E2256B38;
      *((_WORD *)v6 + 4) = 2;
    }
    qword_1EE009360 = (uint64_t)v6;
    sub_18BC0ECC4(3u, (uint64_t)sub_18BBE6200);
    icu::umtx_initImplPostInit((unsigned int *)&unk_1EE009378);
  }
  return qword_1EE009360;
}

BOOL sub_18BBE6718(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t sub_18BBE6764(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void *icu::RuleBasedBreakIterator57::getStaticClassID(icu::RuleBasedBreakIterator57 *this)
{
  return &unk_1EE009380;
}

void *icu::RuleBasedBreakIterator57::getDynamicClassID(icu::RuleBasedBreakIterator57 *this)
{
  return &unk_1EE009380;
}

uint64_t icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  UErrorCode status;

  *(_QWORD *)icu::BreakIterator::BreakIterator(a1) = off_1E224B180;
  status = U_ZERO_ERROR;
  *(_QWORD *)(a1 + 488) = utext_openUChars(0, 0, 0, &status);
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 532) = 1;
  *(_DWORD *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 576) = 1;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  v7 = icu::UMemory::operator new((uint64_t *)1, (icu::UMemory *)0xC0, v6);
  if (!v7)
  {
    *(_QWORD *)(a1 + 520) = 0;
    if (*a3 < 1)
    {
      *a3 = 7;
      return a1;
    }
    v9 = (_QWORD *)(a1 + 520);
    goto LABEL_6;
  }
  v8 = sub_18BBEB108((uint64_t)v7, a2, a3);
  *(_QWORD *)(a1 + 520) = v8;
  if (*a3 >= 1)
  {
    v9 = (_QWORD *)(a1 + 520);
    v10 = (void *)sub_18BBEB220(v8);
    icu::UMemory::operator delete(v10);
LABEL_6:
    *v9 = 0;
  }
  return a1;
}

double icu::RuleBasedBreakIterator57::init(icu::RuleBasedBreakIterator57 *this)
{
  double result;
  UErrorCode status;

  status = U_ZERO_ERROR;
  *((_QWORD *)this + 61) = utext_openUChars(0, 0, 0, &status);
  result = 0.0;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_DWORD *)this + 132) = 0;
  *((_BYTE *)this + 532) = 1;
  *((_DWORD *)this + 134) = 0;
  *((_DWORD *)this + 144) = 1;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  return result;
}

uint64_t icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  UErrorCode status;

  *(_QWORD *)icu::BreakIterator::BreakIterator(a1) = off_1E224B180;
  status = U_ZERO_ERROR;
  *(_QWORD *)(a1 + 488) = utext_openUChars(0, 0, 0, &status);
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 532) = 1;
  *(_DWORD *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 576) = 1;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  v8 = icu::UMemory::operator new((uint64_t *)1, (icu::UMemory *)0xC0, v7);
  if (!v8)
  {
    *(_QWORD *)(a1 + 520) = 0;
    if (*a4 < 1)
    {
      *a4 = 7;
      return a1;
    }
    v10 = (_QWORD *)(a1 + 520);
    goto LABEL_6;
  }
  v9 = sub_18BBEB164((uint64_t)v8, a2, 0, a4);
  *(_QWORD *)(a1 + 520) = v9;
  if (*a4 >= 1)
  {
    v10 = (_QWORD *)(a1 + 520);
    v11 = (void *)sub_18BBEB220(v9);
    icu::UMemory::operator delete(v11);
LABEL_6:
    *v10 = 0;
  }
  return a1;
}

icu::RuleBasedBreakIterator57 *icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(icu::RuleBasedBreakIterator57 *this, const icu::UnicodeString *a2, UParseError *a3, UErrorCode *a4)
{
  uint64_t *v8;
  uint64_t *v9;
  UErrorCode status;

  *(_QWORD *)icu::BreakIterator::BreakIterator((uint64_t)this) = off_1E224B180;
  status = U_ZERO_ERROR;
  *((_QWORD *)this + 61) = utext_openUChars(0, 0, 0, &status);
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_DWORD *)this + 132) = 0;
  *((_BYTE *)this + 532) = 1;
  *((_DWORD *)this + 134) = 0;
  *((_DWORD *)this + 144) = 1;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  if (*(int *)a4 <= 0)
  {
    v8 = sub_18BBEC3A8((unint64_t)a2, (uint64_t)a3, a4);
    if (*(int *)a4 <= 0)
    {
      v9 = v8;
      icu::RuleBasedBreakIterator57::operator=((uint64_t)this, (uint64_t)v8);
      (*(void (**)(uint64_t *))(*v9 + 8))(v9);
    }
  }
  return this;
}

uint64_t icu::RuleBasedBreakIterator57::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  UErrorCode status;

  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
    *(_DWORD *)(a1 + 576) = *(_DWORD *)(a2 + 576);
    v4 = *(_QWORD *)(a1 + 560);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      *(_QWORD *)(a1 + 560) = 0;
    }
    status = U_ZERO_ERROR;
    *(_QWORD *)(a1 + 488) = utext_clone(*(UText **)(a1 + 488), *(const UText **)(a2 + 488), 0, 1, &status);
    v5 = *(_QWORD *)(a1 + 496);
    if (v5 != *(_QWORD *)(a1 + 504) && v5 && v5 != *(_QWORD *)(a1 + 512))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 496) = 0;
    v6 = *(_QWORD *)(a2 + 496);
    if (v6)
      *(_QWORD *)(a1 + 496) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
    v7 = *(_QWORD *)(a1 + 520);
    if (v7)
    {
      sub_18BBEB224(v7);
      *(_QWORD *)(a1 + 520) = 0;
    }
    v8 = *(_QWORD *)(a2 + 520);
    if (v8)
      *(_QWORD *)(a1 + 520) = sub_18BBEB260(v8);
  }
  return a1;
}

icu::RuleBasedBreakIterator57 *icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(icu::RuleBasedBreakIterator57 *this)
{
  UErrorCode status;

  *(_QWORD *)icu::BreakIterator::BreakIterator((uint64_t)this) = off_1E224B180;
  status = U_ZERO_ERROR;
  *((_QWORD *)this + 61) = utext_openUChars(0, 0, 0, &status);
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_DWORD *)this + 132) = 0;
  *((_BYTE *)this + 532) = 1;
  *((_DWORD *)this + 134) = 0;
  *((_DWORD *)this + 144) = 1;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  return this;
}

uint64_t icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(icu::RuleBasedBreakIterator57 *this, const icu::RuleBasedBreakIterator57 *a2)
{
  UErrorCode status;

  *(_QWORD *)icu::BreakIterator::BreakIterator(this, a2) = off_1E224B180;
  status = U_ZERO_ERROR;
  *((_QWORD *)this + 61) = utext_openUChars(0, 0, 0, &status);
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_DWORD *)this + 132) = 0;
  *((_BYTE *)this + 532) = 1;
  *((_DWORD *)this + 134) = 0;
  *((_DWORD *)this + 144) = 1;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  return icu::RuleBasedBreakIterator57::operator=((uint64_t)this, (uint64_t)a2);
}

void icu::RuleBasedBreakIterator57::~RuleBasedBreakIterator57(icu::RuleBasedBreakIterator57 *this)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E224B180;
  v3 = *((_QWORD *)this + 62);
  v2 = *((_QWORD *)this + 63);
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    if (v3)
      v4 = v3 == *((_QWORD *)this + 64);
    else
      v4 = 1;
    if (!v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v2 = *((_QWORD *)this + 63);
    }
  }
  *((_QWORD *)this + 62) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 62) = 0;
  v5 = *((_QWORD *)this + 64);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 64) = 0;
  utext_close(*((UText **)this + 61));
  v6 = *((_QWORD *)this + 65);
  if (v6)
  {
    sub_18BBEB224(v6);
    *((_QWORD *)this + 65) = 0;
  }
  v7 = (void *)*((_QWORD *)this + 68);
  if (v7)
  {
    uprv_free(v7);
    *((_QWORD *)this + 68) = 0;
  }
  v8 = *((_QWORD *)this + 70);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    *((_QWORD *)this + 70) = 0;
  }
  v9 = *((_QWORD *)this + 71);
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    *((_QWORD *)this + 71) = 0;
  }
  icu::BreakIterator::~BreakIterator(this);
}

{
  void *v1;

  icu::RuleBasedBreakIterator57::~RuleBasedBreakIterator57(this);
  icu::UMemory::operator delete(v1);
}

icu::RuleBasedBreakIterator57 *icu::RuleBasedBreakIterator57::clone@<X0>(icu::RuleBasedBreakIterator57 *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::RuleBasedBreakIterator57 *result;

  result = (icu::RuleBasedBreakIterator57 *)icu::UMemory::operator new(a3, (icu::UMemory *)0x248, a2);
  if (result)
    return (icu::RuleBasedBreakIterator57 *)icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(result, this);
  return result;
}

uint64_t icu::RuleBasedBreakIterator57::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int **v5;
  unsigned int **v6;

  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a2 + 8) == *(_DWORD *)(a1 + 8))
    {
      result = utext_equals(*(const UText **)(a1 + 488), *(const UText **)(a2 + 488));
      if (!(_DWORD)result)
        return result;
      v5 = *(unsigned int ***)(a2 + 520);
      v6 = *(unsigned int ***)(a1 + 520);
      if (v5 == v6 || v5 && v6 && sub_18BBEAAE8(v5, v6))
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t icu::RuleBasedBreakIterator57::hashCode(icu::RuleBasedBreakIterator57 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 65);
  if (result)
    return sub_18BBEAB34(result);
  return result;
}

uint64_t *icu::RuleBasedBreakIterator57::setText(uint64_t *this, UText *a2, UErrorCode *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v11;

  if (*(int *)a3 > 0)
    return this;
  v5 = (uint64_t)this;
  (*(void (**)(uint64_t *))(*this + 200))(this);
  *(_QWORD *)(v5 + 488) = utext_clone(*(UText **)(v5 + 488), a2, 0, 1, a3);
  v7 = *(_QWORD *)(v5 + 512);
  if (!v7)
  {
    this = icu::UMemory::operator new(0, (icu::UMemory *)0x20, v6);
    if (this)
    {
      v11 = &unk_18BDE01E0;
      this = (uint64_t *)icu::UCharCharacterIterator::UCharCharacterIterator(this, &v11, 0);
      *(_QWORD *)(v5 + 512) = this;
      v7 = *(_QWORD *)(v5 + 512);
      if (v7)
        goto LABEL_3;
    }
    else
    {
      *(_QWORD *)(v5 + 512) = 0;
    }
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    return this;
  }
LABEL_3:
  v8 = *(_QWORD *)(v5 + 496);
  if (v8 != *(_QWORD *)(v5 + 504) && v8 != 0 && v8 != v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v7 = *(_QWORD *)(v5 + 512);
  }
  *(_QWORD *)(v5 + 496) = v7;
  return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
}

UText *icu::RuleBasedBreakIterator57::getUText(const UText **this, UText *dest, UErrorCode *status)
{
  return utext_clone(dest, this[61], 0, 1, status);
}

uint64_t icu::RuleBasedBreakIterator57::getText(icu::RuleBasedBreakIterator57 *this)
{
  return *((_QWORD *)this + 62);
}

uint64_t icu::RuleBasedBreakIterator57::adoptText(icu::RuleBasedBreakIterator57 *this, icu::CharacterIterator *a2)
{
  uint64_t v4;
  UText *v6;
  __n128 v7;
  UErrorCode status;

  v4 = *((_QWORD *)this + 62);
  if (v4 != *((_QWORD *)this + 63) && v4 && v4 != *((_QWORD *)this + 64))
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 62) = a2;
  status = U_ZERO_ERROR;
  (*(void (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 200))(this);
  if (a2 && !*((_DWORD *)a2 + 4))
    v7.n128_f64[0] = utext_openCharacterIterator(*((UText **)this + 61), (int *)a2, &status);
  else
    v6 = utext_openUChars(*((UText **)this + 61), 0, 0, &status);
  *((_QWORD *)this + 61) = v6;
  return (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *, __n128))(*(_QWORD *)this + 80))(this, v7);
}

uint64_t icu::RuleBasedBreakIterator57::setText(icu::RuleBasedBreakIterator57 *this, UChar **a2)
{
  unint64_t v4;
  uint64_t *v5;
  UChar **v6;
  icu::StringCharacterIterator *v7;
  icu::StringCharacterIterator *v8;
  UErrorCode status;

  status = U_ZERO_ERROR;
  (*(void (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 200))(this);
  *((_QWORD *)this + 61) = utext_openConstUnicodeString(*((UText **)this + 61), (uint64_t)a2, &status);
  v6 = (UChar **)*((_QWORD *)this + 63);
  if (v6)
  {
    icu::StringCharacterIterator::setText(v6, a2);
    v7 = (icu::StringCharacterIterator *)*((_QWORD *)this + 63);
  }
  else
  {
    v7 = (icu::StringCharacterIterator *)icu::UMemory::operator new(v5, (icu::UMemory *)0x60, v4);
    if (v7)
      v7 = (icu::StringCharacterIterator *)icu::StringCharacterIterator::StringCharacterIterator(v7, (const icu::UnicodeString *)a2);
    *((_QWORD *)this + 63) = v7;
  }
  v8 = (icu::StringCharacterIterator *)*((_QWORD *)this + 62);
  if (v8 != v7 && v8 && v8 != *((icu::StringCharacterIterator **)this + 64))
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v8 + 8))(*((_QWORD *)this + 62));
    v7 = (icu::StringCharacterIterator *)*((_QWORD *)this + 63);
  }
  *((_QWORD *)this + 62) = v7;
  return (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 80))(this);
}

const UText **icu::RuleBasedBreakIterator57::refreshInputText(const UText **this, UText *a2, UErrorCode *a3)
{
  int64_t NativeIndex;
  UText *v7;

  if (*(int *)a3 <= 0)
  {
    if (!a2
      || (NativeIndex = utext_getNativeIndex(this[61]),
          v7 = utext_clone((UText *)this[61], a2, 0, 1, a3),
          this[61] = v7,
          *(int *)a3 <= 0)
      && (utext_setNativeIndex(v7, NativeIndex), utext_getNativeIndex(this[61]) != NativeIndex))
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return this;
}

uint64_t icu::RuleBasedBreakIterator57::first(icu::RuleBasedBreakIterator57 *this)
{
  (*(void (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 200))(this);
  *((_DWORD *)this + 132) = 0;
  *((_BYTE *)this + 532) = 1;
  utext_setNativeIndex(*((UText **)this + 61), 0);
  return 0;
}

int64_t icu::RuleBasedBreakIterator57::last(UText **this)
{
  UText *v2;
  int64_t v3;

  ((void (*)(UText **))(*this)[1].pFuncs)(this);
  v2 = this[61];
  if (v2)
  {
    *((_BYTE *)this + 532) = 0;
    v3 = utext_nativeLength(v2);
    utext_setNativeIndex(this[61], (int)v3);
  }
  else
  {
    *((_DWORD *)this + 132) = 0;
    *((_BYTE *)this + 532) = 1;
    return 0xFFFFFFFFLL;
  }
  return v3;
}

uint64_t icu::RuleBasedBreakIterator57::next(icu::RuleBasedBreakIterator57 *this, int a2)
{
  uint64_t result;
  unsigned int v5;

  result = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 112))(this);
  if (a2 < 1)
  {
    if (a2 < 0)
    {
      do
        result = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 96))(this);
      while (!__CFADD__(a2++, 1));
    }
  }
  else
  {
    v5 = a2 + 1;
    do
    {
      result = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 104))(this);
      --v5;
    }
    while (v5 > 1);
  }
  return result;
}

uint64_t icu::RuleBasedBreakIterator57::next(icu::RuleBasedBreakIterator57 *this)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  UChar32 v8;
  UChar32 v9;

  v2 = *((_QWORD *)this + 68);
  if (v2)
  {
    v3 = *((_DWORD *)this + 139);
    if (v3 < *((_DWORD *)this + 138) - 1)
    {
      v4 = v3 + 1;
      *((_DWORD *)this + 139) = v4;
      v5 = *(unsigned int *)(v2 + 4 * v4);
      utext_setNativeIndex(*((UText **)this + 61), (int)v5);
      return v5;
    }
    (*(void (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 200))(this);
  }
  v6 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 112))(this);
  *((_DWORD *)this + 134) = 0;
  v7 = icu::RuleBasedBreakIterator57::handleNext((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 65) + 8));
  do
  {
    v5 = v7;
    if (!*((_DWORD *)this + 2))
      break;
    v8 = utext_char32At(*((UText **)this + 61), (int)v7 - 1);
    v9 = utext_char32At(*((UText **)this + 61), (int)v5);
    if (v9 == -1 || v8 == -1)
      break;
    if (!u_isalpha(v9))
      break;
    if (!u_isalpha(v8))
      break;
    v7 = icu::RuleBasedBreakIterator57::handleNext((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 65) + 8));
  }
  while ((int)v7 > (int)v5);
  if (*((_DWORD *)this + 134))
    return icu::RuleBasedBreakIterator57::checkDictionary((UText **)this, v6, v5, 0);
  return v5;
}

uint64_t icu::RuleBasedBreakIterator57::handleNext(uint64_t a1, uint64_t a2)
{
  UText *v4;
  uint64_t chunkOffset;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  _BOOL4 v13;
  uint64_t v14;
  int v15;
  unsigned __int16 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  UText *v27;
  uint64_t v28;
  UText *v29;
  uint64_t v30;
  int32_t v31;
  int64_t v32;
  uint64_t v33;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[2];
  __int128 v43;
  int v44;

  v44 = 0;
  v43 = 0u;
  memset(v42, 0, sizeof(v42));
  v41 = *(unsigned int *)(a2 + 4);
  *(_BYTE *)(a1 + 532) = 1;
  *(_DWORD *)(a1 + 528) = 0;
  v4 = *(UText **)(a1 + 488);
  chunkOffset = v4->chunkOffset;
  if ((int)chunkOffset <= v4->nativeIndexingLimit)
  {
    v6 = v4->chunkNativeStart + chunkOffset;
  }
  else
  {
    v6 = ((uint64_t (*)(void))v4->pFuncs->mapOffsetToNative)();
    v4 = *(UText **)(a1 + 488);
    LODWORD(chunkOffset) = v4->chunkOffset;
  }
  if ((int)chunkOffset >= v4->chunkLength || (v7 = v4->chunkContents[(int)chunkOffset], v7 >> 11 > 0x1A))
    v7 = utext_next32(v4);
  else
    v4->chunkOffset = chunkOffset + 1;
  v8 = 0xFFFFFFFFLL;
  if (!*(_QWORD *)(a1 + 520) || v7 == -1)
    return v8;
  v9 = *(_DWORD *)(a2 + 8) & 2;
  v10 = v9 == 0;
  v38 = a2 + 26;
  v11 = v41;
  v35 = v6;
  v39 = v6;
  v40 = a2 + 16;
LABEL_11:
  v37 = v7 & 0x1F;
  if (v7 >> 10 == 54)
    v12 = 320;
  else
    v12 = 0;
  v36 = v12 + (v7 >> 5);
  while (1)
  {
    if (v7 != -1)
    {
      v13 = v10 == 1;
      if (v10 != 1)
        goto LABEL_20;
      v14 = *(_QWORD *)(a1 + 520);
      if (!HIWORD(v7))
      {
        v9 = *(unsigned __int16 *)(*(_QWORD *)(v14 + 64)
                                 + 2
                                 * (v37 + 4 * *(unsigned __int16 *)(*(_QWORD *)(v14 + 64) + 2 * v36)));
        if ((v9 & 0x4000) == 0)
          goto LABEL_20;
        goto LABEL_19;
      }
      if (HIWORD(v7) > 0x10u)
      {
        v9 = *(unsigned __int16 *)(v14 + 96);
        if ((v9 & 0x4000) == 0)
          goto LABEL_20;
      }
      else
      {
        v25 = (*(uint64_t (**)(_QWORD))(v14 + 80))(*(unsigned __int16 *)(*(_QWORD *)(v14 + 64)
                                                                                 + 2
                                                                                 * (((v7 >> 10) & 0x1F)
                                                                                  + 4
                                                                                  * *(unsigned __int16 *)(*(_QWORD *)(v14 + 64) + 2 * (((v7 >> 10) + 55232) >> 5)))));
        v26 = *(_QWORD *)(a1 + 520);
        if (v25 < 1)
          v9 = *(unsigned __int16 *)(v26 + 96);
        else
          v9 = *(unsigned __int16 *)(*(_QWORD *)(v26 + 64)
                                   + 2
                                   * (v37
                                    + 4
                                    * *(unsigned __int16 *)(*(_QWORD *)(v26 + 64)
                                                                        + 2 * (v25 + ((v7 >> 5) & 0x1F)))));
        if ((v9 & 0x4000) == 0)
        {
LABEL_20:
          v15 = *(unsigned __int16 *)(v40 + v11 + 2 * v9 + 8);
          v11 = (v41 * v15);
          v16 = (unsigned __int16 *)(v40 + v11);
          v17 = *(unsigned __int16 *)(v40 + v11);
          if (v17 != 0xFFFF)
            goto LABEL_30;
          if (v10)
          {
LABEL_25:
            v18 = *(_QWORD *)(a1 + 488);
            v19 = *(unsigned int *)(v18 + 40);
            if ((int)v19 > *(_DWORD *)(v18 + 28))
            {
              v39 = (*(uint64_t (**)(void))(*(_QWORD *)(v18 + 56) + 64))();
              v17 = *v16;
LABEL_29:
              *(_DWORD *)(a1 + 528) = (__int16)v16[2];
              goto LABEL_30;
            }
            v39 = *(_QWORD *)(v18 + 32) + v19;
          }
          v17 = 0xFFFF;
          goto LABEL_29;
        }
      }
LABEL_19:
      ++*(_DWORD *)(a1 + 536);
      v9 &= ~0x4000u;
      goto LABEL_20;
    }
    if (v10 == 2)
      break;
    v13 = 0;
    v15 = *(unsigned __int16 *)(v38 + v11);
    v11 = (v41 * v15);
    v16 = (unsigned __int16 *)(v40 + v11);
    v17 = *(unsigned __int16 *)(v40 + v11);
    v9 = 1;
    v10 = 2;
    if (v17 == 0xFFFF)
      goto LABEL_25;
LABEL_30:
    if ((__int16)v17 >= 1 && SLODWORD(v42[0]) >= 1)
    {
      v20 = 0;
      while (*((unsigned __int16 *)&v43 + v20 + 2) != v17)
      {
        if (LODWORD(v42[0]) == ++v20)
          goto LABEL_37;
      }
      v8 = *((unsigned int *)v42 + v20 + 1);
      if ((v8 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 528) = (__int16)v16[2];
        v29 = *(UText **)(a1 + 488);
        v33 = v8 - v29->chunkNativeStart;
        if (v33 < 0 || v33 >= v29->nativeIndexingLimit || v29->chunkContents[v33] >> 10 > 0x36u)
        {
          v32 = v8;
          goto LABEL_79;
        }
LABEL_74:
        v29->chunkOffset = v33;
        return v8;
      }
    }
LABEL_37:
    v21 = v16[1];
    if (v21)
    {
      v22 = *(_QWORD *)(a1 + 488);
      v23 = *(unsigned int *)(v22 + 40);
      if ((int)v23 <= *(_DWORD *)(v22 + 28))
        v24 = *(_QWORD *)(v22 + 32) + v23;
      else
        LODWORD(v24) = (*(uint64_t (**)(void))(*(_QWORD *)(v22 + 56) + 64))();
      sub_18BBE8F48(v42, v21, v24);
    }
    if (!v15)
      break;
    if (v13)
    {
      v27 = *(UText **)(a1 + 488);
      v28 = v27->chunkOffset;
      if ((int)v28 >= v27->chunkLength || (v7 = v27->chunkContents[v28], v7 >> 11 > 0x1A))
      {
        v7 = utext_next32(v27);
        v10 = 1;
      }
      else
      {
        v27->chunkOffset = v28 + 1;
        v10 = 1;
      }
      goto LABEL_11;
    }
    if (v10 <= 1)
      v10 = 1;
  }
  v8 = v39;
  v29 = *(UText **)(a1 + 488);
  if ((_DWORD)v39 == v35)
  {
    v30 = v35 - v29->chunkNativeStart;
    if (v30 < 0 || v30 >= v29->nativeIndexingLimit || v29->chunkContents[v30] >> 10 > 0x36u)
    {
      utext_setNativeIndex(v29, v35);
      v29 = *(UText **)(a1 + 488);
      LODWORD(v30) = v29->chunkOffset;
    }
    else
    {
      v29->chunkOffset = v30;
    }
    if ((int)v30 >= v29->chunkLength || v29->chunkContents[(int)v30] >> 11 > 0x1Au)
    {
      utext_next32(v29);
      v29 = *(UText **)(a1 + 488);
      v31 = v29->chunkOffset;
    }
    else
    {
      v31 = v30 + 1;
      v29->chunkOffset = v31;
    }
    if (v31 <= v29->nativeIndexingLimit)
    {
      v8 = v29->chunkNativeStart + v31;
    }
    else
    {
      v8 = ((uint64_t (*)(void))v29->pFuncs->mapOffsetToNative)();
      v29 = *(UText **)(a1 + 488);
    }
  }
  v32 = (int)v8;
  v33 = (int)v8 - v29->chunkNativeStart;
  if (v33 >= 0 && v33 < v29->nativeIndexingLimit && v29->chunkContents[v33] >> 10 <= 0x36u)
    goto LABEL_74;
LABEL_79:
  utext_setNativeIndex(v29, v32);
  return v8;
}

uint64_t icu::RuleBasedBreakIterator57::checkDictionary(UText **this, uint64_t a2, uint64_t a3, int a4)
{
  int v8;
  UText *v9;
  int32_t chunkOffset;
  BOOL v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  UText *v15;
  _WORD *pExtra;
  int v17;
  unsigned int v18;
  int v19;
  __int16 r;
  uint64_t v21;
  int64_t v22;
  unsigned int v23;
  unsigned int v24;
  _WORD *v25;
  int v26;
  unsigned int v27;
  int v28;
  UText *v29;
  __int16 v30;
  UText *v31;
  uint64_t v32;
  UText *v33;
  int32_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  _WORD *v38;
  int v39;
  unsigned int v40;
  __int16 v41;
  int v42;
  UText *v43;
  UText *v44;
  uint64_t v45;
  UText *v46;
  int32_t v47;
  int v48;
  _WORD *v49;
  int v50;
  unsigned int v51;
  unint64_t v52;
  _WORD *v53;
  int v54;
  unsigned int v55;
  int v56;
  UText *v57;
  int v58;
  UText *v59;
  int v61;
  UText *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v67;
  _WORD *v68;
  int v69;
  unsigned int v70;
  int v71;
  UText *v72;
  void *LanguageBreakEngine;
  unint64_t v74;
  _WORD *v75;
  int v76;
  unsigned int v77;
  int v78;
  UText *v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  UText *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint32_t v91;
  UText *v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  UErrorCode v96;

  ((void (*)(UText **))(*this)[1].pFuncs)(this);
  if ((int)a3 - (int)a2 <= 1)
  {
    if (a4)
      return a2;
    else
      return a3;
  }
  if (a4)
    v8 = a3;
  else
    v8 = a2;
  utext_setNativeIndex(this[61], v8);
  if (a4)
  {
    v9 = this[61];
    chunkOffset = v9->chunkOffset;
    v11 = __OFSUB__(chunkOffset, 1);
    v12 = chunkOffset - 1;
    if (v12 < 0 != v11 || v9->chunkContents[v12] >> 11 > 0x1Au)
      utext_previous32(v9);
    else
      v9->chunkOffset = v12;
  }
  v96 = U_ZERO_ERROR;
  v94 = 0u;
  v95 = 0u;
  icu::UVector32::UVector32((icu::UVector32 *)&v94, &v96);
  v13 = utext_current32(this[61]);
  v14 = v13;
  if (!WORD1(v13))
  {
    v15 = this[65];
    pExtra = v15->pExtra;
    if (v13 >> 10 == 54)
      v17 = 320;
    else
      v17 = 0;
    v18 = v17 + (v13 >> 5);
    goto LABEL_21;
  }
  if (WORD1(v13) > 0x10u)
  {
    v15 = this[65];
  }
  else
  {
    v19 = ((uint64_t (*)(_QWORD))this[65]->p)(*((unsigned __int16 *)this[65]->pExtra
                                                        + 4
                                                        * *((unsigned __int16 *)this[65]->pExtra
                                                          + (((v13 >> 10) + 55232) >> 5))
                                                        + ((v13 >> 10) & 0x1F)));
    v15 = this[65];
    if (v19 >= 1)
    {
      pExtra = v15->pExtra;
      v18 = v19 + ((v14 >> 5) & 0x1F);
LABEL_21:
      r = pExtra[4 * (unsigned __int16)pExtra[v18] + (v14 & 0x1F)];
      goto LABEL_24;
    }
  }
  r = (__int16)v15->r;
LABEL_24:
  v21 = a3;
  LODWORD(v22) = a2;
  if ((r & 0x4000) == 0)
    goto LABEL_75;
  if (!a4)
  {
    while (1)
    {
      v33 = this[61];
      v34 = v33->chunkOffset;
      v11 = __OFSUB__(v34, 1);
      v35 = v34 - 1;
      if (v35 < 0 == v11)
      {
        v36 = v33->chunkContents[v35];
        if (v36 >> 11 <= 0x1A)
          break;
      }
      v37 = utext_previous32(v33);
      v36 = v37;
      if (!HIWORD(v37))
      {
        v15 = this[65];
        goto LABEL_46;
      }
      if (HIWORD(v37) > 0x10u)
      {
        v15 = this[65];
      }
      else
      {
        v42 = ((uint64_t (*)(_QWORD))this[65]->p)(*((unsigned __int16 *)this[65]->pExtra
                                                            + 4
                                                            * *((unsigned __int16 *)this[65]->pExtra
                                                              + (((v37 >> 10) + 55232) >> 5))
                                                            + ((v37 >> 10) & 0x1F)));
        v15 = this[65];
        if (v42 >= 1)
        {
          v38 = v15->pExtra;
          v40 = v42 + ((v36 >> 5) & 0x1F);
LABEL_50:
          v41 = v38[4 * (unsigned __int16)v38[v40] + (v36 & 0x1F)];
          goto LABEL_56;
        }
      }
      v41 = (__int16)v15->r;
LABEL_56:
      if (v36 == -1 || (v41 & 0x4000) == 0)
      {
        v43 = this[61];
        if (v36 != -1)
        {
          utext_next32(v43);
          v43 = this[61];
        }
        v14 = utext_current32(v43);
        v44 = this[61];
        v45 = v44->chunkOffset;
        if ((int)v45 <= v44->nativeIndexingLimit)
          v22 = v44->chunkNativeStart + v45;
        else
          LODWORD(v22) = ((uint64_t (*)(void))v44->pFuncs->mapOffsetToNative)();
        v21 = a3;
        goto LABEL_69;
      }
    }
    v33->chunkOffset = v35;
LABEL_46:
    v38 = v15->pExtra;
    if ((v36 & 0xFC00) == 0xD800)
      v39 = 320;
    else
      v39 = 0;
    v40 = v39 + (v36 >> 5);
    goto LABEL_50;
  }
  do
  {
    utext_next32(this[61]);
    v23 = utext_current32(this[61]);
    v24 = v23;
    if (HIWORD(v23))
    {
      if (HIWORD(v23) > 0x10u)
      {
        v29 = this[65];
LABEL_36:
        v30 = (__int16)v29->r;
        continue;
      }
      v28 = ((uint64_t (*)(_QWORD))this[65]->p)(*((unsigned __int16 *)this[65]->pExtra
                                                          + 4
                                                          * *((unsigned __int16 *)this[65]->pExtra
                                                            + (((v23 >> 10) + 55232) >> 5))
                                                          + ((v23 >> 10) & 0x1F)));
      v29 = this[65];
      if (v28 < 1)
        goto LABEL_36;
      v25 = v29->pExtra;
      v27 = v28 + ((v24 >> 5) & 0x1F);
    }
    else
    {
      v25 = this[65]->pExtra;
      if (v23 >> 10 == 54)
        v26 = 320;
      else
        v26 = 0;
      v27 = v26 + (v23 >> 5);
    }
    v30 = v25[4 * (unsigned __int16)v25[v27] + (v24 & 0x1F)];
  }
  while (v24 != -1 && (v30 & 0x4000) != 0);
  v31 = this[61];
  v32 = v31->chunkOffset;
  if ((int)v32 <= v31->nativeIndexingLimit)
    v21 = v31->chunkNativeStart + v32;
  else
    v21 = ((uint64_t (*)(void))v31->pFuncs->mapOffsetToNative)();
  v46 = this[61];
  v47 = v46->chunkOffset;
  v11 = __OFSUB__(v47, 1);
  v48 = v47 - 1;
  if (v48 < 0 == v11)
  {
    v14 = v46->chunkContents[v48];
    if (v14 >> 11 < 0x1B)
    {
      v46->chunkOffset = v48;
      LODWORD(v22) = a2;
      goto LABEL_70;
    }
  }
  v14 = utext_previous32(v46);
  LODWORD(v22) = a2;
LABEL_69:
  if (v14 >= 0x10000)
  {
    if (WORD1(v14) > 0x10u)
    {
      v59 = this[65];
    }
    else
    {
      v58 = ((uint64_t (*)(_QWORD))this[65]->p)(*((unsigned __int16 *)this[65]->pExtra
                                                          + 4
                                                          * *((unsigned __int16 *)this[65]->pExtra
                                                            + (((v14 >> 10) + 55232) >> 5))
                                                          + ((v14 >> 10) & 0x1F)));
      v59 = this[65];
      if (v58 >= 1)
      {
        v49 = v59->pExtra;
        v51 = v58 + ((v14 >> 5) & 0x1F);
        goto LABEL_74;
      }
    }
    r = (__int16)v59->r;
    if (a4)
      goto LABEL_76;
  }
  else
  {
LABEL_70:
    v49 = this[65]->pExtra;
    if ((v14 & 0xFC00) == 0xD800)
      v50 = 320;
    else
      v50 = 0;
    v51 = v50 + (v14 >> 5);
LABEL_74:
    r = v49[4 * (unsigned __int16)v49[v51] + (v14 & 0x1F)];
LABEL_75:
    if (a4)
    {
LABEL_76:
      utext_setNativeIndex(this[61], (int)v22);
      v52 = utext_current32(this[61]);
      v14 = v52;
      if (WORD1(v52))
      {
        if (WORD1(v52) > 0x10u)
        {
          v57 = this[65];
        }
        else
        {
          v56 = ((uint64_t (*)(_QWORD))this[65]->p)(*((unsigned __int16 *)this[65]->pExtra
                                                              + 4
                                                              * *((unsigned __int16 *)this[65]->pExtra
                                                                + (((v52 >> 10) + 55232) >> 5))
                                                              + ((v52 >> 10) & 0x1F)));
          v57 = this[65];
          if (v56 >= 1)
          {
            v53 = v57->pExtra;
            v55 = v56 + ((v14 >> 5) & 0x1F);
            goto LABEL_84;
          }
        }
        r = (__int16)v57->r;
      }
      else
      {
        v53 = this[65]->pExtra;
        if (v52 >> 10 == 54)
          v54 = 320;
        else
          v54 = 0;
        v55 = v54 + (v52 >> 5);
LABEL_84:
        r = v53[4 * (unsigned __int16)v53[v55] + (v14 & 0x1F)];
      }
    }
  }
  if (v96 > U_ZERO_ERROR)
  {
LABEL_91:
    if (a4)
      a3 = a2;
    else
      a3 = a3;
    utext_setNativeIndex(this[61], (int)a3);
    goto LABEL_95;
  }
  v61 = 0;
  while (2)
  {
    while (2)
    {
      v62 = this[61];
      v63 = v62->chunkOffset;
      if ((int)v63 <= v62->nativeIndexingLimit)
        v64 = v62->chunkNativeStart + v63;
      else
        v64 = ((uint64_t (*)(void))v62->pFuncs->mapOffsetToNative)();
      v65 = (uint64_t *)(r & 0x4000);
      if ((int)v21 > (int)v64 && (_DWORD)v65 == 0)
      {
        utext_next32(this[61]);
        v67 = utext_current32(this[61]);
        v14 = v67;
        if (!WORD1(v67))
        {
          v68 = this[65]->pExtra;
          if (v67 >> 10 == 54)
            v69 = 320;
          else
            v69 = 0;
          v70 = v69 + (v67 >> 5);
          goto LABEL_114;
        }
        if (WORD1(v67) > 0x10u)
        {
          v72 = this[65];
        }
        else
        {
          v71 = ((uint64_t (*)(_QWORD))this[65]->p)(*((unsigned __int16 *)this[65]->pExtra
                                                              + 4
                                                              * *((unsigned __int16 *)this[65]->pExtra
                                                                + (((v67 >> 10) + 55232) >> 5))
                                                              + ((v67 >> 10) & 0x1F)));
          v72 = this[65];
          if (v71 >= 1)
          {
            v68 = v72->pExtra;
            v70 = v71 + ((v14 >> 5) & 0x1F);
LABEL_114:
            r = v68[4 * (unsigned __int16)v68[v70] + (v14 & 0x1F)];
            continue;
          }
        }
        r = (__int16)v72->r;
        continue;
      }
      break;
    }
    if ((int)v21 <= (int)v64)
      break;
    LanguageBreakEngine = icu::RuleBasedBreakIterator57::getLanguageBreakEngine((icu::RuleBasedBreakIterator57 *)this, v14, v65);
    if (LanguageBreakEngine)
      v61 += (*(uint64_t (**)(void *, UText *, uint64_t, uint64_t, __int128 *, _QWORD, UErrorCode *))(*(_QWORD *)LanguageBreakEngine + 32))(LanguageBreakEngine, this[61], v64, v21, &v94, 0, &v96);
    v74 = utext_current32(this[61]);
    v14 = v74;
    if (WORD1(v74))
    {
      if (WORD1(v74) > 0x10u)
      {
        v79 = this[65];
      }
      else
      {
        v78 = ((uint64_t (*)(_QWORD))this[65]->p)(*((unsigned __int16 *)this[65]->pExtra
                                                            + 4
                                                            * *((unsigned __int16 *)this[65]->pExtra
                                                              + (((v74 >> 10) + 55232) >> 5))
                                                            + ((v74 >> 10) & 0x1F)));
        v79 = this[65];
        if (v78 >= 1)
        {
          v75 = v79->pExtra;
          v77 = v78 + ((v14 >> 5) & 0x1F);
          goto LABEL_128;
        }
      }
      r = (__int16)v79->r;
    }
    else
    {
      v75 = this[65]->pExtra;
      if (v74 >> 10 == 54)
        v76 = 320;
      else
        v76 = 0;
      v77 = v76 + (v74 >> 5);
LABEL_128:
      r = v75[4 * (unsigned __int16)v75[v77] + (v14 & 0x1F)];
    }
    if (v96 < U_ILLEGAL_ARGUMENT_ERROR)
      continue;
    break;
  }
  if (v61 < 1)
    goto LABEL_91;
  if (SDWORD2(v94) <= 0)
  {
    v81 = 0;
    v80 = a2 >> 31;
  }
  else
  {
    v80 = **((_DWORD **)&v95 + 1) > (int)a2;
    v81 = *(_DWORD *)(*((_QWORD *)&v95 + 1) + 4 * (DWORD2(v94) - 1));
  }
  v82 = v80 + v61;
  v83 = v81 >= (int)a3 ? v82 : v82 + 1;
  v84 = (UText *)uprv_malloc(4 * v83);
  this[68] = v84;
  if (!v84)
    goto LABEL_91;
  *((_DWORD *)this + 138) = v83;
  v85 = SDWORD2(v94);
  if (SDWORD2(v94) < 1)
    v86 = 0;
  else
    v86 = **((_DWORD **)&v95 + 1);
  if (v86 <= (int)a2)
  {
    v87 = 0;
  }
  else
  {
    v84->magic = a2;
    v87 = 1;
  }
  v88 = 0;
  v89 = *((_QWORD *)&v95 + 1);
  v90 = (v87 << 32) - 0x100000000;
  do
  {
    v91 = 0;
    if ((int)v85 >= 1 && v88 < v85)
      v91 = *(_DWORD *)(v89 + 4 * v88);
    *(&v84->magic + v87 + v88++) = v91;
    v90 += 0x100000000;
  }
  while (v61 != v88);
  if (*(signed int *)((char *)&v84->magic + (v90 >> 30)) < (int)a3)
    *(&v84->magic + (v87 + v88)) = a3;
  v92 = *this;
  if (a4)
    v93 = ((uint64_t (*)(UText **, uint64_t))v92->privA)(this, a3);
  else
    v93 = (*(uint64_t (**)(UText **, uint64_t))&v92->b)(this, a2);
  a3 = v93;
LABEL_95:
  icu::UVector32::~UVector32((void **)&v94);
  return a3;
}

uint64_t icu::RuleBasedBreakIterator57::previous(icu::RuleBasedBreakIterator57 *this)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  UChar32 v11;
  UChar32 v12;
  int v15;
  UText *v16;
  int32_t chunkOffset;
  int v18;
  uint64_t v19;
  int v20;
  char v21;

  v2 = *((_QWORD *)this + 68);
  if (v2)
  {
    v3 = *((_DWORD *)this + 139);
    v4 = __OFSUB__(v3, 1);
    v5 = v3 - 1;
    if (v5 < 0 == v4)
    {
      *((_DWORD *)this + 139) = v5;
      if (!v5)
        *((_BYTE *)this + 532) = 0;
      v6 = *(unsigned int *)(v2 + 4 * v5);
      utext_setNativeIndex(*((UText **)this + 61), (int)v6);
      return v6;
    }
    (*(void (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 200))(this);
  }
  if (*((_QWORD *)this + 61)
    && (v7 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 112))(this), (_DWORD)v7))
  {
    v8 = v7;
    v9 = (uint64_t *)*((_QWORD *)this + 65);
    if (v9[4] || v9[3])
    {
      v10 = icu::RuleBasedBreakIterator57::handlePrevious((uint64_t)this, v9[2]);
      do
      {
        v6 = v10;
        if (!*((_DWORD *)this + 2))
          break;
        v11 = utext_char32At(*((UText **)this + 61), (int)v10 - 1);
        v12 = utext_char32At(*((UText **)this + 61), (int)v6);
        if (v12 == -1 || v11 == -1)
          break;
        if (!u_isalpha(v12))
          break;
        if (!u_isalpha(v11))
          break;
        v10 = icu::RuleBasedBreakIterator57::handlePrevious((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 65) + 16));
      }
      while ((int)v10 < (int)v6);
      if (*((_DWORD *)this + 134))
        return icu::RuleBasedBreakIterator57::checkDictionary((UText **)this, v6, v8, 1);
    }
    else
    {
      v15 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 112))(this);
      v16 = (UText *)*((_QWORD *)this + 61);
      chunkOffset = v16->chunkOffset;
      v4 = __OFSUB__(chunkOffset, 1);
      v18 = chunkOffset - 1;
      if (v18 < 0 != v4 || v16->chunkContents[v18] >> 11 > 0x1Au)
        utext_previous32(v16);
      else
        v16->chunkOffset = v18;
      v6 = icu::RuleBasedBreakIterator57::handlePrevious((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 65) + 16));
      if ((_DWORD)v6 == -1)
      {
        utext_setNativeIndex(*((UText **)this + 61), 0);
        v6 = 0;
      }
      v19 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 104))(this);
      v20 = 0;
      v21 = 0;
      if ((_DWORD)v19 != -1 && (int)v19 < v15)
      {
        do
        {
          v6 = v19;
          v20 = *((_DWORD *)this + 132);
          v19 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 104))(this);
        }
        while ((_DWORD)v19 != -1 && (int)v19 < v15);
        v21 = 1;
      }
      utext_setNativeIndex(*((UText **)this + 61), (int)v6);
      *((_DWORD *)this + 132) = v20;
      *((_BYTE *)this + 532) = v21;
    }
  }
  else
  {
    *((_DWORD *)this + 132) = 0;
    *((_BYTE *)this + 532) = 1;
    return 0xFFFFFFFFLL;
  }
  return v6;
}

uint64_t icu::RuleBasedBreakIterator57::handlePrevious(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  UText *v5;
  uint64_t chunkOffset;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int16 *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  UText *v31;
  int32_t v32;
  int v33;
  int v34;
  uint64_t v35;
  UText *v36;
  UText *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v52[2];
  __int128 v53;
  int v54;

  v2 = a1;
  v54 = 0;
  v53 = 0u;
  memset(v52, 0, sizeof(v52));
  *(_BYTE *)(a1 + 532) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  v3 = *(_QWORD *)(a1 + 488);
  if (!v3 || !*(_QWORD *)(v2 + 520))
    return 0xFFFFFFFFLL;
  v4 = *(int *)(v3 + 40);
  if ((int)v4 > *(_DWORD *)(v3 + 28))
  {
    if ((*(uint64_t (**)(void))(*(_QWORD *)(v3 + 56) + 64))())
      goto LABEL_5;
    return 0xFFFFFFFFLL;
  }
  if (!(*(_QWORD *)(v3 + 32) + v4))
    return 0xFFFFFFFFLL;
LABEL_5:
  v5 = *(UText **)(v2 + 488);
  chunkOffset = v5->chunkOffset;
  if ((int)chunkOffset <= v5->nativeIndexingLimit)
  {
    v7 = v5->chunkNativeStart + chunkOffset;
  }
  else
  {
    v7 = ((uint64_t (*)(void))v5->pFuncs->mapOffsetToNative)();
    v5 = *(UText **)(v2 + 488);
    LODWORD(chunkOffset) = v5->chunkOffset;
  }
  v9 = __OFSUB__((_DWORD)chunkOffset, 1);
  v10 = chunkOffset - 1;
  v46 = v7;
  if (v10 < 0 != v9 || (v11 = v5->chunkContents[v10], v11 >> 11 > 0x1A))
    v11 = utext_previous32(v5);
  else
    v5->chunkOffset = v10;
  v12 = a2 + 16;
  v13 = *(unsigned int *)(a2 + 4);
  if ((*(_DWORD *)(a2 + 8) & 2) != 0)
    LOWORD(v14) = 2;
  else
    LOWORD(v14) = 3;
  v15 = ((*(_DWORD *)(a2 + 8) & 2u) >> 1) ^ 1;
  v49 = v46;
  v50 = v2;
LABEL_18:
  v48 = v11 & 0x1F;
  if (v11 >> 10 == 54)
    v16 = 320;
  else
    v16 = 0;
  v47 = v16 + (v11 >> 5);
  while (v11 != -1)
  {
    if (v15 != 1)
    {
      v18 = 0;
      goto LABEL_31;
    }
    v17 = *(_QWORD *)(v2 + 520);
    if (HIWORD(v11))
    {
      if (HIWORD(v11) > 0x10u)
      {
        v14 = *(_DWORD *)(v17 + 96);
        if ((v14 & 0x4000) == 0)
          goto LABEL_27;
      }
      else
      {
        v29 = (*(uint64_t (**)(_QWORD))(v17 + 80))(*(unsigned __int16 *)(*(_QWORD *)(v17 + 64)
                                                                                 + 2
                                                                                 * (((v11 >> 10) & 0x1F)
                                                                                  + 4
                                                                                  * *(unsigned __int16 *)(*(_QWORD *)(v17 + 64) + 2 * (((v11 >> 10) + 55232) >> 5)))));
        v30 = *(_QWORD *)(v2 + 520);
        if (v29 < 1)
          v14 = *(_DWORD *)(v30 + 96);
        else
          LOWORD(v14) = *(_WORD *)(*(_QWORD *)(v30 + 64)
                                 + 2
                                 * (v48
                                  + 4
                                  * *(unsigned __int16 *)(*(_QWORD *)(v30 + 64)
                                                                      + 2 * (v29 + ((v11 >> 5) & 0x1F)))));
        if ((v14 & 0x4000) == 0)
          goto LABEL_27;
      }
LABEL_26:
      ++*(_DWORD *)(v2 + 536);
      LOWORD(v14) = v14 & 0xBFFF;
      goto LABEL_27;
    }
    LOWORD(v14) = *(_WORD *)(*(_QWORD *)(v17 + 64)
                           + 2 * (v48 + 4 * *(unsigned __int16 *)(*(_QWORD *)(v17 + 64) + 2 * v47)));
    if ((v14 & 0x4000) != 0)
      goto LABEL_26;
LABEL_27:
    v18 = 1;
    v15 = 1;
LABEL_31:
    v19 = *(unsigned __int16 *)(v12 + v13 + 2 * (unsigned __int16)v14 + 8);
    v13 = (*(_DWORD *)(a2 + 4) * v19);
    v20 = (unsigned __int16 *)(v12 + v13);
    v21 = *(unsigned __int16 *)(v12 + v13);
    if (v21 == 0xFFFF)
    {
      v22 = *(_QWORD *)(v2 + 488);
      v23 = *(unsigned int *)(v22 + 40);
      if ((int)v23 <= *(_DWORD *)(v22 + 28))
      {
        v49 = *(_QWORD *)(v22 + 32) + v23;
        v21 = 0xFFFF;
      }
      else
      {
        v49 = (*(uint64_t (**)(void))(*(_QWORD *)(v22 + 56) + 64))();
        v21 = *v20;
      }
    }
    if ((__int16)v21 >= 1 && SLODWORD(v52[0]) >= 1)
    {
      v24 = 0;
      while (*((unsigned __int16 *)&v53 + v24 + 2) != v21)
      {
        if (LODWORD(v52[0]) == ++v24)
          goto LABEL_42;
      }
      v8 = *((unsigned int *)v52 + v24 + 1);
      if ((v8 & 0x80000000) == 0)
      {
        v36 = *(UText **)(v50 + 488);
        v39 = v8 - v36->chunkNativeStart;
        if (v39 < 0 || v39 >= v36->nativeIndexingLimit || v36->chunkContents[v39] >> 10 > 0x36u)
        {
          v40 = *((unsigned int *)v52 + v24 + 1);
          goto LABEL_97;
        }
LABEL_96:
        v36->chunkOffset = v39;
        return v8;
      }
    }
LABEL_42:
    v25 = v20[1];
    v2 = v50;
    if (v25)
    {
      v26 = *(_QWORD *)(v50 + 488);
      v27 = *(unsigned int *)(v26 + 40);
      if ((int)v27 <= *(_DWORD *)(v26 + 28))
        v28 = *(_QWORD *)(v26 + 32) + v27;
      else
        LODWORD(v28) = (*(uint64_t (**)(void))(*(_QWORD *)(v26 + 56) + 64))();
      sub_18BBE8F48(v52, v25, v28);
    }
    if (!v19)
    {
      v34 = v46;
      v35 = v49;
      goto LABEL_64;
    }
    if (v18)
    {
      v31 = *(UText **)(v50 + 488);
      v32 = v31->chunkOffset;
      v9 = __OFSUB__(v32, 1);
      v33 = v32 - 1;
      if (v33 < 0 != v9 || (v11 = v31->chunkContents[v33], v11 >> 11 > 0x1A))
      {
        v11 = utext_previous32(v31);
        v15 = 1;
      }
      else
      {
        v31->chunkOffset = v33;
        v15 = 1;
      }
      goto LABEL_18;
    }
    if (v15 <= 1)
      v15 = 1;
  }
  if (v15 != 2)
  {
    v18 = 0;
    LOWORD(v14) = 1;
    v15 = 2;
    goto LABEL_31;
  }
  v34 = v46;
  v35 = v49;
  if ((_DWORD)v49 == (_DWORD)v46)
  {
    v37 = *(UText **)(v2 + 488);
    v38 = (int)v46 - v37->chunkNativeStart;
    if (v38 < 0 || v38 >= v37->nativeIndexingLimit || v37->chunkContents[v38] >> 10 > 0x36u)
    {
      utext_setNativeIndex(v37, (int)v46);
      v37 = *(UText **)(v2 + 488);
      LODWORD(v38) = v37->chunkOffset;
    }
    else
    {
      v37->chunkOffset = v38;
    }
    v9 = __OFSUB__((_DWORD)v38, 1);
    v41 = v38 - 1;
    if (v41 < 0 != v9 || v37->chunkContents[v41] >> 11 > 0x1Au)
      utext_previous32(v37);
    else
      v37->chunkOffset = v41;
    v36 = *(UText **)(v2 + 488);
    goto LABEL_81;
  }
LABEL_64:
  v36 = *(UText **)(v2 + 488);
  v8 = v35;
  if ((_DWORD)v35 != v34)
    goto LABEL_93;
LABEL_81:
  v42 = v34 - v36->chunkNativeStart;
  if (v42 < 0 || v42 >= v36->nativeIndexingLimit || v36->chunkContents[v42] >> 10 > 0x36u)
  {
    utext_setNativeIndex(v36, v34);
    v43 = v50;
    v36 = *(UText **)(v50 + 488);
    LODWORD(v42) = v36->chunkOffset;
  }
  else
  {
    v36->chunkOffset = v42;
    v43 = v50;
  }
  v9 = __OFSUB__((_DWORD)v42, 1);
  v44 = v42 - 1;
  if (v44 < 0 != v9 || v36->chunkContents[v44] >> 11 > 0x1Au)
  {
    utext_previous32(v36);
    v36 = *(UText **)(v43 + 488);
    v44 = v36->chunkOffset;
  }
  else
  {
    v36->chunkOffset = v44;
  }
  if (v44 <= v36->nativeIndexingLimit)
  {
    v8 = v36->chunkNativeStart + v44;
  }
  else
  {
    v8 = ((uint64_t (*)(void))v36->pFuncs->mapOffsetToNative)();
    v36 = *(UText **)(v43 + 488);
  }
LABEL_93:
  v40 = (int)v8;
  v39 = (int)v8 - v36->chunkNativeStart;
  if (v39 >= 0 && v39 < v36->nativeIndexingLimit && v36->chunkContents[v39] >> 10 <= 0x36u)
    goto LABEL_96;
LABEL_97:
  utext_setNativeIndex(v36, v40);
  return v8;
}

uint64_t icu::RuleBasedBreakIterator57::following(icu::RuleBasedBreakIterator57 *this, int a2)
{
  UText *v3;
  int NativeIndex;
  int v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(icu::RuleBasedBreakIterator57 *);
  uint64_t v12;
  UText *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  UText *v17;
  int32_t chunkOffset;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = (UText *)*((_QWORD *)this + 61);
  if (!v3 || utext_nativeLength(v3) <= a2)
  {
    (*(void (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 88))(this);
LABEL_11:
    v10 = *(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 104);
    return v10(this);
  }
  if (a2 < 0)
  {
    v10 = *(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 80);
    return v10(this);
  }
  utext_setNativeIndex(*((UText **)this + 61), a2);
  NativeIndex = utext_getNativeIndex(*((const UText **)this + 61));
  v6 = NativeIndex;
  v7 = (int *)*((_QWORD *)this + 68);
  if (v7)
  {
    if (*v7 <= NativeIndex && v7[*((int *)this + 138) - 1] > NativeIndex)
    {
      v8 = 0;
      do
      {
        *((_DWORD *)this + 139) = v8;
        v9 = v7[v8++];
      }
      while ((int)v9 <= NativeIndex);
      utext_setNativeIndex(*((UText **)this + 61), (int)v9);
      return v9;
    }
    (*(void (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 200))(this);
  }
  v12 = *((_QWORD *)this + 65);
  if (!*(_QWORD *)(v12 + 32))
  {
    v16 = *(_QWORD *)(v12 + 24);
    utext_setNativeIndex(*((UText **)this + 61), v6);
    if (v16)
    {
      v17 = (UText *)*((_QWORD *)this + 61);
      chunkOffset = v17->chunkOffset;
      v19 = __OFSUB__(chunkOffset, 1);
      v20 = chunkOffset - 1;
      if (v20 < 0 != v19 || v17->chunkContents[v20] >> 11 > 0x1Au)
        utext_previous32(v17);
      else
        v17->chunkOffset = v20;
      icu::RuleBasedBreakIterator57::handleNext((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 65) + 24));
      v21 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 96))(this);
      while (1)
      {
        v22 = *(_QWORD *)this;
        if ((int)v21 <= v6)
          break;
        v9 = v21;
        v21 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(v22 + 96))(this);
        if ((int)v21 <= v6)
          return v9;
      }
      v9 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(v22 + 104))(this);
      if ((int)v9 > v6)
        return v9;
    }
    else if (v6 && (v6 != 1 || utext_getNativeIndex(*((const UText **)this + 61))))
    {
      v23 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 96))(this);
      v9 = v23;
      if ((_DWORD)v23 == -1 || (int)v23 > v6)
        return v9;
      do
        v15 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 104))(this);
      while ((_DWORD)v15 != -1 && (int)v15 <= v6);
      return v15;
    }
    goto LABEL_11;
  }
  utext_setNativeIndex(*((UText **)this + 61), v6);
  v13 = (UText *)*((_QWORD *)this + 61);
  v14 = v13->chunkOffset;
  if ((int)v14 >= v13->chunkLength || v13->chunkContents[v14] >> 11 > 0x1Au)
    utext_next32(v13);
  else
    v13->chunkOffset = v14 + 1;
  icu::RuleBasedBreakIterator57::handlePrevious((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 65) + 32));
  v9 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 104))(this);
  if ((int)v9 > v6)
    return v9;
  do
    v15 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 104))(this);
  while ((int)v15 <= v6);
  return v15;
}

uint64_t icu::RuleBasedBreakIterator57::preceding(icu::RuleBasedBreakIterator57 *this, int a2)
{
  UText *v3;
  uint64_t (*v5)(icu::RuleBasedBreakIterator57 *);
  int NativeIndex;
  int64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  UText *v12;
  uint64_t chunkOffset;
  int64_t v14;
  uint64_t v15;
  UText *v16;
  uint64_t v17;
  uint64_t v18;
  int32_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int32_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = (UText *)*((_QWORD *)this + 61);
  if (!v3 || utext_nativeLength(v3) < a2)
  {
    v5 = *(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 88);
    return v5(this);
  }
  if (a2 < 0)
  {
    v5 = *(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 80);
    return v5(this);
  }
  utext_setNativeIndex(*((UText **)this + 61), a2);
  NativeIndex = utext_getNativeIndex(*((const UText **)this + 61));
  LODWORD(v8) = NativeIndex;
  v9 = (_DWORD *)*((_QWORD *)this + 68);
  if (!v9)
    goto LABEL_10;
  if (*v9 < NativeIndex)
  {
    v10 = *((unsigned int *)this + 138);
    if (v9[(int)v10 - 1] >= NativeIndex)
    {
      *((_DWORD *)this + 139) = 0;
      if ((int)v10 <= 0)
      {
        v21 = -1;
        *((_DWORD *)this + 139) = -1;
      }
      else
      {
        v20 = 0;
        while (v9[v20] < NativeIndex)
        {
          *((_DWORD *)this + 139) = ++v20;
          if (v10 == v20)
          {
            LODWORD(v20) = v10;
            break;
          }
        }
        v21 = v20 - 1;
        *((_DWORD *)this + 139) = v20 - 1;
        if (v20 > 1)
          goto LABEL_53;
      }
      *((_BYTE *)this + 532) = 0;
LABEL_53:
      utext_setNativeIndex(*((UText **)this + 61), (int)v9[v21]);
      return *(unsigned int *)(*((_QWORD *)this + 68) + 4 * *((int *)this + 139));
    }
  }
  (*(void (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 200))(this);
LABEL_10:
  v11 = *((_QWORD *)this + 65);
  if (*(_QWORD *)(v11 + 24))
  {
    utext_setNativeIndex(*((UText **)this + 61), (int)v8);
    v12 = (UText *)*((_QWORD *)this + 61);
    chunkOffset = v12->chunkOffset;
    if ((int)chunkOffset <= v12->nativeIndexingLimit)
    {
      v14 = v12->chunkNativeStart + chunkOffset;
    }
    else
    {
      LODWORD(v14) = ((uint64_t (*)(void))v12->pFuncs->mapOffsetToNative)();
      v12 = (UText *)*((_QWORD *)this + 61);
    }
    if ((_DWORD)v14 != (_DWORD)v8)
    {
      v18 = v12->chunkOffset;
      if ((int)v18 >= v12->chunkLength || v12->chunkContents[v18] >> 11 > 0x1Au)
      {
        utext_next32(v12);
        v12 = (UText *)*((_QWORD *)this + 61);
        v19 = v12->chunkOffset;
      }
      else
      {
        v19 = v18 + 1;
        v12->chunkOffset = v19;
      }
      if (v19 <= v12->nativeIndexingLimit)
      {
        v8 = v12->chunkNativeStart + v19;
      }
      else
      {
        LODWORD(v8) = ((uint64_t (*)(void))v12->pFuncs->mapOffsetToNative)();
        v12 = (UText *)*((_QWORD *)this + 61);
      }
    }
    v25 = v12->chunkOffset;
    v26 = __OFSUB__(v25, 1);
    v27 = v25 - 1;
    if (v27 < 0 != v26 || v12->chunkContents[v27] >> 11 > 0x1Au)
      utext_previous32(v12);
    else
      v12->chunkOffset = v27;
    icu::RuleBasedBreakIterator57::handleNext((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 65) + 24));
    v28 = *((_QWORD *)this + 61);
    v29 = *(unsigned int *)(v28 + 40);
    if ((int)v29 <= *(_DWORD *)(v28 + 28))
      v24 = *(_QWORD *)(v28 + 32) + v29;
    else
      v24 = (*(uint64_t (**)(void))(*(_QWORD *)(v28 + 56) + 64))();
    if ((int)v8 <= (int)v24)
    {
      do
        v30 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 96))(this);
      while ((int)v30 >= (int)v8);
      return v30;
    }
  }
  else
  {
    v15 = *(_QWORD *)(v11 + 32);
    utext_setNativeIndex(*((UText **)this + 61), (int)v8);
    if (!v15)
      goto LABEL_50;
    v16 = (UText *)*((_QWORD *)this + 61);
    v17 = v16->chunkOffset;
    if ((int)v17 >= v16->chunkLength || v16->chunkContents[v17] >> 11 > 0x1Au)
      utext_next32(v16);
    else
      v16->chunkOffset = v17 + 1;
    icu::RuleBasedBreakIterator57::handlePrevious((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 65) + 32));
    v22 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 104))(this);
    do
    {
      v23 = *(_QWORD *)this;
      if ((int)v22 >= (int)v8)
        break;
      v24 = v22;
      v22 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(v23 + 104))(this);
    }
    while ((int)v22 < (int)v8);
    v24 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(v23 + 96))(this);
    if ((int)v24 >= (int)v8)
    {
LABEL_50:
      v5 = *(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 96);
      return v5(this);
    }
  }
  return v24;
}

BOOL icu::RuleBasedBreakIterator57::isBoundary(UText **this, unsigned int a2)
{
  UText *v5;
  uint64_t chunkOffset;
  uint64_t v7;

  if (!a2)
  {
    ((void (*)(UText **))(*this)->p)(this);
    return 1;
  }
  if (utext_nativeLength(this[61]) == a2)
  {
    ((void (*)(UText **))(*this)->q)(this);
    return 1;
  }
  if ((a2 & 0x80000000) != 0)
  {
    ((void (*)(UText **))(*this)->p)(this);
    return 0;
  }
  if (utext_nativeLength(this[61]) < a2)
  {
    ((void (*)(UText **))(*this)->q)(this);
    return 0;
  }
  utext_previous32From(this[61], a2);
  v5 = this[61];
  chunkOffset = v5->chunkOffset;
  if ((int)chunkOffset <= v5->nativeIndexingLimit)
    v7 = v5->chunkNativeStart + chunkOffset;
  else
    v7 = ((uint64_t (*)(void))v5->pFuncs->mapOffsetToNative)();
  return (*(unsigned int (**)(UText **, uint64_t))&(*this)->b)(this, v7) == a2;
}

uint64_t icu::RuleBasedBreakIterator57::current(icu::RuleBasedBreakIterator57 *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 61);
  v2 = *(unsigned int *)(v1 + 40);
  if ((int)v2 <= *(_DWORD *)(v1 + 28))
    return *(_QWORD *)(v1 + 32) + v2;
  else
    return (*(uint64_t (**)(void))(*(_QWORD *)(v1 + 56) + 64))();
}

_DWORD *sub_18BBE8F48(_DWORD *result, unsigned __int16 a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *result;
  if ((int)v3 < 1)
  {
    LODWORD(v3) = 0;
LABEL_7:
    if (v3 >= 7)
      LODWORD(v3) = 7;
    *((_WORD *)result + v3 + 18) = a2;
    result[v3 + 1] = a3;
    *result = v3 + 1;
  }
  else
  {
    v4 = 0;
    while (*((unsigned __int16 *)result + v4 + 18) != a2)
    {
      if (v3 == ++v4)
        goto LABEL_7;
    }
    result[v4 + 1] = a3;
  }
  return result;
}

void icu::RuleBasedBreakIterator57::reset(icu::RuleBasedBreakIterator57 *this)
{
  _QWORD *v2;
  void *v3;

  v2 = (_QWORD *)((char *)this + 544);
  v3 = (void *)*((_QWORD *)this + 68);
  if (v3)
    uprv_free(v3);
  *((_DWORD *)this + 134) = 0;
  *v2 = 0;
  v2[1] = 0;
}

uint64_t icu::RuleBasedBreakIterator57::makeRuleStatusValid(uint64_t this)
{
  uint64_t v1;

  if (!*(_BYTE *)(this + 532))
  {
    v1 = this;
    if (*(_QWORD *)(this + 488)
      && (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 112))(this), (_DWORD)this))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 112))(v1);
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 96))(v1);
      if (*(int *)(v1 + 552) >= 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v1 + 200))(v1);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 104))(v1);
    }
    else
    {
      *(_DWORD *)(v1 + 528) = 0;
      *(_BYTE *)(v1 + 532) = 1;
    }
  }
  return this;
}

uint64_t icu::RuleBasedBreakIterator57::getRuleStatus(icu::RuleBasedBreakIterator57 *this)
{
  icu::RuleBasedBreakIterator57::makeRuleStatusValid((uint64_t)this);
  return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 65) + 48)
                         + 4
                         * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 65) + 48) + 4 * *((int *)this + 132))
                          + *((_DWORD *)this + 132)));
}

uint64_t icu::RuleBasedBreakIterator57::getRuleStatusVec(icu::RuleBasedBreakIterator57 *this, int *a2, int a3, UErrorCode *a4)
{
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t i;

  if (*(int *)a4 > 0)
    return 0;
  icu::RuleBasedBreakIterator57::makeRuleStatusValid((uint64_t)this);
  v9 = *(_QWORD *)(*((_QWORD *)this + 65) + 48);
  result = *(unsigned int *)(v9 + 4 * *((int *)this + 132));
  v10 = result;
  if ((int)result > a3)
  {
    *a4 = U_BUFFER_OVERFLOW_ERROR;
    v10 = a3;
  }
  if (v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
      a2[i] = *(_DWORD *)(v9 + 4 * ((int)i + *((_DWORD *)this + 132) + 1));
  }
  return result;
}

uint64_t icu::RuleBasedBreakIterator57::getBinaryRules(icu::RuleBasedBreakIterator57 *this, unsigned int *a2)
{
  uint64_t v2;
  uint64_t result;

  *a2 = 0;
  v2 = *((_QWORD *)this + 65);
  if (!v2)
    return 0;
  result = *(_QWORD *)v2;
  *a2 = *(_DWORD *)(*(_QWORD *)v2 + 8);
  return result;
}

uint64_t icu::RuleBasedBreakIterator57::createBufferClone(icu::RuleBasedBreakIterator57 *this, void *a2, int *a3, UErrorCode *a4)
{
  uint64_t result;
  UErrorCode v6;

  if (*(int *)a4 > 0)
    return 0;
  if (*a3)
  {
    result = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *, void *))(*(_QWORD *)this + 32))(this, a2);
    if (result)
      v6 = U_SAFECLONE_ALLOCATED_WARNING;
    else
      v6 = U_MEMORY_ALLOCATION_ERROR;
    *a4 = v6;
  }
  else
  {
    result = 0;
    *a3 = 1;
  }
  return result;
}

void *icu::RuleBasedBreakIterator57::getLanguageBreakEngine@<X0>(icu::RuleBasedBreakIterator57 *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::UVector *v5;
  signed int v6;
  BOOL v7;
  void *v8;
  icu::UStack *v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  void *v16;
  uint64_t *v17;
  signed int v18;
  uint64_t v19;
  uint64_t v20;
  icu::UVector *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  UErrorCode v26;
  UErrorCode v27;

  v26 = U_ZERO_ERROR;
  v5 = (icu::UVector *)*((_QWORD *)this + 70);
  if (!v5)
  {
    v9 = (icu::UStack *)icu::UMemory::operator new(a3, (icu::UMemory *)0x28, a2);
    if (v9)
    {
      v5 = icu::UStack::UStack(v9, &v26);
      *((_QWORD *)this + 70) = v5;
      if (v26 < U_ILLEGAL_ARGUMENT_ERROR)
        goto LABEL_2;
      (*(void (**)(icu::UVector *))(*(_QWORD *)v5 + 8))(v5);
    }
    v8 = 0;
    *((_QWORD *)this + 70) = 0;
    return v8;
  }
LABEL_2:
  v6 = *((_DWORD *)v5 + 2);
  while (1)
  {
    v7 = __OFSUB__(v6--, 1);
    if (v6 < 0 != v7)
      break;
    v8 = (void *)icu::UVector::elementAt(*((icu::UVector **)this + 70), v6);
    if ((*(unsigned int (**)(void *, unint64_t, _QWORD))(*(_QWORD *)v8 + 24))(v8, a2, 0))
      return v8;
  }
  v10 = atomic_load((unsigned int *)&unk_1EE009390);
  if (v10 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1EE009390))
  {
    v27 = U_ZERO_ERROR;
    v12 = icu::UMemory::operator new(v11, (icu::UMemory *)0x28, a2);
    if (v12)
    {
      qword_1EE009388 = (uint64_t)icu::UStack::UStack((uint64_t)v12, (uint64_t)sub_18BBE94B8, 0, (int *)&v27);
      if (v27 <= U_ZERO_ERROR)
      {
        v14 = icu::UMemory::operator new((uint64_t *)v27, (icu::UMemory *)0x10, v13);
        v15 = v14;
        if (v14)
          sub_18BBAC4C0(v14);
        if (*(_QWORD *)(qword_1EE009388 + 24))
          icu::UVector::adoptElement((icu::UVector *)qword_1EE009388, v15, &v27);
        else
          icu::UVector::addElement((icu::UVector *)qword_1EE009388, v15, &v27);
        v16 = (void *)uprv_svc_hook();
        if (v16)
        {
          if (*(_QWORD *)(qword_1EE009388 + 24))
            icu::UVector::adoptElement((icu::UVector *)qword_1EE009388, v16, &v27);
          else
            icu::UVector::addElement((icu::UVector *)qword_1EE009388, v16, &v27);
        }
      }
    }
    else
    {
      qword_1EE009388 = 0;
    }
    sub_18BC0ECC4(4u, (uint64_t)sub_18BBE94CC);
    icu::umtx_initImplPostInit((unsigned int *)&unk_1EE009390);
  }
  v17 = (uint64_t *)qword_1EE009388;
  if (qword_1EE009388)
  {
    v18 = *(_DWORD *)(qword_1EE009388 + 8);
    while (1)
    {
      v7 = __OFSUB__(v18--, 1);
      if (v18 < 0 != v7)
        break;
      v19 = icu::UVector::elementAt((icu::UVector *)qword_1EE009388, v18);
      v20 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v19 + 16))(v19, a2, 0);
      if (v20)
      {
        v8 = (void *)v20;
        v21 = (icu::UVector *)*((_QWORD *)this + 70);
        if (*((_QWORD *)v21 + 3))
          icu::UVector::adoptElement(v21, v8, &v26);
        else
          icu::UVector::addElement(v21, v8, &v26);
        return v8;
      }
    }
  }
  v22 = *((_QWORD *)this + 71);
  if (v22)
    goto LABEL_32;
  v23 = icu::UMemory::operator new(v17, (icu::UMemory *)0x10, a2);
  v24 = v23;
  if (v23)
  {
    sub_18BBAC338(v23);
    *((_QWORD *)this + 71) = v24;
  }
  else
  {
    *((_QWORD *)this + 71) = 0;
    if (v26 <= U_ZERO_ERROR)
      v26 = U_MEMORY_ALLOCATION_ERROR;
  }
  icu::UVector::insertElementAt(*((uint64_t (***)(void *))this + 70), v24, 0, &v26);
  v22 = *((_QWORD *)this + 71);
  if (v26 < U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_32:
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v22 + 40))(v22, a2);
    return (void *)*((_QWORD *)this + 71);
  }
  else
  {
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v8 = 0;
    *((_QWORD *)this + 71) = 0;
  }
  return v8;
}

uint64_t icu::RuleBasedBreakIterator57::setBreakType(icu::RuleBasedBreakIterator57 *this, int a2)
{
  *((_DWORD *)this + 144) = a2;
  return (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(_QWORD *)this + 200))(this);
}

uint64_t sub_18BBE94B8(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_18BBE94CC()
{
  if (qword_1EE009388)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1EE009388 + 8))(qword_1EE009388);
    qword_1EE009388 = 0;
  }
  atomic_store(0, (unsigned int *)&unk_1EE009390);
  return 1;
}

icu::RuleBasedBreakIterator::DictionaryCache *icu::RuleBasedBreakIterator::DictionaryCache::DictionaryCache(icu::RuleBasedBreakIterator::DictionaryCache *this, icu::RuleBasedBreakIterator *a2, UErrorCode *a3)
{
  *(_QWORD *)this = a2;
  icu::UVector32::UVector32((icu::RuleBasedBreakIterator::DictionaryCache *)((char *)this + 8), a3);
  *((_DWORD *)this + 10) = -1;
  *(_QWORD *)((char *)this + 52) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = a2;
  icu::UVector32::UVector32((icu::RuleBasedBreakIterator::DictionaryCache *)((char *)this + 8), a3);
  *((_DWORD *)this + 10) = -1;
  *(_QWORD *)((char *)this + 52) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  return this;
}

void icu::RuleBasedBreakIterator::DictionaryCache::~DictionaryCache(void **this)
{
  icu::UVector32::~UVector32(this + 1);
}

{
  icu::UVector32::~UVector32(this + 1);
}

uint64_t icu::RuleBasedBreakIterator::DictionaryCache::reset(icu::RuleBasedBreakIterator::DictionaryCache *this)
{
  *((_DWORD *)this + 10) = -1;
  *(_QWORD *)((char *)this + 52) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  return icu::UVector32::removeAllElements((uint64_t)this + 8);
}

uint64_t icu::RuleBasedBreakIterator::DictionaryCache::following(icu::RuleBasedBreakIterator::DictionaryCache *this, int a2, int *a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (*((_DWORD *)this + 12) <= a2 || *((_DWORD *)this + 11) > a2)
    goto LABEL_3;
  v5 = *((unsigned int *)this + 10);
  v6 = *((unsigned int *)this + 4);
  if ((v5 & 0x80000000) != 0 || (int)v5 >= (int)v6 || (v7 = *((_QWORD *)this + 4), *(_DWORD *)(v7 + 4 * v5) != a2))
  {
    *((_DWORD *)this + 10) = 0;
    if ((int)v6 < 1)
LABEL_13:
      abort();
    v9 = 0;
    v10 = *((_QWORD *)this + 4);
    while (1)
    {
      v11 = *(_DWORD *)(v10 + 4 * v9);
      if (v11 > a2)
        break;
      *((_DWORD *)this + 10) = ++v9;
      if (v6 == v9)
        goto LABEL_13;
    }
    *a3 = v11;
    goto LABEL_15;
  }
  v8 = v5 + 1;
  *((_DWORD *)this + 10) = v8;
  if (v8 < (int)v6)
  {
    *a3 = *(_DWORD *)(v7 + 4 * v8);
LABEL_15:
    *a4 = *((_DWORD *)this + 14);
    return 1;
  }
LABEL_3:
  v4 = 0;
  *((_DWORD *)this + 10) = -1;
  return v4;
}

uint64_t icu::RuleBasedBreakIterator::DictionaryCache::preceding(icu::RuleBasedBreakIterator::DictionaryCache *this, int a2, int *a3, int *a4)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  uint64_t v13;

  if (*((_DWORD *)this + 11) >= a2 || (v4 = *((_DWORD *)this + 12), v4 < a2))
  {
    v5 = 0;
LABEL_4:
    *((_DWORD *)this + 10) = -1;
    return v5;
  }
  if (v4 == a2)
  {
    v5 = (*((_DWORD *)this + 4) - 1);
    *((_DWORD *)this + 10) = v5;
  }
  else
  {
    v5 = *((unsigned int *)this + 10);
  }
  v6 = v5 - 1;
  if ((int)v5 < 1)
  {
    if (!(_DWORD)v5)
      goto LABEL_4;
    v7 = *((_DWORD *)this + 4);
    goto LABEL_14;
  }
  v7 = *((_DWORD *)this + 4);
  if ((int)v5 >= v7 || (v8 = *((_QWORD *)this + 4), *(_DWORD *)(v8 + 4 * v5) != a2))
  {
LABEL_14:
    v11 = v7;
    do
    {
      *((_DWORD *)this + 10) = v11 - 1;
      if (v11 < 1)
        abort();
      v12 = 0;
      if (v7 >= 1 && v7 >= v11)
        v12 = *(_DWORD *)(*((_QWORD *)this + 4) + 4 * (v11 - 1));
      --v11;
    }
    while (v12 >= a2);
    *a3 = v12;
    v10 = v12 == *((_DWORD *)this + 11);
    goto LABEL_21;
  }
  *((_DWORD *)this + 10) = v6;
  v9 = *(_DWORD *)(v8 + 4 * v6);
  *a3 = v9;
  v10 = v9 == *((_DWORD *)this + 11);
LABEL_21:
  v13 = 56;
  if (v10)
    v13 = 52;
  *a4 = *(_DWORD *)((char *)this + v13);
  return 1;
}

uint64_t icu::RuleBasedBreakIterator::DictionaryCache::populateDictionary(uint64_t this, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  int **v11;
  icu::UVector32 *v12;
  int *v13;
  UText *v14;
  unint64_t v15;
  unsigned __int16 v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  icu::RuleBasedBreakIterator *v22;
  const char *LocaleID;
  uint64_t *v24;
  void *LanguageBreakEngine;
  int v26;
  int v27;
  int v28;
  int *v29;
  int v30;
  _DWORD *v31;
  int v32;
  UErrorCode v33;
  uint64_t v34;
  uint64_t v35;

  if ((int)a3 - a2 >= 2)
  {
    v34 = v5;
    v35 = v6;
    v11 = (int **)this;
    *(_DWORD *)(this + 40) = -1;
    *(_QWORD *)(this + 44) = 0;
    v31 = (_DWORD *)(this + 44);
    v12 = (icu::UVector32 *)(this + 8);
    *(_QWORD *)(this + 52) = 0;
    icu::UVector32::removeAllElements(this + 8);
    *((_DWORD *)v11 + 13) = a4;
    *((_DWORD *)v11 + 14) = a5;
    v33 = U_ZERO_ERROR;
    v13 = *v11;
    v14 = (UText *)(*v11 + 122);
    v32 = a2;
    utext_setNativeIndex(v14, a2);
    v15 = utext_current32(v14);
    this = ucptrie_get(*(_QWORD *)(*((_QWORD *)*v11 + 79) + 48), v15);
    v16 = this;
    v17 = 0;
    v18 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)*v11 + 79) + 8) + 8);
    do
    {
      while (1)
      {
        v19 = v13[132];
        if ((int)v19 <= v13[129])
        {
          v20 = *((_QWORD *)v13 + 65) + v19;
        }
        else
        {
          this = (*(uint64_t (**)(UText *))(*((_QWORD *)v13 + 68) + 64))(v14);
          v20 = this;
        }
        if ((int)v20 >= (int)a3 || v16 >= v18)
          break;
        utext_next32(v14);
        v15 = utext_current32(v14);
        this = ucptrie_get(*(_QWORD *)(*((_QWORD *)*v11 + 79) + 48), v15);
        v16 = this;
      }
      if ((int)v20 >= (int)a3)
        break;
      v22 = (icu::RuleBasedBreakIterator *)*v11;
      LocaleID = (const char *)icu::BreakIterator::getLocaleID((uint64_t)*v11, 2, (int *)&v33);
      LanguageBreakEngine = icu::RuleBasedBreakIterator::getLanguageBreakEngine(v22, LocaleID, v15, v24);
      if (LanguageBreakEngine)
        v17 += (*(uint64_t (**)(void *, UText *, uint64_t, uint64_t, icu::UVector32 *, _QWORD, UErrorCode *))(*(_QWORD *)LanguageBreakEngine + 32))(LanguageBreakEngine, v14, v20, a3, v12, *((char *)*v11 + 776), &v33);
      v15 = utext_current32(v14);
      this = ucptrie_get(*(_QWORD *)(*((_QWORD *)*v11 + 79) + 48), v15);
      v16 = this;
    }
    while (v33 < U_ILLEGAL_ARGUMENT_ERROR);
    if (v17 >= 1)
    {
      v26 = *((_DWORD *)v11 + 4);
      if (v26 < 1)
        v27 = 0;
      else
        v27 = *v11[4];
      if (v27 > v32)
      {
        this = (uint64_t)icu::UVector32::insertElementAt(v12, v32, 0, &v33);
        v26 = *((_DWORD *)v11 + 4);
      }
      if (v26 < 1)
        v28 = 0;
      else
        v28 = v11[4][v26 - 1];
      if (v28 < (int)a3)
      {
        if (v26 >= -1 && *((_DWORD *)v11 + 5) > v26
          || (this = icu::UVector32::expandCapacity(v12, v26 + 1, &v33), v26 = *((_DWORD *)v11 + 4), (_DWORD)this))
        {
          v11[4][v26] = a3;
          v26 = *((_DWORD *)v11 + 4) + 1;
          *((_DWORD *)v11 + 4) = v26;
        }
      }
      *((_DWORD *)v11 + 10) = 0;
      if (v26 <= 0)
      {
        v30 = 0;
        *v31 = 0;
      }
      else
      {
        v29 = v11[4];
        *((_DWORD *)v11 + 11) = *v29;
        v30 = v29[v26 - 1];
      }
      *((_DWORD *)v11 + 12) = v30;
    }
  }
  return this;
}

icu::RuleBasedBreakIterator::BreakCache *icu::RuleBasedBreakIterator::BreakCache::BreakCache(icu::RuleBasedBreakIterator::BreakCache *this, icu::RuleBasedBreakIterator *a2, UErrorCode *a3)
{
  *(_QWORD *)this = off_1E224B280;
  *((_QWORD *)this + 1) = a2;
  icu::UVector32::UVector32((icu::RuleBasedBreakIterator::BreakCache *)((char *)this + 800), a3);
  *((_WORD *)this + 272) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1E224B280;
  *((_QWORD *)this + 1) = a2;
  icu::UVector32::UVector32((icu::RuleBasedBreakIterator::BreakCache *)((char *)this + 800), a3);
  *((_WORD *)this + 272) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

uint64_t icu::RuleBasedBreakIterator::BreakCache::reset(uint64_t this, int a2, __int16 a3)
{
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = a2;
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = a2;
  *(_WORD *)(this + 544) = a3;
  return this;
}

void icu::RuleBasedBreakIterator::BreakCache::~BreakCache(void **this)
{
  *this = off_1E224B280;
  icu::UVector32::~UVector32(this + 100);
}

{
  *this = off_1E224B280;
  icu::UVector32::~UVector32(this + 100);
}

{
  *this = off_1E224B280;
  icu::UVector32::~UVector32(this + 100);
  icu::UMemory::operator delete(this);
}

uint64_t icu::RuleBasedBreakIterator::BreakCache::current(icu::RuleBasedBreakIterator::BreakCache *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 1);
  v2 = *((unsigned int *)this + 6);
  v3 = *((int *)this + 7);
  *(_DWORD *)(v1 + 668) = v2;
  *(_DWORD *)(v1 + 672) = *((unsigned __int16 *)this + v3 + 272);
  *(_BYTE *)(v1 + 760) = 0;
  return v2;
}

icu::RuleBasedBreakIterator::BreakCache *icu::RuleBasedBreakIterator::BreakCache::following(icu::RuleBasedBreakIterator::BreakCache *this, int a2, UErrorCode *a3)
{
  uint64_t v4;

  if (*(int *)a3 <= 0)
  {
    v4 = (uint64_t)this;
    if (*((_DWORD *)this + 6) == a2
      || icu::RuleBasedBreakIterator::BreakCache::seek(this, a2)
      || (this = (icu::RuleBasedBreakIterator::BreakCache *)icu::RuleBasedBreakIterator::BreakCache::populateNear((icu::RuleBasedBreakIterator **)v4, a2, a3), (_DWORD)this))
    {
      *(_BYTE *)(*(_QWORD *)(v4 + 8) + 760) = 0;
      return (icu::RuleBasedBreakIterator::BreakCache *)sub_18BBE450C(v4);
    }
  }
  return this;
}

uint64_t icu::RuleBasedBreakIterator::BreakCache::seek(icu::RuleBasedBreakIterator::BreakCache *this, int a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  int v11;
  int v13;
  int v14;
  int v15;
  unsigned int v16;

  v2 = *((int *)this + 4);
  v3 = (char *)this + 4 * v2;
  v6 = *((_DWORD *)v3 + 8);
  v4 = v3 + 32;
  v5 = v6;
  if (v6 > a2)
    return 0;
  v7 = *((int *)this + 5);
  v8 = (char *)this + 4 * v7;
  v11 = *((_DWORD *)v8 + 8);
  v9 = v8 + 32;
  v10 = v11;
  if (v11 < a2)
    return 0;
  if (v5 == a2)
  {
    *((_DWORD *)this + 7) = v2;
  }
  else if (v10 == a2)
  {
    *((_DWORD *)this + 7) = v7;
    v4 = v9;
  }
  else
  {
    while ((_DWORD)v2 != (_DWORD)v7)
    {
      v13 = (int)(v7 + v2 + (((int)v2 > (int)v7) << 7)) / 2;
      v14 = *((_DWORD *)this + (v13 & 0x7F) + 8);
      v15 = ((_BYTE)v13 + 1) & 0x7F;
      if (v14 > a2)
        LODWORD(v7) = ((int)(v7 + v2 + (((int)v2 > (int)v7) << 7)) / 2) & 0x7F;
      else
        LODWORD(v2) = v15;
    }
    v16 = ((_BYTE)v2 - 1) & 0x7F;
    *((_DWORD *)this + 7) = v16;
    v4 = (char *)this + 4 * v16 + 32;
  }
  *((_DWORD *)this + 6) = *(_DWORD *)v4;
  return 1;
}

uint64_t icu::RuleBasedBreakIterator::BreakCache::populateNear(icu::RuleBasedBreakIterator **this, int a2, UErrorCode *a3)
{
  int v7;
  int v8;
  int v9;
  int v11;
  uint64_t v12;
  char *v13;
  int *v14;
  int v15;
  uint64_t v16;
  char *v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  icu::RuleBasedBreakIterator *v22;
  int v23;

  if (*(int *)a3 > 0)
    return 0;
  if (*((_DWORD *)this + *((int *)this + 4) + 8) - 15 >= a2
    || (v7 = *((_DWORD *)this + *((int *)this + 5) + 8), v7 + 15 <= a2))
  {
    if (a2 >= 16)
    {
      v9 = icu::RuleBasedBreakIterator::handleSafePrevious(this[1], a2);
      v7 = *((_DWORD *)this + *((int *)this + 5) + 8);
      if (v7 < a2 && v7 >= v9 - 15)
        goto LABEL_15;
      v11 = v9;
      if (v9 >= 15)
      {
        v22 = this[1];
        *((_DWORD *)v22 + 167) = v11;
        v23 = icu::RuleBasedBreakIterator::handleNext(v22);
        if (v23 == -1
          || (v7 = v23, v23 <= v11 + 4)
          && (utext_setNativeIndex((UText *)((char *)this[1] + 488), v23),
              utext_getPreviousNativeIndex((UText *)((char *)this[1] + 488)) == v11)
          && (v7 = icu::RuleBasedBreakIterator::handleNext(this[1]), v7 == -1))
        {
          v7 = utext_nativeLength((UText *)((char *)this[1] + 488));
        }
        v8 = *((_DWORD *)this[1] + 168);
        goto LABEL_7;
      }
      if (*((_DWORD *)this + *((int *)this + 4) + 8) <= a2 + 15)
        goto LABEL_15;
    }
    LOWORD(v8) = 0;
    v7 = 0;
LABEL_7:
    this[2] = 0;
    *((_DWORD *)this + 6) = v7;
    *((_DWORD *)this + 7) = 0;
    *((_DWORD *)this + 8) = v7;
    *((_WORD *)this + 272) = v8;
  }
LABEL_15:
  if (v7 >= a2)
  {
    if (*((_DWORD *)this + *((int *)this + 4) + 8) > a2)
    {
      do
      {
        icu::RuleBasedBreakIterator::BreakCache::populatePreceding((icu::RuleBasedBreakIterator::BreakCache *)this, a3);
        v16 = *((int *)this + 4);
        v17 = (char *)this + 4 * v16;
        v19 = *((_DWORD *)v17 + 8);
        v18 = (int *)(v17 + 32);
      }
      while (v19 > a2);
      *((_DWORD *)this + 7) = v16;
      v20 = *v18;
      *((_DWORD *)this + 6) = *v18;
      while (v20 < a2)
      {
        sub_18BBE450C((uint64_t)this);
        v20 = *((_DWORD *)this + 6);
      }
      if (v20 > a2)
        icu::RuleBasedBreakIterator::BreakCache::previous(this, a3);
    }
  }
  else
  {
    while (1)
    {
      v12 = *((int *)this + 5);
      v13 = (char *)this + 4 * v12;
      v15 = *((_DWORD *)v13 + 8);
      v14 = (int *)(v13 + 32);
      if (v15 >= a2)
        break;
      if (!icu::RuleBasedBreakIterator::BreakCache::populateFollowing((icu::RuleBasedBreakIterator::BreakCache *)this))
        abort();
    }
    *((_DWORD *)this + 7) = v12;
    v21 = *v14;
    *((_DWORD *)this + 6) = *v14;
    while (v21 > a2)
    {
      icu::RuleBasedBreakIterator::BreakCache::previous(this, a3);
      v21 = *((_DWORD *)this + 6);
    }
  }
  return 1;
}

icu::RuleBasedBreakIterator::BreakCache *icu::RuleBasedBreakIterator::BreakCache::preceding(icu::RuleBasedBreakIterator::BreakCache *this, int a2, UErrorCode *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (*(int *)a3 <= 0)
  {
    v5 = (uint64_t)this;
    if (*((_DWORD *)this + 6) == a2
      || (this = (icu::RuleBasedBreakIterator::BreakCache *)icu::RuleBasedBreakIterator::BreakCache::seek(this, a2),
          (_DWORD)this)
      || (this = (icu::RuleBasedBreakIterator::BreakCache *)icu::RuleBasedBreakIterator::BreakCache::populateNear((icu::RuleBasedBreakIterator **)v5, a2, a3), (_DWORD)this))
    {
      v6 = *(_DWORD *)(v5 + 24);
      if (v6 == a2)
      {
        return (icu::RuleBasedBreakIterator::BreakCache *)icu::RuleBasedBreakIterator::BreakCache::previous((_DWORD *)v5, a3);
      }
      else
      {
        v7 = *(_QWORD *)(v5 + 8);
        *(_DWORD *)(v7 + 668) = v6;
        *(_DWORD *)(v7 + 672) = *(unsigned __int16 *)(v5 + 2 * *(int *)(v5 + 28) + 544);
        *(_BYTE *)(v7 + 760) = 0;
      }
    }
  }
  return this;
}

_DWORD *icu::RuleBasedBreakIterator::BreakCache::previous(_DWORD *this, UErrorCode *a2)
{
  _DWORD *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  if (*(int *)a2 <= 0)
  {
    v2 = this;
    v3 = this[7];
    if (v3 == this[4])
    {
      this = (_DWORD *)icu::RuleBasedBreakIterator::BreakCache::populatePreceding((icu::RuleBasedBreakIterator::BreakCache *)this, a2);
      v5 = v2[6];
      v4 = v2[7];
    }
    else
    {
      v4 = ((_BYTE)v3 - 1) & 0x7F;
      v5 = this[(((_BYTE)v3 - 1) & 0x7F) + 8];
      this[6] = v5;
      this[7] = v4;
    }
    v6 = *((_QWORD *)v2 + 1);
    *(_BYTE *)(v6 + 760) = v4 == v3;
    *(_DWORD *)(v6 + 668) = v5;
    *(_DWORD *)(v6 + 672) = *((unsigned __int16 *)v2 + v4 + 272);
  }
  return this;
}

uint64_t icu::RuleBasedBreakIterator::BreakCache::nextOL(icu::RuleBasedBreakIterator::BreakCache *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = icu::RuleBasedBreakIterator::BreakCache::populateFollowing(this);
  v3 = *((_QWORD *)this + 1);
  *(_BYTE *)(v3 + 760) = result ^ 1;
  v4 = *((int *)this + 7);
  *(_DWORD *)(v3 + 668) = *((_DWORD *)this + 6);
  *(_DWORD *)(v3 + 672) = *((unsigned __int16 *)this + v4 + 272);
  return result;
}

uint64_t icu::RuleBasedBreakIterator::BreakCache::populateFollowing(icu::RuleBasedBreakIterator::BreakCache *this)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  icu::RuleBasedBreakIterator *v10;
  int64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  icu::RuleBasedBreakIterator *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23[2];

  v2 = *((int *)this + 5);
  v3 = *((_DWORD *)this + v2 + 8);
  v4 = *((unsigned __int16 *)this + v2 + 272);
  *(_QWORD *)v23 = 0;
  if (icu::RuleBasedBreakIterator::DictionaryCache::following(*(icu::RuleBasedBreakIterator::DictionaryCache **)(*((_QWORD *)this + 1) + 688), v3, &v23[1], v23))
  {
    LOWORD(v6) = v23[0];
    v5 = v23[1];
    goto LABEL_3;
  }
  v10 = (icu::RuleBasedBreakIterator *)*((_QWORD *)this + 1);
  *((_DWORD *)v10 + 167) = v3;
  v11 = icu::RuleBasedBreakIterator::handleNext(v10);
  v23[1] = v11;
  if ((_DWORD)v11 != -1)
  {
    v5 = v11;
    v12 = *((_QWORD *)this + 1);
    v6 = *(_DWORD *)(v12 + 672);
    v23[0] = v6;
    if (!*(_DWORD *)(v12 + 712)
      || (icu::RuleBasedBreakIterator::DictionaryCache::populateDictionary(*(_QWORD *)(v12 + 688), v3, v11, v4, v6),
          v13 = icu::RuleBasedBreakIterator::DictionaryCache::following(*(icu::RuleBasedBreakIterator::DictionaryCache **)(*((_QWORD *)this + 1) + 688), v3, &v23[1], v23), LOWORD(v6) = v23[0], v5 = v23[1], !v13))
    {
      v14 = *((_DWORD *)this + 5);
      v15 = ((_BYTE)v14 + 1) & 0x7F;
      if (v15 == *((_DWORD *)this + 4))
        *((_DWORD *)this + 4) = ((_BYTE)v14 + 7) & 0x7F;
      *((_DWORD *)this + ((v14 + 1) & 0x7F) + 8) = v5;
      *((_WORD *)this + ((v14 + 1) & 0x7F) + 272) = v6;
      *((_DWORD *)this + 6) = v5;
      *((_DWORD *)this + 7) = v15;
      *((_DWORD *)this + 5) = v15;
      v16 = (icu::RuleBasedBreakIterator *)*((_QWORD *)this + 1);
      v17 = 6;
      do
      {
        v18 = icu::RuleBasedBreakIterator::handleNext(v16);
        if (v18 == -1)
          break;
        v19 = v18;
        v16 = (icu::RuleBasedBreakIterator *)*((_QWORD *)this + 1);
        if (*((_DWORD *)v16 + 178))
          break;
        v20 = *((_DWORD *)v16 + 168);
        v21 = *((_DWORD *)this + 5);
        v22 = ((_BYTE)v21 + 1) & 0x7F;
        if (v22 == *((_DWORD *)this + 4))
          *((_DWORD *)this + 4) = ((_BYTE)v21 + 7) & 0x7F;
        *((_DWORD *)this + ((v21 + 1) & 0x7F) + 8) = v19;
        *((_WORD *)this + ((v21 + 1) & 0x7F) + 272) = v20;
        *((_DWORD *)this + 5) = v22;
        --v17;
      }
      while (v17);
      return 1;
    }
LABEL_3:
    v7 = *((_DWORD *)this + 5);
    v8 = ((_BYTE)v7 + 1) & 0x7F;
    if (v8 == *((_DWORD *)this + 4))
      *((_DWORD *)this + 4) = ((_BYTE)v7 + 7) & 0x7F;
    *((_DWORD *)this + ((v7 + 1) & 0x7F) + 8) = v5;
    *((_WORD *)this + ((v7 + 1) & 0x7F) + 272) = v6;
    *((_DWORD *)this + 6) = v5;
    *((_DWORD *)this + 7) = v8;
    *((_DWORD *)this + 5) = v8;
    return 1;
  }
  return 0;
}

uint64_t icu::RuleBasedBreakIterator::BreakCache::populatePreceding(icu::RuleBasedBreakIterator::BreakCache *this, UErrorCode *a2)
{
  int v4;
  int v6;
  __int16 v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  icu::RuleBasedBreakIterator *v13;
  int v14;
  int v15;
  icu::RuleBasedBreakIterator *v16;
  int v17;
  int64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40[2];

  if (*(int *)a2 > 0)
    return 0;
  v4 = *((_DWORD *)this + *((int *)this + 4) + 8);
  if (!v4)
    return 0;
  *(_QWORD *)v40 = 0;
  if (!icu::RuleBasedBreakIterator::DictionaryCache::preceding(*(icu::RuleBasedBreakIterator::DictionaryCache **)(*((_QWORD *)this + 1) + 688), v4, &v40[1], v40))
  {
    v10 = v4;
    while (1)
    {
      if (v10 >= 31)
      {
        v10 = icu::RuleBasedBreakIterator::handleSafePrevious(*((icu::RuleBasedBreakIterator **)this + 1), v10 - 30);
        if ((v10 + 1) >= 2)
        {
          v13 = (icu::RuleBasedBreakIterator *)*((_QWORD *)this + 1);
          *((_DWORD *)v13 + 167) = v10;
          v11 = icu::RuleBasedBreakIterator::handleNext(v13);
          if (v11 <= v10 + 4)
          {
            utext_setNativeIndex((UText *)(*((_QWORD *)this + 1) + 488), v11);
            if (utext_getPreviousNativeIndex((UText *)(*((_QWORD *)this + 1) + 488)) == v10)
              v11 = icu::RuleBasedBreakIterator::handleNext(*((icu::RuleBasedBreakIterator **)this + 1));
          }
          v12 = *(_DWORD *)(*((_QWORD *)this + 1) + 672);
          goto LABEL_19;
        }
        v11 = 0;
      }
      else
      {
        v11 = 0;
        v10 = 0;
      }
      v12 = 0;
LABEL_19:
      if (v11 < v4)
      {
        v40[0] = v12;
        icu::UVector32::removeAllElements((uint64_t)this + 800);
        v14 = *((_DWORD *)this + 202);
        if (v14 >= -1 && *((_DWORD *)this + 203) > v14
          || (v15 = icu::UVector32::expandCapacity((icu::RuleBasedBreakIterator::BreakCache *)((char *)this + 800), v14 + 1, a2), v14 = *((_DWORD *)this + 202), v15))
        {
          *(_DWORD *)(*((_QWORD *)this + 103) + 4 * v14) = v11;
          v14 = *((_DWORD *)this + 202) + 1;
          *((_DWORD *)this + 202) = v14;
        }
        if (v14 < -1 || *((_DWORD *)this + 203) <= v14)
        {
          if (!icu::UVector32::expandCapacity((icu::RuleBasedBreakIterator::BreakCache *)((char *)this + 800), v14 + 1, a2))goto LABEL_29;
          v14 = *((_DWORD *)this + 202);
        }
        *(_DWORD *)(*((_QWORD *)this + 103) + 4 * v14) = v12;
        ++*((_DWORD *)this + 202);
LABEL_29:
        while (2)
        {
          v16 = (icu::RuleBasedBreakIterator *)*((_QWORD *)this + 1);
          *((_DWORD *)v16 + 167) = v11;
          v17 = v40[0];
          v18 = icu::RuleBasedBreakIterator::handleNext(v16);
          v19 = *((_QWORD *)this + 1);
          v20 = *(_DWORD *)(v19 + 672);
          v40[0] = v20;
          v40[1] = v18;
          if ((_DWORD)v18 != -1)
          {
            v21 = v18;
            if (*(_DWORD *)(v19 + 712))
            {
              icu::RuleBasedBreakIterator::DictionaryCache::populateDictionary(*(_QWORD *)(v19 + 688), v11, v18, v17, v20);
              if (icu::RuleBasedBreakIterator::DictionaryCache::following(*(icu::RuleBasedBreakIterator::DictionaryCache **)(*((_QWORD *)this + 1) + 688), v11, &v40[1], v40))
              {
                while (1)
                {
                  v21 = v40[1];
                  if (v40[1] >= v4)
                    goto LABEL_55;
                  v22 = *((_DWORD *)this + 202);
                  if (v22 >= -1 && *((_DWORD *)this + 203) > v22
                    || (v23 = icu::UVector32::expandCapacity((icu::RuleBasedBreakIterator::BreakCache *)((char *)this + 800), v22 + 1, a2), v22 = *((_DWORD *)this + 202), v23))
                  {
                    *(_DWORD *)(*((_QWORD *)this + 103) + 4 * v22) = v21;
                    v22 = *((_DWORD *)this + 202) + 1;
                    *((_DWORD *)this + 202) = v22;
                  }
                  v24 = v40[0];
                  if (v22 >= -1 && *((_DWORD *)this + 203) > v22)
                    goto LABEL_41;
                  if (icu::UVector32::expandCapacity((icu::RuleBasedBreakIterator::BreakCache *)((char *)this + 800), v22 + 1, a2))break;
LABEL_42:
                  if (!icu::RuleBasedBreakIterator::DictionaryCache::following(*(icu::RuleBasedBreakIterator::DictionaryCache **)(*((_QWORD *)this + 1) + 688), v21, &v40[1], v40))
                  {
                    v21 = v40[1];
                    goto LABEL_55;
                  }
                }
                v22 = *((_DWORD *)this + 202);
LABEL_41:
                *(_DWORD *)(*((_QWORD *)this + 103) + 4 * v22) = v24;
                ++*((_DWORD *)this + 202);
                goto LABEL_42;
              }
              v21 = v40[1];
            }
            if (v21 < v4)
            {
              v25 = *((_DWORD *)this + 202);
              if (v25 >= -1 && *((_DWORD *)this + 203) > v25
                || (v26 = icu::UVector32::expandCapacity((icu::RuleBasedBreakIterator::BreakCache *)((char *)this + 800), v25 + 1, a2), v25 = *((_DWORD *)this + 202), v26))
              {
                *(_DWORD *)(*((_QWORD *)this + 103) + 4 * v25) = v21;
                v25 = *((_DWORD *)this + 202) + 1;
                *((_DWORD *)this + 202) = v25;
              }
              v27 = v40[0];
              if (v25 >= -1 && *((_DWORD *)this + 203) > v25)
              {
LABEL_54:
                *(_DWORD *)(*((_QWORD *)this + 103) + 4 * v25) = v27;
                ++*((_DWORD *)this + 202);
              }
              else if (icu::UVector32::expandCapacity((icu::RuleBasedBreakIterator::BreakCache *)((char *)this + 800), v25 + 1, a2))
              {
                v25 = *((_DWORD *)this + 202);
                goto LABEL_54;
              }
            }
LABEL_55:
            v11 = v21;
            if (v21 < v4)
              continue;
          }
          break;
        }
        v28 = *((_DWORD *)this + 202);
        if (v28)
        {
          v29 = v28 - 1;
          if (v28 < 1)
          {
            LOWORD(v30) = 0;
          }
          else
          {
            *((_DWORD *)this + 202) = v29;
            v30 = *(_DWORD *)(*((_QWORD *)this + 103) + 4 * v29);
            if (v28 != 1)
            {
              v28 -= 2;
              *((_DWORD *)this + 202) = v28;
              v31 = *(_DWORD *)(*((_QWORD *)this + 103) + 4 * v28);
              goto LABEL_63;
            }
            v28 = 0;
          }
          v31 = 0;
LABEL_63:
          v32 = *((_DWORD *)this + 4);
          v33 = ((_BYTE)v32 - 1) & 0x7F;
          if (v33 == *((_DWORD *)this + 5))
            *((_DWORD *)this + 5) = ((_BYTE)v32 + 126) & 0x7F;
          *((_DWORD *)this + ((v32 - 1) & 0x7F) + 8) = v31;
          *((_WORD *)this + ((v32 - 1) & 0x7F) + 272) = v30;
          *((_DWORD *)this + 4) = v33;
          *((_DWORD *)this + 6) = v31;
          *((_DWORD *)this + 7) = v33;
          if (!v28)
            return 1;
          v35 = *((_DWORD *)this + 4);
          v34 = *((_DWORD *)this + 5);
          while (2)
          {
            v36 = v28 - 1;
            if (v28 < 1)
            {
              LOWORD(v37) = 0;
              goto LABEL_69;
            }
            *((_DWORD *)this + 202) = v36;
            v37 = *(_DWORD *)(*((_QWORD *)this + 103) + 4 * v36);
            if (v28 == 1)
            {
              v28 = 0;
LABEL_69:
              v38 = 0;
            }
            else
            {
              v28 -= 2;
              *((_DWORD *)this + 202) = v28;
              v38 = *(_DWORD *)(*((_QWORD *)this + 103) + 4 * v28);
            }
            v39 = ((_BYTE)v35 - 1) & 0x7F;
            if (v39 == v34)
            {
              if (*((_DWORD *)this + 7) == v34)
                return 1;
              v34 = ((_BYTE)v35 + 126) & 0x7F;
              *((_DWORD *)this + 5) = v34;
            }
            *((_DWORD *)this + ((v35 - 1) & 0x7F) + 8) = v38;
            *((_WORD *)this + ((v35 - 1) & 0x7F) + 272) = v37;
            *((_DWORD *)this + 4) = v39;
            LOBYTE(v35) = (v35 - 1) & 0x7F;
            if (!v28)
              return 1;
            continue;
          }
        }
        return 0;
      }
    }
  }
  v7 = v40[0];
  v6 = v40[1];
  v8 = *((_DWORD *)this + 4);
  v9 = ((_BYTE)v8 - 1) & 0x7F;
  if (v9 == *((_DWORD *)this + 5))
    *((_DWORD *)this + 5) = ((_BYTE)v8 + 126) & 0x7F;
  *((_DWORD *)this + ((v8 - 1) & 0x7F) + 8) = v6;
  *((_WORD *)this + ((v8 - 1) & 0x7F) + 272) = v7;
  *((_DWORD *)this + 4) = v9;
  *((_DWORD *)this + 6) = v6;
  *((_DWORD *)this + 7) = v9;
  return 1;
}

_DWORD *icu::RuleBasedBreakIterator::BreakCache::addFollowing(_DWORD *result, int a2, __int16 a3, int a4)
{
  int v4;
  int v5;

  v4 = result[5];
  v5 = ((_BYTE)v4 + 1) & 0x7F;
  if (v5 == result[4])
    result[4] = ((_BYTE)v4 + 7) & 0x7F;
  result[(((_BYTE)v4 + 1) & 0x7F) + 8] = a2;
  *((_WORD *)result + ((v4 + 1) & 0x7F) + 272) = a3;
  result[5] = v5;
  if (a4 == 1)
  {
    result[6] = a2;
    result[7] = v5;
  }
  return result;
}

uint64_t icu::RuleBasedBreakIterator::BreakCache::addPreceding(_DWORD *a1, int a2, __int16 a3, int a4)
{
  int v4;
  int v5;

  v4 = a1[4];
  v5 = ((_BYTE)v4 - 1) & 0x7F;
  if (v5 == a1[5])
  {
    if (!a4 && a1[7] == v5)
      return 0;
    a1[5] = ((_BYTE)v4 + 126) & 0x7F;
  }
  a1[(((_BYTE)v4 - 1) & 0x7F) + 8] = a2;
  *((_WORD *)a1 + ((v4 - 1) & 0x7F) + 272) = a3;
  a1[4] = v5;
  if (a4 == 1)
  {
    a1[6] = a2;
    a1[7] = v5;
  }
  return 1;
}

uint64_t sub_18BBEA79C(uint64_t result, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  _BYTE v9[64];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*a3 <= 0)
  {
    v5 = result;
    *(_QWORD *)result = a2;
    if (*(_DWORD *)a2 != 45472 || *(_BYTE *)(a2 + 4) != 6)
    {
LABEL_10:
      *a3 = 3;
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (*(_DWORD *)(a2 + 20))
      *(_QWORD *)(result + 8) = a2 + *(unsigned int *)(a2 + 16);
    if (*(_DWORD *)(a2 + 28))
      *(_QWORD *)(result + 16) = a2 + *(unsigned int *)(a2 + 24);
    result = (uint64_t)ucptrie_openFromBinary(0, -1, a2 + *(unsigned int *)(a2 + 32), *(_DWORD *)(a2 + 36), 0, a3);
    *(_QWORD *)(v5 + 48) = result;
    if (*a3 <= 0)
    {
      result = ucptrie_getValueWidth(result);
      if ((result & 0xFFFFFFFD) == 0)
      {
        v6 = *(_QWORD *)v5;
        v7 = (const char *)(a2 + *(unsigned int *)(*(_QWORD *)v5 + 40));
        *(_QWORD *)(v5 + 24) = v7;
        icu::UnicodeString::fromUTF8(v7, *(_DWORD *)(v6 + 44), (uint64_t)v9);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v5 + 72), (icu::UnicodeString *)v9);
        result = (uint64_t)icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v9);
        *(_QWORD *)(v5 + 32) = a2 + *(unsigned int *)(*(_QWORD *)v5 + 48);
        *(_DWORD *)(v5 + 40) = *(_DWORD *)(a2 + 52) >> 2;
        atomic_store(1u, (unsigned int *)(v5 + 56));
        return result;
      }
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t sub_18BBEA8F0(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)(a1 + 80) = 2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E2256B38;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  atomic_store(0, (unsigned int *)(a1 + 56));
  *(_BYTE *)(a1 + 136) = 1;
  sub_18BBEA79C(a1, a2, a3);
  return a1;
}

uint64_t sub_18BBEA94C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  *(_WORD *)(a1 + 80) = 2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E2256B38;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  atomic_store(0, (unsigned int *)(a1 + 56));
  *(_BYTE *)(a1 + 136) = 1;
  sub_18BBEA79C(a1, a2, a4);
  *(_BYTE *)(a1 + 136) = 1;
  return a1;
}

uint64_t sub_18BBEA9B0(uint64_t a1, uint64_t a2, int *a3)
{
  _BYTE *v5;
  unint64_t v6;

  *(_WORD *)(a1 + 80) = 2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E2256B38;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  atomic_store(0, (unsigned int *)(a1 + 56));
  *(_BYTE *)(a1 + 136) = 1;
  if (*a3 <= 0)
  {
    v5 = *(_BYTE **)(a2 + 8);
    v6 = *(unsigned __int16 *)v5;
    if (v6 >= 0x14 && !v5[8] && !v5[9] && v5[12] == 66 && v5[13] == 114 && v5[14] == 107 && v5[15] == 32 && v5[16] == 6)
    {
      sub_18BBEA79C(a1, (uint64_t)&v5[v6], a3);
      *(_QWORD *)(a1 + 64) = a2;
    }
    else
    {
      *a3 = 3;
    }
  }
  return a1;
}

uint64_t sub_18BBEAA94(uint64_t a1)
{
  _OWORD *v2;
  void *v3;

  ucptrie_close(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(_OWORD **)(a1 + 64);
  if (v2)
  {
    udata_close(v2);
  }
  else
  {
    v3 = (void *)*(unsigned __int8 *)(a1 + 136);
    if (!*(_BYTE *)(a1 + 136))
      uprv_free(*(void **)a1);
  }
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 72));
  return a1;
}

BOOL sub_18BBEAAE8(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int *v3;
  size_t v4;

  v2 = *a1;
  v3 = *a2;
  if (v2 == v3)
    return 1;
  v4 = v2[2];
  return (_DWORD)v4 == v3[2] && memcmp(v2, v3, v4) == 0;
}

uint64_t sub_18BBEAB34(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)a1 + 20);
}

void sub_18BBEAB40(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  void *v3;

  v1 = (unsigned int *)(a1 + 56);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1)
  {
    if (v2 == 1)
    {
      v3 = (void *)sub_18BBEAA94(a1);
      icu::UMemory::operator delete(v3);
    }
  }
}

uint64_t sub_18BBEAB7C(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 56);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_18BBEAB94(uint64_t a1)
{
  return a1 + 72;
}

uint64_t ubrk_swap(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v12;
  int v14;
  int v15;
  unsigned int *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  char *v29;
  char v30;
  char *v31;
  int v32;
  int v33;
  int v34;
  char *v35;
  char v36;
  char *v37;
  unsigned __int16 *v38;
  unsigned int v39;
  int v40;
  char *v41;
  char *v42;
  unsigned int v43;
  void (*v44)(uint64_t, char *, uint64_t, char *, int *);
  char *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;

  if (!a5)
    return 0;
  if (*a5 > 0)
    return 0;
  if (!a1 || !a2 || (v12 = a3, (int)a3 < -1) || (int)a3 >= 1 && !a4)
  {
    result = 0;
    v14 = 1;
LABEL_21:
    *a5 = v14;
    return result;
  }
  if (__PAIR64__(*(unsigned __int8 *)(a2 + 13), *(unsigned __int8 *)(a2 + 12)) != 0x7200000042
    || *(_BYTE *)(a2 + 14) != 107
    || *(_BYTE *)(a2 + 15) != 32
    || *(_BYTE *)(a2 + 16) != 6)
  {
    v48 = *(unsigned __int8 *)(a2 + 12);
    v17 = "ubrk_swap(): data format %02x.%02x.%02x.%02x (format version %02x) is not recognized\n";
    goto LABEL_20;
  }
  v15 = udata_swapDataHeader(a1, (unsigned __int16 *)a2, a3, a4, a5, a6, a7, a8);
  v16 = (unsigned int *)(a2 + v15);
  if ((*(unsigned int (**)(_QWORD))(a1 + 16))(*v16) != 45472
    || *((_BYTE *)v16 + 4) != 6
    || (*(unsigned int (**)(_QWORD))(a1 + 16))(v16[2]) <= 0x4F)
  {
    v17 = "ubrk_swap(): RBBI Data header is invalid.\n";
LABEL_20:
    udata_printError(a1, (uint64_t)v17, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, v48);
    result = 0;
    v14 = 16;
    goto LABEL_21;
  }
  v24 = (*(uint64_t (**)(_QWORD))(a1 + 16))(v16[2]);
  result = (v24 + v15);
  if ((v12 & 0x80000000) == 0)
  {
    if ((int)result > v12)
    {
      udata_printError(a1, (uint64_t)"ubrk_swap(): too few bytes (%d after ICU Data header) for break data.\n", v18, v19, v20, v21, v22, v23, v24);
      result = 0;
      v14 = 8;
      goto LABEL_21;
    }
    v49 = v24 + v15;
    v25 = (char *)a4 + v15;
    if ((unsigned __int16 *)a2 != a4)
      bzero((char *)a4 + v15, (int)v24);
    v26 = (*(uint64_t (**)(_QWORD))(a1 + 16))(v16[4]);
    v27 = (*(uint64_t (**)(_QWORD))(a1 + 16))(v16[5]);
    if (v27 >= 1)
    {
      v28 = v27;
      v29 = (char *)v16 + v26;
      v30 = (*(uint64_t (**)(_QWORD))(a1 + 16))(*((unsigned int *)v29 + 4));
      v31 = &v25[v26];
      (*(void (**)(uint64_t, char *, uint64_t, char *, int *))(a1 + 56))(a1, v29, 20, v31, a5);
      if ((v30 & 4) != 0)
      {
        if ((unsigned __int16 *)a2 != a4)
          memmove(v31 + 20, v29 + 20, v28 - 20);
      }
      else
      {
        (*(void (**)(uint64_t, char *, _QWORD, char *, int *))(a1 + 48))(a1, v29 + 20, (v28 - 20), v31 + 20, a5);
      }
    }
    v32 = (*(uint64_t (**)(_QWORD))(a1 + 16))(v16[6]);
    v33 = (*(uint64_t (**)(_QWORD))(a1 + 16))(v16[7]);
    if (v33 >= 1)
    {
      v34 = v33;
      v35 = (char *)v16 + v32;
      v36 = (*(uint64_t (**)(_QWORD))(a1 + 16))(*((unsigned int *)v35 + 4));
      v37 = &v25[v32];
      (*(void (**)(uint64_t, char *, uint64_t, char *, int *))(a1 + 56))(a1, v35, 20, v37, a5);
      if ((v36 & 4) != 0)
      {
        if ((unsigned __int16 *)a2 != a4)
          memmove(v37 + 20, v35 + 20, v34 - 20);
      }
      else
      {
        (*(void (**)(uint64_t, char *, _QWORD, char *, int *))(a1 + 48))(a1, v35 + 20, (v34 - 20), v37 + 20, a5);
      }
    }
    v38 = (unsigned __int16 *)((char *)v16 + (*(unsigned int (**)(_QWORD))(a1 + 16))(v16[8]));
    v39 = (*(uint64_t (**)(_QWORD))(a1 + 16))(v16[9]);
    v40 = (*(uint64_t (**)(_QWORD))(a1 + 16))(v16[8]);
    ucptrie_swap(a1, v38, v39, (unsigned __int16 *)&v25[v40], a5);
    if ((unsigned __int16 *)a2 != a4)
    {
      v41 = &v25[(*(unsigned int (**)(_QWORD))(a1 + 16))(v16[10])];
      v42 = (char *)v16 + (*(unsigned int (**)(_QWORD))(a1 + 16))(v16[10]);
      v43 = (*(uint64_t (**)(_QWORD))(a1 + 16))(v16[11]);
      memmove(v41, v42, v43);
    }
    v44 = *(void (**)(uint64_t, char *, uint64_t, char *, int *))(a1 + 56);
    v45 = (char *)v16 + (*(unsigned int (**)(_QWORD))(a1 + 16))(v16[12]);
    v46 = (*(uint64_t (**)(_QWORD))(a1 + 16))(v16[13]);
    v47 = (*(uint64_t (**)(_QWORD))(a1 + 16))(v16[12]);
    v44(a1, v45, v46, &v25[v47], a5);
    (*(void (**)(uint64_t, unsigned int *, uint64_t, char *, int *))(a1 + 56))(a1, v16, 80, v25, a5);
    (*(void (**)(uint64_t, char *, uint64_t, char *, int *))(a1 + 56))(a1, v25 + 4, 4, v25 + 4, a5);
    return v49;
  }
  return result;
}

uint64_t sub_18BBEAFC0(uint64_t result, uint64_t a2, int *a3)
{
  uint64_t v5;
  const UChar *v6;
  const UChar *v7;

  *(_BYTE *)(result + 184) = 0;
  if (*a3 <= 0)
  {
    v5 = result;
    *(_QWORD *)result = a2;
    if (*(_DWORD *)a2 == 45472 && *(_BYTE *)(a2 + 4) == 3)
    {
      if (*(_DWORD *)(a2 + 20))
        *(_QWORD *)(result + 8) = a2 + *(unsigned int *)(a2 + 16);
      if (*(_DWORD *)(a2 + 28))
        *(_QWORD *)(result + 16) = a2 + *(unsigned int *)(a2 + 24);
      if (*(_DWORD *)(a2 + 36))
        *(_QWORD *)(result + 24) = a2 + *(unsigned int *)(a2 + 32);
      if (*(_DWORD *)(a2 + 44))
        *(_QWORD *)(result + 32) = a2 + *(unsigned int *)(a2 + 40);
      result = utrie_unserialize(result + 64, (_DWORD *)(a2 + *(unsigned int *)(a2 + 48)), *(_DWORD *)(a2 + 52), a3);
      if (*a3 <= 0)
      {
        *(_QWORD *)(v5 + 80) = sub_18BBEB1C8;
        v6 = (const UChar *)(a2 + *(unsigned int *)(*(_QWORD *)v5 + 56));
        *(_QWORD *)(v5 + 40) = v6;
        v7 = v6;
        result = (uint64_t)icu::UnicodeString::setTo((icu::UnicodeString *)(v5 + 120), 1, &v7, -1);
        *(_QWORD *)(v5 + 48) = a2 + *(unsigned int *)(*(_QWORD *)v5 + 64);
        *(_DWORD *)(v5 + 56) = *(_DWORD *)(a2 + 68) >> 2;
        atomic_store(1u, (unsigned int *)(v5 + 104));
      }
    }
    else
    {
      *a3 = 3;
    }
  }
  return result;
}

uint64_t sub_18BBEB108(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)(a1 + 128) = 2;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = off_1E2256B38;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  atomic_store(0, (unsigned int *)(a1 + 104));
  *(_BYTE *)(a1 + 184) = 1;
  sub_18BBEAFC0(a1, a2, a3);
  return a1;
}

uint64_t sub_18BBEB164(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  *(_WORD *)(a1 + 128) = 2;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = off_1E2256B38;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  atomic_store(0, (unsigned int *)(a1 + 104));
  *(_BYTE *)(a1 + 184) = 1;
  sub_18BBEAFC0(a1, a2, a4);
  *(_BYTE *)(a1 + 184) = 1;
  return a1;
}

uint64_t sub_18BBEB1C8(int a1)
{
  return a1 & ((__int16)a1 >> 15) & 0x7FFF;
}

uint64_t sub_18BBEB1D8(uint64_t a1)
{
  _OWORD *v2;
  void *v3;

  v2 = *(_OWORD **)(a1 + 112);
  if (v2)
  {
    udata_close(v2);
  }
  else
  {
    v3 = (void *)*(unsigned __int8 *)(a1 + 184);
    if (!*(_BYTE *)(a1 + 184))
      uprv_free(*(void **)a1);
  }
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 120));
  return a1;
}

void sub_18BBEB224(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  void *v3;

  v1 = (unsigned int *)(a1 + 104);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1)
  {
    if (v2 == 1)
    {
      v3 = (void *)sub_18BBEB1D8(a1);
      icu::UMemory::operator delete(v3);
    }
  }
}

uint64_t sub_18BBEB260(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 104);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_18BBEB278(uint64_t a1, unint64_t a2)
{
  int v2;
  icu::UVector *v4;
  unint64_t v5;
  uint64_t *v6;
  icu::UVector *v7;
  unint64_t v8;
  uint64_t *v9;
  icu::UVector *v10;
  int v11;
  UErrorCode v13;

  v2 = a2;
  *(_QWORD *)(a1 + 48) = off_1E2256B38;
  *(_WORD *)(a1 + 56) = 2;
  *(_DWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 127) = 0;
  v13 = U_ZERO_ERROR;
  v4 = (icu::UVector *)icu::UMemory::operator new((uint64_t *)2, (icu::UMemory *)0x28, a2);
  if (v4)
    v4 = icu::UVector::UVector(v4, &v13);
  *(_QWORD *)(a1 + 136) = v4;
  v7 = (icu::UVector *)icu::UMemory::operator new(v6, (icu::UMemory *)0x28, v5);
  if (v7)
    v7 = icu::UVector::UVector(v7, &v13);
  *(_QWORD *)(a1 + 144) = v7;
  v10 = (icu::UVector *)icu::UMemory::operator new(v9, (icu::UMemory *)0x28, v8);
  if (v10)
    v10 = icu::UVector::UVector(v10, &v13);
  *(_QWORD *)(a1 + 152) = v10;
  v11 = v2 - 7;
  if ((v2 - 7) <= 8 && ((0x107u >> v11) & 1) != 0)
    *(_DWORD *)(a1 + 40) = dword_18BDE0230[v11];
  return a1;
}

uint64_t sub_18BBEB358(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  icu::UVector *v6;
  unint64_t v7;
  uint64_t *v8;
  icu::UVector *v9;
  unint64_t v10;
  uint64_t *v11;
  icu::UVector *v12;
  UErrorCode v14;

  *(_QWORD *)(a1 + 48) = off_1E2256B38;
  *(_WORD *)(a1 + 56) = 2;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  icu::UnicodeString::operator=((UChar **)(a1 + 48), (UChar **)(a2 + 48));
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 129) = 0;
  v4 = (uint64_t *)*(unsigned __int8 *)(a2 + 130);
  *(_BYTE *)(a1 + 130) = (_BYTE)v4;
  v14 = U_ZERO_ERROR;
  v6 = (icu::UVector *)icu::UMemory::operator new(v4, (icu::UMemory *)0x28, v5);
  if (v6)
    v6 = icu::UVector::UVector(v6, &v14);
  *(_QWORD *)(a1 + 136) = v6;
  v9 = (icu::UVector *)icu::UMemory::operator new(v8, (icu::UMemory *)0x28, v7);
  if (v9)
    v9 = icu::UVector::UVector(v9, &v14);
  *(_QWORD *)(a1 + 144) = v9;
  v12 = (icu::UVector *)icu::UMemory::operator new(v11, (icu::UMemory *)0x28, v10);
  if (v12)
    v12 = icu::UVector::UVector(v12, &v14);
  *(_QWORD *)(a1 + 152) = v12;
  return a1;
}

uint64_t sub_18BBEB434(uint64_t a1)
{
  icu::UnicodeSet *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(icu::UnicodeSet **)(a1 + 32);
  if (v2)
  {
    icu::UnicodeSet::~UnicodeSet(v2);
    icu::UMemory::operator delete(v3);
  }
  *(_QWORD *)(a1 + 32) = 0;
  v4 = (void *)(*(_DWORD *)a1 | 2u);
  if ((_DWORD)v4 != 2)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v5 = (void *)sub_18BBEB434();
      icu::UMemory::operator delete(v5);
    }
    *(_QWORD *)(a1 + 16) = 0;
    if (*(_QWORD *)(a1 + 24))
    {
      v6 = (void *)sub_18BBEB434();
      icu::UMemory::operator delete(v6);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *(_QWORD *)(a1 + 136);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 144);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 152);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 48));
  return a1;
}

uint64_t *sub_18BBEB4E8(unsigned int *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  while (1)
  {
    v3 = (uint64_t *)*a1;
    if ((_DWORD)v3 != 2)
      break;
    a1 = (unsigned int *)*((_QWORD *)a1 + 2);
  }
  if ((_DWORD)v3 != 1)
  {
    v4 = icu::UMemory::operator new(v3, (icu::UMemory *)0xA0, a2);
    if (v4)
    {
      v5 = v4;
      sub_18BBEB358((uint64_t)v4, (uint64_t)a1);
      if (*((_QWORD *)a1 + 2))
      {
        v6 = sub_18BBEB4E8();
        v5[2] = v6;
        *(_QWORD *)(v6 + 8) = v5;
      }
      if (*((_QWORD *)a1 + 3))
      {
        v7 = sub_18BBEB4E8();
        v5[3] = v7;
        *(_QWORD *)(v7 + 8) = v5;
      }
      return v5;
    }
    else
    {
      return 0;
    }
  }
  return (uint64_t *)a1;
}

uint64_t sub_18BBEB570(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int *v4;
  uint64_t *v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_DWORD *)a1;
  v4 = *(unsigned int **)(a1 + 16);
  if (v3 == 2)
  {
    v5 = sub_18BBEB4E8(v4, a2);
    v6 = v5;
    if (v5)
      *(_WORD *)((char *)v5 + 129) = *(_WORD *)(a1 + 129);
    v7 = (void *)sub_18BBEB434(a1);
    icu::UMemory::operator delete(v7);
  }
  else
  {
    if (v4)
    {
      v8 = sub_18BBEB570();
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(v8 + 8) = a1;
    }
    if (*(_QWORD *)(a1 + 24))
    {
      v9 = sub_18BBEB570();
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(v9 + 8) = a1;
    }
    return a1;
  }
  return (uint64_t)v6;
}

void sub_18BBEB5EC(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  uint64_t *v7;
  void *v8;

  while (1)
  {
    v3 = a1;
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
    {
      if (*(_DWORD *)v4)
      {
        sub_18BBEB5EC(v4);
      }
      else
      {
        v5 = sub_18BBEB4E8(*(unsigned int **)(*(_QWORD *)(v4 + 16) + 16), a2);
        *(_QWORD *)(v3 + 16) = v5;
        v5[1] = v3;
        v6 = (void *)sub_18BBEB434(v4);
        icu::UMemory::operator delete(v6);
      }
    }
    a1 = *(_QWORD *)(v3 + 24);
    if (!a1)
      break;
    if (!*(_DWORD *)a1)
    {
      v7 = sub_18BBEB4E8(*(unsigned int **)(*(_QWORD *)(a1 + 16) + 16), a2);
      *(_QWORD *)(v3 + 24) = v7;
      v7[1] = v3;
      v8 = (void *)sub_18BBEB434(a1);
      icu::UMemory::operator delete(v8);
      return;
    }
  }
}

uint64_t sub_18BBEB680(uint64_t result, icu::UVector *a2, uint64_t a3, UErrorCode *a4)
{
  _QWORD *v7;

  v7 = (_QWORD *)result;
  do
  {
    if (*(int *)a4 > 0)
      break;
    if (*(_DWORD *)v7 == (_DWORD)a3)
      icu::UVector::addElement(a2, v7, a4);
    result = v7[2];
    if (result)
      result = sub_18BBEB680(result, a2, a3, a4);
    v7 = (_QWORD *)v7[3];
  }
  while (v7);
  return result;
}

uint64_t sub_18BBEB6F8(uint64_t a1, UChar **a2, uint64_t a3, UErrorCode *a4)
{
  unint64_t v7;
  icu::UVector *v9;
  unint64_t v10;
  icu::UVector *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = off_1E224B2B8;
  *(_QWORD *)(a1 + 32) = a2;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 40), a2);
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 144) = a1 + 112;
  *(_WORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  if (a3)
  {
    *(_QWORD *)(a3 + 64) = 0;
    *(_OWORD *)(a3 + 32) = 0uLL;
    *(_OWORD *)(a3 + 48) = 0uLL;
    *(_OWORD *)a3 = 0uLL;
    *(_OWORD *)(a3 + 16) = 0uLL;
  }
  if (*(int *)a4 <= 0)
  {
    v9 = (icu::UVector *)icu::UMemory::operator new((icu::UMemory *)0x28, v7);
    if (v9)
      v9 = icu::UVector::UVector(v9, a4);
    *(_QWORD *)(a1 + 168) = v9;
    v11 = (icu::UVector *)icu::UMemory::operator new((icu::UMemory *)0x28, v10);
    if (v11)
      v11 = icu::UVector::UVector(v11, a4);
    *(_QWORD *)(a1 + 184) = v11;
    v13 = icu::UMemory::operator new((icu::UMemory *)0xC78, v12);
    if (v13)
      v13 = sub_18BBEC8B8(v13, a1);
    *(_QWORD *)(a1 + 104) = v13;
    v15 = icu::UMemory::operator new((icu::UMemory *)0x38, v14);
    if (v15)
    {
      sub_18BBEFC2C(v15, a1);
      *(_QWORD *)(a1 + 160) = v16;
      if (*(int *)a4 >= 1 || *(_QWORD *)(a1 + 104) && *(_QWORD *)(a1 + 168) && *(_QWORD *)(a1 + 184))
        return a1;
    }
    else
    {
      *(_QWORD *)(a1 + 160) = 0;
      if (*(int *)a4 >= 1)
        return a1;
    }
    *a4 = U_MEMORY_ALLOCATION_ERROR;
  }
  return a1;
}

uint64_t sub_18BBEB830(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E224B2B8;
  if (icu::UVector::elementAt(*(icu::UVector **)(a1 + 168), 0))
  {
    v3 = 1;
    do
    {
      v4 = (void *)sub_18BBEB4E4();
      icu::UMemory::operator delete(v4);
    }
    while (icu::UVector::elementAt(*(icu::UVector **)(a1 + 168), v3++));
  }
  v6 = *(_QWORD *)(a1 + 168);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (*(_QWORD *)(a1 + 160))
  {
    v7 = (void *)sub_18BBEFCAC();
    icu::UMemory::operator delete(v7);
  }
  if (*(_QWORD *)(a1 + 176))
  {
    v8 = (void *)sub_18BBF1758();
    icu::UMemory::operator delete(v8);
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v9 = (void *)sub_18BBEB4E4();
    icu::UMemory::operator delete(v9);
  }
  if (*(_QWORD *)(a1 + 120))
  {
    v10 = (void *)sub_18BBEB4E4();
    icu::UMemory::operator delete(v10);
  }
  if (*(_QWORD *)(a1 + 128))
  {
    v11 = (void *)sub_18BBEB4E4();
    icu::UMemory::operator delete(v11);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v12 = (void *)sub_18BBEB4E4();
    icu::UMemory::operator delete(v12);
  }
  v13 = *(_QWORD *)(a1 + 104);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a1 + 184);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 40));
  return a1;
}

void sub_18BBEB934(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_18BBEB830(a1);
  icu::UMemory::operator delete(v1);
}

_DWORD *sub_18BBEB948(uint64_t a1)
{
  _DWORD *result;
  icu::UnicodeString *v3;
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  const UChar *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int32_t v15;
  unsigned int v16;
  signed int v17;
  size_t v18;
  _DWORD *v19;
  int *v20;
  uint64_t v21;
  char *v22;
  unsigned int v23;
  const UChar *v24;
  int32_t v25;
  unsigned int v26;
  int32_t destCapacity[2];
  int32_t pDestLength[16];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (**(int **)(a1 + 16) > 0)
    return 0;
  v3 = (icu::UnicodeString *)(a1 + 40);
  sub_18BBEDB40(a1 + 40, (uint64_t)pDestLength);
  icu::UnicodeString::operator=(v3, (icu::UnicodeString *)pDestLength);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)pDestLength);
  v5 = sub_18BBF358C(*(_QWORD *)(a1 + 176)) + 7;
  v6 = sub_18BBF3BF0(*(_QWORD **)(a1 + 176)) + 7;
  v7 = sub_18BBF038C(*(_QWORD *)(a1 + 160)) + 7;
  v8 = 4 * *(_DWORD *)(*(_QWORD *)(a1 + 184) + 8) + 7;
  pDestLength[0] = 0;
  v9 = *(unsigned __int16 *)(a1 + 48);
  if ((v9 & 0x11) != 0)
  {
    v10 = 0;
  }
  else if ((v9 & 2) != 0)
  {
    v10 = (const UChar *)(a1 + 50);
  }
  else
  {
    v10 = *(const UChar **)(a1 + 64);
  }
  v11 = v5 & 0xFFFFFFF8;
  v12 = v6 & 0xFFFFFFF8;
  v13 = v7 & 0xFFFFFFF8;
  v14 = v8 & 0xFFFFFFF8;
  if ((v9 & 0x8000) != 0)
    v15 = *(_DWORD *)(a1 + 52);
  else
    v15 = v9 >> 5;
  u_strToUTF8WithSub(0, 0, pDestLength, v10, v15, 65533, 0, *(UErrorCode **)(a1 + 16));
  **(_DWORD **)(a1 + 16) = 0;
  v16 = v12 + v11 + 80;
  v17 = v13 + v16 + v14;
  *(_QWORD *)destCapacity = (pDestLength[0] & 0xFFFFFFFFFFFFFFF8) + 8;
  v26 = v14;
  v18 = *(_QWORD *)destCapacity + v17;
  result = uprv_malloc(v18);
  if (!result)
  {
    **(_DWORD **)(a1 + 16) = 7;
    return result;
  }
  v19 = result;
  bzero(result, v18);
  *v19 = 45472;
  v19[1] = 6;
  v19[2] = v18;
  v19[3] = sub_18BBF0418(*(_QWORD *)(a1 + 160));
  v19[4] = 80;
  v19[5] = v11;
  v19[6] = v11 + 80;
  v19[7] = v12;
  v19[8] = v16;
  v19[12] = v13 + v16;
  v19[13] = v26;
  v19[9] = v13;
  v19[10] = v17;
  v19[11] = pDestLength[0];
  *((_QWORD *)v19 + 8) = 0;
  *((_QWORD *)v19 + 9) = 0;
  *((_QWORD *)v19 + 7) = 0;
  sub_18BBF35F4(*(_QWORD *)(a1 + 176), v19 + 20);
  sub_18BBF3C50(*(_QWORD *)(a1 + 176), (_DWORD *)((char *)v19 + v19[6]));
  sub_18BBF0424(*(_QWORD *)(a1 + 160), (uint64_t)v19 + v19[8]);
  v20 = *(int **)(a1 + 184);
  if (v20[2] >= 1)
  {
    v21 = 0;
    v22 = (char *)v19 + v19[12];
    do
    {
      *(_DWORD *)&v22[4 * v21] = icu::UVector::elementAti((icu::UVector *)v20, v21);
      ++v21;
      v20 = *(int **)(a1 + 184);
    }
    while (v21 < v20[2]);
  }
  v23 = *(unsigned __int16 *)(a1 + 48);
  if ((v23 & 0x11) != 0)
  {
    v24 = 0;
    if ((v23 & 0x8000) != 0)
      goto LABEL_23;
LABEL_21:
    v25 = v23 >> 5;
    goto LABEL_24;
  }
  if ((v23 & 2) != 0)
  {
    v24 = (const UChar *)(a1 + 50);
    if ((v23 & 0x8000) == 0)
      goto LABEL_21;
  }
  else
  {
    v24 = *(const UChar **)(a1 + 64);
    if ((v23 & 0x8000) == 0)
      goto LABEL_21;
  }
LABEL_23:
  v25 = *(_DWORD *)(a1 + 52);
LABEL_24:
  u_strToUTF8WithSub((char *)v19 + v19[10], destCapacity[0], pDestLength, v24, v25, 65533, 0, *(UErrorCode **)(a1 + 16));
  if (**(int **)(a1 + 16) >= 1)
    return 0;
  else
    return v19;
}

icu::RuleBasedBreakIterator *sub_18BBEBC04(UChar **a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  icu::RuleBasedBreakIterator *v7;
  uint64_t v9;
  icu::RuleBasedBreakIterator *v10;
  _OWORD v11[12];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  memset(v11, 0, sizeof(v11));
  sub_18BBEB6F8((uint64_t)v11, a1, a2, a3);
  if (*(int *)a3 <= 0)
  {
    v4 = sub_18BBEBD1C((uint64_t)v11, a3);
    v6 = (uint64_t *)*(unsigned int *)a3;
    if ((int)v6 <= 0)
    {
      v9 = (uint64_t)v4;
      v10 = (icu::RuleBasedBreakIterator *)icu::UMemory::operator new(v6, (icu::UMemory *)0x310, v5);
      if (v10)
      {
        v7 = v10;
        icu::RuleBasedBreakIterator::RuleBasedBreakIterator(v10, v9, a3);
        if (*(int *)a3 < 1)
          goto LABEL_4;
        (*(void (**)(icu::RuleBasedBreakIterator *))(*(_QWORD *)v7 + 8))(v7);
      }
      else if (*(int *)a3 < 1)
      {
        v7 = 0;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_4;
      }
    }
  }
  v7 = 0;
LABEL_4:
  sub_18BBEB830((uint64_t)v11);
  return v7;
}

uint64_t *sub_18BBEBD1C(uint64_t a1, UErrorCode *a2)
{
  unint64_t v4;
  uint64_t *result;
  unint64_t v6;
  uint64_t *v7;
  UErrorCode **v8;
  unint64_t v9;

  if (*(int *)a2 > 0)
    return 0;
  sub_18BBEDF08(*(_QWORD *)(a1 + 104));
  if (*(int *)a2 > 0)
    return 0;
  sub_18BBEFCB0(*(_QWORD *)(a1 + 160), v4);
  result = icu::UMemory::operator new(v7, (icu::UMemory *)0x38, v6);
  if (result)
  {
    v8 = (UErrorCode **)sub_18BBF16C0(result, a1, a1 + 112, a2);
    *(_QWORD *)(a1 + 176) = v8;
    sub_18BBF175C(v8, v9);
    sub_18BBEBDD0(a1);
    sub_18BBF3810(*(icu::UVector ***)(a1 + 176), a2);
    sub_18BBF02DC(*(_QWORD *)(a1 + 160));
    result = (uint64_t *)sub_18BBEB948(a1);
    if (*(int *)a2 >= 1)
      return 0;
  }
  else
  {
    *(_QWORD *)(a1 + 176) = 0;
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

uint64_t sub_18BBEBDD0(uint64_t a1)
{
  int v2;
  char v3;
  uint64_t result;
  uint64_t v5;

  do
  {
    v5 = 3;
    v2 = sub_18BBF2E50(*(icu::UVector ***)(a1 + 176), (int *)&v5);
    if (v2)
    {
      do
      {
        sub_18BBF033C(*(_QWORD *)(a1 + 160), v5);
        sub_18BBF2FB0(*(_QWORD *)(a1 + 176), SHIDWORD(v5));
      }
      while ((sub_18BBF2E50(*(icu::UVector ***)(a1 + 176), (int *)&v5) & 1) != 0);
    }
    do
    {
      v3 = v2;
      result = sub_18BBF352C(*(icu::UVector ***)(a1 + 176));
      LOBYTE(v2) = 1;
    }
    while ((int)result > 0);
  }
  while ((v3 & 1) != 0);
  return result;
}

uint64_t sub_18BBEBE5C(uint64_t a1, unint64_t a2, uint64_t a3, UErrorCode *a4)
{
  _QWORD *v6;
  uint64_t *v7;
  icu::UVector *v9;
  unint64_t v10;
  uint64_t *v11;
  icu::UVector *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;

  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)a1 = off_1E224B2F0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 80) = a1 + 48;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  v6 = (_QWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  if (a3)
  {
    *(_QWORD *)(a3 + 64) = 0;
    *(_OWORD *)(a3 + 32) = 0uLL;
    *(_OWORD *)(a3 + 48) = 0uLL;
    *(_OWORD *)a3 = 0uLL;
    *(_OWORD *)(a3 + 16) = 0uLL;
  }
  v7 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v7 <= 0)
  {
    v9 = (icu::UVector *)icu::UMemory::operator new(v7, (icu::UMemory *)0x28, a2);
    if (v9)
      v9 = icu::UVector::UVector(v9, a4);
    *(_QWORD *)(a1 + 104) = v9;
    v12 = (icu::UVector *)icu::UMemory::operator new(v11, (icu::UMemory *)0x28, v10);
    if (v12)
      v12 = icu::UVector::UVector(v12, a4);
    *(_QWORD *)(a1 + 144) = v12;
    v15 = icu::UMemory::operator new(v14, (icu::UMemory *)0xC78, v13);
    if (v15)
      v15 = (uint64_t *)sub_18BBEE478((uint64_t)v15, a1);
    *(_QWORD *)(a1 + 40) = v15;
    v18 = icu::UMemory::operator new(v17, (icu::UMemory *)0x30, v16);
    if (v18)
    {
      *(_QWORD *)(a1 + 96) = sub_18BBF0598((uint64_t)v18, a1);
      if (*(int *)a4 >= 1 || *(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 104) && *(_QWORD *)(a1 + 144))
        return a1;
    }
    else
    {
      *v6 = 0;
      if (*(int *)a4 >= 1)
        return a1;
    }
    *a4 = U_MEMORY_ALLOCATION_ERROR;
  }
  return a1;
}

uint64_t sub_18BBEBF84(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = off_1E224B2F0;
  v2 = icu::UVector::elementAt(*(icu::UVector **)(a1 + 104), 0);
  if (v2)
  {
    v3 = 1;
    do
    {
      v4 = (void *)sub_18BBEB4E4(v2);
      icu::UMemory::operator delete(v4);
      v2 = icu::UVector::elementAt(*(icu::UVector **)(a1 + 104), v3++);
    }
    while (v2);
  }
  v5 = *(_QWORD *)(a1 + 104);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(_QWORD *)(a1 + 96))
  {
    v6 = (void *)sub_18BBF0610();
    icu::UMemory::operator delete(v6);
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = (void *)sub_18BBF4010();
    icu::UMemory::operator delete(v7);
  }
  if (*(_QWORD *)(a1 + 120))
  {
    v8 = (void *)sub_18BBF4010();
    icu::UMemory::operator delete(v8);
  }
  if (*(_QWORD *)(a1 + 128))
  {
    v9 = (void *)sub_18BBF4010();
    icu::UMemory::operator delete(v9);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = (void *)sub_18BBF4010();
    icu::UMemory::operator delete(v10);
  }
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
  {
    v12 = (void *)sub_18BBEB4E4(v11);
    icu::UMemory::operator delete(v12);
  }
  v13 = *(_QWORD *)(a1 + 56);
  if (v13)
  {
    v14 = (void *)sub_18BBEB4E4(v13);
    icu::UMemory::operator delete(v14);
  }
  v15 = *(_QWORD *)(a1 + 64);
  if (v15)
  {
    v16 = (void *)sub_18BBEB4E4(v15);
    icu::UMemory::operator delete(v16);
  }
  v17 = *(_QWORD *)(a1 + 72);
  if (v17)
  {
    v18 = (void *)sub_18BBEB4E4(v17);
    icu::UMemory::operator delete(v18);
  }
  v19 = *(_QWORD *)(a1 + 40);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(_QWORD *)(a1 + 144);
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  return a1;
}

void sub_18BBEC0B0(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_18BBEBF84(a1);
  icu::UMemory::operator delete(v1);
}

_DWORD *sub_18BBEC0C4(uint64_t a1)
{
  _DWORD *v1;
  void *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  signed int v16;
  _DWORD *v17;
  int v18;
  int v19;
  int *v20;
  uint64_t v21;
  char *v22;
  UChar **v23;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  signed int v29;
  UChar *v30;
  UChar *v31;
  UChar *v32[8];
  _OWORD v33[4];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (**(int **)(a1 + 16) > 0)
    return 0;
  memset(v33, 0, sizeof(v33));
  sub_18BBEF528(*(_QWORD *)(a1 + 32), (uint64_t)v32);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v33, v32);
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)v32);
  v4 = (sub_18BBF5330(*(_QWORD *)(a1 + 112)) + 7) & 0xFFFFFFF8;
  v5 = (sub_18BBF5330(*(_QWORD *)(a1 + 120)) + 7) & 0xFFFFFFF8;
  v6 = (sub_18BBF5330(*(_QWORD *)(a1 + 128)) + 7) & 0xFFFFFFF8;
  v7 = (sub_18BBF5330(*(_QWORD *)(a1 + 136)) + 7) & 0xFFFFFFF8;
  v8 = (sub_18BBF0BEC(*(_QWORD *)(a1 + 96)) + 7) & 0xFFFFFFF8;
  v9 = WORD4(v33[0]) >> 5;
  if (SWORD4(v33[0]) < 0)
    v9 = HIDWORD(v33[0]);
  v28 = v4;
  v10 = v4 + 96;
  v11 = v5 + v4 + 96;
  v26 = v7;
  v27 = v6;
  v12 = v6 + v11;
  v13 = v7 + v6 + v11;
  v14 = v8 + v13;
  v25 = (4 * *(_DWORD *)(*(_QWORD *)(a1 + 144) + 8) + 7) & 0xFFFFFFF8;
  v15 = v8 + v13 + v25;
  v29 = (2 * v9 + 9) & 0xFFFFFFF8;
  v16 = v15 + v29;
  v17 = uprv_malloc((int)(v15 + v29));
  v1 = v17;
  if (v17)
  {
    bzero(v17, v16);
    *v1 = 45472;
    v1[1] = 259;
    v1[2] = v16;
    v1[3] = sub_18BBF0CC8(*(_QWORD *)(a1 + 96));
    v1[4] = 96;
    v1[5] = v28;
    v1[6] = v10;
    v1[7] = v5;
    v1[8] = v11;
    v1[9] = v27;
    v1[10] = v12;
    v1[11] = v26;
    v1[12] = v13;
    v18 = sub_18BBF0BEC(*(_QWORD *)(a1 + 96));
    v1[16] = v14;
    v1[17] = v25;
    v1[13] = v18;
    v1[14] = v15;
    v19 = WORD4(v33[0]) >> 5;
    if (SWORD4(v33[0]) < 0)
      v19 = HIDWORD(v33[0]);
    v1[15] = 2 * v19;
    *((_QWORD *)v1 + 10) = 0;
    *((_QWORD *)v1 + 11) = 0;
    *((_QWORD *)v1 + 9) = 0;
    sub_18BBF5380(*(_QWORD *)(a1 + 112), v1 + 24);
    sub_18BBF5380(*(_QWORD *)(a1 + 120), (_DWORD *)((char *)v1 + v1[6]));
    sub_18BBF5380(*(_QWORD *)(a1 + 128), (_DWORD *)((char *)v1 + v1[8]));
    sub_18BBF5380(*(_QWORD *)(a1 + 136), (_DWORD *)((char *)v1 + v1[10]));
    sub_18BBF0CA8(*(_QWORD *)(a1 + 96), (_DWORD *)((char *)v1 + v1[12]));
    v20 = *(int **)(a1 + 144);
    if (v20[2] >= 1)
    {
      v21 = 0;
      v22 = (char *)v1 + v1[16];
      do
      {
        *(_DWORD *)&v22[4 * v21] = icu::UVector::elementAti((icu::UVector *)v20, v21);
        ++v21;
        v20 = *(int **)(a1 + 144);
      }
      while (v21 < v20[2]);
    }
    v31 = (UChar *)((char *)v1 + v1[14]);
    icu::UnicodeString::extract((uint64_t)v33, &v31, (v29 >> 1) | 1, *(int **)(a1 + 16));
    v30 = v31;
    v23 = &v30;
  }
  else
  {
    v23 = *(UChar ***)(a1 + 16);
    *(_DWORD *)v23 = 7;
  }
  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v33);
  return v1;
}

uint64_t *sub_18BBEC3A8(unint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  uint64_t *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  _DWORD *v33;
  uint64_t *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v40 = 0u;
  v38 = 0u;
  memset(v39, 0, sizeof(v39));
  v36 = 0u;
  v37 = 0u;
  v35 = 0u;
  sub_18BBEBE5C((uint64_t)&v35, a1, a2, a3);
  v4 = 0;
  if (*(int *)a3 <= 0)
  {
    sub_18BBEF904(*((uint64_t *)&v37 + 1));
    sub_18BBF0614(v40, v5);
    v8 = (unint64_t *)icu::UMemory::operator new(v7, (icu::UMemory *)0x20, v6);
    if (v8)
      v8 = sub_18BBF3FA4(v8, (unint64_t)&v35, (unint64_t)&v38);
    *(_QWORD *)&v41 = v8;
    v11 = (unint64_t *)icu::UMemory::operator new(v10, (icu::UMemory *)0x20, v9);
    if (v11)
      v11 = sub_18BBF3FA4(v11, (unint64_t)&v35, (unint64_t)&v38 + 8);
    *((_QWORD *)&v41 + 1) = v11;
    v14 = (unint64_t *)icu::UMemory::operator new(v13, (icu::UMemory *)0x20, v12);
    if (v14)
      v14 = sub_18BBF3FA4(v14, (unint64_t)&v35, (unint64_t)v39);
    *(_QWORD *)&v42 = v14;
    v17 = (unint64_t *)icu::UMemory::operator new(v16, (icu::UMemory *)0x20, v15);
    v19 = v17;
    if (v17)
      sub_18BBF3FA4(v17, (unint64_t)&v35, (unint64_t)v39 + 8);
    *((_QWORD *)&v42 + 1) = v19;
    v20 = *((_QWORD *)&v41 + 1);
    v21 = v41;
    if (v19 && (_QWORD)v41 && *((_QWORD *)&v41 + 1) && (_QWORD)v42)
    {
      sub_18BBF4014(v41, v18);
      sub_18BBF4014(*((uint64_t *)&v41 + 1), v22);
      sub_18BBF4014(v42, v23);
      sub_18BBF4014(*((uint64_t *)&v42 + 1), v24);
      v25 = sub_18BBEC0C4((uint64_t)&v35);
      v27 = (uint64_t *)*(unsigned int *)v36;
      if ((int)v27 <= 0)
      {
        v33 = v25;
        v34 = icu::UMemory::operator new(v27, (icu::UMemory *)0x248, v26);
        if (v34)
        {
          v4 = v34;
          icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(v34, v33, a3);
          if (*(int *)a3 < 1)
            goto LABEL_25;
          (*(void (**)(uint64_t *))(*v4 + 8))(v4);
        }
        else if (*(int *)a3 < 1)
        {
          v4 = 0;
          *a3 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_25;
        }
      }
      v4 = 0;
    }
    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
      if (v21)
      {
        v28 = (void *)sub_18BBF4010(v21);
        icu::UMemory::operator delete(v28);
        v20 = *((_QWORD *)&v41 + 1);
      }
      *(_QWORD *)&v41 = 0;
      if (v20)
      {
        v29 = (void *)sub_18BBF4010(v20);
        icu::UMemory::operator delete(v29);
      }
      *((_QWORD *)&v41 + 1) = 0;
      if ((_QWORD)v42)
      {
        v30 = (void *)sub_18BBF4010(v42);
        icu::UMemory::operator delete(v30);
      }
      *(_QWORD *)&v42 = 0;
      if (*((_QWORD *)&v42 + 1))
      {
        v31 = (void *)sub_18BBF4010(*((_QWORD *)&v42 + 1));
        icu::UMemory::operator delete(v31);
      }
      v4 = 0;
      *((_QWORD *)&v42 + 1) = 0;
    }
  }
LABEL_25:
  sub_18BBEBF84((uint64_t)&v35);
  return v4;
}

uint64_t sub_18BBEC5C8(uint64_t a1, uint64_t a2)
{
  icu::UnicodeSet *v4;
  uint64_t i;
  void *v6;
  icu::UnicodeSet *v7;
  icu::UnicodeSet *v8;
  icu::UnicodeSet *v9;
  icu::UnicodeSet *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v20;
  int32x2_t *v21;
  _BYTE v22[200];
  _BYTE v23[64];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E224B328;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 48) = off_1E2256B38;
  *(_WORD *)(a1 + 56) = 2;
  v4 = (icu::UnicodeSet *)(a1 + 1152);
  for (i = 1152; i != 3152; i += 200)
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + i));
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 3152) = 0;
  *(_DWORD *)(a1 + 1128) = 0;
  *(_DWORD *)(a1 + 1131) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  if (**(int **)(a2 + 16) <= 0)
  {
    icu::UnicodeString::UnicodeString((uint64_t)v23, (uint64_t)L"[^[\\p{Z}\\u0020-\\u007f]-[\\p{L}]-[\\p{N}]]");
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v22, (const icu::UnicodeString *)v23, *(UErrorCode **)(a2 + 16));
    icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 1752), (const icu::UnicodeSet *)v22);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v22);
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v23);
    v7 = icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 1952), 9u, 0xDu);
    v8 = icu::UnicodeSet::add(v7, 0x20u);
    v9 = icu::UnicodeSet::add(v8, 0x85u);
    v10 = icu::UnicodeSet::add(v9, 0x200Eu, 0x200Fu);
    icu::UnicodeSet::add(v10, 0x2028u, 0x2029u);
    icu::UnicodeString::UnicodeString((uint64_t)v23, (uint64_t)L"[_\\p{L}\\p{N}]");
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v22, (const icu::UnicodeString *)v23, *(UErrorCode **)(a2 + 16));
    icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 1352), (const icu::UnicodeSet *)v22);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v22);
    v12 = icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v23);
    icu::UnicodeString::UnicodeString((uint64_t)v12, (uint64_t)L"[_\\p{L}]");
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v22, (const icu::UnicodeString *)v23, *(UErrorCode **)(a2 + 16));
    icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 1552), (const icu::UnicodeSet *)v22);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v22);
    v14 = icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v23);
    icu::UnicodeString::UnicodeString((uint64_t)v14, (uint64_t)"[");
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v22, (const icu::UnicodeString *)v23, *(UErrorCode **)(a2 + 16));
    icu::UnicodeSet::operator=(v4, (const icu::UnicodeSet *)v22);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v22);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v23);
    v17 = *(uint64_t **)(a2 + 16);
    if (*(_DWORD *)v17 == 1)
    {
      v18 = 66058;
LABEL_6:
      *(_DWORD *)v17 = v18;
      return a1;
    }
    if (*(int *)v17 > 0)
      return a1;
    v20 = icu::UMemory::operator new(v17, (icu::UMemory *)0x70, v16);
    if (!v20)
    {
      *(_QWORD *)(a1 + 1136) = 0;
      v17 = *(uint64_t **)(a2 + 16);
      v18 = 7;
      goto LABEL_6;
    }
    *(_QWORD *)(a1 + 1136) = sub_18BBF0EF0(v20, a1, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 16));
    v21 = uhash_open((uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, *(int **)(a2 + 16));
    *(_QWORD *)(a1 + 1144) = v21;
    if (**(int **)(a2 + 16) <= 0)
      uhash_setValueDeleter((uint64_t)v21, (uint64_t)sub_18BBEC884);
  }
  return a1;
}

void sub_18BBEC884(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  uprv_free(a1);
}

uint64_t sub_18BBEC8BC(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  int v4;
  uint64_t v5;
  void *v6;
  BOOL v7;
  uint64_t i;
  void *v9;

  *(_QWORD *)a1 = off_1E224B328;
  v2 = *(_QWORD *)(a1 + 1136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(void ***)(a1 + 1144);
  if (v3)
  {
    uhash_close(v3);
    *(_QWORD *)(a1 + 1144) = 0;
  }
  v4 = *(_DWORD *)(a1 + 1128);
  if (v4 >= 1)
  {
    do
    {
      v5 = *(_QWORD *)(a1 + 8 * v4 + 328);
      if (v5)
      {
        v6 = (void *)sub_18BBEB4E4(v5);
        icu::UMemory::operator delete(v6);
        v4 = *(_DWORD *)(a1 + 1128);
      }
      v7 = __OFSUB__(v4--, 1);
      *(_DWORD *)(a1 + 1128) = v4;
    }
    while (!((v4 < 0) ^ v7 | (v4 == 0)));
  }
  for (i = 2952; i != 952; i -= 200)
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + i));
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)(a1 + 48));
  return a1;
}

void sub_18BBEC960(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_18BBEC8BC(a1);
  icu::UMemory::operator delete(v1);
}

BOOL sub_18BBEC974(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  int *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  int v54;
  uint64_t v55;
  _BYTE *v56;
  _BOOL4 v57;
  void *v58;
  char *v59;
  _BOOL4 v60;
  void *v61;
  _BOOL4 v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL4 v66;
  void *v67;
  _BOOL4 v68;
  void *v69;
  _BOOL4 v70;
  void *v71;
  _BOOL4 v72;
  void *v73;
  void *v74;
  int *v75;
  const __int16 *v76;
  const char *v77;
  const __int16 *v78;
  const char *v79;
  const __int16 *v80;
  const __int16 *v81;
  const __int16 *v82;
  const __int16 *v83;
  const char *v84;
  char v85[8];
  unsigned __int16 v86;
  unsigned int v87;
  _DWORD v88[18];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  result = 0;
  switch((int)a2)
  {
    case 0:
      if (*(_QWORD *)(*(_QWORD *)(a1 + 8 * *(int *)(a1 + 1128) + 328) + 16))
        return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(int **)(v4 + 16);
      if (*v5 > 0)
        return 0;
      v6 = 9;
      goto LABEL_62;
    case 1:
      v8 = sub_18BBED508(a1, 0);
      if (**(int **)(*(_QWORD *)(a1 + 8) + 16) > 0)
        return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
      v9 = v8;
      v84 = "a";
      icu::UnicodeString::UnicodeString(v88, 1, &v84);
      sub_18BBED700(a1, (uint64_t)v88, v9, 0);
      icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v88);
      goto LABEL_45;
    case 2:
      v11 = sub_18BBED5C4(a1, 1);
      v12 = *(int *)(a1 + 1128);
      v13 = *(_QWORD *)(a1 + 328 + 8 * ((int)v12 - 2));
      v14 = *(_QWORD *)(a1 + 328 + 8 * ((int)v12 - 1));
      v15 = *(_QWORD *)(a1 + 328 + 8 * v12);
      *(_DWORD *)(v15 + 112) = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v15 + 116) = *(_DWORD *)(a1 + 16);
      (*(void (**)(_QWORD, double))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), v11);
      *(_QWORD *)(v14 + 16) = v15;
      *(_QWORD *)(v15 + 8) = v14;
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 1136) + 48))(*(_QWORD *)(a1 + 1136), v14 + 48, v14, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
      v16 = *(_QWORD *)(a1 + 8);
      if (**(int **)(v16 + 16) >= 1)
      {
        v17 = *(_QWORD *)(v16 + 24);
        if (v17)
        {
          *(_QWORD *)v17 = *(_QWORD *)(a1 + 28);
          *(_WORD *)(v17 + 8) = 0;
          *(_WORD *)(v17 + 40) = 0;
        }
      }
      v18 = (void *)sub_18BBEB4E4(v13);
      icu::UMemory::operator delete(v18);
      *(_DWORD *)(a1 + 1128) -= 3;
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 3:
      sub_18BBED5C4(a1, 1);
      v19 = *(_QWORD *)(a1 + 8);
      if (**(int **)(v19 + 16) > 0)
        return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
      v20 = *(_QWORD *)(a1 + 8 * *(int *)(a1 + 1128) + 328);
      if (!*(_BYTE *)(a1 + 1133))
        goto LABEL_17;
      v21 = sub_18BBED508(a1, 6uLL);
      v22 = sub_18BBED508(a1, 8uLL);
      if (**(int **)(*(_QWORD *)(a1 + 8) + 16) > 0)
        return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
      v23 = *(int *)(a1 + 1128) - 2;
      *(_DWORD *)(a1 + 1128) = v23;
      *(_QWORD *)(v22 + 16) = v20;
      *(_QWORD *)(v22 + 24) = v21;
      *(_QWORD *)(a1 + 8 * v23 + 328) = v22;
      *(_DWORD *)(v21 + 124) = *(_DWORD *)(a1 + 3152);
      *(_BYTE *)(v21 + 128) = 1;
      v19 = *(_QWORD *)(a1 + 8);
      v20 = v22;
LABEL_17:
      *(_BYTE *)(v20 + 129) = 1;
      if (*(_BYTE *)(v19 + 152) && !*(_BYTE *)(a1 + 1134))
        *(_BYTE *)(v20 + 130) = 1;
      if (*(_BYTE *)(a1 + 1132))
        v24 = (uint64_t *)(v19 + 136);
      else
        v24 = *(uint64_t **)(v19 + 144);
      v64 = *v24;
      if (!*v24)
        goto LABEL_93;
      v65 = sub_18BBED508(a1, 9uLL);
      if (**(int **)(*(_QWORD *)(a1 + 8) + 16) <= 0)
      {
        *(_QWORD *)(v65 + 16) = v64;
        *(_QWORD *)(v64 + 8) = v65;
        *(_QWORD *)(v65 + 24) = v20;
        *(_QWORD *)(v20 + 8) = v65;
        v20 = v65;
LABEL_93:
        *v24 = v20;
        *(_DWORD *)(a1 + 1131) = 0;
        *(_DWORD *)(a1 + 1128) = 0;
      }
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 4:
      v25 = *(_QWORD *)(a1 + 8 * *(int *)(a1 + 1128) + 328);
      if (v25 && *(_DWORD *)v25 == 2)
      {
        *(_DWORD *)(v25 + 116) = *(_DWORD *)(a1 + 16);
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), (*(_DWORD *)(v25 + 112) + 1));
        *(_QWORD *)(v25 + 16) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1136) + 40))(*(_QWORD *)(a1 + 1136), v25 + 48);
      }
      else
      {
        v52 = *(_QWORD *)(a1 + 8);
        v53 = *(int **)(v52 + 16);
        if (*v53 <= 0)
        {
          v54 = 66048;
LABEL_77:
          *v53 = v54;
          v55 = *(_QWORD *)(v52 + 24);
          if (v55)
          {
            *(_QWORD *)v55 = *(_QWORD *)(a1 + 28);
            *(_WORD *)(v55 + 8) = 0;
            *(_WORD *)(v55 + 40) = 0;
          }
        }
      }
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 5:
      return result;
    case 6:
      sub_18BBED5C4(a1, 4);
      v26 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v26 - 1;
      v27 = *(_QWORD *)(a1 + 8 * v26 + 328);
      v28 = a1;
      v29 = 8;
      goto LABEL_71;
    case 7:
    case 12:
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 8:
      sub_18BBED5C4(a1, 4);
      v30 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v30 - 1;
      v27 = *(_QWORD *)(a1 + 8 * v30 + 328);
      v28 = a1;
      v29 = 9;
      goto LABEL_71;
    case 9:
      sub_18BBED5C4(a1, 2);
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 10:
      sub_18BBED508(a1, 7uLL);
      ++*(_DWORD *)(a1 + 3152);
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 11:
      v31 = a1;
      v32 = 15;
      goto LABEL_54;
    case 13:
      *(_BYTE *)(a1 + 1134) = 1;
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 14:
      memset(v88, 0, 64);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v88, *(const icu::UnicodeString **)(*(_QWORD *)(a1 + 8) + 32), *(_DWORD *)(a1 + 3156), (*(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 3156)));
      v83 = L"chain";
      icu::UnicodeString::UnicodeString(v85, 1, &v83);
      if ((v88[2] & 1) != 0)
      {
        v35 = v86;
        v36 = v86 & 1;
      }
      else
      {
        if (SLOWORD(v88[2]) >= 0)
          v33 = LOWORD(v88[2]) >> 5;
        else
          v33 = v88[3];
        if ((v86 & 0x8000u) == 0)
          v34 = v86 >> 5;
        else
          v34 = v87;
        if ((v86 & 1) != 0 || v33 != (_DWORD)v34)
        {
          icu::UnicodeString::~UnicodeString((void *)v34, (icu::UnicodeString *)v85);
          goto LABEL_83;
        }
        v36 = icu::UnicodeString::doEquals((icu::UnicodeString *)v88, (const icu::UnicodeString *)v85, v33);
      }
      icu::UnicodeString::~UnicodeString((void *)v35, (icu::UnicodeString *)v85);
      if (v36)
      {
        v56 = *(_BYTE **)(a1 + 8);
        v56[152] = 1;
        goto LABEL_97;
      }
LABEL_83:
      v82 = L"forward";
      icu::UnicodeString::UnicodeString(v85, 1, &v82);
      v57 = sub_18BBED900((uint64_t)v88, (uint64_t)v85);
      icu::UnicodeString::~UnicodeString(v58, (icu::UnicodeString *)v85);
      if (v57)
      {
        v56 = *(_BYTE **)(a1 + 8);
        v59 = v56 + 112;
LABEL_96:
        *((_QWORD *)v56 + 18) = v59;
        goto LABEL_97;
      }
      v81 = L"reverse";
      icu::UnicodeString::UnicodeString(v85, 1, &v81);
      v60 = sub_18BBED900((uint64_t)v88, (uint64_t)v85);
      icu::UnicodeString::~UnicodeString(v61, (icu::UnicodeString *)v85);
      if (v60)
      {
        v56 = *(_BYTE **)(a1 + 8);
        v59 = v56 + 120;
        goto LABEL_96;
      }
      v80 = L"safe_forward";
      icu::UnicodeString::UnicodeString(v85, 1, &v80);
      v62 = sub_18BBED900((uint64_t)v88, (uint64_t)v85);
      icu::UnicodeString::~UnicodeString(v63, (icu::UnicodeString *)v85);
      if (v62)
      {
        v56 = *(_BYTE **)(a1 + 8);
        v59 = v56 + 128;
        goto LABEL_96;
      }
      v79 = "s";
      icu::UnicodeString::UnicodeString(v85, 1, &v79);
      v66 = sub_18BBED900((uint64_t)v88, (uint64_t)v85);
      icu::UnicodeString::~UnicodeString(v67, (icu::UnicodeString *)v85);
      if (v66)
      {
        v56 = *(_BYTE **)(a1 + 8);
        v59 = v56 + 136;
        goto LABEL_96;
      }
      v78 = L"lookAheadHardBreak";
      icu::UnicodeString::UnicodeString(v85, 1, &v78);
      v68 = sub_18BBED900((uint64_t)v88, (uint64_t)v85);
      icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)v85);
      if (v68)
      {
        v56 = *(_BYTE **)(a1 + 8);
        v56[153] = 1;
      }
      else
      {
        v77 = "q";
        icu::UnicodeString::UnicodeString(v85, 1, &v77);
        v70 = sub_18BBED900((uint64_t)v88, (uint64_t)v85);
        icu::UnicodeString::~UnicodeString(v71, (icu::UnicodeString *)v85);
        if (v70)
        {
          icu::UnicodeSet::clear((icu::UnicodeSet *)(a1 + 1752));
        }
        else
        {
          v76 = L"unquoted_literals";
          icu::UnicodeString::UnicodeString(v85, 1, &v76);
          v72 = sub_18BBED900((uint64_t)v88, (uint64_t)v85);
          icu::UnicodeString::~UnicodeString(v73, (icu::UnicodeString *)v85);
          if (v72)
          {
            icu::UnicodeString::UnicodeString((uint64_t)v85, (uint64_t)L"[^[\\p{Z}\\u0020-\\u007f]-[\\p{L}]-[\\p{N}]]");
            icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 1752), (const icu::UnicodeString *)v85, *(UErrorCode **)(*(_QWORD *)(a1 + 8) + 16));
            icu::UnicodeString::~UnicodeString(v74, (icu::UnicodeString *)v85);
          }
          else
          {
            v56 = *(_BYTE **)(a1 + 8);
            v75 = (int *)*((_QWORD *)v56 + 2);
            if (*v75 <= 0)
            {
              *v75 = 66060;
              v56 = (_BYTE *)*((_QWORD *)v56 + 3);
              if (v56)
              {
                *(_QWORD *)v56 = *(_QWORD *)(a1 + 28);
                *((_WORD *)v56 + 4) = 0;
                *((_WORD *)v56 + 20) = 0;
              }
            }
          }
        }
      }
LABEL_97:
      icu::UnicodeString::~UnicodeString(v56, (icu::UnicodeString *)v88);
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 15:
      *(_DWORD *)(a1 + 3156) = *(_DWORD *)(a1 + 16);
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 16:
      *(_BYTE *)(a1 + 1132) = 1;
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 17:
      v37 = sub_18BBED508(a1, 0);
      if (**(int **)(*(_QWORD *)(a1 + 8) + 16) > 0)
        return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
      v9 = v37;
      icu::UnicodeString::UnicodeString((uint64_t)v88, *(_DWORD *)(a1 + 40));
      sub_18BBED700(a1, (uint64_t)v88, v9, 0);
      icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)v88);
LABEL_45:
      v39 = *(unsigned int *)(a1 + 16);
      *(_DWORD *)(v9 + 112) = v39;
      *(_DWORD *)(v9 + 116) = *(_DWORD *)(a1 + 20);
      v40 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
      goto LABEL_67;
    case 18:
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(int **)(v4 + 16);
      if (*v5 > 0)
        return 0;
      v7 = 66051;
      goto LABEL_63;
    case 19:
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(int **)(v4 + 16);
      if (*v5 > 0)
        return 0;
      v6 = 5;
      goto LABEL_62;
    case 20:
      sub_18BBED96C(a1, a2);
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 21:
      v41 = (_DWORD *)sub_18BBED508(a1, 4uLL);
      v42 = *(_QWORD *)(a1 + 8);
      if (**(int **)(v42 + 16) <= 0)
      {
        v41[31] = *(_DWORD *)(a1 + 3152);
        v41[28] = *(_DWORD *)(a1 + 16);
        v41[29] = *(_DWORD *)(a1 + 20);
        (*(void (**)(_QWORD))(**(_QWORD **)(v42 + 32) + 24))(*(_QWORD *)(v42 + 32));
        *(_BYTE *)(a1 + 1133) = 1;
      }
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 22:
      *(_DWORD *)(*(_QWORD *)(a1 + 8 * *(int *)(a1 + 1128) + 320) + 112) = *(_DWORD *)(a1 + 20);
      v31 = a1;
      v32 = 7;
LABEL_54:
      sub_18BBED508(v31, v32);
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 23:
      v43 = sub_18BBED508(a1, 5uLL);
      if (**(int **)(*(_QWORD *)(a1 + 8) + 16) <= 0)
      {
        *(_DWORD *)(v43 + 124) = 0;
        *(_QWORD *)(v43 + 112) = *(_QWORD *)(a1 + 16);
      }
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 24:
      v44 = sub_18BBED508(a1, 2uLL);
      if (**(int **)(*(_QWORD *)(a1 + 8) + 16) <= 0)
        *(_DWORD *)(v44 + 112) = *(_DWORD *)(a1 + 16);
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 25:
      v45 = *(_QWORD *)(a1 + 8 * *(int *)(a1 + 1128) + 328);
      *(_DWORD *)(v45 + 124) = u_charDigitValue(*(_DWORD *)(a1 + 40)) + 10 * *(_DWORD *)(v45 + 124);
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 26:
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(int **)(v4 + 16);
      if (*v5 > 0)
        return 0;
      v6 = 13;
LABEL_62:
      v7 = v6 | 0x10200;
      goto LABEL_63;
    case 27:
      v47 = *(_QWORD *)(a1 + 8 * *(int *)(a1 + 1128) + 328);
      *(_DWORD *)(v47 + 116) = *(_DWORD *)(a1 + 20);
      v40 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
      v39 = *(unsigned int *)(v47 + 112);
LABEL_67:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 24))(v40, v39);
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 28:
      v48 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v48 - 1;
      v27 = *(_QWORD *)(a1 + 8 * v48 + 328);
      v28 = a1;
      v29 = 11;
      goto LABEL_71;
    case 29:
      v49 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v49 - 1;
      v27 = *(_QWORD *)(a1 + 8 * v49 + 328);
      v28 = a1;
      v29 = 12;
      goto LABEL_71;
    case 30:
      v50 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v50 - 1;
      v27 = *(_QWORD *)(a1 + 8 * v50 + 328);
      v28 = a1;
      v29 = 10;
LABEL_71:
      v51 = sub_18BBED508(v28, v29);
      if (**(int **)(*(_QWORD *)(a1 + 8) + 16) <= 0)
      {
        *(_QWORD *)(v51 + 16) = v27;
        *(_QWORD *)(v27 + 8) = v51;
      }
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 31:
      v52 = *(_QWORD *)(a1 + 8);
      v53 = *(int **)(v52 + 16);
      if (*v53 > 0)
        return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
      v54 = 66051;
      goto LABEL_77;
    default:
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(int **)(v4 + 16);
      if (*v5 > 0)
        return 0;
      v7 = 66048;
LABEL_63:
      *v5 = v7;
      v46 = *(_QWORD *)(v4 + 24);
      if (!v46)
        return 0;
      result = 0;
      *(_QWORD *)v46 = *(_QWORD *)(a1 + 28);
      *(_WORD *)(v46 + 8) = 0;
      *(_WORD *)(v46 + 40) = 0;
      return result;
  }
}

uint64_t sub_18BBED508(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  int *v3;
  uint64_t result;
  int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(int **)(v2 + 16);
  if (*v3 > 0)
    return 0;
  v6 = *(_DWORD *)(a1 + 1128);
  if (v6 < 99)
  {
    *(_DWORD *)(a1 + 1128) = v6 + 1;
    result = icu::UMemory::operator new((icu::UMemory *)0xA0, a2);
    if (result)
    {
      result = sub_18BBEB354(result, a2);
      *(_QWORD *)(a1 + 8 * *(int *)(a1 + 1128) + 328) = result;
    }
    else
    {
      *(_QWORD *)(a1 + 8 * *(int *)(a1 + 1128) + 328) = 0;
      **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) = 7;
    }
  }
  else
  {
    *v3 = 66051;
    v7 = *(_QWORD *)(v2 + 24);
    if (!v7)
      return 0;
    result = 0;
    *(_QWORD *)v7 = *(_QWORD *)(a1 + 28);
    *(_WORD *)(v7 + 8) = 0;
    *(_WORD *)(v7 + 40) = 0;
  }
  return result;
}

double sub_18BBED5C4(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  void *v13;
  double result;
  uint64_t v15;
  int *v16;
  uint64_t v17;

  if (a2 <= 3)
    v2 = 3;
  else
    v2 = a2;
  v3 = *(int *)(a1 + 1128);
  v4 = a1 + 8 * v3;
  v5 = *(_QWORD *)(v4 + 320);
  v6 = *(_DWORD *)(v5 + 40);
  if (!v6)
  {
LABEL_18:
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(int **)(v15 + 16);
    if (*v16 <= 0)
    {
      *v16 = 66048;
      v17 = *(_QWORD *)(v15 + 24);
      if (v17)
      {
        result = *(double *)(a1 + 28);
        *(double *)v17 = result;
        *(_WORD *)(v17 + 8) = 0;
        *(_WORD *)(v17 + 40) = 0;
      }
    }
    return result;
  }
  v7 = v3 - 1;
  if (v6 >= v2)
  {
    v9 = a1 + 8 * v3 + 328;
    while (1)
    {
      *(_QWORD *)(v5 + 24) = *(_QWORD *)v9;
      *(_QWORD *)(*(_QWORD *)v9 + 8) = v5;
      v5 = *(_QWORD *)(v9 - 16);
      v6 = *(_DWORD *)(v5 + 40);
      if (!v6)
        break;
      v9 -= 8;
      --v7;
      if (v6 < v2)
      {
        LODWORD(v3) = v7 + 1;
        *(_DWORD *)(a1 + 1128) = v7 + 1;
        v8 = (_QWORD *)(v9 - 8);
        goto LABEL_11;
      }
    }
    *(_DWORD *)(a1 + 1128) = v7;
    goto LABEL_18;
  }
  v8 = (_QWORD *)(v4 + 320);
LABEL_11:
  if (a2 <= 2)
  {
    if (v6 != a2)
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(int **)(v10 + 16);
      if (*v11 <= 0)
      {
        *v11 = 66055;
        v12 = *(_QWORD *)(v10 + 24);
        if (v12)
        {
          *(_QWORD *)v12 = *(_QWORD *)(a1 + 28);
          *(_WORD *)(v12 + 8) = 0;
          *(_WORD *)(v12 + 40) = 0;
        }
      }
    }
    *v8 = *(_QWORD *)(a1 + 8 * (int)v3 + 328);
    *(_DWORD *)(a1 + 1128) = v7;
    v13 = (void *)sub_18BBEB4E4(v5);
    icu::UMemory::operator delete(v13);
  }
  return result;
}

double sub_18BBED700(uint64_t a1, uint64_t a2, uint64_t a3, icu::UnicodeSet *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  double result;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  int v15;
  int32_t v16;
  int32_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  icu::UnicodeSet *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t *v29;
  icu::UnicodeString *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  const char *v36;

  v8 = uhash_get(*(_QWORD *)(a1 + 1144), a2);
  if (v8)
  {
    v12 = v8;
    if (a4)
    {
      icu::UnicodeSet::~UnicodeSet(a4);
      icu::UMemory::operator delete(v13);
    }
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(v12 + 8);
    return result;
  }
  if (!a4)
  {
    v14 = *(unsigned __int16 *)(a2 + 8);
    v15 = (__int16)v14;
    v16 = v14 >> 5;
    if (v15 >= 0)
      v17 = v16;
    else
      v17 = *(_DWORD *)(a2 + 12);
    v36 = "a";
    if (icu::UnicodeString::doCompare(a2, 0, v17, (uint64_t)"a", 0, -1))
    {
      v19 = icu::UnicodeString::char32At((uint64_t *)&v36, (icu::UnicodeString *)a2, 0);
      v21 = (icu::UnicodeSet *)((uint64_t (*)(icu::UMemory *__hidden, unint64_t))icu::UMemory::operator new)((icu::UMemory *)0xC8, v20);
      a4 = v21;
      if (v21)
      {
        v22 = v19;
        v23 = v19;
LABEL_14:
        icu::UnicodeSet::UnicodeSet(v21, v22, v23);
      }
    }
    else
    {
      v21 = (icu::UnicodeSet *)icu::UMemory::operator new((uint64_t *)&v36, (icu::UMemory *)0xC8, v18);
      a4 = v21;
      if (v21)
      {
        v22 = 0;
        v23 = 1114111;
        goto LABEL_14;
      }
    }
  }
  v24 = icu::UMemory::operator new(v10, (icu::UMemory *)0xA0, v9);
  if (v24)
  {
    v25 = v24;
    v26 = sub_18BBEB354(v24, 1);
    *(_QWORD *)(v26 + 32) = a4;
    *(_QWORD *)(v26 + 8) = a3;
    *(_QWORD *)(a3 + 16) = v25;
    icu::UnicodeString::operator=((UChar **)(v26 + 48), (UChar **)a2);
    icu::UVector::addElement(*(icu::UVector **)(*(_QWORD *)(a1 + 8) + 168), v25, *(UErrorCode **)(*(_QWORD *)(a1 + 8) + 16));
    v27 = uprv_malloc(0x10uLL);
    v30 = (icu::UnicodeString *)icu::UMemory::operator new(v29, (icu::UMemory *)0x40, v28);
    if (v30)
    {
      v31 = (uint64_t)v30;
      icu::UnicodeString::UnicodeString(v30, (UChar **)a2);
      if (a4 && v27)
      {
        *v27 = v31;
        v27[1] = v25;
        uhash_put(*(_QWORD *)(a1 + 1144), v31, (uint64_t)v27, *(int **)(*(_QWORD *)(a1 + 8) + 16));
        return result;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    }
    uprv_free(v27);
    if (a4)
    {
      icu::UnicodeSet::~UnicodeSet(a4);
      icu::UMemory::operator delete(v32);
    }
  }
  v33 = *(_QWORD *)(a1 + 8);
  v34 = *(int **)(v33 + 16);
  if (*v34 <= 0)
  {
    *v34 = 7;
    v35 = *(_QWORD *)(v33 + 24);
    if (v35)
    {
      result = *(double *)(a1 + 28);
      *(double *)v35 = result;
      *(_WORD *)(v35 + 8) = 0;
      *(_WORD *)(v35 + 40) = 0;
    }
  }
  return result;
}

BOOL sub_18BBED900(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *(unsigned __int16 *)(a1 + 8);
  if ((v2 & 1) != 0)
    return *(_WORD *)(a2 + 8) & 1;
  if ((v2 & 0x8000) != 0)
    v3 = *(_DWORD *)(a1 + 12);
  else
    v3 = v2 >> 5;
  v4 = 0;
  v5 = *(unsigned __int16 *)(a2 + 8);
  if ((v5 & 0x8000u) == 0)
    v6 = v5 >> 5;
  else
    v6 = *(_DWORD *)(a2 + 12);
  if ((v5 & 1) == 0 && v3 == v6)
    return icu::UnicodeString::doEquals((icu::UnicodeString *)a1, (const icu::UnicodeString *)a2, v3);
  return v4;
}

void sub_18BBED96C(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  icu::UnicodeSet *v5;
  icu::UnicodeSet *v6;
  icu::UnicodeSet *v7;
  UErrorCode v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  UErrorCode *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  UErrorCode v20;
  void (**v21)(icu::ParsePosition *__hidden);
  unint64_t v22;

  v21 = off_1E224A8B0;
  v22 = 0xFFFFFFFF00000000;
  v2 = (uint64_t *)**(unsigned int **)(*(_QWORD *)(a1 + 8) + 16);
  if ((int)v2 > 0)
    goto LABEL_14;
  v4 = *(unsigned int *)(a1 + 16);
  LODWORD(v22) = *(_DWORD *)(a1 + 16);
  v20 = U_ZERO_ERROR;
  v5 = (icu::UnicodeSet *)icu::UMemory::operator new(v2, (icu::UMemory *)0xC8, a2);
  v6 = v5;
  if (!v5)
  {
    v8 = U_MEMORY_ALLOCATION_ERROR;
    v20 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_9;
  }
  icu::UnicodeSet::UnicodeSet(v5);
  icu::UnicodeSet::applyPatternIgnoreSpace(v7, *(const icu::UnicodeString **)(*(_QWORD *)(a1 + 8) + 32), (icu::ParsePosition *)&v21, *(const icu::SymbolTable **)(a1 + 1136), &v20);
  v8 = v20;
  if (v20 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_9:
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(UErrorCode **)(v12 + 16);
    if (*(int *)v13 <= 0)
    {
      *v13 = v8;
      v14 = *(_QWORD *)(v12 + 24);
      if (v14)
      {
        *(_QWORD *)v14 = *(_QWORD *)(a1 + 28);
        *(_WORD *)(v14 + 8) = 0;
        *(_WORD *)(v14 + 40) = 0;
      }
    }
    if (v6)
      goto LABEL_13;
    goto LABEL_14;
  }
  if (icu::UnicodeSet::isEmpty(v6))
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(int **)(v9 + 16);
    if (*v10 <= 0)
    {
      *v10 = 66059;
      v11 = *(_QWORD *)(v9 + 24);
      if (v11)
      {
        *(_QWORD *)v11 = *(_QWORD *)(a1 + 28);
        *(_WORD *)(v11 + 8) = 0;
        *(_WORD *)(v11 + 40) = 0;
      }
    }
LABEL_13:
    icu::UnicodeSet::~UnicodeSet(v6);
    icu::UMemory::operator delete(v15);
    goto LABEL_14;
  }
  v16 = v22;
  while (*(_DWORD *)(a1 + 20) < v16)
    sub_18BBEDC04(a1);
  if (**(int **)(*(_QWORD *)(a1 + 8) + 16) <= 0)
  {
    v17 = sub_18BBED508(a1, 0);
    v18 = *(_QWORD *)(a1 + 8);
    if (**(int **)(v18 + 16) <= 0)
    {
      v19 = v17;
      *(_DWORD *)(v17 + 112) = v4;
      *(_DWORD *)(v17 + 116) = *(_DWORD *)(a1 + 20);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v18 + 32) + 24))(*(_QWORD *)(v18 + 32), v4);
      sub_18BBED700(a1, v19 + 48, v19, v6);
    }
  }
LABEL_14:
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v21);
}

uint64_t sub_18BBEDB40@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  icu::UnicodeString *v7;
  int v8;
  unsigned int v9;

  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = off_1E2256B38;
  *(_WORD *)(a2 + 8) = 2;
  v3 = *(unsigned __int16 *)(this + 8);
  v4 = (__int16)v3;
  v5 = v3 >> 5;
  if (v4 >= 0)
    v6 = v5;
  else
    v6 = *(_DWORD *)(this + 12);
  if (v6 >= 1)
  {
    v7 = (icu::UnicodeString *)this;
    v8 = 0;
    do
    {
      v9 = icu::UnicodeString::char32At(v7, v8);
      if (!u_hasBinaryProperty(v9, UCHAR_PATTERN_WHITE_SPACE))
        icu::UnicodeString::append(a2, v9);
      this = icu::UnicodeString::moveIndex32(v7, v8, 1);
      v8 = this;
    }
    while ((int)this < v6);
  }
  return this;
}

uint64_t sub_18BBEDC04(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;

  v2 = *(_DWORD *)(a1 + 20);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  if (*(__int16 *)(v3 + 8) < 0)
    v4 = (uint64_t *)*(unsigned int *)(v3 + 12);
  else
    v4 = (uint64_t *)(*(unsigned __int16 *)(v3 + 8) >> 5);
  if (v2 < (int)v4)
  {
    v5 = icu::UnicodeString::char32At(v4, (icu::UnicodeString *)v3, v2);
    v6 = *(_QWORD *)(a1 + 8);
    if (v5 >> 11 == 27)
    {
      v7 = *(int **)(v6 + 16);
      if (*v7 <= 0)
      {
        *v7 = 12;
        v8 = *(_QWORD *)(v6 + 24);
        if (v8)
        {
          *(_QWORD *)v8 = *(_QWORD *)(a1 + 28);
          *(_WORD *)(v8 + 8) = 0;
          *(_WORD *)(v8 + 40) = 0;
        }
      }
      return 0xFFFFFFFFLL;
    }
    v9 = v5;
    *(_DWORD *)(a1 + 20) = icu::UnicodeString::moveIndex32(*(icu::UnicodeString **)(v6 + 32), *(_DWORD *)(a1 + 20), 1);
    if ((int)v9 > 132)
    {
      if ((_DWORD)v9 != 133 && (_DWORD)v9 != 8232)
        goto LABEL_26;
    }
    else if ((_DWORD)v9 == 10)
    {
      if (*(_DWORD *)(a1 + 36) == 13)
        goto LABEL_27;
    }
    else if ((_DWORD)v9 != 13)
    {
LABEL_26:
      ++*(_DWORD *)(a1 + 32);
LABEL_27:
      *(_DWORD *)(a1 + 36) = (_DWORD)v9;
      return (uint64_t)v9;
    }
    v11 = *(_DWORD *)(a1 + 28) + 1;
    *(_QWORD *)(a1 + 28) = v11;
    if (*(_BYTE *)(a1 + 24))
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(int **)(v12 + 16);
      if (*v13 <= 0)
      {
        *v13 = 66056;
        v14 = *(_QWORD *)(v12 + 24);
        if (v14)
        {
          *(_DWORD *)v14 = v11;
          *(_DWORD *)(v14 + 4) = 0;
          *(_WORD *)(v14 + 8) = 0;
          *(_WORD *)(v14 + 40) = 0;
        }
      }
      *(_BYTE *)(a1 + 24) = 0;
    }
    goto LABEL_27;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18BBEDD50(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t result;
  int v6;
  BOOL v7;
  BOOL v8;
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;

  v4 = (int *)(a1 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 20);
  result = sub_18BBEDC04(a1);
  *a2 = result;
  *((_BYTE *)a2 + 4) = 0;
  if ((_DWORD)result == 39)
  {
    result = (uint64_t)icu::UnicodeString::char32At(*(uint64_t **)(a1 + 8), *(icu::UnicodeString **)(*(_QWORD *)(a1 + 8) + 32), *(_DWORD *)(a1 + 20));
    if ((_DWORD)result != 39)
    {
      v7 = *(_BYTE *)(a1 + 24) == 0;
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) == 0;
      if (v7)
        v14 = 40;
      else
        v14 = 41;
      *a2 = v14;
      *((_BYTE *)a2 + 4) = 0;
      return result;
    }
    result = sub_18BBEDC04(a1);
    *a2 = result;
    *((_BYTE *)a2 + 4) = 1;
  }
  if (*(_BYTE *)(a1 + 24))
  {
    *((_BYTE *)a2 + 4) = 1;
  }
  else
  {
    if ((_DWORD)result == 35)
    {
      v6 = *(_DWORD *)(a1 + 16);
      do
      {
        result = sub_18BBEDC04(a1);
        *a2 = result;
        v7 = (result + 1) > 0xE || ((1 << (result + 1)) & 0x4801) == 0;
        v8 = !v7 || (_DWORD)result == 8232;
      }
      while (!v8 && (_DWORD)result != 133);
      if (v6 < *v4 - 1)
      {
        do
          icu::UnicodeString::setCharAt((icu::UnicodeString *)(*(_QWORD *)(a1 + 8) + 40), v6++, 32);
        while (v6 < *(_DWORD *)(a1 + 20) - 1);
        result = *a2;
      }
    }
    if ((_DWORD)result == 92)
    {
      *((_BYTE *)a2 + 4) = 1;
      v9 = *(_DWORD *)(a1 + 20);
      result = icu::UnicodeString::unescapeAt(*(icu::UnicodeString **)(*(_QWORD *)(a1 + 8) + 32), v4);
      *a2 = result;
      v10 = *(_DWORD *)(a1 + 20) - v9;
      if (!v10)
      {
        v11 = *(_QWORD *)(a1 + 8);
        v12 = *(int **)(v11 + 16);
        if (*v12 <= 0)
        {
          *v12 = 66049;
          v13 = *(_QWORD *)(v11 + 24);
          if (v13)
          {
            *(_QWORD *)v13 = *(_QWORD *)(a1 + 28);
            *(_WORD *)(v13 + 8) = 0;
            *(_WORD *)(v13 + 40) = 0;
          }
        }
      }
      *(_DWORD *)(a1 + 32) += v10;
    }
  }
  return result;
}

double sub_18BBEDF08(uint64_t a1)
{
  int *v2;
  double result;
  int v4;
  _BYTE *v5;
  unsigned int v6;
  __int16 v7;
  int v8;
  int v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v20;

  if (**(int **)(*(_QWORD *)(a1 + 8) + 16) <= 0)
  {
    v2 = (int *)(a1 + 40);
    sub_18BBEDD50(a1, (int *)(a1 + 40));
    if (**(int **)(*(_QWORD *)(a1 + 8) + 16) <= 0)
    {
      LOWORD(v4) = 1;
      while (1)
      {
        v5 = (char *)&unk_18BDE0338 + 8 * (unsigned __int16)v4 + 7;
        while (2)
        {
          v6 = *(v5 - 3);
          if (v6 > 0x7E || *(_BYTE *)(a1 + 44) || *v2 != v6)
          {
            switch(*(v5 - 3))
            {
              case 0xFC:
                if (*v2 != -1)
                  goto LABEL_20;
                break;
              case 0xFD:
                if (!*(_BYTE *)(a1 + 44) || (*v2 | 0x20) != 0x70)
                  goto LABEL_20;
                break;
              case 0xFE:
                if (!*(_BYTE *)(a1 + 44))
                  goto LABEL_20;
                break;
              case 0xFF:
                break;
              default:
                if ((char)v6 > -17
                  || *(_BYTE *)(a1 + 44)
                  || *v2 == -1
                  || !icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 200 * (v6 - 128) + 1152), *v2))
                {
LABEL_20:
                  v5 += 8;
                  continue;
                }
                break;
            }
          }
          break;
        }
        if (!sub_18BBEC974(a1, *(unsigned int *)(v5 - 7)))
          break;
        v7 = *(v5 - 1);
        if (*(v5 - 1))
        {
          v8 = *(_DWORD *)(a1 + 320);
          v9 = v8 + 1;
          *(_DWORD *)(a1 + 320) = v8 + 1;
          if (v8 >= 99)
          {
            v10 = *(_QWORD *)(a1 + 8);
            v11 = *(int **)(v10 + 16);
            if (*v11 <= 0)
            {
              *v11 = 66048;
              v12 = *(_QWORD *)(v10 + 24);
              if (v12)
              {
                result = *(double *)(a1 + 28);
                *(double *)v12 = result;
                *(_WORD *)(v12 + 8) = 0;
                *(_WORD *)(v12 + 40) = 0;
              }
            }
            *(_DWORD *)(a1 + 320) = v8;
            v9 = v8;
          }
          *(_WORD *)(a1 + 2 * v9 + 120) = v7;
        }
        if (*v5)
          sub_18BBEDD50(a1, v2);
        v4 = *(v5 - 2);
        if (v4 == 255)
        {
          v14 = *(int *)(a1 + 320);
          v4 = *(unsigned __int16 *)(a1 + 2 * v14 + 120);
          *(_DWORD *)(a1 + 320) = v14 - 1;
          v13 = *(_QWORD **)(a1 + 8);
          if ((int)v14 <= 0)
          {
            v15 = (int *)v13[2];
            if (*v15 <= 0)
            {
              *v15 = 66048;
              v16 = v13[3];
              if (v16)
              {
                result = *(double *)(a1 + 28);
                *(double *)v16 = result;
                *(_WORD *)(v16 + 8) = 0;
                *(_WORD *)(v16 + 40) = 0;
              }
            }
            *(_DWORD *)(a1 + 320) = v14;
          }
        }
        else
        {
          v13 = *(_QWORD **)(a1 + 8);
        }
        v17 = (int *)v13[2];
        v18 = *v17;
        if (*v17 > 0 || v4 == 0)
          goto LABEL_45;
      }
      v13 = *(_QWORD **)(a1 + 8);
      v17 = (int *)v13[2];
      v18 = *v17;
LABEL_45:
      if (v18 <= 0 && !v13[14])
      {
        *v17 = 66051;
        v20 = v13[3];
        if (v20)
        {
          result = *(double *)(a1 + 28);
          *(double *)v20 = result;
          *(_WORD *)(v20 + 8) = 0;
          *(_WORD *)(v20 + 40) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_18BBEE180(uint64_t a1)
{
  return *(unsigned int *)(a1 + 3152);
}

uint64_t sub_18BBEE188(uint64_t a1, uint64_t a2)
{
  icu::UnicodeSet *v4;
  uint64_t i;
  void *v6;
  icu::UnicodeSet *v7;
  icu::UnicodeSet *v8;
  icu::UnicodeSet *v9;
  icu::UnicodeSet *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v20;
  int32x2_t *v21;
  _BYTE v22[200];
  _BYTE v23[64];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E224B360;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 48) = off_1E2256B38;
  *(_WORD *)(a1 + 56) = 2;
  v4 = (icu::UnicodeSet *)(a1 + 1152);
  for (i = 1152; i != 3152; i += 200)
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + i));
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 3152) = 0;
  *(_DWORD *)(a1 + 1128) = 0;
  *(_DWORD *)(a1 + 1131) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  if (**(int **)(a2 + 16) <= 0)
  {
    icu::UnicodeString::UnicodeString((uint64_t)v23, (uint64_t)L"[^[\\p{Z}\\u0020-\\u007f]-[\\p{L}]-[\\p{N}]]");
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v22, (const icu::UnicodeString *)v23, *(UErrorCode **)(a2 + 16));
    icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 1752), (const icu::UnicodeSet *)v22);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v22);
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v23);
    v7 = icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 1952), 9u, 0xDu);
    v8 = icu::UnicodeSet::add(v7, 0x20u);
    v9 = icu::UnicodeSet::add(v8, 0x85u);
    v10 = icu::UnicodeSet::add(v9, 0x200Eu, 0x200Fu);
    icu::UnicodeSet::add(v10, 0x2028u, 0x2029u);
    icu::UnicodeString::UnicodeString((uint64_t)v23, (uint64_t)L"[_\\p{L}\\p{N}]");
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v22, (const icu::UnicodeString *)v23, *(UErrorCode **)(a2 + 16));
    icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 1352), (const icu::UnicodeSet *)v22);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v22);
    v12 = icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v23);
    icu::UnicodeString::UnicodeString((uint64_t)v12, (uint64_t)L"[_\\p{L}]");
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v22, (const icu::UnicodeString *)v23, *(UErrorCode **)(a2 + 16));
    icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 1552), (const icu::UnicodeSet *)v22);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v22);
    v14 = icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v23);
    icu::UnicodeString::UnicodeString((uint64_t)v14, (uint64_t)"[");
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v22, (const icu::UnicodeString *)v23, *(UErrorCode **)(a2 + 16));
    icu::UnicodeSet::operator=(v4, (const icu::UnicodeSet *)v22);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v22);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v23);
    v17 = *(uint64_t **)(a2 + 16);
    if (*(_DWORD *)v17 == 1)
    {
      v18 = 66058;
LABEL_6:
      *(_DWORD *)v17 = v18;
      return a1;
    }
    if (*(int *)v17 > 0)
      return a1;
    v20 = icu::UMemory::operator new(v17, (icu::UMemory *)0x70, v16);
    if (!v20)
    {
      *(_QWORD *)(a1 + 1136) = 0;
      v17 = *(uint64_t **)(a2 + 16);
      v18 = 7;
      goto LABEL_6;
    }
    *(_QWORD *)(a1 + 1136) = sub_18BBF1328(v20, a1, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 16));
    v21 = uhash_open((uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, *(int **)(a2 + 16));
    *(_QWORD *)(a1 + 1144) = v21;
    if (**(int **)(a2 + 16) <= 0)
      uhash_setValueDeleter((uint64_t)v21, (uint64_t)sub_18BBEE444);
  }
  return a1;
}

void sub_18BBEE444(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  uprv_free(a1);
}

uint64_t sub_18BBEE47C(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  int v4;
  uint64_t v5;
  void *v6;
  BOOL v7;
  uint64_t i;
  void *v9;

  *(_QWORD *)a1 = off_1E224B360;
  v2 = *(_QWORD *)(a1 + 1136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(void ***)(a1 + 1144);
  if (v3)
  {
    uhash_close(v3);
    *(_QWORD *)(a1 + 1144) = 0;
  }
  v4 = *(_DWORD *)(a1 + 1128);
  if (v4 >= 1)
  {
    do
    {
      v5 = *(_QWORD *)(a1 + 8 * v4 + 328);
      if (v5)
      {
        v6 = (void *)sub_18BBEB4E4(v5);
        icu::UMemory::operator delete(v6);
        v4 = *(_DWORD *)(a1 + 1128);
      }
      v7 = __OFSUB__(v4--, 1);
      *(_DWORD *)(a1 + 1128) = v4;
    }
    while (!((v4 < 0) ^ v7 | (v4 == 0)));
  }
  for (i = 2952; i != 952; i -= 200)
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + i));
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)(a1 + 48));
  return a1;
}

void sub_18BBEE520(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_18BBEE47C(a1);
  icu::UMemory::operator delete(v1);
}

BOOL sub_18BBEE534(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  int *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  int v54;
  uint64_t v55;
  _BYTE *v56;
  _BOOL4 v57;
  void *v58;
  _BOOL4 v59;
  void *v60;
  _BOOL4 v61;
  void *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL4 v66;
  void *v67;
  _BOOL4 v68;
  void *v69;
  _BOOL4 v70;
  void *v71;
  _BOOL4 v72;
  void *v73;
  int *v74;
  const __int16 *v75;
  const char *v76;
  const __int16 *v77;
  const __int16 *v78;
  const __int16 *v79;
  const __int16 *v80;
  const __int16 *v81;
  const __int16 *v82;
  const char *v83;
  char v84[8];
  unsigned __int16 v85;
  unsigned int v86;
  _DWORD v87[18];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  result = 0;
  switch((int)a2)
  {
    case 0:
      if (*(_QWORD *)(*(_QWORD *)(a1 + 8 * *(int *)(a1 + 1128) + 328) + 16))
        return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(int **)(v4 + 16);
      if (*v5 > 0)
        return 0;
      v6 = 9;
      goto LABEL_62;
    case 1:
      v8 = sub_18BBEF09C(a1, 0);
      if (**(int **)(*(_QWORD *)(a1 + 8) + 16) > 0)
        return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
      v9 = v8;
      v83 = "a";
      icu::UnicodeString::UnicodeString(v87, 1, &v83);
      sub_18BBEF154(a1, (uint64_t)v87, v9, 0);
      icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v87);
      goto LABEL_45;
    case 2:
      v11 = sub_18BBED5C4(a1, 1);
      v12 = *(int *)(a1 + 1128);
      v13 = *(_QWORD *)(a1 + 328 + 8 * ((int)v12 - 2));
      v14 = *(_QWORD *)(a1 + 328 + 8 * ((int)v12 - 1));
      v15 = *(_QWORD *)(a1 + 328 + 8 * v12);
      *(_DWORD *)(v15 + 112) = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v15 + 116) = *(_DWORD *)(a1 + 16);
      (*(void (**)(_QWORD, double))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), v11);
      *(_QWORD *)(v14 + 16) = v15;
      *(_QWORD *)(v15 + 8) = v14;
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 1136) + 48))(*(_QWORD *)(a1 + 1136), v14 + 48, v14, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
      v16 = *(_QWORD *)(a1 + 8);
      if (**(int **)(v16 + 16) >= 1)
      {
        v17 = *(_QWORD *)(v16 + 24);
        if (v17)
        {
          *(_QWORD *)v17 = *(_QWORD *)(a1 + 28);
          *(_WORD *)(v17 + 8) = 0;
          *(_WORD *)(v17 + 40) = 0;
        }
      }
      v18 = (void *)sub_18BBEB4E4(v13);
      icu::UMemory::operator delete(v18);
      *(_DWORD *)(a1 + 1128) -= 3;
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 3:
      sub_18BBED5C4(a1, 1);
      v19 = *(_QWORD *)(a1 + 8);
      if (**(int **)(v19 + 16) > 0)
        return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
      v20 = *(_QWORD *)(a1 + 8 * *(int *)(a1 + 1128) + 328);
      if (!*(_BYTE *)(a1 + 1133))
        goto LABEL_17;
      v21 = sub_18BBEF09C(a1, 6uLL);
      v22 = sub_18BBEF09C(a1, 8uLL);
      if (**(int **)(*(_QWORD *)(a1 + 8) + 16) > 0)
        return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
      v23 = *(int *)(a1 + 1128) - 2;
      *(_DWORD *)(a1 + 1128) = v23;
      *(_QWORD *)(v22 + 16) = v20;
      *(_QWORD *)(v22 + 24) = v21;
      *(_QWORD *)(a1 + 8 * v23 + 328) = v22;
      *(_DWORD *)(v21 + 124) = *(_DWORD *)(a1 + 3152);
      *(_BYTE *)(v21 + 128) = 1;
      v19 = *(_QWORD *)(a1 + 8);
      v20 = v22;
LABEL_17:
      *(_BYTE *)(v20 + 129) = 1;
      if (*(_BYTE *)(v19 + 88) && !*(_BYTE *)(a1 + 1134))
        *(_BYTE *)(v20 + 130) = 1;
      if (*(_BYTE *)(a1 + 1132))
        v24 = (uint64_t *)(v19 + 56);
      else
        v24 = *(uint64_t **)(v19 + 80);
      v64 = *v24;
      if (!*v24)
        goto LABEL_93;
      v65 = sub_18BBEF09C(a1, 9uLL);
      if (**(int **)(*(_QWORD *)(a1 + 8) + 16) <= 0)
      {
        *(_QWORD *)(v65 + 16) = v64;
        *(_QWORD *)(v64 + 8) = v65;
        *(_QWORD *)(v65 + 24) = v20;
        *(_QWORD *)(v20 + 8) = v65;
        v20 = v65;
LABEL_93:
        *v24 = v20;
        *(_DWORD *)(a1 + 1131) = 0;
        *(_DWORD *)(a1 + 1128) = 0;
      }
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 4:
      v25 = *(_QWORD *)(a1 + 8 * *(int *)(a1 + 1128) + 328);
      if (v25 && *(_DWORD *)v25 == 2)
      {
        *(_DWORD *)(v25 + 116) = *(_DWORD *)(a1 + 16);
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), (*(_DWORD *)(v25 + 112) + 1));
        *(_QWORD *)(v25 + 16) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1136) + 40))(*(_QWORD *)(a1 + 1136), v25 + 48);
      }
      else
      {
        v52 = *(_QWORD *)(a1 + 8);
        v53 = *(int **)(v52 + 16);
        if (*v53 <= 0)
        {
          v54 = 66048;
LABEL_77:
          *v53 = v54;
          v55 = *(_QWORD *)(v52 + 24);
          if (v55)
          {
            *(_QWORD *)v55 = *(_QWORD *)(a1 + 28);
            *(_WORD *)(v55 + 8) = 0;
            *(_WORD *)(v55 + 40) = 0;
          }
        }
      }
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 5:
      return result;
    case 6:
      sub_18BBED5C4(a1, 4);
      v26 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v26 - 1;
      v27 = *(_QWORD *)(a1 + 8 * v26 + 328);
      v28 = a1;
      v29 = 8;
      goto LABEL_71;
    case 7:
    case 12:
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 8:
      sub_18BBED5C4(a1, 4);
      v30 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v30 - 1;
      v27 = *(_QWORD *)(a1 + 8 * v30 + 328);
      v28 = a1;
      v29 = 9;
      goto LABEL_71;
    case 9:
      sub_18BBED5C4(a1, 2);
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 10:
      sub_18BBEF09C(a1, 7uLL);
      ++*(_DWORD *)(a1 + 3152);
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 11:
      v31 = a1;
      v32 = 15;
      goto LABEL_54;
    case 13:
      *(_BYTE *)(a1 + 1134) = 1;
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 14:
      memset(v87, 0, 64);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v87, *(const icu::UnicodeString **)(*(_QWORD *)(a1 + 8) + 32), *(_DWORD *)(a1 + 3156), (*(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 3156)));
      v82 = L"chain";
      icu::UnicodeString::UnicodeString(v84, 1, &v82);
      if ((v87[2] & 1) != 0)
      {
        v35 = v85;
        v36 = v85 & 1;
      }
      else
      {
        if (SLOWORD(v87[2]) >= 0)
          v33 = LOWORD(v87[2]) >> 5;
        else
          v33 = v87[3];
        if ((v85 & 0x8000u) == 0)
          v34 = v85 >> 5;
        else
          v34 = v86;
        if ((v85 & 1) != 0 || v33 != (_DWORD)v34)
        {
          icu::UnicodeString::~UnicodeString((void *)v34, (icu::UnicodeString *)v84);
          goto LABEL_83;
        }
        v36 = icu::UnicodeString::doEquals((icu::UnicodeString *)v87, (const icu::UnicodeString *)v84, v33);
      }
      icu::UnicodeString::~UnicodeString((void *)v35, (icu::UnicodeString *)v84);
      if (v36)
      {
        v56 = *(_BYTE **)(a1 + 8);
        v56[88] = 1;
        goto LABEL_101;
      }
LABEL_83:
      v81 = L"LBCMNoChain";
      icu::UnicodeString::UnicodeString(v84, 1, &v81);
      v57 = sub_18BBED900((uint64_t)v87, (uint64_t)v84);
      icu::UnicodeString::~UnicodeString(v58, (icu::UnicodeString *)v84);
      if (v57)
      {
        v56 = *(_BYTE **)(a1 + 8);
        v56[89] = 1;
        goto LABEL_101;
      }
      v80 = L"RINoChain";
      icu::UnicodeString::UnicodeString(v84, 1, &v80);
      v59 = sub_18BBED900((uint64_t)v87, (uint64_t)v84);
      icu::UnicodeString::~UnicodeString(v60, (icu::UnicodeString *)v84);
      if (v59)
      {
        v56 = *(_BYTE **)(a1 + 8);
        v56[91] = 1;
        goto LABEL_101;
      }
      v79 = L"forward";
      icu::UnicodeString::UnicodeString(v84, 1, &v79);
      v61 = sub_18BBED900((uint64_t)v87, (uint64_t)v84);
      icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)v84);
      if (v61)
      {
        v56 = *(_BYTE **)(a1 + 8);
        v63 = v56 + 48;
LABEL_100:
        *((_QWORD *)v56 + 10) = v63;
        goto LABEL_101;
      }
      v78 = L"reverse";
      icu::UnicodeString::UnicodeString(v84, 1, &v78);
      v66 = sub_18BBED900((uint64_t)v87, (uint64_t)v84);
      icu::UnicodeString::~UnicodeString(v67, (icu::UnicodeString *)v84);
      if (v66)
      {
        v56 = *(_BYTE **)(a1 + 8);
        v63 = v56 + 56;
        goto LABEL_100;
      }
      v77 = L"safe_forward";
      icu::UnicodeString::UnicodeString(v84, 1, &v77);
      v68 = sub_18BBED900((uint64_t)v87, (uint64_t)v84);
      icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)v84);
      if (v68)
      {
        v56 = *(_BYTE **)(a1 + 8);
        v63 = v56 + 64;
        goto LABEL_100;
      }
      v76 = "s";
      icu::UnicodeString::UnicodeString(v84, 1, &v76);
      v70 = sub_18BBED900((uint64_t)v87, (uint64_t)v84);
      icu::UnicodeString::~UnicodeString(v71, (icu::UnicodeString *)v84);
      if (v70)
      {
        v56 = *(_BYTE **)(a1 + 8);
        v63 = v56 + 72;
        goto LABEL_100;
      }
      v75 = L"lookAheadHardBreak";
      icu::UnicodeString::UnicodeString(v84, 1, &v75);
      v72 = sub_18BBED900((uint64_t)v87, (uint64_t)v84);
      icu::UnicodeString::~UnicodeString(v73, (icu::UnicodeString *)v84);
      v56 = *(_BYTE **)(a1 + 8);
      if (v72)
      {
        v56[90] = 1;
      }
      else
      {
        v74 = (int *)*((_QWORD *)v56 + 2);
        if (*v74 <= 0)
        {
          *v74 = 66060;
          v56 = (_BYTE *)*((_QWORD *)v56 + 3);
          if (v56)
          {
            *(_QWORD *)v56 = *(_QWORD *)(a1 + 28);
            *((_WORD *)v56 + 4) = 0;
            *((_WORD *)v56 + 20) = 0;
          }
        }
      }
LABEL_101:
      icu::UnicodeString::~UnicodeString(v56, (icu::UnicodeString *)v87);
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 15:
      *(_DWORD *)(a1 + 3156) = *(_DWORD *)(a1 + 16);
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 16:
      *(_BYTE *)(a1 + 1132) = 1;
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 17:
      v37 = sub_18BBEF09C(a1, 0);
      if (**(int **)(*(_QWORD *)(a1 + 8) + 16) > 0)
        return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
      v9 = v37;
      icu::UnicodeString::UnicodeString((uint64_t)v87, *(_DWORD *)(a1 + 40));
      sub_18BBEF154(a1, (uint64_t)v87, v9, 0);
      icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)v87);
LABEL_45:
      v39 = *(unsigned int *)(a1 + 16);
      *(_DWORD *)(v9 + 112) = v39;
      *(_DWORD *)(v9 + 116) = *(_DWORD *)(a1 + 20);
      v40 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
      goto LABEL_67;
    case 18:
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(int **)(v4 + 16);
      if (*v5 > 0)
        return 0;
      v7 = 66051;
      goto LABEL_63;
    case 19:
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(int **)(v4 + 16);
      if (*v5 > 0)
        return 0;
      v6 = 5;
      goto LABEL_62;
    case 20:
      sub_18BBEF354(a1, a2);
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 21:
      v41 = (_DWORD *)sub_18BBEF09C(a1, 4uLL);
      v42 = *(_QWORD *)(a1 + 8);
      if (**(int **)(v42 + 16) <= 0)
      {
        v41[31] = *(_DWORD *)(a1 + 3152);
        v41[28] = *(_DWORD *)(a1 + 16);
        v41[29] = *(_DWORD *)(a1 + 20);
        (*(void (**)(_QWORD))(**(_QWORD **)(v42 + 32) + 24))(*(_QWORD *)(v42 + 32));
        *(_BYTE *)(a1 + 1133) = 1;
      }
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 22:
      *(_DWORD *)(*(_QWORD *)(a1 + 8 * *(int *)(a1 + 1128) + 320) + 112) = *(_DWORD *)(a1 + 20);
      v31 = a1;
      v32 = 7;
LABEL_54:
      sub_18BBEF09C(v31, v32);
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 23:
      v43 = sub_18BBEF09C(a1, 5uLL);
      if (**(int **)(*(_QWORD *)(a1 + 8) + 16) <= 0)
      {
        *(_DWORD *)(v43 + 124) = 0;
        *(_QWORD *)(v43 + 112) = *(_QWORD *)(a1 + 16);
      }
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 24:
      v44 = sub_18BBEF09C(a1, 2uLL);
      if (**(int **)(*(_QWORD *)(a1 + 8) + 16) <= 0)
        *(_DWORD *)(v44 + 112) = *(_DWORD *)(a1 + 16);
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 25:
      v45 = *(_QWORD *)(a1 + 8 * *(int *)(a1 + 1128) + 328);
      *(_DWORD *)(v45 + 124) = u_charDigitValue(*(_DWORD *)(a1 + 40)) + 10 * *(_DWORD *)(v45 + 124);
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 26:
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(int **)(v4 + 16);
      if (*v5 > 0)
        return 0;
      v6 = 13;
LABEL_62:
      v7 = v6 | 0x10200;
      goto LABEL_63;
    case 27:
      v47 = *(_QWORD *)(a1 + 8 * *(int *)(a1 + 1128) + 328);
      *(_DWORD *)(v47 + 116) = *(_DWORD *)(a1 + 20);
      v40 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
      v39 = *(unsigned int *)(v47 + 112);
LABEL_67:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 24))(v40, v39);
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 28:
      v48 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v48 - 1;
      v27 = *(_QWORD *)(a1 + 8 * v48 + 328);
      v28 = a1;
      v29 = 11;
      goto LABEL_71;
    case 29:
      v49 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v49 - 1;
      v27 = *(_QWORD *)(a1 + 8 * v49 + 328);
      v28 = a1;
      v29 = 12;
      goto LABEL_71;
    case 30:
      v50 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v50 - 1;
      v27 = *(_QWORD *)(a1 + 8 * v50 + 328);
      v28 = a1;
      v29 = 10;
LABEL_71:
      v51 = sub_18BBEF09C(v28, v29);
      if (**(int **)(*(_QWORD *)(a1 + 8) + 16) <= 0)
      {
        *(_QWORD *)(v51 + 16) = v27;
        *(_QWORD *)(v27 + 8) = v51;
      }
      return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
    case 31:
      v52 = *(_QWORD *)(a1 + 8);
      v53 = *(int **)(v52 + 16);
      if (*v53 > 0)
        return **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16) < 1;
      v54 = 66051;
      goto LABEL_77;
    default:
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(int **)(v4 + 16);
      if (*v5 > 0)
        return 0;
      v7 = 66048;
LABEL_63:
      *v5 = v7;
      v46 = *(_QWORD *)(v4 + 24);
      if (!v46)
        return 0;
      result = 0;
      *(_QWORD *)v46 = *(_QWORD *)(a1 + 28);
      *(_WORD *)(v46 + 8) = 0;
      *(_WORD *)(v46 + 40) = 0;
      return result;
  }
}

uint64_t sub_18BBEF09C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  int *v3;
  uint64_t result;
  int v6;
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(int **)(v2 + 16);
  if (*v3 > 0)
    return 0;
  v6 = *(_DWORD *)(a1 + 1128);
  *(_DWORD *)(a1 + 1128) = v6 + 1;
  if (v6 < 99)
  {
    result = icu::UMemory::operator new((icu::UMemory *)0xA0, a2);
    if (result)
    {
      result = sub_18BBEB354(result, a2);
      *(_QWORD *)(a1 + 8 * *(int *)(a1 + 1128) + 328) = result;
      return result;
    }
    *(_QWORD *)(a1 + 8 * *(int *)(a1 + 1128) + 328) = 0;
    v3 = *(int **)(*(_QWORD *)(a1 + 8) + 16);
    v8 = 7;
  }
  else
  {
    v7 = *(_QWORD *)(v2 + 24);
    if (v7)
    {
      *(_QWORD *)v7 = *(_QWORD *)(a1 + 28);
      *(_WORD *)(v7 + 8) = 0;
      *(_WORD *)(v7 + 40) = 0;
    }
    result = 0;
    v8 = 66048;
  }
  *v3 = v8;
  return result;
}

double sub_18BBEF154(uint64_t a1, uint64_t a2, uint64_t a3, icu::UnicodeSet *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  double result;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  int v15;
  int32_t v16;
  int32_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t *v30;
  icu::UnicodeString *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  const char *v37;

  v8 = uhash_get(*(_QWORD *)(a1 + 1144), a2);
  if (v8)
  {
    v12 = v8;
    if (a4)
    {
      icu::UnicodeSet::~UnicodeSet(a4);
      icu::UMemory::operator delete(v13);
    }
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(v12 + 8);
    return result;
  }
  if (!a4)
  {
    v14 = *(unsigned __int16 *)(a2 + 8);
    v15 = (__int16)v14;
    v16 = v14 >> 5;
    if (v15 >= 0)
      v17 = v16;
    else
      v17 = *(_DWORD *)(a2 + 12);
    v37 = "a";
    if (icu::UnicodeString::doCompare(a2, 0, v17, (uint64_t)"a", 0, -1))
    {
      v19 = icu::UnicodeString::char32At((uint64_t *)&v37, (icu::UnicodeString *)a2, 0);
      v22 = icu::UMemory::operator new(v21, (icu::UMemory *)0xC8, v20);
      a4 = (icu::UnicodeSet *)v22;
      if (v22)
      {
        v23 = v19;
        v24 = v19;
LABEL_14:
        icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v22, v23, v24);
      }
    }
    else
    {
      v22 = icu::UMemory::operator new((uint64_t *)&v37, (icu::UMemory *)0xC8, v18);
      a4 = (icu::UnicodeSet *)v22;
      if (v22)
      {
        v23 = 0;
        v24 = 1114111;
        goto LABEL_14;
      }
    }
  }
  v25 = icu::UMemory::operator new(v10, (icu::UMemory *)0xA0, v9);
  if (v25)
  {
    v26 = v25;
    v27 = sub_18BBEB354(v25, 1);
    *(_QWORD *)(v27 + 32) = a4;
    *(_QWORD *)(v27 + 8) = a3;
    *(_QWORD *)(a3 + 16) = v26;
    icu::UnicodeString::operator=((UChar **)(v27 + 48), (UChar **)a2);
    icu::UVector::addElement(*(icu::UVector **)(*(_QWORD *)(a1 + 8) + 104), v26, *(UErrorCode **)(*(_QWORD *)(a1 + 8) + 16));
    v28 = uprv_malloc(0x10uLL);
    v31 = (icu::UnicodeString *)icu::UMemory::operator new(v30, (icu::UMemory *)0x40, v29);
    if (v31)
    {
      v32 = (uint64_t)v31;
      icu::UnicodeString::UnicodeString(v31, (UChar **)a2);
      if (a4 && v28)
      {
        *v28 = v32;
        v28[1] = v26;
        uhash_put(*(_QWORD *)(a1 + 1144), v32, (uint64_t)v28, *(int **)(*(_QWORD *)(a1 + 8) + 16));
        return result;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    }
    uprv_free(v28);
    if (a4)
    {
      icu::UnicodeSet::~UnicodeSet(a4);
      icu::UMemory::operator delete(v33);
    }
  }
  v34 = *(_QWORD *)(a1 + 8);
  v35 = *(int **)(v34 + 16);
  if (*v35 <= 0)
  {
    *v35 = 7;
    v36 = *(_QWORD *)(v34 + 24);
    if (v36)
    {
      result = *(double *)(a1 + 28);
      *(double *)v36 = result;
      *(_WORD *)(v36 + 8) = 0;
      *(_WORD *)(v36 + 40) = 0;
    }
  }
  return result;
}

void sub_18BBEF354(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  icu::UnicodeSet *v5;
  icu::UnicodeSet *v6;
  icu::UnicodeSet *v7;
  UErrorCode v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  UErrorCode *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  UErrorCode v20;
  void (**v21)(icu::ParsePosition *__hidden);
  unint64_t v22;

  v21 = off_1E224A8B0;
  v22 = 0xFFFFFFFF00000000;
  v2 = (uint64_t *)**(unsigned int **)(*(_QWORD *)(a1 + 8) + 16);
  if ((int)v2 > 0)
    goto LABEL_14;
  v4 = *(unsigned int *)(a1 + 16);
  LODWORD(v22) = *(_DWORD *)(a1 + 16);
  v20 = U_ZERO_ERROR;
  v5 = (icu::UnicodeSet *)icu::UMemory::operator new(v2, (icu::UMemory *)0xC8, a2);
  v6 = v5;
  if (!v5)
  {
    v8 = U_MEMORY_ALLOCATION_ERROR;
    v20 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_9;
  }
  icu::UnicodeSet::UnicodeSet(v5);
  icu::UnicodeSet::applyPatternIgnoreSpace(v7, *(const icu::UnicodeString **)(*(_QWORD *)(a1 + 8) + 32), (icu::ParsePosition *)&v21, *(const icu::SymbolTable **)(a1 + 1136), &v20);
  v8 = v20;
  if (v20 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_9:
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(UErrorCode **)(v12 + 16);
    if (*(int *)v13 <= 0)
    {
      *v13 = v8;
      v14 = *(_QWORD *)(v12 + 24);
      if (v14)
      {
        *(_QWORD *)v14 = *(_QWORD *)(a1 + 28);
        *(_WORD *)(v14 + 8) = 0;
        *(_WORD *)(v14 + 40) = 0;
      }
    }
    if (v6)
      goto LABEL_13;
    goto LABEL_14;
  }
  if (icu::UnicodeSet::isEmpty(v6))
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(int **)(v9 + 16);
    if (*v10 <= 0)
    {
      *v10 = 66059;
      v11 = *(_QWORD *)(v9 + 24);
      if (v11)
      {
        *(_QWORD *)v11 = *(_QWORD *)(a1 + 28);
        *(_WORD *)(v11 + 8) = 0;
        *(_WORD *)(v11 + 40) = 0;
      }
    }
LABEL_13:
    icu::UnicodeSet::~UnicodeSet(v6);
    icu::UMemory::operator delete(v15);
    goto LABEL_14;
  }
  v16 = v22;
  while (*(_DWORD *)(a1 + 20) < v16)
    sub_18BBEF684(a1);
  if (**(int **)(*(_QWORD *)(a1 + 8) + 16) <= 0)
  {
    v17 = sub_18BBEF09C(a1, 0);
    v18 = *(_QWORD *)(a1 + 8);
    if (**(int **)(v18 + 16) <= 0)
    {
      v19 = v17;
      *(_DWORD *)(v17 + 112) = v4;
      *(_DWORD *)(v17 + 116) = *(_DWORD *)(a1 + 20);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v18 + 32) + 24))(*(_QWORD *)(v18 + 32), v4);
      sub_18BBEF154(a1, v19 + 48, v19, v6);
    }
  }
LABEL_14:
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v21);
}

uint64_t sub_18BBEF528@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  UChar32 v14;
  uint64_t v15;
  __int16 v16;

  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = off_1E2256B38;
  *(_WORD *)(a2 + 8) = 2;
  v3 = *(unsigned __int16 *)(result + 8);
  v4 = (__int16)v3;
  v5 = v3 >> 5;
  if (v4 >= 0)
    v6 = v5;
  else
    v6 = *(unsigned int *)(result + 12);
  if ((int)v6 >= 1)
  {
    v7 = result;
    v8 = 0;
    v9 = result + 10;
    do
    {
      v10 = v8 + 1;
      v11 = *(unsigned __int16 *)(v7 + 8);
      if ((v11 & 0x8000u) == 0)
        v12 = v11 >> 5;
      else
        v12 = *(_DWORD *)(v7 + 12);
      if (v12 <= v8)
      {
        v14 = 0xFFFF;
      }
      else
      {
        if ((v11 & 2) != 0)
          v13 = v9;
        else
          v13 = *(_QWORD *)(v7 + 24);
        v14 = *(unsigned __int16 *)(v13 + 2 * v8);
        if (v14 == 35)
        {
          if (v10 < (int)v6)
          {
            v15 = v10;
            v14 = 35;
            ++v8;
            do
            {
              if (v14 == 10 || v14 == 13 || v14 == 133)
                break;
              v14 = v12 <= v8++ ? 0xFFFF : *(unsigned __int16 *)(v13 + 2 * v15++);
            }
            while (v15 < v6);
            goto LABEL_26;
          }
          v14 = 35;
        }
      }
      ++v8;
LABEL_26:
      result = u_isISOControl(v14);
      if (!(_DWORD)result)
      {
        v16 = v14;
        result = icu::UnicodeString::doAppend(a2, (uint64_t)&v16, 0, 1);
      }
    }
    while (v8 < (int)v6);
  }
  return result;
}

uint64_t sub_18BBEF684(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1 + 20);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  if (*(__int16 *)(v3 + 8) < 0)
    v4 = (uint64_t *)*(unsigned int *)(v3 + 12);
  else
    v4 = (uint64_t *)(*(unsigned __int16 *)(v3 + 8) >> 5);
  if (v2 < (int)v4)
  {
    v5 = icu::UnicodeString::char32At(v4, (icu::UnicodeString *)v3, v2);
    *(_DWORD *)(a1 + 20) = icu::UnicodeString::moveIndex32(*(icu::UnicodeString **)(*(_QWORD *)(a1 + 8) + 32), *(_DWORD *)(a1 + 20), 1);
    if ((int)v5 > 132)
    {
      if ((_DWORD)v5 != 133 && (_DWORD)v5 != 8232)
        goto LABEL_22;
    }
    else if ((_DWORD)v5 == 10)
    {
      if (*(_DWORD *)(a1 + 36) == 13)
        goto LABEL_23;
    }
    else if ((_DWORD)v5 != 13)
    {
LABEL_22:
      ++*(_DWORD *)(a1 + 32);
LABEL_23:
      *(_DWORD *)(a1 + 36) = (_DWORD)v5;
      return (uint64_t)v5;
    }
    v7 = *(_DWORD *)(a1 + 28) + 1;
    *(_QWORD *)(a1 + 28) = v7;
    if (*(_BYTE *)(a1 + 24))
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(int **)(v8 + 16);
      if (*v9 <= 0)
      {
        *v9 = 66056;
        v10 = *(_QWORD *)(v8 + 24);
        if (v10)
        {
          *(_DWORD *)v10 = v7;
          *(_DWORD *)(v10 + 4) = 0;
          *(_WORD *)(v10 + 8) = 0;
          *(_WORD *)(v10 + 40) = 0;
        }
      }
      *(_BYTE *)(a1 + 24) = 0;
    }
    goto LABEL_23;
  }
  return 0xFFFFFFFFLL;
}

uint64_t *sub_18BBEF794(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t *result;
  BOOL v6;
  BOOL v7;
  int v8;
  int v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;

  v4 = (int *)(a1 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 20);
  result = (uint64_t *)sub_18BBEF684(a1);
  *(_DWORD *)a2 = (_DWORD)result;
  *(_BYTE *)(a2 + 4) = 0;
  if ((_DWORD)result == 39)
  {
    result = icu::UnicodeString::char32At(*(uint64_t **)(a1 + 8), *(icu::UnicodeString **)(*(_QWORD *)(a1 + 8) + 32), *(_DWORD *)(a1 + 20));
    if ((_DWORD)result != 39)
    {
      v6 = *(_BYTE *)(a1 + 24) == 0;
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) == 0;
      if (v6)
        v13 = 40;
      else
        v13 = 41;
      *(_DWORD *)a2 = v13;
      *(_BYTE *)(a2 + 4) = 0;
      return result;
    }
    result = (uint64_t *)sub_18BBEF684(a1);
    *(_DWORD *)a2 = (_DWORD)result;
    *(_BYTE *)(a2 + 4) = 1;
  }
  if (*(_BYTE *)(a1 + 24))
  {
    *(_BYTE *)(a2 + 4) = 1;
  }
  else
  {
    if ((_DWORD)result == 35)
    {
      do
      {
        result = (uint64_t *)sub_18BBEF684(a1);
        *(_DWORD *)a2 = (_DWORD)result;
        v6 = ((_DWORD)result + 1) > 0xE || ((1 << ((_BYTE)result + 1)) & 0x4801) == 0;
        v7 = !v6 || (_DWORD)result == 8232;
      }
      while (!v7 && (_DWORD)result != 133);
    }
    if ((_DWORD)result == 92)
    {
      *(_BYTE *)(a2 + 4) = 1;
      v8 = *(_DWORD *)(a1 + 20);
      result = (uint64_t *)icu::UnicodeString::unescapeAt(*(icu::UnicodeString **)(*(_QWORD *)(a1 + 8) + 32), v4);
      *(_DWORD *)a2 = (_DWORD)result;
      v9 = *(_DWORD *)(a1 + 20) - v8;
      if (!v9)
      {
        v10 = *(_QWORD *)(a1 + 8);
        v11 = *(int **)(v10 + 16);
        if (*v11 <= 0)
        {
          *v11 = 66049;
          v12 = *(_QWORD *)(v10 + 24);
          if (v12)
          {
            *(_QWORD *)v12 = *(_QWORD *)(a1 + 28);
            *(_WORD *)(v12 + 8) = 0;
            *(_WORD *)(v12 + 40) = 0;
          }
        }
      }
      *(_DWORD *)(a1 + 32) += v9;
    }
  }
  return result;
}

uint64_t sub_18BBEF904(uint64_t result)
{
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int v4;
  _BYTE *v5;
  unsigned int v6;
  __int16 v7;
  int v8;
  int v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  const char *v20;
  _BYTE v21[64];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (**(int **)(*(_QWORD *)(result + 8) + 16) <= 0)
  {
    v1 = result;
    v2 = (int *)(result + 40);
    result = (uint64_t)sub_18BBEF794(result, result + 40);
    v3 = *(_QWORD **)(v1 + 8);
    if (*(int *)v3[2] <= 0)
    {
      LOWORD(v4) = 1;
      while (1)
      {
        v5 = (char *)&unk_18BDE0734 + 8 * (unsigned __int16)v4 + 7;
        while (2)
        {
          v6 = *(v5 - 3);
          if (v6 > 0x7E || *(_BYTE *)(v1 + 44) || *v2 != v6)
          {
            switch(*(v5 - 3))
            {
              case 0xFC:
                if (*v2 != -1)
                  goto LABEL_20;
                break;
              case 0xFD:
                if (!*(_BYTE *)(v1 + 44) || (*v2 | 0x20) != 0x70)
                  goto LABEL_20;
                break;
              case 0xFE:
                if (!*(_BYTE *)(v1 + 44))
                  goto LABEL_20;
                break;
              case 0xFF:
                break;
              default:
                if ((char)v6 > -17
                  || *(_BYTE *)(v1 + 44)
                  || *v2 == -1
                  || !icu::UnicodeSet::contains((icu::UnicodeSet *)(v1 + 200 * (v6 - 128) + 1152), *v2))
                {
LABEL_20:
                  v5 += 8;
                  continue;
                }
                break;
            }
          }
          break;
        }
        result = sub_18BBEE534(v1, *(unsigned int *)(v5 - 7));
        if (!(_DWORD)result)
          break;
        v7 = *(v5 - 1);
        if (*(v5 - 1))
        {
          v8 = *(_DWORD *)(v1 + 320);
          v9 = v8 + 1;
          *(_DWORD *)(v1 + 320) = v8 + 1;
          if (v8 >= 99)
          {
            v10 = *(_QWORD *)(v1 + 8);
            v11 = *(int **)(v10 + 16);
            if (*v11 <= 0)
            {
              *v11 = 66048;
              v12 = *(_QWORD *)(v10 + 24);
              if (v12)
              {
                *(_QWORD *)v12 = *(_QWORD *)(v1 + 28);
                *(_WORD *)(v12 + 8) = 0;
                *(_WORD *)(v12 + 40) = 0;
              }
            }
            *(_DWORD *)(v1 + 320) = v8;
            v9 = v8;
          }
          *(_WORD *)(v1 + 2 * v9 + 120) = v7;
        }
        if (*v5)
          result = (uint64_t)sub_18BBEF794(v1, (uint64_t)v2);
        v4 = *(v5 - 2);
        if (v4 == 255)
        {
          v13 = *(int *)(v1 + 320);
          v4 = *(unsigned __int16 *)(v1 + 2 * v13 + 120);
          *(_DWORD *)(v1 + 320) = v13 - 1;
          v3 = *(_QWORD **)(v1 + 8);
          if ((int)v13 <= 0)
          {
            v14 = (int *)v3[2];
            if (*v14 <= 0)
            {
              *v14 = 66048;
              v15 = v3[3];
              if (v15)
              {
                *(_QWORD *)v15 = *(_QWORD *)(v1 + 28);
                *(_WORD *)(v15 + 8) = 0;
                *(_WORD *)(v15 + 40) = 0;
              }
            }
            *(_DWORD *)(v1 + 320) = v13;
          }
        }
        else
        {
          v3 = *(_QWORD **)(v1 + 8);
        }
        if (*(int *)v3[2] > 0 || v4 == 0)
          goto LABEL_45;
      }
      v3 = *(_QWORD **)(v1 + 8);
    }
LABEL_45:
    if (!v3[7])
    {
      *(_QWORD *)(*(_QWORD *)(v1 + 8) + 56) = sub_18BBEF09C(v1, 0xAuLL);
      result = sub_18BBEF09C(v1, 0);
      if (**(int **)(*(_QWORD *)(v1 + 8) + 16) <= 0)
      {
        v17 = result;
        v20 = "a";
        icu::UnicodeString::UnicodeString(v21, 1, &v20);
        sub_18BBEF154(v1, (uint64_t)v21, v17, 0);
        result = (uint64_t)icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v21);
        v19 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 56);
        *(_QWORD *)(v19 + 16) = v17;
        *(_QWORD *)(v17 + 8) = v19;
        *(_DWORD *)(v1 + 1128) -= 2;
      }
    }
  }
  return result;
}

double sub_18BBEFC2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 52) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t sub_18BBEFC44(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = v2[2];
      v4 = (_QWORD *)v2[3];
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v2[2] = 0;
      icu::UMemory::operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  ucptrie_close(*(_QWORD *)(a1 + 32));
  umutablecptrie_close(*(void ***)(a1 + 24));
  return a1;
}

void sub_18BBEFCB0(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  icu::UnicodeSet *v8;
  int RangeCount;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t RangeStart;
  int RangeEnd;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t i;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  unsigned int v27;
  icu::UVector **v28;
  void *v29;
  _OWORD v30[4];
  _OWORD v31[4];
  uint64_t *v32;

  v32 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v3 = icu::UMemory::operator new(v32, (icu::UMemory *)0x20, a2);
  if (v3)
  {
    v4 = sub_18BBF0524(v3, *(UErrorCode **)(a1 + 8));
    *(_QWORD *)(a1 + 16) = v4;
    *v4 = 0x10FFFF00000000;
    if (**(int **)(a1 + 8) <= 0)
    {
      v5 = icu::UVector::elementAt(*(icu::UVector **)(*(_QWORD *)a1 + 168), 0);
      if (v5)
      {
        v6 = (_QWORD *)v5;
        v7 = 0;
        do
        {
          v8 = (icu::UnicodeSet *)v6[4];
          RangeCount = icu::UnicodeSet::getRangeCount(v8);
          if (RangeCount >= 1)
          {
            v10 = RangeCount;
            v11 = 0;
            v12 = *(_QWORD *)(a1 + 16);
            do
            {
              RangeStart = icu::UnicodeSet::getRangeStart(v8, v11);
              RangeEnd = icu::UnicodeSet::getRangeEnd(v8, v11);
              v15 = RangeEnd;
              while (1)
              {
                v16 = (uint64_t *)*(unsigned int *)(v12 + 4);
                if ((int)v16 >= (int)RangeStart)
                  break;
                v12 = *(_QWORD *)(v12 + 24);
              }
              if (*(_DWORD *)v12 >= (int)RangeStart)
              {
                if ((int)v16 > RangeEnd)
                {
                  sub_18BBF0068(v12, (RangeEnd + 1), *(UErrorCode **)(a1 + 8), v16);
                  if (**(int **)(a1 + 8) > 0)
                    return;
                }
                if (icu::UVector::indexOf(*(icu::UVector **)(v12 + 16), (uint64_t)v6, 0) == -1)
                {
                  icu::UVector::addElement(*(icu::UVector **)(v12 + 16), v6, *(UErrorCode **)(a1 + 8));
                  if (**(int **)(a1 + 8) > 0)
                    return;
                }
                if (v15 == *(_DWORD *)(v12 + 4))
                  ++v11;
                v12 = *(_QWORD *)(v12 + 24);
              }
              else
              {
                sub_18BBF0068(v12, RangeStart, *(UErrorCode **)(a1 + 8), v16);
                if (**(int **)(a1 + 8) >= 1)
                  return;
              }
            }
            while (v11 < v10);
          }
          v6 = (_QWORD *)icu::UVector::elementAt(*(icu::UVector **)(*(_QWORD *)a1 + 168), ++v7);
        }
        while (v6);
      }
      v17 = *(_QWORD *)(a1 + 16);
      if (v17)
      {
        v18 = 0;
        do
        {
          for (i = *(_QWORD *)(a1 + 16); i != v17; i = *(_QWORD *)(i + 24))
          {
            if (icu::UVector::equals(*(icu::UVector **)(v17 + 16), *(const icu::UVector **)(i + 16)))
            {
              *(_DWORD *)(v17 + 8) = *(_DWORD *)(i + 8);
              *(_BYTE *)(v17 + 12) = *(_BYTE *)(i + 12);
              break;
            }
          }
          if (!*(_DWORD *)(v17 + 8))
          {
            *(_BYTE *)(v17 + 13) = 1;
            if (sub_18BBF010C(v17))
            {
              *(_DWORD *)(v17 + 8) = ++v18;
              *(_BYTE *)(v17 + 12) = 1;
            }
            else
            {
              v20 = *(_DWORD *)(a1 + 44);
              *(_DWORD *)(a1 + 44) = v20 + 1;
              *(_DWORD *)(v17 + 8) = v20 + 3;
              sub_18BBF01D4(a1, *(icu::UVector **)(v17 + 16), v20 + 3);
            }
          }
          v17 = *(_QWORD *)(v17 + 24);
        }
        while (v17);
        v21 = *(_QWORD *)(a1 + 16);
        v22 = *(_DWORD *)(a1 + 44);
        *(_DWORD *)(a1 + 48) = v22 + 3;
        if (v21)
        {
          do
          {
            if (*(_BYTE *)(v21 + 12))
            {
              v23 = *(_DWORD *)(a1 + 48) + *(_DWORD *)(v21 + 8) - 1;
              *(_DWORD *)(v21 + 8) = v23;
              if (*(_BYTE *)(v21 + 13))
                sub_18BBF01D4(a1, *(icu::UVector **)(v21 + 16), v23);
            }
            v21 = *(_QWORD *)(v21 + 24);
          }
          while (v21);
          v22 = *(_DWORD *)(a1 + 44);
        }
      }
      else
      {
        v18 = 0;
        v22 = *(_DWORD *)(a1 + 44);
        *(_DWORD *)(a1 + 48) = v22 + 3;
      }
      *(_DWORD *)(a1 + 44) = v22 + v18;
      memset(v31, 0, sizeof(v31));
      icu::UnicodeString::UnicodeString((uint64_t)v31, (uint64_t)L"eof");
      memset(v30, 0, sizeof(v30));
      icu::UnicodeString::UnicodeString((uint64_t)v30, (uint64_t)L"bof");
      v24 = icu::UVector::elementAt(*(icu::UVector **)(*(_QWORD *)a1 + 168), 0);
      if (v24)
      {
        v26 = v24;
        v27 = 1;
        do
        {
          v28 = *(icu::UVector ***)(v26 + 32);
          if (icu::UnicodeSet::contains(v28, (const icu::UnicodeString *)v31))
            sub_18BBF023C(a1, v26, 1u);
          if (icu::UnicodeSet::contains(v28, (const icu::UnicodeString *)v30))
          {
            sub_18BBF023C(a1, v26, 2u);
            *(_BYTE *)(a1 + 52) = 1;
          }
          v26 = icu::UVector::elementAt(*(icu::UVector **)(*(_QWORD *)a1 + 168), v27++);
        }
        while (v26);
      }
      icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v30);
      icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v31);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
    **(_DWORD **)(a1 + 8) = 7;
  }
}

void sub_18BBF0068(unint64_t a1@<X0>, unint64_t a2@<X1>, UErrorCode *a3@<X2>, uint64_t *a4@<X8>)
{
  int v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  v5 = a2;
  v7 = icu::UMemory::operator new(a4, (icu::UMemory *)0x20, a2);
  if (v7)
  {
    v8 = v7;
    sub_18BBF0448((uint64_t)v7, a1, a3);
    if (*(int *)a3 < 1)
    {
      *(_DWORD *)v8 = v5;
      *(_DWORD *)(a1 + 4) = v5 - 1;
      v8[3] = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v8;
    }
    else
    {
      v9 = v8[2];
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v8[2] = 0;
      icu::UMemory::operator delete(v8);
    }
  }
  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
}

uint64_t sub_18BBF010C(uint64_t a1)
{
  int *v2;
  signed int v3;
  uint64_t v4;
  uint64_t v5;
  int32_t v6;

  v2 = *(int **)(a1 + 16);
  if (v2[2] < 1)
    return 0;
  v3 = 0;
  while (1)
  {
    v4 = *(_QWORD *)(icu::UVector::elementAt((icu::UVector *)v2, v3) + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
        {
          v6 = *(__int16 *)(v5 + 56) < 0 ? *(_DWORD *)(v5 + 60) : *(unsigned __int16 *)(v5 + 56) >> 5;
          if (!icu::UnicodeString::doCompare(v5 + 48, 0, v6, (uint64_t)L"dictionary", 0, -1))
            break;
        }
      }
    }
    ++v3;
    v2 = *(int **)(a1 + 16);
    if (v3 >= v2[2])
      return 0;
  }
  return 1;
}

uint64_t sub_18BBF01D4(uint64_t result, icu::UVector *this, unsigned __int16 a3)
{
  uint64_t v5;
  signed int v6;
  unint64_t v7;

  if (*((int *)this + 2) >= 1)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = icu::UVector::elementAt(this, v6);
      result = sub_18BBF023C(v5, v7, a3);
      ++v6;
    }
    while (v6 < *((_DWORD *)this + 2));
  }
  return result;
}

uint64_t sub_18BBF023C(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  result = icu::UMemory::operator new((icu::UMemory *)0xA0, a2);
  if (!result)
  {
LABEL_5:
    **(_DWORD **)(a1 + 8) = 7;
    return result;
  }
  v7 = result;
  result = sub_18BBEB354(result, 3);
  *(_DWORD *)(result + 124) = a3;
  if (*(_QWORD *)(a2 + 16))
  {
    result = icu::UMemory::operator new((icu::UMemory *)0xA0, v8);
    if (result)
    {
      result = sub_18BBEB354(result, 9);
      v9 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(result + 24) = v7;
      *(_QWORD *)(v9 + 8) = result;
      *(_QWORD *)(v7 + 8) = result;
      *(_QWORD *)(result + 16) = v9;
      *(_QWORD *)(a2 + 16) = result;
      *(_QWORD *)(result + 8) = a2;
      return result;
    }
    goto LABEL_5;
  }
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)(v7 + 8) = a2;
  return result;
}

uint64_t sub_18BBF02DC(uint64_t a1)
{
  uint64_t result;
  uint64_t i;
  int *v4;

  result = (uint64_t)umutablecptrie_open(0, 0, *(int **)(a1 + 8));
  *(_QWORD *)(a1 + 24) = result;
  for (i = *(_QWORD *)(a1 + 16); i; i = *(_QWORD *)(i + 24))
  {
    v4 = *(int **)(a1 + 8);
    if (*v4 >= 1)
      break;
    result = umutablecptrie_setRange(*(_QWORD *)(a1 + 24), *(_DWORD *)i, *(_DWORD *)(i + 4), *(_DWORD *)(i + 8), v4);
  }
  return result;
}

uint64_t sub_18BBF033C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    while (1)
    {
      v3 = *(_DWORD *)(v2 + 8);
      v4 = a2;
      if (v3 == HIDWORD(a2))
        goto LABEL_5;
      if (v3 > SHIDWORD(a2))
        break;
LABEL_6:
      v2 = *(_QWORD *)(v2 + 24);
      if (!v2)
        goto LABEL_7;
    }
    v4 = v3 - 1;
LABEL_5:
    *(_DWORD *)(v2 + 8) = v4;
    goto LABEL_6;
  }
LABEL_7:
  v5 = *(_DWORD *)(result + 48);
  --*(_DWORD *)(result + 44);
  if (v5 >= SHIDWORD(a2))
    *(_DWORD *)(result + 48) = v5 - 1;
  return result;
}

uint64_t sub_18BBF038C(uint64_t a1)
{
  uint64_t result;
  char *v3;
  _DWORD *v4;

  if (**(int **)(a1 + 8) > 0)
    return 0;
  if (*(_QWORD *)(a1 + 32))
    return *(unsigned int *)(a1 + 40);
  v3 = umutablecptrie_buildImmutable();
  *(_QWORD *)(a1 + 32) = v3;
  result = ucptrie_toBinary((uint64_t)v3, 0, 0, *(int **)(a1 + 8));
  *(_DWORD *)(a1 + 40) = result;
  v4 = *(_DWORD **)(a1 + 8);
  if (*v4 == 15)
    *v4 = 0;
  return result;
}

uint64_t sub_18BBF0418(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 44) + 3);
}

uint64_t sub_18BBF0424(uint64_t a1, uint64_t a2)
{
  return ucptrie_toBinary(*(_QWORD *)(a1 + 32), a2, *(_DWORD *)(a1 + 40), *(int **)(a1 + 8));
}

uint64_t sub_18BBF0438(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_18BBF0440(uint64_t a1)
{
  return *(char *)(a1 + 52);
}

uint64_t sub_18BBF0448(uint64_t a1, unint64_t a2, UErrorCode *a3)
{
  int v4;
  __int16 v5;
  icu::UVector **v6;
  uint64_t *v7;
  icu::UVector *v10;
  icu::UVector *v11;
  signed int v12;
  icu::UVector *v13;
  void *v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_WORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = 0;
  v6 = (icu::UVector **)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 12) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v7 <= 0)
  {
    v10 = (icu::UVector *)icu::UMemory::operator new(v7, (icu::UMemory *)0x28, a2);
    if (v10)
      v10 = icu::UVector::UVector(v10, a3);
    else
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    *v6 = v10;
    if (*(int *)a3 <= 0)
    {
      v11 = *(icu::UVector **)(a2 + 16);
      if (*((int *)v11 + 2) >= 1)
      {
        v12 = 0;
        do
        {
          v13 = *v6;
          v14 = (void *)icu::UVector::elementAt(v11, v12);
          icu::UVector::addElement(v13, v14, a3);
          ++v12;
          v11 = *(icu::UVector **)(a2 + 16);
        }
        while (v12 < *((_DWORD *)v11 + 2));
      }
    }
  }
  return a1;
}

_QWORD *sub_18BBF0524(_QWORD *a1, UErrorCode *a2)
{
  icu::UVector **v3;
  uint64_t *v4;
  icu::UVector *v6;

  a1[2] = 0;
  v3 = (icu::UVector **)(a1 + 2);
  *(_QWORD *)((char *)a1 + 6) = 0;
  *a1 = 0;
  a1[3] = 0;
  v4 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v4 <= 0)
  {
    v6 = (icu::UVector *)icu::UMemory::operator new(v4, (icu::UMemory *)0x28, (unint64_t)a2);
    if (v6)
    {
      *v3 = icu::UVector::UVector(v6, a2);
    }
    else
    {
      *v3 = 0;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return a1;
}

uint64_t sub_18BBF0598(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = v2;
  *(_BYTE *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_18BBF05B0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = v2[2];
      v4 = (_QWORD *)v2[3];
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v2[2] = 0;
      icu::UMemory::operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  utrie_close(*(char **)(a1 + 24));
  return a1;
}

void sub_18BBF0614(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  icu::UnicodeSet *v9;
  int RangeCount;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t RangeStart;
  int RangeEnd;
  int v16;
  uint64_t *v17;
  uint64_t i;
  uint64_t j;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  icu::UVector **v24;
  void *v25;
  unsigned int *k;
  void *v27;
  _OWORD v28[4];
  _OWORD v29[4];
  uint64_t *v30;

  v30 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v3 = icu::UMemory::operator new(v30, (icu::UMemory *)0x20, a2);
  if (v3)
  {
    v5 = (_QWORD *)sub_18BBF0DE0((uint64_t)v3, *(UErrorCode **)(a1 + 8), v4);
    *(_QWORD *)(a1 + 16) = v5;
    *v5 = 0x10FFFF00000000;
    if (**(int **)(a1 + 8) <= 0)
    {
      v6 = icu::UVector::elementAt(*(icu::UVector **)(*(_QWORD *)a1 + 104), 0);
      if (v6)
      {
        v7 = (_QWORD *)v6;
        v8 = 0;
        do
        {
          v9 = (icu::UnicodeSet *)v7[4];
          RangeCount = icu::UnicodeSet::getRangeCount(v9);
          if (RangeCount >= 1)
          {
            v11 = RangeCount;
            v12 = 0;
            v13 = *(_QWORD *)(a1 + 16);
            do
            {
              RangeStart = icu::UnicodeSet::getRangeStart(v9, v12);
              RangeEnd = icu::UnicodeSet::getRangeEnd(v9, v12);
              v16 = RangeEnd;
              while (1)
              {
                v17 = (uint64_t *)*(unsigned int *)(v13 + 4);
                if ((int)v17 >= (int)RangeStart)
                  break;
                v13 = *(_QWORD *)(v13 + 24);
              }
              if (*(_DWORD *)v13 >= (int)RangeStart)
              {
                if ((int)v17 > RangeEnd)
                {
                  sub_18BBF098C(v13, (RangeEnd + 1), *(UErrorCode **)(a1 + 8), v17);
                  if (**(int **)(a1 + 8) > 0)
                    return;
                }
                if (icu::UVector::indexOf(*(icu::UVector **)(v13 + 16), (uint64_t)v7, 0) == -1)
                {
                  icu::UVector::addElement(*(icu::UVector **)(v13 + 16), v7, *(UErrorCode **)(a1 + 8));
                  if (**(int **)(a1 + 8) > 0)
                    return;
                }
                if (v16 == *(_DWORD *)(v13 + 4))
                  ++v12;
                v13 = *(_QWORD *)(v13 + 24);
              }
              else
              {
                sub_18BBF098C(v13, RangeStart, *(UErrorCode **)(a1 + 8), v17);
                if (**(int **)(a1 + 8) >= 1)
                  return;
              }
            }
            while (v12 < v11);
          }
          v7 = (_QWORD *)icu::UVector::elementAt(*(icu::UVector **)(*(_QWORD *)a1 + 104), ++v8);
        }
        while (v7);
      }
      for (i = *(_QWORD *)(a1 + 16); i; i = *(_QWORD *)(i + 24))
      {
        for (j = *(_QWORD *)(a1 + 16); j != i; j = *(_QWORD *)(j + 24))
        {
          if (icu::UVector::equals(*(icu::UVector **)(i + 16), *(const icu::UVector **)(j + 16)))
          {
            *(_DWORD *)(i + 8) = *(_DWORD *)(j + 8);
            break;
          }
        }
        if (!*(_DWORD *)(i + 8))
        {
          v20 = *(_DWORD *)(a1 + 36);
          *(_DWORD *)(a1 + 36) = v20 + 1;
          *(_DWORD *)(i + 8) = v20 + 3;
          sub_18BBF0A30(i);
          sub_18BBF01D4(a1, *(icu::UVector **)(i + 16), *(_DWORD *)(a1 + 36) + 2);
        }
      }
      memset(v29, 0, sizeof(v29));
      icu::UnicodeString::UnicodeString((uint64_t)v29, (uint64_t)L"eof");
      memset(v28, 0, sizeof(v28));
      icu::UnicodeString::UnicodeString((uint64_t)v28, (uint64_t)L"bof");
      v21 = icu::UVector::elementAt(*(icu::UVector **)(*(_QWORD *)a1 + 104), 0);
      if (v21)
      {
        v22 = v21;
        v23 = 1;
        do
        {
          v24 = *(icu::UVector ***)(v22 + 32);
          if (icu::UnicodeSet::contains(v24, (const icu::UnicodeString *)v29))
            sub_18BBF023C(a1, v22, 1u);
          if (icu::UnicodeSet::contains(v24, (const icu::UnicodeString *)v28))
          {
            sub_18BBF023C(a1, v22, 2u);
            *(_BYTE *)(a1 + 40) = 1;
          }
          v22 = icu::UVector::elementAt(*(icu::UVector **)(*(_QWORD *)a1 + 104), v23++);
        }
        while (v22);
      }
      *(_QWORD *)(a1 + 24) = utrie_open(0, 0, 100000, 0, 0, 1);
      for (k = *(unsigned int **)(a1 + 16); k; k = (unsigned int *)*((_QWORD *)k + 3))
        utrie_setRange32(*(_QWORD *)(a1 + 24), *k, k[1] + 1, k[2], 1);
      icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v28);
      icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v29);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
    **(_DWORD **)(a1 + 8) = 7;
  }
}

void sub_18BBF098C(unint64_t a1@<X0>, unint64_t a2@<X1>, UErrorCode *a3@<X2>, uint64_t *a4@<X8>)
{
  int v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  v5 = a2;
  v7 = icu::UMemory::operator new(a4, (icu::UMemory *)0x20, a2);
  if (v7)
  {
    v8 = v7;
    sub_18BBF0D08((uint64_t)v7, a1, a3);
    if (*(int *)a3 < 1)
    {
      *(_DWORD *)v8 = v5;
      *(_DWORD *)(a1 + 4) = v5 - 1;
      v8[3] = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v8;
    }
    else
    {
      v9 = v8[2];
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v8[2] = 0;
      icu::UMemory::operator delete(v8);
    }
  }
  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
}

icu::UVector *sub_18BBF0A30(uint64_t a1)
{
  icu::UVector *result;
  signed int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int32_t v8;
  int v9;
  _BYTE *v10;
  int v11;
  void *v12;
  __int16 *v13;
  _BYTE v14[8];
  unsigned __int16 v15;
  _BYTE v16[14];
  _BYTE *v17;
  UChar *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  result = *(icu::UVector **)(a1 + 16);
  if (*((int *)result + 2) >= 1)
  {
    v3 = 0;
    while (1)
    {
      v4 = icu::UVector::elementAt(result, v3);
      v22 = 0;
      v20 = 0u;
      v21 = 0u;
      v19 = 0u;
      v18 = (UChar *)off_1E2256B38;
      LOWORD(v19) = 2;
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            icu::UnicodeString::operator=(&v18, (UChar **)(v6 + 48));
        }
      }
      v13 = L"dictionary";
      icu::UnicodeString::UnicodeString(v14, 1, &v13);
      v7 = v15;
      if ((v15 & 1) != 0)
      {
        v11 = (v19 & 1) == 0;
      }
      else
      {
        v8 = (v19 & 0x8000u) == 0 ? (unsigned __int16)v19 >> 5 : DWORD1(v19);
        v9 = (v15 & 0x8000u) == 0 ? v15 >> 5 : *(_DWORD *)&v16[2];
        v10 = (v15 & 2) != 0 ? v16 : v17;
        v11 = icu::UnicodeString::doCompare((uint64_t)&v18, 0, v8, (uint64_t)v10, v9 & (v9 >> 31), v9 & ~(v9 >> 31));
      }
      icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)v14);
      if (!v11)
        break;
      icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v18);
      ++v3;
      result = *(icu::UVector **)(a1 + 16);
      if (v3 >= *((_DWORD *)result + 2))
        return result;
    }
    v12 = (void *)(*(_DWORD *)(a1 + 8) | 0x4000u);
    *(_DWORD *)(a1 + 8) = (_DWORD)v12;
    return (icu::UVector *)icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v18);
  }
  return result;
}

uint64_t sub_18BBF0BEC(uint64_t a1)
{
  uint64_t result;

  result = utrie_serialize(*(_QWORD *)(a1 + 24), 0, 0, (uint64_t (*)(uint64_t, unsigned int, uint64_t))sub_18BBF0C2C, 1, *(int **)(a1 + 8));
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

uint64_t sub_18BBF0C2C(uint64_t a1, signed int a2, int a3)
{
  signed int v4;
  signed int v6;
  int v7;
  int v8;
  BOOL v10;

  v4 = a2;
  v10 = 0;
  v6 = a2 + 1024;
  while (1)
  {
    v7 = utrie_get32(a1, v4, &v10);
    if (!v10)
      break;
    v8 = 32;
LABEL_6:
    v4 += v8;
    if (v4 >= v6)
      return 0;
  }
  if (!v7)
  {
    v8 = 1;
    goto LABEL_6;
  }
  return a3 | 0x8000u;
}

uint64_t sub_18BBF0CA8(uint64_t a1, _DWORD *a2)
{
  return utrie_serialize(*(_QWORD *)(a1 + 24), a2, *(_DWORD *)(a1 + 32), (uint64_t (*)(uint64_t, unsigned int, uint64_t))sub_18BBF0C2C, 1, *(int **)(a1 + 8));
}

uint64_t sub_18BBF0CC8(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 36) + 3);
}

uint64_t sub_18BBF0CD4(uint64_t a1)
{
  return *(char *)(a1 + 40);
}

uint64_t sub_18BBF0CDC(uint64_t a1, int a2)
{
  unsigned int *v2;

  v2 = *(unsigned int **)(a1 + 16);
  if (!v2)
    return 0xFFFFFFFFLL;
  while (v2[2] != a2)
  {
    v2 = (unsigned int *)*((_QWORD *)v2 + 3);
    if (!v2)
      return 0xFFFFFFFFLL;
  }
  return *v2;
}

uint64_t sub_18BBF0D08(uint64_t a1, unint64_t a2, UErrorCode *a3)
{
  uint64_t *v6;
  UErrorCode v7;
  icu::UVector *v8;
  icu::UVector *v10;
  signed int v11;
  icu::UVector *v12;
  void *v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = (uint64_t *)*(unsigned int *)(a2 + 8);
  *(_DWORD *)(a1 + 8) = (_DWORD)v6;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = *a3;
  v8 = (icu::UVector *)icu::UMemory::operator new(v6, (icu::UMemory *)0x28, a2);
  if (v8)
    v8 = icu::UVector::UVector(v8, a3);
  *(_QWORD *)(a1 + 16) = v8;
  if (v7 > U_ZERO_ERROR)
    goto LABEL_4;
  if (*(int *)a3 > 0)
    return a1;
  if (!v8)
  {
    v7 = U_MEMORY_ALLOCATION_ERROR;
LABEL_4:
    *a3 = v7;
    return a1;
  }
  v10 = *(icu::UVector **)(a2 + 16);
  if (*((int *)v10 + 2) >= 1)
  {
    v11 = 0;
    do
    {
      v12 = *(icu::UVector **)(a1 + 16);
      v13 = (void *)icu::UVector::elementAt(v10, v11);
      icu::UVector::addElement(v12, v13, a3);
      ++v11;
      v10 = *(icu::UVector **)(a2 + 16);
    }
    while (v11 < *((_DWORD *)v10 + 2));
  }
  return a1;
}

uint64_t sub_18BBF0DE0@<X0>(uint64_t a1@<X0>, UErrorCode *a2@<X1>, uint64_t *a3@<X8>)
{
  UErrorCode v5;
  icu::UVector *v6;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = *a2;
  v6 = (icu::UVector *)icu::UMemory::operator new(a3, (icu::UMemory *)0x28, (unint64_t)a2);
  if (v6)
    v6 = icu::UVector::UVector(v6, a2);
  *(_QWORD *)(a1 + 16) = v6;
  if (v5 > U_ZERO_ERROR)
    goto LABEL_7;
  if (!v6 && *(int *)a2 <= 0)
  {
    v5 = U_MEMORY_ALLOCATION_ERROR;
LABEL_7:
    *a2 = v5;
  }
  return a1;
}

_QWORD *sub_18BBF0E54(_QWORD *a1, uint64_t a2, uint64_t a3, int *a4)
{
  int32x2_t *v6;

  *a1 = off_1E224B398;
  a1[1] = a3;
  a1[3] = a2;
  icu::UnicodeString::UnicodeString((uint64_t)(a1 + 4), 0xFFFF);
  a1[2] = 0;
  a1[12] = 0;
  v6 = uhash_open((uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, a4);
  a1[2] = v6;
  if (*a4 <= 0)
    uhash_setValueDeleter((uint64_t)v6, (uint64_t)sub_18BBF0ED4);
  return a1;
}

void sub_18BBF0ED4(uint64_t a1)
{
  void *v1;

  if (a1)
  {
    v1 = (void *)sub_18BBF1238(a1);
    icu::UMemory::operator delete(v1);
  }
}

void sub_18BBF0EF4(void ***a1)
{
  void *v2;

  *a1 = (void **)off_1E224B398;
  uhash_close(a1[2]);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 4));
  icu::SymbolTable::~SymbolTable((icu::SymbolTable *)a1);
}

void sub_18BBF0F34(void ***a1)
{
  void *v1;

  sub_18BBF0EF4(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BBF0F48(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = uhash_get(*(_QWORD *)(a1 + 16), a2);
  if (result)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(result + 72) + 16);
    if (*(_DWORD *)v4)
    {
      result = v4 + 48;
      *(_QWORD *)(a1 + 96) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 32);
      return a1 + 32;
    }
  }
  return result;
}

uint64_t sub_18BBF0F9C(uint64_t a1, int a2)
{
  uint64_t result;

  if (a2 != 0xFFFF)
    return 0;
  result = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  return result;
}

void sub_18BBF0FC0(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  UChar32 v18;
  int isIDPart;
  int v20;
  int v21;

  v6 = 0;
  v7 = *(int *)(a2 + 8);
  v8 = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)a4 = off_1E2256B38;
  *(_WORD *)(a4 + 8) = 2;
  v9 = a1 + 10;
  if ((int)v7 <= a3)
    v10 = a3;
  else
    v10 = v7;
  v21 = v10;
  v11 = v10 - v7;
  v12 = v7;
  while (1)
  {
    if (v11 == v6)
    {
      v20 = v21;
      goto LABEL_21;
    }
    v13 = v6;
    v14 = v8 + v6;
    v15 = *(unsigned __int16 *)(a1 + 8);
    v16 = (v15 & 0x8000u) == 0 ? v15 >> 5 : *(_DWORD *)(a1 + 12);
    if (v16 > v14)
      break;
    v18 = 0xFFFF;
    if (!v13)
      goto LABEL_16;
LABEL_17:
    isIDPart = u_isIDPart(v18);
    ++v12;
    v6 = v13 + 1;
    if (!isIDPart)
    {
      v20 = v8 + v13;
      goto LABEL_21;
    }
  }
  if ((v15 & 2) != 0)
    v17 = v9;
  else
    v17 = *(_QWORD *)(a1 + 24);
  v18 = *(unsigned __int16 *)(v17 + 2 * v7 + 2 * v13);
  if (v13)
    goto LABEL_17;
LABEL_16:
  if (u_isIDStart(v18))
    goto LABEL_17;
  v20 = v12;
LABEL_21:
  if (v20 != v8)
  {
    *(_DWORD *)(a2 + 8) = v20;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v7);
  }
}

uint64_t sub_18BBF1130(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = uhash_get(*(_QWORD *)(a1 + 16), a2);
  if (result)
    return *(_QWORD *)(result + 72);
  return result;
}

uint64_t *sub_18BBF1150(uint64_t *result, UChar **a2, uint64_t a3, int *a4)
{
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if (*a4 <= 0)
  {
    v7 = result;
    result = (uint64_t *)uhash_get(result[2], (uint64_t)a2);
    if (result)
    {
      v10 = 66054;
    }
    else
    {
      result = icu::UMemory::operator new(v9, (icu::UMemory *)0x50, v8);
      if (result)
      {
        v11 = (uint64_t)result;
        result[1] = (uint64_t)off_1E2256B38;
        v12 = (uint64_t)(result + 1);
        *((_WORD *)result + 8) = 2;
        result[9] = 0;
        icu::UnicodeString::operator=((UChar **)result + 1, a2);
        *(_QWORD *)(v11 + 72) = a3;
        return (uint64_t *)uhash_put(v7[2], v12, v11, a4);
      }
      v10 = 7;
    }
    *a4 = v10;
  }
  return result;
}

uint64_t sub_18BBF1218(uint64_t result)
{
  *(_QWORD *)(result + 8) = off_1E2256B38;
  *(_WORD *)(result + 16) = 2;
  *(_QWORD *)(result + 72) = 0;
  return result;
}

uint64_t sub_18BBF1238(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = (void *)sub_18BBEB4E4(*(_QWORD *)(v2 + 16));
    icu::UMemory::operator delete(v3);
    v2 = *(_QWORD *)(a1 + 72);
  }
  *(_QWORD *)(v2 + 16) = 0;
  v4 = (void *)sub_18BBEB4E4(v2);
  icu::UMemory::operator delete(v4);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 8));
  return a1;
}

_QWORD *sub_18BBF128C(_QWORD *a1, uint64_t a2, uint64_t a3, int *a4)
{
  int32x2_t *v6;

  *a1 = off_1E224B418;
  a1[1] = a3;
  a1[3] = a2;
  icu::UnicodeString::UnicodeString((uint64_t)(a1 + 4), 0xFFFF);
  a1[2] = 0;
  a1[12] = 0;
  v6 = uhash_open((uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, a4);
  a1[2] = v6;
  if (*a4 <= 0)
    uhash_setValueDeleter((uint64_t)v6, (uint64_t)sub_18BBF130C);
  return a1;
}

void sub_18BBF130C(uint64_t a1)
{
  void *v1;

  if (a1)
  {
    v1 = (void *)sub_18BBF1288(a1);
    icu::UMemory::operator delete(v1);
  }
}

void sub_18BBF132C(void ***a1)
{
  void *v2;

  *a1 = (void **)off_1E224B418;
  uhash_close(a1[2]);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 4));
  icu::SymbolTable::~SymbolTable((icu::SymbolTable *)a1);
}

void sub_18BBF136C(void ***a1)
{
  void *v1;

  sub_18BBF132C(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BBF1380(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = uhash_get(*(_QWORD *)(a1 + 16), a2);
  if (result)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(result + 72) + 16);
    if (*(_DWORD *)v4)
    {
      result = v4 + 48;
      *(_QWORD *)(a1 + 96) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 32);
      return a1 + 32;
    }
  }
  return result;
}

uint64_t sub_18BBF13D4(uint64_t a1, int a2)
{
  uint64_t result;

  if (a2 != 0xFFFF)
    return 0;
  result = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  return result;
}

void sub_18BBF13F8(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  UChar32 v18;
  int isIDPart;
  int v20;
  int v21;

  v6 = 0;
  v7 = *(int *)(a2 + 8);
  v8 = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)a4 = off_1E2256B38;
  *(_WORD *)(a4 + 8) = 2;
  v9 = a1 + 10;
  if ((int)v7 <= a3)
    v10 = a3;
  else
    v10 = v7;
  v21 = v10;
  v11 = v10 - v7;
  v12 = v7;
  while (1)
  {
    if (v11 == v6)
    {
      v20 = v21;
      goto LABEL_21;
    }
    v13 = v6;
    v14 = v8 + v6;
    v15 = *(unsigned __int16 *)(a1 + 8);
    v16 = (v15 & 0x8000u) == 0 ? v15 >> 5 : *(_DWORD *)(a1 + 12);
    if (v16 > v14)
      break;
    v18 = 0xFFFF;
    if (!v13)
      goto LABEL_16;
LABEL_17:
    isIDPart = u_isIDPart(v18);
    ++v12;
    v6 = v13 + 1;
    if (!isIDPart)
    {
      v20 = v8 + v13;
      goto LABEL_21;
    }
  }
  if ((v15 & 2) != 0)
    v17 = v9;
  else
    v17 = *(_QWORD *)(a1 + 24);
  v18 = *(unsigned __int16 *)(v17 + 2 * v7 + 2 * v13);
  if (v13)
    goto LABEL_17;
LABEL_16:
  if (u_isIDStart(v18))
    goto LABEL_17;
  v20 = v12;
LABEL_21:
  if (v20 != v8)
  {
    *(_DWORD *)(a2 + 8) = v20;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v7);
  }
}

uint64_t sub_18BBF1568(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = uhash_get(*(_QWORD *)(a1 + 16), a2);
  if (result)
    return *(_QWORD *)(result + 72);
  return result;
}

uint64_t *sub_18BBF1588(uint64_t *result, UChar **a2, uint64_t a3, int *a4)
{
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  UChar **v12;

  if (*a4 <= 0)
  {
    v7 = result;
    result = (uint64_t *)uhash_get(result[2], (uint64_t)a2);
    if (result)
    {
      v10 = 66054;
    }
    else
    {
      result = icu::UMemory::operator new(v9, (icu::UMemory *)0x50, v8);
      if (result)
      {
        v11 = (uint64_t)result;
        v12 = (UChar **)(sub_18BBF1218((uint64_t)result) + 8);
        icu::UnicodeString::operator=(v12, a2);
        *(_QWORD *)(v11 + 72) = a3;
        return (uint64_t *)uhash_put(v7[2], (uint64_t)v12, v11, a4);
      }
      v10 = 7;
    }
    *a4 = v10;
  }
  return result;
}

uint64_t sub_18BBF1638(uint64_t a1, unint64_t a2, uint64_t a3, UErrorCode *a4)
{
  icu::UVector **v5;
  uint64_t *v6;
  icu::UVector *v8;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = (icu::UVector **)(a1 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 1;
  v6 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v6 <= 0)
  {
    v8 = (icu::UVector *)icu::UMemory::operator new(v6, (icu::UMemory *)0x28, a2);
    if (v8)
    {
      *v5 = icu::UVector::UVector(v8, a4);
    }
    else
    {
      *v5 = 0;
      if (*(int *)a4 <= 0)
        *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return a1;
}

_QWORD *sub_18BBF16C4(_QWORD *a1)
{
  icu::UVector *v2;
  signed int v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (icu::UVector *)a1[3];
  if (*((int *)v2 + 2) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = (_QWORD *)icu::UVector::elementAt(v2, v3);
      if (v4)
      {
        v5 = sub_18BBF3EBC(v4);
        icu::UMemory::operator delete(v5);
      }
      ++v3;
      v2 = (icu::UVector *)a1[3];
    }
    while (v3 < *((_DWORD *)v2 + 2));
  }
  (*(void (**)(icu::UVector *))(*(_QWORD *)v2 + 8))(v2);
  v6 = a1[4];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[5];
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

void sub_18BBF175C(UErrorCode **a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  UErrorCode *v22;
  unint64_t v23;
  uint64_t *v24;
  void *v25;

  if (*(int *)a1[2] > 0)
    return;
  v3 = *(_QWORD *)a1[1];
  if (!v3)
    return;
  *(_QWORD *)a1[1] = sub_18BBEB570(v3, a2);
  if (sub_18BBF0440(*((_QWORD *)*a1 + 20)))
  {
    v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0xA0, v4);
    v9 = v6;
    if (v6)
      sub_18BBEB354(v6, 8);
    v10 = icu::UMemory::operator new(v8, (icu::UMemory *)0xA0, v7);
    if (v10)
    {
      v11 = sub_18BBEB354(v10, 3);
      if (v9)
      {
        v9[2] = v11;
        v5 = (uint64_t *)a1[1];
        v9[3] = *v5;
        *(_QWORD *)(v11 + 8) = v9;
        *(_DWORD *)(v11 + 124) = 2;
        *v5 = (uint64_t)v9;
        goto LABEL_10;
      }
      *a1[2] = U_MEMORY_ALLOCATION_ERROR;
    }
    else
    {
      *a1[2] = U_MEMORY_ALLOCATION_ERROR;
      if (!v9)
        return;
      v11 = (uint64_t)v9;
    }
LABEL_22:
    v25 = (void *)sub_18BBEB4E4(v11);
    icu::UMemory::operator delete(v25);
    return;
  }
LABEL_10:
  v12 = icu::UMemory::operator new(v5, (icu::UMemory *)0xA0, v4);
  if (!v12)
  {
    *a1[2] = U_MEMORY_ALLOCATION_ERROR;
    return;
  }
  v13 = v12;
  v14 = sub_18BBEB354(v12, 8);
  v15 = (uint64_t **)a1[1];
  *(_QWORD *)(v14 + 16) = *v15;
  v16 = *v15;
  v16[1] = v14;
  v18 = icu::UMemory::operator new(v16, (icu::UMemory *)0xA0, v17);
  if (!v18)
  {
    v13[3] = 0;
    *a1[2] = U_MEMORY_ALLOCATION_ERROR;
    v11 = (uint64_t)v13;
    goto LABEL_22;
  }
  v19 = (uint64_t)v18;
  v20 = sub_18BBEB354(v18, 6);
  v13[3] = v20;
  *(_QWORD *)(v20 + 8) = v13;
  *(_QWORD *)a1[1] = v13;
  sub_18BBEB5EC(*(_QWORD *)a1[1], v21);
  sub_18BBF1980((uint64_t)a1, *(int **)a1[1]);
  sub_18BBF1A50((uint64_t)a1, *(icu::UVector ***)a1[1]);
  sub_18BBF1B34((uint64_t)a1, *(icu::UVector ***)a1[1]);
  sub_18BBF1C14((uint64_t)a1, *(int **)a1[1]);
  v22 = *a1;
  if (*((_BYTE *)*a1 + 152))
  {
    sub_18BBF1D04((uint64_t)a1, *(_QWORD *)a1[1], v19);
    v22 = *a1;
  }
  if (sub_18BBF0440(*((_QWORD *)v22 + 20)))
    sub_18BBF1ECC((uint64_t)a1);
  sub_18BBF1F70((uint64_t)a1);
  sub_18BBF22EC((uint64_t)a1, v23, v24);
  sub_18BBF2490((uint64_t)a1);
  sub_18BBF2610((uint64_t)a1);
  sub_18BBF273C((uint64_t)a1);
  sub_18BBF2858(a1);
}

uint64_t sub_18BBF1980(uint64_t result, int *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  if (a2)
  {
    v3 = result;
    v4 = *a2;
    if (*a2 < 7 && ((0x71u >> v4) & 1) != 0)
    {
      v5 = (0x30u >> v4) & 1;
    }
    else
    {
      sub_18BBF1980(result, *((_QWORD *)a2 + 2));
      result = sub_18BBF1980(v3, *((_QWORD *)a2 + 3));
      LOBYTE(v5) = 1;
      switch(*a2)
      {
        case 8:
          LOBYTE(v5) = *(_BYTE *)(*((_QWORD *)a2 + 2) + 120);
          if ((_BYTE)v5)
            goto LABEL_11;
          break;
        case 9:
          if (*(_BYTE *)(*((_QWORD *)a2 + 2) + 120))
            LOBYTE(v5) = 1;
          else
LABEL_11:
            LOBYTE(v5) = *(_BYTE *)(*((_QWORD *)a2 + 3) + 120) != 0;
          break;
        case 10:
        case 12:
          break;
        default:
          LOBYTE(v5) = 0;
          break;
      }
    }
    *((_BYTE *)a2 + 120) = v5;
  }
  return result;
}

void sub_18BBF1A50(uint64_t a1, icu::UVector **a2)
{
  int v4;
  unsigned int *v5;
  icu::UVector *v6;

  if (a2)
  {
    if ((*(_DWORD *)a2 - 3) <= 3)
    {
      icu::UVector::addElement(a2[17], a2, *(UErrorCode **)(a1 + 16));
      return;
    }
    sub_18BBF1A50(a1, a2[2]);
    sub_18BBF1A50(a1, a2[3]);
    v4 = *(_DWORD *)a2;
    if ((*(_DWORD *)a2 - 10) >= 3)
    {
      if (v4 == 8)
      {
        sub_18BBF2A38(a1, (unsigned int *)a2[17], *((unsigned int **)a2[2] + 17));
        if (!*((_BYTE *)a2[2] + 120))
          return;
      }
      else
      {
        if (v4 != 9)
          return;
        sub_18BBF2A38(a1, (unsigned int *)a2[17], *((unsigned int **)a2[2] + 17));
      }
      v5 = (unsigned int *)a2[17];
      v6 = a2[3];
    }
    else
    {
      v5 = (unsigned int *)a2[17];
      v6 = a2[2];
    }
    sub_18BBF2A38(a1, v5, *((unsigned int **)v6 + 17));
  }
}

void sub_18BBF1B34(uint64_t a1, icu::UVector **a2)
{
  int v4;
  unsigned int *v5;
  icu::UVector *v6;

  if (a2)
  {
    if ((*(_DWORD *)a2 - 3) <= 3)
    {
      icu::UVector::addElement(a2[18], a2, *(UErrorCode **)(a1 + 16));
      return;
    }
    sub_18BBF1B34(a1, a2[2]);
    sub_18BBF1B34(a1, a2[3]);
    v4 = *(_DWORD *)a2;
    if ((*(_DWORD *)a2 - 10) < 3)
      goto LABEL_5;
    if (v4 != 8)
    {
      if (v4 != 9)
        return;
      sub_18BBF2A38(a1, (unsigned int *)a2[18], *((unsigned int **)a2[2] + 18));
      v5 = (unsigned int *)a2[18];
      v6 = a2[3];
      goto LABEL_9;
    }
    sub_18BBF2A38(a1, (unsigned int *)a2[18], *((unsigned int **)a2[3] + 18));
    if (*((_BYTE *)a2[3] + 120))
    {
LABEL_5:
      v5 = (unsigned int *)a2[18];
      v6 = a2[2];
LABEL_9:
      sub_18BBF2A38(a1, v5, *((unsigned int **)v6 + 18));
    }
  }
}

void sub_18BBF1C14(uint64_t a1, int *a2)
{
  int v5;
  icu::UVector *v6;
  unsigned int v7;
  uint64_t v8;
  icu::UVector *v9;
  unsigned int v10;
  uint64_t v11;

  if (a2)
  {
    if (*a2 != 3 && *a2 != 6)
    {
      sub_18BBF1C14(a1, *((_QWORD *)a2 + 2));
      sub_18BBF1C14(a1, *((_QWORD *)a2 + 3));
      v5 = *a2;
      if (*a2 == 8)
      {
        v6 = *(icu::UVector **)(*((_QWORD *)a2 + 2) + 144);
        if (!*((_DWORD *)v6 + 2))
          return;
        v7 = 0;
        do
        {
          v8 = icu::UVector::elementAt(v6, v7);
          sub_18BBF2A38(a1, *(unsigned int **)(v8 + 152), *(unsigned int **)(*((_QWORD *)a2 + 3) + 136));
          ++v7;
        }
        while (v7 < *((_DWORD *)v6 + 2));
        v5 = *a2;
      }
      if ((v5 & 0xFFFFFFFE) == 0xA)
      {
        v9 = (icu::UVector *)*((_QWORD *)a2 + 18);
        if (*((_DWORD *)v9 + 2))
        {
          v10 = 0;
          do
          {
            v11 = icu::UVector::elementAt(v9, v10);
            sub_18BBF2A38(a1, *(unsigned int **)(v11 + 152), *((unsigned int **)a2 + 17));
            ++v10;
            v9 = (icu::UVector *)*((_QWORD *)a2 + 18);
          }
          while (v10 < *((_DWORD *)v9 + 2));
        }
      }
    }
  }
}

void sub_18BBF1D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  UErrorCode *v6;
  UErrorCode *v7;
  signed int v8;
  uint64_t v9;
  signed int v10;
  uint64_t v11;
  signed int v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v19 = 0;
  memset(v18, 0, sizeof(v18));
  icu::UVector::UVector((icu::UVector *)v18, *(UErrorCode **)(a1 + 16));
  v6 = *(UErrorCode **)(a1 + 16);
  if (*(int *)v6 <= 0)
  {
    sub_18BBEB680(a2, (icu::UVector *)v18, 3, v6);
    v7 = *(UErrorCode **)(a1 + 16);
    if (*(int *)v7 <= 0)
    {
      v17 = 0;
      memset(v16, 0, sizeof(v16));
      icu::UVector::UVector((icu::UVector *)v16, v7);
      sub_18BBF2CEC(a1, (icu::UVector *)v16, a2);
      v15 = 0;
      memset(v14, 0, sizeof(v14));
      icu::UVector::UVector((icu::UVector *)v14, *(UErrorCode **)(a1 + 16));
      if (SDWORD2(v16[0]) >= 1)
      {
        v8 = 0;
        do
        {
          v9 = icu::UVector::elementAt((icu::UVector *)v16, v8);
          if (*(_BYTE *)(v9 + 130))
            sub_18BBF2A38(a1, (unsigned int *)v14, *(unsigned int **)(v9 + 136));
          ++v8;
        }
        while (v8 < SDWORD2(v16[0]));
      }
      if (**(int **)(a1 + 16) <= 0 && SDWORD2(v18[0]) >= 1)
      {
        v10 = 0;
        do
        {
          v11 = icu::UVector::elementAt((icu::UVector *)v18, v10);
          if ((icu::UVector::indexOf(*(icu::UVector **)(v11 + 152), a3, 0) & 0x80000000) == 0 && SDWORD2(v14[0]) >= 1)
          {
            v12 = 0;
            do
            {
              v13 = icu::UVector::elementAt((icu::UVector *)v14, v12);
              if (*(_DWORD *)v13 == 3 && *(_DWORD *)(v11 + 124) == *(_DWORD *)(v13 + 124))
                sub_18BBF2A38(a1, *(unsigned int **)(v11 + 152), *(unsigned int **)(v13 + 152));
              ++v12;
            }
            while (v12 < SDWORD2(v14[0]));
          }
          ++v10;
        }
        while (v10 < SDWORD2(v18[0]));
      }
      icu::UVector::~UVector((icu::UVector *)v14);
      icu::UVector::~UVector((icu::UVector *)v16);
    }
  }
  icu::UVector::~UVector((icu::UVector *)v18);
}

void sub_18BBF1ECC(uint64_t a1)
{
  uint64_t v2;
  icu::UVector *v3;
  signed int v4;
  uint64_t v5;
  uint64_t v6;

  if (**(int **)(a1 + 16) <= 0)
  {
    v2 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 16);
    v3 = *(icu::UVector **)(*(_QWORD *)(v2 + 24) + 136);
    if (*((int *)v3 + 2) >= 1)
    {
      v4 = 0;
      v5 = *(_QWORD *)(v2 + 16);
      do
      {
        v6 = icu::UVector::elementAt(v3, v4);
        if (*(_DWORD *)v6 == 3 && *(_DWORD *)(v6 + 124) == *(_DWORD *)(v5 + 124))
          sub_18BBF2A38(a1, *(unsigned int **)(v5 + 152), *(unsigned int **)(v6 + 152));
        ++v4;
      }
      while (v4 < *((_DWORD *)v3 + 2));
    }
  }
}

void sub_18BBF1F70(uint64_t a1)
{
  int v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  UErrorCode *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  icu::UVector *v11;
  UErrorCode *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  UErrorCode *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  icu::UVector *v21;
  unsigned int *v22;
  UErrorCode *v23;
  _QWORD *v24;
  _QWORD *v25;
  int *v26;
  signed int i;
  _BYTE *v28;
  _BYTE *v29;
  unsigned int v30;
  int *v31;
  signed int v32;
  unsigned int *v33;
  unsigned int **v34;
  unint64_t v35;
  unsigned int **v36;
  uint64_t *v37;
  icu::UVector *v38;
  UErrorCode *v39;
  unsigned int *v40;
  uint64_t *v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  UErrorCode *v47;

  if (**(int **)(a1 + 16) > 0)
    return;
  v2 = sub_18BBF0418(*(_QWORD *)(*(_QWORD *)a1 + 160));
  v5 = icu::UMemory::operator new(v4, (icu::UMemory *)0x30, v3);
  v7 = *(UErrorCode **)(a1 + 16);
  if (!v5)
  {
    *v7 = U_MEMORY_ALLOCATION_ERROR;
    return;
  }
  v8 = v5;
  sub_18BBF3E28((uint64_t)v5, (v2 - 1), v7, v6);
  v11 = (icu::UVector *)icu::UMemory::operator new(v10, (icu::UMemory *)0x28, v9);
  if (!v11)
  {
    v8[4] = 0;
    **(_DWORD **)(a1 + 16) = 7;
LABEL_13:
    v24 = sub_18BBF3EBC(v8);
    icu::UMemory::operator delete(v24);
    return;
  }
  v8[4] = (uint64_t)icu::UVector::UVector(v11, *(UErrorCode **)(a1 + 16));
  v12 = *(UErrorCode **)(a1 + 16);
  if (*(int *)v12 > 0)
    goto LABEL_13;
  icu::UVector::addElement(*(icu::UVector **)(a1 + 24), v8, v12);
  v14 = (uint64_t *)**(unsigned int **)(a1 + 16);
  if ((int)v14 > 0)
    goto LABEL_13;
  v15 = icu::UMemory::operator new(v14, (icu::UMemory *)0x30, v13);
  v17 = *(UErrorCode **)(a1 + 16);
  if (!v15)
  {
    *v17 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_13;
  }
  v18 = v15;
  sub_18BBF3E28((uint64_t)v15, (v2 - 1), v17, v16);
  v20 = (uint64_t *)**(unsigned int **)(a1 + 16);
  if ((int)v20 > 0)
    goto LABEL_18;
  v21 = (icu::UVector *)icu::UMemory::operator new(v20, (icu::UMemory *)0x28, v19);
  v22 = (unsigned int *)v21;
  v23 = *(UErrorCode **)(a1 + 16);
  if (v21)
    icu::UVector::UVector(v21, v23);
  else
    *v23 = U_MEMORY_ALLOCATION_ERROR;
  v18[4] = (uint64_t)v22;
  if (**(int **)(a1 + 16) > 0)
    goto LABEL_18;
  sub_18BBF2A38(a1, v22, *(unsigned int **)(**(_QWORD **)(a1 + 8) + 136));
  icu::UVector::addElement(*(icu::UVector **)(a1 + 24), v18, *(UErrorCode **)(a1 + 16));
  if (**(int **)(a1 + 16) > 0)
    goto LABEL_18;
  v26 = *(int **)(a1 + 24);
  if (v26[2] < 2)
    return;
  for (i = 1; ; i = 1)
  {
    while (1)
    {
      v28 = (_BYTE *)icu::UVector::elementAt((icu::UVector *)v26, i);
      if (!*v28)
        break;
      ++i;
      v26 = *(int **)(a1 + 24);
      if (i >= v26[2])
        return;
    }
    v29 = v28;
    *v28 = 1;
    if (v2 >= 2)
      break;
LABEL_47:
    v26 = *(int **)(a1 + 24);
    if (v26[2] <= 1)
      return;
  }
  v30 = 1;
  while (1)
  {
    v31 = (int *)*((_QWORD *)v29 + 4);
    if (v31[2] >= 1)
      break;
LABEL_46:
    if (++v30 == v2)
      goto LABEL_47;
  }
  v32 = 0;
  v33 = 0;
  do
  {
    v34 = (unsigned int **)icu::UVector::elementAt((icu::UVector *)v31, v32);
    if (*(_DWORD *)v34 == 3)
    {
      v36 = v34;
      v37 = (uint64_t *)*((unsigned int *)v34 + 31);
      if ((_DWORD)v37 == v30)
      {
        if (!v33)
        {
          v38 = (icu::UVector *)icu::UMemory::operator new(v37, (icu::UMemory *)0x28, v35);
          v39 = *(UErrorCode **)(a1 + 16);
          if (!v38)
            goto LABEL_49;
          v33 = (unsigned int *)v38;
          icu::UVector::UVector(v38, *(UErrorCode **)(a1 + 16));
        }
        sub_18BBF2A38(a1, v33, v36[19]);
      }
    }
    ++v32;
    v31 = (int *)*((_QWORD *)v29 + 4);
  }
  while (v32 < v31[2]);
  if (!v33)
    goto LABEL_46;
  v40 = *(unsigned int **)(a1 + 24);
  v41 = (uint64_t *)v40[2];
  if ((int)v41 >= 1)
  {
    v42 = 0;
    while (1)
    {
      v43 = icu::UVector::elementAt((icu::UVector *)v40, v42);
      if (icu::UVector::equals((icu::UVector *)v33, *(const icu::UVector **)(v43 + 32)))
        break;
      ++v42;
      v40 = *(unsigned int **)(a1 + 24);
      v41 = (uint64_t *)v40[2];
      if (v42 >= (int)v41)
        goto LABEL_40;
    }
    (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
    goto LABEL_45;
  }
LABEL_40:
  v44 = icu::UMemory::operator new(v41, (icu::UMemory *)0x30, v35);
  v39 = *(UErrorCode **)(a1 + 16);
  if (!v44)
  {
LABEL_49:
    *v39 = U_MEMORY_ALLOCATION_ERROR;
LABEL_18:
    v25 = sub_18BBF3EBC(v18);
    icu::UMemory::operator delete(v25);
    goto LABEL_13;
  }
  v46 = v44;
  sub_18BBF3E28((uint64_t)v44, (v2 - 1), v39, v45);
  v47 = *(UErrorCode **)(a1 + 16);
  if (*(int *)v47 > 0)
    goto LABEL_18;
  v46[4] = (uint64_t)v33;
  icu::UVector::addElement(*(icu::UVector **)(a1 + 24), v46, v47);
  if (**(int **)(a1 + 16) <= 0)
  {
    v42 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 8) - 1;
LABEL_45:
    icu::UVector32::setElementAt(*((_QWORD *)v29 + 5), v42, v30);
    goto LABEL_46;
  }
}

icu::UVector32 *sub_18BBF22EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::UVector32 *result;
  icu::UVector32 *v5;
  int v6;
  int v7;
  signed int v8;
  uint64_t v9;
  icu::UVector *v10;
  signed int v11;
  char v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  BOOL v20;
  int v21;
  signed int v22;
  _DWORD *v23;

  result = (icu::UVector32 *)icu::UMemory::operator new(a3, (icu::UMemory *)0x20, a2);
  if (result)
  {
    v5 = result;
    v6 = sub_18BBEE180(*(_QWORD *)(*(_QWORD *)a1 + 104));
    result = icu::UVector32::UVector32(v5, v6 + 1, *(UErrorCode **)(a1 + 16));
    *(_QWORD *)(a1 + 40) = v5;
    if (**(int **)(a1 + 16) <= 0)
    {
      v7 = sub_18BBEE180(*(_QWORD *)(*(_QWORD *)a1 + 104));
      icu::UVector32::setSize(v5, v7 + 1);
      result = *(icu::UVector32 **)(a1 + 24);
      if (*((int *)result + 2) >= 1)
      {
        v8 = 0;
        do
        {
          v9 = icu::UVector::elementAt(result, v8);
          v10 = *(icu::UVector **)(v9 + 32);
          if (*((int *)v10 + 2) >= 1)
          {
            v11 = 0;
            v12 = 0;
            v13 = 0;
            do
            {
              v14 = (_DWORD *)icu::UVector::elementAt(v10, v11);
              if (*v14 == 4)
              {
                v15 = v14[31];
                if ((v15 & 0x80000000) != 0
                  || ((v16 = *(_QWORD *)(a1 + 40), v17 = *(_DWORD *)(v16 + 8), v17 >= 1)
                    ? (v18 = v17 <= (int)v15)
                    : (v18 = 1),
                      v18))
                {
                  v19 = 0;
                }
                else
                {
                  v19 = *(_DWORD *)(*(_QWORD *)(v16 + 24) + 4 * v15);
                }
                if (v13)
                  v20 = 1;
                else
                  v20 = v19 == 0;
                if (!v20)
                  v13 = v19;
                v12 = 1;
              }
              ++v11;
              v10 = *(icu::UVector **)(v9 + 32);
              v21 = *((_DWORD *)v10 + 2);
            }
            while (v11 < v21);
            if ((v12 & 1) != 0)
            {
              if (!v13)
              {
                v13 = *(_DWORD *)(a1 + 48) + 1;
                *(_DWORD *)(a1 + 48) = v13;
              }
              if (v21 >= 1)
              {
                v22 = 0;
                do
                {
                  v23 = (_DWORD *)icu::UVector::elementAt(v10, v22);
                  if (*v23 == 4)
                    icu::UVector32::setElementAt(*(_QWORD *)(a1 + 40), v13, v23[31]);
                  ++v22;
                  v10 = *(icu::UVector **)(v9 + 32);
                }
                while (v22 < *((_DWORD *)v10 + 2));
              }
            }
          }
          ++v8;
          result = *(icu::UVector32 **)(a1 + 24);
        }
        while (v8 < *((_DWORD *)result + 2));
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 0;
    **(_DWORD **)(a1 + 16) = 7;
  }
  return result;
}

void sub_18BBF2490(uint64_t a1)
{
  UErrorCode *v1;
  UErrorCode *v3;
  signed int v4;
  uint64_t v5;
  icu::UVector *v6;
  signed int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  int v18;
  _OWORD v19[2];
  uint64_t v20;

  v1 = *(UErrorCode **)(a1 + 16);
  if (*(int *)v1 <= 0)
  {
    v20 = 0;
    memset(v19, 0, sizeof(v19));
    icu::UVector::UVector((icu::UVector *)v19, v1);
    v3 = *(UErrorCode **)(a1 + 16);
    if (*(int *)v3 <= 0)
    {
      sub_18BBEB680(**(_QWORD **)(a1 + 8), (icu::UVector *)v19, 6, v3);
      if (**(int **)(a1 + 16) <= 0 && SDWORD2(v19[0]) >= 1)
      {
        v4 = 0;
        do
        {
          v5 = icu::UVector::elementAt((icu::UVector *)v19, v4);
          v6 = *(icu::UVector **)(a1 + 24);
          if (*((int *)v6 + 2) >= 1)
          {
            v7 = 0;
            do
            {
              v8 = icu::UVector::elementAt(v6, v7);
              if ((icu::UVector::indexOf(*(icu::UVector **)(v8 + 32), v5, 0) & 0x80000000) == 0)
              {
                v9 = *(_DWORD *)(v8 + 4);
                if (!v9)
                {
                  v10 = *(unsigned int *)(v5 + 124);
                  if ((v10 & 0x80000000) != 0
                    || ((v11 = *(_QWORD *)(a1 + 40), v12 = *(_DWORD *)(v11 + 8), v12 >= 1)
                      ? (v13 = v12 <= (int)v10)
                      : (v13 = 1),
                        v13 || (v9 = *(_DWORD *)(*(_QWORD *)(v11 + 24) + 4 * v10)) == 0))
                  {
                    v9 = 1;
                  }
                  *(_DWORD *)(v8 + 4) = v9;
                }
                if (v9 == 1)
                {
                  v14 = *(unsigned int *)(v5 + 124);
                  if ((_DWORD)v14)
                  {
                    if ((v14 & 0x80000000) != 0
                      || ((v15 = *(_QWORD *)(a1 + 40), v16 = *(_DWORD *)(v15 + 8), v16 >= 1)
                        ? (v17 = v16 <= (int)v14)
                        : (v17 = 1),
                          v17))
                    {
                      v18 = 0;
                    }
                    else
                    {
                      v18 = *(_DWORD *)(*(_QWORD *)(v15 + 24) + 4 * v14);
                    }
                    *(_DWORD *)(v8 + 4) = v18;
                  }
                }
              }
              ++v7;
              v6 = *(icu::UVector **)(a1 + 24);
            }
            while (v7 < *((_DWORD *)v6 + 2));
          }
          ++v4;
        }
        while (v4 < SDWORD2(v19[0]));
      }
    }
    icu::UVector::~UVector((icu::UVector *)v19);
  }
}

void sub_18BBF2610(uint64_t a1)
{
  UErrorCode *v1;
  signed int v3;
  uint64_t v4;
  icu::UVector *v5;
  signed int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  _OWORD v13[2];
  uint64_t v14;

  v1 = *(UErrorCode **)(a1 + 16);
  if (*(int *)v1 <= 0)
  {
    v14 = 0;
    memset(v13, 0, sizeof(v13));
    icu::UVector::UVector((icu::UVector *)v13, v1);
    sub_18BBEB680(**(_QWORD **)(a1 + 8), (icu::UVector *)v13, 4, *(UErrorCode **)(a1 + 16));
    if (**(int **)(a1 + 16) <= 0 && SDWORD2(v13[0]) >= 1)
    {
      v3 = 0;
      do
      {
        v4 = icu::UVector::elementAt((icu::UVector *)v13, v3);
        v5 = *(icu::UVector **)(a1 + 24);
        if (*((int *)v5 + 2) >= 1)
        {
          v6 = 0;
          do
          {
            v7 = icu::UVector::elementAt(v5, v6);
            if ((icu::UVector::indexOf(*(icu::UVector **)(v7 + 32), v4, 0) & 0x80000000) == 0)
            {
              v8 = *(unsigned int *)(v4 + 124);
              if ((v8 & 0x80000000) != 0
                || ((v9 = *(_QWORD *)(a1 + 40), v10 = *(_DWORD *)(v9 + 8), v10 >= 1)
                  ? (v11 = v10 <= (int)v8)
                  : (v11 = 1),
                    v11))
              {
                v12 = 0;
              }
              else
              {
                v12 = *(_DWORD *)(*(_QWORD *)(v9 + 24) + 4 * v8);
              }
              *(_DWORD *)(v7 + 8) = v12;
            }
            ++v6;
            v5 = *(icu::UVector **)(a1 + 24);
          }
          while (v6 < *((_DWORD *)v5 + 2));
        }
        ++v3;
      }
      while (v3 < SDWORD2(v13[0]));
    }
    icu::UVector::~UVector((icu::UVector *)v13);
  }
}

void sub_18BBF273C(uint64_t a1)
{
  UErrorCode *v1;
  UErrorCode *v3;
  signed int v4;
  uint64_t v5;
  icu::UVector *v6;
  signed int v7;
  uint64_t v8;
  uint64_t *v9;
  _OWORD v10[2];
  uint64_t v11;

  v1 = *(UErrorCode **)(a1 + 16);
  if (*(int *)v1 <= 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    icu::UVector::UVector((icu::UVector *)v10, v1);
    v3 = *(UErrorCode **)(a1 + 16);
    if (*(int *)v3 <= 0)
    {
      sub_18BBEB680(**(_QWORD **)(a1 + 8), (icu::UVector *)v10, 5, v3);
      if (**(int **)(a1 + 16) <= 0 && SDWORD2(v10[0]) >= 1)
      {
        v4 = 0;
        do
        {
          v5 = icu::UVector::elementAt((icu::UVector *)v10, v4);
          v6 = *(icu::UVector **)(a1 + 24);
          if (*((int *)v6 + 2) >= 1)
          {
            v7 = 0;
            do
            {
              v8 = icu::UVector::elementAt(v6, v7);
              if ((icu::UVector::indexOf(*(icu::UVector **)(v8 + 32), v5, 0) & 0x80000000) == 0)
                sub_18BBF2D68((icu::UVector *)a1, (icu::UVector **)(v8 + 16), *(_DWORD *)(v5 + 124), v9);
              ++v7;
              v6 = *(icu::UVector **)(a1 + 24);
            }
            while (v7 < *((_DWORD *)v6 + 2));
          }
          ++v4;
        }
        while (v4 < SDWORD2(v10[0]));
      }
    }
    icu::UVector::~UVector((icu::UVector *)v10);
  }
}

icu::UVector *sub_18BBF2858(UErrorCode **a1)
{
  icu::UVector *v2;
  icu::UVector *result;
  signed int v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  signed int i;
  int v15;
  int v16;
  icu::UVector *v17;
  signed int v18;
  icu::UVector *v19;
  int v20;

  v2 = (icu::UVector *)*((_QWORD *)*a1 + 23);
  if (!*((_DWORD *)v2 + 2))
  {
    icu::UVector::addElement(v2, 1, a1[2]);
    icu::UVector::addElement(*((icu::UVector **)*a1 + 23), 0, a1[2]);
  }
  result = (icu::UVector *)a1[3];
  if (*((int *)result + 2) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = icu::UVector::elementAt(result, v4);
      v6 = v5;
      v7 = *(int **)(v5 + 16);
      if (v7)
      {
        *(_DWORD *)(v5 + 24) = -1;
        v8 = (int *)*((_QWORD *)*a1 + 23);
        if (v8[2] < 1)
          goto LABEL_21;
        v9 = 0;
        while (1)
        {
          v10 = icu::UVector::elementAti((icu::UVector *)v8, v9);
          v11 = v9 + 1;
          v12 = v7[2];
          if (v12 == icu::UVector::elementAti(*((icu::UVector **)*a1 + 23), v9))
          {
            v13 = v7[2];
            if (v13 < 1)
            {
              i = 0;
            }
            else
            {
              for (i = 0; i < v13; ++i)
              {
                v15 = icu::UVector::elementAti((icu::UVector *)v7, i);
                v16 = icu::UVector::elementAti(*((icu::UVector **)*a1 + 23), v11 + i);
                v13 = v7[2];
                if (v15 != v16)
                  break;
              }
            }
            if (i == v13)
              break;
          }
          v9 = v11 + v10;
          v8 = (int *)*((_QWORD *)*a1 + 23);
          if ((int)(v11 + v10) >= v8[2])
          {
            v9 = *(_DWORD *)(v6 + 24);
            goto LABEL_20;
          }
        }
        *(_DWORD *)(v6 + 24) = v9;
LABEL_20:
        if (v9 == -1)
        {
LABEL_21:
          v17 = (icu::UVector *)*((_QWORD *)*a1 + 23);
          *(_DWORD *)(v6 + 24) = *((_DWORD *)v17 + 2);
          icu::UVector::addElement(v17, v7[2], a1[2]);
          if (v7[2] >= 1)
          {
            v18 = 0;
            do
            {
              v19 = (icu::UVector *)*((_QWORD *)*a1 + 23);
              v20 = icu::UVector::elementAti((icu::UVector *)v7, v18);
              icu::UVector::addElement(v19, v20, a1[2]);
              ++v18;
            }
            while (v18 < v7[2]);
          }
        }
      }
      else
      {
        *(_DWORD *)(v5 + 24) = 0;
      }
      ++v4;
      result = (icu::UVector *)a1[3];
    }
    while (v4 < *((_DWORD *)result + 2));
  }
  return result;
}

void sub_18BBF2A38(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  unsigned int v12;
  void **v13;
  void **v14;
  void *v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  void *v23;
  unsigned int v24;
  void *v25;
  int v26;
  void **v27;
  _OWORD v28[8];
  uint64_t v29;
  void *v30;
  _DWORD v31[32];
  uint64_t v32;

  v6 = a2[2];
  v7 = a3[2];
  memset(v31, 0, sizeof(v31));
  v32 = 0;
  v8 = (void **)&v31[2];
  v29 = 0;
  v30 = &v31[2];
  v31[0] = 16;
  memset(v28, 0, sizeof(v28));
  v27 = (void **)v28 + 1;
  if ((int)v6 >= 17)
  {
    v9 = (void **)uprv_malloc(8 * v6);
    if (!v9)
      goto LABEL_36;
    v8 = v9;
    if (LOBYTE(v31[1]))
      uprv_free(v30);
    v30 = v8;
    v31[0] = v6;
    LOBYTE(v31[1]) = 1;
  }
  if ((int)v7 <= 16)
  {
    v11 = (void **)v28 + 1;
  }
  else
  {
    v10 = (void **)uprv_malloc(8 * v7);
    if (!v10)
      goto LABEL_36;
    v11 = v10;
    if (BYTE4(v28[0]))
      uprv_free((char *)v28 + 8);
    v27 = v11;
    BYTE4(v28[0]) = 1;
  }
  icu::UVector::toArray((icu::UVector *)a2, v8);
  icu::UVector::toArray((icu::UVector *)a3, v11);
  icu::UVector::setSize((uint64_t (**)(void))a2, v7 + v6, *(UErrorCode **)(a1 + 16));
  if (**(int **)(a1 + 16) <= 0)
  {
    v12 = 0;
    v13 = &v8[(int)v6];
    v14 = &v11[(int)v7];
    if ((int)v7 >= 1 && (int)v6 >= 1)
    {
      v12 = 0;
      do
      {
        v15 = *v8;
        v16 = *v11;
        if (*v8 == *v11)
        {
          ++v11;
          icu::UVector::setElementAt((uint64_t)a2, v15, v12);
          ++v8;
        }
        else
        {
          v17 = bswap64((unint64_t)*v8);
          v18 = bswap64((unint64_t)*v11);
          v19 = v17 >= v18;
          v20 = v17 > v18;
          v21 = !v19;
          if (v20 - v21 < 0)
          {
            ++v8;
            v22 = (uint64_t)a2;
          }
          else
          {
            ++v11;
            v22 = (uint64_t)a2;
            v15 = v16;
          }
          icu::UVector::setElementAt(v22, v15, v12);
        }
        ++v12;
      }
      while (v11 < v14 && v8 < v13);
    }
    if (v8 >= v13)
    {
      v24 = v12;
    }
    else
    {
      do
      {
        v23 = *v8++;
        v24 = v12 + 1;
        icu::UVector::setElementAt((uint64_t)a2, v23, v12++);
      }
      while (v8 < v13);
    }
    if (v11 >= v14)
    {
      v26 = v24;
    }
    else
    {
      do
      {
        v25 = *v11++;
        v26 = v24 + 1;
        icu::UVector::setElementAt((uint64_t)a2, v25, v24++);
      }
      while (v11 < v14);
    }
    icu::UVector::setSize((uint64_t (**)(void))a2, v26, *(UErrorCode **)(a1 + 16));
  }
LABEL_36:
  if (BYTE4(v28[0]))
    uprv_free(v27);
  if (LOBYTE(v31[1]))
    uprv_free(v30);
}

uint64_t sub_18BBF2CEC(uint64_t result, icu::UVector *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  UErrorCode *v6;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v6 = *(UErrorCode **)(v5 + 16);
      if (*(int *)v6 > 0)
        break;
      if (*(_BYTE *)(v3 + 129))
        return icu::UVector::addElement(a2, (void *)v3, v6);
      result = sub_18BBF2CEC(v5, a2, *(_QWORD *)(v3 + 16));
      v3 = *(_QWORD *)(v3 + 24);
    }
    while (v3);
  }
  return result;
}

icu::UVector *sub_18BBF2D68@<X0>(icu::UVector *result@<X0>, icu::UVector **a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  icu::UVector *v5;
  icu::UVector *v6;
  UErrorCode *v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = result;
  v6 = *a2;
  if (!*a2)
  {
    result = (icu::UVector *)icu::UMemory::operator new(a4, (icu::UMemory *)0x28, (unint64_t)a2);
    if (!result)
    {
      *a2 = 0;
      return result;
    }
    v6 = result;
    result = icu::UVector::UVector(result, *((UErrorCode **)v5 + 2));
    *a2 = result;
  }
  v8 = (UErrorCode *)*((_QWORD *)v5 + 2);
  if (*(int *)v8 <= 0)
  {
    v9 = *((_DWORD *)v6 + 2);
    if (v9 < 1)
    {
      v10 = 0;
    }
    else
    {
      v10 = 0;
      while (1)
      {
        result = (icu::UVector *)icu::UVector::elementAti(v6, v10);
        v11 = 2 * ((int)result > a3);
        if ((_DWORD)result == a3)
          v11 = 1;
        if (v11)
          break;
        if (v9 == ++v10)
        {
          v10 = v9;
          goto LABEL_14;
        }
      }
      if (v11 != 2)
        return result;
LABEL_14:
      v8 = (UErrorCode *)*((_QWORD *)v5 + 2);
    }
    return (icu::UVector *)icu::UVector::insertElementAt(v6, a3, v10, v8);
  }
  return result;
}

uint64_t sub_18BBF2E50(icu::UVector **a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  __int16 v20;
  uint64_t result;

  v4 = *((_DWORD *)a1[3] + 2);
  v5 = sub_18BBF0418(*((_QWORD *)*a1 + 20));
  v6 = v5 - 1;
  v7 = *a2;
  if (*a2 >= v5 - 1)
    return 0;
  v8 = v5;
  do
  {
    v9 = v8;
    if (v7 < (int)sub_18BBF0438(*((_QWORD *)*a1 + 20)))
      v9 = sub_18BBF0438(*((_QWORD *)*a1 + 20));
    LODWORD(v10) = *a2;
    LODWORD(v11) = *a2;
    while (1)
    {
      LODWORD(v11) = v11 + 1;
      a2[1] = v11;
      if ((int)v11 >= v9)
        break;
      if (v4 < 1)
      {
        v20 = 1;
      }
      else
      {
        v12 = 1;
        do
        {
          v13 = *(_QWORD *)(icu::UVector::elementAt(a1[3], v12 - 1) + 40);
          v10 = *a2;
          if ((v10 & 0x80000000) != 0
            || ((v14 = *(_DWORD *)(v13 + 8), v14 >= 1) ? (v15 = v14 <= (int)v10) : (v15 = 1), v15))
          {
            LOWORD(v16) = 0;
          }
          else
          {
            v16 = *(_DWORD *)(*(_QWORD *)(v13 + 24) + 4 * v10);
          }
          v11 = a2[1];
          if ((v11 & 0x80000000) != 0
            || ((v17 = *(_DWORD *)(v13 + 8), v17 >= 1) ? (v18 = v17 <= (int)v11) : (v18 = 1), v18))
          {
            LOWORD(v19) = 0;
          }
          else
          {
            v19 = *(_DWORD *)(*(_QWORD *)(v13 + 24) + 4 * v11);
          }
          v20 = v19 ^ v16;
          if (v20)
            break;
          v15 = v12++ < v4;
        }
        while (v15);
      }
      if (!v20)
        return 1;
    }
    result = 0;
    v7 = v10 + 1;
    *a2 = v10 + 1;
  }
  while ((int)v10 + 1 < v6);
  return result;
}

uint64_t sub_18BBF2FB0(uint64_t result, int a2)
{
  int v2;
  uint64_t v4;
  unsigned int i;
  uint64_t v6;

  v2 = *(_DWORD *)(*(_QWORD *)(result + 24) + 8);
  if (v2 >= 1)
  {
    v4 = result;
    for (i = 0; i != v2; ++i)
    {
      v6 = icu::UVector::elementAt(*(icu::UVector **)(v4 + 24), i);
      result = icu::UVector32::removeElementAt(*(_QWORD *)(v6 + 40), a2);
    }
  }
  return result;
}

uint64_t sub_18BBF3010(icu::UVector **a1, signed int *a2)
{
  signed int v4;
  unsigned int v5;
  signed int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;

  v4 = *((_DWORD *)a1[3] + 2);
  v5 = sub_18BBF0418(*((_QWORD *)*a1 + 20));
  v6 = *a2;
  if (*a2 >= v4 - 1)
    return 0;
  v7 = v5;
  v8 = v5;
  while (1)
  {
    v9 = icu::UVector::elementAt(a1[3], v6);
    v6 = *a2 + 1;
    a2[1] = v6;
    if (v6 < v4)
      break;
LABEL_25:
    *a2 = v6;
    if (v6 >= v4 - 1)
      return 0;
  }
  v10 = v9;
  while (1)
  {
    v11 = icu::UVector::elementAt(a1[3], v6);
    if (*(_DWORD *)(v10 + 4) == *(_DWORD *)(v11 + 4)
      && *(_DWORD *)(v10 + 8) == *(_DWORD *)(v11 + 8)
      && *(_DWORD *)(v10 + 24) == *(_DWORD *)(v11 + 24))
    {
      break;
    }
LABEL_23:
    v6 = a2[1] + 1;
    a2[1] = v6;
    if (v6 >= v4)
    {
      v6 = *a2 + 1;
      goto LABEL_25;
    }
  }
  if (v7 >= 1)
  {
    v12 = 0;
    v13 = *(_QWORD *)(v10 + 40);
    v14 = *(int *)(v13 + 8);
    v15 = *(_QWORD *)(v11 + 40);
    v16 = *(int *)(v15 + 8);
    while (1)
    {
      v17 = 0;
      if ((int)v14 >= 1 && v12 < v14)
        v17 = *(_DWORD *)(*(_QWORD *)(v13 + 24) + 4 * v12);
      v18 = 0;
      if ((int)v16 >= 1 && v12 < v16)
        v18 = *(_DWORD *)(*(_QWORD *)(v15 + 24) + 4 * v12);
      if (v17 != v18 && (v17 != *a2 && v17 != a2[1] || v18 != *a2 && v18 != a2[1]))
        break;
      if (v8 == ++v12)
        return 1;
    }
    goto LABEL_23;
  }
  return 1;
}

uint64_t sub_18BBF3198(uint64_t a1, signed int *a2)
{
  signed int v3;
  signed int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  signed int v20;
  signed int v21;
  uint64_t result;

  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *a2;
  if (v4 >= v3 - 1)
    return 0;
  while (1)
  {
    v6 = icu::UVector::elementAt(*(icu::UVector **)(a1 + 32), v4);
    v4 = *a2 + 1;
    a2[1] = v4;
    if (v4 < v3)
      break;
LABEL_32:
    result = 0;
    *a2 = v4;
    if (v4 >= v3 - 1)
      return result;
  }
  v7 = v6;
  v8 = v6 + 10;
  while (1)
  {
    v9 = icu::UVector::elementAt(*(icu::UVector **)(a1 + 32), v4);
    v10 = *(unsigned __int16 *)(v7 + 8);
    v11 = (v10 & 0x8000) != 0 ? *(_DWORD *)(v7 + 12) : v10 >> 5;
    if (v11 < 1)
      return 1;
    v12 = 0;
    v13 = *(unsigned __int16 *)(v9 + 8);
    while (1)
    {
      v14 = v10 >> 5;
      if ((v10 & 0x8000) != 0)
        v14 = *(_DWORD *)(v7 + 12);
      if (v12 >= v14)
      {
        v16 = 0xFFFF;
      }
      else
      {
        v15 = v8;
        if ((v10 & 2) == 0)
          v15 = *(_QWORD *)(v7 + 24);
        v16 = *(unsigned __int16 *)(v15 + 2 * v12);
      }
      v17 = v13 >> 5;
      if ((v13 & 0x8000) != 0)
        v17 = *(_DWORD *)(v9 + 12);
      if (v12 >= v17)
      {
        v19 = 0xFFFF;
      }
      else
      {
        v18 = v9 + 10;
        if ((v13 & 2) == 0)
          v18 = *(_QWORD *)(v9 + 24);
        v19 = *(unsigned __int16 *)(v18 + 2 * v12);
      }
      if (v16 != v19)
      {
        v20 = *a2;
        if (*a2 != v16)
        {
          v21 = a2[1];
          if (v21 != v16)
            break;
        }
        if (v20 != v19)
        {
          v21 = a2[1];
          if (v21 != v19)
            break;
        }
      }
      if (v11 == ++v12)
        return 1;
    }
    v4 = v21 + 1;
    a2[1] = v4;
    if (v4 >= v3)
    {
      v4 = v20 + 1;
      goto LABEL_32;
    }
  }
}

uint64_t sub_18BBF3310(icu::UVector **a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t result;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  int v18;

  v2 = a2;
  v4 = HIDWORD(a2);
  v5 = (_QWORD *)icu::UVector::elementAt(a1[3], HIDWORD(a2));
  icu::UVector::removeElementAt((uint64_t (**)(void))a1[3], v4);
  if (v5)
  {
    v6 = sub_18BBF3EBC(v5);
    icu::UMemory::operator delete(v6);
  }
  v7 = *((_DWORD *)a1[3] + 2);
  result = sub_18BBF0418(*((_QWORD *)*a1 + 20));
  if (v7 >= 1)
  {
    v9 = result;
    v10 = 0;
    v11 = result;
    do
    {
      result = icu::UVector::elementAt(a1[3], v10);
      if (v9 >= 1)
      {
        v12 = result;
        v13 = 0;
        do
        {
          v14 = *(_QWORD *)(v12 + 40);
          v15 = *(int *)(v14 + 8);
          if ((int)v15 >= 1 && v13 < v15)
            v17 = *(_DWORD *)(*(_QWORD *)(v14 + 24) + 4 * v13);
          else
            v17 = 0;
          if (v17 == (_DWORD)v4)
            v18 = v2;
          else
            v18 = v17 - (v17 > (int)v4);
          result = icu::UVector32::setElementAt(v14, v18, v13++);
        }
        while (v11 != v13);
      }
      ++v10;
    }
    while (v10 != v7);
  }
  return result;
}

uint64_t sub_18BBF341C(uint64_t a1, unint64_t a2)
{
  __int16 v2;
  unint64_t v4;
  uint64_t result;
  int v6;
  unsigned int i;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  __int16 v17;

  v2 = a2;
  v4 = HIDWORD(a2);
  result = icu::UVector::removeElementAt(*(uint64_t (***)(void))(a1 + 32), SHIDWORD(a2));
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      result = icu::UVector::elementAt(*(icu::UVector **)(a1 + 32), i);
      v8 = result;
      v9 = *(unsigned __int16 *)(result + 8);
      if ((v9 & 0x8000) != 0)
        v10 = *(_DWORD *)(result + 12);
      else
        v10 = v9 >> 5;
      if (v10 >= 1)
      {
        v11 = 0;
        v12 = v10;
        do
        {
          v13 = *(unsigned __int16 *)(v8 + 8);
          if (*(__int16 *)(v8 + 8) < 0)
            v14 = *(_DWORD *)(v8 + 12);
          else
            v14 = v13 >> 5;
          if (v11 >= v14)
          {
            v16 = 0xFFFF;
          }
          else
          {
            v15 = v8 + 10;
            if ((v13 & 2) == 0)
              v15 = *(_QWORD *)(v8 + 24);
            v16 = *(unsigned __int16 *)(v15 + 2 * v11);
          }
          if (v16 == (_DWORD)v4)
            v17 = v2;
          else
            v17 = v16 - (v16 > (int)v4);
          result = (uint64_t)icu::UnicodeString::setCharAt((icu::UnicodeString *)v8, v11++, v17);
        }
        while (v12 != v11);
      }
    }
  }
  return result;
}

uint64_t sub_18BBF352C(icu::UVector **a1)
{
  uint64_t v2;
  unint64_t v4;

  v4 = 3;
  v2 = 0;
  if (sub_18BBF3010(a1, (signed int *)&v4))
  {
    do
    {
      sub_18BBF3310(a1, v4);
      v2 = (v2 + 1);
    }
    while ((sub_18BBF3010(a1, (signed int *)&v4) & 1) != 0);
  }
  return v2;
}

uint64_t sub_18BBF358C(uint64_t a1)
{
  int v2;
  int v3;
  int v4;

  if (!**(_QWORD **)(a1 + 8))
    return 0;
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v3 = sub_18BBF0418(*(_QWORD *)(*(_QWORD *)a1 + 160));
  if (*(int *)(*(_QWORD *)(a1 + 24) + 8) >= 256)
    v4 = 2 * v3 + 6;
  else
    v4 = v3 + 3;
  return (v4 * v2 + 20);
}

uint64_t sub_18BBF35F4(uint64_t result, int *a2)
{
  uint64_t v2;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v27;

  if (**(int **)(result + 16) <= 0)
  {
    v2 = result;
    if (**(_QWORD **)(result + 8))
    {
      result = sub_18BBF0418(*(_QWORD *)(*(_QWORD *)result + 160));
      if ((int)result < 0x8000 && (v4 = *(_DWORD *)(*(_QWORD *)(v2 + 24) + 8), v4 < 0x8000))
      {
        v5 = result;
        *a2 = v4;
        v6 = sub_18BBF0438(*(_QWORD *)(*(_QWORD *)v2 + 160));
        v7 = *(_DWORD *)(v2 + 48);
        if (v7 == 1)
          v8 = 0;
        else
          v8 = v7 + 1;
        a2[2] = v6;
        a2[3] = v8;
        a2[4] = 0;
        if (*(int *)(*(_QWORD *)(v2 + 24) + 8) > 255)
        {
          v9 = 2 * v5 + 6;
          v10 = 1;
        }
        else
        {
          v9 = v5 + 3;
          a2[4] = 4;
          v10 = 5;
        }
        a2[1] = v9;
        v11 = *(_QWORD *)v2;
        if (*(_BYTE *)(*(_QWORD *)v2 + 153))
          a2[4] = v10;
        result = sub_18BBF0440(*(_QWORD *)(v11 + 160));
        if ((_DWORD)result)
          a2[4] |= 2u;
        if (*a2)
        {
          v12 = 0;
          do
          {
            result = icu::UVector::elementAt(*(icu::UVector **)(v2 + 24), v12);
            v13 = a2[1] * v12;
            v14 = (char *)a2 + v13 + 20;
            v15 = *(_DWORD *)(result + 4);
            if (*(int *)(*(_QWORD *)(v2 + 24) + 8) > 255)
            {
              *(_WORD *)v14 = v15;
              *((_WORD *)v14 + 1) = *(_DWORD *)(result + 8);
              *((_WORD *)v14 + 2) = *(_DWORD *)(result + 24);
              if (v5 >= 1)
              {
                v22 = 0;
                v23 = (char *)a2 + v13 + 26;
                do
                {
                  v24 = *(_QWORD *)(result + 40);
                  v25 = *(int *)(v24 + 8);
                  if ((int)v25 >= 1 && v22 < v25)
                    v27 = *(_DWORD *)(*(_QWORD *)(v24 + 24) + 4 * v22);
                  else
                    LOWORD(v27) = 0;
                  *(_WORD *)&v23[2 * v22++] = v27;
                }
                while (v5 != v22);
              }
            }
            else
            {
              *v14 = v15;
              v14[1] = *(_DWORD *)(result + 8);
              v14[2] = *(_DWORD *)(result + 24);
              if (v5 >= 1)
              {
                v16 = 0;
                v17 = (char *)a2 + v13 + 23;
                do
                {
                  v18 = *(_QWORD *)(result + 40);
                  v19 = *(int *)(v18 + 8);
                  if ((int)v19 >= 1 && v16 < v19)
                    v21 = *(_DWORD *)(*(_QWORD *)(v18 + 24) + 4 * v16);
                  else
                    LOBYTE(v21) = 0;
                  v17[v16++] = v21;
                }
                while (v5 != v16);
              }
            }
            ++v12;
          }
          while (v12 < *a2);
        }
      }
      else
      {
        **(_DWORD **)(v2 + 16) = 66048;
      }
    }
  }
  return result;
}

void *sub_18BBF3810(icu::UVector **a1, UErrorCode *a2)
{
  unint64_t v4;
  icu::UVector *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t i;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  icu::UnicodeString *v23;
  icu::UnicodeString *v24;
  uint64_t v25;
  icu::UnicodeString *v26;
  int j;
  unsigned int k;
  UChar **v29;
  unint64_t m;
  unint64_t v31;
  char *v32;
  int v33;
  unint64_t v34;
  char *v35;
  int v36;
  icu::UnicodeString *v37;
  unint64_t v39;
  void (**v40)(icu::UnicodeString *__hidden);
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v41 = 0u;
  v42 = 0u;
  v44 = 0;
  v43 = 0u;
  v40 = off_1E2256B38;
  LOWORD(v41) = 2;
  v6 = sub_18BBF0418(*((_QWORD *)*a1 + 20));
  if (v6 >= 1)
  {
    v7 = 0;
    v5 = a1[3];
    v8 = *((_DWORD *)v5 + 2);
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (v8 >= 2)
        {
          v10 = 1;
          v11 = 0xFFFFFFFFLL;
          do
          {
            v12 = *(_QWORD *)(icu::UVector::elementAt(a1[3], v10) + 40);
            if (v7 >= *(int *)(v12 + 8))
              v13 = 0;
            else
              v13 = *(_DWORD *)(*(_QWORD *)(v12 + 24) + 4 * v7);
            v14 = *(_QWORD *)(icu::UVector::elementAt(a1[3], v13) + 40);
            if (i >= *(int *)(v14 + 8))
              v5 = 0;
            else
              v5 = (icu::UVector *)*(unsigned int *)(*(_QWORD *)(v14 + 24) + 4 * i);
            v15 = (uint64_t)v5;
            if ((v11 & 0x80000000) == 0)
            {
              v15 = v11;
              if ((_DWORD)v11 != (_DWORD)v5)
                break;
            }
            ++v10;
            v11 = v15;
          }
          while (v8 != v10);
          if ((_DWORD)v11 == (_DWORD)v5)
          {
            LOWORD(v39) = v7;
            icu::UnicodeString::doAppend((uint64_t)&v40, (uint64_t)&v39, 0, 1);
            LOWORD(v39) = i;
            icu::UnicodeString::doAppend((uint64_t)&v40, (uint64_t)&v39, 0, 1);
          }
        }
      }
      ++v7;
    }
    while (v7 != v6);
  }
  v16 = icu::UMemory::operator new((uint64_t *)v5, (icu::UMemory *)0x28, v4);
  if (v16)
  {
    v17 = v6 + 2;
    v18 = icu::UVector::UVector(v16, uprv_deleteUObject, uhash_compareUnicodeString, (v6 + 2), a2);
    v20 = (uint64_t *)*(unsigned int *)a2;
    if ((int)v20 > 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      return icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v40);
    }
    a1[4] = (icu::UVector *)v18;
    if (v6 >= -1)
    {
      if (v17 <= 1)
        v22 = 1;
      else
        v22 = v6 + 2;
      do
      {
        v23 = (icu::UnicodeString *)icu::UMemory::operator new(v20, (icu::UMemory *)0x40, v19);
        v24 = v23;
        if (v23)
        {
          icu::UnicodeString::UnicodeString(v23, v6, 0, v6 + 4);
        }
        else if (*(int *)a2 <= 0)
        {
          *a2 = U_MEMORY_ALLOCATION_ERROR;
        }
        icu::UVector::adoptElement(a1[4], v24, a2);
        --v22;
      }
      while (v22);
    }
    v21 = *(unsigned int *)a2;
    if ((int)v21 < 1)
    {
      v25 = icu::UVector::elementAt(a1[4], 1u);
      if (v6 >= 1)
      {
        v26 = (icu::UnicodeString *)v25;
        for (j = 0; j != v6; ++j)
          icu::UnicodeString::setCharAt(v26, j, j + 2);
        if (v17 <= 3)
          v17 = 3;
        for (k = 2; k != v17; ++k)
        {
          v29 = (UChar **)icu::UVector::elementAt(a1[4], k);
          icu::UnicodeString::operator=(v29, (UChar **)v26);
        }
      }
      for (m = 0; ; m += 2)
      {
        if ((__int16)v41 < 0)
        {
          if ((uint64_t)m >= SDWORD1(v41))
          {
LABEL_62:
            v39 = 1;
            if (sub_18BBF3198((uint64_t)a1, (signed int *)&v39))
            {
              do
                sub_18BBF341C((uint64_t)a1, v39);
              while ((sub_18BBF3198((uint64_t)a1, (signed int *)&v39) & 1) != 0);
            }
            return icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v40);
          }
          v31 = DWORD1(v41);
        }
        else
        {
          if (m >= (unint64_t)(unsigned __int16)v41 >> 5)
            goto LABEL_62;
          v31 = (unint64_t)(unsigned __int16)v41 >> 5;
        }
        if (v31 <= m)
        {
          v33 = 0xFFFF;
        }
        else
        {
          v32 = (char *)v42;
          if ((v41 & 2) != 0)
            v32 = (char *)&v41 + 2;
          v33 = *(unsigned __int16 *)&v32[2 * m];
        }
        if ((v41 & 0x8000u) == 0)
          v34 = (unsigned __int16)v41 >> 5;
        else
          v34 = DWORD1(v41);
        if (m + 1 >= v34)
        {
          v36 = 0xFFFF;
        }
        else
        {
          if ((v41 & 2) != 0)
            v35 = (char *)&v41 + 2;
          else
            v35 = (char *)v42;
          v36 = *(unsigned __int16 *)&v35[2 * m + 2];
        }
        v37 = (icu::UnicodeString *)icu::UVector::elementAt(a1[4], v36 + 2);
        icu::UnicodeString::setCharAt(v37, v33, 0);
      }
    }
  }
  else
  {
    v21 = *(unsigned int *)a2;
    if ((int)v21 <= 0)
    {
      v21 = 7;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v40);
}

uint64_t sub_18BBF3BF0(_QWORD *a1)
{
  uint64_t v1;
  int v3;
  int v4;
  int v5;

  v1 = a1[4];
  if (!v1)
    return 0;
  v3 = *(_DWORD *)(v1 + 8);
  v4 = sub_18BBF0418(*(_QWORD *)(*a1 + 160));
  if (*(int *)(a1[4] + 8) >= 256)
    v5 = 2 * v4 + 6;
  else
    v5 = v4 + 3;
  return (v5 * v3 + 20);
}

uint64_t sub_18BBF3C50(uint64_t result, int *a2)
{
  uint64_t v2;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;
  char *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  __int16 v20;

  if (**(int **)(result + 16) <= 0)
  {
    v2 = result;
    if (*(_QWORD *)(result + 32))
    {
      result = sub_18BBF0418(*(_QWORD *)(*(_QWORD *)result + 160));
      if ((int)result >= 0x8000 || (v4 = *(_DWORD *)(*(_QWORD *)(v2 + 32) + 8), v4 >= 0x8000))
      {
        **(_DWORD **)(v2 + 16) = 66048;
        return result;
      }
      v5 = result;
      *a2 = v4;
      a2[4] = 0;
      if (v4 >= 256)
      {
        a2[1] = 2 * result + 6;
      }
      else
      {
        a2[4] = 4;
        a2[1] = result + 3;
        if (!v4)
          return result;
      }
      v6 = 0;
      do
      {
        result = icu::UVector::elementAt(*(icu::UVector **)(v2 + 32), v6);
        v7 = a2[1] * v6;
        v8 = (char *)a2 + v7 + 20;
        if (*(int *)(*(_QWORD *)(v2 + 32) + 8) > 255)
        {
          *(_DWORD *)v8 = 0;
          *((_WORD *)v8 + 2) = 0;
          if (v5 >= 1)
          {
            v15 = 0;
            v16 = (char *)a2 + v7 + 26;
            do
            {
              v17 = *(unsigned __int16 *)(result + 8);
              if (*(__int16 *)(result + 8) < 0)
                v18 = *(_DWORD *)(result + 12);
              else
                v18 = v17 >> 5;
              if (v15 >= v18)
              {
                v20 = -1;
              }
              else
              {
                v19 = result + 10;
                if ((v17 & 2) == 0)
                  v19 = *(_QWORD *)(result + 24);
                v20 = *(_WORD *)(v19 + 2 * v15);
              }
              *(_WORD *)&v16[2 * v15++] = v20;
            }
            while (v5 != v15);
          }
        }
        else
        {
          *(_WORD *)v8 = 0;
          v8[2] = 0;
          if (v5 >= 1)
          {
            v9 = 0;
            v10 = (char *)a2 + v7 + 23;
            do
            {
              v11 = *(unsigned __int16 *)(result + 8);
              if (*(__int16 *)(result + 8) < 0)
                v12 = *(_DWORD *)(result + 12);
              else
                v12 = v11 >> 5;
              if (v9 >= v12)
              {
                LOBYTE(v14) = -1;
              }
              else
              {
                v13 = result + 10;
                if ((v11 & 2) == 0)
                  v13 = *(_QWORD *)(result + 24);
                v14 = *(_WORD *)(v13 + 2 * v9);
              }
              v10[v9++] = v14;
            }
            while (v5 != v9);
          }
        }
        ++v6;
      }
      while (v6 < *a2);
    }
  }
  return result;
}

uint64_t sub_18BBF3E28@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, UErrorCode *a3@<X2>, uint64_t *a4@<X8>)
{
  int v5;
  icu::UVector32 *v7;
  int v8;
  icu::UVector32 *v9;

  v5 = a2;
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v7 = (icu::UVector32 *)icu::UMemory::operator new(a4, (icu::UMemory *)0x20, a2);
  if (v7)
  {
    v8 = v5 + 1;
    v9 = icu::UVector32::UVector32(v7, v8, a3);
    *(_QWORD *)(a1 + 40) = v9;
    if (*(int *)a3 < 1)
      icu::UVector32::setSize(v9, v8);
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 0;
    if (*(int *)a3 <= 0)
      *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return a1;
}

_QWORD *sub_18BBF3EBC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1 + 4;
  v2 = a1[4];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = a1[5];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[2];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  a1[2] = 0;
  *v3 = 0;
  v3[1] = 0;
  return a1;
}

unint64_t *sub_18BBF3F24(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v4;
  icu::UVector *v5;
  UErrorCode *v6;
  UErrorCode v7;
  UErrorCode v10;

  *a1 = a2;
  a1[1] = a3;
  v4 = *(uint64_t **)(a2 + 16);
  a1[2] = (unint64_t)v4;
  v10 = U_ZERO_ERROR;
  v5 = (icu::UVector *)icu::UMemory::operator new(v4, (icu::UMemory *)0x28, a2);
  if (v5)
    v5 = icu::UVector::UVector(v5, &v10);
  a1[3] = (unint64_t)v5;
  v6 = (UErrorCode *)a1[2];
  if (*(int *)v6 <= 0)
  {
    v7 = v10;
    if (v10 > U_ZERO_ERROR || v5 == 0)
    {
      if (v10 <= U_ZERO_ERROR)
        v7 = U_MEMORY_ALLOCATION_ERROR;
      *v6 = v7;
    }
  }
  return a1;
}

uint64_t sub_18BBF3FA8(uint64_t a1)
{
  icu::UVector *v2;
  signed int v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(icu::UVector **)(a1 + 24);
  if (*((int *)v2 + 2) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = (_QWORD *)icu::UVector::elementAt(v2, v3);
      if (v4)
      {
        v5 = sub_18BBF1754(v4);
        icu::UMemory::operator delete(v5);
      }
      ++v3;
      v2 = *(icu::UVector **)(a1 + 24);
    }
    while (v3 < *((_DWORD *)v2 + 2));
  }
  (*(void (**)(icu::UVector *))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_18BBF4014(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  UErrorCode *v20;
  void *v21;

  if (**(int **)(a1 + 16) > 0)
    return;
  v3 = **(_QWORD **)(a1 + 8);
  if (!v3)
    return;
  **(_QWORD **)(a1 + 8) = sub_18BBEB570(v3, a2);
  if (sub_18BBF0CD4(*(_QWORD *)(*(_QWORD *)a1 + 96)))
  {
    v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0xA0, v4);
    v9 = v6;
    if (v6)
      sub_18BBEB354(v6, 8);
    v10 = icu::UMemory::operator new(v8, (icu::UMemory *)0xA0, v7);
    if (!v10)
    {
      **(_DWORD **)(a1 + 16) = 7;
      if (!v9)
        return;
      goto LABEL_22;
    }
    v11 = sub_18BBEB354(v10, 3);
    if (!v9)
    {
      **(_DWORD **)(a1 + 16) = 7;
LABEL_23:
      v21 = (void *)sub_18BBEB4E4(v11);
      icu::UMemory::operator delete(v21);
      return;
    }
    v9[2] = v11;
    v5 = *(uint64_t **)(a1 + 8);
    v9[3] = *v5;
    *(_QWORD *)(v11 + 8) = v9;
    *(_DWORD *)(v11 + 124) = 2;
    *v5 = (uint64_t)v9;
  }
  v12 = icu::UMemory::operator new(v5, (icu::UMemory *)0xA0, v4);
  if (!v12)
  {
    **(_DWORD **)(a1 + 16) = 7;
    return;
  }
  v9 = v12;
  v13 = sub_18BBEB354(v12, 8);
  v14 = *(uint64_t ***)(a1 + 8);
  *(_QWORD *)(v13 + 16) = *v14;
  v15 = *v14;
  v15[1] = v13;
  v17 = icu::UMemory::operator new(v15, (icu::UMemory *)0xA0, v16);
  if (!v17)
  {
    v9[3] = 0;
    **(_DWORD **)(a1 + 16) = 7;
LABEL_22:
    v11 = (uint64_t)v9;
    goto LABEL_23;
  }
  v18 = sub_18BBEB354(v17, 6);
  v9[3] = v18;
  *(_QWORD *)(v18 + 8) = v9;
  **(_QWORD **)(a1 + 8) = v9;
  sub_18BBEB5EC(**(_QWORD **)(a1 + 8), v19);
  sub_18BBF4214(a1, **(int ***)(a1 + 8));
  sub_18BBF42E4(a1, **(icu::UVector ****)(a1 + 8));
  sub_18BBF43C8(a1, **(icu::UVector ****)(a1 + 8));
  sub_18BBF44A8(a1, **(int ***)(a1 + 8));
  v20 = *(UErrorCode **)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 88))
  {
    sub_18BBF4598((UErrorCode **)a1, **(_QWORD **)(a1 + 8));
    v20 = *(UErrorCode **)a1;
  }
  if (sub_18BBF0CD4(*((_QWORD *)v20 + 12)))
    sub_18BBF483C(a1);
  sub_18BBF48E0(a1);
  sub_18BBF4C5C(a1);
  sub_18BBF4DA8(a1);
  sub_18BBF273C(a1);
  sub_18BBF4EAC((UErrorCode **)a1);
}

uint64_t sub_18BBF4214(uint64_t result, int *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  if (a2)
  {
    v3 = result;
    v4 = *a2;
    if (*a2 < 7 && ((0x71u >> v4) & 1) != 0)
    {
      v5 = (0x30u >> v4) & 1;
    }
    else
    {
      sub_18BBF4214(result, *((_QWORD *)a2 + 2));
      result = sub_18BBF4214(v3, *((_QWORD *)a2 + 3));
      LOBYTE(v5) = 1;
      switch(*a2)
      {
        case 8:
          LOBYTE(v5) = *(_BYTE *)(*((_QWORD *)a2 + 2) + 120);
          if ((_BYTE)v5)
            goto LABEL_11;
          break;
        case 9:
          if (*(_BYTE *)(*((_QWORD *)a2 + 2) + 120))
            LOBYTE(v5) = 1;
          else
LABEL_11:
            LOBYTE(v5) = *(_BYTE *)(*((_QWORD *)a2 + 3) + 120) != 0;
          break;
        case 10:
        case 12:
          break;
        default:
          LOBYTE(v5) = 0;
          break;
      }
    }
    *((_BYTE *)a2 + 120) = v5;
  }
  return result;
}

void sub_18BBF42E4(uint64_t a1, icu::UVector **a2)
{
  int v4;
  unsigned int *v5;
  icu::UVector *v6;

  if (a2)
  {
    if ((*(_DWORD *)a2 - 3) <= 3)
    {
      icu::UVector::addElement(a2[17], a2, *(UErrorCode **)(a1 + 16));
      return;
    }
    sub_18BBF42E4(a1, a2[2]);
    sub_18BBF42E4(a1, a2[3]);
    v4 = *(_DWORD *)a2;
    if ((*(_DWORD *)a2 - 10) >= 3)
    {
      if (v4 == 8)
      {
        sub_18BBF508C(a1, (unsigned int *)a2[17], *((unsigned int **)a2[2] + 17));
        if (!*((_BYTE *)a2[2] + 120))
          return;
      }
      else
      {
        if (v4 != 9)
          return;
        sub_18BBF508C(a1, (unsigned int *)a2[17], *((unsigned int **)a2[2] + 17));
      }
      v5 = (unsigned int *)a2[17];
      v6 = a2[3];
    }
    else
    {
      v5 = (unsigned int *)a2[17];
      v6 = a2[2];
    }
    sub_18BBF508C(a1, v5, *((unsigned int **)v6 + 17));
  }
}

void sub_18BBF43C8(uint64_t a1, icu::UVector **a2)
{
  int v4;
  unsigned int *v5;
  icu::UVector *v6;

  if (a2)
  {
    if ((*(_DWORD *)a2 - 3) <= 3)
    {
      icu::UVector::addElement(a2[18], a2, *(UErrorCode **)(a1 + 16));
      return;
    }
    sub_18BBF43C8(a1, a2[2]);
    sub_18BBF43C8(a1, a2[3]);
    v4 = *(_DWORD *)a2;
    if ((*(_DWORD *)a2 - 10) < 3)
      goto LABEL_5;
    if (v4 != 8)
    {
      if (v4 != 9)
        return;
      sub_18BBF508C(a1, (unsigned int *)a2[18], *((unsigned int **)a2[2] + 18));
      v5 = (unsigned int *)a2[18];
      v6 = a2[3];
      goto LABEL_9;
    }
    sub_18BBF508C(a1, (unsigned int *)a2[18], *((unsigned int **)a2[3] + 18));
    if (*((_BYTE *)a2[3] + 120))
    {
LABEL_5:
      v5 = (unsigned int *)a2[18];
      v6 = a2[2];
LABEL_9:
      sub_18BBF508C(a1, v5, *((unsigned int **)v6 + 18));
    }
  }
}

void sub_18BBF44A8(uint64_t a1, int *a2)
{
  int v5;
  icu::UVector *v6;
  unsigned int v7;
  uint64_t v8;
  icu::UVector *v9;
  unsigned int v10;
  uint64_t v11;

  if (a2)
  {
    if (*a2 != 3 && *a2 != 6)
    {
      sub_18BBF44A8(a1, *((_QWORD *)a2 + 2));
      sub_18BBF44A8(a1, *((_QWORD *)a2 + 3));
      v5 = *a2;
      if (*a2 == 8)
      {
        v6 = *(icu::UVector **)(*((_QWORD *)a2 + 2) + 144);
        if (!*((_DWORD *)v6 + 2))
          return;
        v7 = 0;
        do
        {
          v8 = icu::UVector::elementAt(v6, v7);
          sub_18BBF508C(a1, *(unsigned int **)(v8 + 152), *(unsigned int **)(*((_QWORD *)a2 + 3) + 136));
          ++v7;
        }
        while (v7 < *((_DWORD *)v6 + 2));
        v5 = *a2;
      }
      if ((v5 & 0xFFFFFFFE) == 0xA)
      {
        v9 = (icu::UVector *)*((_QWORD *)a2 + 18);
        if (*((_DWORD *)v9 + 2))
        {
          v10 = 0;
          do
          {
            v11 = icu::UVector::elementAt(v9, v10);
            sub_18BBF508C(a1, *(unsigned int **)(v11 + 152), *((unsigned int **)a2 + 17));
            ++v10;
            v9 = (icu::UVector *)*((_QWORD *)a2 + 18);
          }
          while (v10 < *((_DWORD *)v9 + 2));
        }
      }
    }
  }
}

void sub_18BBF4598(UErrorCode **a1, uint64_t a2)
{
  UErrorCode *v4;
  UErrorCode *v5;
  signed int v6;
  uint64_t v7;
  signed int i;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  icu::UVector *v12;
  uint64_t v13;
  UErrorCode *v14;
  UChar32 v15;
  UChar32 v16;
  UErrorCode *v17;
  signed int v19;
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;
  _OWORD v25[2];
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;

  v28 = 0;
  memset(v27, 0, sizeof(v27));
  icu::UVector::UVector((icu::UVector *)v27, a1[2]);
  v26 = 0;
  memset(v25, 0, sizeof(v25));
  icu::UVector::UVector((icu::UVector *)v25, a1[2]);
  v4 = a1[2];
  if (*(int *)v4 <= 0)
  {
    sub_18BBEB680(a2, (icu::UVector *)v27, 6, v4);
    sub_18BBEB680(a2, (icu::UVector *)v25, 3, a1[2]);
    v5 = a1[2];
    if (*(int *)v5 <= 0)
    {
      v24 = 0;
      memset(v23, 0, sizeof(v23));
      icu::UVector::UVector((icu::UVector *)v23, v5);
      sub_18BBF2CEC((uint64_t)a1, (icu::UVector *)v23, a2);
      v22 = 0;
      memset(v21, 0, sizeof(v21));
      icu::UVector::UVector((icu::UVector *)v21, a1[2]);
      if (SDWORD2(v23[0]) >= 1)
      {
        v6 = 0;
        do
        {
          v7 = icu::UVector::elementAt((icu::UVector *)v23, v6);
          if (*(_BYTE *)(v7 + 130))
            sub_18BBF508C((uint64_t)a1, (unsigned int *)v21, *(unsigned int **)(v7 + 136));
          ++v6;
        }
        while (v6 < SDWORD2(v23[0]));
      }
      if (*(int *)a1[2] <= 0 && SDWORD2(v25[0]) >= 1)
      {
        for (i = 0; i < SDWORD2(v25[0]); ++i)
        {
          v9 = icu::UVector::elementAt((icu::UVector *)v25, i);
          if (SDWORD2(v27[0]) >= 1)
          {
            v10 = v9;
            v11 = 0;
            while (1)
            {
              v12 = *(icu::UVector **)(v10 + 152);
              v13 = icu::UVector::elementAt((icu::UVector *)v27, v11);
              if ((icu::UVector::indexOf(v12, v13, 0) & 0x80000000) == 0)
                break;
              if ((int)++v11 >= SDWORD2(v27[0]))
                goto LABEL_35;
            }
            v14 = *a1;
            if (!*((_BYTE *)*a1 + 89) && !*((_BYTE *)v14 + 91))
              goto LABEL_29;
            v15 = sub_18BBF0CDC(*((_QWORD *)v14 + 12), *(_DWORD *)(v10 + 124));
            if (v15 == -1)
              goto LABEL_29;
            v16 = v15;
            v17 = *a1;
            if (*((_BYTE *)*a1 + 89))
            {
              if (u_getIntPropertyValue(v15, UCHAR_LINE_BREAK) == 9)
                continue;
              v17 = *a1;
            }
            if (*((_BYTE *)v17 + 91))
            {
              if (u_getIntPropertyValue(v16, UCHAR_GRAPHEME_CLUSTER_BREAK) != 12 && SDWORD2(v21[0]) > 0)
              {
LABEL_30:
                v19 = 0;
                do
                {
                  v20 = icu::UVector::elementAt((icu::UVector *)v21, v19);
                  if (*(_DWORD *)v20 == 3 && *(_DWORD *)(v10 + 124) == *(_DWORD *)(v20 + 124))
                    sub_18BBF508C((uint64_t)a1, *(unsigned int **)(v10 + 152), *(unsigned int **)(v20 + 152));
                  ++v19;
                }
                while (v19 < SDWORD2(v21[0]));
              }
            }
            else
            {
LABEL_29:
              if (SDWORD2(v21[0]) >= 1)
                goto LABEL_30;
            }
          }
LABEL_35:
          ;
        }
      }
      icu::UVector::~UVector((icu::UVector *)v21);
      icu::UVector::~UVector((icu::UVector *)v23);
    }
  }
  icu::UVector::~UVector((icu::UVector *)v25);
  icu::UVector::~UVector((icu::UVector *)v27);
}

void sub_18BBF483C(uint64_t a1)
{
  uint64_t v2;
  icu::UVector *v3;
  signed int v4;
  uint64_t v5;
  uint64_t v6;

  if (**(int **)(a1 + 16) <= 0)
  {
    v2 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 16);
    v3 = *(icu::UVector **)(*(_QWORD *)(v2 + 24) + 136);
    if (*((int *)v3 + 2) >= 1)
    {
      v4 = 0;
      v5 = *(_QWORD *)(v2 + 16);
      do
      {
        v6 = icu::UVector::elementAt(v3, v4);
        if (*(_DWORD *)v6 == 3 && *(_DWORD *)(v6 + 124) == *(_DWORD *)(v5 + 124))
          sub_18BBF508C(a1, *(unsigned int **)(v5 + 152), *(unsigned int **)(v6 + 152));
        ++v4;
      }
      while (v4 < *((_DWORD *)v3 + 2));
    }
  }
}

void sub_18BBF48E0(uint64_t a1)
{
  int v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  UErrorCode *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  icu::UVector *v11;
  UErrorCode *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  UErrorCode *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  icu::UVector *v21;
  unsigned int *v22;
  UErrorCode *v23;
  _QWORD *v24;
  _QWORD *v25;
  int *v26;
  signed int i;
  _BYTE *v28;
  _BYTE *v29;
  unsigned int v30;
  int *v31;
  signed int v32;
  unsigned int *v33;
  unsigned int **v34;
  unint64_t v35;
  unsigned int **v36;
  uint64_t *v37;
  icu::UVector *v38;
  UErrorCode *v39;
  unsigned int *v40;
  uint64_t *v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  UErrorCode *v47;

  if (**(int **)(a1 + 16) > 0)
    return;
  v2 = sub_18BBF0CC8(*(_QWORD *)(*(_QWORD *)a1 + 96));
  v5 = icu::UMemory::operator new(v4, (icu::UMemory *)0x30, v3);
  v7 = *(UErrorCode **)(a1 + 16);
  if (!v5)
  {
    *v7 = U_MEMORY_ALLOCATION_ERROR;
    return;
  }
  v8 = v5;
  sub_18BBF2D64((uint64_t)v5, (v2 - 1), v7, v6);
  v11 = (icu::UVector *)icu::UMemory::operator new(v10, (icu::UMemory *)0x28, v9);
  if (!v11)
  {
    v8[4] = 0;
    **(_DWORD **)(a1 + 16) = 7;
LABEL_13:
    v24 = sub_18BBF1754(v8);
    icu::UMemory::operator delete(v24);
    return;
  }
  v8[4] = (uint64_t)icu::UVector::UVector(v11, *(UErrorCode **)(a1 + 16));
  v12 = *(UErrorCode **)(a1 + 16);
  if (*(int *)v12 > 0)
    goto LABEL_13;
  icu::UVector::addElement(*(icu::UVector **)(a1 + 24), v8, v12);
  v14 = (uint64_t *)**(unsigned int **)(a1 + 16);
  if ((int)v14 > 0)
    goto LABEL_13;
  v15 = icu::UMemory::operator new(v14, (icu::UMemory *)0x30, v13);
  v17 = *(UErrorCode **)(a1 + 16);
  if (!v15)
  {
    *v17 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_13;
  }
  v18 = v15;
  sub_18BBF2D64((uint64_t)v15, (v2 - 1), v17, v16);
  v20 = (uint64_t *)**(unsigned int **)(a1 + 16);
  if ((int)v20 > 0)
    goto LABEL_18;
  v21 = (icu::UVector *)icu::UMemory::operator new(v20, (icu::UMemory *)0x28, v19);
  v22 = (unsigned int *)v21;
  v23 = *(UErrorCode **)(a1 + 16);
  if (v21)
    icu::UVector::UVector(v21, v23);
  else
    *v23 = U_MEMORY_ALLOCATION_ERROR;
  v18[4] = (uint64_t)v22;
  if (**(int **)(a1 + 16) > 0)
    goto LABEL_18;
  sub_18BBF508C(a1, v22, *(unsigned int **)(**(_QWORD **)(a1 + 8) + 136));
  icu::UVector::addElement(*(icu::UVector **)(a1 + 24), v18, *(UErrorCode **)(a1 + 16));
  if (**(int **)(a1 + 16) > 0)
    goto LABEL_18;
  v26 = *(int **)(a1 + 24);
  if (v26[2] < 2)
    return;
  for (i = 1; ; i = 1)
  {
    while (1)
    {
      v28 = (_BYTE *)icu::UVector::elementAt((icu::UVector *)v26, i);
      if (!*v28)
        break;
      ++i;
      v26 = *(int **)(a1 + 24);
      if (i >= v26[2])
        return;
    }
    v29 = v28;
    *v28 = 1;
    if (v2 >= 2)
      break;
LABEL_47:
    v26 = *(int **)(a1 + 24);
    if (v26[2] <= 1)
      return;
  }
  v30 = 1;
  while (1)
  {
    v31 = (int *)*((_QWORD *)v29 + 4);
    if (v31[2] >= 1)
      break;
LABEL_46:
    if (++v30 == v2)
      goto LABEL_47;
  }
  v32 = 0;
  v33 = 0;
  do
  {
    v34 = (unsigned int **)icu::UVector::elementAt((icu::UVector *)v31, v32);
    if (*(_DWORD *)v34 == 3)
    {
      v36 = v34;
      v37 = (uint64_t *)*((unsigned int *)v34 + 31);
      if ((_DWORD)v37 == v30)
      {
        if (!v33)
        {
          v38 = (icu::UVector *)icu::UMemory::operator new(v37, (icu::UMemory *)0x28, v35);
          v39 = *(UErrorCode **)(a1 + 16);
          if (!v38)
            goto LABEL_49;
          v33 = (unsigned int *)v38;
          icu::UVector::UVector(v38, *(UErrorCode **)(a1 + 16));
        }
        sub_18BBF508C(a1, v33, v36[19]);
      }
    }
    ++v32;
    v31 = (int *)*((_QWORD *)v29 + 4);
  }
  while (v32 < v31[2]);
  if (!v33)
    goto LABEL_46;
  v40 = *(unsigned int **)(a1 + 24);
  v41 = (uint64_t *)v40[2];
  if ((int)v41 >= 1)
  {
    v42 = 0;
    while (1)
    {
      v43 = icu::UVector::elementAt((icu::UVector *)v40, v42);
      if (icu::UVector::equals((icu::UVector *)v33, *(const icu::UVector **)(v43 + 32)))
        break;
      ++v42;
      v40 = *(unsigned int **)(a1 + 24);
      v41 = (uint64_t *)v40[2];
      if (v42 >= (int)v41)
        goto LABEL_40;
    }
    (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
    goto LABEL_45;
  }
LABEL_40:
  v44 = icu::UMemory::operator new(v41, (icu::UMemory *)0x30, v35);
  v39 = *(UErrorCode **)(a1 + 16);
  if (!v44)
  {
LABEL_49:
    *v39 = U_MEMORY_ALLOCATION_ERROR;
LABEL_18:
    v25 = sub_18BBF1754(v18);
    icu::UMemory::operator delete(v25);
    goto LABEL_13;
  }
  v46 = v44;
  sub_18BBF2D64((uint64_t)v44, (v2 - 1), v39, v45);
  v47 = *(UErrorCode **)(a1 + 16);
  if (*(int *)v47 > 0)
    goto LABEL_18;
  v46[4] = (uint64_t)v33;
  icu::UVector::addElement(*(icu::UVector **)(a1 + 24), v46, v47);
  if (**(int **)(a1 + 16) <= 0)
  {
    v42 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 8) - 1;
LABEL_45:
    icu::UVector32::setElementAt(*((_QWORD *)v29 + 5), v42, v30);
    goto LABEL_46;
  }
}

void sub_18BBF4C5C(uint64_t a1)
{
  UErrorCode *v1;
  UErrorCode *v3;
  signed int v4;
  uint64_t v5;
  icu::UVector *v6;
  signed int v7;
  uint64_t v8;
  int v9;
  _OWORD v10[2];
  uint64_t v11;

  v1 = *(UErrorCode **)(a1 + 16);
  if (*(int *)v1 <= 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    icu::UVector::UVector((icu::UVector *)v10, v1);
    v3 = *(UErrorCode **)(a1 + 16);
    if (*(int *)v3 <= 0)
    {
      sub_18BBEB680(**(_QWORD **)(a1 + 8), (icu::UVector *)v10, 6, v3);
      if (**(int **)(a1 + 16) <= 0 && SDWORD2(v10[0]) >= 1)
      {
        v4 = 0;
        do
        {
          v5 = icu::UVector::elementAt((icu::UVector *)v10, v4);
          v6 = *(icu::UVector **)(a1 + 24);
          if (*((int *)v6 + 2) >= 1)
          {
            v7 = 0;
            do
            {
              v8 = icu::UVector::elementAt(v6, v7);
              if ((icu::UVector::indexOf(*(icu::UVector **)(v8 + 32), v5, 0) & 0x80000000) == 0)
              {
                v9 = *(_DWORD *)(v8 + 4);
                if (!v9)
                {
                  v9 = *(_DWORD *)(v5 + 124);
                  if (!v9)
                    v9 = -1;
                  *(_DWORD *)(v8 + 4) = v9;
                }
                if (v9 == -1)
                {
                  v9 = *(_DWORD *)(v5 + 124);
                  if (v9)
                    *(_DWORD *)(v8 + 4) = v9;
                  else
                    v9 = -1;
                }
                if (*(_BYTE *)(v5 + 128))
                  *(_DWORD *)(v8 + 8) = v9;
              }
              ++v7;
              v6 = *(icu::UVector **)(a1 + 24);
            }
            while (v7 < *((_DWORD *)v6 + 2));
          }
          ++v4;
        }
        while (v4 < SDWORD2(v10[0]));
      }
    }
    icu::UVector::~UVector((icu::UVector *)v10);
  }
}

void sub_18BBF4DA8(uint64_t a1)
{
  UErrorCode *v1;
  signed int v3;
  uint64_t v4;
  icu::UVector *v5;
  signed int v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  v1 = *(UErrorCode **)(a1 + 16);
  if (*(int *)v1 <= 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    icu::UVector::UVector((icu::UVector *)v8, v1);
    sub_18BBEB680(**(_QWORD **)(a1 + 8), (icu::UVector *)v8, 4, *(UErrorCode **)(a1 + 16));
    if (**(int **)(a1 + 16) <= 0 && SDWORD2(v8[0]) >= 1)
    {
      v3 = 0;
      do
      {
        v4 = icu::UVector::elementAt((icu::UVector *)v8, v3);
        v5 = *(icu::UVector **)(a1 + 24);
        if (*((int *)v5 + 2) >= 1)
        {
          v6 = 0;
          do
          {
            v7 = icu::UVector::elementAt(v5, v6);
            if ((icu::UVector::indexOf(*(icu::UVector **)(v7 + 32), v4, 0) & 0x80000000) == 0)
              *(_DWORD *)(v7 + 8) = *(_DWORD *)(v4 + 124);
            ++v6;
            v5 = *(icu::UVector **)(a1 + 24);
          }
          while (v6 < *((_DWORD *)v5 + 2));
        }
        ++v3;
      }
      while (v3 < SDWORD2(v8[0]));
    }
    icu::UVector::~UVector((icu::UVector *)v8);
  }
}

icu::UVector *sub_18BBF4EAC(UErrorCode **a1)
{
  icu::UVector *v2;
  icu::UVector *result;
  signed int v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  signed int i;
  int v15;
  int v16;
  icu::UVector *v17;
  signed int v18;
  icu::UVector *v19;
  int v20;

  v2 = (icu::UVector *)*((_QWORD *)*a1 + 18);
  if (!*((_DWORD *)v2 + 2))
  {
    icu::UVector::addElement(v2, 1, a1[2]);
    icu::UVector::addElement(*((icu::UVector **)*a1 + 18), 0, a1[2]);
  }
  result = (icu::UVector *)a1[3];
  if (*((int *)result + 2) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = icu::UVector::elementAt(result, v4);
      v6 = v5;
      v7 = *(int **)(v5 + 16);
      if (v7)
      {
        *(_DWORD *)(v5 + 24) = -1;
        v8 = (int *)*((_QWORD *)*a1 + 18);
        if (v8[2] < 1)
          goto LABEL_21;
        v9 = 0;
        while (1)
        {
          v10 = icu::UVector::elementAti((icu::UVector *)v8, v9);
          v11 = v9 + 1;
          v12 = v7[2];
          if (v12 == icu::UVector::elementAti(*((icu::UVector **)*a1 + 18), v9))
          {
            v13 = v7[2];
            if (v13 < 1)
            {
              i = 0;
            }
            else
            {
              for (i = 0; i < v13; ++i)
              {
                v15 = icu::UVector::elementAti((icu::UVector *)v7, i);
                v16 = icu::UVector::elementAti(*((icu::UVector **)*a1 + 18), v11 + i);
                v13 = v7[2];
                if (v15 != v16)
                  break;
              }
            }
            if (i == v13)
              break;
          }
          v9 = v11 + v10;
          v8 = (int *)*((_QWORD *)*a1 + 18);
          if ((int)(v11 + v10) >= v8[2])
          {
            v9 = *(_DWORD *)(v6 + 24);
            goto LABEL_20;
          }
        }
        *(_DWORD *)(v6 + 24) = v9;
LABEL_20:
        if (v9 == -1)
        {
LABEL_21:
          v17 = (icu::UVector *)*((_QWORD *)*a1 + 18);
          *(_DWORD *)(v6 + 24) = *((_DWORD *)v17 + 2);
          icu::UVector::addElement(v17, v7[2], a1[2]);
          if (v7[2] >= 1)
          {
            v18 = 0;
            do
            {
              v19 = (icu::UVector *)*((_QWORD *)*a1 + 18);
              v20 = icu::UVector::elementAti((icu::UVector *)v7, v18);
              icu::UVector::addElement(v19, v20, a1[2]);
              ++v18;
            }
            while (v18 < v7[2]);
          }
        }
      }
      else
      {
        *(_DWORD *)(v5 + 24) = 0;
      }
      ++v4;
      result = (icu::UVector *)a1[3];
    }
    while (v4 < *((_DWORD *)result + 2));
  }
  return result;
}

void sub_18BBF508C(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  unsigned int v14;
  void *v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  void *v23;
  unsigned int v24;
  void *v25;
  int v26;
  void **v27;
  _OWORD v28[8];
  uint64_t v29;
  void *v30;
  _DWORD v31[32];
  uint64_t v32;

  v6 = a2[2];
  v7 = a3[2];
  memset(v31, 0, sizeof(v31));
  v32 = 0;
  v8 = (void **)&v31[2];
  v29 = 0;
  v30 = &v31[2];
  v31[0] = 16;
  memset(v28, 0, sizeof(v28));
  v27 = (void **)v28 + 1;
  if ((int)v6 >= 17)
  {
    v9 = (void **)uprv_malloc(8 * v6);
    if (!v9)
      goto LABEL_35;
    v8 = v9;
    if (LOBYTE(v31[1]))
      uprv_free(v30);
    v30 = v8;
    v31[0] = v6;
    LOBYTE(v31[1]) = 1;
  }
  if ((int)v7 <= 16)
  {
    v11 = (void **)v28 + 1;
  }
  else
  {
    v10 = (void **)uprv_malloc(8 * v7);
    if (!v10)
      goto LABEL_35;
    v11 = v10;
    if (BYTE4(v28[0]))
      uprv_free((char *)v28 + 8);
    v27 = v11;
    BYTE4(v28[0]) = 1;
  }
  v12 = &v8[(int)v6];
  v13 = &v11[(int)v7];
  icu::UVector::toArray((icu::UVector *)a2, v8);
  icu::UVector::toArray((icu::UVector *)a3, v11);
  icu::UVector::setSize((uint64_t (**)(void))a2, v7 + v6, *(UErrorCode **)(a1 + 16));
  v14 = 0;
  if ((int)v7 >= 1 && (int)v6 >= 1)
  {
    v14 = 0;
    do
    {
      v15 = *v8;
      v16 = *v11;
      if (*v8 == *v11)
      {
        ++v11;
        icu::UVector::setElementAt((uint64_t)a2, v15, v14);
        ++v8;
      }
      else
      {
        v17 = bswap64((unint64_t)*v8);
        v18 = bswap64((unint64_t)*v11);
        v19 = v17 >= v18;
        v20 = v17 > v18;
        v21 = !v19;
        if (v20 - v21 < 0)
        {
          ++v8;
          v22 = (uint64_t)a2;
        }
        else
        {
          ++v11;
          v22 = (uint64_t)a2;
          v15 = v16;
        }
        icu::UVector::setElementAt(v22, v15, v14);
      }
      ++v14;
    }
    while (v11 < v13 && v8 < v12);
  }
  if (v8 >= v12)
  {
    v24 = v14;
  }
  else
  {
    do
    {
      v23 = *v8++;
      v24 = v14 + 1;
      icu::UVector::setElementAt((uint64_t)a2, v23, v14++);
    }
    while (v8 < v12);
  }
  if (v11 >= v13)
  {
    v26 = v24;
  }
  else
  {
    do
    {
      v25 = *v11++;
      v26 = v24 + 1;
      icu::UVector::setElementAt((uint64_t)a2, v25, v24++);
    }
    while (v11 < v13);
  }
  icu::UVector::setSize((uint64_t (**)(void))a2, v26, *(UErrorCode **)(a1 + 16));
LABEL_35:
  if (BYTE4(v28[0]))
    uprv_free(v27);
  if (LOBYTE(v31[1]))
    uprv_free(v30);
}

uint64_t sub_18BBF5330(uint64_t a1)
{
  int v1;

  if (!**(_QWORD **)(a1 + 8))
    return 0;
  v1 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 8);
  return (2 * sub_18BBF0CC8(*(_QWORD *)(*(_QWORD *)a1 + 96)) + 8) * v1 + 16;
}

uint64_t sub_18BBF5380(uint64_t result, unsigned int *a2)
{
  _QWORD *v2;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v15;

  if (**(int **)(result + 16) <= 0)
  {
    v2 = (_QWORD *)result;
    if (**(_QWORD **)(result + 8))
    {
      result = sub_18BBF0CC8(*(_QWORD *)(*(_QWORD *)result + 96));
      if ((int)result < 0x8000 && *(int *)(v2[3] + 8) < 0x8000)
      {
        v4 = sub_18BBF0CC8(*(_QWORD *)(*v2 + 96));
        *a2 = *(_DWORD *)(v2[3] + 8);
        a2[1] = 2 * v4 + 8;
        a2[2] = *(_BYTE *)(*v2 + 90) != 0;
        result = sub_18BBF0CD4(*(_QWORD *)(*v2 + 96));
        if ((_DWORD)result)
          a2[2] |= 2u;
        a2[3] = 0;
        if (*a2)
        {
          v5 = 0;
          do
          {
            v6 = icu::UVector::elementAt((icu::UVector *)v2[3], v5);
            v7 = a2[1] * v5;
            v8 = (_WORD *)((char *)a2 + v7 + 16);
            v9 = *(_DWORD *)(v6 + 8);
            *v8 = *(_DWORD *)(v6 + 4);
            v8[1] = v9;
            v8[2] = *(_DWORD *)(v6 + 24);
            result = sub_18BBF0CC8(*(_QWORD *)(*v2 + 96));
            if ((int)result >= 1)
            {
              v10 = 0;
              v11 = (char *)a2 + v7 + 24;
              do
              {
                v12 = *(_QWORD *)(v6 + 40);
                v13 = *(int *)(v12 + 8);
                if ((int)v13 >= 1 && v10 < v13)
                  v15 = *(_DWORD *)(*(_QWORD *)(v12 + 24) + 4 * v10);
                else
                  LOWORD(v15) = 0;
                *(_WORD *)&v11[2 * v10++] = v15;
                result = sub_18BBF0CC8(*(_QWORD *)(*v2 + 96));
              }
              while (v10 < (int)result);
            }
            ++v5;
          }
          while (v5 < *a2);
        }
      }
      else
      {
        *(_DWORD *)v2[2] = 66048;
      }
    }
  }
  return result;
}

unint64_t icu::RuleBasedTokenizer::tokenize(uint64_t a1, int a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  UText *v10;
  uint64_t chunkOffset;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  __int16 *v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int64_t chunkNativeStart;
  int64_t v30;
  uint64_t v31;
  int32_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t *v37;
  __int16 *v38;
  uint64_t *v39;
  unsigned int v41;

  v38 = *(__int16 **)(a1 + 584);
  v7 = *(_QWORD *)(a1 + 520);
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *(_DWORD *)(v8 + 4);
  v10 = *(UText **)(a1 + 488);
  *(_BYTE *)(a1 + 532) = 0;
  chunkOffset = v10->chunkOffset;
  if ((int)chunkOffset <= v10->nativeIndexingLimit)
  {
    v12 = v10->chunkNativeStart + chunkOffset;
  }
  else
  {
    v12 = ((uint64_t (*)(UText *))v10->pFuncs->mapOffsetToNative)(v10);
    v7 = *(_QWORD *)(a1 + 520);
  }
  v37 = a3;
  if (a2 < 1)
    return (unint64_t)((char *)a3 - (char *)v37) >> 4;
  v41 = 0;
  v13 = v8 + 16;
  v39 = &a3[2 * a2];
  while (2)
  {
    v14 = v10->chunkOffset;
    if ((int)v14 >= v10->chunkLength || (v15 = v10->chunkContents[v14], v15 >> 11 > 0x1A))
    {
      v15 = utext_next32(v10);
      if (v15 == -1)
        return (unint64_t)((char *)a3 - (char *)v37) >> 4;
    }
    else
    {
      v10->chunkOffset = v14 + 1;
    }
    v16 = *(_QWORD *)(a1 + 544);
    if (v16)
    {
      v17 = *(_DWORD *)(a1 + 556);
      if (v17 < *(_DWORD *)(a1 + 552) - 1)
      {
        v18 = v17 + 1;
        *(_DWORD *)(a1 + 556) = v18;
        v19 = *(int *)(v16 + 4 * v18);
        goto LABEL_44;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
    }
    v19 = v12;
    v20 = v38;
    do
    {
      if ((int)v15 <= 255)
      {
        v21 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 600) + 2 * (int)v15);
        if ((v21 & 0x4000) != 0)
          goto LABEL_27;
        goto LABEL_28;
      }
      if (!HIWORD(v15))
      {
        v22 = *(_QWORD *)(v7 + 64);
        if (v15 >> 10 == 54)
          v23 = 320;
        else
          v23 = 0;
        v24 = v23 + (v15 >> 5);
LABEL_26:
        v21 = *(unsigned __int16 *)(v22 + 2 * ((v15 & 0x1F) + 4 * *(unsigned __int16 *)(v22 + 2 * v24)));
        if ((v21 & 0x4000) == 0)
          goto LABEL_28;
LABEL_27:
        ++*(_DWORD *)(a1 + 536);
        v21 &= ~0x4000u;
        goto LABEL_28;
      }
      if (HIWORD(v15) <= 0x10u)
      {
        v25 = (*(uint64_t (**)(_QWORD))(v7 + 80))(*(unsigned __int16 *)(*(_QWORD *)(v7 + 64)
                                                                                + 2
                                                                                * (((v15 >> 10) & 0x1F)
                                                                                 + 4
                                                                                 * *(unsigned __int16 *)(*(_QWORD *)(v7 + 64) + 2 * (((v15 >> 10) + 55232) >> 5)))));
        if (v25 >= 1)
        {
          v22 = *(_QWORD *)(v7 + 64);
          v24 = v25 + ((v15 >> 5) & 0x1F);
          goto LABEL_26;
        }
      }
      v21 = *(unsigned __int16 *)(v7 + 96);
      if ((v21 & 0x4000) != 0)
        goto LABEL_27;
LABEL_28:
      v26 = (unsigned __int16)v20[v21 + 4];
      v20 = (__int16 *)(v13 + v9 * v26);
      if (*v20 == -1)
      {
        v27 = v10->chunkOffset;
        if ((int)v27 <= v10->nativeIndexingLimit)
          v19 = v10->chunkNativeStart + v27;
        else
          v19 = ((uint64_t (*)(UText *))v10->pFuncs->mapOffsetToNative)(v10);
        v41 = v26;
      }
      if (!v26)
        break;
      v28 = v10->chunkOffset;
      if ((int)v28 >= v10->chunkLength || (v15 = v10->chunkContents[v28], v15 >> 11 > 0x1A))
        v15 = utext_next32(v10);
      else
        v10->chunkOffset = v28 + 1;
    }
    while (v15 != -1);
    if (*(_DWORD *)(a1 + 536))
      v19 = (int)icu::RuleBasedBreakIterator57::checkDictionary((UText **)a1, v12, v19, 0);
LABEL_44:
    chunkNativeStart = v10->chunkNativeStart;
    v30 = v19;
    if (v19 == v12)
    {
      v31 = v12 - chunkNativeStart;
      if (v31 < 0 || v31 >= v10->nativeIndexingLimit || v10->chunkContents[v31] >> 10 > 0x36u)
      {
        utext_setNativeIndex(v10, v12);
        LODWORD(v31) = v10->chunkOffset;
      }
      else
      {
        v10->chunkOffset = v31;
      }
      if ((int)v31 >= v10->chunkLength || v10->chunkContents[(int)v31] >> 11 > 0x1Au)
      {
        utext_next32(v10);
        v32 = v10->chunkOffset;
      }
      else
      {
        v32 = v31 + 1;
        v10->chunkOffset = v31 + 1;
      }
      if (v32 <= v10->nativeIndexingLimit)
      {
        chunkNativeStart = v10->chunkNativeStart;
        v33 = chunkNativeStart + v32;
      }
      else
      {
        v33 = ((uint64_t (*)(UText *))v10->pFuncs->mapOffsetToNative)(v10);
        chunkNativeStart = v10->chunkNativeStart;
      }
      v30 = v33;
    }
    v34 = v30 - chunkNativeStart;
    if (v34 < 0 || v34 >= v10->nativeIndexingLimit || v10->chunkContents[v34] >> 10 > 0x36u)
      utext_setNativeIndex(v10, v30);
    else
      v10->chunkOffset = v34;
    if (v19 == v12)
    {
      v35 = 0;
      break;
    }
    v35 = *(_DWORD *)(*(_QWORD *)(a1 + 592) + 4 * v41);
    if (v35 == -1)
    {
LABEL_70:
      v12 = v30;
      if (a3 >= v39)
        return (unint64_t)((char *)a3 - (char *)v37) >> 4;
      continue;
    }
    break;
  }
  *a3 = v12;
  a3[1] = v30 - v12;
  if (a4)
    *a4++ = v35;
  else
    a4 = 0;
  a3 += 2;
  if ((v35 & 0x40000000) == 0)
    goto LABEL_70;
  return (unint64_t)((char *)a3 - (char *)v37) >> 4;
}

uint64_t icu::RuleBasedTokenizer::init(icu::RuleBasedTokenizer *this)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  int v9;
  unsigned int v10;
  __int16 *v11;
  int v12;
  unsigned __int16 v13;
  uint64_t v14;
  int *v15;
  int *v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  BOOL v21;
  BOOL v22;
  int v23;
  int v24;

  v2 = *(unsigned int **)(*((_QWORD *)this + 65) + 8);
  (*(void (**)(icu::RuleBasedTokenizer *, uint64_t))(*(_QWORD *)this + 208))(this, 1);
  *((_QWORD *)this + 73) = (char *)v2 + v2[1] + 16;
  v3 = *((_QWORD *)this + 65);
  v4 = operator new[]();
  v5 = 0;
  *((_QWORD *)this + 75) = v4;
  v6 = *(_QWORD *)(v3 + 64);
  do
  {
    *(_WORD *)(v4 + 2 * v5) = *(_WORD *)(v6
                                       + 2
                                       * ((v5 & 0x1F) + 4 * *(unsigned __int16 *)(v6 + 2 * (v5 >> 5))));
    ++v5;
  }
  while (v5 != 256);
  result = operator new[]();
  *((_QWORD *)this + 74) = result;
  v8 = *v2;
  if (*v2)
  {
    v9 = 0;
    v10 = v2[1];
    do
    {
      v11 = (__int16 *)((char *)v2 + v10 * v9 + 16);
      if (*v11 == -1 && (v14 = v11[2]) != 0)
      {
        v12 = 0;
        v15 = (int *)(*(_QWORD *)(*((_QWORD *)this + 65) + 48) + 4 * v14);
        v17 = *v15;
        v16 = v15 + 1;
        v18 = &v16[v17];
        do
        {
          if (v16 >= v18)
            break;
          v20 = *v16++;
          v19 = v20;
          v21 = v20 == 0;
          v22 = v20 <= 0;
          v23 = v20 <= 0 ? 0 : v12;
          v24 = v23 | v19;
          if (!v21)
            v12 = v24;
        }
        while (!v22);
      }
      else
      {
        v12 = 0;
      }
      *(_DWORD *)(result + 4 * (unsigned __int16)v9) = v12;
      v13 = v9 + 1;
      v9 = (unsigned __int16)(v9 + 1);
    }
    while (v8 > v13);
  }
  return result;
}

icu::RuleBasedTokenizer *icu::RuleBasedTokenizer::RuleBasedTokenizer(icu::RuleBasedTokenizer *this, const icu::UnicodeString *a2, UParseError *a3, UErrorCode *a4)
{
  icu::RuleBasedBreakIterator57 *v6;

  v6 = icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(this, a2, a3, a4);
  *(_QWORD *)v6 = off_1E224B498;
  *((_OWORD *)v6 + 37) = 0u;
  if (*(int *)a4 <= 0)
    icu::RuleBasedTokenizer::init(this);
  return this;
}

icu::RuleBasedTokenizer *icu::RuleBasedTokenizer::RuleBasedTokenizer(icu::RuleBasedTokenizer *this, unsigned __int8 *a2, UErrorCode *a3)
{
  uint64_t v5;

  v5 = icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57((uint64_t)this, (uint64_t)a2, (int *)a3);
  *(_QWORD *)v5 = off_1E224B498;
  *(_OWORD *)(v5 + 592) = 0u;
  if (*(int *)a3 <= 0)
    icu::RuleBasedTokenizer::init(this);
  return this;
}

icu::RuleBasedTokenizer *icu::RuleBasedTokenizer::RuleBasedTokenizer(icu::RuleBasedTokenizer *a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v6;

  v6 = icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57((uint64_t)a1, a2, 0, a4);
  *(_QWORD *)v6 = off_1E224B498;
  *(_OWORD *)(v6 + 592) = 0u;
  if (*a4 <= 0)
    icu::RuleBasedTokenizer::init(a1);
  return a1;
}

void icu::RuleBasedTokenizer::~RuleBasedTokenizer(icu::RuleBasedTokenizer *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E224B498;
  v2 = *((_QWORD *)this + 74);
  if (v2)
    MEMORY[0x18D77FE74](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 75);
  if (v3)
    MEMORY[0x18D77FE74](v3, 0x1000C80BDFB0063);
  icu::RuleBasedBreakIterator57::~RuleBasedBreakIterator57(this);
}

{
  void *v1;

  icu::RuleBasedTokenizer::~RuleBasedTokenizer(this);
  icu::UMemory::operator delete(v1);
}

void *icu::ResourceBundle::getStaticClassID(icu::ResourceBundle *this)
{
  return &unk_1EE009398;
}

void *icu::ResourceBundle::getDynamicClassID(icu::ResourceBundle *this)
{
  return &unk_1EE009398;
}

icu::ResourceBundle *icu::ResourceBundle::ResourceBundle(icu::ResourceBundle *this, UErrorCode *a2)
{
  uint64_t *Default;

  *(_QWORD *)this = off_1E224B598;
  *((_QWORD *)this + 2) = 0;
  Default = icu::Locale::getDefault(this);
  *((_QWORD *)this + 1) = ures_open(0, (char *)Default[5], (int *)a2);
  return this;
}

{
  uint64_t *Default;

  *(_QWORD *)this = off_1E224B598;
  *((_QWORD *)this + 2) = 0;
  Default = icu::Locale::getDefault(this);
  *((_QWORD *)this + 1) = ures_open(0, (char *)Default[5], (int *)a2);
  return this;
}

icu::ResourceBundle *icu::ResourceBundle::ResourceBundle(icu::ResourceBundle *this, const icu::ResourceBundle *a2)
{
  char *v3;
  char *v4;
  int v6;

  *(_QWORD *)this = off_1E224B598;
  *((_QWORD *)this + 2) = 0;
  v6 = 0;
  v3 = (char *)*((_QWORD *)a2 + 1);
  if (v3)
    v4 = sub_18BC5C254(0, v3, &v6);
  else
    v4 = 0;
  *((_QWORD *)this + 1) = v4;
  return this;
}

{
  char *v3;
  char *v4;
  int v6;

  *(_QWORD *)this = off_1E224B598;
  *((_QWORD *)this + 2) = 0;
  v6 = 0;
  v3 = (char *)*((_QWORD *)a2 + 1);
  if (v3)
    v4 = sub_18BC5C254(0, v3, &v6);
  else
    v4 = 0;
  *((_QWORD *)this + 1) = v4;
  return this;
}

_QWORD *icu::ResourceBundle::ResourceBundle(_QWORD *a1, char *a2, int *a3)
{
  char *v4;

  *a1 = off_1E224B598;
  a1[2] = 0;
  v4 = 0;
  if (a2)
    v4 = sub_18BC5C254(0, a2, a3);
  a1[1] = v4;
  return a1;
}

{
  char *v4;

  *a1 = off_1E224B598;
  a1[2] = 0;
  v4 = 0;
  if (a2)
    v4 = sub_18BC5C254(0, a2, a3);
  a1[1] = v4;
  return a1;
}

icu::ResourceBundle *icu::ResourceBundle::ResourceBundle(icu::ResourceBundle *this, const char *a2, char **a3, UErrorCode *a4)
{
  *(_QWORD *)this = off_1E224B598;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = ures_open(a2, a3[5], (int *)a4);
  return this;
}

{
  *(_QWORD *)this = off_1E224B598;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = ures_open(a2, a3[5], (int *)a4);
  return this;
}

uint64_t icu::ResourceBundle::operator=(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int v9;

  if (a1 != a2)
  {
    v4 = *(_QWORD **)(a1 + 8);
    if (v4)
    {
      ures_close(v4);
      *(_QWORD *)(a1 + 8) = 0;
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      *(_QWORD *)(a1 + 16) = 0;
    }
    v9 = 0;
    v6 = *(char **)(a2 + 8);
    if (v6)
      v7 = sub_18BC5C254(0, v6, &v9);
    else
      v7 = 0;
    *(_QWORD *)(a1 + 8) = v7;
  }
  return a1;
}

void icu::ResourceBundle::~ResourceBundle(icu::ResourceBundle *this)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E224B598;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
    ures_close(v2);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::ResourceBundle::~ResourceBundle(this);
  icu::UMemory::operator delete(v1);
}

uint64_t *icu::ResourceBundle::clone@<X0>(icu::ResourceBundle *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  int v9;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x18, a2);
  v5 = v4;
  if (v4)
  {
    *v4 = (uint64_t)off_1E224B598;
    v4[2] = 0;
    v9 = 0;
    v6 = (char *)*((_QWORD *)this + 1);
    if (v6)
      v7 = sub_18BC5C254(0, v6, &v9);
    else
      v7 = 0;
    v5[1] = (uint64_t)v7;
  }
  return v5;
}

uint64_t icu::ResourceBundle::getString@<X0>(icu::ResourceBundle *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  const UChar *String;
  int v6;

  v6 = 0;
  String = ures_getString(*((_QWORD *)this + 1), &v6, (int *)a2);
  return icu::UnicodeString::UnicodeString(a3, 1, &String);
}

int *icu::ResourceBundle::getBinary(icu::ResourceBundle *this, int *a2, UErrorCode *a3)
{
  return ures_getBinary(*((_QWORD *)this + 1), a2, (int *)a3);
}

int *icu::ResourceBundle::getIntVector(icu::ResourceBundle *this, int *a2, UErrorCode *a3)
{
  return ures_getIntVector(*((_QWORD *)this + 1), a2, (int *)a3);
}

uint64_t icu::ResourceBundle::getUInt(icu::ResourceBundle *this, UErrorCode *a2)
{
  return ures_getUInt(*((_QWORD *)this + 1), (int *)a2);
}

uint64_t icu::ResourceBundle::getInt(icu::ResourceBundle *this, UErrorCode *a2)
{
  return ures_getInt(*((_QWORD *)this + 1), (int *)a2);
}

uint64_t icu::ResourceBundle::getName(icu::ResourceBundle *this)
{
  return sub_18BC5E02C(*((_QWORD *)this + 1));
}

uint64_t icu::ResourceBundle::getKey(icu::ResourceBundle *this)
{
  return ures_getKey(*((_QWORD *)this + 1));
}

uint64_t icu::ResourceBundle::getType(icu::ResourceBundle *this)
{
  return ures_getType(*((_QWORD *)this + 1));
}

uint64_t icu::ResourceBundle::getSize(icu::ResourceBundle *this)
{
  return ures_getSize(*((_QWORD *)this + 1));
}

BOOL icu::ResourceBundle::hasNext(icu::ResourceBundle *this)
{
  return ures_hasNext(*((_QWORD *)this + 1));
}

uint64_t icu::ResourceBundle::resetIterator(icu::ResourceBundle *this)
{
  return ures_resetIterator(*((_QWORD *)this + 1));
}

void icu::ResourceBundle::getNext(icu::ResourceBundle *this@<X0>, UErrorCode *a2@<X1>, _QWORD *a3@<X8>)
{
  _OWORD v6[8];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  ures_initStackObject((uint64_t)v6);
  ures_getNextResource(*((_QWORD *)this + 1), (char *)v6, (int *)a2);
  *a3 = off_1E224B598;
  a3[2] = 0;
  a3[1] = sub_18BC5C254(0, (char *)v6, (int *)a2);
  if (*(int *)a2 <= 0)
    ures_close(v6);
}

uint64_t icu::ResourceBundle::getNextString@<X0>(icu::ResourceBundle *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  const UChar *NextString;
  int v6;

  v6 = 0;
  NextString = ures_getNextString(*((_QWORD *)this + 1), &v6, 0, (int *)a2);
  return icu::UnicodeString::UnicodeString(a3, 1, &NextString);
}

uint64_t icu::ResourceBundle::getNextString@<X0>(icu::ResourceBundle *this@<X0>, const char **a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  const UChar *NextString;
  int v7;

  v7 = 0;
  NextString = ures_getNextString(*((_QWORD *)this + 1), &v7, a2, (int *)a3);
  return icu::UnicodeString::UnicodeString(a4, 1, &NextString);
}

void icu::ResourceBundle::get(icu::ResourceBundle *this@<X0>, UErrorCode *a2@<X2>, signed int a3@<W1>, _QWORD *a4@<X8>)
{
  _OWORD v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  ures_initStackObject((uint64_t)v8);
  ures_getByIndex(*((_QWORD *)this + 1), a3, (char *)v8, (int *)a2);
  *a4 = off_1E224B598;
  a4[2] = 0;
  a4[1] = sub_18BC5C254(0, (char *)v8, (int *)a2);
  if (*(int *)a2 <= 0)
    ures_close(v8);
}

uint64_t icu::ResourceBundle::getStringEx@<X0>(icu::ResourceBundle *this@<X0>, UErrorCode *a2@<X2>, signed int a3@<W1>, uint64_t a4@<X8>)
{
  const UChar *StringByIndex;
  int v7;

  v7 = 0;
  StringByIndex = ures_getStringByIndex(*((_QWORD *)this + 1), a3, &v7, (int *)a2);
  return icu::UnicodeString::UnicodeString(a4, 1, &StringByIndex);
}

void icu::ResourceBundle::get(icu::ResourceBundle *this@<X0>, const char *a2@<X1>, UErrorCode *a3@<X2>, _QWORD *a4@<X8>)
{
  _OWORD v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  ures_initStackObject((uint64_t)v8);
  ures_getByKey(*((_QWORD *)this + 1), a2, (uint64_t)v8, (int *)a3);
  *a4 = off_1E224B598;
  a4[2] = 0;
  a4[1] = sub_18BC5C254(0, (char *)v8, (int *)a3);
  if (*(int *)a3 <= 0)
    ures_close(v8);
}

void icu::ResourceBundle::getWithFallback(icu::ResourceBundle *this@<X0>, char *a2@<X1>, UErrorCode *a3@<X2>, _QWORD *a4@<X8>)
{
  _OWORD v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  ures_initStackObject((uint64_t)v8);
  ures_getByKeyWithFallback(*((_QWORD *)this + 1), a2, (uint64_t)v8, a3);
  *a4 = off_1E224B598;
  a4[2] = 0;
  a4[1] = sub_18BC5C254(0, (char *)v8, (int *)a3);
  if (*(int *)a3 <= 0)
    ures_close(v8);
}

uint64_t icu::ResourceBundle::getStringEx@<X0>(icu::ResourceBundle *this@<X0>, const char *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  const UChar *StringByKey;
  int v7;

  v7 = 0;
  StringByKey = ures_getStringByKey(*((_QWORD *)this + 1), a2, &v7, (int *)a3);
  return icu::UnicodeString::UnicodeString(a4, 1, &StringByKey);
}

char *icu::ResourceBundle::getVersionNumber(icu::ResourceBundle *this)
{
  return ures_getVersionNumberInternal(*((_QWORD *)this + 1));
}

void icu::ResourceBundle::getVersion(icu::ResourceBundle *this, unsigned __int8 *a2)
{
  ures_getVersion(*((_QWORD *)this + 1), a2);
}

uint64_t *icu::ResourceBundle::getLocale(icu::ResourceBundle *this)
{
  uint64_t *Default;
  const char *LocaleInternal;
  unint64_t v4;
  uint64_t *v5;
  icu::Locale *v6;
  int v8;

  umtx_lock((icu::UMutex *)&unk_1EE0093A0);
  Default = (uint64_t *)*((_QWORD *)this + 2);
  if (!Default)
  {
    v8 = 0;
    LocaleInternal = (const char *)ures_getLocaleInternal(*((_QWORD *)this + 1), &v8);
    v6 = (icu::Locale *)icu::UMemory::operator new(v5, (icu::UMemory *)0xE0, v4);
    if (v6)
    {
      Default = (uint64_t *)v6;
      *((_QWORD *)this + 2) = icu::Locale::Locale(v6, LocaleInternal, 0, 0, 0);
    }
    else
    {
      *((_QWORD *)this + 2) = 0;
      Default = icu::Locale::getDefault(0);
    }
  }
  umtx_unlock((std::mutex **)&unk_1EE0093A0);
  return Default;
}

uint64_t icu::ResourceBundle::getLocale@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, icu::Locale *a4@<X8>)
{
  const char *LocaleByType;

  LocaleByType = (const char *)ures_getLocaleByType(*(_QWORD *)(a1 + 8), a2, a3);
  return icu::Locale::Locale(a4, LocaleByType, 0, 0, 0);
}

icu::ResourceBundle *icu::ResourceBundle::ResourceBundle(icu::ResourceBundle *this, UChar **a2, char **a3, UErrorCode *a4)
{
  *(_QWORD *)this = off_1E224B598;
  *((_QWORD *)this + 2) = 0;
  icu::ResourceBundle::constructForLocale(this, a2, a3, a4);
  return this;
}

{
  *(_QWORD *)this = off_1E224B598;
  *((_QWORD *)this + 2) = 0;
  icu::ResourceBundle::constructForLocale(this, a2, a3, a4);
  return this;
}

_QWORD *icu::ResourceBundle::constructForLocale(icu::ResourceBundle *this, UChar **a2, char **a3, UErrorCode *a4)
{
  UChar *v7;
  _QWORD *result;
  void *v9;
  __int16 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*((unsigned __int16 *)a2 + 4) <= 0x1Fu)
  {
    result = ures_open(0, a3[5], (int *)a4);
    *((_QWORD *)this + 1) = result;
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v11, a2);
    v10 = 0;
    icu::UnicodeString::doAppend((uint64_t)&v11, (uint64_t)&v10, 0, 1);
    if ((BYTE8(v11) & 0x11) != 0)
    {
      v7 = 0;
    }
    else if ((BYTE8(v11) & 2) != 0)
    {
      v7 = (UChar *)((unint64_t)&v11 | 0xA);
    }
    else
    {
      v7 = (UChar *)*((_QWORD *)&v12 + 1);
    }
    *((_QWORD *)this + 1) = ures_openU(v7, a3[5], (int *)a4);
    return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v11);
  }
  return result;
}

icu::ResourceBundle *icu::ResourceBundle::ResourceBundle(icu::ResourceBundle *this, UChar **a2, UErrorCode *a3)
{
  uint64_t *Default;

  *(_QWORD *)this = off_1E224B598;
  *((_QWORD *)this + 2) = 0;
  Default = icu::Locale::getDefault(this);
  icu::ResourceBundle::constructForLocale(this, a2, (char **)Default, a3);
  return this;
}

{
  uint64_t *Default;

  *(_QWORD *)this = off_1E224B598;
  *((_QWORD *)this + 2) = 0;
  Default = icu::Locale::getDefault(this);
  icu::ResourceBundle::constructForLocale(this, a2, (char **)Default, a3);
  return this;
}

uint64_t sub_18BBF6824(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a4;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

BOOL sub_18BBF6834(_QWORD *a1)
{
  int v2;

  if (a1[3])
    return 0;
  if (*(__int16 *)(*a1 + 8) < 0)
    v2 = *(_DWORD *)(*a1 + 12);
  else
    v2 = *(unsigned __int16 *)(*a1 + 8) >> 5;
  return *(_DWORD *)(a1[1] + 8) == v2;
}

uint64_t sub_18BBF6870(uint64_t a1, char a2, _BYTE *a3, int *a4)
{
  uint64_t v4;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  _OWORD v16[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*a4 > 0)
    return 0xFFFFFFFFLL;
  *a3 = 0;
  do
  {
    while (1)
    {
      v4 = sub_18BBF6AAC((uint64_t *)a1);
      v10 = v4 < 0x10000 ? 1 : 2;
      sub_18BBF6AF4((uint64_t *)a1, v10);
      if ((_DWORD)v4 != 36)
        break;
      if ((a2 & 1) == 0)
        break;
      if (*(_QWORD *)(a1 + 24))
        break;
      v11 = *(_QWORD *)(a1 + 16);
      if (!v11)
        break;
      memset(v16, 0, sizeof(v16));
      (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)v11 + 32))(v16);
      v12 = WORD4(v16[0]) >> 5;
      if (SWORD4(v16[0]) < 0)
        v12 = HIDWORD(v16[0]);
      if (!v12)
      {
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v16);
        return 36;
      }
      *(_DWORD *)(a1 + 32) = 0;
      v13 = (*(uint64_t (**)(_QWORD, _OWORD *))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v16);
      *(_QWORD *)(a1 + 24) = v13;
      if (!v13)
      {
        v14 = 65554;
        goto LABEL_34;
      }
      if ((*(__int16 *)(v13 + 8) & 0x80000000) == 0)
      {
        if (*(unsigned __int16 *)(v13 + 8) >> 5)
          goto LABEL_23;
LABEL_22:
        *(_QWORD *)(a1 + 24) = 0;
        goto LABEL_23;
      }
      if (!*(_DWORD *)(v13 + 12))
        goto LABEL_22;
LABEL_23:
      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v16);
    }
  }
  while ((a2 & 4) != 0 && icu::PatternProps::isWhiteSpace((icu::PatternProps *)v4));
  if ((_DWORD)v4 != 92)
    return v4;
  if ((a2 & 2) == 0)
    return 92;
  memset((char *)v16 + 8, 0, 56);
  *(_QWORD *)&v16[0] = off_1E2256B38;
  WORD4(v16[0]) = 2;
  v15 = 0;
  sub_18BBF6B6C(a1, (icu::UnicodeString *)v16, 0xCu);
  v4 = icu::UnicodeString::unescapeAt((icu::UnicodeString *)v16, &v15);
  sub_18BBF6AF4((uint64_t *)a1, v15);
  *a3 = 1;
  if ((v4 & 0x80000000) == 0)
  {
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v16);
    return v4;
  }
  v14 = 65540;
LABEL_34:
  *a4 = v14;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v16);
  return 0xFFFFFFFFLL;
}

uint64_t sub_18BBF6AAC(uint64_t *a1)
{
  int v1;
  uint64_t v2;
  int v4;

  if (a1[3])
  {
    v1 = *((_DWORD *)a1 + 8);
    v2 = a1[3];
    return icu::UnicodeString::char32At((icu::UnicodeString *)v2, v1);
  }
  v2 = *a1;
  v1 = *(_DWORD *)(a1[1] + 8);
  if (*(__int16 *)(v2 + 8) < 0)
    v4 = *(_DWORD *)(v2 + 12);
  else
    v4 = *(unsigned __int16 *)(v2 + 8) >> 5;
  if (v1 < v4)
    return icu::UnicodeString::char32At((icu::UnicodeString *)v2, v1);
  return 0xFFFFFFFFLL;
}

uint64_t *sub_18BBF6AF4(uint64_t *result, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  signed int v9;

  v2 = result[3];
  if (v2)
  {
    v3 = *((_DWORD *)result + 8) + a2;
    *((_DWORD *)result + 8) = v3;
    if (*(__int16 *)(v2 + 8) < 0)
      v4 = *(_DWORD *)(v2 + 12);
    else
      v4 = *(unsigned __int16 *)(v2 + 8) >> 5;
    if (v3 == v4)
      result[3] = 0;
  }
  else
  {
    v6 = *result;
    v5 = result[1];
    v7 = *(_DWORD *)(v5 + 8) + a2;
    *(_DWORD *)(v5 + 8) = v7;
    v8 = *(unsigned __int16 *)(v6 + 8);
    if ((v8 & 0x8000) != 0)
    {
      v9 = *(_DWORD *)(v6 + 12);
      if (v7 <= v9)
        return result;
    }
    else
    {
      if (v7 <= (int)(v8 >> 5))
        return result;
      v9 = v8 >> 5;
    }
    *(_DWORD *)(v5 + 8) = v9;
  }
  return result;
}

icu::UnicodeString *sub_18BBF6B6C(uint64_t a1, icu::UnicodeString *this, unsigned int a3)
{
  uint64_t v4;
  const icu::UnicodeString *v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;

  if (a3 >= 0x7FFFFFFF)
    v4 = 0x7FFFFFFFLL;
  else
    v4 = a3;
  v5 = *(const icu::UnicodeString **)(a1 + 24);
  if (v5)
  {
    v6 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    v5 = *(const icu::UnicodeString **)a1;
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8);
  }
  v7 = *((unsigned __int16 *)this + 4);
  v8 = (__int16)v7;
  v9 = v7 >> 5;
  if (v8 >= 0)
    v10 = v9;
  else
    v10 = *((unsigned int *)this + 3);
  icu::UnicodeString::doReplace(this, 0, v10, v5, v6, v4);
  return this;
}

uint64_t sub_18BBF6BD8(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  v2 = *(_DWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(*(_QWORD *)(result + 8) + 8);
  *(_DWORD *)(a2 + 12) = v2;
  return result;
}

uint64_t sub_18BBF6BF4(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)(result + 24) = *(_QWORD *)a2;
  v2 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(*(_QWORD *)(result + 8) + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 32) = v2;
  return result;
}

BOOL sub_18BBF6C10(_BOOL8 result, char a2)
{
  uint64_t *v2;
  icu::PatternProps *v3;
  unsigned int v4;
  int v5;
  icu::PatternProps *v6;

  if ((a2 & 4) != 0)
  {
    v2 = (uint64_t *)result;
    v3 = (icu::PatternProps *)sub_18BBF6AAC((uint64_t *)result);
    v4 = v3;
    for (result = icu::PatternProps::isWhiteSpace(v3); result; result = icu::PatternProps::isWhiteSpace(v6))
    {
      if (v4 < 0x10000)
        v5 = 1;
      else
        v5 = 2;
      sub_18BBF6AF4(v2, v5);
      v6 = (icu::PatternProps *)sub_18BBF6AAC(v2);
      v4 = v6;
    }
  }
  return result;
}

void *icu::StringCharacterIterator::getStaticClassID(icu::StringCharacterIterator *this)
{
  return &unk_1EE0093F0;
}

void *icu::StringCharacterIterator::getDynamicClassID(icu::StringCharacterIterator *this)
{
  return &unk_1EE0093F0;
}

_QWORD *icu::StringCharacterIterator::StringCharacterIterator(icu::StringCharacterIterator *this)
{
  _QWORD *result;

  result = icu::UCharCharacterIterator::UCharCharacterIterator(this);
  *result = off_1E224B6C8;
  result[4] = off_1E2256B38;
  *((_WORD *)result + 20) = 2;
  return result;
}

{
  _QWORD *result;

  result = icu::UCharCharacterIterator::UCharCharacterIterator(this);
  *result = off_1E224B6C8;
  result[4] = off_1E2256B38;
  *((_WORD *)result + 20) = 2;
  return result;
}

icu::StringCharacterIterator *icu::StringCharacterIterator::StringCharacterIterator(icu::StringCharacterIterator *this, const icu::UnicodeString *a2)
{
  unsigned int v4;
  const UChar *v5;
  int v6;
  int32_t v7;
  int32_t v8;
  __int16 v9;
  char *v10;
  const UChar *v12;

  v4 = *((unsigned __int16 *)a2 + 4);
  if ((v4 & 0x11) != 0)
  {
    v5 = 0;
  }
  else if ((v4 & 2) != 0)
  {
    v5 = (const UChar *)((char *)a2 + 10);
  }
  else
  {
    v5 = (const UChar *)*((_QWORD *)a2 + 3);
  }
  v6 = (__int16)v4;
  v12 = v5;
  v7 = v4 >> 5;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = *((_DWORD *)a2 + 3);
  icu::UCharCharacterIterator::UCharCharacterIterator(this, &v12, v8);
  *(_QWORD *)this = off_1E224B6C8;
  icu::UnicodeString::UnicodeString((icu::StringCharacterIterator *)((char *)this + 32), (UChar **)a2);
  v9 = *((_WORD *)this + 20);
  if ((v9 & 0x11) != 0)
  {
    v10 = 0;
  }
  else if ((v9 & 2) != 0)
  {
    v10 = (char *)this + 42;
  }
  else
  {
    v10 = (char *)*((_QWORD *)this + 7);
  }
  *((_QWORD *)this + 3) = v10;
  return this;
}

icu::StringCharacterIterator *icu::StringCharacterIterator::StringCharacterIterator(icu::StringCharacterIterator *this, const icu::UnicodeString *a2, unsigned int a3)
{
  unsigned int v6;
  const UChar *v7;
  int v8;
  int32_t v9;
  int32_t v10;
  __int16 v11;
  char *v12;
  const UChar *v14;

  v6 = *((unsigned __int16 *)a2 + 4);
  if ((v6 & 0x11) != 0)
  {
    v7 = 0;
  }
  else if ((v6 & 2) != 0)
  {
    v7 = (const UChar *)((char *)a2 + 10);
  }
  else
  {
    v7 = (const UChar *)*((_QWORD *)a2 + 3);
  }
  v8 = (__int16)v6;
  v14 = v7;
  v9 = v6 >> 5;
  if (v8 >= 0)
    v10 = v9;
  else
    v10 = *((_DWORD *)a2 + 3);
  icu::UCharCharacterIterator::UCharCharacterIterator(this, &v14, v10, a3);
  *(_QWORD *)this = off_1E224B6C8;
  icu::UnicodeString::UnicodeString((icu::StringCharacterIterator *)((char *)this + 32), (UChar **)a2);
  v11 = *((_WORD *)this + 20);
  if ((v11 & 0x11) != 0)
  {
    v12 = 0;
  }
  else if ((v11 & 2) != 0)
  {
    v12 = (char *)this + 42;
  }
  else
  {
    v12 = (char *)*((_QWORD *)this + 7);
  }
  *((_QWORD *)this + 3) = v12;
  return this;
}

icu::StringCharacterIterator *icu::StringCharacterIterator::StringCharacterIterator(icu::StringCharacterIterator *this, const icu::UnicodeString *a2, unsigned int a3, signed int a4, int a5)
{
  unsigned int v10;
  const UChar *v11;
  int v12;
  int32_t v13;
  int32_t v14;
  __int16 v15;
  char *v16;
  const UChar *v18;

  v10 = *((unsigned __int16 *)a2 + 4);
  if ((v10 & 0x11) != 0)
  {
    v11 = 0;
  }
  else if ((v10 & 2) != 0)
  {
    v11 = (const UChar *)((char *)a2 + 10);
  }
  else
  {
    v11 = (const UChar *)*((_QWORD *)a2 + 3);
  }
  v12 = (__int16)v10;
  v18 = v11;
  v13 = v10 >> 5;
  if (v12 >= 0)
    v14 = v13;
  else
    v14 = *((_DWORD *)a2 + 3);
  icu::UCharCharacterIterator::UCharCharacterIterator(this, &v18, v14, a3, a4, a5);
  *(_QWORD *)this = off_1E224B6C8;
  icu::UnicodeString::UnicodeString((icu::StringCharacterIterator *)((char *)this + 32), (UChar **)a2);
  v15 = *((_WORD *)this + 20);
  if ((v15 & 0x11) != 0)
  {
    v16 = 0;
  }
  else if ((v15 & 2) != 0)
  {
    v16 = (char *)this + 42;
  }
  else
  {
    v16 = (char *)*((_QWORD *)this + 7);
  }
  *((_QWORD *)this + 3) = v16;
  return this;
}

icu::StringCharacterIterator *icu::StringCharacterIterator::StringCharacterIterator(icu::StringCharacterIterator *this, UChar **a2)
{
  _QWORD *v4;
  __int16 v5;
  char *v6;

  icu::UCharCharacterIterator::UCharCharacterIterator(this, (const icu::UCharCharacterIterator *)a2);
  *v4 = off_1E224B6C8;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v4 + 4), a2 + 4);
  v5 = *((_WORD *)this + 20);
  if ((v5 & 0x11) != 0)
  {
    v6 = 0;
  }
  else if ((v5 & 2) != 0)
  {
    v6 = (char *)this + 42;
  }
  else
  {
    v6 = (char *)*((_QWORD *)this + 7);
  }
  *((_QWORD *)this + 3) = v6;
  return this;
}

void icu::StringCharacterIterator::~StringCharacterIterator(icu::StringCharacterIterator *this)
{
  *(_QWORD *)this = off_1E224B6C8;
  icu::UnicodeString::~UnicodeString((icu::StringCharacterIterator *)((char *)this + 32));
  icu::UCharCharacterIterator::~UCharCharacterIterator(this);
}

{
  *(_QWORD *)this = off_1E224B6C8;
  icu::UnicodeString::~UnicodeString((icu::StringCharacterIterator *)((char *)this + 32));
  icu::UCharCharacterIterator::~UCharCharacterIterator(this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E224B6C8;
  icu::UnicodeString::~UnicodeString(off_1E224B6C8, (icu::StringCharacterIterator *)((char *)this + 32));
  icu::UCharCharacterIterator::~UCharCharacterIterator(this);
  icu::UMemory::operator delete(v2);
}

uint64_t icu::StringCharacterIterator::operator=(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  uint64_t v5;

  icu::UCharCharacterIterator::operator=(a1, a2);
  icu::UnicodeString::operator=((UChar **)(a1 + 32), (UChar **)(a2 + 32));
  v4 = *(_WORD *)(a1 + 40);
  if ((v4 & 0x11) != 0)
  {
    v5 = 0;
  }
  else if ((v4 & 2) != 0)
  {
    v5 = a1 + 42;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 56);
  }
  *(_QWORD *)(a1 + 24) = v5;
  return a1;
}

uint64_t icu::StringCharacterIterator::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  if (a1 == a2)
    return 1;
  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if ((_DWORD)result)
  {
    v5 = *(unsigned __int16 *)(a1 + 40);
    if ((v5 & 1) != 0)
    {
      if ((*(_WORD *)(a2 + 40) & 1) == 0)
        return 0;
LABEL_17:
      if (*(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12) && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
        return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
      return 0;
    }
    if ((v5 & 0x8000) != 0)
      v6 = *(_DWORD *)(a1 + 44);
    else
      v6 = v5 >> 5;
    result = 0;
    v7 = *(unsigned __int16 *)(a2 + 40);
    if ((v7 & 0x8000u) == 0)
      v8 = v7 >> 5;
    else
      v8 = *(_DWORD *)(a2 + 44);
    if ((v7 & 1) == 0 && v6 == v8)
    {
      result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 32), (const icu::UnicodeString *)(a2 + 32), v6);
      if ((_DWORD)result)
        goto LABEL_17;
    }
  }
  return result;
}

icu::StringCharacterIterator *icu::StringCharacterIterator::clone@<X0>(UChar **this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::StringCharacterIterator *result;

  result = (icu::StringCharacterIterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  if (result)
    return icu::StringCharacterIterator::StringCharacterIterator(result, this);
  return result;
}

uint64_t icu::StringCharacterIterator::setText(UChar **this, UChar **a2)
{
  unsigned int v3;
  UChar *v4;
  int v5;
  UChar *v7;

  icu::UnicodeString::operator=(this + 4, a2);
  v3 = *((unsigned __int16 *)this + 20);
  if ((v3 & 0x11) != 0)
  {
    v4 = 0;
  }
  else if ((v3 & 2) != 0)
  {
    v4 = (UChar *)this + 21;
  }
  else
  {
    v4 = this[7];
  }
  v7 = v4;
  if ((v3 & 0x8000) != 0)
    v5 = *((_DWORD *)this + 11);
  else
    v5 = v3 >> 5;
  return icu::UCharCharacterIterator::setText((uint64_t)this, (uint64_t *)&v7, v5);
}

icu::UnicodeString *icu::StringCharacterIterator::getText(UChar **this, UChar **a2)
{
  return icu::UnicodeString::operator=(a2, this + 4);
}

void icu::SharedObject::~SharedObject(icu::SharedObject *this)
{
  void *v1;

  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::SharedObject::addRef(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 12);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

_QWORD *icu::SharedObject::removeRef(_QWORD *this)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;

  v1 = (_QWORD *)this[2];
  v2 = (unsigned int *)this + 3;
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    v5 = v1 == 0;
    if (v1)
      this = v1;
    v6 = 24;
    if (v5)
      v6 = 8;
    return (_QWORD *)(*(uint64_t (**)(void))(*this + v6))();
  }
  return this;
}

uint64_t icu::SharedObject::getRefCount(icu::SharedObject *this)
{
  return atomic_load((unsigned int *)this + 3);
}

uint64_t icu::SharedObject::deleteIfZeroRefCount(uint64_t this)
{
  if (!*(_QWORD *)(this + 16) && !atomic_load((unsigned int *)(this + 12)))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

uint64_t icu::SimpleFormatter::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
  return a1;
}

void icu::SimpleFormatter::~SimpleFormatter(icu::SimpleFormatter *this)
{
  icu::UnicodeString::~UnicodeString((icu::SimpleFormatter *)((char *)this + 8));
}

{
  icu::UnicodeString::~UnicodeString((icu::SimpleFormatter *)((char *)this + 8));
}

uint64_t icu::SimpleFormatter::applyPatternMinMaxArguments(icu::SimpleFormatter *this, const icu::UnicodeString *a2, int a3, int a4, int a5, UErrorCode *a6)
{
  uint64_t result;
  unsigned int v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  icu::UnicodeString *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;

  if (*(int *)a6 > 0)
    return 0;
  v12 = *((unsigned __int16 *)a2 + 4);
  if ((v12 & 0x11) != 0)
  {
    v13 = 0;
  }
  else if ((v12 & 2) != 0)
  {
    v13 = (char *)a2 + 10;
  }
  else
  {
    v13 = (char *)*((_QWORD *)a2 + 3);
  }
  v14 = (__int16)v12;
  v15 = v12 >> 5;
  if (v14 >= 0)
    v16 = v15;
  else
    v16 = *((_DWORD *)a2 + 3);
  v17 = (icu::SimpleFormatter *)((char *)this + 8);
  v38 = 0;
  icu::UnicodeString::unBogus((uint64_t)this + 8);
  if (*((__int16 *)this + 8) < 0)
    v18 = *((unsigned int *)this + 5);
  else
    v18 = *((unsigned __int16 *)this + 8) >> 5;
  icu::UnicodeString::doReplace((uint64_t)this + 8, 0, v18, (uint64_t)&v38, 0, 1);
  if (v16 >= 1)
  {
    v35 = a3;
    v36 = a5;
    v34 = a4;
    LODWORD(v19) = 0;
    v20 = 0;
    v21 = 0;
    v37 = -1;
    while (1)
    {
      v22 = (int)v19;
      v23 = *(unsigned __int16 *)&v13[2 * (int)v19];
      v19 = (int)v19 + 1;
      if (v23 == 39)
      {
        if ((int)v19 >= v16)
        {
          v23 = 39;
        }
        else
        {
          v23 = *(unsigned __int16 *)&v13[2 * v19];
          if (v23 == 39)
          {
            LODWORD(v19) = v22 + 2;
            if (!v21)
              goto LABEL_31;
            goto LABEL_32;
          }
        }
        if (!v20)
        {
          if (v36 || v23 == 125 || v23 == 123)
          {
            LODWORD(v19) = v22 + 2;
            v20 = 1;
LABEL_30:
            if (!v21)
            {
LABEL_31:
              v40 = -1;
              icu::UnicodeString::doAppend((uint64_t)this + 8, (uint64_t)&v40, 0, 1);
            }
          }
          else
          {
            v20 = 0;
            LOWORD(v23) = 39;
            if (!v21)
              goto LABEL_31;
          }
LABEL_32:
          v41 = v23;
          icu::UnicodeString::doAppend((uint64_t)this + 8, (uint64_t)&v41, 0, 1);
          if (v21 == 65278)
            v21 = 0;
          else
            ++v21;
          goto LABEL_55;
        }
      }
      else
      {
        if (v20 || v23 != 123)
          goto LABEL_30;
        if (v21 >= 1)
        {
          if (*((__int16 *)this + 8) < 0)
            v24 = *((_DWORD *)this + 5);
          else
            v24 = *((unsigned __int16 *)this + 8) >> 5;
          icu::UnicodeString::setCharAt((icu::SimpleFormatter *)((char *)this + 8), v24 + ~v21, v21 + 256);
          v21 = 0;
        }
        v25 = v22 + 2;
        if ((int)v22 + 2 >= v16
          || (v26 = *(unsigned __int16 *)&v13[2 * (int)v19] - 48, v26 > 9)
          || *(_WORD *)&v13[2 * v25] != 125)
        {
          if ((int)v19 < v16)
          {
            v27 = *(unsigned __int16 *)&v13[2 * (int)v19];
            if ((v27 - 49) <= 8)
            {
              v26 = v27 - 48;
              v28 = v16 - (uint64_t)(int)v25;
              LODWORD(v19) = v22 + 3;
              v29 = &v13[2 * (int)v25];
              while (v28)
              {
                v30 = *(unsigned __int16 *)v29;
                if ((v30 - 48) > 9)
                {
                  if (v26 < 0 || v30 != 125)
                    goto LABEL_65;
                  goto LABEL_51;
                }
                v26 = v30 + 10 * v26 - 48;
                --v28;
                v29 += 2;
                LODWORD(v19) = v19 + 1;
                if (v26 > 255)
                  goto LABEL_65;
              }
            }
          }
          goto LABEL_65;
        }
        LODWORD(v19) = v22 + 3;
LABEL_51:
        v31 = v37;
        if (v26 > v37)
          v31 = v26;
        v37 = v31;
        v39 = v26;
        icu::UnicodeString::doAppend((uint64_t)this + 8, (uint64_t)&v39, 0, 1);
      }
      v20 = 0;
LABEL_55:
      if ((int)v19 >= v16)
      {
        if (v21 < 1)
        {
          a4 = v34;
          a3 = v35;
          v32 = v37;
        }
        else
        {
          if (*((__int16 *)this + 8) < 0)
            v33 = *((_DWORD *)this + 5);
          else
            v33 = *((unsigned __int16 *)this + 8) >> 5;
          v32 = v37;
          icu::UnicodeString::setCharAt(v17, v33 + ~v21, v21 + 256);
          a4 = v34;
          a3 = v35;
        }
        goto LABEL_62;
      }
    }
  }
  v32 = -1;
LABEL_62:
  if (v32 >= a4 || v32 + 1 < a3)
  {
LABEL_65:
    result = 0;
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  else
  {
    icu::UnicodeString::setCharAt(v17, 0, v32 + 1);
    return 1;
  }
  return result;
}

icu::UnicodeString *icu::SimpleFormatter::format(icu::SimpleFormatter *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  const icu::UnicodeString *v6[2];

  v6[1] = *(const icu::UnicodeString **)MEMORY[0x1E0C80C00];
  v6[0] = a2;
  icu::SimpleFormatter::formatAndAppend(this, v6, 1u, a3, 0, 0, a4);
  return a3;
}

icu::UnicodeString *icu::SimpleFormatter::formatAndAppend(icu::SimpleFormatter *this, const icu::UnicodeString *const *a2, unsigned int a3, icu::UnicodeString *a4, void *__b, int a6, UErrorCode *a7)
{
  BOOL v9;
  unsigned int v10;
  unsigned __int16 *v11;
  char *v13;
  int v14;

  if (*(int *)a7 > 0)
    return a4;
  if ((a3 & 0x80000000) != 0 || (a3 ? (v9 = a2 == 0) : (v9 = 0), v9 || a6 < 0 || !__b && a6))
  {
LABEL_20:
    *a7 = U_ILLEGAL_ARGUMENT_ERROR;
    return a4;
  }
  v10 = *((unsigned __int16 *)this + 8);
  if ((v10 & 0x11) != 0)
  {
    v11 = 0;
  }
  else if ((v10 & 2) != 0)
  {
    v11 = (unsigned __int16 *)((char *)this + 18);
  }
  else
  {
    v11 = (unsigned __int16 *)*((_QWORD *)this + 4);
  }
  if ((v10 & 0x8000) != 0)
  {
    if (!*((_DWORD *)this + 5))
      goto LABEL_22;
  }
  else if (!(v10 >> 5))
  {
    goto LABEL_22;
  }
  if (*v11 > a3)
    goto LABEL_20;
LABEL_22:
  if ((v10 & 0x11) != 0)
  {
    v13 = 0;
  }
  else if ((v10 & 2) != 0)
  {
    v13 = (char *)this + 18;
  }
  else
  {
    v13 = (char *)*((_QWORD *)this + 4);
  }
  if ((v10 & 0x8000) != 0)
    v14 = *((_DWORD *)this + 5);
  else
    v14 = v10 >> 5;
  icu::SimpleFormatter::format((uint64_t)v13, v14, (uint64_t)a2, a4, 0, 1, __b, a6, (int *)a7);
  return a4;
}

icu::UnicodeString *icu::SimpleFormatter::format(icu::SimpleFormatter *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, icu::UnicodeString *a4, UErrorCode *a5)
{
  icu::UnicodeString *v7[3];

  v7[2] = *(icu::UnicodeString **)MEMORY[0x1E0C80C00];
  v7[0] = a2;
  v7[1] = a3;
  icu::SimpleFormatter::formatAndAppend(this, v7, 2u, a4, 0, 0, a5);
  return a4;
}

icu::UnicodeString *icu::SimpleFormatter::format(icu::SimpleFormatter *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, const icu::UnicodeString *a4, icu::UnicodeString *a5, UErrorCode *a6)
{
  const icu::UnicodeString *v8[4];

  v8[3] = *(const icu::UnicodeString **)MEMORY[0x1E0C80C00];
  v8[0] = a2;
  v8[1] = a3;
  v8[2] = a4;
  icu::SimpleFormatter::formatAndAppend(this, v8, 3u, a5, 0, 0, a6);
  return a5;
}

icu::UnicodeString *icu::SimpleFormatter::format(uint64_t a1, int a2, uint64_t a3, icu::UnicodeString *this, uint64_t a5, int a6, void *__b, int a8, int *a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;

  if (*a9 <= 0)
  {
    if (a8 >= 1)
      memset(__b, 255, 4 * a8);
    if (a2 > 1)
    {
      LODWORD(v15) = 1;
      do
      {
        v16 = *(unsigned __int16 *)(a1 + 2 * (int)v15);
        v15 = (int)v15 + 1;
        if (v16 > 0xFF)
        {
          v21 = v16 - 256;
          icu::UnicodeString::doAppend((uint64_t)this, a1 + 2 * v15, 0, (v16 - 256));
          LODWORD(v15) = v21 + v15;
        }
        else
        {
          v17 = *(_QWORD *)(a3 + 8 * v16);
          if (!v17)
            goto LABEL_30;
          if ((icu::UnicodeString *)v17 == this)
          {
            if (a6)
            {
LABEL_30:
              *a9 = 1;
              return this;
            }
            if ((_DWORD)v15 == 2)
            {
              if ((int)v16 < a8)
                *((_DWORD *)__b + v16) = 0;
              LODWORD(v15) = 2;
              continue;
            }
            if ((int)v16 < a8)
            {
              v22 = *((unsigned __int16 *)this + 4);
              v23 = (__int16)v22;
              v24 = v22 >> 5;
              if (v23 < 0)
                v24 = *((_DWORD *)this + 3);
              *((_DWORD *)__b + v16) = v24;
            }
            v17 = a5;
          }
          else if ((int)v16 < a8)
          {
            v18 = *((unsigned __int16 *)this + 4);
            v19 = (__int16)v18;
            v20 = v18 >> 5;
            if (v19 < 0)
              v20 = *((_DWORD *)this + 3);
            *((_DWORD *)__b + v16) = v20;
          }
          v25 = *(unsigned __int16 *)(v17 + 8);
          v26 = (__int16)v25;
          v27 = v25 >> 5;
          if (v26 >= 0)
            v28 = v27;
          else
            v28 = *(unsigned int *)(v17 + 12);
          icu::UnicodeString::doAppend((uint64_t)this, (const icu::UnicodeString *)v17, 0, v28);
        }
      }
      while ((int)v15 < a2);
    }
  }
  return this;
}

UChar **icu::SimpleFormatter::formatAndReplace(icu::SimpleFormatter *this, const icu::UnicodeString *const *a2, unsigned int a3, UChar **a4, void *__b, int a6, UErrorCode *a7)
{
  BOOL v10;
  unsigned int v13;
  unsigned __int16 *v14;
  int v15;
  unsigned int v16;
  __int16 v18;
  void *v19;
  int v20;
  int v21;
  unsigned int v22;
  UChar *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*(int *)a7 <= 0)
  {
    if ((a3 & 0x80000000) != 0)
      goto LABEL_18;
    v10 = a3 && a2 == 0;
    if (v10 || a6 < 0 || !__b && a6)
      goto LABEL_18;
    v13 = *((unsigned __int16 *)this + 8);
    if ((v13 & 0x11) != 0)
    {
      v14 = 0;
    }
    else if ((v13 & 2) != 0)
    {
      v14 = (unsigned __int16 *)((char *)this + 18);
    }
    else
    {
      v14 = (unsigned __int16 *)*((_QWORD *)this + 4);
    }
    if ((v13 & 0x8000) != 0)
    {
      v15 = *((_DWORD *)this + 5);
      if (v15)
      {
LABEL_17:
        v16 = *v14;
        if (v16 > a3)
        {
LABEL_18:
          *a7 = U_ILLEGAL_ARGUMENT_ERROR;
          return a4;
        }
        v24 = 0u;
        v25 = 0u;
        v27 = 0;
        v26 = 0u;
        v23 = (UChar *)off_1E2256B38;
        LOWORD(v24) = 2;
        if (v16 && v15 >= 2)
        {
          v20 = -1;
          v21 = 1;
          do
          {
            v22 = v14[v21];
            if (v22 > 0xFF)
            {
              v21 = v21 + v22 - 255;
            }
            else
            {
              ++v21;
              if ((UChar **)a2[v22] == a4)
              {
                if (v21 == 2)
                {
                  v20 = v22;
                }
                else if ((unsigned __int16)v24 <= 0x1Fu && *((unsigned __int16 *)a4 + 4) >= 0x20u)
                {
                  icu::UnicodeString::operator=(&v23, a4);
                }
              }
            }
          }
          while (v21 < v15);
          if ((v20 & 0x80000000) == 0)
          {
LABEL_26:
            icu::SimpleFormatter::format((uint64_t)v14, v15, (uint64_t)a2, (icu::UnicodeString *)a4, (uint64_t)&v23, 0, __b, a6, (int *)a7);
            icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v23);
            return a4;
          }
        }
LABEL_22:
        if (((_WORD)a4[1] & 1) != 0)
          v18 = 2;
        else
          v18 = (_WORD)a4[1] & 0x1F;
        *((_WORD *)a4 + 4) = v18;
        goto LABEL_26;
      }
    }
    else
    {
      v15 = v13 >> 5;
      if (v13 >> 5)
        goto LABEL_17;
    }
    v24 = 0u;
    v25 = 0u;
    v27 = 0;
    v26 = 0u;
    v23 = (UChar *)off_1E2256B38;
    LOWORD(v24) = 2;
    goto LABEL_22;
  }
  return a4;
}

uint64_t icu::SimpleFormatter::getTextWithNoArguments@<X0>(void *__b@<X2>, unsigned __int16 *a2@<X0>, int a3@<W1>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  if (a4 >= 1)
    memset(__b, 255, 4 * a4);
  if (a3)
    v10 = ~*a2;
  else
    v10 = -1;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  result = icu::UnicodeString::UnicodeString((icu::UnicodeString *)a5, v10 + a3, 0, 0);
  if (a3 >= 2)
  {
    LODWORD(v12) = 1;
    do
    {
      v13 = a2[(int)v12];
      v12 = (int)v12 + 1;
      if (v13 < 0x101)
      {
        if ((int)v13 < a4)
        {
          v15 = *(unsigned __int16 *)(a5 + 8);
          v16 = (__int16)v15;
          v17 = v15 >> 5;
          if (v16 < 0)
            v17 = *(_DWORD *)(a5 + 12);
          *((_DWORD *)__b + v13) = v17;
        }
      }
      else
      {
        v14 = v13 - 256;
        result = icu::UnicodeString::doAppend(a5, (uint64_t)&a2[v12], 0, v13 - 256);
        LODWORD(v12) = v14 + v12;
      }
    }
    while ((int)v12 < a3);
  }
  return result;
}

void *icu::unisets::get(int a1)
{
  unsigned int v2;
  icu::UnicodeSet *v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  icu::UnicodeSet *v7;
  uint64_t *v8;
  uint64_t *v11;
  icu::UnicodeSet *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t *v16;
  icu::UnicodeSet *v17;
  void *v18;
  void *v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  icu::UnicodeSet *v26;
  uint64_t *v27;
  unint64_t v28;
  icu::UnicodeSet *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  icu::UnicodeSet *v33;
  UErrorCode v34;
  void (**v35)(icu::ResourceSink *__hidden);
  _BYTE v36[64];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v34 = U_ZERO_ERROR;
  v2 = atomic_load(&dword_1ECD27878);
  if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_1ECD27878))
  {
    if (dword_1ECD2787C > 0 || v34 > U_ZERO_ERROR)
      return &unk_1ECD277B0;
  }
  else
  {
    sub_18BC0ECC4(0, (uint64_t)sub_18BBF82DC);
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&unk_1ECD277B0);
    icu::UnicodeSet::freeze(v3);
    byte_1ECD27880 = 1;
    v5 = icu::UMemory::operator new(qword_1ECD27000, (icu::UMemory *)0xC8, v4);
    if (v5)
    {
      v7 = (icu::UnicodeSet *)v5;
      icu::UnicodeString::UnicodeString((uint64_t)v36, (uint64_t)"[");
      icu::UnicodeSet::UnicodeSet(v7, (const icu::UnicodeString *)v36, &v34);
      qword_1ECD27890 = (uint64_t)v7;
      icu::UnicodeString::~UnicodeString(qword_1ECD27000, (icu::UnicodeString *)v36);
    }
    else
    {
      v8 = qword_1ECD27000;
      qword_1ECD27890 = 0;
    }
    v11 = icu::UMemory::operator new(v8, (icu::UMemory *)0xC8, v6);
    if (v11)
    {
      v12 = (icu::UnicodeSet *)v11;
      icu::UnicodeString::UnicodeString((uint64_t)v36, (uint64_t)L"[[:Bidi_Control:]]");
      icu::UnicodeSet::UnicodeSet(v12, (const icu::UnicodeString *)v36, &v34);
      qword_1ECD27898 = (uint64_t)v12;
      icu::UnicodeString::~UnicodeString(qword_1ECD27000, (icu::UnicodeString *)v36);
    }
    else
    {
      qword_1ECD27898 = 0;
    }
    v13 = ures_open(0, "root", (int *)&v34);
    v14 = v13;
    if (v34 <= U_ZERO_ERROR)
    {
      v35 = &off_1E224B850;
      ures_getAllItemsWithFallback((uint64_t)v13, "parse", (uint64_t)&v35, (int *)&v34);
      if (v34 <= U_ZERO_ERROR)
      {
        v16 = icu::UMemory::operator new((uint64_t *)v34, (icu::UMemory *)0xC8, v15);
        if (v16)
        {
          v17 = (icu::UnicodeSet *)v16;
          icu::UnicodeString::UnicodeString((uint64_t)v36, (uint64_t)"[");
          icu::UnicodeSet::UnicodeSet(v17, (const icu::UnicodeString *)v36, &v34);
          icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v36);
          if (v34 <= U_ZERO_ERROR)
          {
            icu::UnicodeSet::addAll((icu::UVector **)v17, (const icu::UnicodeSet *)qword_1ECD278C0);
            qword_1ECD278C8 = (uint64_t)v17;
            qword_1ECD278D0 = (uint64_t)sub_18BBF834C(3, 4uLL, v20);
            qword_1ECD278D8 = (uint64_t)sub_18BBF834C(5, 6uLL, v21);
            v24 = icu::UMemory::operator new(v23, (icu::UMemory *)0xC8, v22);
            if (v24)
            {
              v26 = (icu::UnicodeSet *)v24;
              icu::UnicodeString::UnicodeString((uint64_t)v36, (uint64_t)&unk_18BE35B8E);
              icu::UnicodeSet::UnicodeSet(v26, (const icu::UnicodeString *)v36, &v34);
              qword_1ECD27900 = (uint64_t)v26;
              icu::UnicodeString::~UnicodeString(qword_1ECD27000, (icu::UnicodeString *)v36);
            }
            else
            {
              qword_1ECD27900 = 0;
            }
            if (v34 <= U_ZERO_ERROR)
            {
              v27 = icu::UMemory::operator new((uint64_t *)v34, (icu::UMemory *)0xC8, v25);
              if (v27)
              {
                v29 = (icu::UnicodeSet *)v27;
                icu::UnicodeString::UnicodeString((uint64_t)v36, (uint64_t)&unk_18BE35B96);
                icu::UnicodeSet::UnicodeSet(v29, (const icu::UnicodeString *)v36, &v34);
                qword_1ECD27930 = (uint64_t)v29;
                icu::UnicodeString::~UnicodeString(qword_1ECD27000, (icu::UnicodeString *)v36);
              }
              else
              {
                qword_1ECD27930 = 0;
              }
              if (v34 <= U_ZERO_ERROR)
              {
                qword_1ECD27938 = (uint64_t)sub_18BBF83E0(9, v28, (uint64_t *)v34);
                v32 = 0;
                qword_1ECD27940 = (uint64_t)sub_18BBF83E0(10, v30, v31);
                do
                {
                  v33 = (icu::UnicodeSet *)qword_1ECD27888[v32];
                  if (v33)
                    icu::UnicodeSet::freeze(v33);
                  ++v32;
                }
                while (v32 != 24);
              }
            }
          }
          else
          {
            icu::UnicodeSet::~UnicodeSet(v17);
            icu::UMemory::operator delete(v19);
          }
        }
        else if (v34 <= U_ZERO_ERROR)
        {
          v34 = U_MEMORY_ALLOCATION_ERROR;
        }
      }
      icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v35);
    }
    if (v14)
      ures_close(v14);
    dword_1ECD2787C = v34;
    icu::umtx_initImplPostInit(&dword_1ECD27878);
    if (v34 >= U_ILLEGAL_ARGUMENT_ERROR)
      return &unk_1ECD277B0;
  }
  if (qword_1ECD27888[a1])
    return (void *)qword_1ECD27888[a1];
  else
    return &unk_1ECD277B0;
}

uint64_t icu::unisets::chooseFrom(const icu::UnicodeString *a1, unsigned int a2)
{
  icu::UVector **v4;

  v4 = (icu::UVector **)icu::unisets::get(a2);
  if (icu::UnicodeSet::contains(v4, a1))
    return a2;
  else
    return 0xFFFFFFFFLL;
}

uint64_t icu::unisets::chooseFrom(UChar **a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  icu::UVector **v6;
  icu::UVector **v7;
  void *v8;
  _BYTE v10[64];
  uint64_t v11;

  v4 = a2;
  v11 = *MEMORY[0x1E0C80C00];
  v6 = (icu::UVector **)icu::unisets::get(a2);
  if (!icu::UnicodeSet::contains(v6, (const icu::UnicodeString *)a1))
  {
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v10, a1);
    v7 = (icu::UVector **)icu::unisets::get(a3);
    if (icu::UnicodeSet::contains(v7, (const icu::UnicodeString *)v10))
      v4 = a3;
    else
      v4 = 0xFFFFFFFFLL;
    icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v10);
  }
  return v4;
}

uint64_t sub_18BBF82DC()
{
  uint64_t i;
  icu::UnicodeSet *v1;
  void *v2;

  if ((byte_1ECD27880 & 1) != 0)
  {
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)&unk_1ECD277B0);
    byte_1ECD27880 = 0;
  }
  for (i = 0; i != 24; ++i)
  {
    v1 = (icu::UnicodeSet *)qword_1ECD27888[i];
    if (v1)
    {
      icu::UnicodeSet::~UnicodeSet(v1);
      icu::UMemory::operator delete(v2);
    }
    qword_1ECD27888[i] = 0;
  }
  atomic_store(0, &dword_1ECD27878);
  return 1;
}

icu::UVector **sub_18BBF834C@<X0>(int a1@<W0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v3;
  icu::UnicodeSet *v5;
  icu::UVector **v6;
  icu::UVector **v7;
  const icu::UnicodeSet *v8;
  const icu::UnicodeSet *v9;
  const icu::UnicodeSet *v10;

  v3 = a2;
  v5 = (icu::UnicodeSet *)icu::UMemory::operator new(a3, (icu::UMemory *)0xC8, a2);
  v6 = (icu::UVector **)v5;
  if (v5)
  {
    icu::UnicodeSet::UnicodeSet(v5);
    if (qword_1ECD27888[a1])
      v8 = (const icu::UnicodeSet *)qword_1ECD27888[a1];
    else
      v8 = (const icu::UnicodeSet *)&unk_1ECD277B0;
    icu::UnicodeSet::addAll(v7, v8);
    if (qword_1ECD27888[v3])
      v9 = (const icu::UnicodeSet *)qword_1ECD27888[v3];
    else
      v9 = (const icu::UnicodeSet *)&unk_1ECD277B0;
    icu::UnicodeSet::addAll(v6, v9);
    if (qword_1ECD278C8)
      v10 = (const icu::UnicodeSet *)qword_1ECD278C8;
    else
      v10 = (const icu::UnicodeSet *)&unk_1ECD277B0;
    icu::UnicodeSet::addAll(v6, v10);
    icu::UnicodeSet::freeze((icu::UnicodeSet *)v6);
  }
  return v6;
}

icu::UVector **sub_18BBF83E0@<X0>(int a1@<W0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::UnicodeSet *v4;
  icu::UVector **v5;
  icu::UVector **v6;
  const icu::UnicodeSet *v7;
  const icu::UnicodeSet *v8;

  v4 = (icu::UnicodeSet *)icu::UMemory::operator new(a3, (icu::UMemory *)0xC8, a2);
  v5 = (icu::UVector **)v4;
  if (v4)
  {
    icu::UnicodeSet::UnicodeSet(v4);
    if (qword_1ECD27930)
      v7 = (const icu::UnicodeSet *)qword_1ECD27930;
    else
      v7 = (const icu::UnicodeSet *)&unk_1ECD277B0;
    icu::UnicodeSet::addAll(v6, v7);
    if (qword_1ECD27888[a1])
      v8 = (const icu::UnicodeSet *)qword_1ECD27888[a1];
    else
      v8 = (const icu::UnicodeSet *)&unk_1ECD277B0;
    icu::UnicodeSet::addAll(v5, v8);
    icu::UnicodeSet::freeze((icu::UnicodeSet *)v5);
  }
  return v5;
}

void sub_18BBF8460(icu::ResourceSink *a1)
{
  void *v1;

  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v1);
}

_QWORD *sub_18BBF8474(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  _QWORD *result;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  int v14;
  void *v15;
  int32_t v16;
  uint64_t *v17;
  int v18;
  int32_t v19;
  int32_t v20;
  int32_t v21;
  int32_t v22;
  int32_t v23;
  int32_t v24;
  int32_t v25;
  int32_t v26;
  int32_t v27;
  int32_t v28;
  int32_t v29;
  UErrorCode v30;
  _QWORD v31[2];
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  char *__s1;
  uint64_t v38;
  int v39;
  _OWORD v40[4];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v36 = 0;
  __s1 = a2;
  memset(v35, 0, sizeof(v35));
  result = (*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(_QWORD *)a3 + 88))(v35, a3, a5);
  if (*(int *)a5 <= 0)
  {
    result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v35, 0, (const char **)&__s1, a3);
    if ((_DWORD)result)
    {
      v8 = 0;
      while (1)
      {
        if (strcmp(__s1, "date"))
        {
          v34 = 0;
          memset(v33, 0, sizeof(v33));
          result = (*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(_QWORD *)a3 + 88))(v33, a3, a5);
          if (*(int *)a5 > 0)
            return result;
          if (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v33, 0, (const char **)&__s1, a3))
            break;
        }
LABEL_80:
        result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v35, ++v8, (const char **)&__s1, a3);
        if (!(_DWORD)result)
          return result;
      }
      v9 = 0;
      while (1)
      {
        v10 = strcmp(__s1, "lenient");
        v31[0] = 0;
        v31[1] = 0;
        v32 = 0;
        result = (*(_QWORD *(**)(_QWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(_QWORD *)a3 + 80))(v31, a3, a5);
        if (*(int *)a5 > 0)
          return result;
        if ((int)v32 >= 1)
          break;
LABEL_79:
        if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v33, ++v9, (const char **)&__s1, a3))goto LABEL_80;
      }
      v11 = 0;
      v12 = v10 == 0;
      if (v10)
        v13 = 6;
      else
        v13 = 4;
      if (v12)
        v14 = 3;
      else
        v14 = 5;
      while (1)
      {
        icu::ResourceArray::getValue((icu::ResourceArray *)v31, v11, a3);
        memset(v40, 0, sizeof(v40));
        v39 = 0;
        v38 = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(_QWORD *)a3 + 32))(a3, &v39, a5);
        icu::UnicodeString::UnicodeString(v40, 1, &v38);
        v15 = (void *)*(unsigned int *)a5;
        if ((int)v15 > 0)
          return icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v40);
        if ((SWORD4(v40[0]) & 0x8000u) == 0)
          v16 = WORD4(v40[0]) >> 5;
        else
          v16 = HIDWORD(v40[0]);
        v17 = (uint64_t *)icu::UnicodeString::doIndexOf((uint64_t)v40, 0x2Eu, 0, v16);
        v18 = v13;
        if ((_DWORD)v17 == -1)
        {
          v19 = (SWORD4(v40[0]) & 0x8000u) == 0 ? WORD4(v40[0]) >> 5 : HIDWORD(v40[0]);
          v17 = (uint64_t *)icu::UnicodeString::doIndexOf((uint64_t)v40, 0x2Cu, 0, v19);
          v18 = v14;
          if ((_DWORD)v17 == -1)
          {
            if ((SWORD4(v40[0]) & 0x8000u) == 0)
              v20 = WORD4(v40[0]) >> 5;
            else
              v20 = HIDWORD(v40[0]);
            if (icu::UnicodeString::doIndexOf((uint64_t)v40, 0x2Bu, 0, v20) == -1)
            {
              if ((SWORD4(v40[0]) & 0x8000u) == 0)
                v21 = WORD4(v40[0]) >> 5;
              else
                v21 = HIDWORD(v40[0]);
              if (icu::UnicodeString::doIndexOf((uint64_t)v40, 0x2Du, 0, v21) == -1)
              {
                if ((SWORD4(v40[0]) & 0x8000u) == 0)
                  v22 = WORD4(v40[0]) >> 5;
                else
                  v22 = HIDWORD(v40[0]);
                if (icu::UnicodeString::doIndexOf((uint64_t)v40, 0x24u, 0, v22) == -1)
                {
                  if ((SWORD4(v40[0]) & 0x8000u) == 0)
                    v23 = WORD4(v40[0]) >> 5;
                  else
                    v23 = HIDWORD(v40[0]);
                  if (icu::UnicodeString::doIndexOf((uint64_t)v40, 0xA3u, 0, v23) == -1)
                  {
                    if ((SWORD4(v40[0]) & 0x8000u) == 0)
                      v24 = WORD4(v40[0]) >> 5;
                    else
                      v24 = HIDWORD(v40[0]);
                    if (icu::UnicodeString::doIndexOf((uint64_t)v40, 0x20B9u, 0, v24) == -1)
                    {
                      if ((SWORD4(v40[0]) & 0x8000u) == 0)
                        v25 = WORD4(v40[0]) >> 5;
                      else
                        v25 = HIDWORD(v40[0]);
                      if (icu::UnicodeString::doIndexOf((uint64_t)v40, 0xA5u, 0, v25) == -1)
                      {
                        if ((SWORD4(v40[0]) & 0x8000u) == 0)
                          v26 = WORD4(v40[0]) >> 5;
                        else
                          v26 = HIDWORD(v40[0]);
                        if (icu::UnicodeString::doIndexOf((uint64_t)v40, 0x20A9u, 0, v26) == -1)
                        {
                          if ((SWORD4(v40[0]) & 0x8000u) == 0)
                            v27 = WORD4(v40[0]) >> 5;
                          else
                            v27 = HIDWORD(v40[0]);
                          if (icu::UnicodeString::doIndexOf((uint64_t)v40, 0x25u, 0, v27) == -1)
                          {
                            if ((SWORD4(v40[0]) & 0x8000u) == 0)
                              v28 = WORD4(v40[0]) >> 5;
                            else
                              v28 = HIDWORD(v40[0]);
                            if (icu::UnicodeString::doIndexOf((uint64_t)v40, 0x2030u, 0, v28) == -1)
                            {
                              if ((SWORD4(v40[0]) & 0x8000u) == 0)
                                v29 = WORD4(v40[0]) >> 5;
                              else
                                v29 = HIDWORD(v40[0]);
                              if (icu::UnicodeString::doIndexOf((uint64_t)v40, 0x2019u, 0, v29) == -1)
                                goto LABEL_77;
                              v18 = 7;
                            }
                            else
                            {
                              v18 = 14;
                            }
                          }
                          else
                          {
                            v18 = 13;
                          }
                        }
                        else
                        {
                          v18 = 20;
                        }
                      }
                      else
                      {
                        v18 = 19;
                      }
                    }
                    else
                    {
                      v18 = 18;
                    }
                  }
                  else
                  {
                    v18 = 17;
                  }
                }
                else
                {
                  v18 = 16;
                }
              }
              else
              {
                v18 = 11;
              }
            }
            else
            {
              v18 = 12;
            }
          }
        }
        sub_18BBF8980(v18, (const icu::UnicodeString *)v40, a5, v17);
LABEL_77:
        v30 = *a5;
        result = icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v40);
        if (v30 >= U_ILLEGAL_ARGUMENT_ERROR)
          return result;
        if ((int)++v11 >= (int)v32)
          goto LABEL_79;
      }
    }
  }
  return result;
}

icu::UnicodeSet *sub_18BBF8980@<X0>(int a1@<W0>, const icu::UnicodeString *a2@<X1>, UErrorCode *a3@<X2>, uint64_t *a4@<X8>)
{
  icu::UnicodeSet *result;

  result = (icu::UnicodeSet *)icu::UMemory::operator new(a4, (icu::UMemory *)0xC8, (unint64_t)a2);
  if (result)
    result = icu::UnicodeSet::UnicodeSet(result, a2, a3);
  qword_1ECD27888[a1] = (uint64_t)result;
  return result;
}

icu::StringPiece *icu::StringPiece::StringPiece(icu::StringPiece *this, const char *__s)
{
  int v3;

  *(_QWORD *)this = __s;
  if (__s)
    v3 = strlen(__s);
  else
    v3 = 0;
  *((_DWORD *)this + 2) = v3;
  return this;
}

{
  int v3;

  *(_QWORD *)this = __s;
  if (__s)
    v3 = strlen(__s);
  else
    v3 = 0;
  *((_DWORD *)this + 2) = v3;
  return this;
}

uint64_t icu::StringPiece::StringPiece(uint64_t this, const icu::StringPiece *a2, int a3)
{
  int v3;
  int v4;

  v3 = *((_DWORD *)a2 + 2);
  if (v3 >= a3)
    v4 = a3;
  else
    v4 = *((_DWORD *)a2 + 2);
  if (a3 < 0)
    v4 = 0;
  *(_QWORD *)this = *(_QWORD *)a2 + v4;
  *(_DWORD *)(this + 8) = v3 - v4;
  return this;
}

{
  int v3;
  int v4;

  v3 = *((_DWORD *)a2 + 2);
  if (v3 >= a3)
    v4 = a3;
  else
    v4 = *((_DWORD *)a2 + 2);
  if (a3 < 0)
    v4 = 0;
  *(_QWORD *)this = *(_QWORD *)a2 + v4;
  *(_DWORD *)(this + 8) = v3 - v4;
  return this;
}

uint64_t icu::StringPiece::StringPiece(uint64_t this, const icu::StringPiece *a2, int a3, int a4)
{
  int v4;
  int v5;
  int v6;

  v4 = *((_DWORD *)a2 + 2);
  if (v4 >= a3)
    v5 = a3;
  else
    v5 = *((_DWORD *)a2 + 2);
  if (a3 < 0)
    v5 = 0;
  v6 = v4 - v5;
  if (v6 >= a4)
    v6 = a4;
  if (a4 < 0)
    v6 = 0;
  *(_QWORD *)this = *(_QWORD *)a2 + v5;
  *(_DWORD *)(this + 8) = v6;
  return this;
}

{
  int v4;
  int v5;
  int v6;

  v4 = *((_DWORD *)a2 + 2);
  if (v4 >= a3)
    v5 = a3;
  else
    v5 = *((_DWORD *)a2 + 2);
  if (a3 < 0)
    v5 = 0;
  v6 = v4 - v5;
  if (v6 >= a4)
    v6 = a4;
  if (a4 < 0)
    v6 = 0;
  *(_QWORD *)this = *(_QWORD *)a2 + v5;
  *(_DWORD *)(this + 8) = v6;
  return this;
}

size_t icu::StringPiece::set(icu::StringPiece *this, const char *__s)
{
  size_t result;

  *(_QWORD *)this = __s;
  if (__s)
    result = strlen(__s);
  else
    result = 0;
  *((_DWORD *)this + 2) = result;
  return result;
}

uint64_t icu::StringPiece::find(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = v4 | a3;
  if ((_DWORD)v5)
  {
    if (v4 <= a4)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      v6 = a4;
      while (a3 >= 1)
      {
        v7 = 0;
        while (*(unsigned __int8 *)(*(_QWORD *)a1 + v6 + v7) == *(unsigned __int8 *)(a2 + v7))
        {
          if (a3 == ++v7)
          {
            v8 = -a3;
            LODWORD(v6) = v6 + v7;
            return (v8 + v6);
          }
        }
        ++v6;
        v5 = 0xFFFFFFFFLL;
        if (v4 <= (int)v6)
          return v5;
      }
      v8 = 0;
      return (v8 + v6);
    }
  }
  return v5;
}

uint64_t icu::StringPiece::compare@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v4 = *(unsigned int *)(a1 + 8);
  if ((int)v4 < 1)
  {
    LODWORD(v4) = 0;
LABEL_13:
    if ((int)v4 >= a3)
      return 0;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v5 = 0;
    while (a3 != v5)
    {
      v6 = *(char *)(*(_QWORD *)a1 + v5);
      v7 = *(char *)(a2 + v5);
      if (v6 > v7)
        LODWORD(a4) = 1;
      if (v6 < v7)
        a4 = 0xFFFFFFFFLL;
      else
        a4 = a4;
      if (*(unsigned __int8 *)(*(_QWORD *)a1 + v5) != v7)
        return a4;
      if (v4 == ++v5)
        goto LABEL_13;
    }
    return 1;
  }
}

BOOL icu::operator==(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;

  v2 = *((int *)a1 + 2);
  if ((_DWORD)v2 != *((_DWORD *)a2 + 2))
    return 0;
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = *a2;
    if (v3[v2 - 1] == v4[v2 - 1])
      return memcmp(v3, v4, v2 - 1) == 0;
    return 0;
  }
  return 1;
}

_QWORD *icu::StringTrieBuilder::StringTrieBuilder(_QWORD *this)
{
  *this = off_1E224B898;
  this[1] = 0;
  return this;
}

void icu::StringTrieBuilder::~StringTrieBuilder(void ***this)
{
  *this = (void **)off_1E224B898;
  uhash_close(this[1]);
  this[1] = 0;
  icu::UObject::~UObject((icu::UObject *)this);
}

void icu::StringTrieBuilder::deleteCompactBuilder(void ***this)
{
  uhash_close(this[1]);
  this[1] = 0;
}

int32x2_t *icu::StringTrieBuilder::createCompactBuilder(int32x2_t *this, int a2, UErrorCode *a3)
{
  int32x2_t *v4;

  if (*(int *)a3 <= 0)
  {
    v4 = this;
    this = uhash_openSize((uint64_t)sub_18BBF8D98, (uint64_t)sub_18BBF8DA0, 0, a2, (int *)a3);
    v4[1] = (int32x2_t)this;
    if (*(int *)a3 <= 0)
    {
      if (this)
        return (int32x2_t *)uhash_setKeyDeleter((uint64_t)this, (uint64_t)uprv_deleteUObject);
      else
        *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return this;
}

uint64_t sub_18BBF8D98(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_18BBF8DA0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

void icu::StringTrieBuilder::build(icu::StringTrieBuilder *this, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  icu::StringTrieBuilder::Node *Node;
  icu::StringTrieBuilder::Node *v8;

  if ((_DWORD)a2)
  {
    icu::StringTrieBuilder::createCompactBuilder((int32x2_t *)this, 2 * a3, a4);
    Node = icu::StringTrieBuilder::makeNode(this, 0, a3, 0, a4);
    if (*(int *)a4 <= 0)
    {
      v8 = Node;
      (*(void (**)(icu::StringTrieBuilder::Node *, uint64_t))(*(_QWORD *)Node + 32))(Node, 0xFFFFFFFFLL);
      (*(void (**)(icu::StringTrieBuilder::Node *, icu::StringTrieBuilder *))(*(_QWORD *)v8 + 40))(v8, this);
    }
    uhash_close(*((void ***)this + 1));
    *((_QWORD *)this + 1) = 0;
  }
  else
  {
    icu::StringTrieBuilder::writeNode(this, a2, a3, 0);
  }
}

uint64_t icu::StringTrieBuilder::writeNode(icu::StringTrieBuilder *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;

  if ((*(unsigned int (**)(icu::StringTrieBuilder *))(*(_QWORD *)this + 24))(this) == (_DWORD)a4)
  {
    v8 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t))(*(_QWORD *)this + 40))(this, a2);
    if ((_DWORD)a2 + 1 == (_DWORD)a3)
      return (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, v8, 1);
    v10 = 1;
    a2 = (a2 + 1);
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  v11 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(_QWORD *)this + 32))(this, a2, a4);
  v12 = (*(uint64_t (**)(icu::StringTrieBuilder *, _QWORD, uint64_t))(*(_QWORD *)this + 32))(this, (a3 - 1), a4);
  v13 = *(_QWORD *)this;
  if (v11 == v12)
  {
    v14 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, _QWORD, uint64_t))(v13 + 48))(this, a2, (a3 - 1), a4);
    icu::StringTrieBuilder::writeNode(this, a2, a3, v14);
    v15 = (v14 - a4);
    v16 = (*(uint64_t (**)(icu::StringTrieBuilder *))(*(_QWORD *)this + 104))(this);
    if ((int)v15 > (int)v16)
    {
      v17 = v16;
      v18 = v16 - 1;
      v19 = -(int)v16;
      do
      {
        (*(void (**)(icu::StringTrieBuilder *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 128))(this, a2, (v19 + v14), v17);
        v20 = (*(uint64_t (**)(icu::StringTrieBuilder *))(*(_QWORD *)this + 96))(this);
        (*(void (**)(icu::StringTrieBuilder *, _QWORD))(*(_QWORD *)this + 120))(this, (v18 + v20));
        v14 -= v17;
      }
      while (v14 - (int)a4 > (int)v17);
      v15 = (v14 - a4);
      v10 = v10;
    }
    (*(void (**)(icu::StringTrieBuilder *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 128))(this, a2, a4, v15);
    v21 = v15
        + (*(unsigned int (**)(icu::StringTrieBuilder *))(*(_QWORD *)this + 96))(this)
        - 1;
  }
  else
  {
    v22 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t, uint64_t))(v13 + 56))(this, a2, a3, a4);
    icu::StringTrieBuilder::writeBranchSubNode(this, a2, a3, a4, v22);
    v21 = (v22 - 1);
    if (v22 > (*(int (**)(icu::StringTrieBuilder *))(*(_QWORD *)this + 96))(this))
    {
      (*(void (**)(icu::StringTrieBuilder *, _QWORD))(*(_QWORD *)this + 120))(this, (v22 - 1));
      v21 = 0;
    }
  }
  return (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 144))(this, v10, v8, v21);
}

icu::StringTrieBuilder::Node *icu::StringTrieBuilder::makeNode(icu::StringTrieBuilder *this, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  icu::StringTrieBuilder::Node *Node;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  icu::StringTrieBuilder::Node *v22;
  uint64_t v23;
  int v24;
  icu::StringTrieBuilder::Node *BranchSubNode;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  icu::StringTrieBuilder::Node *v33;
  int v34;
  unsigned int v35;

  if (*(int *)a5 > 0)
    return 0;
  v11 = (*(uint64_t (**)(icu::StringTrieBuilder *))(*(_QWORD *)this + 24))(this);
  if (v11 == (_DWORD)a4)
  {
    v12 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t))(*(_QWORD *)this + 40))(this, a2);
    if ((_DWORD)a2 + 1 == (_DWORD)a3)
      return (icu::StringTrieBuilder::Node *)icu::StringTrieBuilder::registerFinalValue(this, v12, a5);
    a2 = (a2 + 1);
  }
  else
  {
    v12 = 0;
  }
  v13 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(_QWORD *)this + 32))(this, a2, a4);
  v14 = (*(uint64_t (**)(icu::StringTrieBuilder *, _QWORD, uint64_t))(*(_QWORD *)this + 32))(this, (a3 - 1), a4);
  v15 = *(_QWORD *)this;
  if (v13 == v14)
  {
    v34 = v11;
    v35 = v12;
    v16 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, _QWORD, uint64_t))(v15 + 48))(this, a2, (a3 - 1), a4);
    Node = (icu::StringTrieBuilder::Node *)icu::StringTrieBuilder::makeNode(this, a2, a3, v16, a5);
    v18 = (v16 - a4);
    v19 = (*(uint64_t (**)(icu::StringTrieBuilder *))(*(_QWORD *)this + 104))(this);
    if ((int)v18 > (int)v19)
    {
      v20 = v19;
      v21 = -(int)v19;
      do
      {
        v22 = (icu::StringTrieBuilder::Node *)(*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, _QWORD, uint64_t, icu::StringTrieBuilder::Node *))(*(_QWORD *)this + 112))(this, a2, (v21 + v16), v20, Node);
        Node = icu::StringTrieBuilder::registerNode(this, v22, a5);
        v16 -= v20;
      }
      while (v16 - (int)a4 > (int)v20);
      v18 = (v16 - a4);
    }
    v23 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t, uint64_t, icu::StringTrieBuilder::Node *))(*(_QWORD *)this + 112))(this, a2, a4, v18, Node);
    v11 = v34;
    v12 = v35;
  }
  else
  {
    v24 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t, uint64_t))(v15 + 56))(this, a2, a3, a4);
    BranchSubNode = icu::StringTrieBuilder::makeBranchSubNode(this, a2, a3, a4, v24, a5);
    v27 = icu::UMemory::operator new((icu::UMemory *)0x28, v26);
    v23 = v27;
    if (!v27)
      return icu::StringTrieBuilder::registerNode(this, (icu::StringTrieBuilder::Node *)v23, a5);
    if (BranchSubNode)
      v28 = *((_DWORD *)BranchSubNode + 2);
    else
      v28 = 0;
    *(_DWORD *)(v27 + 8) = v28 + 37 * v24 + 597268342;
    *(_DWORD *)(v27 + 12) = 0;
    *(_BYTE *)(v27 + 16) = 0;
    *(_QWORD *)v27 = &off_1E224BBC8;
    *(_DWORD *)(v27 + 20) = 0;
    *(_DWORD *)(v27 + 24) = v24;
    *(_QWORD *)(v27 + 32) = BranchSubNode;
  }
  if (v11 != (_DWORD)a4 || !v23)
    return icu::StringTrieBuilder::registerNode(this, (icu::StringTrieBuilder::Node *)v23, a5);
  if ((*(unsigned int (**)(icu::StringTrieBuilder *))(*(_QWORD *)this + 80))(this))
  {
    *(_BYTE *)(v23 + 16) = 1;
    *(_DWORD *)(v23 + 20) = v12;
    v30 = 37 * *(_DWORD *)(v23 + 8);
    v31 = v23;
  }
  else
  {
    v32 = icu::UMemory::operator new((icu::UMemory *)0x20, v29);
    if (!v32)
    {
      v23 = 0;
      return icu::StringTrieBuilder::registerNode(this, (icu::StringTrieBuilder::Node *)v23, a5);
    }
    v31 = v32;
    v30 = -1232566318;
    v33 = icu::StringTrieBuilder::registerNode(this, (icu::StringTrieBuilder::Node *)v23, a5);
    if (v33)
      v30 = 37 * *((_DWORD *)v33 + 2) - 1232566318;
    *(_DWORD *)(v31 + 12) = 0;
    *(_QWORD *)v31 = &off_1E224BA50;
    *(_QWORD *)(v31 + 24) = v33;
    *(_BYTE *)(v31 + 16) = 1;
    *(_DWORD *)(v31 + 20) = v12;
    v23 = v31;
  }
  *(_DWORD *)(v31 + 8) = v30 + v12;
  return icu::StringTrieBuilder::registerNode(this, (icu::StringTrieBuilder::Node *)v23, a5);
}

uint64_t icu::StringTrieBuilder::writeBranchSubNode(icu::StringTrieBuilder *this, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  int v29;
  int v30;
  _QWORD v31[2];
  _QWORD v32[2];
  int v33;
  _OWORD v34[3];
  uint64_t v35;
  _QWORD v36[3];
  int v37;
  uint64_t v38;

  v5 = a5;
  v29 = a3;
  v38 = *MEMORY[0x1E0C80C00];
  memset(v36, 0, sizeof(v36));
  v37 = 0;
  v35 = 0;
  memset(v34, 0, sizeof(v34));
  if ((*(int (**)(icu::StringTrieBuilder *))(*(_QWORD *)this + 88))(this) >= a5)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = a2;
      if (v5 >= 0)
        v11 = v5;
      else
        v11 = v5 + 1;
      a2 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 64))(this, a2, a4, (v11 >> 1));
      *((_WORD *)v36 + v9) = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(_QWORD *)this + 32))(this, a2, a4);
      *((_DWORD *)v34 + v9++) = icu::StringTrieBuilder::writeBranchSubNode(this, v10, a2, a4, v11 >> 1);
      v5 -= v11 >> 1;
    }
    while (v5 > (*(int (**)(icu::StringTrieBuilder *))(*(_QWORD *)this + 88))(this));
  }
  v12 = 0;
  v32[0] = 0;
  v32[1] = 0;
  v33 = 0;
  v30 = 0;
  if (v5 - 1 <= 1)
    v13 = 1;
  else
    v13 = (v5 - 1);
  v14 = (int *)v32;
  do
  {
    *v14 = a2;
    v15 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(_QWORD *)this + 32))(this, a2, a4);
    v16 = (*(uint64_t (**)(icu::StringTrieBuilder *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 72))(this, (a2 + 1), a4, v15);
    v17 = (_DWORD)a2 == (_DWORD)v16 - 1
       && (_DWORD)a4 + 1 == (*(unsigned int (**)(icu::StringTrieBuilder *, uint64_t))(*(_QWORD *)this + 24))(this, a2);
    *((_BYTE *)&v30 + v12++) = v17;
    ++v14;
    a2 = v16;
  }
  while (v13 != v12);
  *((_DWORD *)v32 + v13) = v16;
  v18 = v12 - 1;
  v31[0] = 0;
  v31[1] = 0;
  do
  {
    if (!*((_BYTE *)&v30 + v18))
      *((_DWORD *)v31 + v18) = icu::StringTrieBuilder::writeNode(this, *(v14 - 1), *v14, (int)a4 + 1);
    v19 = v18-- + 1;
    --v14;
  }
  while (v19 > 1);
  icu::StringTrieBuilder::writeNode(this, v16, v29, a4 + 1);
  v20 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(_QWORD *)this + 32))(this, v16, a4);
  result = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t))(*(_QWORD *)this + 120))(this, v20);
  if (v5 > 1)
  {
    v22 = (v5 - 2);
    do
    {
      v23 = *((unsigned int *)v32 + v22);
      v24 = *((_BYTE *)&v30 + v22);
      if (v24)
        v25 = (*(uint64_t (**)(icu::StringTrieBuilder *, _QWORD))(*(_QWORD *)this + 40))(this, *((unsigned int *)v32 + v22));
      else
        v25 = (result - *((_DWORD *)v31 + v22));
      (*(void (**)(icu::StringTrieBuilder *, uint64_t, _QWORD))(*(_QWORD *)this + 136))(this, v25, v24);
      v26 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(_QWORD *)this + 32))(this, v23, a4);
      result = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t))(*(_QWORD *)this + 120))(this, v26);
    }
    while (v22-- > 0);
  }
  if ((int)v9 >= 1)
  {
    v28 = v9 + 1;
    do
    {
      (*(void (**)(icu::StringTrieBuilder *, _QWORD))(*(_QWORD *)this + 152))(this, *((unsigned int *)v34 + (v28 - 2)));
      result = (*(uint64_t (**)(icu::StringTrieBuilder *, _QWORD))(*(_QWORD *)this + 120))(this, *((unsigned __int16 *)v36 + (v28-- - 2)));
    }
    while (v28 > 1);
  }
  return result;
}

uint64_t icu::StringTrieBuilder::registerFinalValue(icu::StringTrieBuilder *this, unsigned int a2, UErrorCode *a3)
{
  uint64_t v3;
  unsigned int v7;
  int *v8;
  unint64_t v9;
  uint64_t v11;
  void (**v12)(icu::UObject *__hidden);
  unsigned int v13;
  int v14;
  uint64_t v15;

  if (*(int *)a3 > 0)
    return 0;
  v7 = a2 + 41383797;
  v13 = a2 + 41383797;
  v14 = 0;
  v12 = &off_1E224B9A0;
  v15 = a2;
  v8 = uhash_find(*((_QWORD *)this + 1), (uint64_t)&v12);
  if (v8)
  {
    v3 = *((_QWORD *)v8 + 2);
  }
  else
  {
    v11 = icu::UMemory::operator new((icu::UMemory *)0x18, v9);
    v3 = v11;
    if (v11)
    {
      *(_DWORD *)(v11 + 8) = v7;
      *(_DWORD *)(v11 + 12) = 0;
      *(_QWORD *)v11 = &off_1E224B9A0;
      *(_DWORD *)(v11 + 16) = a2;
      uhash_puti(*((_QWORD *)this + 1), v11, 1u, (int *)a3);
      if (*(int *)a3 >= 1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
        v3 = 0;
      }
    }
    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  icu::UObject::~UObject((icu::UObject *)&v12);
  return v3;
}

icu::StringTrieBuilder::Node *icu::StringTrieBuilder::registerNode(icu::StringTrieBuilder *this, icu::StringTrieBuilder::Node *a2, UErrorCode *a3)
{
  icu::StringTrieBuilder::Node *v3;
  int *v6;
  int *v7;

  v3 = a2;
  if (*(int *)a3 < 1)
  {
    if (!a2)
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
      return v3;
    }
    v6 = uhash_find(*((_QWORD *)this + 1), (uint64_t)a2);
    if (v6)
    {
      v7 = v6;
      (*(void (**)(icu::StringTrieBuilder::Node *))(*(_QWORD *)v3 + 8))(v3);
      return (icu::StringTrieBuilder::Node *)*((_QWORD *)v7 + 2);
    }
    uhash_puti(*((_QWORD *)this + 1), (uint64_t)v3, 1u, (int *)a3);
    if (*(int *)a3 < 1)
      return v3;
    goto LABEL_3;
  }
  if (a2)
  {
LABEL_3:
    (*(void (**)(icu::StringTrieBuilder::Node *))(*(_QWORD *)v3 + 8))(v3);
    return 0;
  }
  return v3;
}

icu::StringTrieBuilder::Node *icu::StringTrieBuilder::makeBranchSubNode(icu::StringTrieBuilder *this, uint64_t a2, unsigned int a3, uint64_t a4, int a5, UErrorCode *a6)
{
  UErrorCode *v6;
  int v7;
  unint64_t v11;
  uint64_t v12;
  UErrorCode *v13;
  int v14;
  int v15;
  icu::StringTrieBuilder::Node *v16;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t Node;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  _OWORD v41[7];
  _QWORD v42[3];
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (*(int *)a6 > 0)
    return 0;
  v6 = a6;
  v7 = a5;
  memset(v42, 0, sizeof(v42));
  v43 = 0;
  memset(v41, 0, sizeof(v41));
  if ((*(int (**)(icu::StringTrieBuilder *))(*(_QWORD *)this + 88))(this) >= a5)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    v12 = 0;
    v13 = v6;
    do
    {
      v14 = a2;
      if (v7 >= 0)
        v15 = v7;
      else
        v15 = v7 + 1;
      a2 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 64))(this, a2, a4, (v15 >> 1));
      *((_WORD *)v42 + v12) = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(_QWORD *)this + 32))(this, a2, a4);
      *((_QWORD *)v41 + v12++) = icu::StringTrieBuilder::makeBranchSubNode(this, v14, a2, a4, v15 >> 1, v13);
      v7 -= v15 >> 1;
    }
    while (v7 > (*(int (**)(icu::StringTrieBuilder *))(*(_QWORD *)this + 88))(this));
    v6 = v13;
  }
  if (*(int *)v6 > 0)
    return 0;
  v18 = icu::UMemory::operator new((icu::UMemory *)0x68, v11);
  if (!v18)
  {
    v16 = 0;
    *v6 = U_MEMORY_ALLOCATION_ERROR;
    return v16;
  }
  v19 = (_DWORD *)v18;
  *(_QWORD *)(v18 + 8) = 4473924;
  *(_QWORD *)v18 = &off_1E224BB00;
  *(_DWORD *)(v18 + 64) = 0;
  v20 = a4 + 1;
  if (v7 - 1 <= 1)
    v21 = 1;
  else
    v21 = v7 - 1;
  do
  {
    v22 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(_QWORD *)this + 32))(this, a2, a4);
    v23 = (*(uint64_t (**)(icu::StringTrieBuilder *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 72))(this, (a2 + 1), a4, v22);
    if ((_DWORD)a2 == (_DWORD)v23 - 1
      && v20 == (*(unsigned int (**)(icu::StringTrieBuilder *, uint64_t))(*(_QWORD *)this + 24))(this, a2))
    {
      v24 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t))(*(_QWORD *)this + 40))(this, a2);
      v25 = (int)v19[16];
      *((_WORD *)v19 + v25 + 44) = v22;
      *(_QWORD *)&v19[2 * v25 + 6] = 0;
      v19[v25 + 17] = v24;
      ++v19[16];
      v19[2] = v24 + 37 * (v22 + 37 * v19[2]);
    }
    else
    {
      Node = icu::StringTrieBuilder::makeNode(this, a2, v23, (int)a4 + 1, v6);
      sub_18BBF9DA0((uint64_t)v19, v22, Node);
    }
    a2 = v23;
    --v21;
  }
  while (v21);
  v27 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(_QWORD *)this + 32))(this, v23, a4);
  v28 = a3;
  if ((_DWORD)v23 == a3 - 1
    && (v29 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t))(*(_QWORD *)this + 24))(this, v23),
        v28 = a3,
        v20 == v29))
  {
    v30 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, _QWORD))(*(_QWORD *)this + 40))(this, v23, a3);
    v31 = (int)v19[16];
    *((_WORD *)v19 + v31 + 44) = v27;
    *(_QWORD *)&v19[2 * v31 + 6] = 0;
    v19[v31 + 17] = v30;
    ++v19[16];
    v19[2] = v30 + 37 * (v27 + 37 * v19[2]);
  }
  else
  {
    v32 = icu::StringTrieBuilder::makeNode(this, v23, v28, v20, v6);
    sub_18BBF9DA0((uint64_t)v19, v27, v32);
  }
  v16 = icu::StringTrieBuilder::registerNode(this, (icu::StringTrieBuilder::Node *)v19, v6);
  if ((int)v12 >= 1)
  {
    v34 = v12 + 1;
    while (1)
    {
      v35 = icu::UMemory::operator new((icu::UMemory *)0x28, v33);
      if (v35)
        break;
LABEL_35:
      v16 = icu::StringTrieBuilder::registerNode(this, (icu::StringTrieBuilder::Node *)v35, v6);
      if ((unint64_t)--v34 <= 1)
        return v16;
    }
    v36 = *((_QWORD *)v41 + (v34 - 2));
    if (v36)
    {
      v37 = *(_DWORD *)(v36 + 8);
      if (v16)
      {
LABEL_31:
        v38 = *((_DWORD *)v16 + 2);
LABEL_34:
        v39 = *((unsigned __int16 *)v42 + (v34 - 2));
        *(_QWORD *)(v35 + 8) = (v38 + 37 * (v37 + 37 * v39) - 195751071);
        *(_QWORD *)v35 = &off_1E224BB70;
        *(_WORD *)(v35 + 20) = v39;
        *(_QWORD *)(v35 + 24) = v36;
        *(_QWORD *)(v35 + 32) = v16;
        goto LABEL_35;
      }
    }
    else
    {
      v37 = 0;
      if (v16)
        goto LABEL_31;
    }
    v38 = 0;
    goto LABEL_34;
  }
  return v16;
}

uint64_t sub_18BBF9DA0(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = *(int *)(result + 64);
  *(_WORD *)(result + 2 * v3 + 88) = a2;
  *(_QWORD *)(result + 8 * v3 + 24) = a3;
  *(_DWORD *)(result + 4 * v3 + 68) = 0;
  ++*(_DWORD *)(result + 64);
  if (a3)
    v4 = *(_DWORD *)(a3 + 8);
  else
    v4 = 0;
  *(_DWORD *)(result + 8) = v4 + 37 * (a2 + 37 * *(_DWORD *)(result + 8));
  return result;
}

uint64_t icu::StringTrieBuilder::hashNode(icu::StringTrieBuilder *this, const void *a2)
{
  return *((unsigned int *)this + 2);
}

uint64_t icu::StringTrieBuilder::equalNodes(icu::StringTrieBuilder *this, const void *a2, const void *a3)
{
  return (*(uint64_t (**)(icu::StringTrieBuilder *, const void *, const void *))(*(_QWORD *)this + 24))(this, a2, a3);
}

uint64_t icu::StringTrieBuilder::Node::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 == a2)
    return 1;
  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if ((_DWORD)result)
    return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t icu::StringTrieBuilder::Node::markRightEdgesFirst(icu::StringTrieBuilder::Node *this, uint64_t a2)
{
  if (!*((_DWORD *)this + 3))
    *((_DWORD *)this + 3) = a2;
  return a2;
}

uint64_t icu::StringTrieBuilder::FinalValueNode::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 == a2)
    return 1;
  result = icu::StringTrieBuilder::Node::operator==(a1, a2);
  if ((_DWORD)result)
    return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t icu::StringTrieBuilder::FinalValueNode::write(icu::StringTrieBuilder::FinalValueNode *this, icu::StringTrieBuilder *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(icu::StringTrieBuilder *, _QWORD, uint64_t))(*(_QWORD *)a2 + 136))(a2, *((unsigned int *)this + 4), 1);
  *((_DWORD *)this + 3) = result;
  return result;
}

uint64_t icu::StringTrieBuilder::ValueNode::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 == a2)
    return 1;
  result = icu::StringTrieBuilder::Node::operator==(a1, a2);
  if ((_DWORD)result)
  {
    if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16))
      return !*(_BYTE *)(a1 + 16) || *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
    else
      return 0;
  }
  return result;
}

uint64_t icu::StringTrieBuilder::IntermediateValueNode::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 == a2)
    return 1;
  result = icu::StringTrieBuilder::ValueNode::operator==(a1, a2);
  if ((_DWORD)result)
    return *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
  return result;
}

uint64_t icu::StringTrieBuilder::IntermediateValueNode::markRightEdgesFirst(icu::StringTrieBuilder::IntermediateValueNode *this, uint64_t a2)
{
  if (!*((_DWORD *)this + 3))
  {
    a2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
    *((_DWORD *)this + 3) = a2;
  }
  return a2;
}

uint64_t icu::StringTrieBuilder::IntermediateValueNode::write(icu::StringTrieBuilder::IntermediateValueNode *this, icu::StringTrieBuilder *a2)
{
  uint64_t result;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  result = (*(uint64_t (**)(icu::StringTrieBuilder *, _QWORD, _QWORD))(*(_QWORD *)a2 + 136))(a2, *((unsigned int *)this + 5), 0);
  *((_DWORD *)this + 3) = result;
  return result;
}

uint64_t icu::StringTrieBuilder::LinearMatchNode::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 == a2)
    return 1;
  result = icu::StringTrieBuilder::ValueNode::operator==(a1, a2);
  if ((_DWORD)result)
    return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24) && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t icu::StringTrieBuilder::LinearMatchNode::markRightEdgesFirst(icu::StringTrieBuilder::LinearMatchNode *this, uint64_t a2)
{
  if (!*((_DWORD *)this + 3))
  {
    a2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4));
    *((_DWORD *)this + 3) = a2;
  }
  return a2;
}

uint64_t icu::StringTrieBuilder::ListBranchNode::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (a1 == a2)
    return 1;
  result = icu::StringTrieBuilder::Node::operator==(a1, a2);
  if ((_DWORD)result)
  {
    v5 = *(unsigned int *)(a1 + 64);
    if ((int)v5 < 1)
    {
      return 1;
    }
    else
    {
      v6 = 0;
      while (*(unsigned __int16 *)(a1 + 88 + 2 * v6) == *(unsigned __int16 *)(a2 + 88 + 2 * v6)
           && *(_DWORD *)(a1 + 4 * v6 + 68) == *(_DWORD *)(a2 + 4 * v6 + 68)
           && *(_QWORD *)(a1 + 8 * v6 + 24) == *(_QWORD *)(a2 + 8 * v6 + 24))
      {
        if (v5 == ++v6)
          return 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t icu::StringTrieBuilder::ListBranchNode::markRightEdgesFirst(icu::StringTrieBuilder::ListBranchNode *this, uint64_t a2)
{
  int v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_DWORD *)this + 3);
  if (!v2)
  {
    *((_DWORD *)this + 4) = a2;
    v4 = (char *)this + 16;
    v5 = *((int *)this + 16);
    do
    {
      v6 = *(_QWORD *)&v4[8 * v5];
      if (v6)
        a2 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, (v2 + a2));
      --v5;
      v2 = -1;
    }
    while (v5 + 1 > 1);
    *((_DWORD *)this + 3) = a2;
  }
  return a2;
}

uint64_t icu::StringTrieBuilder::ListBranchNode::write(icu::StringTrieBuilder::ListBranchNode *this, icu::StringTrieBuilder *a2)
{
  uint64_t v4;
  int *v5;
  _DWORD *v6;
  int *v7;
  int v8;
  char *v9;
  _DWORD *v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *((int *)this + 16);
  v5 = (int *)*((_QWORD *)this + v4 + 2);
  v6 = (_DWORD *)((char *)this + 16);
  v7 = v5 + 3;
  if (!v5)
    v7 = (int *)((char *)this + 16);
  v8 = *v7;
  v9 = (char *)this + 8;
  do
  {
    v10 = *(_DWORD **)&v9[8 * v4];
    if (v10)
    {
      v11 = v10[3];
      if (v11 < 0)
      {
        v12 = v11 >= v8 && v11 <= *v6;
        if (!v12)
          (*(void (**)(_DWORD *, icu::StringTrieBuilder *))(*(_QWORD *)v10 + 40))(v10, a2);
      }
    }
    --v4;
  }
  while (v4 > 1);
  v13 = *((int *)this + 16);
  v14 = v13 - 1;
  if (v5)
  {
    (*(void (**)(int *, icu::StringTrieBuilder *))(*(_QWORD *)v5 + 40))(v5, a2);
    v14 = (int)v14;
  }
  else
  {
    (*(void (**)(icu::StringTrieBuilder *, _QWORD, uint64_t))(*(_QWORD *)a2 + 136))(a2, *((unsigned int *)this + v14 + 17), 1);
  }
  result = (*(uint64_t (**)(icu::StringTrieBuilder *, _QWORD))(*(_QWORD *)a2 + 120))(a2, *((unsigned __int16 *)this + v14 + 44));
  *((_DWORD *)this + 3) = result;
  v16 = (v13 - 2);
  if ((int)v13 >= 2)
  {
    v17 = (char *)this + 68;
    do
    {
      v18 = *(_QWORD *)&v17[8 * v16 - 44];
      if (v18)
      {
        v19 = 0;
        v20 = (result - *(_DWORD *)(v18 + 12));
      }
      else
      {
        v20 = *(unsigned int *)&v17[4 * v16];
        v19 = 1;
      }
      (*(void (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, v20, v19);
      result = (*(uint64_t (**)(icu::StringTrieBuilder *, _QWORD))(*(_QWORD *)a2 + 120))(a2, *(unsigned __int16 *)&v17[2 * v16 + 20]);
      *((_DWORD *)this + 3) = result;
      v12 = v16-- <= 0;
    }
    while (!v12);
  }
  return result;
}

uint64_t icu::StringTrieBuilder::SplitBranchNode::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 == a2)
    return 1;
  result = icu::StringTrieBuilder::Node::operator==(a1, a2);
  if ((_DWORD)result)
    return *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
        && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
        && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t icu::StringTrieBuilder::SplitBranchNode::markRightEdgesFirst(icu::StringTrieBuilder::SplitBranchNode *this, uint64_t a2)
{
  int v3;

  if (!*((_DWORD *)this + 3))
  {
    *((_DWORD *)this + 4) = a2;
    v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4));
    a2 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), (v3 - 1));
    *((_DWORD *)this + 3) = a2;
  }
  return a2;
}

uint64_t icu::StringTrieBuilder::SplitBranchNode::write(icu::StringTrieBuilder::SplitBranchNode *this, icu::StringTrieBuilder *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  uint64_t result;

  v5 = (_DWORD *)*((_QWORD *)this + 3);
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  v6 = v5[3];
  if (v6 < 0 && (v6 < v4[3] || v6 > *((_DWORD *)this + 4)))
  {
    (*(void (**)(_DWORD *, icu::StringTrieBuilder *))(*(_QWORD *)v5 + 40))(v5, a2);
    v4 = (_DWORD *)*((_QWORD *)this + 4);
  }
  (*(void (**)(_DWORD *, icu::StringTrieBuilder *))(*(_QWORD *)v4 + 40))(v4, a2);
  (*(void (**)(icu::StringTrieBuilder *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(unsigned int *)(*((_QWORD *)this + 3) + 12));
  result = (*(uint64_t (**)(icu::StringTrieBuilder *, _QWORD))(*(_QWORD *)a2 + 120))(a2, *((unsigned __int16 *)this + 10));
  *((_DWORD *)this + 3) = result;
  return result;
}

uint64_t icu::StringTrieBuilder::BranchHeadNode::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 == a2)
    return 1;
  result = icu::StringTrieBuilder::ValueNode::operator==(a1, a2);
  if ((_DWORD)result)
    return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24) && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t icu::StringTrieBuilder::BranchHeadNode::markRightEdgesFirst(icu::StringTrieBuilder::BranchHeadNode *this, uint64_t a2)
{
  if (!*((_DWORD *)this + 3))
  {
    a2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4));
    *((_DWORD *)this + 3) = a2;
  }
  return a2;
}

uint64_t icu::StringTrieBuilder::BranchHeadNode::write(icu::StringTrieBuilder::BranchHeadNode *this, icu::StringTrieBuilder *a2)
{
  int v4;
  uint64_t result;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4));
  v4 = *((_DWORD *)this + 6);
  if (v4 <= (*(int (**)(icu::StringTrieBuilder *))(*(_QWORD *)a2 + 96))(a2))
  {
    result = (*(uint64_t (**)(icu::StringTrieBuilder *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 144))(a2, *((char *)this + 16), *((unsigned int *)this + 5), (*((_DWORD *)this + 6) - 1));
  }
  else
  {
    (*(void (**)(icu::StringTrieBuilder *, _QWORD))(*(_QWORD *)a2 + 120))(a2, (*((_DWORD *)this + 6) - 1));
    result = (*(uint64_t (**)(icu::StringTrieBuilder *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 144))(a2, *((char *)this + 16), *((unsigned int *)this + 5), 0);
  }
  *((_DWORD *)this + 3) = result;
  return result;
}

void sub_18BBFA618(icu::UObject *a1)
{
  void *v1;

  icu::UObject::~UObject(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BBFA630(icu::UObject *a1)
{
  void *v1;

  icu::UObject::~UObject(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BBFA648(icu::UObject *a1)
{
  void *v1;

  icu::UObject::~UObject(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BBFA660(icu::UObject *a1)
{
  void *v1;

  icu::UObject::~UObject(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BBFA678(icu::UObject *a1)
{
  void *v1;

  icu::UObject::~UObject(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t ualoc_getLanguagesForRegion(const char *a1, void *a2, int a3, int *a4, double a5)
{
  uint64_t v5;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int Size;
  signed int v18;
  char *v19;
  char *v20;
  const char *Key;
  uint64_t v22;
  double v23;
  _QWORD *v24;
  int Int;
  const UChar *StringByKey;
  int v27;
  const UChar *v28;
  int32_t v29;
  int v30;
  _BYTE *v31;
  size_t v32;
  _BYTE *v33;
  _BYTE *v34;
  char **v35;
  const char *v36;
  int v37;
  char *v38;
  double *v39;
  void *v40;
  char *__dst;
  int v42;
  int v43;
  _BYTE *__base;
  uint64_t v45;
  _BYTE __src[1040];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (*a4 > 0)
    return 0;
  v9 = a5 > 1.0 || a1 == 0;
  if (v9 || a5 < 0.0)
    goto LABEL_13;
  LODWORD(v10) = a3;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
      goto LABEL_10;
LABEL_13:
    v5 = 0;
    *a4 = 1;
    return v5;
  }
  if (a3)
    goto LABEL_13;
LABEL_10:
  v12 = ures_openDirect(0, (uint64_t)"supplementalData", (uint64_t)a4);
  v13 = ures_getByKey(v12, "territoryInfo", v12, a4);
  v14 = (_QWORD *)ures_getByKey(v13, a1, v13, a4);
  v15 = v14;
  if (*a4 >= 1)
  {
    ures_close(v14);
    return 0;
  }
  Size = ures_getSize((uint64_t)v14);
  bzero(__src, 0x410uLL);
  if (Size < 1)
  {
    v5 = 0;
    v19 = 0;
    __base = __src;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v5 = 0;
    v43 = 26;
    __base = __src;
    do
    {
      v20 = ures_getByIndex((uint64_t)v15, v18, v19, a4);
      v19 = v20;
      if (*a4 > 0)
        break;
      Key = (const char *)ures_getKey((uint64_t)v20);
      if (strcmp(Key, "territoryF") && strnlen(Key, 0x18uLL) <= 0x17)
      {
        HIDWORD(v45) = 0;
        v22 = ures_getByKey((uint64_t)v19, "populationShareF", 0, (int *)&v45 + 1);
        v23 = 0.0;
        if (SHIDWORD(v45) <= 0)
        {
          v24 = (_QWORD *)v22;
          Int = ures_getInt(v22, (int *)&v45 + 1);
          if (SHIDWORD(v45) <= 0)
            v23 = uprv_pow10(Int / 1000000 - 55) * (double)(Int % 1000000);
          ures_close(v24);
        }
        if (v23 >= a5)
        {
          if (a2)
          {
            v45 = 0;
            StringByKey = ures_getStringByKey((uint64_t)v19, "officialStatus", (int *)&v45, (int *)&v45 + 1);
            v27 = 0;
            if (SHIDWORD(v45) <= 0)
            {
              v28 = StringByKey;
              v29 = u_strcmp(StringByKey, word_18BDE0D5A);
              if (v29)
              {
                if (v29 < 0 && !u_strcmp(v28, (const UChar *)L"de_facto_official"))
                  v27 = 8;
                else
                  v27 = 4 * (u_strcmp(v28, (const UChar *)L"official_regional") == 0);
              }
              else
              {
                v27 = 12;
              }
            }
            v42 = v27;
            v30 = v43;
            if ((int)v5 >= v43)
            {
              v43 *= 3;
              v32 = 120 * v30;
              if (__base == __src)
              {
                v33 = uprv_malloc(v32);
                if (!v33)
                {
LABEL_60:
                  __base = 0;
                  *a4 = 7;
                  break;
                }
                v34 = v33;
                memcpy(v33, __src, 40 * (int)v5);
                v31 = v34;
              }
              else
              {
                v31 = uprv_realloc(__base, v32);
                if (!v31)
                  goto LABEL_60;
              }
            }
            else
            {
              v31 = __base;
            }
            __base = v31;
            __dst = &v31[40 * (int)v5];
            v35 = off_1E224C1D0;
            v36 = "az";
            while (1)
            {
              v37 = strcmp(Key, v36);
              if (v37 <= 0)
                break;
              v38 = *v35;
              v35 += 2;
              v36 = v38;
              if (!v38)
                goto LABEL_45;
            }
            if (!v37)
              Key = *(v35 - 1);
LABEL_45:
            strcpy(__dst, Key);
            v39 = (double *)&__base[40 * (int)v5];
            v39[3] = v23;
            *((_DWORD *)v39 + 8) = v42;
          }
          v5 = (v5 + 1);
        }
      }
      ++v18;
    }
    while (v18 != Size);
  }
  ures_close(v19);
  ures_close(v15);
  if (*a4 >= 1)
  {
    v10 = 0;
    v5 = 0;
    v40 = __base;
    if (__base == __src)
      return v5;
    goto LABEL_59;
  }
  if (a2)
  {
    qsort(__base, (int)v5, 0x28uLL, (int (__cdecl *)(const void *, const void *))sub_18BBFAB00);
    v10 = (int)v5 >= (int)v10 ? v10 : v5;
    memcpy(a2, __base, 40 * (int)v10);
    v5 = v10;
    v40 = __base;
    if (__base != __src)
    {
LABEL_59:
      free(v40);
      return v10;
    }
  }
  return v5;
}

uint64_t sub_18BBFAB00(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;

  v2 = *(double *)(a1 + 24);
  v3 = *(double *)(a2 + 24);
  if (v2 > v3)
    return 0xFFFFFFFFLL;
  if (v2 < v3)
    return 1;
  return strcmp((const char *)a1, (const char *)a2);
}

uint64_t ualoc_getRegionsForLanguage(icu::Locale *a1, void *a2, unsigned int a3, int *a4, double a5)
{
  uint64_t v5;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  char *v19;
  char *NextResource;
  const char *Key;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  int Int;
  const char *v27;
  const UChar *StringByKey;
  const UChar *v29;
  int v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  __int128 v40;
  char *__p;
  unint64_t v42;
  char *v43;
  int v44;
  char __s[16];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53[29];
  char __s2[16];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _BYTE v62[29];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (*a4 > 0)
    return 0;
  __p = 0;
  v42 = 0;
  v43 = 0;
  v52 = 0u;
  memset(v53, 0, sizeof(v53));
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  *(_OWORD *)__s = 0u;
  v61 = 0u;
  memset(v62, 0, sizeof(v62));
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  *(_OWORD *)__s2 = 0u;
  ualoc_canonicalForm(a1, __s, 157, a4);
  v44 = 0;
  if ((int)uloc_getVariant(__s, 0, 0, &v44) >= 1)
    *strrchr(__s, 95) = 0;
  uloc_getLanguage((uint64_t)__s, __s2, 157, a4);
  uloc_addLikelySubtags(__s, __s, 157, (UErrorCode *)a4);
  uloc_addLikelySubtags(__s2, __s2, 157, (UErrorCode *)a4);
  if (*a4 <= 0)
  {
    v19 = strrchr(__s, 95);
    if (v19)
    {
      *v19 = 0;
      *strrchr(__s2, 95) = 0;
      if (!strcmp(__s, __s2))
        *strrchr(__s, 95) = 0;
    }
  }
  v10 = (_QWORD *)ures_openDirect(0, (uint64_t)"supplementalData", (uint64_t)a4);
  v11 = (_QWORD *)ures_getByKey((uint64_t)v10, "territoryInfo", 0, a4);
  if (*a4 <= 0)
  {
    v5 = 0;
    v14 = 0;
    v13 = 0;
    v12 = 0;
    while (1)
    {
      if (!ures_hasNext((_BOOL8)v11))
        goto LABEL_8;
      NextResource = ures_getNextResource((uint64_t)v11, v12, a4);
      v12 = NextResource;
      if (*a4 > 0)
        goto LABEL_8;
      v44 = 0;
      Key = (const char *)ures_getKey((uint64_t)NextResource);
      if (!strcmp(Key, "US") && !(*(unsigned __int16 *)__s ^ 0x687A | __s[2]))
        v22 = "zh_Hans";
      else
        v22 = __s;
      v23 = ures_getByKey((uint64_t)v12, v22, (uint64_t)v13, &v44);
      v13 = (_QWORD *)v23;
      if (v44 <= 0)
      {
        v24 = ures_getByKey(v23, "populationShareF", (uint64_t)v14, &v44);
        v14 = (_QWORD *)v24;
        v25 = 0.0;
        if (v44 <= 0)
        {
          Int = ures_getInt(v24, &v44);
          if (v44 <= 0)
            v25 = uprv_pow10(Int / 1000000 - 55) * (double)(Int % 1000000);
        }
        if (v25 >= a5)
        {
          if (a2)
          {
            memset(__s2, 0, sizeof(__s2));
            *(_QWORD *)&v55 = 0;
            v27 = (const char *)ures_getKey((uint64_t)v12);
            strcpy(__s2, v27);
            *(double *)&__s2[8] = v25;
            LODWORD(v55) = 0;
            v44 = 0;
            StringByKey = ures_getStringByKey((uint64_t)v13, "officialStatus", 0, &v44);
            if (v44 > 0)
              goto LABEL_56;
            v29 = StringByKey;
            if (!StringByKey)
              goto LABEL_56;
            if (u_strcmp(StringByKey, word_18BDE0D5A))
            {
              if (u_strcmp(v29, (const UChar *)L"official_regional"))
              {
                if (!u_strcmp(v29, (const UChar *)L"de_facto_official"))
                {
                  v30 = 8;
                  goto LABEL_55;
                }
LABEL_56:
                if (v42 >= (unint64_t)v43)
                {
                  v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - (_QWORD)__p) >> 3) + 1;
                  if (v33 > 0xAAAAAAAAAAAAAAALL)
                    abort();
                  if (0x5555555555555556 * ((v43 - __p) >> 3) > v33)
                    v33 = 0x5555555555555556 * ((v43 - __p) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((v43 - __p) >> 3) >= 0x555555555555555)
                    v34 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v34 = v33;
                  if (v34)
                    v35 = (char *)sub_18BBFC344((uint64_t)&v43, v34);
                  else
                    v35 = 0;
                  v36 = &v35[8 * ((uint64_t)(v42 - (_QWORD)__p) >> 3)];
                  v37 = *(_OWORD *)__s2;
                  *((_QWORD *)v36 + 2) = v55;
                  *(_OWORD *)v36 = v37;
                  v38 = (char *)v42;
                  v39 = v36;
                  if ((char *)v42 != __p)
                  {
                    do
                    {
                      v40 = *(_OWORD *)(v38 - 24);
                      *((_QWORD *)v39 - 1) = *((_QWORD *)v38 - 1);
                      *(_OWORD *)(v39 - 24) = v40;
                      v39 -= 24;
                      v38 -= 24;
                    }
                    while (v38 != __p);
                    v38 = __p;
                  }
                  v32 = (unint64_t)(v36 + 24);
                  __p = v39;
                  v43 = &v35[24 * v34];
                  if (v38)
                    operator delete(v38);
                }
                else
                {
                  v31 = *(_OWORD *)__s2;
                  *(_QWORD *)(v42 + 16) = v55;
                  *(_OWORD *)v42 = v31;
                  v32 = v42 + 24;
                }
                v42 = v32;
                goto LABEL_73;
              }
              v30 = 4;
            }
            else
            {
              v30 = 12;
            }
LABEL_55:
            LODWORD(v55) = v30;
            goto LABEL_56;
          }
          v5 = (v5 + 1);
        }
      }
LABEL_73:
      if (*a4 >= 1)
        goto LABEL_8;
    }
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v5 = 0;
LABEL_8:
  if (a2)
  {
    v15 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - (_QWORD)__p) >> 3));
    v16 = (char *)v42 == __p ? 0 : v15;
    sub_18BBFC394((uint64_t)__p, v42, v16, 1);
    v17 = -1431655765 * ((v42 - (unint64_t)__p) >> 3);
    v5 = (int)v17 >= (int)a3 ? a3 : v17;
    if ((_DWORD)v5)
      memmove(a2, __p, 24 * (int)v5);
  }
  if (v14)
    ures_close(v14);
  if (v13)
    ures_close(v13);
  if (v12)
    ures_close(v12);
  if (v11)
    ures_close(v11);
  if (v10)
    ures_close(v10);
  if (__p)
    operator delete(__p);
  return v5;
}

uint64_t ualoc_getAppleParent(char *a1, char *a2, int a3, UErrorCode *a4)
{
  size_t v4;
  int BaseName;
  int v10;
  char *v11;
  BOOL v12;
  const char *v13;
  char **v14;
  int v15;
  char *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  const char *LocaleByType;
  uint64_t v21;
  uint64_t v22;
  uint64_t Parent;
  _QWORD *v24;
  char *v25;
  char *NextResource;
  int Size;
  int32_t v28;
  int v29;
  int v30;
  char *UTF8StringByIndex;
  char *UTF8String;
  const char *Key;
  int32_t v34;
  int v35;
  _QWORD v36[2];
  char v37;
  char __s1[16];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _WORD v46[15];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 > 0)
    return 0;
  if (!a2)
  {
    if (!a3)
      goto LABEL_6;
LABEL_25:
    v4 = 0;
    v17 = 1;
LABEL_26:
    *a4 = v17;
    return v4;
  }
  if (a3 < 0)
    goto LABEL_25;
LABEL_6:
  v45 = 0u;
  memset(v46, 0, sizeof(v46));
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  *(_OWORD *)__s1 = 0u;
  BaseName = uloc_getBaseName(a1, __s1, 157, a4);
  if (*(int *)a4 > 0)
    return 0;
  v10 = BaseName;
  if (*a4 == U_STRING_NOT_TERMINATED_WARNING)
  {
    HIBYTE(v46[14]) = 0;
    *a4 = U_ZERO_ERROR;
  }
  v11 = strstr(__s1, "__");
  if (v11)
  {
    *v11 = 0;
    v10 = strlen(__s1);
  }
  if (v10 > 1)
  {
    if (*(unsigned __int16 *)__s1 == 28261
      || *(unsigned __int16 *)__s1 == 26746
      || v10 >= 3 && (*(unsigned __int16 *)__s1 == 30073 ? (v12 = __s1[2] == 101) : (v12 = 0), v12))
    {
      v13 = "en_150";
      v14 = off_1E224BC38;
      while (1)
      {
        v15 = strcmp(__s1, v13);
        if (v15 <= 0)
          break;
        v16 = *v14;
        v14 += 2;
        v13 = v16;
        if (!v16)
          goto LABEL_28;
      }
      if (!v15)
      {
        LocaleByType = *(v14 - 1);
        v4 = strlen(LocaleByType);
        if ((int)v4 < a3)
          goto LABEL_61;
LABEL_66:
        v17 = 15;
        goto LABEL_26;
      }
    }
  }
LABEL_28:
  v35 = 0;
  v18 = ures_openDirect(0, (uint64_t)__s1, (uint64_t)&v35);
  if (v35 < 1)
  {
    v19 = (_QWORD *)v18;
    LocaleByType = (const char *)ures_getLocaleByType(v18, 0, &v35);
    ures_close(v19);
    if (v35 <= 0)
    {
      if (strcmp(__s1, LocaleByType))
      {
        v4 = strlen(LocaleByType);
        if ((int)v4 < a3)
        {
LABEL_61:
          strcpy(a2, LocaleByType);
          return v4;
        }
        goto LABEL_66;
      }
    }
  }
  v35 = 0;
  v21 = ures_openDirect(0, (uint64_t)"supplementalData", (uint64_t)&v35);
  v22 = ures_getByKey(v21, "parentLocales", v21, &v35);
  if (v35 > 0)
    goto LABEL_31;
  v24 = (_QWORD *)v22;
  v25 = 0;
  v34 = 0;
  while (1)
  {
    v35 = 0;
    NextResource = ures_getNextResource((uint64_t)v24, v25, &v35);
    v25 = NextResource;
    if (v35 > 0)
      break;
    v36[0] = 0;
    v36[1] = 0;
    v37 = 0;
    if (ures_getType((uint64_t)NextResource))
    {
      Size = ures_getSize((uint64_t)v25);
      v28 = v34;
      if (Size >= 1 && !v34)
      {
        v29 = Size;
        v30 = 1;
        do
        {
          v34 = 16;
          v35 = 0;
          UTF8StringByIndex = ures_getUTF8StringByIndex((uint64_t)v25, v30 - 1, (char *)v36, &v34, 0, &v35);
          if (v35 <= 0 && !strncmp(__s1, UTF8StringByIndex, 0x10uLL))
          {
            v28 = v34;
          }
          else
          {
            v28 = 0;
            v34 = 0;
          }
          if (v30 >= v29)
            break;
          ++v30;
        }
        while (!v28);
      }
      goto LABEL_51;
    }
    v34 = 16;
    UTF8String = ures_getUTF8String((uint64_t)v25, (char *)v36, &v34, 0, &v35);
    if (v35 <= 0 && !strncmp(__s1, UTF8String, 0x10uLL))
    {
      if (v34)
        break;
    }
    else
    {
      v28 = 0;
      v34 = 0;
LABEL_51:
      if (v28)
        break;
    }
  }
  ures_close(v24);
  if (v34 >= 1)
  {
    Key = (const char *)ures_getKey((uint64_t)v25);
    v4 = strlen(Key);
    if ((int)v4 >= a3)
      *a4 = U_BUFFER_OVERFLOW_ERROR;
    else
      strcpy(a2, Key);
    ures_close(v25);
    return v4;
  }
  ures_close(v25);
LABEL_31:
  Parent = uloc_getParent(__s1, a2, a3, (int *)a4);
  v4 = Parent;
  if (*(int *)a4 <= 0 && !(_DWORD)Parent)
  {
    if (a3 < 5)
      *a4 = U_BUFFER_OVERFLOW_ERROR;
    else
      strcpy(a2, "root");
    return 4;
  }
  return v4;
}

char **sub_18BBFB510(char **result, char *a2, _QWORD *a3, UErrorCode *a4)
{
  _QWORD *v5;
  char **v6;
  char *v7;
  int BaseName;
  _QWORD *v9;
  _QWORD *v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  _BYTE *v18;
  char *v19;
  signed int Language;
  _QWORD *v21;
  unint64_t v22;
  _BYTE *v23;
  const char *v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  int v29;
  int v30;
  char *v31;
  int v32;
  char __dst[16];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[29];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (*result)
    return result;
  v5 = a3;
  v6 = result;
  *result = a2;
  v7 = (char *)sub_18BBFB884(a3);
  v6[1] = v7;
  BaseName = uloc_getBaseName(*v6, v7, 58, a4);
  v9 = v5;
  do
  {
    v10 = v9;
    v9 = (_QWORD *)v9[84];
  }
  while (v9);
  v11 = (_BYTE *)(v10[82] + BaseName);
  v10[82] = v11 + 1;
  *v11 = 0;
  v12 = (char *)sub_18BBFB884(v5);
  v6[2] = v12;
  if (*(int *)a4 <= 0)
  {
    v13 = v6[1];
    v14 = bsearch(v13, off_1EE008720, 0x1BuLL, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_18BBFC2B0);
    if (v14)
    {
      v13 = (char *)v14[1];
      goto LABEL_7;
    }
    if (dword_1ECD27948 >= 1)
    {
      v32 = 0;
      v26 = ures_getByKey(qword_1ECD27950, v13, 0, &v32);
      v27 = v32;
      if (v32 < 1)
      {
        v28 = (_QWORD *)v26;
        v29 = v32;
        goto LABEL_27;
      }
      if (strchr(v13, 95))
      {
        memset(v41, 0, sizeof(v41));
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        *(_OWORD *)__dst = 0u;
        v34 = 0u;
        strcpy(__dst, v13);
        *strchr(__dst, 95) = 0;
        v32 = 0;
        v28 = (_QWORD *)ures_getByKey(qword_1ECD27950, __dst, 0, &v32);
        v29 = v32;
LABEL_27:
        if (v29 > 0 || !v28)
          goto LABEL_7;
        *(_DWORD *)__dst = 58;
        ures_getUTF8StringByKey((uint64_t)v28, "replacement", v12, (int32_t *)__dst, 1, (int *)a4);
        if (*(int *)a4 <= 0 && *(int *)__dst >= 58)
          *a4 = U_BUFFER_OVERFLOW_ERROR;
        if (v27 >= 1)
        {
          if (strchr(v12, 95))
          {
            v30 = strlen(v12);
            if (v30 < 6)
              goto LABEL_40;
            if (v12[v30 - 5] != 95)
              goto LABEL_40;
            v31 = strrchr(v13, 95);
            if (strlen(v31) > 4)
              goto LABEL_40;
          }
          else
          {
            v31 = strchr(v13, 95);
          }
          strcat(v12, v31);
        }
LABEL_40:
        ures_close(v28);
LABEL_10:
        v12 = v6[2];
        goto LABEL_11;
      }
    }
LABEL_7:
    if ((int)strnlen(v13, 0x3AuLL) > 57)
      *a4 = U_BUFFER_OVERFLOW_ERROR;
    else
      strcpy(v12, v13);
    goto LABEL_10;
  }
LABEL_11:
  v15 = strlen(v12);
  v16 = v5;
  do
  {
    v17 = v16;
    v16 = (_QWORD *)v16[84];
  }
  while (v16);
  v18 = (_BYTE *)(v17[82] + v15);
  v17[82] = v18 + 1;
  *v18 = 0;
  v19 = (char *)sub_18BBFB884(v5);
  v6[3] = v19;
  Language = uloc_getLanguage((uint64_t)v6[2], v19, 58, (int *)a4);
  do
  {
    v21 = v5;
    v5 = (_QWORD *)v5[84];
  }
  while (v5);
  v22 = 0;
  v23 = (_BYTE *)(v21[82] + Language);
  v21[82] = v23 + 1;
  *v23 = 0;
  v24 = v6[3];
  v6[4] = (char *)v24;
  while (1)
  {
    result = (char **)strcmp(v24, off_1E224C160[v22]);
    if (!(_DWORD)result)
      break;
    v25 = v22 >= 0xA;
    v22 += 2;
    if (v25)
      return result;
  }
  v6[4] = off_1E224C160[v22 + 1];
  return result;
}

uint64_t sub_18BBFB884(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;

  while (1)
  {
    do
    {
      v2 = a1;
      a1 = (_QWORD *)a1[84];
    }
    while (a1);
    result = v2[82];
    if (v2[83] - result > 58)
      break;
    a1 = (_QWORD *)operator new();
    bzero(a1, 0x28AuLL);
    a1[82] = a1;
    a1[83] = (char *)a1 + 650;
    a1[84] = 0;
    v2[84] = a1;
  }
  return result;
}

uint64_t sub_18BBFB8FC(uint64_t result, _QWORD *a2, int a3, int *a4)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _BYTE *v16;
  void *v17;
  void *v18;
  const char *v19;
  int v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(result + 40))
  {
    v6 = (_QWORD *)result;
    result = *(_QWORD *)(result + 16);
    v6[5] = result;
    if (!a3)
      goto LABEL_9;
    v20 = 0;
    result = uloc_getCountry(result, 0, 0, &v20);
    if ((int)result < 1)
      goto LABEL_9;
    v7 = (char *)v6[2];
    result = strcmp(v7, "es_MX");
    if (!(_DWORD)result)
      goto LABEL_9;
    result = strcmp(v7, "zh_Hant_TW");
    if ((_DWORD)result
      && (v20 = 0,
          v21[0] = 0,
          v21[1] = 0,
          uloc_minimizeSubtags(v7, (char *)v21, 16, (UErrorCode *)&v20),
          result = uloc_getCountry((uint64_t)v21, 0, 0, &v20),
          (int)result >= 1))
    {
      v6[6] = v6[2];
      v8 = 1;
    }
    else
    {
LABEL_9:
      v8 = 0;
    }
    do
    {
      v9 = &v6[v8];
      v11 = v9[5];
      v10 = (void **)(v9 + 5);
      if (!v11)
        break;
      result = sub_18BBFB884(a2);
      v12 = (char *)result;
      if (*a4 <= 0)
      {
        v17 = *v10;
        v18 = bsearch(v17, off_1EE0088D0, 0x5AuLL, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_18BBFC2B0);
        if (v18)
        {
          v19 = (const char *)*((_QWORD *)v18 + 1);
          result = strlen(v19);
          if ((int)result > 57)
            *a4 = 15;
          else
            result = (uint64_t)strcpy(v12, v19);
        }
        else
        {
          result = ures_getLocParent((char *)v17, v12, 57, a4);
          if ((int)result <= 0 && *a4 < 1)
            result = uloc_getParent((char *)v17, v12, 57, a4);
          v12[57] = 0;
        }
      }
      v13 = v8 + 1;
      if (v8 != 8 && *v12 && (result = strcmp(v12, "root"), (_DWORD)result))
      {
        v6[v13 + 5] = v12;
        result = strlen(v12);
        v14 = a2;
        do
        {
          v15 = v14;
          v14 = (_QWORD *)v14[84];
        }
        while (v14);
        v16 = (_BYTE *)(v15[82] + (int)result);
        v15[82] = v16 + 1;
        *v16 = 0;
      }
      else
      {
        v6[v13 + 5] = 0;
      }
      ++v8;
    }
    while (v13 != 9);
  }
  return result;
}

uint64_t ualoc_localizationsToUse(uint64_t inited, int a2, const char **a3, uint64_t a4, const char **a5, int a6, int *a7)
{
  UErrorCode *v7;
  uint64_t v8;
  const char **v9;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  char *v20;
  size_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  const char **v31;
  int v32;
  char *v33;
  uint64_t v34;
  char **v35;
  const char **v36;
  char **v37;
  const char *v38;
  const char **v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  const char **v43;
  const char *v44;
  const char **v45;
  uint64_t v46;
  int v47;
  int v48;
  const char **v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v54;
  const char *v55;
  const char **v56;
  uint64_t v57;
  const char **v58;
  char **v59;
  BOOL v60;
  const char **v61;
  const char *v62;
  const char **v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  const char **v68;
  const char **v69;
  const char *v70;
  const char *v72;
  int v73;
  const char *v74;
  const char **v75;
  const char *v76;
  uint64_t v77;
  const char **v78;
  const char **v79;
  const char **v80;
  uint64_t v81;
  unint64_t v82;
  const char **v83;
  uint64_t v84;
  const char *v85;
  char **v86;
  const char **v87;
  char *v88;
  uint64_t v89;
  int v90;
  const char **v91;
  const char **v92;
  const char **v93;
  const char **v94;
  UErrorCode *v95;
  const char **v96;
  const char **v97;
  uint64_t v98;
  int v99;
  _QWORD v100[81];
  _BYTE v101[14];
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  if (*a7 > 0)
    return 0xFFFFFFFFLL;
  v7 = (UErrorCode *)a7;
  v8 = inited;
  if (!inited || (v9 = a3) == 0 || !a5)
  {
    *a7 = 1;
    return 0xFFFFFFFFLL;
  }
  v90 = a6;
  v87 = a5;
  if (!dword_1ECD27948)
  {
    v12 = atomic_load((unsigned int *)&unk_1ECD27958);
    if (v12 != 2)
    {
      inited = icu::umtx_initImplPreInit((unsigned int *)&unk_1ECD27958);
      if ((_DWORD)inited)
      {
        sub_18BC0ECC4(7u, (uint64_t)sub_18BBFC2B8);
        LODWORD(v100[0]) = 0;
        v13 = ures_openDirect(0, (uint64_t)"metadata", (uint64_t)v100);
        v14 = ures_getByKey(v13, "alias", v13, (int *)v100);
        v15 = ures_getByKey(v14, "language", v14, (int *)v100);
        if (SLODWORD(v100[0]) <= 0)
        {
          qword_1ECD27950 = v15;
          v16 = 1;
        }
        else
        {
          v16 = -1;
        }
        dword_1ECD27948 = v16;
        icu::umtx_initImplPostInit((unsigned int *)&unk_1ECD27958);
      }
    }
  }
  v77 = (uint64_t)&v77;
  v82 = a2;
  MEMORY[0x1E0C80A78](inited);
  v20 = (char *)&v77 - v19;
  bzero((char *)&v77 - v19, v21);
  if (a2)
  {
    v23 = &v20[120 * v82];
    v24 = v20;
    do
    {
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 5) = 0;
      v24 += 120;
    }
    while (v24 != v23);
  }
  v88 = v20;
  v98 = a4;
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v77 - v25;
  bzero((char *)&v77 - v25, v27);
  if ((_DWORD)a4)
  {
    v28 = &v26[120 * v98];
    v29 = v26;
    do
    {
      *(_QWORD *)v29 = 0;
      *((_QWORD *)v29 + 5) = 0;
      v29 += 120;
    }
    while (v29 != v28);
  }
  v96 = (const char **)v26;
  bzero(v100, 0x290uLL);
  *(_QWORD *)&v101[6] = v100;
  v102 = v101;
  v103 = 0;
  v93 = v9;
  v84 = a4;
  if (a2 < 1)
  {
    v59 = 0;
    v35 = 0;
    v49 = v87;
    goto LABEL_74;
  }
  v81 = v8;
  v30 = 0;
  v86 = 0;
  v31 = v96;
  v78 = v96 + 6;
  v32 = 999;
  v95 = v7;
  do
  {
    v33 = v88;
    sub_18BBFB510((char **)&v88[120 * v30], *(char **)(v81 + 8 * v30), v100, v7);
    v89 = v30;
    if ((int)a4 >= 1)
    {
      v80 = (const char **)&v33[120 * v30];
      v34 = 0;
      v35 = 0;
      v91 = v80 + 1;
      v97 = v80 + 2;
      v83 = v80 + 4;
      v79 = v80 + 5;
      v94 = v80 + 3;
      v36 = v78;
      while (1)
      {
        v37 = (char **)&v31[15 * v34];
        sub_18BBFB510(v37, (char *)v9[v34], v100, v7);
        if ((v32 & 0x80000000) == 0)
        {
          if (!strcmp(*v91, v31[15 * v34 + 1]))
          {
            v32 = -1;
LABEL_50:
            v35 = (char **)&v31[15 * v34];
            goto LABEL_26;
          }
          if (v32)
          {
            v38 = *v97;
            v39 = &v31[15 * v34];
            v40 = v39[2];
            v92 = v39 + 2;
            if (strcmp(v38, v40))
            {
              if (!strcmp(*v83, v31[15 * v34 + 4]))
              {
                sub_18BBFB8FC((uint64_t)v80, v100, 0, (int *)v7);
                sub_18BBFB8FC((uint64_t)&v31[15 * v34], v100, 1, (int *)v7);
                if (*(int *)v7 <= 0)
                {
                  v41 = *v79;
                  if (*v79)
                  {
                    v42 = 0;
                    v43 = &v96[15 * v34];
                    v44 = v43[5];
                    v45 = v43 + 3;
                    v85 = v44;
                    do
                    {
                      if (v44)
                      {
                        v46 = 0;
                        do
                        {
                          if (!strcmp(v41, v44))
                          {
                            if (!strcmp(*v97, "pt_PT") && !strcmp(*v92, "pt_BR"))
                            {
                              v86 = v37;
                            }
                            else
                            {
                              v47 = strcmp(*v94, *v45);
                              v48 = v42 + v46;
                              if (v47)
                                ++v48;
                              if (v48 < v32)
                              {
                                v35 = v37;
                                v32 = v48;
                              }
                            }
                          }
                          v44 = v36[v46++];
                        }
                        while (v44);
                      }
                      ++v42;
                      v41 = *(const char **)&v88[120 * v89 + 40 + 8 * v42];
                      v9 = v93;
                      v44 = v85;
                    }
                    while (v41);
                  }
                }
              }
              goto LABEL_26;
            }
            v32 = 0;
            goto LABEL_50;
          }
        }
LABEL_26:
        ++v34;
        v36 += 15;
        v7 = v95;
        v31 = v96;
        if (v34 == v98)
          goto LABEL_53;
      }
    }
    v35 = 0;
LABEL_53:
    LODWORD(a4) = v84;
    if (v35)
      break;
    v30 = v89 + 1;
  }
  while (v89 + 1 < v82);
  if (v35)
  {
    v49 = v87;
    if (v32 > 0)
    {
      v99 = 0;
      if (uloc_getCountry((uint64_t)v35[2], 0, 0, &v99))
      {
        if (strcmp(v35[3], "zh"))
        {
          v50 = 0;
          v51 = v81;
          while (1)
          {
            v52 = &v88[120 * v50];
            sub_18BBFB510((char **)v52, *(char **)(v51 + 8 * v50), v100, v7);
            if (!strcmp(*((const char **)v52 + 3), v35[3]) && (int)a4 >= 1)
              break;
LABEL_68:
            ++v50;
            LODWORD(a4) = v84;
            if (v50 == v82)
            {
              v49 = v87;
              v9 = v93;
              goto LABEL_73;
            }
          }
          v54 = &v88[120 * v50];
          v55 = (const char *)*((_QWORD *)v54 + 1);
          v56 = (const char **)(v54 + 16);
          v57 = v98;
          v58 = v96;
          while (strcmp(v55, v58[1]) && strcmp(*v56, v58[2]))
          {
            v58 += 15;
            if (!--v57)
              goto LABEL_68;
          }
          v35 = (char **)v58;
          v49 = v87;
          v9 = v93;
          LODWORD(a4) = v84;
        }
      }
    }
  }
  else
  {
    v49 = v87;
  }
LABEL_73:
  v59 = v86;
LABEL_74:
  if (v59)
    v60 = v35 == 0;
  else
    v60 = 0;
  if (v60)
    v61 = (const char **)v59;
  else
    v61 = (const char **)v35;
  if (!v61)
    goto LABEL_108;
  *v49 = *v61;
  v17 = 1;
  sub_18BBFB8FC((uint64_t)v61, v100, 1, (int *)v7);
  v63 = v61 + 5;
  v62 = v61[5];
  if (v62)
  {
    v64 = 0;
    if ((int)a4 <= 1)
      v65 = 1;
    else
      v65 = a4;
    v97 = (const char **)v65;
    v96 += 2;
    v66 = v90;
    while (1)
    {
      if (v64)
      {
        if (v61[(v64 - 1) + 5] != v62 && (int)a4 >= 1)
        {
LABEL_94:
          v69 = v96;
          v68 = v97;
          do
          {
            v70 = *(v69 - 2);
            if (*v61 != v70 && (int)v17 < v66)
            {
              v72 = *v63;
              v73 = strcmp(*v63, "zh_Hant_HK");
              v74 = *v69;
              if (!v73 && !strcmp(*v69, "zh_Hant_TW") || !strcmp(v72, v74))
              {
                v87[(int)v17] = v70;
                v17 = (v17 + 1);
              }
              v9 = v93;
              v66 = v90;
            }
            else
            {
              v9 = v93;
            }
            v69 += 15;
            v68 = (const char **)((char *)v68 - 1);
          }
          while (v68);
        }
      }
      else if ((int)a4 >= 1)
      {
        goto LABEL_94;
      }
      v75 = &v61[++v64];
      v76 = v75[5];
      v63 = v75 + 5;
      v62 = v76;
      LODWORD(a4) = v84;
      if (!v76)
      {
        v49 = v87;
        if (!(_DWORD)v17)
        {
LABEL_108:
          if ((int)a4 < 1)
          {
LABEL_111:
            v17 = 0;
          }
          else
          {
            while (strcmp(*v9, "zxx"))
            {
              ++v9;
              if (!--v98)
                goto LABEL_111;
            }
            *v49 = *v9;
            v17 = 1;
          }
        }
        break;
      }
    }
  }
  sub_18BBFC304((uint64_t)v100);
  return v17;
}

uint64_t sub_18BBFC2B0(const char *a1, const char **a2)
{
  return strcmp(a1, *a2);
}

uint64_t sub_18BBFC2B8()
{
  if (dword_1ECD27948 >= 1)
  {
    ures_close((_QWORD *)qword_1ECD27950);
    qword_1ECD27950 = 0;
  }
  dword_1ECD27948 = 0;
  atomic_store(0, (unsigned int *)&unk_1ECD27958);
  return 1;
}

uint64_t sub_18BBFC304(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 672))
  {
    v2 = sub_18BBFC304();
    MEMORY[0x18D77FE8C](v2, 0x1030C402393BEA7);
  }
  return a1;
}

void *sub_18BBFC344(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_18BBFC388();
  return operator new(24 * a2);
}

void sub_18BBFC388()
{
  abort();
}

void sub_18BBFC394(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  __int128 *v8;
  double *j;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  double v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  double v36;
  double v37;
  double v38;
  unint64_t v39;
  double v40;
  __int128 v41;
  __int128 v42;
  BOOL v43;
  unint64_t v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double *v51;
  double v52;
  unint64_t v53;
  unint64_t k;
  double v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  double v59;
  double v60;
  double *v61;
  double v62;
  double v63;
  double *v64;
  __int128 v65;
  __int128 v66;
  double v67;
  double v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  double v77;
  __int128 v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  __int128 v84;
  int64_t v85;
  int64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  double v91;
  int v92;
  double v93;
  double v94;
  uint64_t v95;
  int v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  int v106;
  double v107;
  int v108;
  __int128 v109;
  int64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  double v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  double v128;
  double v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  double v134;
  unint64_t v135;
  double v136;
  __int128 v137;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  double v142;
  double v143;
  uint64_t v144;
  double v145;
  uint64_t i;
  double v147;
  __int128 v148;
  char __s2[16];
  uint64_t v150;
  char __s1[16];
  uint64_t v152;

LABEL_1:
  v8 = (__int128 *)(a2 - 24);
  j = (double *)a1;
  while (2)
  {
    a1 = (uint64_t)j;
    v10 = a2 - (_QWORD)j;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - (_QWORD)j) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v67 = *(double *)(a2 - 16);
        v68 = *(double *)(a1 + 8);
        if (v67 > v68 || v67 == v68 && strcmp((const char *)(a2 - 24), (const char *)a1) < 0)
        {
          v69 = *(_OWORD *)a1;
          v152 = *(_QWORD *)(a1 + 16);
          *(_OWORD *)__s1 = v69;
          v70 = *v8;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)a1 = v70;
          v71 = *(_OWORD *)__s1;
          *(_QWORD *)(a2 - 8) = v152;
          *v8 = v71;
        }
        return;
      case 3:
        sub_18BBFD07C(a1, (double *)(a1 + 24), (double *)(a2 - 24));
        return;
      case 4:
        sub_18BBFD44C(a1, a1 + 24, a1 + 48, a2 - 24);
        return;
      case 5:
        sub_18BBFCF24(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
        return;
      default:
        if (v10 <= 575)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 != a2)
            {
              v72 = (const char *)(a1 + 24);
              if (a1 + 24 != a2)
              {
                v73 = 0;
                v74 = a1;
                do
                {
                  v75 = v74;
                  v74 = (uint64_t)v72;
                  v76 = *(double *)(v75 + 32);
                  v77 = *(double *)(v75 + 8);
                  if (v76 > v77 || v76 == v77 && strcmp(v72, (const char *)v75) < 0)
                  {
                    v78 = *(_OWORD *)v74;
                    v152 = *(_QWORD *)(v74 + 16);
                    *(_OWORD *)__s1 = v78;
                    *(_OWORD *)v74 = *(_OWORD *)v75;
                    *(_QWORD *)(v74 + 16) = *(_QWORD *)(v75 + 16);
                    v79 = a1;
                    if (v75 != a1)
                    {
                      v80 = *(double *)&__s1[8];
                      v81 = v73;
                      while (1)
                      {
                        v82 = a1 + v81;
                        v83 = *(double *)(a1 + v81 - 16);
                        if (v80 <= v83)
                        {
                          if (v80 != v83)
                          {
                            v79 = a1 + v81;
                            goto LABEL_117;
                          }
                          if ((strcmp(__s1, (const char *)(a1 + v81 - 24)) & 0x80000000) == 0)
                            break;
                        }
                        v75 -= 24;
                        *(_OWORD *)v82 = *(_OWORD *)(a1 + v81 - 24);
                        *(_QWORD *)(v82 + 16) = *(_QWORD *)(a1 + v81 - 8);
                        v81 -= 24;
                        if (!v81)
                        {
                          v79 = a1;
                          goto LABEL_117;
                        }
                      }
                      v79 = v75;
                    }
LABEL_117:
                    v84 = *(_OWORD *)__s1;
                    *(_QWORD *)(v79 + 16) = v152;
                    *(_OWORD *)v79 = v84;
                  }
                  v72 = (const char *)(v74 + 24);
                  v73 += 24;
                }
                while (v74 + 24 != a2);
              }
            }
          }
          else if (a1 != a2)
          {
            v139 = (const char *)(a1 + 24);
            if (a1 + 24 != a2)
            {
              v140 = a1 - 24;
              do
              {
                v141 = a1;
                a1 = (uint64_t)v139;
                v142 = *(double *)(v141 + 32);
                v143 = *(double *)(v141 + 8);
                if (v142 > v143 || v142 == v143 && strcmp(v139, (const char *)v141) < 0)
                {
                  v144 = *(_QWORD *)(a1 + 16);
                  *(_OWORD *)__s1 = *(_OWORD *)a1;
                  v152 = v144;
                  v145 = *(double *)&__s1[8];
                  for (i = v140; ; i -= 24)
                  {
                    *(_OWORD *)(i + 48) = *(_OWORD *)(i + 24);
                    *(_QWORD *)(i + 64) = *(_QWORD *)(i + 40);
                    v147 = *(double *)(i + 8);
                    if (v145 <= v147 && (v145 != v147 || (strcmp(__s1, (const char *)i) & 0x80000000) == 0))
                      break;
                  }
                  v148 = *(_OWORD *)__s1;
                  *(_QWORD *)(i + 40) = v152;
                  *(_OWORD *)(i + 24) = v148;
                }
                v139 = (const char *)(a1 + 24);
                v140 += 24;
              }
              while (a1 + 24 != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 == a2)
            return;
          v85 = (unint64_t)(v11 - 2) >> 1;
          v86 = v85;
          do
          {
            v87 = v86;
            if (v85 >= v86)
            {
              v88 = (2 * v86) | 1;
              v89 = a1 + 24 * v88;
              if (2 * v86 + 2 < v11)
              {
                v90 = *(double *)(a1 + 24 * v88 + 8);
                v91 = *(double *)(v89 + 32);
                if (v90 > v91
                  || v90 == v91
                  && (v92 = strcmp((const char *)(a1 + 24 * v88), (const char *)(v89 + 24)),
                      v85 = (unint64_t)(v11 - 2) >> 1,
                      v92 < 0))
                {
                  v89 += 24;
                  v88 = 2 * v87 + 2;
                }
              }
              v93 = *(double *)(v89 + 8);
              v94 = *(double *)(a1 + 24 * v87 + 8);
              if (v93 <= v94)
              {
                v95 = a1 + 24 * v87;
                if (v93 != v94
                  || (v96 = strcmp((const char *)v89, (const char *)(a1 + 24 * v87)),
                      v85 = (unint64_t)(v11 - 2) >> 1,
                      (v96 & 0x80000000) == 0))
                {
                  v97 = *(_OWORD *)v95;
                  v152 = *(_QWORD *)(v95 + 16);
                  *(_OWORD *)__s1 = v97;
                  v98 = *(_OWORD *)v89;
                  *(_QWORD *)(v95 + 16) = *(_QWORD *)(v89 + 16);
                  *(_OWORD *)v95 = v98;
                  if (v85 >= v88)
                  {
                    v101 = *(double *)&__s1[8];
                    while (1)
                    {
                      v102 = 2 * v88;
                      v88 = (2 * v88) | 1;
                      v99 = a1 + 24 * v88;
                      v103 = v102 + 2;
                      if (v102 + 2 < v11)
                      {
                        v104 = *(double *)(a1 + 24 * v88 + 8);
                        v105 = *(double *)(v99 + 32);
                        if (v104 > v105
                          || v104 == v105
                          && (v106 = strcmp((const char *)(a1 + 24 * v88), (const char *)(v99 + 24)),
                              v85 = (unint64_t)(v11 - 2) >> 1,
                              v106 < 0))
                        {
                          v99 += 24;
                          v88 = v103;
                        }
                      }
                      v107 = *(double *)(v99 + 8);
                      if (v107 > v101)
                        break;
                      if (v107 == v101)
                      {
                        v108 = strcmp((const char *)v99, __s1);
                        v85 = (unint64_t)(v11 - 2) >> 1;
                        if (v108 < 0)
                          break;
                      }
                      v109 = *(_OWORD *)v99;
                      *(_QWORD *)(v89 + 16) = *(_QWORD *)(v99 + 16);
                      *(_OWORD *)v89 = v109;
                      v89 = v99;
                      if (v85 < v88)
                        goto LABEL_133;
                    }
                  }
                  v99 = v89;
LABEL_133:
                  v100 = *(_OWORD *)__s1;
                  *(_QWORD *)(v99 + 16) = v152;
                  *(_OWORD *)v99 = v100;
                }
              }
            }
            v86 = v87 - 1;
          }
          while (v87);
          v110 = v10 / 0x18uLL;
          while (2)
          {
            v111 = 0;
            v112 = *(_OWORD *)a1;
            v150 = *(_QWORD *)(a1 + 16);
            *(_OWORD *)__s2 = v112;
            v113 = a1;
            do
            {
              v114 = v113;
              v115 = v111 + 1;
              v113 += 24 * (v111 + 1);
              v116 = 2 * v111;
              v111 = (2 * v111) | 1;
              v117 = v116 + 2;
              if (v116 + 2 < v110)
              {
                v118 = *(double *)(v114 + 24 * v115 + 8);
                v119 = *(double *)(v113 + 32);
                if (v118 > v119 || v118 == v119 && strcmp((const char *)v113, (const char *)(v113 + 24)) < 0)
                {
                  v113 += 24;
                  v111 = v117;
                }
              }
              v120 = *(_OWORD *)v113;
              *(_QWORD *)(v114 + 16) = *(_QWORD *)(v113 + 16);
              *(_OWORD *)v114 = v120;
            }
            while (v111 <= (uint64_t)((unint64_t)(v110 - 2) >> 1));
            a2 -= 24;
            if (v113 != a2)
            {
              v121 = *(_OWORD *)a2;
              *(_QWORD *)(v113 + 16) = *(_QWORD *)(a2 + 16);
              *(_OWORD *)v113 = v121;
              v122 = *(_OWORD *)__s2;
              *(_QWORD *)(a2 + 16) = v150;
              *(_OWORD *)a2 = v122;
              v123 = v113 - a1 + 24;
              if (v123 >= 25)
              {
                v124 = v123 / 0x18uLL;
                v125 = v124 - 2;
                v126 = (v124 - 2) >> 1;
                v127 = a1 + 24 * v126;
                v128 = *(double *)(v127 + 8);
                v129 = *(double *)(v113 + 8);
                if (v128 > v129
                  || v128 == v129 && strcmp((const char *)(a1 + 24 * ((v124 - 2) >> 1)), (const char *)v113) < 0)
                {
                  v130 = *(_OWORD *)v113;
                  v152 = *(_QWORD *)(v113 + 16);
                  *(_OWORD *)__s1 = v130;
                  v131 = *(_OWORD *)v127;
                  *(_QWORD *)(v113 + 16) = *(_QWORD *)(v127 + 16);
                  *(_OWORD *)v113 = v131;
                  if (v125 >= 2)
                  {
                    v134 = *(double *)&__s1[8];
                    while (1)
                    {
                      v135 = v126 - 1;
                      v126 = (v126 - 1) >> 1;
                      v113 = a1 + 24 * v126;
                      v136 = *(double *)(v113 + 8);
                      if (v136 <= v134
                        && (v136 != v134 || (strcmp((const char *)(a1 + 24 * v126), __s1) & 0x80000000) == 0))
                      {
                        break;
                      }
                      v137 = *(_OWORD *)v113;
                      *(_QWORD *)(v127 + 16) = *(_QWORD *)(v113 + 16);
                      *(_OWORD *)v127 = v137;
                      v127 = a1 + 24 * v126;
                      if (v135 <= 1)
                        goto LABEL_167;
                    }
                  }
                  v113 = v127;
LABEL_167:
                  v132 = *(_OWORD *)__s1;
                  v133 = v152;
LABEL_168:
                  *(_QWORD *)(v113 + 16) = v133;
                  *(_OWORD *)v113 = v132;
                }
              }
              if (v110-- <= 2)
                return;
              continue;
            }
            break;
          }
          v132 = *(_OWORD *)__s2;
          v133 = v150;
          goto LABEL_168;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = a1 + 24 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0xC01)
        {
          sub_18BBFD07C(v13, (double *)a1, (double *)(a2 - 24));
        }
        else
        {
          sub_18BBFD07C(a1, (double *)v13, (double *)(a2 - 24));
          v14 = 3 * v12;
          sub_18BBFD07C(a1 + 24, (double *)(a1 + 8 * v14 - 24), (double *)(a2 - 48));
          sub_18BBFD07C(a1 + 48, (double *)(a1 + 24 + 8 * v14), (double *)(a2 - 72));
          sub_18BBFD07C(a1 + 8 * v14 - 24, (double *)v13, (double *)(a1 + 24 + 8 * v14));
          v15 = *(_OWORD *)a1;
          v152 = *(_QWORD *)(a1 + 16);
          *(_OWORD *)__s1 = v15;
          v16 = *(_QWORD *)(v13 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_QWORD *)(a1 + 16) = v16;
          v17 = *(_OWORD *)__s1;
          *(_QWORD *)(v13 + 16) = v152;
          *(_OWORD *)v13 = v17;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v18 = *(double *)(a1 - 16);
          v19 = *(double *)(a1 + 8);
          if (v18 <= v19 && (v18 != v19 || (strcmp((const char *)(a1 - 24), (const char *)a1) & 0x80000000) == 0))
          {
            v46 = *(_QWORD *)(a1 + 16);
            *(_OWORD *)__s2 = *(_OWORD *)a1;
            v150 = v46;
            v47 = *(double *)&__s2[8];
            v48 = *(double *)(a2 - 16);
            if (*(double *)&__s2[8] > v48 || *(double *)&__s2[8] == v48 && strcmp(__s2, (const char *)(a2 - 24)) < 0)
            {
              v49 = *(double *)(a1 + 32);
              if (v47 <= v49)
              {
                v51 = (double *)(a1 + 56);
                while (1)
                {
                  if (v47 == v49)
                  {
                    j = v51 - 4;
                    if (strcmp(__s2, (const char *)v51 - 32) < 0)
                      break;
                  }
                  v52 = *v51;
                  v51 += 3;
                  v49 = v52;
                  if (v47 > v52)
                  {
                    j = v51 - 4;
                    break;
                  }
                }
              }
              else
              {
                j = (double *)(a1 + 24);
              }
            }
            else
            {
              for (j = (double *)(a1 + 24); (unint64_t)j < a2; j += 3)
              {
                v50 = j[1];
                if (v47 > v50 || v47 == v50 && strcmp(__s2, (const char *)j) < 0)
                  break;
              }
            }
            v53 = a2;
            if ((unint64_t)j < a2)
            {
              for (k = a2 - 40; v47 > v48 || v47 == v48 && strcmp(__s2, (const char *)(k + 16)) < 0; k -= 24)
              {
                v55 = *(double *)k;
                v48 = v55;
              }
              v53 = k + 16;
            }
            while ((unint64_t)j < v53)
            {
              v56 = *(_OWORD *)j;
              v152 = *((_QWORD *)j + 2);
              *(_OWORD *)__s1 = v56;
              v57 = *(_OWORD *)v53;
              j[2] = *(double *)(v53 + 16);
              *(_OWORD *)j = v57;
              v58 = *(_OWORD *)__s1;
              *(_QWORD *)(v53 + 16) = v152;
              *(_OWORD *)v53 = v58;
              v59 = *(double *)&__s2[8];
              v60 = j[4];
              if (*(double *)&__s2[8] <= v60)
              {
                v61 = j + 7;
                while (1)
                {
                  if (v59 == v60)
                  {
                    j = v61 - 4;
                    if (strcmp(__s2, (const char *)v61 - 32) < 0)
                      break;
                  }
                  v62 = *v61;
                  v61 += 3;
                  v60 = v62;
                  if (v59 > v62)
                  {
                    j = v61 - 4;
                    goto LABEL_84;
                  }
                }
              }
              else
              {
                j += 3;
              }
              do
              {
                do
                {
LABEL_84:
                  v53 -= 24;
                  v63 = *(double *)(v53 + 8);
                }
                while (v59 > v63);
              }
              while (v59 == v63 && strcmp(__s2, (const char *)v53) < 0);
            }
            v64 = j - 3;
            if (j - 3 != (double *)a1)
            {
              v65 = *(_OWORD *)v64;
              *(double *)(a1 + 16) = *(j - 1);
              *(_OWORD *)a1 = v65;
            }
            a4 = 0;
            v66 = *(_OWORD *)__s2;
            *((_QWORD *)j - 1) = v150;
            *(_OWORD *)v64 = v66;
            continue;
          }
        }
        v20 = 0;
        v21 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)__s2 = *(_OWORD *)a1;
        v150 = v21;
        v22 = *(double *)&__s2[8];
        while (1)
        {
          v23 = *(double *)(a1 + v20 + 32);
          if (v23 <= v22 && (v23 != v22 || (strcmp((const char *)(a1 + v20 + 24), __s2) & 0x80000000) == 0))
            break;
          v20 += 24;
        }
        v24 = a1 + v20;
        v25 = a1 + v20 + 24;
        if (v20)
        {
          v26 = *(double *)(a2 - 16);
          v27 = a2 - 40;
          v28 = a2 - 24;
          if (v26 <= v22)
          {
            do
            {
              if (v26 == v22 && strcmp((const char *)(v27 + 16), __s2) < 0)
                break;
              v29 = *(double *)v27;
              v27 -= 24;
              v26 = v29;
            }
            while (v29 <= v22);
LABEL_22:
            v28 = v27 + 16;
          }
        }
        else
        {
          v28 = a2;
          if (v25 < a2)
          {
            v30 = *(double *)(a2 - 16);
            v28 = a2 - 24;
            if (v30 <= v22)
            {
              v27 = a2 - 40;
              v28 = a2 - 24;
              while (1)
              {
                v44 = v27 + 16;
                if (v30 == v22)
                {
                  if (strcmp((const char *)(v27 + 16), __s2) < 0 || v25 >= v44)
                    break;
                }
                else if (v25 >= v44)
                {
                  goto LABEL_22;
                }
                v28 -= 24;
                v45 = *(double *)v27;
                v27 -= 24;
                v30 = v45;
                if (v45 > v22)
                  goto LABEL_22;
              }
            }
          }
        }
        if (v25 < v28)
        {
          v31 = v28;
          v32 = v25;
          do
          {
            v33 = *(_OWORD *)v32;
            v152 = *(_QWORD *)(v32 + 16);
            *(_OWORD *)__s1 = v33;
            v34 = *(_OWORD *)v31;
            *(_QWORD *)(v32 + 16) = *(_QWORD *)(v31 + 16);
            *(_OWORD *)v32 = v34;
            v35 = *(_OWORD *)__s1;
            *(_QWORD *)(v31 + 16) = v152;
            *(_OWORD *)v31 = v35;
            v36 = *(double *)&__s2[8];
            do
            {
              do
              {
                v32 += 24;
                v37 = *(double *)(v32 + 8);
              }
              while (v37 > v36);
            }
            while (v37 == v36 && strcmp((const char *)v32, __s2) < 0);
            v38 = *(double *)(v31 - 16);
            if (v38 <= v36)
            {
              v39 = v31 - 40;
              do
              {
                if (v38 == v36 && strcmp((const char *)(v39 + 16), __s2) < 0)
                  break;
                v40 = *(double *)v39;
                v39 -= 24;
                v38 = v40;
              }
              while (v40 <= v36);
              v31 = v39 + 16;
            }
            else
            {
              v31 -= 24;
            }
          }
          while (v32 < v31);
          v24 = v32 - 24;
        }
        if (v24 != a1)
        {
          v41 = *(_OWORD *)v24;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v24 + 16);
          *(_OWORD *)a1 = v41;
        }
        v42 = *(_OWORD *)__s2;
        *(_QWORD *)(v24 + 16) = v150;
        *(_OWORD *)v24 = v42;
        if (v25 < v28)
        {
LABEL_45:
          sub_18BBFC394(a1, v24, a3, a4 & 1);
          a4 = 0;
          j = (double *)(v24 + 24);
          continue;
        }
        v43 = sub_18BBFD204((double *)a1, (char *)v24);
        j = (double *)(v24 + 24);
        if (!sub_18BBFD204((double *)(v24 + 24), (char *)a2))
        {
          if (v43)
            continue;
          goto LABEL_45;
        }
        a2 = v24;
        if (!v43)
          goto LABEL_1;
        return;
    }
  }
}

__n128 sub_18BBFCF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;

  sub_18BBFD44C(a1, a2, a3, a4);
  result.n128_u64[0] = *(_QWORD *)(a5 + 8);
  v11 = *(double *)(a4 + 8);
  if (result.n128_f64[0] > v11 || result.n128_f64[0] == v11 && strcmp((const char *)a5, (const char *)a4) < 0)
  {
    v12 = *(_QWORD *)(a4 + 16);
    result = *(__n128 *)a4;
    v13 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v13;
    *(__n128 *)a5 = result;
    *(_QWORD *)(a5 + 16) = v12;
    result.n128_u64[0] = *(_QWORD *)(a4 + 8);
    v14 = *(double *)(a3 + 8);
    if (result.n128_f64[0] > v14 || result.n128_f64[0] == v14 && strcmp((const char *)a4, (const char *)a3) < 0)
    {
      v15 = *(_QWORD *)(a3 + 16);
      result = *(__n128 *)a3;
      v16 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v16;
      *(__n128 *)a4 = result;
      *(_QWORD *)(a4 + 16) = v15;
      result.n128_u64[0] = *(_QWORD *)(a3 + 8);
      v17 = *(double *)(a2 + 8);
      if (result.n128_f64[0] > v17 || result.n128_f64[0] == v17 && strcmp((const char *)a3, (const char *)a2) < 0)
      {
        v18 = *(_QWORD *)(a2 + 16);
        result = *(__n128 *)a2;
        v19 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v19;
        *(__n128 *)a3 = result;
        *(_QWORD *)(a3 + 16) = v18;
        result.n128_u64[0] = *(_QWORD *)(a2 + 8);
        v20 = *(double *)(a1 + 8);
        if (result.n128_f64[0] > v20 || result.n128_f64[0] == v20 && strcmp((const char *)a2, (const char *)a1) < 0)
        {
          v21 = *(_QWORD *)(a1 + 16);
          result = *(__n128 *)a1;
          v22 = *(_QWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v22;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v21;
        }
      }
    }
  }
  return result;
}

uint64_t sub_18BBFD07C(uint64_t __s2, double *a2, double *__s1)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;

  v5 = __s2;
  v6 = a2[1];
  v7 = *(double *)(__s2 + 8);
  if (v6 > v7 || v6 == v7 && (__s2 = strcmp((const char *)a2, (const char *)__s2), (__s2 & 0x80000000) != 0))
  {
    v8 = __s1[1];
    if (v8 > v6 || v8 == v6 && (__s2 = strcmp((const char *)__s1, (const char *)a2), (__s2 & 0x80000000) != 0))
    {
      v9 = *(_QWORD *)(v5 + 16);
      v10 = *(_OWORD *)v5;
      v11 = *((_QWORD *)__s1 + 2);
      *(_OWORD *)v5 = *(_OWORD *)__s1;
      *(_QWORD *)(v5 + 16) = v11;
LABEL_19:
      *(_OWORD *)__s1 = v10;
      *((_QWORD *)__s1 + 2) = v9;
      return __s2;
    }
    v21 = *(_QWORD *)(v5 + 16);
    v22 = *(_OWORD *)v5;
    v23 = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_QWORD *)(v5 + 16) = v23;
    *(_OWORD *)a2 = v22;
    *((_QWORD *)a2 + 2) = v21;
    v24 = __s1[1];
    v25 = a2[1];
    if (v24 > v25 || v24 == v25 && (__s2 = strcmp((const char *)__s1, (const char *)a2), (__s2 & 0x80000000) != 0))
    {
      v9 = *((_QWORD *)a2 + 2);
      v10 = *(_OWORD *)a2;
      v26 = *((_QWORD *)__s1 + 2);
      *(_OWORD *)a2 = *(_OWORD *)__s1;
      *((_QWORD *)a2 + 2) = v26;
      goto LABEL_19;
    }
  }
  else
  {
    v12 = __s1[1];
    if (v12 > v6 || v12 == v6 && (__s2 = strcmp((const char *)__s1, (const char *)a2), (__s2 & 0x80000000) != 0))
    {
      v13 = *((_QWORD *)a2 + 2);
      v14 = *(_OWORD *)a2;
      v15 = *((_QWORD *)__s1 + 2);
      *(_OWORD *)a2 = *(_OWORD *)__s1;
      *((_QWORD *)a2 + 2) = v15;
      *(_OWORD *)__s1 = v14;
      *((_QWORD *)__s1 + 2) = v13;
      v16 = a2[1];
      v17 = *(double *)(v5 + 8);
      if (v16 > v17 || v16 == v17 && (__s2 = strcmp((const char *)a2, (const char *)v5), (__s2 & 0x80000000) != 0))
      {
        v18 = *(_QWORD *)(v5 + 16);
        v19 = *(_OWORD *)v5;
        v20 = *((_QWORD *)a2 + 2);
        *(_OWORD *)v5 = *(_OWORD *)a2;
        *(_QWORD *)(v5 + 16) = v20;
        *(_OWORD *)a2 = v19;
        *((_QWORD *)a2 + 2) = v18;
      }
    }
  }
  return __s2;
}

BOOL sub_18BBFD204(double *__s2, char *a2)
{
  unint64_t v4;
  _BOOL8 result;
  char *v6;
  double v7;
  double v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  double v16;
  double v17;
  char *v18;
  double v19;
  uint64_t v20;
  char *v21;
  double v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (char *)__s2) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 24;
      v7 = *((double *)a2 - 2);
      v8 = __s2[1];
      if (v7 > v8)
        goto LABEL_5;
      if (v7 == v8)
      {
        if ((strcmp(a2 - 24, (const char *)__s2) & 0x80000000) == 0)
          return 1;
LABEL_5:
        v9 = *((_QWORD *)__s2 + 2);
        v10 = *(_OWORD *)__s2;
        v11 = *((_QWORD *)a2 - 1);
        *(_OWORD *)__s2 = *(_OWORD *)v6;
        *((_QWORD *)__s2 + 2) = v11;
        *(_OWORD *)v6 = v10;
        *((_QWORD *)a2 - 1) = v9;
        return 1;
      }
      return result;
    case 3uLL:
      sub_18BBFD07C((uint64_t)__s2, __s2 + 3, (double *)a2 - 3);
      return 1;
    case 4uLL:
      sub_18BBFD44C((uint64_t)__s2, (uint64_t)(__s2 + 3), (uint64_t)(__s2 + 6), (uint64_t)(a2 - 24));
      return 1;
    case 5uLL:
      sub_18BBFCF24((uint64_t)__s2, (uint64_t)(__s2 + 3), (uint64_t)(__s2 + 6), (uint64_t)(__s2 + 9), (uint64_t)(a2 - 24));
      return 1;
    default:
      v12 = (char *)(__s2 + 6);
      sub_18BBFD07C((uint64_t)__s2, __s2 + 3, __s2 + 6);
      v13 = (char *)(__s2 + 9);
      if (__s2 + 9 == (double *)a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *((double *)v13 + 1);
    v17 = *((double *)v12 + 1);
    if (v16 > v17 || v16 == v17 && strcmp(v13, v12) < 0)
    {
      v24 = *(_OWORD *)v13;
      v25 = *((_QWORD *)v13 + 2);
      *(_OWORD *)v13 = *(_OWORD *)v12;
      *((_QWORD *)v13 + 2) = *((_QWORD *)v12 + 2);
      v18 = (char *)__s2;
      if (v12 != (char *)__s2)
      {
        v19 = *((double *)&v24 + 1);
        v20 = v14;
        while (1)
        {
          v21 = (char *)__s2 + v20;
          v22 = *(double *)((char *)__s2 + v20 + 32);
          if (v19 <= v22)
          {
            if (v19 != v22)
            {
              v18 = v12;
              goto LABEL_20;
            }
            if ((strcmp((const char *)&v24, (const char *)__s2 + v20 + 24) & 0x80000000) == 0)
              break;
          }
          v12 -= 24;
          *((_OWORD *)v21 + 3) = *(_OWORD *)((char *)__s2 + v20 + 24);
          *((double *)v21 + 8) = *(double *)((char *)__s2 + v20 + 40);
          v20 -= 24;
          if (v20 == -48)
          {
            v18 = (char *)__s2;
            goto LABEL_20;
          }
        }
        v18 = (char *)__s2 + v20 + 48;
      }
LABEL_20:
      v23 = v24;
      *((_QWORD *)v18 + 2) = v25;
      *(_OWORD *)v18 = v23;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

__n128 sub_18BBFD44C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;

  sub_18BBFD07C(a1, (double *)a2, (double *)a3);
  result.n128_u64[0] = *(_QWORD *)(a4 + 8);
  v9 = *(double *)(a3 + 8);
  if (result.n128_f64[0] > v9 || result.n128_f64[0] == v9 && strcmp((const char *)a4, (const char *)a3) < 0)
  {
    v10 = *(_QWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v11 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v11;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v10;
    result.n128_u64[0] = *(_QWORD *)(a3 + 8);
    v12 = *(double *)(a2 + 8);
    if (result.n128_f64[0] > v12 || result.n128_f64[0] == v12 && strcmp((const char *)a3, (const char *)a2) < 0)
    {
      v13 = *(_QWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v14 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v14;
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 16) = v13;
      result.n128_u64[0] = *(_QWORD *)(a2 + 8);
      v15 = *(double *)(a1 + 8);
      if (result.n128_f64[0] > v15 || result.n128_f64[0] == v15 && strcmp((const char *)a2, (const char *)a1) < 0)
      {
        v16 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v17 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v17;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v16;
      }
    }
  }
  return result;
}

uint64_t uprv_uint16Comparator(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return *a2 - *a3;
}

uint64_t uprv_int32Comparator(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return (*a2 - *a3);
}

uint64_t uprv_uint32Comparator(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 < *a3)
    return 0xFFFFFFFFLL;
  else
    return *a2 != *a3;
}

uint64_t uprv_stableBinarySearch(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6)
{
  int v10;
  char v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v10 = a2;
  if (a2 < 9)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = v13 + v10;
      if (v13 + v10 < 0 != __OFADD__(v13, v10))
        ++v14;
      v15 = v14 >> 1;
      v16 = a5(a6, a3, a1 + (v14 >> 1) * (uint64_t)a4);
      if (v16 >= 0)
        v17 = v10;
      else
        v17 = v15;
      if (v16 >= 0)
        v18 = v15;
      else
        v18 = v13;
      if (v16)
      {
        v10 = v17;
        v13 = v18;
      }
      else
      {
        v13 = v15 + 1;
      }
      if (!v16)
        v12 = 1;
    }
    while (v10 - v13 > 8);
  }
  if (v13 < v10)
  {
    v19 = a4;
    v20 = a1 + v13 * (uint64_t)a4;
    do
    {
      v21 = a5(a6, a3, v20);
      if (v21)
      {
        if (v21 < 0)
          goto LABEL_27;
      }
      else
      {
        v12 = 1;
      }
      ++v13;
      v20 += v19;
    }
    while (v10 != v13);
    v13 = v10;
  }
LABEL_27:
  if (v12)
    return (v13 - 1);
  else
    return ~v13;
}

void uprv_sortArray(uint64_t a1, uint64_t a2, int a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5, int a6, int *a7)
{
  BOOL v11;
  int v12;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  if (a7 && *a7 <= 0)
  {
    if (a1)
      v11 = 1;
    else
      v11 = (int)a2 <= 0;
    v12 = !v11;
    if (!a4 || a3 < 1 || (a2 & 0x80000000) != 0 || v12)
    {
      *a7 = 1;
      return;
    }
    if (a2 < 2)
      return;
    v15 = a3 + 7;
    v16 = v15 >> 3;
    if (a2 >= 9 && !a6)
    {
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v38 = 0u;
      v47 = 0;
      v37 = 0u;
      v36 = 0u;
      v35 = 0u;
      v34 = 0u;
      v33 = 0u;
      v32 = 0u;
      v31 = 0u;
      v30 = 0u;
      v29 = 0u;
      v28 = 0u;
      v27 = 0u;
      v26 = 0u;
      v25 = 0u;
      v24 = 0u;
      v23 = 0u;
      v22 = 0u;
      v17 = (char *)&v22 + 8;
      v21 = (char *)&v22 + 8;
      if (v16 < 0x1A)
      {
LABEL_21:
        sub_18BBFD9F0(a1, 0, a2, a3, a4, a5, v17, &v17[8 * v16]);
        goto LABEL_30;
      }
      v18 = (char *)uprv_malloc(8 * (2 * v16));
      if (v18)
      {
        v17 = v18;
        if (BYTE4(v22))
          uprv_free((char *)&v22 + 8);
        v21 = v17;
        BYTE4(v22) = 1;
        goto LABEL_21;
      }
      goto LABEL_29;
    }
    v22 = 0u;
    v34 = 0u;
    v33 = 0u;
    v32 = 0u;
    v31 = 0u;
    v30 = 0u;
    v29 = 0u;
    v28 = 0u;
    v27 = 0u;
    v26 = 0u;
    v25 = 0u;
    v24 = 0u;
    v23 = 0u;
    v19 = (char *)&v22 + 8;
    v21 = (char *)&v22 + 8;
    if (v16 >= 0x1A)
    {
      v20 = (char *)uprv_malloc(v15 & 0x1FFFFFFF8);
      if (!v20)
      {
LABEL_29:
        *a7 = 7;
LABEL_30:
        if (BYTE4(v22))
          uprv_free(v21);
        return;
      }
      v19 = v20;
      if (BYTE4(v22))
        uprv_free((char *)&v22 + 8);
      v21 = v19;
      BYTE4(v22) = 1;
    }
    sub_18BBFD8D4(a1, a2, a3, a4, a5, v19);
    goto LABEL_30;
  }
}

uint64_t sub_18BBFD8D4(uint64_t result, int a2, int a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5, void *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a2 >= 2)
  {
    v9 = result;
    v22 = result;
    v10 = a3;
    v11 = a2;
    v12 = 1;
    v13 = (char *)(result + a3);
    v21 = a2;
    v14 = a3;
    do
    {
      result = uprv_stableBinarySearch(v9, v12, (uint64_t)v13, a3, a4, a5);
      v15 = ~(_DWORD)result;
      if ((int)result >= 0)
        v15 = result + 1;
      if (v12 > v15)
      {
        v16 = a4;
        v17 = a5;
        v18 = v15;
        v19 = (char *)(v9 + v15 * (uint64_t)(int)v10);
        memcpy(a6, v13, v14);
        v20 = v12 - v18;
        a5 = v17;
        a4 = v16;
        v11 = v21;
        memmove(&v19[v14], v19, v20 * v14);
        v9 = v22;
        result = (uint64_t)memcpy(v19, a6, v14);
      }
      ++v12;
      v13 += v10;
    }
    while (v11 != v12);
  }
  return result;
}

uint64_t sub_18BBFD9F0(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6, void *a7, void *a8)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  void *v22;
  int v24;
  unsigned int v25;
  size_t __n;
  uint64_t v28;
  uint64_t v29;

  v13 = a4;
  __n = a4;
  v29 = -(uint64_t)a4;
  v28 = a4;
  while (a2 + 9 < (int)a3)
  {
    v14 = a2 + a3;
    if (a2 + (int)a3 < 0 != __OFADD__(a2, (_DWORD)a3))
      ++v14;
    memcpy(a7, (const void *)(a1 + ((uint64_t)v14 >> 1) * __n), __n);
    v24 = a2;
    v25 = a3;
    LODWORD(v15) = a2;
    do
    {
      v16 = ((uint64_t)(int)v15 << 32) - 0x100000000;
      v17 = a1 + (int)v13 * (uint64_t)(int)v15;
      do
      {
        v18 = a5(a6, v17, (uint64_t)a7);
        v16 += 0x100000000;
        v15 = (v15 + 1);
        v17 += v13;
      }
      while (v18 < 0);
      v19 = a3 << 32;
      v20 = a1 + v13 * ((int)a3 - 1);
      do
      {
        result = a5(a6, (uint64_t)a7, v20);
        a3 = (a3 - 1);
        v19 -= 0x100000000;
        v20 += v29;
      }
      while ((result & 0x80000000) != 0);
      if ((int)v15 - 1 >= (int)a3 + 1)
      {
        v15 = (v15 - 1);
        a3 = (a3 + 1);
      }
      else if ((int)v15 - 1 < (int)a3)
      {
        memcpy(a8, (const void *)(a1 + (v16 >> 32) * __n), __n);
        v22 = (void *)(a1 + (v19 >> 32) * __n);
        memcpy((void *)(a1 + (v16 >> 32) * __n), v22, __n);
        result = (uint64_t)memcpy(v22, a8, __n);
      }
      v13 = v28;
    }
    while ((int)v15 < (int)a3);
    if ((int)a3 - v24 >= (int)(v25 - v15))
    {
      if ((int)v15 < (int)(v25 - 1))
        result = sub_18BBFD9F0(a1, v15);
      LODWORD(v15) = v24;
    }
    else
    {
      if (v24 < (int)a3 - 1)
        result = sub_18BBFD9F0(a1, v24);
      a3 = v25;
    }
    a2 = v15;
    if ((int)v15 >= (int)a3 - 1)
      return result;
  }
  return sub_18BBFD8D4(a1 + (int)v13 * (uint64_t)a2, (int)a3 - a2, a4, a5, a6, a7);
}

void **ubidi_open()
{
  int v1;

  v1 = 0;
  return ubidi_openSized(0, 0, &v1);
}

void **ubidi_openSized(int a1, int a2, int *a3)
{
  void **v4;
  void **v8;
  int v9;

  if (!a3 || *a3 > 0)
    return 0;
  if ((a2 | a1) < 0)
  {
    v4 = 0;
    v9 = 1;
LABEL_13:
    *a3 = v9;
    return v4;
  }
  v8 = (void **)uprv_malloc(0x1E0uLL);
  v4 = v8;
  if (!v8)
  {
    v9 = 7;
    goto LABEL_13;
  }
  *((_OWORD *)v8 + 28) = 0u;
  *((_OWORD *)v8 + 29) = 0u;
  *((_OWORD *)v8 + 26) = 0u;
  *((_OWORD *)v8 + 27) = 0u;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((_OWORD *)v8 + 22) = 0u;
  *((_OWORD *)v8 + 23) = 0u;
  *((_OWORD *)v8 + 20) = 0u;
  *((_OWORD *)v8 + 21) = 0u;
  *((_OWORD *)v8 + 18) = 0u;
  *((_OWORD *)v8 + 19) = 0u;
  *((_OWORD *)v8 + 16) = 0u;
  *((_OWORD *)v8 + 17) = 0u;
  *((_OWORD *)v8 + 14) = 0u;
  *((_OWORD *)v8 + 15) = 0u;
  *((_OWORD *)v8 + 12) = 0u;
  *((_OWORD *)v8 + 13) = 0u;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  if (a1 < 1)
  {
    *((_BYTE *)v8 + 112) = 1;
  }
  else if (!sub_18BBFDDDC(v8 + 8, (_DWORD *)v8 + 8, 1, a1)
         || !sub_18BBFDDDC(v4 + 9, (_DWORD *)v4 + 9, 1, a1))
  {
    *a3 = 7;
  }
  if (a2 < 1)
  {
    *((_BYTE *)v4 + 113) = 1;
    goto LABEL_21;
  }
  if (a2 == 1)
  {
    *((_DWORD *)v4 + 12) = 12;
    goto LABEL_21;
  }
  if (sub_18BBFDDDC(v4 + 12, (_DWORD *)v4 + 12, 1, 12 * a2))
  {
LABEL_21:
    if (*a3 < 1)
      return v4;
    goto LABEL_22;
  }
  *a3 = 7;
LABEL_22:
  ubidi_close(v4);
  return 0;
}

uint64_t sub_18BBFDDDC(void **a1, _DWORD *a2, int a3, int a4)
{
  void *v7;
  uint64_t result;

  v7 = *a1;
  if (v7)
  {
    if (*a2 >= a4)
      return 1;
    if (a3)
    {
      result = (uint64_t)uprv_realloc(v7, a4);
      if (!result)
        return result;
      *a1 = (void *)result;
LABEL_8:
      *a2 = a4;
      return 1;
    }
  }
  else if (a3)
  {
    result = (uint64_t)uprv_malloc(a4);
    *a1 = (void *)result;
    if (!result)
      return result;
    goto LABEL_8;
  }
  return 0;
}

void ubidi_close(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (a1)
  {
    *a1 = 0;
    v2 = (void *)a1[7];
    if (v2)
      uprv_free(v2);
    v3 = (void *)a1[8];
    if (v3)
      uprv_free(v3);
    v4 = (void *)a1[9];
    if (v4)
      uprv_free(v4);
    v5 = (void *)a1[10];
    if (v5)
      uprv_free(v5);
    v6 = (void *)a1[11];
    if (v6)
      uprv_free(v6);
    v7 = (void *)a1[12];
    if (v7)
      uprv_free(v7);
    v8 = (void *)a1[13];
    if (v8)
      uprv_free(v8);
    v9 = (void *)a1[56];
    if (v9)
      uprv_free(v9);
    uprv_free(a1);
  }
}

uint64_t ubidi_setInverse(uint64_t result, int a2)
{
  if (result)
  {
    *(_BYTE *)(result + 144) = a2;
    *(_DWORD *)(result + 148) = 4 * (a2 != 0);
  }
  return result;
}

uint64_t ubidi_isInverse(uint64_t a1)
{
  if (a1)
    return *(char *)(a1 + 144);
  else
    return 0;
}

uint64_t ubidi_setReorderingMode(uint64_t result, unsigned int a2)
{
  if (result)
  {
    if (a2 <= 6)
    {
      *(_DWORD *)(result + 148) = a2;
      *(_BYTE *)(result + 144) = a2 == 4;
    }
  }
  return result;
}

uint64_t ubidi_getReorderingMode(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 148);
  return result;
}

uint64_t ubidi_setReorderingOptions(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if (result)
  {
    v2 = a2 & 0xFFFFFFFE;
    if ((a2 & 2) == 0)
      v2 = a2;
    *(_DWORD *)(result + 152) = v2;
  }
  return result;
}

uint64_t ubidi_getReorderingOptions(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 152);
  return result;
}

uint64_t ubidi_getBaseDirection(UChar *s, int a2)
{
  uint64_t result;
  int32_t v4;
  int32_t v5;
  uint64_t v6;
  UChar32 v7;
  int v9;
  BOOL v10;
  int v11;

  result = 3;
  if (s)
  {
    v4 = a2;
    if (a2 >= -1)
    {
      if (a2 == -1)
        v4 = u_strlen(s);
      v5 = 0;
      while (v5 < v4)
      {
        v6 = v5 + 1;
        v7 = s[v5];
        if ((v7 & 0xFC00) != 0xD800 || (_DWORD)v6 == v4)
        {
          ++v5;
        }
        else
        {
          v9 = s[v6];
          v10 = (v9 & 0xFC00) == 56320;
          v11 = v9 + (v7 << 10) - 56613888;
          if (v10)
            v5 += 2;
          else
            ++v5;
          if (v10)
            v7 = v11;
        }
        result = u_charDirection(v7);
        if (!(_DWORD)result)
          return result;
        if ((_DWORD)result == 13 || (_DWORD)result == 1)
          return 1;
      }
      return 3;
    }
  }
  return result;
}

uint64_t sub_18BBFE03C(uint64_t a1, int a2)
{
  unint64_t v2;
  _DWORD *v3;
  unint64_t v4;
  _BOOL4 v5;
  int v6;
  int *v7;
  int v8;

  v2 = *(unsigned int *)(a1 + 216);
  v3 = *(_DWORD **)(a1 + 224);
  if ((int)v2 <= 0)
  {
    v6 = v2 - 1;
  }
  else
  {
    if (*v3 <= a2)
    {
      v4 = 0;
      v7 = v3 + 2;
      while (v2 - 1 != v4)
      {
        v8 = *v7;
        v7 += 2;
        ++v4;
        if (v8 > a2)
        {
          v5 = v4 < v2;
          goto LABEL_10;
        }
      }
      v5 = 0;
      LODWORD(v4) = *(_DWORD *)(a1 + 216);
    }
    else
    {
      LODWORD(v4) = 0;
      v5 = 1;
    }
LABEL_10:
    v6 = v2 - 1;
    if (v5)
      v6 = v4;
  }
  return LOBYTE(v3[2 * v6 + 1]);
}

uint64_t ubidi_setContext(uint64_t result, UChar *s, int a3, UChar *a4, int a5, int *a6)
{
  uint64_t v6;
  int v7;

  if (a6 && *a6 <= 0)
  {
    v6 = result;
    if (result && a3 >= -1 && (v7 = a5, a5 >= -1) && (s || !a3) && (a4 || !a5))
    {
      if (a3 == -1)
      {
        result = u_strlen(s);
        a3 = result;
      }
      *(_DWORD *)(v6 + 168) = a3;
      if (v7 == -1)
      {
        result = u_strlen(a4);
        v7 = result;
      }
      *(_DWORD *)(v6 + 184) = v7;
      *(_QWORD *)(v6 + 160) = s;
      *(_QWORD *)(v6 + 176) = a4;
    }
    else
    {
      *a6 = 1;
    }
  }
  return result;
}

void ubidi_setPara(uint64_t a1, const UChar *a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (a6)
  {
    if (*a6 <= 0)
      sub_18BBFE1A0(a1, a2, a3, a4, a5, 0, 0, 0, 0, a6);
  }
}

void sub_18BBFE1A0(uint64_t a1, const UChar *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, int *a10)
{
  int *v10;
  uint64_t v12;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  unsigned __int8 *v25;
  char *Levels;
  int v27;
  int v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int *v64;
  uint64_t v65;
  _DWORD *v66;
  _DWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  unsigned int *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _WORD *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  _WORD *v92;
  unsigned int CustomizedClass;
  uint64_t v94;
  unsigned int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  int v109;
  BOOL v110;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  int v116;
  int v117;
  int v118;
  unsigned int v119;
  int v120;
  char v121;
  uint64_t v122;
  int v123;
  int v128;
  uint64_t v129;
  _BOOL4 v130;
  uint64_t v131;
  int v133;
  BOOL v134;
  unsigned int v135;
  unsigned __int8 v136;
  int v137;
  _OWORD *v138;
  int v139;
  _BOOL4 v140;
  _OWORD *v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  int v145;
  uint64_t v146;
  int v147;
  int v148;
  unsigned int v149;
  _BOOL4 v150;
  uint64_t v151;
  int *v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  char v163;
  int v164;
  uint64_t v165;
  unsigned int *v166;
  int v167;
  int v168;
  BOOL v169;
  uint64_t v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  uint64_t v175;
  uint64_t *v176;
  int v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  int v185;
  int v186;
  uint64_t v187;
  char v188;
  unsigned __int8 *v189;
  int v190;
  int v191;
  _UNKNOWN **v192;
  int v193;
  char v194;
  unsigned int v195;
  uint64_t v196;
  unsigned int v197;
  char v198;
  unsigned __int8 v199;
  unsigned __int8 v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  BOOL v204;
  int v205;
  int v206;
  _DWORD *v207;
  unint64_t v208;
  unint64_t v209;
  int *v210;
  int v211;
  _BOOL4 v212;
  int v213;
  char v214;
  unsigned __int8 *v215;
  int v216;
  char v217;
  _DWORD *v218;
  int v219;
  unsigned int v220;
  _BOOL4 v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  void **v225;
  int v226;
  int v227;
  int v228;
  _OWORD *v229;
  int v230;
  int v231;
  int *v232;
  unsigned int v233;
  _WORD *v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  char *v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  _OWORD v242[31];
  uint64_t v243;
  _OWORD v244[8];
  _OWORD v245[31];
  uint64_t v246;
  uint64_t v247;

  v10 = a10;
  v247 = *MEMORY[0x1E0C80C00];
  if (!a1 || !a2 || (v12 = a3, (int)a3 < -1) || ((char)(a4 - 126) & 0x80000000) == 0)
  {
    v80 = 1;
LABEL_81:
    *v10 = v80;
    return;
  }
  if ((_DWORD)a3 == -1)
    v12 = u_strlen(a2);
  v19 = *(_DWORD *)(a1 + 148);
  if (v19 <= 2)
    v20 = a7;
  else
    v20 = 0;
  if (a7 <= 0)
    v21 = 0;
  else
    v21 = v20;
  if (v19 == 3)
  {
    *(_DWORD *)(a1 + 148) = 0;
    if (!(_DWORD)v12)
    {
      if (a10 && *a10 <= 0)
        sub_18BBFE1A0(a1, a2, 0, a4, 0, 0, 0, 0, 0, a10);
      v22 = 0;
      goto LABEL_120;
    }
    v22 = (int *)uprv_malloc(7 * (int)v12);
    if (!v22)
    {
      *a10 = 7;
      goto LABEL_120;
    }
    v23 = *(_DWORD *)(a1 + 152);
    if ((v23 & 1) != 0)
      *(_DWORD *)(a1 + 152) = v23 & 0xFFFFFFFC | 2;
    v24 = a4 & 1;
    if (a10)
    {
      if (*a10 > 0)
        goto LABEL_120;
      sub_18BBFE1A0(a1, a2, v12, a4 & 1, 0, 0, 0, 0, 0, a10);
    }
    if (*a10 <= 0)
    {
      v25 = (unsigned __int8 *)&v22[(int)v12] + 2 * (int)v12;
      Levels = ubidi_getLevels(a1, a10);
      v27 = *(_DWORD *)(a1 + 20);
      memcpy(v25, Levels, v27);
      v239 = *(_DWORD *)(a1 + 200);
      v28 = *(_DWORD *)(a1 + 212);
      v233 = ubidi_writeReordered(a1, (unint64_t)&v22[(int)v12], v12, 2, a10);
      ubidi_getVisualMap(a1, v22, a10);
      v29 = v239;
      if (*a10 >= 1)
      {
LABEL_76:
        *(_QWORD *)(a1 + 8) = a2;
        *(_DWORD *)(a1 + 16) = v12;
        *(_DWORD *)(a1 + 20) = v27;
        *(_DWORD *)(a1 + 200) = v29;
        v79 = *(_DWORD *)(a1 + 36);
        if (v27 < v79)
          v79 = v27;
        memcpy(*(void **)(a1 + 136), v25, v79);
        *(_DWORD *)(a1 + 212) = v28;
        if (*(int *)(a1 + 312) > 1)
          *(_DWORD *)(a1 + 200) = 2;
        goto LABEL_120;
      }
      v228 = v28;
      v230 = v27;
      *(_DWORD *)(a1 + 148) = 5;
      *(_DWORD *)(a1 + 152) = v23;
      v30 = *(_BYTE *)(a1 + 112);
      *(_BYTE *)(a1 + 112) = 0;
      sub_18BBFE1A0(a1, &v22[(int)v12], v233, v24 ^ 1u, 0, 0, 0, 0, 0, a10);
      *(_BYTE *)(a1 + 112) = v30;
      sub_18BC02BAC(a1);
      if (*a10 <= 0)
      {
        v31 = *(unsigned int *)(a1 + 312);
        if ((int)v31 >= 1)
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = *(uint64_t **)(a1 + 320);
          do
          {
            v36 = *((_DWORD *)v35 + 3 * v32 + 1);
            v37 = v36 - v34;
            if (v37 >= 2)
            {
              v38 = *((_DWORD *)v35 + 3 * v32);
              v39 = (v38 & 0x7FFFFFFF) + v37;
              v40 = v38 & 0x7FFFFFFF;
              do
              {
                v41 = v22[v40 + 1];
                v42 = v22[v40];
                v43 = v41 - v42;
                if ((int)v41 - (int)v42 < 0)
                  v43 = v42 - v41;
                if (v43 != 1 || v25[v41] != v25[v42])
                  ++v33;
                ++v40;
              }
              while (v39 > (int)v40 + 1);
            }
            ++v32;
            v34 = v36;
          }
          while (v32 != v31);
          if (!v33)
            goto LABEL_40;
          if (sub_18BBFDDDC((void **)(a1 + 96), (_DWORD *)(a1 + 48), *(char *)(a1 + 113), 12 * (v33 + (int)v31)))
          {
            if ((_DWORD)v31 == 1)
            {
              v44 = *(_QWORD *)(a1 + 96);
              v45 = *v35;
              *(_DWORD *)(v44 + 8) = *((_DWORD *)v35 + 2);
              *(_QWORD *)v44 = v45;
            }
            v35 = *(uint64_t **)(a1 + 96);
            *(_QWORD *)(a1 + 320) = v35;
            *(_DWORD *)(a1 + 312) += v33;
            do
            {
LABEL_40:
              v46 = v31 - 1;
              if ((_DWORD)v31 == 1)
              {
                v47 = 0;
                v48 = *((_DWORD *)v35 + 1);
                v49 = v48;
              }
              else
              {
                v47 = v31 - 1;
                v48 = *((_DWORD *)v35 + 3 * v46 + 1);
                v49 = v48 - *((_DWORD *)v35 + 3 * (v31 - 2) + 1);
              }
              v50 = (unsigned int *)v35 + 3 * v47;
              v51 = *v50;
              v52 = (v51 >> 31) & 1;
              v53 = v51 & 0x7FFFFFFF;
              if (v49 > 1)
              {
                v58 = v49 + v53 - 1;
                if ((v51 & 0x80000000) != 0)
                  v59 = v51 & 0x7FFFFFFF;
                else
                  v59 = v49 + v53 - 1;
                if ((v51 & 0x80000000) != 0)
                  LODWORD(v53) = v58;
                if (v59 == (_DWORD)v53)
                {
                  v60 = v59;
                }
                else
                {
                  v61 = 0;
                  if ((v51 & 0x80000000) == 0)
                    v62 = -1;
                  else
                    v62 = 1;
                  v63 = v59;
                  v64 = &v22[v59];
                  v65 = (uint64_t)v35 + 12 * v47;
                  v66 = (_DWORD *)(v65 + 4);
                  v67 = (_DWORD *)(v65 + 8);
                  v68 = v62 + v59;
                  v60 = v59;
                  do
                  {
                    v69 = v64[v61];
                    v63 += v62;
                    v70 = v64[v62 + v61];
                    v71 = v69 - v70;
                    if ((int)v69 - (int)v70 < 0)
                      v71 = v70 - v69;
                    if (v71 == 1 && v25[v69] == v25[v70])
                    {
                      v72 = v68 + v61;
                    }
                    else
                    {
                      v73 = v22[v60];
                      if (v73 >= (int)v69)
                        v73 = v64[v61];
                      v74 = (unsigned int *)v35 + 3 * (int)(v33 + v46);
                      *v74 = v73 | ((v52 ^ v25[v73]) << 31);
                      v74[1] = v48;
                      v75 = v59 + v61 - v60;
                      if (v75 < 0)
                        v75 = v60 - (v59 + v61);
                      v48 = *v66 + ~v75;
                      *v66 = v48;
                      v76 = *v67 & 0xA;
                      v74[2] = v76;
                      *v67 &= ~v76;
                      --v33;
                      v60 = v68 + v61;
                      v72 = v63;
                    }
                    v61 += v62;
                  }
                  while (v72 != (_DWORD)v53);
                }
                v54 = v33 + (uint64_t)(int)v46;
                if (v33)
                {
                  v77 = *(_QWORD *)v50;
                  v78 = (uint64_t)v35 + 12 * v54;
                  *(_DWORD *)(v78 + 8) = v50[2];
                  *(_QWORD *)v78 = v77;
                }
                v57 = v22[(int)v53];
                if (v22[v60] < v57)
                  v57 = v22[v60];
              }
              else
              {
                v54 = v33 + (uint64_t)(int)v46;
                if (v33)
                {
                  v55 = *(_QWORD *)v50;
                  v56 = (uint64_t)v35 + 12 * v54;
                  *(_DWORD *)(v56 + 8) = v50[2];
                  *(_QWORD *)v56 = v55;
                }
                v57 = v22[v53];
              }
              *((_DWORD *)v35 + 3 * v54) = v57 | ((v52 ^ v25[v57]) << 31);
              v169 = v31-- <= 1;
            }
            while (!v169);
          }
        }
      }
      *(_BYTE *)(a1 + 157) ^= 1u;
      v27 = v230;
      v28 = v228;
      v29 = v239;
      goto LABEL_76;
    }
LABEL_120:
    uprv_free(v22);
    *(_DWORD *)(a1 + 148) = 3;
    return;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 20) = v12;
  *(_DWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 157) = a4;
  *(_DWORD *)(a1 + 200) = a4 & 1;
  *(_DWORD *)(a1 + 216) = 1;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 436) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 158) = a4 > 0xFD;
  if (!(_DWORD)v12)
  {
    if (a4 >= 0xFE)
      *(_WORD *)(a1 + 157) = a4 & 1;
    *(_DWORD *)(a1 + 204) = dword_18BDE0DEC[a4 & 1];
    *(_DWORD *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 216) = 0;
    goto LABEL_115;
  }
  v81 = *(_QWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 312) = -1;
  v229 = (_OWORD *)(a1 + 232);
  if (!v81)
    v81 = a1 + 232;
  v225 = (void **)(a1 + 88);
  *(_QWORD *)(a1 + 224) = v81;
  if ((_DWORD)v21)
  {
    if (sub_18BBFDDDC((void **)(a1 + 56), (_DWORD *)(a1 + 28), *(char *)(a1 + 112), 2 * (int)v12))
    {
      v82 = *(void **)(a1 + 56);
      *(_QWORD *)(a1 + 120) = v82;
      v83 = *(unsigned int *)(a1 + 20);
      if ((int)v83 >= 1)
        bzero(v82, 2 * v83);
      v84 = 0;
      v232 = a10;
      v234 = v82;
      v223 = a5;
      v236 = v21;
      while (1)
      {
        v85 = *(unsigned int *)(a6 + 4 * v84);
        if ((v85 & 0x80000000) != 0 || (int)v85 >= *(_DWORD *)(a1 + 20))
          goto LABEL_117;
        v86 = a8 ? *(_DWORD *)(a8 + 4 * v84) : v84;
        v87 = *(_WORD **)(a9 + 8 * v86);
        if (!v87)
          goto LABEL_117;
        v88 = (unsigned __int16)*v87;
        if (*v87)
          break;
        LOWORD(v91) = 0;
LABEL_104:
        v234[v85] = v91;
        ++v84;
        v10 = a10;
        a5 = v223;
        if (v84 == v236)
          goto LABEL_105;
      }
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v92 = v87 + 1;
      while ((v88 & 0xF800) != 0xD800)
      {
        CustomizedClass = ubidi_getCustomizedClass(a1, v88);
        if (v90 > 3 || ((0x79D800uLL >> CustomizedClass) & 1) == 0)
          break;
        v91 |= word_18BDE0DF4[CustomizedClass] << v89;
        v88 = (unsigned __int16)v92[v90++];
        v89 += 4;
        if (!(_DWORD)v88)
          goto LABEL_104;
      }
LABEL_117:
      v96 = 1;
      goto LABEL_118;
    }
    goto LABEL_116;
  }
LABEL_105:
  if (!sub_18BBFDDDC((void **)(a1 + 64), (_DWORD *)(a1 + 32), *(char *)(a1 + 112), v12))
  {
LABEL_116:
    v80 = 7;
    goto LABEL_81;
  }
  v94 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 128) = v94;
  v95 = *(unsigned __int8 *)(a1 + 157);
  v232 = v10;
  v221 = v95 >= 0xFE && (*(_DWORD *)(a1 + 148) - 5) < 2;
  v97 = *(_QWORD *)(a1 + 8);
  v98 = *(_QWORD *)(a1 + 120);
  v99 = *(_DWORD *)(a1 + 16);
  v100 = *(_DWORD *)(a1 + 152);
  v246 = 0;
  memset(v245, 0, sizeof(v245));
  memset(v244, 0, 126);
  v243 = 0;
  memset(v242, 0, sizeof(v242));
  if ((v100 & 4) != 0)
    *(_DWORD *)(a1 + 20) = 0;
  v101 = *(_QWORD *)(a1 + 224);
  v235 = v94;
  v240 = v97;
  v237 = v100;
  v219 = v95 & 1;
  v220 = v95;
  if (v95 < 0xFE)
  {
    v231 = 0;
    *(_DWORD *)(v101 + 4) = v95;
    v226 = 10;
  }
  else
  {
    v224 = a5;
    *(_DWORD *)(v101 + 4) = v95 & 1;
    v102 = *(_DWORD *)(a1 + 168);
    v231 = 1;
    if (v102 < 1)
    {
      v226 = v95 & 1;
      a5 = v224;
    }
    else
    {
      v103 = 0;
      v104 = *(_QWORD *)(a1 + 160);
      v105 = 10;
      do
      {
        v106 = v103 + 1;
        v107 = *(unsigned __int16 *)(v104 + 2 * v103);
        v108 = (v107 & 0xFC00) != 0xD800 || (_DWORD)v106 == v102;
        if (!v108)
        {
          v109 = *(unsigned __int16 *)(v104 + 2 * v106);
          v110 = (v109 & 0xFC00) == 56320;
          v111 = v103 + 2;
          v112 = ((_DWORD)v107 << 10) - 56613888 + v109;
          if (v110)
            LODWORD(v106) = v111;
          if (v110)
            v107 = v112;
          else
            v107 = v107;
        }
        v113 = ubidi_getCustomizedClass(a1, v107);
        if (v113 == 7)
          v114 = 10;
        else
          v114 = v105;
        if (v113 > 0xDu || ((1 << v113) & 0x2003) == 0)
          v116 = 10;
        else
          v116 = v113;
        if (v105 == 10)
          v105 = v116;
        else
          v105 = v114;
        v103 = v106;
      }
      while ((int)v106 < v102);
      if (v105 == 10)
      {
        v231 = 1;
        v226 = v219;
        a5 = v224;
        v94 = v235;
        v97 = v240;
        LOBYTE(v100) = v237;
      }
      else
      {
        a5 = v224;
        v94 = v235;
        v97 = v240;
        LOBYTE(v100) = v237;
        v231 = 0;
        if ((_BYTE)v105)
          *(_DWORD *)(*(_QWORD *)(a1 + 224) + 4) = 1;
        else
          *(_DWORD *)(*(_QWORD *)(a1 + 224) + 4) = 0;
        v226 = v219;
      }
    }
  }
  if (v99 >= 1)
  {
    v117 = 0;
    v118 = 0;
    v119 = 0;
    v120 = 0;
    v218 = (_DWORD *)(a1 + 44);
    v121 = -1;
    v227 = -1;
    v222 = -1;
    while (1)
    {
      if (v98 && v121 < 0)
        v118 = *(unsigned __int16 *)(v98 + 2 * v120);
      if (v118 >= 1)
        break;
      v131 = v120 + 1;
      v122 = *(unsigned __int16 *)(v97 + 2 * v120);
      if ((v122 & 0xFC00) != 0xD800 || (_DWORD)v131 == v99)
      {
        ++v120;
      }
      else
      {
        v133 = *(unsigned __int16 *)(v97 + 2 * v131);
        v134 = (v133 & 0xFC00) == 56320;
        v135 = ((_DWORD)v122 << 10) - 56613888 + v133;
        if (v134)
          v120 += 2;
        else
          ++v120;
        if (v134)
          v122 = v135;
        else
          v122 = v122;
      }
      v136 = ubidi_getCustomizedClass(a1, v122);
      v123 = v136;
      v119 |= 1 << v136;
      v94 = v235;
      *(_BYTE *)(v235 + v120 - 1) = v136;
      v118 = 0;
      if (v122 >= 0x10000)
      {
        v119 |= 0x40000u;
        *(_BYTE *)(v120 + v235 - 2) = 18;
      }
      v121 = -1;
      v97 = v240;
      LOBYTE(v100) = v237;
      if ((v237 & 2) != 0)
        goto LABEL_166;
LABEL_174:
      if (v123 == 13 || v123 == 1)
      {
        if (v231 == 2)
        {
          if (v227 <= 125)
          {
            v137 = *((char *)v244 + v227);
            if (v137 < 0)
              *(_BYTE *)(v94 + *((int *)v245 + v227)) = 21;
            else
              *(_WORD *)(v98 + 2 * v227) = *(_WORD *)(v98 + 2 * v227) & ~(15 << (4 * v137)) | (11 << (4 * v137));
            v119 |= 0x200000u;
          }
          v231 = 3;
        }
        else if (v231 == 1)
        {
          v231 = 0;
          *(_DWORD *)(*(_QWORD *)(a1 + 224) + 8 * *(int *)(a1 + 216) - 4) = 1;
        }
        v108 = v123 == 13;
        v145 = v222;
        if (v108)
          v145 = v120 - 1;
        v222 = v145;
        v226 = 1;
        goto LABEL_194;
      }
      if (!v123)
      {
        if (v231 != 2)
        {
          if (v231 == 1)
          {
            v231 = 0;
            v226 = 0;
            *(_DWORD *)(*(_QWORD *)(a1 + 224) + 8 * *(int *)(a1 + 216) - 4) = 0;
          }
          else
          {
            v226 = 0;
          }
          goto LABEL_194;
        }
        v226 = 0;
        if (v227 < 126)
          v119 |= 0x100000u;
        v128 = 3;
        goto LABEL_245;
      }
      if ((v123 - 19) <= 2)
      {
        v129 = v227 + 1;
        if (v227 <= 124)
        {
          *((_DWORD *)v245 + v129) = v120 + (v121 >> 7);
          *((_BYTE *)v244 + v129) = v121;
          *((_DWORD *)v242 + v129) = v231;
        }
        if (v123 == 19)
        {
          if (v121 < 0)
            *(_BYTE *)(v94 + v120 - 1) = 20;
          else
            *(_WORD *)(v98 + 2 * v120) = *(_WORD *)(v98 + 2 * v120) & ~(15 << (4 * v121)) | (10 << (4 * v121));
          v128 = 2;
        }
        else
        {
          v128 = 3;
        }
LABEL_244:
        v227 = v129;
        goto LABEL_245;
      }
      if (v123 == 7)
      {
        v130 = v120 < v99;
        if (v120 >= v99 || (_DWORD)v122 != 13)
          goto LABEL_228;
        if (*(_WORD *)(v97 + 2 * v120) != 10)
        {
          v130 = 1;
LABEL_228:
          v138 = *(_OWORD **)(a1 + 224);
          v139 = *(_DWORD *)(a1 + 216);
          *((_DWORD *)v138 + 2 * v139 - 2) = v120;
          v140 = v221;
          if (v226 != 1)
            v140 = 0;
          if (v140)
            *((_DWORD *)v138 + 2 * v139 - 1) = 1;
          if ((*(_BYTE *)(a1 + 152) & 4) != 0)
          {
            *(_DWORD *)(a1 + 20) = v120;
            *(_DWORD *)(a1 + 456) = v117;
          }
          if (!v130)
            goto LABEL_194;
          *(_DWORD *)(a1 + 216) = v139 + 1;
          if (v138 != v229)
          {
            if (!sub_18BBFDDDC(v225, v218, 1, 16 * (v139 + 1)))
              goto LABEL_431;
            *(_QWORD *)(a1 + 224) = *(_QWORD *)(a1 + 88);
            goto LABEL_250;
          }
          if (v139 >= 10)
          {
            if (!sub_18BBFDDDC(v225, v218, 1, 160))
            {
LABEL_431:
              v96 = 7;
              goto LABEL_118;
            }
            v141 = *(_OWORD **)(a1 + 88);
            *(_QWORD *)(a1 + 224) = v141;
            v142 = *(_OWORD *)(a1 + 248);
            v144 = *(_OWORD *)(a1 + 280);
            v143 = *(_OWORD *)(a1 + 296);
            v141[2] = *(_OWORD *)(a1 + 264);
            v141[3] = v144;
            v141[1] = v142;
            *v141 = *v229;
            v141[4] = v143;
LABEL_250:
            v94 = v235;
            v97 = v240;
            LOBYTE(v100) = v237;
          }
          if (v220 < 0xFE)
          {
            v231 = 0;
            *(_DWORD *)(*(_QWORD *)(a1 + 224) + 8 * *(int *)(a1 + 216) - 4) = *(unsigned __int8 *)(a1 + 157);
            v227 = -1;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(a1 + 224) + 8 * *(int *)(a1 + 216) - 4) = v219;
            v227 = -1;
            v231 = 1;
            v226 = v219;
          }
        }
      }
      else if (v123 == 22)
      {
        if (v227 < 126 && v231 == 2)
          v119 |= 0x100000u;
        if ((v227 & 0x80000000) == 0)
        {
          v128 = v231;
          if (v227 <= 125)
            v128 = *((_DWORD *)v242 + v227);
          LODWORD(v129) = v227 - 1;
          goto LABEL_244;
        }
        v128 = v231;
LABEL_245:
        v231 = v128;
      }
LABEL_194:
      if (v120 >= v99)
        goto LABEL_261;
    }
    LODWORD(v122) = 0;
    ++v121;
    v123 = byte_18BDE0E26[v118 & 0xF];
    v118 = v118 >> 4;
    v119 |= 1 << v123;
    if ((v100 & 2) == 0)
      goto LABEL_174;
LABEL_166:
    if (v122 >> 2 == 2051 || (v122 - 8234) < 5 || (v122 - 8294) < 4)
      ++v117;
    goto LABEL_174;
  }
  v119 = 0;
  v117 = 0;
  v222 = -1;
  v227 = -1;
LABEL_261:
  if (v227 >= 125)
    v146 = 125;
  else
    v146 = v227;
  if ((v146 & 0x80000000) != 0)
  {
    v148 = v222;
  }
  else
  {
    v147 = v231;
    if (v227 > 125)
      v147 = 2;
    v148 = v222;
    while (v147 != 2)
    {
      v147 = *((_DWORD *)v242 + v146);
      v169 = v146-- <= 0;
      if (v169)
        goto LABEL_274;
    }
    v119 |= 0x100000u;
  }
LABEL_274:
  if ((*(_BYTE *)(a1 + 152) & 4) != 0)
  {
    v149 = v220;
    if (*(_DWORD *)(a1 + 20) < v99)
      --*(_DWORD *)(a1 + 216);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 224) + 8 * *(int *)(a1 + 216) - 8) = v99;
    *(_DWORD *)(a1 + 456) = v117;
    v149 = v220;
  }
  v150 = v221;
  if (v226 != 1)
    v150 = 0;
  if (v150)
    *(_DWORD *)(*(_QWORD *)(a1 + 224) + 8 * *(int *)(a1 + 216) - 4) = 1;
  if (v149 >= 0xFE)
    *(_BYTE *)(a1 + 157) = *(_DWORD *)(*(_QWORD *)(a1 + 224) + 4);
  v151 = *(unsigned int *)(a1 + 216);
  if ((int)v151 >= 1)
  {
    v152 = (int *)(*(_QWORD *)(a1 + 224) + 4);
    do
    {
      v153 = *v152;
      v152 += 2;
      v119 |= dword_18BDE0DEC[v153 & 1];
      --v151;
    }
    while (v151);
  }
  v154 = (v119 >> 7) & 1;
  if (!*(_BYTE *)(a1 + 156))
    v154 = 0;
  *(_DWORD *)(a1 + 204) = v119 | v154;
  *(_DWORD *)(a1 + 208) = v148;
  v155 = *(_QWORD *)(a1 + 128);
  v156 = *(unsigned int *)(a1 + 20);
  *(_DWORD *)(a1 + 212) = v156;
  v241 = v155;
  if (!a5)
  {
    if (!sub_18BBFDDDC((void **)(a1 + 72), (_DWORD *)(a1 + 36), *(char *)(a1 + 112), v156))
    {
LABEL_334:
      v177 = 7;
LABEL_336:
      *v232 = v177;
      return;
    }
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 72);
    v173 = sub_18BBFFCB0(a1, v232);
    v155 = v241;
    if (*v232 >= 1)
      return;
    v172 = v173;
LABEL_329:
    v174 = *(_DWORD *)(a1 + 340);
    if (v174 <= 5)
    {
      v175 = a1 + 352;
LABEL_338:
      *(_QWORD *)(a1 + 344) = v175;
      *(_DWORD *)(a1 + 340) = -1;
      *(_DWORD *)(a1 + 200) = v172;
      if (v172 > 1)
      {
        switch(*(_DWORD *)(a1 + 148))
        {
          case 0:
            v192 = &off_1E224C368;
            break;
          case 1:
            v192 = &off_1E224C388;
            break;
          case 2:
            v192 = &off_1E224C3A8;
            break;
          case 4:
            v192 = &off_1E224C3C8;
            break;
          case 5:
            if ((*(_BYTE *)(a1 + 152) & 1) != 0)
              v192 = &off_1E224C3E8;
            else
              v192 = &off_1E224C408;
            break;
          case 6:
            if ((*(_BYTE *)(a1 + 152) & 1) != 0)
              v192 = &off_1E224C428;
            else
              v192 = &off_1E224C448;
            break;
          default:
            abort();
        }
        *(_QWORD *)(a1 + 192) = v192;
        if (a5 || *(int *)(a1 + 216) > 1 || (*(_DWORD *)(a1 + 204) & 0x80000000) != 0)
        {
          v238 = *(char **)(a1 + 136);
          if (*(_BYTE *)(a1 + 158) && **(int **)(a1 + 224) < 1)
          {
            v195 = sub_18BBFE03C(a1, 0);
            v155 = v241;
          }
          else
          {
            v195 = *(unsigned __int8 *)(a1 + 157);
          }
          v196 = 0;
          v197 = *v238;
          if (v195 <= v197)
            v198 = *v238;
          else
            v198 = v195;
          v199 = v198 & 1;
          do
          {
            if ((int)v196 < 1)
            {
              v200 = v199;
            }
            else
            {
              v200 = v199;
              if (*(_BYTE *)(v155 + (v196 - 1)) == 7)
              {
                if (*(_BYTE *)(a1 + 158) && (int)v196 >= **(_DWORD **)(a1 + 224))
                {
                  v201 = sub_18BBFE03C(a1, v196);
                  v155 = v241;
                }
                else
                {
                  v201 = *(_BYTE *)(a1 + 157);
                }
                v200 = v201 & 1;
              }
            }
            v202 = (int)v196 + 1;
            if ((int)v202 >= (int)v156)
            {
              v204 = 0;
              v206 = v196;
LABEL_405:
              if (*(_BYTE *)(a1 + 158) && (v207 = *(_DWORD **)(a1 + 224), (int)v156 > *v207))
              {
                v208 = *(unsigned int *)(a1 + 216);
                if ((int)v208 <= 0)
                {
                  v213 = v208 - 1;
                }
                else
                {
                  v209 = 0;
                  v210 = v207 + 2;
                  while (v208 - 1 != v209)
                  {
                    v211 = *v210;
                    v210 += 2;
                    ++v209;
                    if (v211 >= (int)v156)
                    {
                      v212 = v209 < v208;
                      goto LABEL_416;
                    }
                  }
                  v212 = 0;
                  LODWORD(v209) = *(_DWORD *)(a1 + 216);
LABEL_416:
                  v213 = v208 - 1;
                  if (v212)
                    v213 = v209;
                }
                v205 = v207[2 * v213 + 1];
              }
              else
              {
                LOBYTE(v205) = *(_BYTE *)(a1 + 157);
              }
            }
            else
            {
              v203 = 0;
              v204 = 1;
              while (1)
              {
                v205 = v238[v202 + v203];
                if (v205 != v197 && ((1 << *(_BYTE *)(v155 + v202 + v203)) & 0x5D800) == 0)
                  break;
                v204 = ++v203 + v202 < (int)v156;
                if (!(1 - (_DWORD)v156 + (_DWORD)v196 + (_DWORD)v203))
                {
                  v206 = v156 - 1;
                  v202 = v156;
                  goto LABEL_405;
                }
              }
              v206 = v196 + v203;
              v202 = (v206 + 1);
            }
            if ((v205 & 0x7Fu) <= (v197 & 0x7F))
              v214 = v197;
            else
              v214 = v205;
            v199 = v214 & 1;
            if ((v197 & 0x80) != 0)
            {
              if (v206 <= (int)v196)
                v206 = v196;
              v215 = (unsigned __int8 *)&v238[(int)v196];
              v216 = v206 - v196 + 1;
              do
              {
                *v215++ &= ~0x80u;
                --v216;
              }
              while (v216);
            }
            else
            {
              sub_18BC00770(a1, v196, v202, v200, v214 & 1);
              v155 = v241;
            }
            v196 = v202;
            LOBYTE(v197) = v205;
          }
          while (v204);
        }
        else
        {
          if (*(_BYTE *)(a1 + 158))
          {
            v193 = **(_DWORD **)(a1 + 224);
            if (v193 <= 0)
              v194 = sub_18BBFE03C(a1, 0);
            else
              v194 = *(_BYTE *)(a1 + 157);
            if ((int)v156 <= v193)
              v217 = *(_BYTE *)(a1 + 157);
            else
              v217 = sub_18BBFE03C(a1, (int)v156 - 1);
          }
          else
          {
            v194 = *(_BYTE *)(a1 + 157);
            v217 = v194;
          }
          sub_18BC00770(a1, 0, v156, v194 & 1, v217 & 1);
        }
        v96 = *(_DWORD *)(a1 + 444);
        if (v96 >= 1)
        {
LABEL_118:
          *v232 = v96;
          return;
        }
        sub_18BC00EC8(a1);
      }
      else
      {
        *(_DWORD *)(a1 + 212) = 0;
      }
      v178 = *(_DWORD *)(a1 + 152);
      if (*(_BYTE *)(a1 + 158))
      {
        if ((v178 & 1) != 0 && (*(_DWORD *)(a1 + 148) - 5) <= 1)
        {
          v179 = *(_DWORD *)(a1 + 216);
          if (v179 >= 1)
          {
            v180 = 0;
            v181 = v241;
            do
            {
              v182 = *(_QWORD *)(a1 + 224);
              v183 = v182 + 8 * v180;
              if (*(_BYTE *)(v183 + 4))
              {
                v184 = v180 ? *(_DWORD *)(v182 + 8 * v180 - 8) : 0;
                v185 = *(_DWORD *)v183;
                if (v185 > v184)
                {
                  v186 = v185 - 1;
                  v187 = v185 - 1;
                  while (1)
                  {
                    v188 = *(_BYTE *)(v181 + v187);
                    if (!v188)
                      break;
                    if (v187 > v184)
                    {
                      --v187;
                      if (((1 << v188) & 0x2002) == 0)
                        continue;
                    }
                    goto LABEL_359;
                  }
                  if (v186 > (int)v187)
                  {
                    v189 = (unsigned __int8 *)(v241 - 1 + v185);
                    v186 = v185;
                    do
                    {
                      v190 = *v189--;
                      --v186;
                    }
                    while (v190 == 7);
                  }
                  sub_18BC010B8((_DWORD *)a1, v186, 4);
                  v179 = *(_DWORD *)(a1 + 216);
                  v181 = v241;
                }
              }
LABEL_359:
              ++v180;
            }
            while (v180 < v179);
            v178 = *(_DWORD *)(a1 + 152);
          }
        }
      }
      if ((v178 & 2) != 0)
        v191 = *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 456);
      else
        v191 = *(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 436);
      *(_DWORD *)(a1 + 24) = v191;
LABEL_115:
      *(_DWORD *)(a1 + 168) = 0;
      *(_DWORD *)(a1 + 184) = 0;
      *(_QWORD *)a1 = a1;
      return;
    }
    v176 = (uint64_t *)(a1 + 104);
    if (16 * v174 <= *(_DWORD *)(a1 + 52))
    {
      v175 = *v176;
      goto LABEL_338;
    }
    if (sub_18BBFDDDC((void **)(a1 + 104), (_DWORD *)(a1 + 52), 1, 16 * v174))
    {
      v175 = *v176;
      v155 = v241;
      goto LABEL_338;
    }
    goto LABEL_334;
  }
  *(_QWORD *)(a1 + 136) = a5;
  *(_DWORD *)(a1 + 340) = 0;
  if ((int)v156 <= 0)
  {
    v172 = 0;
    *(_DWORD *)(a1 + 204) = 0;
  }
  else
  {
    v157 = 0;
    v158 = 0;
    v159 = 0;
    v160 = 0;
    v161 = *(unsigned __int8 *)(a1 + 157);
    v162 = **(unsigned int **)(a1 + 224);
    do
    {
      v163 = *(_BYTE *)(a5 + v157);
      v164 = *(unsigned __int8 *)(v155 + v157);
      if ((v164 & 0xFE) == 0x14)
      {
        if (v160 >= *(_DWORD *)(a1 + 340))
          *(_DWORD *)(a1 + 340) = v160 + 1;
        ++v160;
      }
      else if (v164 == 7)
      {
        v160 = 0;
      }
      else if (v164 == 22)
      {
        --v160;
      }
      if (*(_BYTE *)(a1 + 158))
      {
        if (v157 == v162)
        {
          v165 = v158 + 1;
          if ((int)v165 < *(_DWORD *)(a1 + 216))
          {
            v166 = (unsigned int *)(*(_QWORD *)(a1 + 224) + 8 * v165);
            v162 = *v166;
            v161 = v166[1];
            v158 = v165;
          }
        }
      }
      v167 = v163 & 0x80;
      v168 = v163 & 0x7F;
      v169 = v168 <= 0x7D && v161 <= v168;
      if (!v169)
      {
        if (v168)
        {
          v177 = 1;
          goto LABEL_336;
        }
        if (v164 == 7)
        {
          LOBYTE(v168) = 0;
        }
        else
        {
          LOBYTE(v168) = v161;
          *(_BYTE *)(a5 + v157) = v167 | v161;
        }
      }
      v170 = v168 & 1;
      if (v167)
        v171 = dword_18BDE0E38[v170];
      else
        v171 = dword_18BDE0E40[v170] | (1 << v164);
      v159 |= v171;
      ++v157;
    }
    while (v156 != v157);
    if ((v159 & 0x7FDFD8) != 0)
      v159 |= dword_18BDE0DEC[*(_BYTE *)(a1 + 157) & 1];
    *(_DWORD *)(a1 + 204) = v159;
    if ((*(_QWORD *)&v159 & 0x20E002) != 0 || (v172 = 0, (v159 & 0x20) != 0) && (*(_QWORD *)&v159 & 0x7DDFD8) != 0)
    {
      if ((v159 & 0x1901825) != 0)
        v172 = 2;
      else
        v172 = 1;
    }
  }
  if (*v232 <= 0)
    goto LABEL_329;
}

void ubidi_setParaWithControls(uint64_t a1, const UChar *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, int *a9)
{
  if (a9 && *a9 <= 0)
  {
    if (a6 < 0 || a6 && (!a5 || !a8))
      *a9 = 1;
    else
      sub_18BBFE1A0(a1, a2, a3, a4, 0, a5, a6, a7, a8, a9);
  }
}

uint64_t ubidi_orderParagraphsLTR(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 156) = a2;
  return result;
}

uint64_t ubidi_isOrderParagraphsLTR(uint64_t a1)
{
  if (a1)
    return *(char *)(a1 + 156);
  else
    return 0;
}

uint64_t ubidi_getDirection(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = *(_QWORD **)result;
    if (*(_QWORD *)result == result || v1 && (_QWORD *)*v1 == v1)
      return *(unsigned int *)(result + 200);
    else
      return 0;
  }
  return result;
}

uint64_t ubidi_getText(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = *(_QWORD **)result;
    if (*(_QWORD *)result == result || v1 && (_QWORD *)*v1 == v1)
      return *(_QWORD *)(result + 8);
    else
      return 0;
  }
  return result;
}

uint64_t ubidi_getLength(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = *(_QWORD **)result;
    if (*(_QWORD *)result == result || v1 && (_QWORD *)*v1 == v1)
      return *(unsigned int *)(result + 16);
    else
      return 0;
  }
  return result;
}

uint64_t ubidi_getProcessedLength(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = *(_QWORD **)result;
    if (*(_QWORD *)result == result || v1 && (_QWORD *)*v1 == v1)
      return *(unsigned int *)(result + 20);
    else
      return 0;
  }
  return result;
}

uint64_t ubidi_getResultLength(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = *(_QWORD **)result;
    if (*(_QWORD *)result == result || v1 && (_QWORD *)*v1 == v1)
      return *(unsigned int *)(result + 24);
    else
      return 0;
  }
  return result;
}

uint64_t ubidi_getParaLevel(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = *(_QWORD **)result;
    if (*(_QWORD *)result == result || v1 && (_QWORD *)*v1 == v1)
      return *(unsigned __int8 *)(result + 157);
    else
      return 0;
  }
  return result;
}

uint64_t ubidi_countParagraphs(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = *(_QWORD **)result;
    if (*(_QWORD *)result == result || v1 && (_QWORD *)*v1 == v1)
      return *(unsigned int *)(result + 216);
    else
      return 0;
  }
  return result;
}

uint64_t ubidi_getParagraphByIndex(uint64_t result, unsigned int a2, int *a3, _DWORD *a4, _BYTE *a5, int *a6)
{
  uint64_t v6;
  int v8;
  int v9;

  if (a6 && *a6 <= 0)
  {
    v6 = result;
    if (!result || (result = *(_QWORD *)result, *(_QWORD *)v6 != v6) && (!result || *(_QWORD *)result != result))
    {
      v8 = 27;
LABEL_13:
      *a6 = v8;
      return result;
    }
    if ((a2 & 0x80000000) != 0 || *(_DWORD *)(v6 + 216) <= (signed int)a2)
    {
      v8 = 1;
      goto LABEL_13;
    }
    if (a2)
      v9 = *(_DWORD *)(*(_QWORD *)(result + 224) + 8 * (a2 - 1));
    else
      v9 = 0;
    if (a3)
      *a3 = v9;
    if (a4)
      *a4 = *(_DWORD *)(*(_QWORD *)(result + 224) + 8 * a2);
    if (a5)
    {
      if (*(_BYTE *)(result + 158) && v9 >= **(_DWORD **)(result + 224))
        result = sub_18BBFE03C(result, v9);
      else
        result = *(unsigned __int8 *)(result + 157);
      *a5 = result;
    }
  }
  return result;
}

uint64_t ubidi_getParagraph(uint64_t *a1, int a2, int *a3, _DWORD *a4, _BYTE *a5, int *a6)
{
  uint64_t v7;
  int v8;
  int *v9;
  uint64_t v10;
  int v11;

  if (!a6 || *a6 > 0)
    return 0xFFFFFFFFLL;
  if (!a1 || (v7 = *a1, (uint64_t *)*a1 != a1) && (!v7 || *(_QWORD *)v7 != v7))
  {
    v8 = 27;
LABEL_14:
    *a6 = v8;
    return 0xFFFFFFFFLL;
  }
  if (a2 < 0 || *(_DWORD *)(v7 + 20) <= a2)
  {
    v8 = 1;
    goto LABEL_14;
  }
  v9 = *(int **)(v7 + 224);
  LODWORD(v10) = -1;
  do
  {
    v11 = *v9;
    v9 += 2;
    v10 = (v10 + 1);
  }
  while (v11 <= a2);
  ubidi_getParagraphByIndex(v7, v10, a3, a4, a5, a6);
  return v10;
}

uint64_t ubidi_setClassCallback(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, int *a6)
{
  if (a6 && *a6 <= 0)
  {
    if (result)
    {
      if (a4)
        *a4 = *(_QWORD *)(result + 464);
      if (a5)
        *a5 = *(_QWORD *)(result + 472);
      *(_QWORD *)(result + 464) = a2;
      *(_QWORD *)(result + 472) = a3;
    }
    else
    {
      *a6 = 1;
    }
  }
  return result;
}

uint64_t ubidi_getClassCallback(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  if (result)
  {
    if (a2)
      *a2 = *(_QWORD *)(result + 464);
    if (a3)
      *a3 = *(_QWORD *)(result + 472);
  }
  return result;
}

uint64_t ubidi_getCustomizedClass(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t (*v3)(_QWORD, uint64_t);
  uint64_t result;

  v2 = a2;
  v3 = *(uint64_t (**)(_QWORD, uint64_t))(a1 + 464);
  if (!v3 || (LODWORD(result) = v3(*(_QWORD *)(a1 + 472), a2), (_DWORD)result == 23))
    LODWORD(result) = ubidi_getClass(v2);
  if ((int)result <= 22)
    return result;
  else
    return 10;
}

uint64_t sub_18BBFFCB0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t result;
  int v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  BOOL v39;
  char v40;
  int v41;
  uint64_t v42;
  int v43;
  _DWORD *v44;
  int v45;
  unsigned int v46;
  _DWORD *v47;
  char v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int *v55;
  __int16 v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  signed int *v61;
  signed int v62;
  _BOOL4 v63;
  int v64;
  int v65;
  unsigned int v66;
  char v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  _WORD *v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97[125];
  uint64_t v98;
  __int16 v99;
  char v100;
  char v101;
  _BYTE v102[2];
  int v103;
  __int16 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _BYTE v119[28];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(int *)(a1 + 20);
  v9 = *(_DWORD *)(a1 + 204);
  if (*(_BYTE *)(a1 + 158) && (v10 = *(int **)(a1 + 224), *v10 < 1))
  {
    v12 = *(unsigned int *)(a1 + 216);
    if ((int)v12 > 0)
    {
      v13 = 0;
      v14 = v10 + 2;
      while (v12 - 1 != v13)
      {
        v15 = *v14;
        v14 += 2;
        ++v13;
        if (v15 > 0)
        {
          v16 = v13 < v12;
          v17 = v12 - 1;
          if (v16)
            v17 = v13;
          goto LABEL_12;
        }
      }
    }
    v17 = v12 - 1;
LABEL_12:
    v11 = v10[2 * v17 + 1];
  }
  else
  {
    v11 = *(unsigned __int8 *)(a1 + 157);
  }
  result = 0;
  *(_DWORD *)(a1 + 340) = 0;
  if (*a2 <= 0)
  {
    if ((*(_QWORD *)&v9 & 0x20E002) != 0 || (result = 0, (v9 & 0x20) != 0) && (*(_QWORD *)&v9 & 0x7DDFD8) != 0)
    {
      if ((v9 & 0x1901825) == 0)
        return 1;
      v96 = v6;
      if (*(int *)(a1 + 148) >= 2)
      {
        v19 = *(_DWORD *)(a1 + 216);
        if (v19 >= 1)
        {
          v20 = 0;
          for (i = 0; i < v19; ++i)
          {
            v22 = *(_QWORD *)(a1 + 224);
            if (v20)
              v23 = *(_DWORD *)(v22 + v20 - 8);
            else
              v23 = 0;
            v24 = *(_DWORD *)(v22 + v20);
            if (v23 < v24)
            {
              memset((void *)(v6 + v23), *(_DWORD *)(v22 + v20 + 4), (v24 + ~v23) + 1);
              v6 = v96;
              v19 = *(_DWORD *)(a1 + 216);
            }
            v20 += 8;
          }
        }
        return 2;
      }
      v95 = v4;
      if ((v9 & 0x79D800) == 0)
      {
        bzero(v97, 0x9F0uLL);
        sub_18BC01164(a1, (uint64_t)v97);
        v68 = *(_DWORD *)(a1 + 216);
        if (v68 >= 1)
        {
          v69 = 0;
          v71 = v95;
          v70 = v96;
          do
          {
            v72 = *(_QWORD *)(a1 + 224);
            if (v69)
              v73 = *(_DWORD *)(v72 + 8 * v69 - 8);
            else
              v73 = 0;
            v74 = (int *)(v72 + 8 * v69);
            v75 = *v74;
            if (v73 < (int)v75)
            {
              v76 = v74[1];
              v77 = v73;
              v78 = (_WORD *)(v7 + 2 + 2 * v73);
              do
              {
                *(_BYTE *)(v70 + v77) = v76;
                v79 = *(unsigned __int8 *)(v71 + v77);
                if (v79 != 18)
                {
                  if (v79 == 7)
                  {
                    if (v77 + 1 < v8 && (*(v78 - 1) != 13 || *v78 != 10))
                    {
                      v98 = 0;
                      v99 = 0;
                      v100 = v76;
                      v102[0] = v76 & 1;
                      v101 = v76 & 1;
                      v103 = v76 & 1;
                    }
                  }
                  else
                  {
                    result = sub_18BC012B4(v97, v77);
                    v71 = v95;
                    v70 = v96;
                    if (!(_DWORD)result)
                    {
                      *a2 = 7;
                      return result;
                    }
                  }
                }
                ++v77;
                ++v78;
              }
              while (v75 != v77);
              v68 = *(_DWORD *)(a1 + 216);
            }
            ++v69;
          }
          while (v69 < v68);
        }
        return 2;
      }
      memset(v119, 0, sizeof(v119));
      v118 = 0u;
      v117 = 0u;
      v116 = 0u;
      v115 = 0u;
      v114 = 0u;
      v113 = 0u;
      v112 = 0u;
      v111 = 0u;
      v110 = 0u;
      v109 = 0u;
      v108 = 0u;
      v107 = 0u;
      v106 = 0u;
      v105 = 0u;
      v25 = v11;
      bzero(v97, 0x9F0uLL);
      sub_18BC01164(a1, (uint64_t)v97);
      v104 = v25;
      if ((int)v8 < 1)
      {
        v31 = 0;
        goto LABEL_146;
      }
      v26 = v25;
      v82 = v7;
      v86 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v91 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      LOBYTE(v33) = -1;
      v34 = v26;
      v36 = v95;
      v35 = v96;
      v84 = v5;
      v85 = v8;
      while (2)
      {
        if (v5 && (v33 & 0x80) != 0)
          v30 = *(unsigned __int16 *)(v5 + 2 * v32);
        v37 = (char *)&unk_18BDE0E26 + (v30 & 0xF);
        v38 = (_BYTE *)(v36 + v32);
        v39 = v30 <= 0;
        if (v30 > 0)
        {
          v30 = v30 >> 4;
        }
        else
        {
          v37 = (_BYTE *)(v36 + v32);
          v30 = 0;
        }
        if (v39)
          v40 = -1;
        else
          v40 = v33 + 1;
        v33 = v40;
        v41 = *v37;
        switch(*v37)
        {
          case 7:
            if (*(_BYTE *)(a1 + 158) && (v44 = *(_DWORD **)(a1 + 224), (signed int)v32 >= *v44))
            {
              v59 = *(unsigned int *)(a1 + 216);
              if ((int)v59 <= 0)
              {
                v64 = v59 - 1;
              }
              else
              {
                v60 = 0;
                v61 = v44 + 2;
                do
                {
                  if (v59 - 1 == v60)
                  {
                    v63 = 0;
                    LODWORD(v60) = *(_DWORD *)(a1 + 216);
                    goto LABEL_109;
                  }
                  v62 = *v61;
                  v61 += 2;
                  ++v60;
                }
                while (v62 <= (int)v32);
                v63 = v60 < v59;
LABEL_109:
                v64 = v59 - 1;
                if (v63)
                  v64 = v60;
              }
              v45 = v44[2 * v64 + 1];
            }
            else
            {
              LOBYTE(v45) = *(_BYTE *)(a1 + 157);
            }
            v31 |= 0x80u;
            *(_BYTE *)(v35 + v32) = v45;
            v65 = v32 + 1;
            if ((int)(v32 + 1) >= (int)v8
              || *(_WORD *)(v82 + 2 * v32) == 13 && *(_WORD *)(v82 + 2 * v65) == 10)
            {
              goto LABEL_121;
            }
            if (*(_BYTE *)(a1 + 158) && v65 >= **(_DWORD **)(a1 + 224))
            {
              v66 = v31;
              v67 = v33;
              v42 = sub_18BBFE03C(a1, v65);
              LOBYTE(v33) = v67;
              v31 = v66;
              v36 = v95;
              v35 = v96;
            }
            else
            {
              v42 = *(unsigned __int8 *)(a1 + 157);
            }
            v29 = 0;
            v28 = 0;
            v27 = 0;
            v86 = 0;
            v104 = v42;
            v98 = 0;
            v99 = 0;
            v100 = v42;
            v102[0] = v42 & 1;
            v101 = v42 & 1;
            LOBYTE(v26) = v42;
            v103 = v42 & 1;
            goto LABEL_122;
          case 0xB:
          case 0xC:
          case 0xE:
          case 0xF:
            *(_BYTE *)(v35 + v32) = v26;
            if ((v41 - 11) > 1u)
              v42 = ((v34 & 0x7F) + 1) | 1;
            else
              v42 = ((_DWORD)v34 + 2) & 0x7E;
            v31 |= 0x40000u;
            if (v42 > 0x7D || v28 || (_DWORD)v27)
            {
              if (v28)
                v27 = v27;
              else
                v27 = (v27 + 1);
              goto LABEL_121;
            }
            if (v41 == 15 || v41 == 12)
              v42 = v42 | 0xFFFFFF80;
            v28 = 0;
            v27 = 0;
            *(&v104 + ++v29) = v42;
            LODWORD(v91) = v32;
            BYTE4(v91) = v41;
            goto LABEL_122;
          case 0x10:
            v31 |= 0x40000u;
            *(_BYTE *)(v35 + v32) = v26;
            if (v28)
              goto LABEL_121;
            if ((_DWORD)v27)
            {
              v28 = 0;
              v27 = (v27 - 1);
            }
            else
            {
              if (v29 && (unsigned __int16)*(&v104 + v29) <= 0xFFu)
              {
                v28 = 0;
                v27 = 0;
                v42 = (unsigned __int16)*(&v104 + --v29);
                LODWORD(v91) = v32;
                BYTE4(v91) = 16;
                goto LABEL_122;
              }
              v28 = 0;
              v27 = 0;
            }
LABEL_121:
            v42 = v34;
            goto LABEL_122;
          case 0x12:
            *(_BYTE *)(v35 + v32) = v26;
            v31 |= 0x40000u;
            goto LABEL_121;
          case 0x14:
          case 0x15:
            v43 = v31 | dword_18BDE0DEC[v34 & 1];
            *(_BYTE *)(v35 + v32) = v34 & 0x7F;
            if ((v34 & 0x7F) == (v26 & 0x7F))
            {
              v31 = v43 | 0x400;
            }
            else
            {
              v94 = v30;
              v54 = v40;
              v88 = v28;
              v90 = v27;
              sub_18BC017FC((uint64_t)v97, v91, SBYTE4(v91), v26, v34);
              v28 = v88;
              v27 = v90;
              v33 = v54;
              v30 = v94;
              v36 = v95;
              v35 = v96;
              v31 = v43 | 0x80000400;
            }
            if (v41 == 20)
              v42 = ((_BYTE)v34 + 2) & 0x7E;
            else
              v42 = ((v34 & 0x7F) + 1) | 1;
            v5 = v84;
            if (v42 > 0x7D || v28 || (_DWORD)v27)
            {
              LODWORD(v8) = v85;
              if (v33 < 0)
                *v38 = 9;
              else
                *(_WORD *)(v84 + 2 * v32) |= 15 << (4 * v33);
              ++v28;
              v42 = v34;
              LOBYTE(v26) = v34;
            }
            else
            {
              LODWORD(v8) = v85;
              if (v86 >= *(_DWORD *)(a1 + 340))
                *(_DWORD *)(a1 + 340) = v86 + 1;
              v28 = 0;
              v27 = 0;
              v31 |= 1 << v41;
              *(&v104 + ++v29) = v42 | 0x100;
              v55 = &v97[4 * (int)v98];
              LODWORD(v98) = v98 + 1;
              v56 = *((_WORD *)v55 + 255);
              *((_WORD *)v55 + 263) = v56;
              *((_WORD *)v55 + 262) = v56;
              *((_BYTE *)v55 + 530) = v42 & 1;
              *((_BYTE *)v55 + 529) = v42 & 1;
              v55[133] = v42 & 1;
              *((_BYTE *)v55 + 514) = 10;
              *((_BYTE *)v55 + 528) = v42;
              v55[130] = 0;
              LOBYTE(v26) = v34;
              LODWORD(v91) = v32;
              BYTE4(v91) = v41;
              ++v86;
            }
            goto LABEL_122;
          case 0x16:
            v93 = v30;
            if (((v26 ^ v34) & 0x7F) != 0)
            {
              v48 = v34;
              v49 = v31;
              v50 = v40;
              v51 = v27;
              v52 = v5;
              v53 = v28;
              sub_18BC017FC((uint64_t)v97, v91, SBYTE4(v91), v26, v48);
              v28 = v53;
              v5 = v52;
              v27 = v51;
              v33 = v50;
              v31 = v49 | 0x80000000;
            }
            if (v28)
            {
              --v28;
              v36 = v95;
              v35 = v96;
              v30 = v93;
              if (v33 < 0)
                *v38 = 9;
              else
                *(_WORD *)(v5 + 2 * v32) |= 15 << (4 * v33);
              LODWORD(v8) = v85;
            }
            else
            {
              v36 = v95;
              v35 = v96;
              v30 = v93;
              if (v86)
              {
                LODWORD(v8) = v85;
                do
                  v57 = (unsigned __int16)*(&v104 + v29--);
                while (v57 < 0x100);
                v28 = 0;
                v27 = 0;
                v31 |= 0x400000u;
                --v86;
                v58 = (int)v98 - 1;
                LODWORD(v98) = v98 - 1;
                v102[16 * v58] = 10;
                LODWORD(v91) = v32;
                BYTE4(v91) = 22;
              }
              else
              {
                LODWORD(v8) = v85;
                v28 = 0;
                v86 = 0;
                if (v33 < 0)
                  *v38 = 9;
                else
                  *(_WORD *)(v5 + 2 * v32) |= 15 << (4 * v33);
              }
            }
            v42 = (unsigned __int16)*(&v104 + v29);
            v31 |= dword_18BDE0DEC[v42 & 1] | 0x400;
            *(_BYTE *)(v35 + v32) = v42 & 0x7F;
            LOBYTE(v26) = v42;
            goto LABEL_122;
          default:
            v87 = v28;
            v89 = v27;
            v92 = v30;
            v83 = v40;
            v46 = v31;
            if ((v34 & 0x7F) != (v26 & 0x7F))
            {
              sub_18BC017FC((uint64_t)v97, v91, SBYTE4(v91), v26, v34);
              v35 = v96;
              v47 = &unk_18BDE0E38;
              if ((v34 & 0x80u) == 0)
                v47 = &unk_18BDE0E40;
              v46 |= v47[v34 & 1] | 0x80000000;
            }
            *(_BYTE *)(v35 + v32) = v34;
            if (!sub_18BC012B4(v97, v32))
              return 0xFFFFFFFFLL;
            v31 = v46 | (1 << *v38);
            v42 = v34;
            LOBYTE(v26) = v34;
            v36 = v95;
            v35 = v96;
            LOBYTE(v33) = v83;
            v30 = v92;
            v28 = v87;
            v27 = v89;
LABEL_122:
            v32 += (v33 & 0x80) >> 7;
            v34 = v42;
            if ((int)v32 < (int)v8)
              continue;
            if ((v31 & 0x7FDFD8) != 0)
              v31 |= dword_18BDE0DEC[*(_BYTE *)(a1 + 157) & 1];
LABEL_146:
            v80 = (v31 >> 7) & 1;
            if (!*(_BYTE *)(a1 + 156))
              v80 = 0;
            v81 = v31 | v80;
            *(_DWORD *)(a1 + 204) = v81;
            if ((*(_QWORD *)&v81 & 0x20E002) != 0
              || (result = 0, (v81 & 0x20) != 0) && (*(_QWORD *)&v81 & 0x7DDFD8) != 0)
            {
              if ((v81 & 0x1901825) != 0)
                result = 2;
              else
                result = 1;
            }
            break;
        }
        break;
      }
    }
  }
  return result;
}

uint64_t sub_18BC00770(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, unsigned int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  int v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned __int8 CustomizedClass;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned __int16 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v47;
  BOOL v48;
  unsigned int v49;
  uint64_t result;
  uint64_t i;
  unsigned int v52;
  BOOL v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  unsigned int v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  _BOOL4 v84;
  uint64_t v86;
  _QWORD *v88;
  uint64_t v89[2];
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;

  v7 = a2;
  v9 = *(_QWORD *)(a1 + 120);
  v8 = *(_QWORD *)(a1 + 128);
  if (*(_DWORD *)(a1 + 208) <= (int)a2)
    goto LABEL_5;
  if (*(_BYTE *)(a1 + 158))
  {
    v10 = *(_DWORD **)(a1 + 224);
    if (*v10 <= (int)a2)
    {
      v11 = *(unsigned int *)(a1 + 216);
      if ((int)v11 <= 0)
      {
        v16 = v11 - 1;
      }
      else
      {
        v12 = 0;
        v13 = v10 + 2;
        while (v11 - 1 != v12)
        {
          v14 = *v13;
          v13 += 2;
          ++v12;
          if (v14 > (int)a2)
          {
            v15 = v12 < v11;
            goto LABEL_13;
          }
        }
        v15 = 0;
        LODWORD(v12) = *(_DWORD *)(a1 + 216);
LABEL_13:
        v16 = v11 - 1;
        if (v15)
          v16 = v12;
      }
      if ((v10[2 * v16 + 1] & 1) == 0)
        goto LABEL_5;
LABEL_16:
      v84 = (*(_DWORD *)(a1 + 148) - 5) < 2;
      goto LABEL_17;
    }
  }
  if ((*(_BYTE *)(a1 + 157) & 1) != 0)
    goto LABEL_16;
LABEL_5:
  v84 = 0;
LABEL_17:
  v90 = 0;
  v92 = 0;
  v94 = 0;
  v91 = -1;
  v93 = a2;
  v17 = (int)a2;
  LOBYTE(v94) = *(_BYTE *)(*(_QWORD *)(a1 + 136) + (int)a2);
  v18 = (uint64_t *)(*(_QWORD *)(a1 + 192) + 8 * (v94 & 1));
  v19 = *v18;
  v20 = v18[2];
  v89[0] = v19;
  v89[1] = v20;
  v88 = (_QWORD *)a1;
  v86 = v8;
  if (!(_DWORD)a2)
  {
    v24 = *(_DWORD *)(a1 + 168);
    if (v24 >= 1)
    {
      v25 = *(_QWORD *)(a1 + 160);
      while (v24 >= 1)
      {
        v26 = *(unsigned __int16 *)(v25 + 2 * (v24 - 1));
        if ((v26 & 0xFC00) == 0xDC00)
        {
          if (v24 < 2)
          {
            v24 = 0;
          }
          else
          {
            v27 = *(unsigned __int16 *)(v25 + 2 * (v24 - 2));
            v28 = v27 & 0xFC00;
            v29 = v26 + (v27 << 10) - 56613888;
            if (v28 == 55296)
              v24 -= 2;
            else
              --v24;
            if (v28 == 55296)
              v26 = v29;
            else
              v26 = v26;
          }
        }
        else
        {
          --v24;
        }
        CustomizedClass = ubidi_getCustomizedClass(a1, v26);
        v31 = CustomizedClass;
        if (CustomizedClass > 6u)
        {
          v7 = a2;
          a1 = (uint64_t)v88;
          v8 = v86;
          if (v31 == 13)
          {
LABEL_144:
            a4 = 1;
            break;
          }
          if (v31 == 7)
            break;
        }
        else
        {
          v8 = v86;
          v7 = a2;
          if (!CustomizedClass)
          {
            a4 = CustomizedClass;
            a1 = (uint64_t)v88;
            break;
          }
          a1 = (uint64_t)v88;
          if (v31 == 1)
            goto LABEL_144;
        }
      }
    }
  }
  if (v9 && (v21 = *(unsigned __int16 *)(v9 + 2 * v17), *(_WORD *)(v9 + 2 * v17)))
  {
    while ((v21 & 0xF) != 0xC)
    {
      v22 = v21 >= 0x10;
      v21 >>= 4;
      if (!v22)
        goto LABEL_22;
    }
    v23 = *(unsigned __int8 *)(v8 + v17);
  }
  else
  {
LABEL_22:
    v23 = *(unsigned __int8 *)(v8 + v17);
    if (v23 != 22)
      goto LABEL_47;
  }
  v32 = *(unsigned int *)(a1 + 340);
  if ((v32 & 0x80000000) == 0)
  {
    v33 = *(_QWORD *)(a1 + 344) + 16 * v32;
    v34 = *(_DWORD *)v33;
    v35 = *(unsigned int *)(v33 + 4);
    v36 = *(_WORD *)(v33 + 12);
    LODWORD(v33) = *(_DWORD *)(v33 + 8);
    v90 = v34;
    v92 = v33;
    *(_DWORD *)(a1 + 340) = v32 - 1;
    goto LABEL_51;
  }
LABEL_47:
  if (v23 == 17)
    v36 = a4 + 1;
  else
    v36 = 0;
  v90 = -1;
  v92 = 0;
  sub_18BC01A30((_QWORD *)a1, v89, a4, v7, a2);
  v7 = a2;
  v35 = a2;
LABEL_51:
  v80 = a3;
  v37 = 0;
  if ((int)v7 <= (int)a3)
  {
    v83 = a3 - 1;
    v54 = (int)a3;
    v55 = a3 + 1;
    v56 = v7;
    v57 = v17;
    v79 = -1;
    v58 = 1;
    v59 = v7;
    v38 = (uint64_t)v88;
    v39 = v86;
    v82 = v54;
    v81 = v55;
    while (1)
    {
      if (v57 < v54)
      {
        v60 = *(unsigned __int8 *)(v39 + v57);
        if (v60 == 7)
          *(_DWORD *)(v38 + 340) = -1;
        if (v84)
        {
          if (v60 == 13)
          {
            v60 = 1u;
          }
          else if (v60 == 2)
          {
            if (v57 < v79)
            {
LABEL_101:
              if (v58 == 13)
                v60 = 5;
              else
                v60 = 2;
            }
            else
            {
              v61 = 0;
              while (v57 + v61 + 1 < v54)
              {
                v58 = *(unsigned __int8 *)(v39 + v57 + v61++ + 1);
                if (v58 <= 0xD && ((1 << v58) & 0x2003) != 0)
                {
                  v79 = v56 + v61;
                  goto LABEL_101;
                }
              }
              v60 = 2u;
              v58 = 1;
              v79 = v80;
            }
          }
        }
        v65 = *((unsigned __int8 *)&unk_18BDE106E + v60);
        goto LABEL_122;
      }
      LODWORD(v63) = v83;
      if (v83 > (int)v7)
        break;
LABEL_116:
      if ((_DWORD)v63 == (_DWORD)v7)
        v37 = *(_BYTE *)(v39 + v17);
      v65 = a5;
      if ((v37 & 0xFE) == 0x14)
        goto LABEL_53;
LABEL_122:
      v66 = byte_18BDE1087[16 * v36 + v65];
      v67 = v66 >> 5;
      if (v66 < 0x20 && v57 == v54)
        v67 = 1;
      if (v67)
      {
        v69 = byte_18BDE1087[16 * v36 + 15];
        v70 = v57;
        switch(v67)
        {
          case 1:
            v71 = (_QWORD *)v38;
            v72 = v58;
            v73 = v35;
            goto LABEL_132;
          case 2:
            goto LABEL_134;
          case 3:
            v72 = v58;
            sub_18BC01A30((_QWORD *)v38, v89, v69, v35, v59);
            v71 = v88;
            v69 = 4;
            v73 = v59;
LABEL_132:
            sub_18BC01A30(v71, v89, v69, v73, v57);
            v58 = v72;
            v55 = v81;
            v54 = v82;
            v39 = v86;
            LODWORD(v7) = a2;
            v38 = (uint64_t)v88;
            v35 = v57;
            break;
          case 4:
            v74 = v58;
            sub_18BC01A30((_QWORD *)v38, v89, v69, v35, v59);
            v58 = v74;
            v55 = v81;
            v54 = v82;
            v39 = v86;
            LODWORD(v7) = a2;
            v38 = (uint64_t)v88;
            v35 = v59;
            v70 = v57;
            goto LABEL_134;
          default:
            abort();
        }
      }
      v70 = v59;
LABEL_134:
      v36 = v66 & 0x1F;
      ++v57;
      ++v56;
      v59 = v70;
      if (v55 == (_DWORD)v57)
        goto LABEL_53;
    }
    v63 = v83;
    while (1)
    {
      v37 = *(_BYTE *)(v39 + v63);
      if (((0x5D800uLL >> v37) & 1) == 0)
        goto LABEL_116;
      if (v9)
      {
        v64 = *(unsigned __int16 *)(v9 + 2 * v63);
        if (*(_WORD *)(v9 + 2 * v63))
        {
          while (1)
          {
            v37 = byte_18BDE0E26[v64 & 0xF];
            if (((0x5D800uLL >> v37) & 1) == 0)
              goto LABEL_114;
            v53 = v64 > 0xF;
            v64 >>= 4;
            if (!v53)
            {
              v64 = 0;
              goto LABEL_114;
            }
          }
        }
      }
      else
      {
        v64 = 0;
      }
      v37 = 10;
LABEL_114:
      --v63;
      if (v64 || v63 <= v17)
        goto LABEL_116;
    }
  }
  v38 = (uint64_t)v88;
  v39 = v86;
  if (*(_DWORD *)(v38 + 20) != (_DWORD)v80)
    goto LABEL_72;
  v40 = *(_DWORD *)(v38 + 184);
  if (v40 < 1)
    goto LABEL_72;
LABEL_53:
  v41 = 0;
  v42 = *(_QWORD *)(v38 + 176);
  v43 = v35;
  while (2)
  {
    if (v41 < v40)
    {
      v44 = v41 + 1;
      v45 = *(unsigned __int16 *)(v42 + 2 * v41);
      if ((v45 & 0xFC00) != 0xD800 || (_DWORD)v44 == v40)
      {
        ++v41;
      }
      else
      {
        v47 = *(unsigned __int16 *)(v42 + 2 * v44);
        v48 = (v47 & 0xFC00) == 56320;
        v49 = ((_DWORD)v45 << 10) - 56613888 + v47;
        if (v48)
          v41 += 2;
        else
          ++v41;
        if (v48)
          v45 = v49;
        else
          v45 = v45;
      }
      result = ubidi_getCustomizedClass(v38, v45);
      LODWORD(v7) = a2;
      v38 = (uint64_t)v88;
      v39 = v86;
      LODWORD(v35) = v43;
      switch((char)result)
      {
        case 0:
        case 2:
          break;
        case 1:
          goto LABEL_71;
        case 3:
        case 4:
          continue;
        case 5:
          result = 3;
          goto LABEL_73;
        default:
          LODWORD(v7) = a2;
          v38 = (uint64_t)v88;
          v39 = v86;
          LODWORD(v35) = v43;
          if (result != 13)
            continue;
LABEL_71:
          result = 1;
          break;
      }
    }
    else
    {
LABEL_72:
      result = a5;
    }
    break;
  }
LABEL_73:
  LODWORD(i) = v80 - 1;
  if ((int)v80 - 1 > (int)v7)
  {
    for (i = (int)i; !v52 && i > v17; --i)
    {
      v37 = *(_BYTE *)(v39 + i);
      if (((0x5D800uLL >> v37) & 1) == 0)
        break;
      if (v9)
      {
        v52 = *(unsigned __int16 *)(v9 + 2 * i);
        if (*(_WORD *)(v9 + 2 * i))
        {
          while (1)
          {
            v37 = byte_18BDE0E26[v52 & 0xF];
            if (((0x5D800uLL >> v37) & 1) == 0)
              goto LABEL_83;
            v53 = v52 > 0xF;
            v52 >>= 4;
            if (!v53)
            {
              v52 = 0;
              goto LABEL_83;
            }
          }
        }
      }
      else
      {
        v52 = 0;
      }
      v37 = 10;
LABEL_83:
      ;
    }
  }
  if ((_DWORD)i == (_DWORD)v7)
    v37 = *(_BYTE *)(v39 + v17);
  if ((v37 & 0xFE) != 0x14 || *(_DWORD *)(v38 + 20) <= (int)v80)
    return (uint64_t)sub_18BC01A30((_QWORD *)v38, v89, result, v80, v80);
  v75 = *(int *)(v38 + 340) + 1;
  *(_DWORD *)(v38 + 340) = v75;
  v76 = *(_QWORD *)(v38 + 344) + 16 * v75;
  *(_WORD *)(v76 + 12) = v36;
  v77 = v92;
  v78 = v90;
  *(_DWORD *)(v76 + 4) = v35;
  *(_DWORD *)(v76 + 8) = v77;
  *(_DWORD *)v76 = v78;
  return result;
}

uint64_t sub_18BC00EC8(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  int i;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int *v25;
  int v26;
  _BOOL4 v27;
  int v28;

  if ((*(_DWORD *)(result + 204) & 0x7DDB80) == 0)
    return result;
  v1 = *(_DWORD *)(result + 212);
  if (v1 < 1)
    return result;
  v2 = *(_QWORD *)(result + 128);
  v3 = *(_QWORD *)(result + 136);
  v4 = *(unsigned __int8 *)(result + 156);
  do
  {
    v5 = v1;
    for (i = v1 - 1; ; --i)
    {
      v7 = v5--;
      v8 = v5;
      v9 = 1 << *(_BYTE *)(v2 + v5);
      if ((v9 & 0x7DDB80) == 0)
        break;
      if (v4 && (v9 & 0x80) != 0)
      {
        LOBYTE(v10) = 0;
      }
      else if (*(_BYTE *)(result + 158) && (v11 = *(int **)(result + 224), *v11 < v7))
      {
        v12 = *(unsigned int *)(result + 216);
        if ((int)v12 <= 0)
        {
          v17 = v12 - 1;
        }
        else
        {
          v13 = 0;
          v14 = v11 + 2;
          while (v12 - 1 != v13)
          {
            v15 = *v14;
            v14 += 2;
            ++v13;
            if (v15 >= v7)
            {
              v16 = v13 < v12;
              goto LABEL_19;
            }
          }
          v16 = 0;
          LODWORD(v13) = *(_DWORD *)(result + 216);
LABEL_19:
          v17 = v12 - 1;
          if (v16)
            v17 = v13;
        }
        v10 = v11[2 * v17 + 1];
      }
      else
      {
        LOBYTE(v10) = *(_BYTE *)(result + 157);
      }
      *(_BYTE *)(v3 + v5) = v10;
      if (v7 <= 1)
        return result;
    }
    if ((int)v5 < 1)
      return result;
    while (1)
    {
      v18 = v8 - 1;
      v19 = (v8 - 1);
      v20 = 1 << *(_BYTE *)(v2 + v19);
      if ((v20 & 0x5D800) != 0)
      {
        *(_BYTE *)(v3 + v19) = *(_BYTE *)(v3 + v8);
        goto LABEL_30;
      }
      if (v4 && (v20 & 0x80) != 0)
      {
        LOBYTE(v21) = 0;
        goto LABEL_46;
      }
      if ((v20 & 0x180) != 0)
        break;
LABEL_30:
      --v8;
      if ((unint64_t)(v18 + 1) <= 1)
        return result;
    }
    if (*(_BYTE *)(result + 158) && (v22 = *(_DWORD **)(result + 224), *v22 < (int)v8))
    {
      v23 = *(unsigned int *)(result + 216);
      if ((int)v23 <= 0)
      {
        v28 = v23 - 1;
      }
      else
      {
        v24 = 0;
        v25 = v22 + 2;
        while (v23 - 1 != v24)
        {
          v26 = *v25;
          v25 += 2;
          ++v24;
          if (v26 >= (int)v8)
          {
            v27 = v24 < v23;
            goto LABEL_43;
          }
        }
        v27 = 0;
        LODWORD(v24) = *(_DWORD *)(result + 216);
LABEL_43:
        v28 = v23 - 1;
        if (v27)
          v28 = v24;
      }
      v21 = v22[2 * v28 + 1];
    }
    else
    {
      LOBYTE(v21) = *(_BYTE *)(result + 157);
    }
LABEL_46:
    v1 = v8 - 1;
    *(_BYTE *)(v3 + v19) = v21;
  }
  while (v1 > 0);
  return result;
}

_DWORD *sub_18BC010B8(_DWORD *result, int a2, int a3)
{
  _DWORD *v5;
  int v6;
  int v7;
  _DWORD *v8;
  _DWORD *v9;

  v5 = result;
  v6 = result[108];
  if (!v6)
  {
    result = uprv_malloc(0x50uLL);
    *((_QWORD *)v5 + 56) = result;
    if (!result)
      goto LABEL_9;
    v6 = 10;
    v5[108] = 10;
  }
  v7 = v5[109];
  v8 = (_DWORD *)*((_QWORD *)v5 + 56);
  if (v7 < v6)
  {
LABEL_7:
    v9 = &v8[2 * v7];
    *v9 = a2;
    v9[1] = a3;
    ++v5[109];
    return result;
  }
  result = uprv_realloc(*((void **)v5 + 56), 16 * v6);
  *((_QWORD *)v5 + 56) = result;
  if (result)
  {
    v5[108] *= 2;
    v7 = v5[109];
    v8 = result;
    goto LABEL_7;
  }
  *((_QWORD *)v5 + 56) = v8;
LABEL_9:
  v5[111] = 7;
  return result;
}

uint64_t sub_18BC01164(uint64_t result, uint64_t a2)
{
  int v2;
  int *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int *v7;
  int v8;
  BOOL v9;
  int v10;
  int *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v24;

  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 500) = 0;
  *(_DWORD *)(a2 + 508) = 0;
  v2 = *(unsigned __int8 *)(result + 158);
  if (*(_BYTE *)(result + 158) && (v3 = *(int **)(result + 224), *v3 < 1))
  {
    v5 = *(unsigned int *)(result + 216);
    if ((int)v5 > 0)
    {
      v6 = 0;
      v7 = v3 + 2;
      while (v5 - 1 != v6)
      {
        v8 = *v7;
        v7 += 2;
        ++v6;
        if (v8 > 0)
        {
          v9 = v6 < v5;
          v10 = v5 - 1;
          if (v9)
            v10 = v6;
          goto LABEL_12;
        }
      }
    }
    v10 = v5 - 1;
LABEL_12:
    v4 = v3[2 * v10 + 1];
  }
  else
  {
    LOBYTE(v4) = *(_BYTE *)(result + 157);
  }
  *(_BYTE *)(a2 + 512) = v4;
  if (v2 && (v11 = *(int **)(result + 224), *v11 < 1))
  {
    v13 = *(unsigned int *)(result + 216);
    if ((int)v13 > 0)
    {
      v14 = 0;
      v15 = v11 + 2;
      while (v13 - 1 != v14)
      {
        v16 = *v15;
        v15 += 2;
        ++v14;
        if (v16 > 0)
        {
          v17 = v14 < v13;
          v18 = v13 - 1;
          if (v17)
            v18 = v14;
          goto LABEL_24;
        }
      }
    }
    v18 = v13 - 1;
LABEL_24:
    v12 = v11[2 * v18 + 1];
  }
  else
  {
    LOBYTE(v12) = *(_BYTE *)(result + 157);
  }
  v19 = v12 & 1;
  *(_BYTE *)(a2 + 514) = v19;
  *(_BYTE *)(a2 + 513) = v19;
  *(_DWORD *)(a2 + 516) = v19;
  *(_DWORD *)(a2 + 504) = 0;
  v20 = *(_QWORD *)(result + 80);
  if (v20)
  {
    v21 = *(int *)(result + 40) / 0x18uLL;
  }
  else
  {
    v20 = a2 + 8;
    LODWORD(v21) = 20;
  }
  *(_QWORD *)(a2 + 488) = v20;
  *(_DWORD *)(a2 + 496) = v21;
  v22 = *(_DWORD *)(result + 148);
  v24 = v22 == 1 || v22 == 6;
  *(_BYTE *)(a2 + 2536) = v24;
  return result;
}

uint64_t sub_18BC012B4(int *a1, int a2)
{
  uint64_t v4;
  int *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  _BOOL4 v19;
  int v20;
  uint64_t v21;
  unsigned __int16 BidiPairedBracket;
  unsigned __int16 v23;
  int v24;
  int *v25;
  int v26;
  uint64_t v27;
  unsigned __int16 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int *v34;
  unsigned __int8 v35;
  int *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t result;
  int v44;
  int *v45;
  int v46;
  int v47;
  int *v48;
  int *v49;
  char v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  _WORD *v55;
  uint64_t v56;
  unsigned __int8 v57;
  unsigned __int16 *v58;
  uint64_t v59;
  int *v60;
  unsigned __int16 *v61;

  v4 = a1[125];
  v5 = &a1[4 * v4];
  v6 = v5 + 126;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 128);
  v8 = a2;
  v9 = *(unsigned __int8 *)(v7 + a2);
  if (v9 != 10)
    goto LABEL_49;
  v10 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 2 * a2);
  v11 = (unsigned __int16 *)v5 + 255;
  v12 = *((unsigned __int16 *)v5 + 255);
  v13 = (unsigned __int16 *)(v5 + 127);
  v14 = *((unsigned __int16 *)v5 + 254);
  v15 = 24 * v12;
  do
  {
    if (v12 <= v14)
    {
      if (!*(_WORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 2 * a2))
        goto LABEL_49;
      v21 = *(_QWORD *)(*(_QWORD *)a1 + 128);
      BidiPairedBracket = u_getBidiPairedBracket(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 2 * a2));
      v7 = v21;
      if (v10 == BidiPairedBracket)
        goto LABEL_49;
      v23 = BidiPairedBracket;
      v24 = sub_18BC02440(v10);
      v7 = v21;
      if (v24 != 1)
        goto LABEL_49;
      if (v23 == 12297)
      {
        v25 = a1;
        v26 = 9002;
      }
      else
      {
        if (v23 != 9002)
          goto LABEL_48;
        v25 = a1;
        v26 = 12297;
      }
      result = sub_18BC0184C(v25, v26, a2);
      if (!(_DWORD)result)
        return result;
LABEL_48:
      result = sub_18BC0184C(a1, v23, a2);
      v7 = v21;
      if (!(_DWORD)result)
        return result;
      goto LABEL_49;
    }
    --v12;
    v16 = *((_QWORD *)a1 + 61);
    v17 = *(_DWORD *)(v16 + v15 - 20);
    v15 -= 24;
  }
  while (v17 != v10);
  v18 = *(_WORD *)(v16 + v15 + 12);
  if ((a1[4 * v4 + 128] & 1) == 0)
  {
    if ((v18 & 1) != 0)
    {
      v60 = v6;
      v61 = v13;
      v58 = v11;
      LOBYTE(v20) = 0;
      v19 = 1;
      goto LABEL_19;
    }
LABEL_15:
    if ((v18 & 3) == 0)
    {
      *v11 = v12;
      goto LABEL_49;
    }
    v60 = v6;
    v61 = v13;
    v58 = v11;
    v20 = a1[4 * v4 + 128] & 1;
    v19 = v14 == v12;
    if (*(_DWORD *)(v16 + v15 + 16) != v20)
      v20 = *(_DWORD *)(v16 + v15 + 16);
    goto LABEL_19;
  }
  if ((v18 & 2) == 0)
    goto LABEL_15;
  v60 = v6;
  v61 = v13;
  v58 = v11;
  v19 = 1;
  LOBYTE(v20) = 1;
LABEL_19:
  v59 = *(_QWORD *)(*(_QWORD *)a1 + 128);
  *(_BYTE *)(v7 + *(int *)(v16 + v15)) = v20;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 128) + a2) = v20;
  v57 = v20;
  sub_18BC01948((uint64_t)a1, v12, *(_DWORD *)(v16 + v15), v20);
  if (v19)
  {
    LODWORD(v27) = *v61;
    if (v27 >= (unsigned __int16)v12)
    {
      v28 = v12;
      v6 = v60;
    }
    else
    {
      v28 = v12;
      v6 = v60;
      while (*(_DWORD *)(*((_QWORD *)a1 + 61) + 24 * (v28 - 1)) == *(_DWORD *)(v16 + v15))
      {
        if (v27 >= --v28)
        {
          v28 = *v61;
          break;
        }
      }
    }
    v7 = v59;
    v35 = v57;
    *v58 = v28;
  }
  else
  {
    *(_DWORD *)(v16 + v15 + 4) = -a2;
    v27 = *v61;
    if ((int)v12 > (int)v27)
    {
      v29 = *((_QWORD *)a1 + 61);
      v30 = *(_DWORD *)(v16 + v15);
      v31 = v12;
      do
      {
        if (*(_DWORD *)(v29 + 24 * --v31) != v30)
          break;
        *(_DWORD *)(v29 + 24 * v31 + 4) = 0;
      }
      while (v31 > v27);
    }
    v32 = *v58;
    v6 = v60;
    if ((int)v12 + 1 < (int)v32)
    {
      v33 = (v12 + 1);
      v34 = (int *)(*((_QWORD *)a1 + 61) + 24 * v33 + 4);
      do
      {
        if (*(v34 - 1) >= a2)
          break;
        if (*v34 >= 1)
          *v34 = 0;
        ++v33;
        v34 += 6;
      }
      while (v33 < v32);
    }
    v7 = v59;
    v35 = v57;
  }
  if (v35 != 10)
  {
    v36 = &a1[4 * v4];
    *((_BYTE *)v36 + 514) = 10;
    v36[129] = v35;
    *v6 = a2;
    v37 = *(_QWORD *)(*(_QWORD *)a1 + 136);
    v38 = *(char *)(v37 + v8);
    if (v38 < 0)
    {
      *((_BYTE *)v36 + 513) = v38 & 1;
      if ((int)v12 > (int)v27)
      {
        v39 = 1 << (v38 & 1);
        v40 = v27;
        v41 = (_WORD *)(*((_QWORD *)a1 + 61) + 24 * v27 + 12);
        do
        {
          *v41 |= v39;
          v41 += 12;
          ++v40;
        }
        while (v40 < v12);
      }
      *(_BYTE *)(v37 + v8) &= ~0x80u;
      v37 = *(_QWORD *)(*(_QWORD *)a1 + 136);
    }
    v42 = *(int *)(*((_QWORD *)a1 + 61) + v15);
    *(_BYTE *)(v37 + v42) &= ~0x80u;
    return 1;
  }
LABEL_49:
  v44 = *(char *)(*(_QWORD *)(*(_QWORD *)a1 + 136) + v8);
  if (v44 < 0)
  {
    v47 = v44 & 1;
    if ((v9 - 11) <= 0xFCu)
      *(_BYTE *)(v7 + v8) = v47;
    v48 = &a1[4 * v4];
    *((_BYTE *)v48 + 514) = v47;
    *((_BYTE *)v48 + 513) = v47;
    v48[129] = v47;
    *v6 = a2;
    v9 = v47;
LABEL_68:
    result = 1;
    if (v9 <= 0xD && ((1 << v9) & 0x2003) != 0)
      goto LABEL_79;
    return result;
  }
  if (v9 > 4)
  {
    if (v9 == 5)
    {
      BYTE2(a1[4 * v4 + 128]) = 5;
LABEL_77:
      v9 = 1;
      goto LABEL_78;
    }
    if (v9 == 17)
    {
      v9 = BYTE2(a1[4 * v4 + 128]);
      if (v9 == 10)
      {
        *(_BYTE *)(v7 + v8) = 10;
        return 1;
      }
      goto LABEL_68;
    }
    if (v9 != 13)
      goto LABEL_67;
LABEL_63:
    v49 = &a1[4 * v4];
    *((_BYTE *)v49 + 514) = v9;
    *((_BYTE *)v49 + 513) = v9;
    v9 = v9 != 0;
    v49[129] = v9;
    *v6 = a2;
    goto LABEL_68;
  }
  if (v9 < 2)
    goto LABEL_63;
  if (v9 != 2)
  {
LABEL_67:
    BYTE2(a1[4 * v4 + 128]) = v9;
    goto LABEL_68;
  }
  v45 = &a1[4 * v4];
  *((_BYTE *)v45 + 514) = 2;
  v46 = *((unsigned __int8 *)v45 + 513);
  if (v46 == 13)
  {
    v51 = 5;
LABEL_76:
    *(_BYTE *)(v7 + v8) = v51;
    goto LABEL_77;
  }
  if (v46)
  {
    v51 = 24;
    goto LABEL_76;
  }
  v9 = 0;
  if (!*((_BYTE *)a1 + 2536))
    *(_BYTE *)(v7 + v8) = 23;
LABEL_78:
  a1[4 * v4 + 129] = v9;
  *v6 = a2;
LABEL_79:
  result = 1;
  v52 = &a1[4 * v4];
  v53 = *((unsigned __int16 *)v52 + 254);
  v54 = *((unsigned __int16 *)v52 + 255);
  if (v53 < v54)
  {
    v55 = (_WORD *)(*((_QWORD *)a1 + 61) + 24 * *((unsigned __int16 *)v52 + 254) + 12);
    v56 = v54 - v53;
    do
    {
      if (*((_DWORD *)v55 - 3) < a2)
        *v55 |= 1 << (v9 != 0);
      v55 += 12;
      --v56;
    }
    while (v56);
    return 1;
  }
  return result;
}

uint64_t sub_18BC017FC(uint64_t result, int a2, char a3, char a4, char a5)
{
  uint64_t v5;
  char v6;
  int v7;

  if (((1 << a3) & 0x780000) == 0)
  {
    v5 = result + 16 * *(int *)(result + 500);
    *(_WORD *)(v5 + 510) = *(_WORD *)(v5 + 508);
    if ((a5 & 0x7Fu) <= (a4 & 0x7Fu))
      v6 = a4;
    else
      v6 = a5;
    *(_BYTE *)(v5 + 512) = a5;
    v7 = v6 & 1;
    *(_BYTE *)(v5 + 514) = v7;
    *(_BYTE *)(v5 + 513) = v7;
    *(_DWORD *)(v5 + 516) = v7;
    *(_DWORD *)(v5 + 504) = a2;
  }
  return result;
}

uint64_t sub_18BC0184C(int *a1, int a2, int a3)
{
  uint64_t v6;
  int *v7;
  _WORD *v8;
  int v9;
  char *v10;
  void **v11;
  _DWORD *v12;
  uint64_t result;
  int *v14;
  char *v15;

  v6 = a1[125];
  v7 = &a1[4 * v6];
  v8 = (_WORD *)v7 + 255;
  v9 = *((unsigned __int16 *)v7 + 255);
  if (a1[124] <= v9)
  {
    v11 = (void **)(*(_QWORD *)a1 + 80);
    v12 = (_DWORD *)(*(_QWORD *)a1 + 40);
    result = sub_18BBFDDDC(v11, v12, 1, 48 * v9);
    if (!(_DWORD)result)
      return result;
    v14 = (int *)*((_QWORD *)a1 + 61);
    if (v14 == a1 + 2)
      memcpy(*v11, v14, 0x1E0uLL);
    v10 = (char *)*v11;
    *((_QWORD *)a1 + 61) = *v11;
    a1[124] = (int)*v12 / 0x18uLL;
    v9 = (unsigned __int16)*v8;
  }
  else
  {
    v10 = (char *)*((_QWORD *)a1 + 61);
  }
  v15 = &v10[24 * v9];
  *(_DWORD *)v15 = a3;
  *((_DWORD *)v15 + 1) = a2;
  *((_DWORD *)v15 + 4) = a1[4 * v6 + 129];
  *((_DWORD *)v15 + 2) = v7[126];
  *((_WORD *)v15 + 6) = 0;
  *v8 = v9 + 1;
  return 1;
}

uint64_t sub_18BC01948(uint64_t result, int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  int *v12;
  uint64_t v13;

  v4 = (a2 + 1);
  v5 = result + 16 * *(int *)(result + 500);
  v6 = *(unsigned __int16 *)(v5 + 510);
  if ((int)v4 < v6)
  {
    v9 = result;
    v10 = *(_QWORD *)(*(_QWORD *)result + 128);
    v11 = (unsigned __int16 *)(v5 + 510);
    v12 = (int *)(*(_QWORD *)(result + 488) + 24 * v4);
    do
    {
      if (v12[1] < 0)
      {
        if (v12[2] > a3)
          return result;
        v13 = *v12;
        if ((int)v13 > a3)
        {
          if (v12[4] == a4)
            return result;
          *(_BYTE *)(v10 + v13) = a4;
          *(_BYTE *)(v10 - v12[1]) = a4;
          v12[1] = 0;
          sub_18BC01948(v9, v4);
          result = sub_18BC01948(v9, v4);
          v6 = *v11;
        }
      }
      v4 = (v4 + 1);
      v12 += 6;
    }
    while ((int)v4 < v6);
  }
  return result;
}

_QWORD *sub_18BC01A30(_QWORD *result, uint64_t *a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v11;
  _QWORD *v14;
  int v15;
  int v16;
  char v17;
  int v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  char v26;
  _DWORD *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v48;
  uint64_t v49;
  char v50;
  int v51;
  unsigned __int8 v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  int v57;

  v6 = *a2;
  v5 = a2[1];
  v7 = result[17];
  v8 = *((unsigned __int8 *)a2 + 28);
  v9 = *(unsigned __int8 *)(*a2 + 8 * v8 + a3);
  *((_DWORD *)a2 + 7) = v9 & 0xF;
  v11 = a4;
  v14 = result;
  v15 = *(unsigned __int8 *)(v6 + 8 * (v9 & 0xF) + 7);
  v16 = a4;
  switch(*(_BYTE *)(v5 + (v9 >> 4)))
  {
    case 0:
      goto LABEL_67;
    case 1:
      goto LABEL_39;
    case 2:
      v16 = *((_DWORD *)a2 + 4);
      goto LABEL_67;
    case 3:
      v17 = *((_BYTE *)a2 + 36) + 1;
      goto LABEL_5;
    case 4:
      v17 = *((_BYTE *)a2 + 36) + 2;
LABEL_5:
      result = sub_18BC01EB4(result, *((_DWORD *)a2 + 4), a4, v17);
      goto LABEL_67;
    case 5:
      v18 = *((_DWORD *)a2 + 5);
      if ((v18 & 0x80000000) == 0)
        result = sub_18BC010B8(result, v18, 1);
      *((_DWORD *)a2 + 5) = -1;
      if (*((_DWORD *)v14 + 108) && (v19 = *((_DWORD *)v14 + 109), v19 > *((_DWORD *)v14 + 110)))
      {
        v20 = *((int *)a2 + 6);
        if ((int)v20 + 1 < v11)
        {
          v21 = (_BYTE *)(v20 + v7 + 1);
          v22 = ~(_DWORD)v20 + v11;
          do
          {
            *v21 = (*v21 & 0xFE) - 2;
            ++v21;
            --v22;
          }
          while (v22);
          v19 = *((_DWORD *)v14 + 109);
        }
        *((_DWORD *)v14 + 110) = v19;
        *((_DWORD *)a2 + 6) = -1;
      }
      else
      {
        *((_DWORD *)a2 + 6) = -1;
        v16 = v11;
        if ((*(_BYTE *)(v6 + 8 * v8 + 7) & 1) != 0)
        {
          if (*((int *)a2 + 4) <= 0)
            v16 = v11;
          else
            v16 = *((_DWORD *)a2 + 4);
        }
      }
      if (a3 != 5)
        goto LABEL_67;
      result = v14;
      v30 = v11;
      v31 = 1;
      goto LABEL_66;
    case 6:
      if (*((int *)result + 108) >= 1)
        *((_DWORD *)result + 109) = *((_DWORD *)result + 110);
      a2[2] = -1;
      goto LABEL_18;
    case 7:
      if (a3 == 3 && *(_BYTE *)(result[16] + (int)a4) == 5 && *((_DWORD *)result + 37) != 6)
      {
        v57 = *((_DWORD *)a2 + 5);
        if (v57 == -1)
        {
LABEL_18:
          *((_DWORD *)a2 + 6) = a5 - 1;
        }
        else
        {
          if ((v57 & 0x80000000) == 0)
          {
            sub_18BC010B8(result, v57, 1);
            *((_DWORD *)a2 + 5) = -2;
          }
          v27 = v14;
          v28 = v11;
          v29 = 1;
LABEL_30:
          result = sub_18BC010B8(v27, v28, v29);
        }
      }
      else if (*((_DWORD *)a2 + 5) == -1)
      {
        *((_DWORD *)a2 + 5) = a4;
      }
      goto LABEL_67;
    case 8:
      *((_DWORD *)a2 + 6) = a5 - 1;
      *((_DWORD *)a2 + 4) = -1;
      goto LABEL_67;
    case 9:
      v23 = v7 - 1;
      v24 = a4;
      break;
    case 0xA:
      sub_18BC010B8(result, a4, 1);
      v27 = v14;
      v28 = v11;
      v29 = 2;
      goto LABEL_30;
    case 0xB:
      *((_DWORD *)result + 109) = *((_DWORD *)result + 110);
      if (a3 != 5)
        goto LABEL_67;
      v30 = a4;
      v31 = 4;
LABEL_66:
      result = sub_18BC010B8(result, v30, v31);
      *((_DWORD *)v14 + 110) = *((_DWORD *)v14 + 109);
      goto LABEL_67;
    case 0xC:
      v32 = *((int *)a2 + 4);
      if ((int)v32 < (int)a4)
      {
        v33 = *((_BYTE *)a2 + 36) + v15;
        v34 = (unsigned __int8 *)(v7 + v32);
        v35 = (int)a4 - v32;
        do
        {
          if (*v34 < v33)
            *v34 = v33;
          ++v34;
          --v35;
        }
        while (v35);
      }
      goto LABEL_38;
    case 0xD:
      if (*((_DWORD *)a2 + 4) < (int)a4)
      {
        v36 = *((unsigned __int8 *)a2 + 36);
        v37 = v36 + 3;
        v38 = a4;
        do
        {
          v39 = (int)v38 - 1;
          v40 = (_BYTE *)(v7 + v39);
          v41 = *(unsigned __int8 *)(v7 + v39);
          if (v37 == v41)
          {
            v42 = (v38 << 32) - 0x100000000;
            v43 = (v38 - 2);
            do
            {
              result = (_QWORD *)v43;
              LODWORD(v44) = v39;
              *v40 = v41 - 2;
              v45 = *--v40;
              LOBYTE(v41) = v45;
              v42 -= 0x100000000;
              v43 = (v43 - 1);
              LODWORD(v39) = v39 - 1;
            }
            while (v37 == v45);
            v46 = ((uint64_t)(int)result << 32) + 0x100000000;
            v47 = (unsigned __int8 *)(v7 + (int)result);
            do
            {
              v48 = *v47--;
              v46 -= 0x100000000;
              v44 = (v44 - 1);
            }
            while (v48 == v36);
            v49 = v46 >> 32;
            v41 = *(unsigned __int8 *)(v7 + (v46 >> 32));
            v39 = v44;
          }
          else
          {
            v49 = (int)v38 - 1;
          }
          if (v36 + 2 == v41)
            v50 = v36;
          else
            v50 = v36 + 1;
          *(_BYTE *)(v7 + v49) = v50;
          v38 = v39;
        }
        while ((int)v39 > *((_DWORD *)a2 + 4));
      }
      goto LABEL_67;
    case 0xE:
      v51 = *((_DWORD *)a2 + 4);
      if (v51 < (int)a4)
      {
        v52 = *((_BYTE *)a2 + 36) + 1;
        v53 = (int)a4;
        v54 = v7 - 1;
        do
        {
          v55 = *(unsigned __int8 *)(v54 + v53);
          if (v55 > v52)
          {
            *(_BYTE *)(v54 + v53) = v55 - 2;
            v51 = *((_DWORD *)a2 + 4);
          }
          --v53;
        }
        while (v53 > v51);
      }
      goto LABEL_67;
    default:
      abort();
  }
  while (1)
  {
    v25 = __OFSUB__(v24--, 1);
    if (v24 < 0 != v25)
      break;
    v26 = *(_BYTE *)(v23 + a4);
    --v23;
    if ((v26 & 1) != 0)
    {
      result = sub_18BC010B8(result, v24, 4);
LABEL_38:
      *((_DWORD *)v14 + 110) = *((_DWORD *)v14 + 109);
      break;
    }
  }
LABEL_39:
  *((_DWORD *)a2 + 4) = v11;
LABEL_67:
  if (v15 || v16 < v11)
  {
    v56 = *((unsigned __int8 *)a2 + 36) + v15;
    if (v16 >= *((_DWORD *)a2 + 8))
    {
      if (v16 < a5)
        return memset((void *)(v7 + v16), v56, (~v16 + a5) + 1);
    }
    else
    {
      return sub_18BC01EB4(v14, v16, a5, v56);
    }
  }
  return result;
}

_QWORD *sub_18BC01EB4(_QWORD *result, int a2, int a3, char a4)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  _BYTE *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  char v11;
  unsigned __int8 *v12;
  BOOL v13;
  int v14;

  if (a2 < a3)
  {
    v4 = 0;
    v5 = 0;
    v6 = result[15];
    v7 = (unsigned __int8 *)(result[16] + a2);
    v8 = (_BYTE *)(result[17] + a2);
    v9 = (unsigned __int16 *)(v6 + 2 * a2);
    v10 = a3 - (uint64_t)a2;
    v11 = -1;
    do
    {
      if (v6 && v11 < 0)
        v5 = *v9;
      v12 = (unsigned __int8 *)&unk_18BDE0E26 + (v5 & 0xF);
      v13 = v5 <= 0;
      if (v5 > 0)
      {
        v5 = v5 >> 4;
      }
      else
      {
        v12 = v7;
        v5 = 0;
      }
      if (v13)
        v11 = -1;
      else
        ++v11;
      v14 = *v12;
      v4 -= v14 == 22;
      if (!v4)
        *v8 = a4;
      result = (_QWORD *)(v14 & 0xFE);
      if ((_DWORD)result == 20)
        ++v4;
      ++v7;
      ++v8;
      ++v9;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_18BC01F54(uint64_t result, int *a2)
{
  _QWORD *v2;
  uint64_t i;
  char *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;

  if (*a2 <= 0)
  {
    v2 = (_QWORD *)result;
    utrie2_enum((uint64_t)&off_1E224C490, 0, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))sub_18BC02078, result);
    for (i = 0; i != 40; ++i)
      result = ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v2[2])(*v2, dword_18BDE1248[i] & 0x1FFFFF, (dword_18BDE1248[i] & 0x1FFFFFu) + 1);
    v4 = &byte_18BDE12E8;
    v5 = 2252;
    v6 = 1;
    v7 = 1568;
    do
    {
      v8 = v6;
      if (v7 < v5)
      {
        v9 = 0;
        v10 = (v5 - v7 - 4) + 4;
        do
        {
          v12 = *v4++;
          v11 = v12;
          if (v12 != v9)
          {
            result = ((uint64_t (*)(_QWORD, uint64_t))v2[1])(*v2, v7);
            v9 = v11;
          }
          v7 = (v7 + 1);
          --v10;
        }
        while (v10);
        if (v9)
          result = ((uint64_t (*)(_QWORD, uint64_t))v2[1])(*v2, v5);
      }
      v6 = 0;
      v5 = 68900;
      v7 = 68288;
      v4 = ":<<@@=";
    }
    while ((v8 & 1) != 0);
  }
  return result;
}

uint64_t sub_18BC02078(uint64_t a1)
{
  (*(void (**)(_QWORD))(a1 + 8))(*(_QWORD *)a1);
  return 1;
}

uint64_t sub_18BC02094(int a1)
{
  if (a1 > 4102)
  {
    if (a1 != 4103)
    {
      if (a1 == 4117)
        return 2;
      return 0xFFFFFFFFLL;
    }
    return 5;
  }
  else
  {
    if (a1 != 4096)
    {
      if (a1 == 4102)
        return 103;
      return 0xFFFFFFFFLL;
    }
    return 22;
  }
}

uint64_t ubidi_getClass(unsigned int a1)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (a1 >> 11 <= 0x1A)
  {
    v1 = a1 >> 5;
LABEL_11:
    v3 = (a1 & 0x1F) + 4 * word_18BDE17F8[v1];
    return word_18BDE17F8[v3] & 0x1F;
  }
  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (a1 >> 5);
    goto LABEL_11;
  }
  if (HIWORD(a1) <= 0x10u)
  {
    v1 = ((a1 >> 5) & 0x3F) + word_18BDE17F8[(a1 >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 3740;
  return word_18BDE17F8[v3] & 0x1F;
}

UBool u_isMirrored_0(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (c >> 11 <= 0x1A)
  {
    v1 = c >> 5;
LABEL_11:
    v3 = (c & 0x1F) + 4 * word_18BDE17F8[v1];
    return (word_18BDE17F8[v3] >> 12) & 1;
  }
  if (!HIWORD(c))
  {
    if (c >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (c >> 5);
    goto LABEL_11;
  }
  if (HIWORD(c) <= 0x10u)
  {
    v1 = ((c >> 5) & 0x3F) + word_18BDE17F8[(c >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 3740;
  return (word_18BDE17F8[v3] >> 12) & 1;
}

UChar32 u_charMirror_0(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (c >> 11 <= 0x1A)
  {
    v1 = c >> 5;
LABEL_11:
    v3 = (c & 0x1F) + 4 * word_18BDE17F8[v1];
    return sub_18BC02248(*(uint64_t *)&c, word_18BDE17F8[v3]);
  }
  if (!HIWORD(c))
  {
    if (c >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (c >> 5);
    goto LABEL_11;
  }
  if (HIWORD(c) <= 0x10u)
  {
    v1 = ((c >> 5) & 0x3F) + word_18BDE17F8[(c >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 3740;
  return sub_18BC02248(*(uint64_t *)&c, word_18BDE17F8[v3]);
}

uint64_t sub_18BC02248(uint64_t result, __int16 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a2 >> 13;
  if (v2 != -4)
    return (v2 + result);
  v3 = 0;
  while (1)
  {
    v4 = dword_18BDE1248[v3];
    if ((v4 & 0x1FFFFF) == (_DWORD)result)
      break;
    if ((int)(v4 & 0x1FFFFF) <= (int)result && v3++ != 39)
      continue;
    return result;
  }
  return *(int *)((char *)dword_18BDE1248 + ((v4 >> 19) & 0x1FFC)) & 0x1FFFFF;
}

uint64_t sub_18BC022A4(unsigned int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  if (a1 >> 11 <= 0x1A)
  {
    v1 = a1 >> 5;
LABEL_11:
    v3 = (a1 & 0x1F) + 4 * word_18BDE17F8[v1];
    return (word_18BDE17F8[v3] >> 11) & 1;
  }
  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (a1 >> 5);
    goto LABEL_11;
  }
  if (HIWORD(a1) <= 0x10u)
  {
    v1 = ((a1 >> 5) & 0x3F) + word_18BDE17F8[(a1 >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 3740;
  return (word_18BDE17F8[v3] >> 11) & 1;
}

uint64_t sub_18BC02318(unsigned int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  if (a1 >> 11 <= 0x1A)
  {
    v1 = a1 >> 5;
LABEL_11:
    v3 = (a1 & 0x1F) + 4 * word_18BDE17F8[v1];
    return (word_18BDE17F8[v3] >> 10) & 1;
  }
  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (a1 >> 5);
    goto LABEL_11;
  }
  if (HIWORD(a1) <= 0x10u)
  {
    v1 = ((a1 >> 5) & 0x3F) + word_18BDE17F8[(a1 >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 3740;
  return (word_18BDE17F8[v3] >> 10) & 1;
}

uint64_t sub_18BC0238C(unsigned int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  if (a1 >> 11 <= 0x1A)
  {
    v1 = a1 >> 5;
LABEL_11:
    v3 = (a1 & 0x1F) + 4 * word_18BDE17F8[v1];
    return word_18BDE17F8[v3] >> 5;
  }
  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (a1 >> 5);
    goto LABEL_11;
  }
  if (HIWORD(a1) <= 0x10u)
  {
    v1 = ((a1 >> 5) & 0x3F) + word_18BDE17F8[(a1 >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 3740;
  return word_18BDE17F8[v3] >> 5;
}

uint64_t sub_18BC02400(int a1)
{
  int v1;
  char *v2;

  v1 = a1 - 1568;
  if ((a1 - 1568) < 0x2AC)
  {
    v2 = &byte_18BDE12E8;
    return v2[v1];
  }
  v1 = a1 - 68288;
  if ((a1 - 68288) <= 0x263)
  {
    v2 = ":<<@@=";
    return v2[v1];
  }
  return 0;
}

uint64_t sub_18BC02440(unsigned int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  if (a1 >> 11 <= 0x1A)
  {
    v1 = a1 >> 5;
LABEL_11:
    v3 = (a1 & 0x1F) + 4 * word_18BDE17F8[v1];
    return HIBYTE(word_18BDE17F8[v3]) & 3;
  }
  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (a1 >> 5);
    goto LABEL_11;
  }
  if (HIWORD(a1) <= 0x10u)
  {
    v1 = ((a1 >> 5) & 0x3F) + word_18BDE17F8[(a1 >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 3740;
  return HIBYTE(word_18BDE17F8[v3]) & 3;
}

UChar32 u_getBidiPairedBracket_0(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (c >> 11 > 0x1A)
  {
    if (HIWORD(c))
    {
      if (HIWORD(c) > 0x10u)
      {
        v3 = 3740;
        goto LABEL_12;
      }
      v1 = ((c >> 5) & 0x3F) + word_18BDE17F8[(c >> 11) + 2080];
    }
    else
    {
      if (c >> 10 >= 0x37)
        v2 = 0;
      else
        v2 = 320;
      v1 = v2 + (c >> 5);
    }
  }
  else
  {
    v1 = c >> 5;
  }
  v3 = (c & 0x1F) + 4 * word_18BDE17F8[v1];
LABEL_12:
  if ((word_18BDE17F8[v3] & 0x300) != 0)
    return sub_18BC02248(*(uint64_t *)&c, word_18BDE17F8[v3]);
  return c;
}

uint64_t ubidi_setLine(uint64_t result, unsigned int a2, signed int a3, uint64_t a4, int *a5)
{
  uint64_t v6;
  int v7;
  int v10;
  int Paragraph;
  uint64_t v13;
  int v14;
  unsigned __int16 *v15;
  signed int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t v27;
  char v28;
  signed int v29;
  char v30;
  char v31;

  if (a5 && *a5 <= 0)
  {
    v6 = result;
    if (!result || *(_QWORD *)result != result)
    {
      v7 = 27;
LABEL_15:
      *a5 = v7;
      return result;
    }
    if ((a2 & 0x80000000) != 0
      || (v10 = a3 - a2, a3 <= (int)a2)
      || *(_DWORD *)(result + 20) < a3
      || !a4
      || (Paragraph = ubidi_getParagraph((uint64_t *)result, a2, 0, 0, 0, a5),
          result = ubidi_getParagraph((uint64_t *)v6, a3 - 1, 0, 0, 0, a5),
          Paragraph != (_DWORD)result))
    {
      v7 = 1;
      goto LABEL_15;
    }
    v13 = *(_QWORD *)(v6 + 8) + 2 * a2;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = v13;
    *(_DWORD *)(a4 + 16) = v10;
    *(_DWORD *)(a4 + 20) = v10;
    *(_DWORD *)(a4 + 24) = v10;
    if (*(_BYTE *)(v6 + 158) && **(_DWORD **)(v6 + 224) <= (signed int)a2)
      result = sub_18BBFE03C(v6, a2);
    else
      result = *(unsigned __int8 *)(v6 + 157);
    *(_BYTE *)(a4 + 157) = result;
    *(_DWORD *)(a4 + 216) = *(_DWORD *)(v6 + 216);
    *(_QWORD *)(a4 + 320) = 0;
    *(_DWORD *)(a4 + 204) = 0;
    *(_QWORD *)(a4 + 148) = *(_QWORD *)(v6 + 148);
    *(_DWORD *)(a4 + 456) = 0;
    if (*(int *)(v6 + 456) >= 1)
    {
      v14 = 0;
      v15 = (unsigned __int16 *)(*(_QWORD *)(v6 + 8) + 2 * a2);
      v16 = a2;
      do
      {
        v17 = *v15++;
        v18 = v17 - 8234;
        v19 = v17 - 8294;
        if ((v17 & 0xFFFC) == 0x200C || v18 < 5 || v19 <= 3)
          *(_DWORD *)(a4 + 456) = ++v14;
        ++v16;
      }
      while (v16 < a3);
      *(_DWORD *)(a4 + 24) -= v14;
    }
    v22 = *(_QWORD *)(v6 + 136);
    *(_QWORD *)(a4 + 128) = *(_QWORD *)(v6 + 128) + a2;
    *(_QWORD *)(a4 + 136) = v22 + a2;
    *(_DWORD *)(a4 + 312) = -1;
    v23 = *(_DWORD *)(v6 + 200);
    if (v23 == 2)
    {
      result = sub_18BC027D0(a4);
      v24 = *(unsigned int *)(a4 + 212);
      if ((_DWORD)v24)
      {
        v25 = *(_BYTE *)(v22 + a2) & 1;
        if ((int)v24 < v10 && (*(_BYTE *)(a4 + 157) & 1) != v25)
        {
LABEL_45:
          *(_DWORD *)(a4 + 200) = 2;
LABEL_49:
          *(_QWORD *)a4 = v6;
          return result;
        }
        if ((_DWORD)v24 != 1)
        {
          v26 = (char *)(a2 + v22 + 1);
          v27 = v24 - 1;
          do
          {
            v28 = *v26++;
            if ((v28 & 1) != v25)
              goto LABEL_45;
          }
          while (--v27);
        }
      }
      else
      {
        v25 = *(_BYTE *)(a4 + 157) & 1;
      }
      *(_DWORD *)(a4 + 200) = v25;
      v30 = *(_BYTE *)(a4 + 157);
      if (v25)
        v31 = v30 | 1;
      else
        v31 = (v30 + 1) & 0xFE;
      *(_BYTE *)(a4 + 157) = v31;
    }
    else
    {
      *(_DWORD *)(a4 + 200) = v23;
      v29 = *(_DWORD *)(v6 + 212);
      if (v29 > (int)a2)
      {
        if (v29 >= a3)
          *(_DWORD *)(a4 + 212) = v10;
        else
          *(_DWORD *)(a4 + 212) = v29 - a2;
        goto LABEL_49;
      }
    }
    *(_DWORD *)(a4 + 212) = 0;
    goto LABEL_49;
  }
  return result;
}

uint64_t sub_18BC027D0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  char *v4;
  BOOL v5;
  char v6;
  unsigned __int8 *v7;
  int v8;

  v1 = *(_QWORD *)(result + 128);
  v2 = *(int *)(result + 20);
  if (*(_BYTE *)(v2 + v1 - 1) != 7)
  {
    v3 = v2 & ((int)v2 >> 31);
    v4 = (char *)(*(unsigned int *)(result + 20) + v1 - 1);
    while (1)
    {
      v5 = __OFSUB__((_DWORD)v2, 1);
      LODWORD(v2) = v2 - 1;
      if ((int)v2 < 0 != v5)
        break;
      v6 = *v4--;
      if (((1 << v6) & 0x7DDB80) == 0)
      {
        v3 = v2 + 1;
        break;
      }
    }
    LODWORD(v2) = v3 & (v3 >> 31);
    v7 = (unsigned __int8 *)(*(_QWORD *)(result + 136) + v3 - 1);
    while (1)
    {
      v5 = __OFSUB__(v3--, 1);
      if (v3 < 0 != v5)
        break;
      v8 = *v7--;
      if (v8 != *(unsigned __int8 *)(result + 157))
      {
        LODWORD(v2) = v3 + 1;
        break;
      }
    }
  }
  *(_DWORD *)(result + 212) = v2;
  return result;
}

uint64_t ubidi_getLevelAt(uint64_t a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)a1 == a1)
  {
    if ((a2 & 0x80000000) == 0)
      goto LABEL_8;
    return 0;
  }
  if (!v2)
    return 0;
  v3 = 0;
  if (a2 < 0 || (_QWORD *)*v2 != v2)
    return v3;
LABEL_8:
  if (*(_DWORD *)(a1 + 20) <= a2)
    return 0;
  if (*(_DWORD *)(a1 + 200) == 2 && *(_DWORD *)(a1 + 212) > a2)
    return *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + a2);
  if (!*(_BYTE *)(a1 + 158) || **(_DWORD **)(a1 + 224) > a2)
    return *(unsigned __int8 *)(a1 + 157);
  return sub_18BBFE03C(a1, a2);
}

char *ubidi_getLevels(uint64_t a1, int *a2)
{
  char *v3;
  _QWORD *v5;
  int v6;
  int v8;
  size_t v9;
  char *v10;

  if (!a2 || *a2 > 0)
    return 0;
  if (!a1 || (v5 = *(_QWORD **)a1, *(_QWORD *)a1 != a1) && (!v5 || (_QWORD *)*v5 != v5))
  {
    v3 = 0;
    v6 = 27;
LABEL_9:
    *a2 = v6;
    return v3;
  }
  v8 = *(_DWORD *)(a1 + 20);
  if (v8 <= 0)
  {
    v3 = 0;
    v6 = 1;
    goto LABEL_9;
  }
  v9 = *(unsigned int *)(a1 + 212);
  if (v8 == (_DWORD)v9)
    return *(char **)(a1 + 136);
  if (!sub_18BBFDDDC((void **)(a1 + 72), (_DWORD *)(a1 + 36), *(char *)(a1 + 112), *(_DWORD *)(a1 + 20)))
  {
    v3 = 0;
    v6 = 7;
    goto LABEL_9;
  }
  v3 = *(char **)(a1 + 72);
  if ((int)v9 >= 1)
  {
    v10 = *(char **)(a1 + 136);
    if (v3 != v10)
      memcpy(*(void **)(a1 + 72), v10, v9);
  }
  memset(&v3[(int)v9], *(unsigned __int8 *)(a1 + 157), v8 - (int)v9);
  *(_DWORD *)(a1 + 212) = v8;
  *(_QWORD *)(a1 + 136) = v3;
  return v3;
}

uint64_t ubidi_getLogicalRun(uint64_t result, int a2, int *a3, _BYTE *a4)
{
  uint64_t v5;
  unsigned int *v8;
  int v9;
  uint64_t v10;
  int *v11;
  unsigned int v12;
  int v13;
  int v14;
  BOOL v16;
  int v17;

  v17 = 0;
  if (a2 < 0)
    return result;
  v5 = result;
  if (*(_DWORD *)(result + 20) <= a2)
    return result;
  result = ubidi_countRuns(result, &v17);
  if (v17 > 0)
    return result;
  v8 = *(unsigned int **)(v5 + 320);
  if ((int)result < 1)
  {
    v14 = 0;
    v12 = *v8;
    if (a3)
LABEL_15:
      *a3 = v14;
  }
  else
  {
    v9 = 0;
    v10 = result - 1;
    v11 = (int *)(v8 + 1);
    do
    {
      v12 = *(v11 - 1);
      v13 = *v11;
      v14 = *v11 - v9 + (v12 & 0x7FFFFFFF);
      v16 = v14 > a2 && (int)(v12 & 0x7FFFFFFF) <= a2 || v10-- == 0;
      v11 += 3;
      v9 = v13;
    }
    while (!v16);
    if (a3)
      goto LABEL_15;
  }
  if (a4)
  {
    if (*(_DWORD *)(v5 + 148) == 3)
    {
      result = v12 >> 31;
    }
    else if (*(_DWORD *)(v5 + 200) == 2 && *(_DWORD *)(v5 + 212) > a2)
    {
      result = *(unsigned __int8 *)(*(_QWORD *)(v5 + 136) + a2);
    }
    else if (*(_BYTE *)(v5 + 158) && **(_DWORD **)(v5 + 224) <= a2)
    {
      result = sub_18BBFE03C(v5, a2);
    }
    else
    {
      result = *(unsigned __int8 *)(v5 + 157);
    }
    *a4 = result;
  }
  return result;
}

uint64_t ubidi_countRuns(uint64_t a1, int *a2)
{
  _QWORD *v4;

  if (!a2)
    return 0xFFFFFFFFLL;
  if (*a2 > 0)
    return 0xFFFFFFFFLL;
  if (!a1 || (v4 = *(_QWORD **)a1, *(_QWORD *)a1 != a1) && (!v4 || (_QWORD *)*v4 != v4))
  {
    *a2 = 27;
    return 0xFFFFFFFFLL;
  }
  sub_18BC02BAC(a1);
  if (*a2 > 0)
    return 0xFFFFFFFFLL;
  return *(unsigned int *)(a1 + 312);
}

uint64_t sub_18BC02BAC(uint64_t a1)
{
  uint64_t result;
  int v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  int v9;
  int v11;
  int v12;
  uint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t *v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  unsigned __int8 v45;
  uint64_t v46;
  int i;
  uint64_t v48;
  int *v49;
  int v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int *v59;
  unsigned int v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  int v72;
  _DWORD *v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;

  if ((*(_DWORD *)(a1 + 312) & 0x80000000) == 0)
    return 1;
  if (*(_DWORD *)(a1 + 200) != 2)
  {
    v12 = *(unsigned __int8 *)(a1 + 157);
    *(_QWORD *)(a1 + 320) = a1 + 328;
    *(_DWORD *)(a1 + 312) = 1;
    *(_DWORD *)(a1 + 328) = v12 << 31;
    *(_DWORD *)(a1 + 332) = *(_DWORD *)(a1 + 20);
    goto LABEL_17;
  }
  v3 = *(_DWORD *)(a1 + 20);
  v4 = *(unsigned __int8 **)(a1 + 136);
  v5 = *(unsigned int *)(a1 + 212);
  if ((int)v5 < 1)
  {
    v7 = 0;
    goto LABEL_35;
  }
  v6 = 0;
  v7 = 0;
  v8 = -2;
  do
  {
    v9 = v4[v6];
    if (v9 != v8)
      ++v7;
    ++v6;
    v8 = v9;
  }
  while (v5 != v6);
  if (v7 == 1 && v3 == (_DWORD)v5)
  {
    v11 = *v4;
    *(_QWORD *)(a1 + 320) = a1 + 328;
    *(_DWORD *)(a1 + 312) = 1;
    *(_DWORD *)(a1 + 328) = v11 << 31;
    *(_DWORD *)(a1 + 332) = v3;
LABEL_17:
    *(_DWORD *)(a1 + 336) = 0;
LABEL_18:
    v13 = *(unsigned int *)(a1 + 436);
    if ((int)v13 >= 1)
    {
      v14 = *(int **)(a1 + 448);
      v15 = &v14[2 * v13];
      do
      {
        v16 = *(_QWORD *)(a1 + 320) + 12 * (int)sub_18BC03134(a1, *v14);
        *(_DWORD *)(v16 + 8) |= v14[1];
        v14 += 2;
      }
      while (v14 < v15);
    }
    if (*(int *)(a1 + 456) >= 1)
    {
      v17 = *(int *)(a1 + 20);
      if ((int)v17 >= 1)
      {
        v18 = 0;
        v19 = *(unsigned __int16 **)(a1 + 8);
        v20 = &v19[v17];
        do
        {
          v21 = *v19;
          v22 = v21 & 0xFFFC;
          v23 = v21 - 8234;
          v24 = v21 - 8294;
          v26 = v22 != 8204 && v23 >= 5 && v24 > 3;
          if (!v26)
          {
            v27 = *(_QWORD *)(a1 + 320) + 12 * (int)sub_18BC03134(a1, v18);
            --*(_DWORD *)(v27 + 8);
          }
          ++v19;
          ++v18;
        }
        while (v19 < v20);
      }
    }
    return 1;
  }
LABEL_35:
  if (v3 <= (int)v5)
    v28 = v7;
  else
    v28 = v7 + 1;
  result = sub_18BBFDDDC((void **)(a1 + 96), (_DWORD *)(a1 + 48), *(char *)(a1 + 113), 12 * (int)v28);
  if ((_DWORD)result)
  {
    v29 = 0;
    v30 = 0;
    LOBYTE(v31) = 0;
    v32 = *(uint64_t **)(a1 + 96);
    LOBYTE(v33) = 126;
    do
    {
      v34 = 0;
      v35 = v30;
      v36 = v4[v30];
      v37 = v30;
      if (v36 >= v33)
        v33 = v33;
      else
        v33 = v4[v30];
      if (v36 <= v31)
        v31 = v31;
      else
        v31 = v4[v30];
      v38 = (uint64_t)&v4[v30 + 1];
      if ((int)v5 <= v30 + 1)
        ++v30;
      else
        v30 = v5;
      v39 = v37 + 1;
      while (1)
      {
        v40 = v39 + v34;
        if (v39 + v34 >= (int)v5)
          break;
        v41 = *(unsigned __int8 *)(v38 + v34++);
        if (v41 != v36)
        {
          v30 = v35 + v34;
          break;
        }
      }
      v42 = (uint64_t)v32 + 12 * v29;
      *(_DWORD *)v42 = v35;
      *(_QWORD *)(v42 + 4) = (v30 - v35);
      ++v29;
    }
    while (v40 < (int)v5);
    if (v3 > (int)v5)
    {
      v43 = (_DWORD *)v32 + 3 * v29;
      *v43 = v5;
      v43[1] = v3 - v5;
      if (*(unsigned __int8 *)(a1 + 157) < v33)
        v33 = *(unsigned __int8 *)(a1 + 157);
    }
    *(_QWORD *)(a1 + 320) = v32;
    *(_DWORD *)(a1 + 312) = v28;
    if ((v33 | 1) < v31)
    {
      v44 = v28 - (*(_DWORD *)(a1 + 212) < *(_DWORD *)(a1 + 20));
      v45 = v31 - 1;
      if (v33 < v45)
      {
        v46 = *(_QWORD *)(a1 + 136);
        do
        {
          if (v44 >= 1)
          {
            for (i = 0; i < v44; i = v57 + 1)
            {
              v48 = i;
              v49 = (int *)v32 + 3 * i;
              v50 = i + 1;
              v51 = i - 1;
              v52 = v49;
              while (1)
              {
                v53 = *v52;
                v52 += 3;
                if (*(unsigned __int8 *)(v46 + v53) >= v45)
                  break;
                ++v48;
                ++v50;
                ++v51;
                v49 = v52;
                if (v48 >= v44)
                  goto LABEL_74;
              }
              v54 = v49;
              v55 = 3;
              v56 = v48;
              do
              {
                v57 = v50;
                v58 = v51;
                v59 = v54;
                if (++v56 >= v44)
                  break;
                v60 = *(unsigned __int8 *)(v46 + v49[v55]);
                ++v50;
                v55 += 3;
                ++v51;
                v54 += 3;
              }
              while (v60 >= v45);
              if ((int)v48 < v57 - 1)
              {
                v61 = 0;
                do
                {
                  v62 = &v49[v61];
                  v63 = *(_QWORD *)&v49[v61];
                  v76 = v49[v61 + 2];
                  v64 = v59[2];
                  *(_QWORD *)v62 = *(_QWORD *)v59;
                  v62[2] = v64;
                  *(_QWORD *)v59 = v63;
                  v59[2] = v76;
                  ++v48;
                  v61 += 3;
                  v59 -= 3;
                  v26 = v48 < v58--;
                }
                while (v26);
              }
              if (v44 == v57)
                break;
            }
          }
LABEL_74:
          --v45;
        }
        while (v33 < v45);
      }
      if ((v33 & 1) != 0)
      {
        v65 = v44 - (*(_DWORD *)(a1 + 212) == *(_DWORD *)(a1 + 20));
        if ((int)v65 >= 1)
        {
          v66 = 0;
          v67 = v65 - 1;
          v68 = (uint64_t *)((char *)v32 + 12 * v65);
          v69 = v32;
          do
          {
            v70 = *v69;
            v77 = *((_DWORD *)v69 + 2);
            v71 = *((_DWORD *)v68 + 2);
            *v69 = *v68;
            *((_DWORD *)v69 + 2) = v71;
            *v68 = v70;
            *((_DWORD *)v68 + 2) = v77;
            ++v66;
            v69 = (uint64_t *)((char *)v69 + 12);
            v68 = (uint64_t *)((char *)v68 - 12);
            v26 = v66 < v67--;
          }
          while (v26);
        }
      }
    }
    if ((_DWORD)v28)
    {
      v72 = 0;
      v73 = (_DWORD *)v32 + 1;
      v74 = v28;
      do
      {
        v72 += *v73;
        *(v73 - 1) |= v4[*(v73 - 1)] << 31;
        *v73 = v72;
        v73 += 3;
        --v74;
      }
      while (v74);
    }
    if (v28 > v29)
    {
      v75 = *(unsigned __int8 *)(a1 + 157);
      if ((v75 & 1) != 0)
        LODWORD(v29) = 0;
      *((_DWORD *)v32 + 3 * v29) |= v75 << 31;
    }
    goto LABEL_18;
  }
  return result;
}

_QWORD *ubidi_getVisualRun(_QWORD *result, unsigned int a2, int *a3, int *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;

  if (result)
  {
    v7 = result;
    v8 = (_QWORD *)*result;
    if (((_QWORD *)*result == result || v8 && (_QWORD *)*v8 == v8)
      && (sub_18BC02BAC((uint64_t)result), (a2 & 0x80000000) == 0)
      && *((_DWORD *)v7 + 78) > (signed int)a2)
    {
      v9 = v7[40];
      v10 = *(_DWORD *)(v9 + 12 * a2);
      if (a3)
        *a3 = v10 & 0x7FFFFFFF;
      if (a4)
      {
        if (a2)
          v11 = *(_DWORD *)(v9 + 12 * a2 + 4) - *(_DWORD *)(v9 + 12 * (a2 - 1) + 4);
        else
          v11 = *(_DWORD *)(v9 + 4);
        *a4 = v11;
      }
      return (_QWORD *)(v10 >> 31);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_18BC03134(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  int v5;
  int *v6;
  int v7;
  int v8;

  v2 = *(unsigned int *)(a1 + 312);
  if ((int)v2 < 1)
LABEL_6:
    abort();
  result = 0;
  v5 = 0;
  v6 = (int *)(*(_QWORD *)(a1 + 320) + 4);
  while (1)
  {
    v7 = *v6;
    v8 = *(v6 - 1) & 0x7FFFFFFF;
    if (v8 <= a2 && v7 - v5 + v8 > a2)
      return result;
    v6 += 3;
    ++result;
    v5 = v7;
    if (v2 == result)
      goto LABEL_6;
  }
}

uint64_t ubidi_reorderLogical(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;

  if (a3)
  {
    if (result)
    {
      v3 = a2 - 1;
      if (a2 >= 1)
      {
        v4 = 0;
        LOBYTE(v5) = 0;
        LOBYTE(v7) = 126;
        while (1)
        {
          v8 = *(unsigned __int8 *)(result + (v3 + v4));
          if (v8 > 0x7E)
            break;
          if (v8 >= v7)
            v7 = v7;
          else
            v7 = *(unsigned __int8 *)(result + (v3 + v4));
          if (v8 <= v5)
            v5 = v5;
          else
            v5 = *(unsigned __int8 *)(result + (v3 + v4));
          --v4;
          if (a2 + 1 + v4 <= 1)
          {
            v9 = a2;
            do
            {
              v10 = v9-- <= 1;
              *(_DWORD *)(a3 + 4 * v9) = v9;
            }
            while (!v10);
            if (v7 != v5 || (v7 & 1) != 0)
            {
              v11 = v7 | 1;
              v12 = a2;
              do
              {
                v13 = 0;
                do
                {
                  v14 = (int)v13;
                  v15 = 2 * v13;
                  v16 = v13 << 32;
                  v17 = (int)v13 + 1;
                  v18 = -2 * v13;
                  while (*(unsigned __int8 *)(result + v14) < v5)
                  {
                    ++v14;
                    v15 += 2;
                    v18 -= 2;
                    LODWORD(v13) = v13 + 1;
                    v16 += 0x100000000;
                    ++v17;
                    if (v14 >= v12)
                      goto LABEL_29;
                  }
                  do
                  {
                    v19 = v18;
                    v20 = v13;
                    v21 = v16;
                    if (v17 >= v12)
                      break;
                    v22 = *(unsigned __int8 *)(result + v17);
                    --v18;
                    LODWORD(v13) = v13 + 1;
                    v16 += 0x100000000;
                    ++v17;
                  }
                  while (v22 >= v5);
                  do
                  {
                    *(_DWORD *)(a3 + 4 * v14) = -v19 - *(_DWORD *)(a3 + 4 * v14);
                    v10 = v14++ < v21 >> 32;
                  }
                  while (v10);
                  if (v3 == v20)
                    break;
                  v13 = (v20 + 2);
                }
                while ((int)v13 < a2);
LABEL_29:
                LOBYTE(v5) = v5 - 1;
              }
              while (v11 <= v5);
            }
            return result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t ubidi_reorderVisual(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  if (a3)
  {
    if (result)
    {
      v3 = a2 - 1;
      if (a2 >= 1)
      {
        v4 = 0;
        LOBYTE(v5) = 0;
        LOBYTE(v7) = 126;
        while (1)
        {
          v8 = *(unsigned __int8 *)(result + (v3 + v4));
          if (v8 > 0x7E)
            break;
          if (v8 >= v7)
            v7 = v7;
          else
            v7 = *(unsigned __int8 *)(result + (v3 + v4));
          if (v8 <= v5)
            v5 = v5;
          else
            v5 = *(unsigned __int8 *)(result + (v3 + v4));
          --v4;
          if (a2 + 1 + v4 <= 1)
          {
            v9 = a2;
            do
            {
              v10 = v9-- <= 1;
              *(_DWORD *)(a3 + 4 * v9) = v9;
            }
            while (!v10);
            if (v7 != v5 || (v7 & 1) != 0)
            {
              v11 = v7 | 1;
              v12 = a2;
              v13 = -a2;
              do
              {
                v14 = 0;
                do
                {
                  v15 = 0;
                  v16 = v14;
                  while (*(unsigned __int8 *)(result + v16) < v5)
                  {
                    ++v16;
                    ++v15;
                    if (v16 >= v12)
                      goto LABEL_32;
                  }
                  v17 = v15;
                  do
                  {
                    v18 = v17;
                    if (v14 + v17 + 1 >= v12)
                      break;
                    ++v17;
                  }
                  while (*(unsigned __int8 *)(result + 1 + v14 + v18) >= v5);
                  if ((int)v16 < v14 + (int)v18)
                  {
                    v19 = a3 + 4 * v14;
                    v20 = v18;
                    do
                    {
                      v21 = *(_DWORD *)(v19 + 4 * v15);
                      *(_DWORD *)(v19 + 4 * v15) = *(_DWORD *)(v19 + 4 * v20);
                      *(_DWORD *)(v19 + 4 * v20) = v21;
                      ++v15;
                      --v20;
                    }
                    while (v14 + v15 < v20 + v14);
                  }
                  if (v13 + v14 + (_DWORD)v18 == -1)
                    break;
                  v14 += v18 + 2;
                }
                while (v14 < a2);
LABEL_32:
                LOBYTE(v5) = v5 - 1;
              }
              while (v11 <= v5);
            }
            return result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t ubidi_getVisualIndex(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v5;
  _QWORD *v6;
  int v7;
  uint64_t result;
  int v9;
  int v10;
  _DWORD *v11;
  int v12;
  int v13;
  int *v14;
  int v15;
  uint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  signed int v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int *v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned __int16 *v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  BOOL v45;
  unsigned int v46;

  if (!a3)
    return 0xFFFFFFFFLL;
  if (*a3 > 0)
    return 0xFFFFFFFFLL;
  if (!a1 || (v5 = a2, v6 = *(_QWORD **)a1, *(_QWORD *)a1 != a1) && (!v6 || (_QWORD *)*v6 != v6))
  {
    v7 = 27;
LABEL_24:
    *a3 = v7;
    return 0xFFFFFFFFLL;
  }
  if ((a2 & 0x80000000) != 0 || (v9 = *(_DWORD *)(a1 + 20), v9 <= (int)a2))
  {
    v7 = 1;
    goto LABEL_24;
  }
  v10 = *(_DWORD *)(a1 + 200);
  result = a2;
  if (v10)
  {
    if (v10 == 1)
    {
      result = (v9 + ~(_DWORD)a2);
    }
    else
    {
      if (!sub_18BC02BAC(a1))
      {
        v7 = 7;
        goto LABEL_24;
      }
      v16 = *(unsigned int *)(a1 + 312);
      if ((int)v16 < 1)
        return 0xFFFFFFFFLL;
      v17 = 0;
      v18 = (int *)(*(_QWORD *)(a1 + 320) + 4);
      result = 0xFFFFFFFFLL;
      while (1)
      {
        v20 = *(v18 - 1);
        v19 = *v18;
        v21 = v5 - (v20 & 0x7FFFFFFF);
        if ((v21 & 0x80000000) == 0 && v21 < v19 - v17)
          break;
        v18 += 3;
        v17 = v19;
        if (!--v16)
          return result;
      }
      if (v20 >= 0)
        result = (v21 + v17);
      else
        result = (v19 + ~v21);
    }
  }
  if (*(int *)(a1 + 436) < 1)
  {
    if (*(int *)(a1 + 456) >= 1)
    {
      v22 = *(_QWORD *)(a1 + 8);
      v23 = *(unsigned __int16 *)(v22 + 2 * v5);
      v24 = v23 & 0xFFFC;
      v25 = v23 - 8234;
      v26 = v23 - 8294;
      if (v24 == 8204 || v25 < 5 || v26 < 4)
        return 0xFFFFFFFFLL;
      v29 = *(int **)(a1 + 320);
      v30 = v29[1];
      v31 = v29[2];
      if ((int)result >= v30)
      {
        v32 = 0;
        v34 = 0;
        v35 = v29 + 5;
        do
        {
          v33 = v30;
          v34 -= v31;
          ++v32;
          v30 = *(v35 - 1);
          v31 = *v35;
          v35 += 3;
        }
        while ((int)result >= v30);
      }
      else
      {
        v32 = 0;
        v33 = 0;
        v34 = 0;
      }
      if (v31)
      {
        v36 = v29[3 * v32];
        v37 = v30 - v33 + (v36 & 0x7FFFFFFF);
        v38 = v36 < 0 ? v5 + 1 : v36;
        v39 = v36 < 0 ? v37 : v5;
        if (v38 < v39)
        {
          v40 = (unsigned __int16 *)(v22 + 2 * v38);
          v41 = v39 - (uint64_t)v38;
          do
          {
            v43 = *v40++;
            v42 = v43;
            v44 = v43 - 8234;
            v45 = (v43 & 0xFFFC) != 0x200C && v44 >= 5;
            v46 = v42 - 8294;
            if (!v45 || v46 < 4)
              ++v34;
            --v41;
          }
          while (v41);
        }
      }
      return (result - v34);
    }
  }
  else
  {
    v11 = *(_DWORD **)(a1 + 320);
    v12 = v11[2];
    v13 = (v12 & 5) != 0;
    if ((int)result >= v11[1])
    {
      v14 = v11 + 5;
      do
      {
        if ((v12 & 0xA) != 0)
          ++v13;
        v15 = *(v14 - 1);
        v12 = *v14;
        if ((*v14 & 5) != 0)
          ++v13;
        v14 += 3;
      }
      while ((int)result >= v15);
    }
    return (v13 + result);
  }
  return result;
}

uint64_t ubidi_getLogicalIndex(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int *i;
  int v13;
  int v14;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  int v33;
  int *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  int v42;
  int v43;
  int v44;
  int v45;

  if (!a3 || *a3 > 0)
    return 0xFFFFFFFFLL;
  if (!a1 || (v5 = a2, v6 = *(_QWORD **)a1, *(_QWORD *)a1 != a1) && (!v6 || (_QWORD *)*v6 != v6))
  {
    v7 = 27;
LABEL_23:
    *a3 = v7;
    return 0xFFFFFFFFLL;
  }
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 24) <= (int)a2)
  {
    v7 = 1;
    goto LABEL_23;
  }
  if (!*(_DWORD *)(a1 + 436) && !*(_DWORD *)(a1 + 456))
  {
    v21 = *(_DWORD *)(a1 + 200);
    if (!v21)
      return v5;
    if (v21 == 1)
      return (*(_DWORD *)(a1 + 20) + ~(_DWORD)a2);
  }
  if (!sub_18BC02BAC(a1))
  {
    v7 = 7;
    goto LABEL_23;
  }
  v8 = *(int **)(a1 + 320);
  v9 = *(_DWORD *)(a1 + 312);
  if (*(int *)(a1 + 436) < 1)
  {
    if (*(int *)(a1 + 456) >= 1)
    {
      v16 = v8[1];
      v17 = v8[2];
      if (v16 + v17 <= (int)v5)
      {
        v18 = 0;
        v20 = 0;
        v22 = v8 + 5;
        do
        {
          v19 = v16;
          v20 -= v17;
          ++v18;
          v16 = *(v22 - 1);
          v17 = *v22;
          v23 = v16 - v20 + *v22;
          v22 += 3;
        }
        while (v23 <= (int)v5);
      }
      else
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
      }
      if (v17 && v16 - v19 >= 1)
      {
        v24 = 0;
        v25 = v8[3 * v18];
        v26 = v25 & 0x7FFFFFFF;
        v27 = ~v19 + v16;
        do
        {
          v28 = v26 + v24;
          if (v25 < 0)
            v28 = v26 + v27;
          v29 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2 * v28);
          v30 = (v29 & 0xFFFC) != 0x200C && (v29 - 8234) >= 5;
          v31 = v29 - 8294;
          if (!v30 || v31 < 4)
            ++v20;
          v33 = v19 + v24++;
        }
        while (v33 != v20 + (_DWORD)v5 && v27-- != 0);
      }
      LODWORD(v5) = v20 + v5;
    }
  }
  else
  {
    v10 = 0;
    v11 = 0;
    for (i = v8 + 2; ; i += 3)
    {
      v13 = *(i - 1);
      v14 = *i;
      if ((*i & 5) != 0)
      {
        if (v11 + v10 >= (int)v5)
          return 0xFFFFFFFFLL;
        ++v10;
      }
      if (v10 + v13 > (int)v5)
        break;
      v11 = v13;
      if ((v14 & 0xA) != 0)
      {
        if (v10 + v13 == (_DWORD)v5)
          return 0xFFFFFFFFLL;
        ++v10;
        v11 = v13;
      }
    }
    LODWORD(v5) = v5 - v10;
  }
  if (v9 >= 11)
  {
    v43 = 0;
    do
    {
      while (1)
      {
        v44 = v9 + v43;
        v45 = v9 + v43 < 0 != __OFADD__(v9, v43) ? v44 + 1 : v9 + v43;
        v37 = v45 >> 1;
        if ((int)v5 < v8[3 * (v45 >> 1) + 1])
          break;
        v43 = v37 + 1;
      }
      v39 = (uint64_t)v45 >> 1;
      if ((v44 + 1) < 3)
        break;
      v9 = v37;
    }
    while ((int)v5 < v8[3 * (int)v39 - 2]);
  }
  else
  {
    v35 = v8 + 1;
    v36 = 0xFFFFFFFF00000000;
    v37 = -1;
    do
    {
      v38 = *v35;
      v35 += 3;
      v36 += 0x100000000;
      ++v37;
    }
    while ((int)v5 >= v38);
    v39 = v36 >> 32;
  }
  v40 = v8[3 * (int)v39];
  if (v40 < 0)
    return (v40 & 0x7FFFFFFFu) + ~(_DWORD)v5 + v8[3 * (int)v39 + 1];
  v41 = __OFSUB__(v37, 1);
  v42 = v37 - 1;
  if (v42 < 0 == v41)
    LODWORD(v5) = v5 - v8[3 * v42 + 1];
  return (v5 + v40);
}

uint64_t ubidi_getLogicalMap(uint64_t result, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  signed int v10;
  unsigned int *v11;
  signed int v12;
  uint64_t v13;
  char *v14;
  signed int v15;
  char *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  char *v46;

  if (a3)
  {
    if (*a3 <= 0)
    {
      v5 = result;
      result = ubidi_countRuns(result, a3);
      if (*a3 <= 0)
      {
        if (a2)
        {
          v6 = *(unsigned int *)(v5 + 20);
          if ((int)v6 >= 1)
          {
            v7 = *(_QWORD *)(v5 + 320);
            if ((int)v6 > *(_DWORD *)(v5 + 24))
              result = (uint64_t)memset(a2, 255, 4 * v6);
            LODWORD(v8) = *(_DWORD *)(v5 + 312);
            if ((int)v8 >= 1)
            {
              v9 = 0;
              v10 = 0;
              do
              {
                v11 = (unsigned int *)(v7 + 12 * v9);
                v13 = *v11;
                v12 = v11[1];
                if ((v13 & 0x80000000) != 0)
                {
                  v16 = &a2[4 * (int)(v12 - v10 + (v13 & 0x7FFFFFFF)) - 4];
                  do
                  {
                    v15 = v10 + 1;
                    *(_DWORD *)v16 = v10;
                    v16 -= 4;
                    v10 = v15;
                  }
                  while (v15 < v12);
                }
                else
                {
                  v14 = &a2[4 * v13];
                  do
                  {
                    v15 = v10 + 1;
                    *(_DWORD *)v14 = v10;
                    v14 += 4;
                    v10 = v15;
                  }
                  while (v15 < v12);
                }
                ++v9;
                v8 = *(int *)(v5 + 312);
                v10 = v15;
              }
              while (v9 < v8);
            }
            if (*(int *)(v5 + 436) < 1)
            {
              if (*(int *)(v5 + 456) >= 1 && (int)v8 >= 1)
              {
                v29 = 0;
                v30 = 0;
                v31 = 0;
                do
                {
                  result = v7 + 12 * v29;
                  v33 = *(_DWORD *)(result + 4);
                  v32 = *(_DWORD *)(result + 8);
                  if (v30 != v32)
                  {
                    result = (v33 - v31);
                    v34 = *(_DWORD *)(v7 + 12 * v29);
                    v35 = v34 & 0x7FFFFFFF;
                    if (v32)
                    {
                      if ((int)result >= 1)
                      {
                        v36 = *(_QWORD *)(v5 + 8);
                        v37 = v35 - 1;
                        do
                        {
                          if (v34 >= 0)
                            v38 = v35;
                          else
                            v38 = v37 + result;
                          v39 = v38;
                          v40 = *(unsigned __int16 *)(v36 + 2 * v38);
                          v41 = v40 & 0xFFFC;
                          v42 = v40 - 8234;
                          v43 = v40 - 8294;
                          if (v41 != 8204 && v42 >= 5 && v43 > 3)
                          {
                            *(_DWORD *)&a2[4 * v39] -= v30;
                          }
                          else
                          {
                            ++v30;
                            *(_DWORD *)&a2[4 * v39] = -1;
                          }
                          LODWORD(v35) = v35 + 1;
                          result = (result - 1);
                        }
                        while ((_DWORD)result);
                      }
                    }
                    else if ((int)result >= 1)
                    {
                      result = (v35 + result);
                      v46 = &a2[4 * v35];
                      do
                      {
                        *(_DWORD *)v46 -= v30;
                        v46 += 4;
                        LODWORD(v35) = v35 + 1;
                      }
                      while ((int)result > (int)v35);
                    }
                  }
                  ++v29;
                  v31 = v33;
                }
                while (v29 != v8);
              }
            }
            else if ((int)v8 >= 1)
            {
              v17 = 0;
              v18 = 0;
              v19 = 0;
              v20 = v8;
              do
              {
                v21 = v7 + 12 * v17;
                v22 = *(_DWORD *)(v21 + 4);
                v23 = *(_DWORD *)(v21 + 8);
                if ((v23 & 5) != 0)
                  v24 = v18 + 1;
                else
                  v24 = v18;
                if (v24 >= 1)
                {
                  v25 = v22 - v19;
                  if (v25 >= 1)
                  {
                    v26 = *(_DWORD *)(v7 + 12 * v17) & 0x7FFFFFFF;
                    v27 = v25 + v26;
                    result = (uint64_t)&a2[4 * v26];
                    do
                    {
                      *(_DWORD *)result += v24;
                      result += 4;
                      LODWORD(v26) = v26 + 1;
                    }
                    while (v27 > (int)v26);
                  }
                }
                if ((v23 & 0xA) != 0)
                  v18 = v24 + 1;
                else
                  v18 = v24;
                ++v17;
                v19 = v22;
              }
              while (v17 != v20);
            }
          }
        }
        else
        {
          *a3 = 1;
        }
      }
    }
  }
  return result;
}

uint64_t ubidi_getVisualMap(uint64_t result, int *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  int *v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int *v20;
  uint64_t v21;
  char v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int *v32;
  int v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int *v48;
  int *v49;
  uint64_t v50;
  int v51;

  if (a3 && *a3 <= 0)
  {
    if (a2)
    {
      v5 = result;
      result = ubidi_countRuns(result, a3);
      if (*a3 <= 0 && *(int *)(v5 + 24) >= 1)
      {
        v6 = *(_QWORD *)(v5 + 320);
        v7 = *(_DWORD *)(v5 + 312);
        if (v7 >= 1)
        {
          v8 = 0;
          v9 = v6 + 12 * v7;
          v10 = a2;
          v11 = *(int **)(v5 + 320);
          do
          {
            v13 = *v11;
            v12 = v11[1];
            if (*v11 < 0)
            {
              v15 = v13 & 0x7FFFFFFF;
              v16 = v8 + 1;
              v17 = ~v8 + v12 + v15;
              do
              {
                *v10++ = v17;
                ++v8;
                --v17;
              }
              while (v8 < v12);
              if (v12 <= v16)
                v12 = v16;
            }
            else
            {
              if (v12 <= v8 + 1)
                v12 = v8 + 1;
              v14 = v12 - v8;
              do
              {
                *v10++ = v13++;
                --v14;
              }
              while (v14);
            }
            v11 += 3;
            v8 = v12;
          }
          while ((unint64_t)v11 < v9);
        }
        if (*(int *)(v5 + 436) < 1)
        {
          if (*(int *)(v5 + 456) >= 1)
          {
            v29 = *(unsigned int *)(v5 + 312);
            if ((int)v29 >= 1)
            {
              v30 = 0;
              v31 = 0;
              LODWORD(result) = 0;
              do
              {
                v32 = (int *)(v6 + 12 * v30);
                v34 = v32[1];
                v33 = v32[2];
                v35 = v34 - result;
                if (v33)
                  v36 = 0;
                else
                  v36 = v31 == (_DWORD)result;
                if (v36)
                {
                  v31 += v35;
                }
                else if (v33)
                {
                  if (v35 >= 1)
                  {
                    v37 = *v32;
                    v38 = *v32 & 0x7FFFFFFF;
                    v39 = *(_QWORD *)(v5 + 8);
                    v40 = v38 - 1;
                    do
                    {
                      v41 = v40 + v35;
                      if (v37 >= 0)
                        v41 = v38;
                      v42 = *(unsigned __int16 *)(v39 + 2 * v41);
                      v43 = v42 & 0xFFFC;
                      v44 = v42 - 8234;
                      v45 = v42 - 8294;
                      if (v43 != 8204 && v44 >= 5 && v45 >= 4)
                        a2[v31++] = v41;
                      ++v38;
                      --v35;
                    }
                    while (v35);
                  }
                }
                else if ((int)v34 > (int)result)
                {
                  v48 = &a2[(int)result];
                  v49 = &a2[v31];
                  v31 = v31 + v34 - result;
                  v50 = (int)v34 - (uint64_t)(int)result;
                  do
                  {
                    v51 = *v48++;
                    *v49++ = v51;
                    --v50;
                  }
                  while (v50);
                }
                ++v30;
                result = v34;
              }
              while (v30 != v29);
            }
          }
        }
        else
        {
          v18 = *(unsigned int *)(v5 + 312);
          if ((int)v18 >= 1)
          {
            v19 = 0;
            v20 = (int *)(v6 + 8);
            v21 = *(unsigned int *)(v5 + 312);
            do
            {
              v23 = *v20;
              v20 += 3;
              v22 = v23;
              if ((v23 & 5) != 0)
                ++v19;
              if ((v22 & 0xA) != 0)
                ++v19;
              --v21;
            }
            while (v21);
            if (v19 >= 1)
            {
              v24 = *(_DWORD *)(v5 + 24);
              do
              {
                result = *(unsigned int *)(v6 + 12 * (v18 - 1) + 8);
                if ((result & 0xA) != 0)
                {
                  a2[--v24] = -1;
                  --v19;
                }
                if ((unint64_t)v18 < 2)
                  v25 = 0;
                else
                  v25 = *(_DWORD *)(v6 + 12 * (v18 - 2) + 4);
                v26 = *(int *)(v6 + 12 * (v18 - 1) + 4);
                if ((int)v26 > v25 && v19 != 0)
                {
                  v28 = v24;
                  v24 = v25 + v24 - v26;
                  do
                    a2[--v28] = a2[--v26];
                  while (v26 > v25);
                }
                if ((result & 5) != 0)
                {
                  a2[--v24] = -1;
                  --v19;
                }
                if (v18 < 2)
                  break;
                --v18;
              }
              while (v19 > 0);
            }
          }
        }
      }
    }
    else
    {
      *a3 = 1;
    }
  }
  return result;
}

char *ubidi_invertMap(char *result, void *__b, int a3)
{
  char *v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  char *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;

  if (result && __b && a3 >= 1)
  {
    v5 = result;
    v6 = 0;
    v7 = -1;
    v8 = (unint64_t)&result[4 * a3];
    do
    {
      v10 = *(_DWORD *)(v8 - 4);
      v8 -= 4;
      v9 = v10;
      if (v10 > v7)
        v7 = v9;
      v6 += v9 >= 0;
    }
    while (v8 > (unint64_t)result);
    if (v6 <= v7)
      result = (char *)memset(__b, 255, 4 * (v7 + 1));
    v11 = &v5[4 * a3 - 4];
    v12 = a3 + 1;
    do
    {
      v14 = *(_DWORD *)v11;
      v11 -= 4;
      v13 = v14;
      if ((v14 & 0x80000000) == 0)
        *((_DWORD *)__b + v13) = v12 - 2;
      --v12;
    }
    while (v12 > 1);
  }
  return result;
}

void *ubiditransform_open(int *a1)
{
  void *result;

  if (*a1 > 0)
    return 0;
  result = uprv_calloc(1, 72);
  if (!result)
    *a1 = 7;
  return result;
}

void ubiditransform_close(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;

  if (a1)
  {
    v2 = (_QWORD *)*a1;
    if (v2)
      ubidi_close(v2);
    v3 = (void *)a1[2];
    if (v3)
      uprv_free(v3);
    uprv_free(a1);
  }
}

void *ubiditransform_transform(uint64_t a1, UChar *s, uint64_t a3, UChar *a4, int32_t a5, unsigned __int8 a6, int a7, unsigned __int8 a8, int a9, int a10, unsigned int a11, int *a12)
{
  void *result;
  uint64_t v16;
  int v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, int *);
  int v26;
  unsigned int (**v27)(uint64_t, int *);
  unsigned int (*v28)(uint64_t, int *);
  unsigned int v29;
  unsigned __int8 v30;
  unsigned __int8 v31;

  result = 0;
  v31 = a6;
  v30 = a8;
  v29 = 0;
  if (*a12 > 0)
    return result;
  if (!s || !a4)
    goto LABEL_10;
  v16 = a3;
  if (!(_DWORD)a3)
    return 0;
  if ((int)a3 <= -2)
  {
LABEL_10:
    result = 0;
    v19 = 1;
LABEL_11:
    *a12 = v19;
    return result;
  }
  if ((_DWORD)a3 == -1)
    v16 = u_strlen(s);
  if (!a5)
    return 0;
  if (a5 <= -2)
    goto LABEL_10;
  if (a5 == -1)
    a5 = u_strlen(a4);
  v20 = a1;
  if (!a1)
  {
    if (*a12 <= 0)
    {
      result = uprv_calloc(1, 72);
      if (!result)
      {
        v19 = 7;
        goto LABEL_11;
      }
      if (*a12 <= 0)
      {
        v20 = (uint64_t)result;
        goto LABEL_15;
      }
    }
    return 0;
  }
LABEL_15:
  sub_18BC0432C(s, v16, &v31, &v30);
  v21 = sub_18BC04394(v31, v30, a7, a9);
  *(_QWORD *)(v20 + 8) = v21;
  if (v21)
  {
    *(_DWORD *)(v20 + 56) = 2 * (a10 != 0);
    *(int8x8_t *)(v20 + 60) = vand_s8((int8x8_t)vdup_n_s32(a11), (int8x8_t)0xFFFFFF1BFFFFFFE3);
    v22 = a5 <= (int)v16 ? v16 : a5;
    sub_18BC043F0(v20, s, v16, v22, a12);
    if (*a12 <= 0)
    {
      v23 = *(_QWORD *)v20;
      if (*(_QWORD *)v20 || (v23 = (uint64_t)ubidi_openSized(0, 0, a12), *(_QWORD *)v20 = v23, *a12 <= 0))
      {
        *(_QWORD *)(v20 + 24) = a4;
        *(_DWORD *)(v20 + 40) = a5;
        *(_QWORD *)(v20 + 48) = &v29;
        v24 = *(_QWORD *)(v20 + 8);
        v25 = *(unsigned int (**)(uint64_t, int *))(v24 + 32);
        if (v25)
        {
          v26 = 0;
          v27 = (unsigned int (**)(uint64_t, int *))(v24 + 40);
          do
          {
            if (*a12 > 0)
              break;
            if (v25(v20, a12))
            {
              sub_18BC043F0(v20, *(const UChar **)(v20 + 24), **(unsigned int **)(v20 + 48), **(_DWORD **)(v20 + 48), a12);
              v26 = 1;
            }
            v28 = *v27++;
            v25 = v28;
          }
          while (v28);
          ubidi_setInverse(*(_QWORD *)v20, 0);
          if (v26)
            goto LABEL_20;
        }
        else
        {
          ubidi_setInverse(v23, 0);
        }
        if (*a12 <= 0)
        {
          if (a5 >= (int)v16)
          {
            u_strncpy(a4, s, v16);
            v29 = v16;
          }
          else
          {
            *a12 = 15;
          }
        }
      }
    }
  }
LABEL_20:
  if (v20 == a1)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    ubiditransform_close((_QWORD *)v20);
  }
  if (*a12 <= 0)
    return (void *)v29;
  else
    return 0;
}

uint64_t sub_18BC0432C(UChar *a1, int a2, _BYTE *a3, _BYTE *a4)
{
  unsigned int v6;
  uint64_t result;
  unsigned int v8;
  char v9;

  v6 = *a3;
  if (v6 < 0xFE)
  {
    result = v6 & 1;
  }
  else
  {
    result = ubidi_getBaseDirection(a1, a2);
    if (result == 3)
      result = *a3 == 255;
  }
  *a3 = result;
  v8 = *a4;
  if (v8 <= 0xFD)
    v9 = v8 & 1;
  else
    v9 = result;
  *a4 = v9;
  return result;
}

char *sub_18BC04394(int a1, int a2, int a3, int a4)
{
  uint64_t v4;
  char *v5;

  v4 = 0;
  while (1)
  {
    if (byte_1E224C4E8[v4] == a1
      && byte_1E224C4E8[v4 + 8] == a2
      && *(_DWORD *)&byte_1E224C4E8[v4 + 4] == a3)
    {
      v5 = &byte_1E224C4E8[v4];
      if (*(_DWORD *)&byte_1E224C4E8[v4 + 12] == a4)
        break;
    }
    v4 += 88;
    if (v4 == 1408)
      return 0;
  }
  return v5;
}

uint64_t sub_18BC043F0(uint64_t result, const UChar *a2, uint64_t a3, unsigned int a4, int *a5)
{
  int v6;
  uint64_t v9;
  unsigned int v10;
  void *v11;

  if (a4 < a3)
  {
    v6 = 15;
LABEL_3:
    *a5 = v6;
    return result;
  }
  v9 = result;
  if (*(_DWORD *)(result + 36) >= a4)
  {
    result = *(_QWORD *)(result + 16);
  }
  else
  {
    v10 = a4 + 50;
    v11 = *(void **)(result + 16);
    if (v11)
    {
      uprv_free(v11);
      *(_QWORD *)(v9 + 16) = 0;
    }
    result = (uint64_t)uprv_malloc(2 * v10);
    *(_QWORD *)(v9 + 16) = result;
    if (!result)
    {
      v6 = 7;
      goto LABEL_3;
    }
    *(_DWORD *)(v9 + 36) = v10;
  }
  u_strncpy((UChar *)result, a2, a3);
  result = u_terminateUChars(*(_QWORD *)(v9 + 16), *(_DWORD *)(v9 + 36), a3, a5);
  *(_DWORD *)(v9 + 32) = result;
  return result;
}

uint64_t sub_18BC044A4(uint64_t a1, int *a2)
{
  unsigned int v2;
  int v3;
  UChar *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  UChar *v12;
  int v13;
  int v14;
  uint64_t v16;

  v2 = *(_DWORD *)(a1 + 60);
  v3 = v2 | *(_DWORD *)(a1 + 64);
  if (!*(_QWORD *)(a1 + 60))
    return 0;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(UChar **)(a1 + 16);
  v10 = v7 + 16;
  v9 = *(_DWORD *)(v7 + 16);
  v8 = *(_DWORD *)(v10 + 4);
  v11 = *(unsigned int *)(a1 + 32);
  v12 = *(UChar **)(a1 + 24);
  v13 = *(_DWORD *)(a1 + 40);
  if (v8 == v9)
  {
    v14 = v8 | v3;
LABEL_7:
    **(_DWORD **)(a1 + 48) = u_shapeArabic(v6, v11, v12, v13, v14, a2);
    return 1;
  }
  v16 = u_shapeArabic(v6, v11, v12, v13, v9 | v2, a2);
  **(_DWORD **)(a1 + 48) = v16;
  if (*a2 <= 0)
  {
    sub_18BC043F0(a1, *(const UChar **)(a1 + 24), v16, v16, a2);
    v6 = *(UChar **)(a1 + 16);
    v14 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 20) | *(_DWORD *)(a1 + 64);
    v11 = *(unsigned int *)(a1 + 32);
    v12 = *(UChar **)(a1 + 24);
    v13 = *(_DWORD *)(a1 + 40);
    goto LABEL_7;
  }
  return 1;
}

uint64_t sub_18BC04564(uint64_t a1, int *a2)
{
  ubidi_setPara(*(_QWORD *)a1, *(const UChar **)(a1 + 16), *(unsigned int *)(a1 + 32), *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 24), 0, a2);
  return 0;
}

uint64_t sub_18BC04598(uint64_t a1, int *a2)
{
  ubidi_writeReordered(*(_QWORD *)a1, *(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 40), *(_WORD *)(a1 + 56), a2);
  **(_DWORD **)(a1 + 48) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 56) = 0;
  return 1;
}

uint64_t sub_18BC045E0(uint64_t a1, int *a2)
{
  ubidi_writeReverse(*(UChar **)(a1 + 16), *(unsigned int *)(a1 + 32), *(UChar **)(a1 + 24), *(_DWORD *)(a1 + 40), 0, a2);
  **(_DWORD **)(a1 + 48) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t sub_18BC04628(uint64_t *a1)
{
  ubidi_setInverse(*a1, 1);
  ubidi_setReorderingMode(*a1, 5u);
  return 0;
}

uint64_t sub_18BC04660(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  char LevelAt;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;

  if ((*(_BYTE *)(a1 + 56) & 2) == 0)
    return 0;
  if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 32))
  {
    result = 0;
    *a2 = 15;
    return result;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    LevelAt = ubidi_getLevelAt(*(_QWORD *)a1, v4);
    v7 = *(_QWORD *)(a1 + 16);
    v8 = v4 + 1;
    v9 = *(unsigned __int16 *)(v7 + 2 * v4);
    if ((v9 & 0xFC00) == 0xD800 && v8 != *(_DWORD *)(a1 + 32))
    {
      v11 = *(unsigned __int16 *)(v7 + 2 * v8);
      v12 = (v11 & 0xFC00) == 56320;
      v13 = v11 + (v9 << 10) - 56613888;
      if (v12)
        v9 = v13;
      if (v12)
        v4 += 2;
      else
        ++v4;
      if ((LevelAt & 1) != 0)
      {
LABEL_18:
        v14 = u_charMirror(v9);
        v10 = u_charMirror(v9);
        if (!HIWORD(v14))
          goto LABEL_19;
        *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v5) = (v10 >> 10) - 10304;
        LOWORD(v9) = u_charMirror(v9);
        v15 = *(_QWORD *)(a1 + 24);
        goto LABEL_22;
      }
    }
    else
    {
      ++v4;
      if ((LevelAt & 1) != 0)
        goto LABEL_18;
    }
    if (v9 < 0x10000)
    {
      LOWORD(v10) = v9;
LABEL_19:
      v15 = *(_QWORD *)(a1 + 24);
      v16 = 1;
      v17 = v5;
      goto LABEL_23;
    }
    v15 = *(_QWORD *)(a1 + 24);
    *(_WORD *)(v15 + 2 * v5) = (v9 >> 10) - 10304;
LABEL_22:
    v17 = v5 + 1;
    LOWORD(v10) = v9 & 0x3FF | 0xDC00;
    v16 = 2;
LABEL_23:
    v5 += v16;
    *(_WORD *)(v15 + 2 * v17) = v10;
    v18 = *(_DWORD *)(a1 + 32);
  }
  while (v4 < v18);
  **(_DWORD **)(a1 + 48) = v18;
  *(_DWORD *)(a1 + 56) = 0;
  return 1;
}

uint64_t sub_18BC047E0(uint64_t *a1)
{
  ubidi_setReorderingMode(*a1, 3u);
  return 0;
}

uint64_t ubidi_writeReverse(UChar *s, uint64_t a2, UChar *a3, unsigned int a4, char a5, int *a6)
{
  uint64_t v12;

  if (!a6 || *a6 > 0)
    return 0;
  if (!s
    || (int)a2 < -1
    || (a4 & 0x80000000) != 0
    || !a3 && a4
    || a3 && (s >= a3 && &a3[a4] > s || a3 >= s && &s[(int)a2] > a3))
  {
    *a6 = 1;
    return 0;
  }
  if ((_DWORD)a2 == -1)
    a2 = u_strlen(s);
  if ((int)a2 < 1)
    v12 = 0;
  else
    v12 = sub_18BC048FC(s, a2, a3, a4, a5, a6);
  return u_terminateUChars((uint64_t)a3, a4, v12, a6);
}

uint64_t sub_18BC048FC(unsigned __int16 *a1, uint64_t a2, _WORD *a3, int a4, char a5, _DWORD *a6)
{
  uint64_t v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  UChar32 v15;
  int v16;
  int v17;
  int8_t v18;
  char v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  int v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  __int16 v42;
  unsigned __int16 *v43;
  uint64_t v44;
  __int16 v45;

  v7 = a2;
  v8 = a1;
  if ((a5 & 0xB) != 1)
  {
    if ((a5 & 0xB) != 0)
    {
      if ((a5 & 8) != 0)
      {
        LODWORD(v22) = 0;
        v23 = a2 + 1;
        do
        {
          v25 = *v8++;
          v24 = v25;
          v26 = v25 - 8239;
          v27 = (v25 & 0xFFFC) == 0x200C || v26 >= 0xFFFFFFFB;
          v28 = v24 - 8298;
          if (v27 || v28 >= 0xFFFFFFFC)
            v22 = v22;
          else
            v22 = (v22 + 1);
          --v23;
        }
        while (v23 > 1);
        v8 -= (int)a2;
      }
      else
      {
        v22 = a2;
      }
      if ((int)v22 <= a4)
      {
        do
        {
          v30 = v7;
          LODWORD(v7) = v7 - 1;
          v31 = v8[(int)v7];
          if (v30 > 1 && (v31 & 0xFC00) == 0xDC00)
          {
            v32 = v8[v30 - 2];
            v33 = (v32 & 0xFC00) == 55296;
            v34 = v31 - 56613888 + (v32 << 10);
            if (v33)
              LODWORD(v7) = v30 - 2;
            if (v33)
              v31 = v34;
          }
          if ((a5 & 1) != 0 && (int)v7 >= 1)
          {
            while (((1 << u_charType(v31)) & 0x1C0) != 0)
            {
              v35 = v7 - 1;
              v31 = v8[(v7 - 1)];
              if ((v31 & 0xFC00) == 0xDC00)
              {
                if ((int)v7 < 2)
                  goto LABEL_67;
                v36 = v8[(v7 - 2)];
                v37 = (v36 & 0xFC00) == 55296;
                v38 = v31 - 56613888 + (v36 << 10);
                if (v37)
                  v35 = v7 - 2;
                if (v37)
                  v31 = v38;
              }
              LODWORD(v7) = v35;
              if (v35 <= 0)
              {
LABEL_67:
                LODWORD(v7) = 0;
                break;
              }
            }
          }
          if ((a5 & 8) == 0 || v31 >> 2 != 2051 && v31 - 8234 >= 5 && v31 - 8294 >= 4)
          {
            if ((a5 & 2) != 0)
            {
              v40 = u_charMirror(v31);
              if (HIWORD(v40))
              {
                v42 = v40 & 0x3FF | 0xDC00;
                v40 = (v40 >> 10) - 10304;
                a3[1] = v42;
                v41 = 2;
              }
              else
              {
                v41 = 1;
              }
              *a3 = v40;
              a3 += v41;
              v39 = v41 + v7;
            }
            else
            {
              v39 = v7;
            }
            if (v39 < v30)
            {
              v43 = &v8[v39];
              v44 = v30 - (uint64_t)v39;
              do
              {
                v45 = *v43++;
                *a3++ = v45;
                --v44;
              }
              while (v44);
            }
          }
        }
        while ((int)v7 >= 1);
        return v22;
      }
      v7 = v22;
    }
    else if (a4 >= (int)a2)
    {
      v9 = a2;
      do
      {
        v10 = v9 - 1;
        v11 = v9 - 1;
        if (v9 > 1 && (a1[v10] & 0xFC00) == 0xDC00)
        {
          LODWORD(v11) = v9 - 2;
          if ((a1[v9 - 2] & 0xFC00) == 0xD800)
            v11 = v11;
          else
            v11 = v10;
          v10 = v11;
        }
        do
          *a3++ = a1[v11++];
        while (v11 < v9);
        v9 = v10;
      }
      while (v10 >= 1);
      return v7;
    }
LABEL_46:
    *a6 = 15;
    return v7;
  }
  if (a4 < (int)a2)
    goto LABEL_46;
  v12 = a2;
  do
  {
    v13 = v12;
    while (1)
    {
      v14 = v13 - 1;
      v15 = v8[v13 - 1];
      if (v13 <= 1 || (v15 & 0xFC00) != 0xDC00)
        break;
      v16 = v13 - 2;
      v17 = v8[v13 - 2];
      --v13;
      if ((v17 & 0xFC00) == 0xD800)
      {
        v15 = v15 - 56613888 + (v17 << 10);
        v14 = v16;
        break;
      }
LABEL_23:
      v18 = u_charType(v15);
      v19 = 1;
      if (((1 << v18) & 0x1C0) == 0)
      {
        v14 = v13;
        goto LABEL_26;
      }
    }
    if (v14 >= 1)
    {
      v13 = v14;
      goto LABEL_23;
    }
    v19 = 0;
LABEL_26:
    v20 = v14;
    do
      *a3++ = v8[v20++];
    while (v20 < v12);
    v12 = v14;
  }
  while ((v19 & 1) != 0);
  return v7;
}

uint64_t ubidi_writeReordered(uint64_t a1, unint64_t a2, int a3, char a4, int *a5)
{
  uint64_t result;
  unint64_t v8;
  int v10;
  int v13;
  int v14;
  char v15;
  int v16;
  int v17;
  char v18;
  int v19;
  unsigned int v20;
  char v21;
  _WORD *v22;
  unsigned int v23;
  unsigned __int16 *v24;
  int v25;
  unsigned int v26;
  char v27;
  _WORD *v28;
  unsigned int VisualRun;
  unsigned __int16 *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  __int16 *v34;
  unsigned int v35;
  unsigned __int16 *v36;
  int v37;
  __int16 v38;
  __int16 v39;
  BOOL v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  int v44;
  __int16 *v45;
  unsigned int v46;
  unsigned __int16 *v47;
  char v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;

  if (!a5 || *a5 > 0)
    return 0;
  if (!a1
    || (v8 = *(_QWORD *)(a1 + 8)) == 0
    || (v10 = *(_DWORD *)(a1 + 20), (v10 | a3) < 0)
    || !a2 && a3 >= 1
    || a2 && (v8 >= a2 && v8 < a2 + 2 * a3 || v8 <= a2 && v8 + 2 * *(int *)(a1 + 16) > a2))
  {
    result = 0;
    *a5 = 1;
    return result;
  }
  if (!v10)
    return u_terminateUChars(a2, a3, 0, a5);
  v13 = ubidi_countRuns(a1, a5);
  if (*a5 > 0)
    return 0;
  v14 = v13;
  v15 = a4 & 0xF3 | 4;
  v17 = *(_DWORD *)(a1 + 148);
  v16 = *(_DWORD *)(a1 + 152);
  if ((v16 & 1) == 0)
    v15 = a4;
  v58 = 0;
  v18 = a4 & 0xF3 | 8;
  if ((v16 & 2) == 0)
    v18 = v15;
  if ((v17 - 3) >= 4)
    v18 &= ~4u;
  v57 = v18;
  v19 = a3;
  if ((v18 & 0x10) != 0)
  {
    if ((v18 & 4) == 0)
    {
      if (v13 >= 1)
      {
        v26 = v13 + 1;
        v27 = v18 & 0xFD;
        v19 = a3;
        v28 = (_WORD *)a2;
        do
        {
          VisualRun = ubidi_getVisualRun((_QWORD *)a1, v26 - 2, (int *)&v58 + 1, (int *)&v58);
          v30 = (unsigned __int16 *)(v8 + 2 * SHIDWORD(v58));
          if (VisualRun)
            v31 = sub_18BC0522C(v30, v58, v28, v19, v57, a5);
          else
            v31 = sub_18BC048FC(v30, v58, v28, v19, v27, a5);
          LODWORD(v58) = v31;
          if (v28)
            v28 += v31;
          else
            v28 = 0;
          v19 -= v31;
          --v26;
        }
        while (v26 > 1);
      }
      return u_terminateUChars(a2, a3, (a3 - v19), a5);
    }
    if (v13 < 1)
      return u_terminateUChars(a2, a3, (a3 - v19), a5);
    v43 = *(_QWORD *)(a1 + 128);
    v44 = v13 + 1;
    v56 = v18 & 0xFD;
    v19 = a3;
    v45 = (__int16 *)a2;
    while (1)
    {
      v46 = ubidi_getVisualRun((_QWORD *)a1, v44 - 2, (int *)&v58 + 1, (int *)&v58);
      v47 = (unsigned __int16 *)(v8 + 2 * SHIDWORD(v58));
      if (v46)
      {
        if (((1 << *(_BYTE *)(v43 + SHIDWORD(v58))) & 0x2002) != 0)
        {
          v48 = v57;
        }
        else
        {
          v40 = __OFSUB__(v19--, 1);
          v48 = v57;
          if (v19 < 0 == v40)
            *v45++ = 8207;
        }
        v52 = sub_18BC0522C(v47, v58, v45, v19, v48, a5);
        LODWORD(v58) = v52;
        if (v45)
          v45 += v52;
        else
          v45 = 0;
        v19 -= v52;
        if (((1 << *(_BYTE *)(v43 + v52 + HIDWORD(v58) - 1)) & 0x2002) != 0)
          goto LABEL_111;
        v40 = __OFSUB__(v19--, 1);
        if (v19 < 0 != v40)
          goto LABEL_111;
        v51 = 8207;
      }
      else
      {
        v49 = v58;
        if (*(_BYTE *)(v43 + HIDWORD(v58) + (int)v58 - 1))
        {
          v40 = __OFSUB__(v19--, 1);
          if (v19 < 0 == v40)
            *v45++ = 8206;
        }
        v50 = sub_18BC048FC(v47, v49, v45, v19, v56, a5);
        LODWORD(v58) = v50;
        if (v45)
          v45 += v50;
        else
          v45 = 0;
        v19 -= v50;
        if (!*(_BYTE *)(v43 + SHIDWORD(v58)))
          goto LABEL_111;
        v40 = __OFSUB__(v19--, 1);
        if (v19 < 0 != v40)
          goto LABEL_111;
        v51 = 8206;
      }
      *v45++ = v51;
LABEL_111:
      if (--v44 <= 1)
        return u_terminateUChars(a2, a3, (a3 - v19), a5);
    }
  }
  if ((v18 & 4) == 0)
  {
    if (v13 >= 1)
    {
      v20 = 0;
      v21 = v18 & 0xFD;
      v19 = a3;
      v22 = (_WORD *)a2;
      do
      {
        v23 = ubidi_getVisualRun((_QWORD *)a1, v20, (int *)&v58 + 1, (int *)&v58);
        v24 = (unsigned __int16 *)(v8 + 2 * SHIDWORD(v58));
        if (v23)
          v25 = sub_18BC048FC(v24, v58, v22, v19, v57, a5);
        else
          v25 = sub_18BC0522C(v24, v58, v22, v19, v21, a5);
        LODWORD(v58) = v25;
        if (v22)
          v22 += v25;
        else
          v22 = 0;
        v19 -= v25;
        ++v20;
      }
      while (v14 != v20);
    }
    return u_terminateUChars(a2, a3, (a3 - v19), a5);
  }
  if (v13 >= 1)
  {
    v32 = 0;
    v33 = 8;
    v53 = v18 & 0xFD;
    v19 = a3;
    v34 = (__int16 *)a2;
    v54 = v13;
    v55 = *(_QWORD *)(a1 + 128);
    while (1)
    {
      v35 = ubidi_getVisualRun((_QWORD *)a1, v32, (int *)&v58 + 1, (int *)&v58);
      v36 = (unsigned __int16 *)(v8 + 2 * SHIDWORD(v58));
      v37 = *(_DWORD *)(*(_QWORD *)(a1 + 320) + v33) & ~(*(int *)(*(_QWORD *)(a1 + 320) + v33) >> 31);
      if (v35)
      {
        if (*(_BYTE *)(a1 + 144) && ((1 << *(_BYTE *)(v55 + HIDWORD(v58) + (int)v58 - 1)) & 0x2002) == 0)
          LOBYTE(v37) = v37 | 4;
        if ((v37 & 1) == 0)
        {
          if ((v37 & 4) != 0)
          {
            v38 = 8207;
LABEL_62:
            v40 = __OFSUB__(v19--, 1);
            if (v19 < 0 == v40)
              *v34++ = v38;
          }
          v41 = sub_18BC048FC(v36, v58, v34, v19, v57, a5);
          LODWORD(v58) = v41;
          if (v34)
            v34 += v41;
          else
            v34 = 0;
          if (*(_BYTE *)(a1 + 144) && ((1 << *(_BYTE *)(v55 + SHIDWORD(v58))) & 0x2002) == 0)
            LOBYTE(v37) = v37 | 8;
          goto LABEL_80;
        }
        v38 = 8206;
        goto LABEL_62;
      }
      if (*(_BYTE *)(a1 + 144))
        LOBYTE(v37) = v37 | (*(_BYTE *)(v55 + SHIDWORD(v58)) != 0);
      if ((v37 & 1) != 0)
        break;
      if ((v37 & 4) != 0)
      {
        v39 = 8207;
        goto LABEL_72;
      }
LABEL_74:
      v41 = sub_18BC0522C(v36, v58, v34, v19, v53, a5);
      LODWORD(v58) = v41;
      if (v34)
        v34 += v41;
      else
        v34 = 0;
      if (*(_BYTE *)(a1 + 144) && *(_BYTE *)(v55 + v41 + HIDWORD(v58) - 1))
        LOBYTE(v37) = v37 | 2;
LABEL_80:
      v19 -= v41;
      if ((v37 & 2) != 0)
      {
        v42 = 8206;
LABEL_84:
        v40 = __OFSUB__(v19--, 1);
        if (v19 < 0 == v40)
          *v34++ = v42;
        goto LABEL_86;
      }
      if ((v37 & 8) != 0)
      {
        v42 = 8207;
        goto LABEL_84;
      }
LABEL_86:
      ++v32;
      v33 += 12;
      if (v54 == v32)
        return u_terminateUChars(a2, a3, (a3 - v19), a5);
    }
    v39 = 8206;
LABEL_72:
    v40 = __OFSUB__(v19--, 1);
    if (v19 < 0 == v40)
      *v34++ = v39;
    goto LABEL_74;
  }
  return u_terminateUChars(a2, a3, (a3 - v19), a5);
}

uint64_t sub_18BC0522C(unsigned __int16 *a1, uint64_t a2, _WORD *a3, int a4, char a5, _DWORD *a6)
{
  uint64_t v7;
  unsigned __int16 *v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned __int16 *v12;
  __int16 v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  int v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  int v24;
  unsigned int v25;
  unsigned int v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  UChar32 v39;
  int v41;
  BOOL v42;
  UChar32 v43;
  unsigned int v44;
  int v45;
  int v46;
  uint64_t v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  unsigned int v57;
  BOOL v58;
  unsigned int v59;
  int v61;

  v7 = a2;
  v8 = a1;
  v9 = a5 & 0xA;
  if ((a5 & 0xA) == 0)
  {
    if (a4 >= (int)a2)
    {
      v22 = a2 + 1;
      do
      {
        v23 = *v8++;
        *a3++ = v23;
        --v22;
      }
      while (v22 > 1);
      return v7;
    }
LABEL_23:
    *a6 = 15;
    return v7;
  }
  if (v9 == 2)
  {
    if (a4 >= (int)a2)
    {
      v36 = 0;
      v37 = 0;
      do
      {
        v38 = v36 + 1;
        v39 = v8[v36];
        if ((v39 & 0xFC00) != 0xD800 || (_DWORD)v38 == (_DWORD)v7)
        {
          ++v36;
        }
        else
        {
          v41 = v8[v38];
          v42 = (v41 & 0xFC00) == 56320;
          v43 = (v39 << 10) - 56613888 + v41;
          if (v42)
            v36 += 2;
          else
            ++v36;
          if (v42)
            v39 = v43;
        }
        v44 = u_charMirror(v39);
        if (HIWORD(v44))
        {
          v46 = v37 + 1;
          a3[v37] = (v44 >> 10) - 10304;
          v45 = 2;
          LOWORD(v44) = v44 & 0x3FF | 0xDC00;
        }
        else
        {
          v45 = 1;
          v46 = v37;
        }
        v37 += v45;
        a3[v46] = v44;
      }
      while (v36 < (int)v7);
      return v7;
    }
    goto LABEL_23;
  }
  if (v9 != 8)
  {
    v21 = 0;
    v24 = a4;
    while (1)
    {
      v25 = *v8;
      if ((v25 & 0xFC00) != 0xD800 || (_DWORD)v7 == 1)
      {
        v27 = 1;
      }
      else
      {
        v28 = v8[1];
        v29 = (v28 & 0xFC00) == 56320;
        v30 = (v25 << 10) - 56613888 + v28;
        if ((v28 & 0xFC00) == 0xDC00)
          v27 = 2;
        else
          v27 = 1;
        if (v29)
          v25 = v30;
      }
      v8 += v27;
      LODWORD(v7) = v7 - v27;
      if (v25 >> 2 != 2051 && v25 - 8234 >= 5 && v25 - 8294 >= 4)
      {
        v24 -= v27;
        if (v24 < 0)
        {
          *a6 = 15;
          if ((int)v7 >= 1)
          {
            v54 = v7 + 1;
            do
            {
              v56 = *v8++;
              v55 = v56;
              v57 = v56 - 8239;
              v58 = (v56 & 0xFFFC) == 0x200C || v57 >= 0xFFFFFFFB;
              v59 = v55 - 8298;
              v61 = !v58 && v59 < 0xFFFFFFFC;
              v24 -= v61;
              --v54;
            }
            while (v54 > 1);
          }
          return (a4 - v24);
        }
        v33 = u_charMirror(v25);
        if (HIWORD(v33))
        {
          v35 = v21 + 1;
          a3[(int)v21] = (v33 >> 10) - 10304;
          v34 = 2;
          LOWORD(v33) = v33 & 0x3FF | 0xDC00;
        }
        else
        {
          v34 = 1;
          v35 = v21;
        }
        v21 = (v21 + v34);
        a3[v35] = v33;
      }
      if ((int)v7 <= 0)
        return v21;
    }
  }
  v10 = a2 + 1;
  v11 = a4;
  v12 = a1;
  while (1)
  {
    v14 = *v12++;
    v13 = v14;
    v15 = v14 - 8234;
    v16 = v14 - 8294;
    v17 = (v14 & 0xFFFC) != 0x200C && v15 >= 5;
    if (v17 && v16 >= 4)
      break;
    v19 = v11;
LABEL_15:
    --v10;
    v8 = v12;
    v20 = __OFSUB__((_DWORD)v7, 1);
    LODWORD(v7) = v7 - 1;
    if (((int)v7 < 0) ^ v20 | ((_DWORD)v7 == 0))
      return (a4 - v19);
  }
  v19 = v11 - 1;
  if (v11 > 0)
  {
    *a3++ = v13;
    --v11;
    goto LABEL_15;
  }
  *a6 = 15;
  if ((int)v7 >= 2)
  {
    v48 = 1;
    do
    {
      v49 = v8[v48];
      v50 = (v49 & 0xFFFC) == 0x200C || (v49 - 8239) >= 0xFFFFFFFB;
      v51 = v49 - 8298;
      v53 = !v50 && v51 < 0xFFFFFFFC;
      v19 -= v53;
      ++v48;
      --v10;
    }
    while (v10 > 2);
  }
  return (a4 - v19);
}

char *ubrk_open(int a1, const char *a2, const UChar *a3, int a4, const icu::Locale *a5)
{
  UErrorCode *v8;
  UErrorCode *v9;
  char *CharacterInstance;
  UErrorCode *v11;
  UErrorCode *v12;
  UErrorCode *v13;
  UErrorCode *v14;
  char *v15;
  int v16;
  UErrorCode *v17;
  UErrorCode *v18;
  UErrorCode *v19;
  UErrorCode *v20;
  UText v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 > 0)
    return 0;
  switch(a1)
  {
    case 0:
      icu::Locale::Locale((icu::Locale *)&v22, a2, 0, 0, 0);
      CharacterInstance = icu::BreakIterator::createCharacterInstance((char **)&v22, a5, v8, v9);
      goto LABEL_9;
    case 1:
      icu::Locale::Locale((icu::Locale *)&v22, a2, 0, 0, 0);
      CharacterInstance = icu::BreakIterator::createWordInstance((char **)&v22, a5, v17, v18);
      goto LABEL_9;
    case 2:
      icu::Locale::Locale((icu::Locale *)&v22, a2, 0, 0, 0);
      CharacterInstance = icu::BreakIterator::createLineInstance((char **)&v22, a5, v11, v12);
      goto LABEL_9;
    case 3:
      icu::Locale::Locale((icu::Locale *)&v22, a2, 0, 0, 0);
      CharacterInstance = icu::BreakIterator::createSentenceInstance((char **)&v22, a5, v19, v20);
      goto LABEL_9;
    case 4:
      icu::Locale::Locale((icu::Locale *)&v22, a2, 0, 0, 0);
      CharacterInstance = icu::BreakIterator::createTitleInstance((char **)&v22, a5, v13, v14);
LABEL_9:
      v15 = CharacterInstance;
      icu::Locale::~Locale((icu::Locale *)&v22);
      if (*(int *)a5 >= 1)
        return 0;
      if (v15)
      {
        if (a3)
        {
          memset(&v22, 0, sizeof(v22));
          v22.magic = 878368812;
          v22.sizeOfStruct = 144;
          utext_openUChars(&v22, a3, a4, (UErrorCode *)a5);
          (*(void (**)(char *, UText *, const icu::Locale *))(*(_QWORD *)v15 + 64))(v15, &v22, a5);
        }
      }
      else
      {
        v16 = 7;
LABEL_16:
        *(_DWORD *)a5 = v16;
      }
      break;
    default:
      v15 = 0;
      v16 = 1;
      goto LABEL_16;
  }
  return v15;
}

uint64_t ubrk_setText(uint64_t a1, const UChar *a2, int a3, UErrorCode *a4)
{
  UText v7;

  memset(&v7, 0, sizeof(v7));
  v7.magic = 878368812;
  v7.sizeOfStruct = 144;
  utext_openUChars(&v7, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, UText *, UErrorCode *))(*(_QWORD *)a1 + 64))(a1, &v7, a4);
}

icu::RuleBasedBreakIterator *ubrk_openRules(uint64_t a1, uint64_t a2, const UChar *a3, int a4, uint64_t a5, UErrorCode *a6)
{
  icu::RuleBasedBreakIterator *v7;
  UChar **v11;
  icu::RuleBasedBreakIterator *v12;
  void *v13;
  UText v15;
  _OWORD v16[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a6 || *(int *)a6 > 0)
    return 0;
  memset(v16, 0, sizeof(v16));
  v11 = (UChar **)icu::UnicodeString::UnicodeString((uint64_t)v16, a1, a2);
  v12 = sub_18BBEBC04(v11, a5, a6);
  v13 = (void *)*(unsigned int *)a6;
  if ((int)v13 <= 0)
  {
    v7 = v12;
    if (a3)
    {
      memset(&v15, 0, sizeof(v15));
      v15.magic = 878368812;
      v15.sizeOfStruct = 144;
      utext_openUChars(&v15, a3, a4, a6);
      (*(void (**)(icu::RuleBasedBreakIterator *, UText *, UErrorCode *))(*(_QWORD *)v7 + 64))(v7, &v15, a6);
    }
  }
  else
  {
    v7 = 0;
  }
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v16);
  return v7;
}

icu::RuleBasedBreakIterator *ubrk_openBinaryRules(const unsigned __int8 *a1, unint64_t a2, const UChar *a3, int a4, UErrorCode *a5)
{
  uint64_t *v5;
  icu::RuleBasedBreakIterator *v6;
  unsigned int v9;
  icu::RuleBasedBreakIterator *v13;
  int v14;
  UText v15;

  v5 = (uint64_t *)*(unsigned int *)a5;
  if ((int)v5 > 0)
    return 0;
  v9 = a2;
  if ((a2 & 0x80000000) != 0)
  {
    v6 = 0;
    v14 = 1;
    goto LABEL_11;
  }
  v13 = (icu::RuleBasedBreakIterator *)icu::UMemory::operator new(v5, (icu::UMemory *)0x310, a2);
  if (!v13)
  {
    if (*(int *)a5 > 0)
      return 0;
    v6 = 0;
    v14 = 7;
LABEL_11:
    *a5 = v14;
    return v6;
  }
  v6 = v13;
  icu::RuleBasedBreakIterator::RuleBasedBreakIterator(v13, a1, v9, a5);
  if (*(int *)a5 > 0)
  {
    (*(void (**)(icu::RuleBasedBreakIterator *))(*(_QWORD *)v6 + 8))(v6);
    return 0;
  }
  if (a3)
  {
    memset(&v15, 0, sizeof(v15));
    v15.magic = 878368812;
    v15.sizeOfStruct = 144;
    utext_openUChars(&v15, a3, a4, a5);
    (*(void (**)(icu::RuleBasedBreakIterator *, UText *, UErrorCode *))(*(_QWORD *)v6 + 64))(v6, &v15, a5);
  }
  return v6;
}

uint64_t ubrk_safeClone(uint64_t result, uint64_t a2, int *a3, int *a4)
{
  int v6;
  int v7;
  BOOL v8;

  if (!a4)
    return 0;
  if (*a4 > 0)
    return 0;
  if (!result)
  {
    v7 = 1;
LABEL_18:
    *a4 = v7;
    return result;
  }
  if (a3)
  {
    v6 = *a3;
    *a3 = 1;
    if (!v6)
      return 0;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  if (result)
    v7 = -126;
  else
    v7 = 7;
  if (result)
    v8 = a3 == 0;
  else
    v8 = 0;
  if (!v8)
    goto LABEL_18;
  return result;
}

uint64_t ubrk_clone(uint64_t a1, int *a2)
{
  uint64_t result;
  int v4;

  if (!a2)
    return 0;
  if (*a2 > 0)
    return 0;
  if (a1)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    if (result)
      return result;
    v4 = 7;
  }
  else
  {
    v4 = 1;
  }
  result = 0;
  *a2 = v4;
  return result;
}

uint64_t ubrk_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ubrk_setLineWordOpts(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t ubrk_setUText(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t ubrk_current(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
}

uint64_t ubrk_next(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t ubrk_previous(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
}

uint64_t ubrk_first(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
}

uint64_t ubrk_last(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

uint64_t ubrk_preceding(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
}

uint64_t ubrk_following(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
}

uint64_t ubrk_isBoundary(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

uint64_t ubrk_getRuleStatus(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
}

uint64_t ubrk_getRuleStatusVec(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
}

uint64_t ubrk_getLocaleByType(uint64_t a1, int a2, int *a3)
{
  if (a1)
    return icu::BreakIterator::getLocaleID(a1, a2, a3);
  if (*a3 <= 0)
    *a3 = 1;
  return 0;
}

uint64_t ubrk_refreshUText(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
}

uint64_t ubrk_getBinaryRules(const void *a1, void *a2, unsigned int a3, int *a4)
{
  uint64_t v4;
  BOOL v8;
  int v9;
  void *v10;
  const void *v11;
  int v12;
  size_t __n;

  if (*a4 <= 0)
  {
    if (a2)
      v8 = 1;
    else
      v8 = (int)a3 <= 0;
    v9 = !v8;
    if ((a3 & 0x80000000) != 0
      || v9
      || !a1
    {
      v4 = 0;
      v12 = 1;
    }
    else
    {
      LODWORD(__n) = 0;
      v11 = (const void *)(*(uint64_t (**)(void *, size_t *))(*(_QWORD *)v10 + 200))(v10, &__n);
      v4 = __n;
      if ((__n & 0x80000000) != 0)
      {
        v4 = 0;
        v12 = 8;
      }
      else
      {
        if (!a2)
          return v4;
        if (__n <= a3)
        {
          memcpy(a2, v11, __n);
          return v4;
        }
        v12 = 15;
      }
    }
    *a4 = v12;
    return v4;
  }
  return 0;
}

uint64_t sub_18BC05CC8(uint64_t result, int *a2)
{
  if (*a2 <= 0)
    return utrie2_enum((uint64_t)&off_1E224CA88, 0, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))sub_18BC05CF4, result);
  return result;
}

uint64_t sub_18BC05CF4(uint64_t a1)
{
  (*(void (**)(_QWORD))(a1 + 8))(*(_QWORD *)a1);
  return 1;
}

void *ucase_getSingleton(_DWORD *a1, _DWORD *a2)
{
  *a1 = 1664;
  *a2 = 370;
  return &unk_1E224CA68;
}

_UNKNOWN **sub_18BC05D2C()
{
  return &off_1E224CA88;
}

uint64_t ucase_tolower(uint64_t result)
{
  unsigned int v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  _WORD *v6;
  __int16 v7;
  unsigned __int16 *v8;
  __int16 v9;
  uint64_t v10;
  int v11;
  int v12;

  v1 = result >> 11;
  if (result >> 11 > 0x1A)
  {
    if (WORD1(result))
    {
      if (WORD1(result) > 0x10u)
      {
        v4 = 3540;
        goto LABEL_14;
      }
      if (v1 > 0x1C0)
      {
        v4 = 13156;
        goto LABEL_14;
      }
      v2 = ((result >> 5) & 0x3F) + word_18BDE9618[v1 + 2080];
    }
    else
    {
      if (result >> 10 >= 0x37)
        v3 = 0;
      else
        v3 = 320;
      v2 = v3 + (result >> 5);
    }
  }
  else
  {
    v2 = result >> 5;
  }
  v4 = (result & 0x1F) + 4 * word_18BDE9618[v2];
LABEL_14:
  v5 = word_18BDE9618[v4];
  if ((v5 & 8) != 0)
  {
    v6 = (_WORD *)((char *)&unk_18BDE8634 + ((v5 >> 3) & 0x1FFE));
    v9 = *v6;
    v8 = v6 + 1;
    v7 = v9;
    if ((v5 & 2) != 0 && (v7 & 0x10) != 0)
    {
      v10 = byte_18BDE7ED1[v7 & 0xF];
      if ((v7 & 0x100) != 0)
        v11 = v8[2 * v10 + 1] | (v8[2 * v10] << 16);
      else
        v11 = v8[v10];
      if ((v7 & 0x400) != 0)
        v12 = -v11;
      else
        v12 = v11;
      return (v12 + result);
    }
    else if ((v7 & 1) != 0)
    {
      if ((v7 & 0x100) != 0)
        return *(unsigned __int16 *)((char *)&unk_18BDE8634 + ((v5 >> 3) & 0x1FFE) + 4) | (*(unsigned __int16 *)((char *)&unk_18BDE8634 + ((v5 >> 3) & 0x1FFE) + 2) << 16);
      else
        return *v8;
    }
  }
  else if ((v5 & 2) != 0)
  {
    return (result + ((__int16)v5 >> 7));
  }
  return result;
}

uint64_t ucase_toupper(uint64_t result)
{
  unsigned int v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  __int16 *v6;
  __int16 v7;
  _WORD *v8;
  __int16 v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  v1 = result >> 11;
  if (result >> 11 > 0x1A)
  {
    if (WORD1(result))
    {
      if (WORD1(result) > 0x10u)
      {
        v4 = 3540;
        goto LABEL_14;
      }
      if (v1 > 0x1C0)
      {
        v4 = 13156;
        goto LABEL_14;
      }
      v2 = ((result >> 5) & 0x3F) + word_18BDE9618[v1 + 2080];
    }
    else
    {
      if (result >> 10 >= 0x37)
        v3 = 0;
      else
        v3 = 320;
      v2 = v3 + (result >> 5);
    }
  }
  else
  {
    v2 = result >> 5;
  }
  v4 = (result & 0x1F) + 4 * word_18BDE9618[v2];
LABEL_14:
  v5 = word_18BDE9618[v4];
  if ((v5 & 8) != 0)
  {
    v6 = (__int16 *)((char *)&unk_18BDE8634 + ((v5 >> 3) & 0x1FFE));
    v9 = *v6;
    v8 = v6 + 1;
    v7 = v9;
    v10 = v9 & 0x10;
    if ((v5 & 3) != 1 || v10 == 0)
    {
      if ((v7 & 4) != 0)
      {
        v12 = byte_18BDE7ED1[v7 & 3];
        if ((v7 & 0x100) != 0)
          return (unsigned __int16)v8[2 * v12 + 1] | ((unsigned __int16)v8[2 * v12] << 16);
        else
          return (unsigned __int16)v8[v12];
      }
    }
    else
    {
      v13 = byte_18BDE7ED1[v7 & 0xF];
      if ((v7 & 0x100) != 0)
        v14 = (unsigned __int16)v8[2 * v13 + 1] | ((unsigned __int16)v8[2 * v13] << 16);
      else
        v14 = (unsigned __int16)v8[v13];
      if ((v7 & 0x400) != 0)
        v15 = -v14;
      else
        v15 = v14;
      return (v15 + result);
    }
  }
  else if ((v5 & 3) == 1)
  {
    return (result + ((__int16)v5 >> 7));
  }
  return result;
}

uint64_t ucase_totitle(uint64_t result)
{
  unsigned int v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int16 *v6;
  int v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;

  v1 = result >> 11;
  if (result >> 11 > 0x1A)
  {
    if (WORD1(result))
    {
      if (WORD1(result) > 0x10u)
      {
        v4 = 3540;
        goto LABEL_14;
      }
      if (v1 > 0x1C0)
      {
        v4 = 13156;
        goto LABEL_14;
      }
      v2 = ((result >> 5) & 0x3F) + word_18BDE9618[v1 + 2080];
    }
    else
    {
      if (result >> 10 >= 0x37)
        v3 = 0;
      else
        v3 = 320;
      v2 = v3 + (result >> 5);
    }
  }
  else
  {
    v2 = result >> 5;
  }
  v4 = (result & 0x1F) + 4 * word_18BDE9618[v2];
LABEL_14:
  v5 = word_18BDE9618[v4];
  if ((v5 & 8) != 0)
  {
    v6 = (unsigned __int16 *)((char *)&unk_18BDE8634 + ((v5 >> 3) & 0x1FFE));
    v9 = *v6;
    v8 = v6 + 1;
    v7 = v9;
    v10 = v9 & 0x10;
    if ((v5 & 3) != 1 || v10 == 0)
    {
      if ((v7 & 8) != 0)
      {
        v12 = 3;
      }
      else
      {
        if ((v7 & 4) == 0)
          return result;
        v12 = 2;
      }
      v15 = byte_18BDE7ED1[~(-1 << v12) & v7];
      if ((v7 & 0x100) != 0)
        return v8[2 * v15 + 1] | (v8[2 * v15] << 16);
      else
        return v8[v15];
    }
    else
    {
      v13 = byte_18BDE7ED1[v7 & 0xF];
      if ((v7 & 0x100) != 0)
        v14 = v8[2 * v13 + 1] | (v8[2 * v13] << 16);
      else
        v14 = v8[v13];
      if ((v7 & 0x400) != 0)
        v16 = -v14;
      else
        v16 = v14;
      return (v16 + result);
    }
  }
  else if ((v5 & 3) == 1)
  {
    return (result + ((__int16)v5 >> 7));
  }
  return result;
}

uint64_t sub_18BC060CC(uint64_t result, _QWORD *a2)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  __int16 *v13;
  unsigned __int16 v14;
  __int16 *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int16 *v27;
  uint64_t v28;
  __int16 *v29;
  __int16 v30;
  uint64_t v31;
  __int16 *v32;
  __int16 *v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  v3 = result;
  v4 = result >> 11;
  if (result >> 11 > 0x1A)
  {
    if (WORD1(result))
    {
      if (WORD1(result) > 0x10u)
      {
        v7 = 3540;
        goto LABEL_14;
      }
      if (v4 > 0x1C0)
      {
        v7 = 13156;
        goto LABEL_14;
      }
      v5 = ((result >> 5) & 0x3F) + word_18BDE9618[v4 + 2080];
    }
    else
    {
      if (result >> 10 >= 0x37)
        v6 = 0;
      else
        v6 = 320;
      v5 = v6 + (result >> 5);
    }
  }
  else
  {
    v5 = result >> 5;
  }
  v7 = (result & 0x1F) + 4 * word_18BDE9618[v5];
LABEL_14:
  v8 = word_18BDE9618[v7];
  if ((v8 & 8) != 0)
  {
    v13 = (__int16 *)((char *)&unk_18BDE8634 + ((v8 >> 3) & 0x1FFE));
    v16 = *v13;
    v15 = v13 + 1;
    v14 = v16;
    if (v16 < 0)
    {
      if ((_DWORD)result == 304)
        return ((uint64_t (*)(_QWORD, void *, uint64_t))a2[3])(*a2, &unk_18BDE7FD2, 2);
      if ((_DWORD)result == 73)
      {
        v10 = *a2;
        v11 = (uint64_t (*)(uint64_t, uint64_t))a2[1];
        v12 = 105;
        return v11(v10, v12);
      }
    }
    else
    {
      if ((_DWORD)result == 305)
        return result;
      if ((_DWORD)result == 105)
      {
        v10 = *a2;
        v11 = (uint64_t (*)(uint64_t, uint64_t))a2[1];
        v12 = 73;
        return v11(v10, v12);
      }
    }
    v17 = 0;
    v18 = v14;
    v19 = v14;
    do
    {
      if (((1 << v17) & v19) != 0)
      {
        v20 = byte_18BDE7ED1[((1 << v17) - 1) & v18];
        if ((v19 & 0x100) != 0)
          v21 = (unsigned __int16)v15[2 * v20 + 1] | ((unsigned __int16)v15[2 * v20] << 16);
        else
          v21 = (unsigned __int16)v15[v20];
        result = ((uint64_t (*)(_QWORD, uint64_t))a2[1])(*a2, v21);
      }
      ++v17;
    }
    while (v17 != 4);
    if ((v19 & 0x10) != 0)
    {
      v22 = byte_18BDE7ED1[v18 & 0xF];
      if ((v19 & 0x100) != 0)
        v23 = (unsigned __int16)v15[2 * v22 + 1] | ((unsigned __int16)v15[2 * v22] << 16);
      else
        v23 = (unsigned __int16)v15[v22];
      if ((v19 & 0x400) != 0)
        v23 = -v23;
      result = ((uint64_t (*)(_QWORD, _QWORD))a2[1])(*a2, (v23 + v3));
    }
    if ((v19 & 0x40) != 0)
    {
      v26 = byte_18BDE7ED1[v18 & 0x3F];
      v27 = &v15[v26];
      v28 = (uint64_t)&v15[2 * v26 + 1];
      if ((v19 & 0x100) != 0)
        v29 = (__int16 *)v28;
      else
        v29 = v27;
      v30 = *v29;
      v24 = (uint64_t)(v29 + 1);
      v25 = v30 & 0xF;
      if ((v19 & 0x80) == 0)
      {
LABEL_55:
        if (v25)
        {
          v36 = 0;
          do
          {
            v37 = v36 + 1;
            v38 = *(unsigned __int16 *)(v24 + 2 * v36);
            if ((v38 & 0xFC00) == 0xD800)
            {
              v36 += 2;
              v38 = *(unsigned __int16 *)(v24 + 2 * v37) + ((_DWORD)v38 << 10) - 56613888;
            }
            else
            {
              ++v36;
            }
            result = ((uint64_t (*)(_QWORD, uint64_t))a2[1])(*a2, v38);
          }
          while (v36 < v25);
        }
        return result;
      }
    }
    else
    {
      v24 = 0;
      v25 = 0;
      if ((v19 & 0x80) == 0)
        goto LABEL_55;
    }
    v31 = byte_18BDE7ED1[v18 & 0x7F];
    v32 = &v15[v31];
    v33 = &v15[2 * v31 + 1];
    if ((v19 & 0x100) == 0)
      v33 = v32;
    v34 = (unsigned __int16)*v33;
    v35 = (uint64_t)&v33[(v34 & 0xF) + 1];
    if (v34 >> 4)
    {
      result = ((uint64_t (*)(_QWORD, uint64_t, _QWORD))a2[3])(*a2, v35, v34 >> 4);
      v35 += 2 * (v34 >> 4);
    }
    v24 = v35 + 2 * ((v34 >> 8) & 0xF) + ((v34 >> 11) & 0x1E);
    goto LABEL_55;
  }
  if (v8 >= 0x80 && (v8 & 3) != 0)
  {
    v10 = *a2;
    v11 = (uint64_t (*)(uint64_t, uint64_t))a2[1];
    v12 = (v3 + ((__int16)v8 >> 7));
    return v11(v10, v12);
  }
  return result;
}

uint64_t sub_18BC063C4(uint64_t result, _QWORD *a2)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  __int16 *v13;
  unsigned __int16 v14;
  __int16 *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int16 *v25;
  unint64_t v26;
  __int16 v27;
  int v28;
  __int16 *v29;
  __int16 *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;

  v3 = result;
  v4 = result >> 11;
  if (result >> 11 > 0x1A)
  {
    if (WORD1(result))
    {
      if (WORD1(result) > 0x10u)
      {
        v7 = 3540;
        goto LABEL_14;
      }
      if (v4 > 0x1C0)
      {
        v7 = 13156;
        goto LABEL_14;
      }
      v5 = ((result >> 5) & 0x3F) + word_18BDE9618[v4 + 2080];
    }
    else
    {
      if (result >> 10 >= 0x37)
        v6 = 0;
      else
        v6 = 320;
      v5 = v6 + (result >> 5);
    }
  }
  else
  {
    v5 = result >> 5;
  }
  v7 = (result & 0x1F) + 4 * word_18BDE9618[v5];
LABEL_14:
  v8 = word_18BDE9618[v7];
  if ((v8 & 8) == 0)
  {
    if (v8 >= 0x80 && (v8 & 3) != 0)
    {
      v10 = *a2;
      v11 = (uint64_t (*)(uint64_t, uint64_t))a2[1];
      v12 = (v3 + ((__int16)v8 >> 7));
      return v11(v10, v12);
    }
    return result;
  }
  v13 = (__int16 *)((char *)&unk_18BDE8634 + ((v8 >> 3) & 0x1FFE));
  v16 = *v13;
  v15 = v13 + 1;
  v14 = v16;
  if (v16 < 0)
  {
    if ((_DWORD)result == 304)
      return result;
    if ((_DWORD)result == 73)
    {
      v10 = *a2;
      v11 = (uint64_t (*)(uint64_t, uint64_t))a2[1];
      v12 = 105;
      return v11(v10, v12);
    }
  }
  else
  {
    if ((_DWORD)result == 305)
      return result;
    if ((_DWORD)result == 105)
    {
      v10 = *a2;
      v11 = (uint64_t (*)(uint64_t, uint64_t))a2[1];
      v12 = 73;
      return v11(v10, v12);
    }
  }
  v17 = 0;
  v18 = v14;
  v19 = v14;
  do
  {
    if (((1 << v17) & v19) != 0)
    {
      v20 = byte_18BDE7ED1[((1 << v17) - 1) & v18];
      if ((v19 & 0x100) != 0)
        v21 = (unsigned __int16)v15[2 * v20 + 1] | ((unsigned __int16)v15[2 * v20] << 16);
      else
        v21 = (unsigned __int16)v15[v20];
      result = ((uint64_t (*)(_QWORD, uint64_t))a2[1])(*a2, v21);
    }
    ++v17;
  }
  while (v17 != 4);
  if ((v19 & 0x10) != 0)
  {
    v22 = byte_18BDE7ED1[v18 & 0xF];
    if ((v19 & 0x100) != 0)
      v23 = (unsigned __int16)v15[2 * v22 + 1] | ((unsigned __int16)v15[2 * v22] << 16);
    else
      v23 = (unsigned __int16)v15[v22];
    if ((v19 & 0x400) != 0)
      v23 = -v23;
    result = ((uint64_t (*)(_QWORD, _QWORD))a2[1])(*a2, (v23 + v3));
  }
  if ((v19 & 0x40) != 0)
  {
    v24 = byte_18BDE7ED1[v18 & 0x3F];
    if ((v19 & 0x100) != 0)
    {
      v30 = &v15[2 * v24];
      v28 = v30[1] & 0xF;
      v26 = (unint64_t)(v30 + 2);
      if ((v19 & 0x80) != 0 && v28)
      {
        v29 = &v15[2 * byte_18BDE7ED1[v18 & 0x7F] + 1];
        goto LABEL_50;
      }
    }
    else
    {
      v25 = &v15[v24];
      v27 = *v25;
      v26 = (unint64_t)(v25 + 1);
      v28 = v27 & 0xF;
      if ((v19 & 0x80) != 0 && v28)
      {
        v29 = &v15[byte_18BDE7ED1[v18 & 0x7F]];
LABEL_50:
        v26 = (unint64_t)&v29[(*v29 & 0xFLL)
                                   + 1
                                   + (*v29 >> 4)
                                   + (((unint64_t)(unsigned __int16)*v29 >> 8) & 0xF)]
            + (((unint64_t)(unsigned __int16)*v29 >> 11) & 0x1E);
LABEL_52:
        v31 = 0;
        do
        {
          v32 = v31 + 1;
          v33 = *(unsigned __int16 *)(v26 + 2 * v31);
          if ((v33 & 0xFC00) == 0xD800)
          {
            v31 += 2;
            v33 = *(unsigned __int16 *)(v26 + 2 * v32) + ((_DWORD)v33 << 10) - 56613888;
          }
          else
          {
            ++v31;
          }
          result = ((uint64_t (*)(_QWORD, uint64_t))a2[1])(*a2, v33);
        }
        while (v31 < v28);
        return result;
      }
    }
    if (!v28)
      return result;
    goto LABEL_52;
  }
  return result;
}

uint64_t sub_18BC06680(unsigned __int16 *a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v5;
  int v6;
  int v7;
  int v8;
  char *v9;
  int v10;
  unsigned __int16 *v11;
  _WORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v3 = 0;
  if (a1 && (a2 - 4) >= 0xFFFFFFFE)
  {
    v5 = 0;
    v6 = 73;
LABEL_4:
    if (v6 + v5 < 0 != __OFADD__(v6, v5))
      v7 = v6 + v5 + 1;
    else
      v7 = v6 + v5;
    v8 = v7 >> 1;
    v9 = (char *)&unk_18BDE9334 + 10 * (v7 >> 1) + 10;
    v10 = a2 + 1;
    v11 = a1;
    v12 = v9;
    do
    {
      v14 = (unsigned __int16)*v12++;
      v13 = v14;
      if (!v14)
      {
        v15 = 1;
LABEL_18:
        if (v15 < 0)
          v6 = v8;
        else
          v5 = v8 + 1;
        if (v5 >= v6)
          return 0;
        goto LABEL_4;
      }
      v15 = *v11 - v13;
      if (v15)
        goto LABEL_15;
      ++v11;
      --v10;
    }
    while (v10 > 1);
    if (a2 == 3)
      goto LABEL_23;
    if (*v12)
      v15 = -1;
    else
      v15 = 0;
LABEL_15:
    if (v15)
      goto LABEL_18;
LABEL_23:
    v16 = 3;
    do
    {
      v17 = *(unsigned __int16 *)&v9[2 * v16];
      if (!*(_WORD *)&v9[2 * v16])
        break;
      v18 = v16 + 1;
      if ((v17 & 0xFC00) == 0xD800)
      {
        v16 += 2;
        v17 = *(unsigned __int16 *)&v9[2 * v18] + ((_DWORD)v17 << 10) - 56613888;
      }
      else
      {
        ++v16;
      }
      ((void (*)(_QWORD, uint64_t))a3[1])(*a3, v17);
      sub_18BC060CC(v17, a3);
    }
    while (v16 < 5);
    return 1;
  }
  return v3;
}

double icu::FullCaseFoldingIterator::FullCaseFoldingIterator(icu::FullCaseFoldingIterator *this)
{
  double result;

  *(_QWORD *)&result = 0x500000049;
  *(_OWORD *)((char *)this + 8) = xmmword_18BDE7EB0;
  *((_DWORD *)this + 6) = 3;
  *(_QWORD *)this = &unk_18BDE933E;
  return result;
}

{
  double result;

  *(_QWORD *)&result = 0x500000049;
  *(_OWORD *)((char *)this + 8) = xmmword_18BDE7EB0;
  *((_DWORD *)this + 6) = 3;
  *(_QWORD *)this = &unk_18BDE933E;
  return result;
}

uint64_t icu::FullCaseFoldingIterator::next(icu::FullCaseFoldingIterator *this, icu::UnicodeString *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  const UChar *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t result;
  const UChar *v15;

  v3 = *((int *)this + 3);
  v4 = *((_DWORD *)this + 5);
  v5 = *((int *)this + 6);
  v6 = (const UChar *)(*(_QWORD *)this + 2 * (int)v3 * v4);
  if ((int)v5 >= (int)v3 || !v6[v5])
  {
    ++v4;
    v7 = *((_DWORD *)this + 4);
    v6 += v3;
    *((_DWORD *)this + 5) = v4;
    *((_DWORD *)this + 6) = v7;
  }
  if (v4 >= *((_DWORD *)this + 2))
    return 0xFFFFFFFFLL;
  v8 = *((unsigned int *)this + 4);
  v9 = v8 & ((int)v8 >> 31);
  v10 = 2 * v8 - 2;
  while (1)
  {
    v11 = __OFSUB__((_DWORD)v8, 1);
    LODWORD(v8) = v8 - 1;
    if ((int)v8 < 0 != v11)
      break;
    v12 = *(const UChar *)((char *)v6 + v10);
    v10 -= 2;
    if (v12)
    {
      v9 = v8 + 1;
      break;
    }
  }
  v15 = v6;
  icu::UnicodeString::setTo(a2, 0, &v15, v9);
  v13 = *((int *)this + 6);
  *((_DWORD *)this + 6) = v13 + 1;
  result = v6[v13];
  if ((result & 0xFC00) == 0xD800)
  {
    *((_DWORD *)this + 6) = v13 + 2;
    return v6[(int)v13 + 1] + ((_DWORD)result << 10) - 56613888;
  }
  return result;
}

uint64_t ucase_getType(unsigned int a1)
{
  unsigned int v1;
  int v2;
  int v3;
  uint64_t v4;

  v1 = a1 >> 11;
  if (a1 >> 11 <= 0x1A)
  {
    v2 = a1 >> 5;
LABEL_13:
    v4 = (a1 & 0x1F) + 4 * word_18BDE9618[v2];
    return word_18BDE9618[v4] & 3;
  }
  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37)
      v3 = 0;
    else
      v3 = 320;
    v2 = v3 + (a1 >> 5);
    goto LABEL_13;
  }
  if (HIWORD(a1) <= 0x10u)
  {
    if (v1 <= 0x1C0)
    {
      v2 = ((a1 >> 5) & 0x3F) + word_18BDE9618[v1 + 2080];
      goto LABEL_13;
    }
    v4 = 13156;
  }
  else
  {
    v4 = 3540;
  }
  return word_18BDE9618[v4] & 3;
}

uint64_t ucase_getTypeOrIgnorable(unsigned int a1)
{
  unsigned int v1;
  int v2;
  int v3;
  uint64_t v4;

  v1 = a1 >> 11;
  if (a1 >> 11 <= 0x1A)
  {
    v2 = a1 >> 5;
LABEL_13:
    v4 = (a1 & 0x1F) + 4 * word_18BDE9618[v2];
    return word_18BDE9618[v4] & 7;
  }
  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37)
      v3 = 0;
    else
      v3 = 320;
    v2 = v3 + (a1 >> 5);
    goto LABEL_13;
  }
  if (HIWORD(a1) <= 0x10u)
  {
    if (v1 <= 0x1C0)
    {
      v2 = ((a1 >> 5) & 0x3F) + word_18BDE9618[v1 + 2080];
      goto LABEL_13;
    }
    v4 = 13156;
  }
  else
  {
    v4 = 3540;
  }
  return word_18BDE9618[v4] & 7;
}

BOOL ucase_isSoftDotted(unsigned int a1)
{
  unsigned int v1;
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;

  v1 = a1 >> 11;
  if (a1 >> 11 > 0x1A)
  {
    if (HIWORD(a1))
    {
      if (HIWORD(a1) > 0x10u)
      {
        v4 = 3540;
        goto LABEL_14;
      }
      if (v1 > 0x1C0)
      {
        v4 = 13156;
        goto LABEL_14;
      }
      v2 = ((a1 >> 5) & 0x3F) + word_18BDE9618[v1 + 2080];
    }
    else
    {
      if (a1 >> 10 >= 0x37)
        v3 = 0;
      else
        v3 = 320;
      v2 = v3 + (a1 >> 5);
    }
  }
  else
  {
    v2 = a1 >> 5;
  }
  v4 = (a1 & 0x1F) + 4 * word_18BDE9618[v2];
LABEL_14:
  v5 = word_18BDE9618[v4];
  if ((v5 & 8) != 0)
    LODWORD(v5) = *(unsigned __int16 *)((char *)&unk_18BDE8634 + ((v5 >> 3) & 0x1FFE)) >> 7;
  return (v5 & 0x60) == 32;
}

uint64_t ucase_isCaseSensitive(unsigned int a1)
{
  unsigned int v1;
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;

  v1 = a1 >> 11;
  if (a1 >> 11 > 0x1A)
  {
    if (HIWORD(a1))
    {
      if (HIWORD(a1) > 0x10u)
      {
        v4 = 3540;
        goto LABEL_14;
      }
      if (v1 > 0x1C0)
      {
        v4 = 13156;
        goto LABEL_14;
      }
      v2 = ((a1 >> 5) & 0x3F) + word_18BDE9618[v1 + 2080];
    }
    else
    {
      if (a1 >> 10 >= 0x37)
        v3 = 0;
      else
        v3 = 320;
      v2 = v3 + (a1 >> 5);
    }
  }
  else
  {
    v2 = a1 >> 5;
  }
  v4 = (a1 & 0x1F) + 4 * word_18BDE9618[v2];
LABEL_14:
  v5 = word_18BDE9618[v4];
  if ((v5 & 8) != 0)
    LODWORD(v5) = *(unsigned __int16 *)((char *)&unk_18BDE8634 + ((v5 >> 3) & 0x1FFE)) >> 11;
  else
    LOBYTE(v5) = v5 >> 4;
  return v5 & 1;
}

uint64_t sub_18BC06B5C(unsigned __int8 *a1)
{
  int v1;
  int v2;
  uint64_t result;
  int v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;

  v1 = *a1;
  if (v1 == 122)
    return 1;
  if (v1 == 101)
  {
LABEL_3:
    if ((a1[1] & 0xDF) != 0x4C)
      return 1;
    v2 = a1[2];
    if ((v2 & 0xFFFFFFDF) == 0x4C)
      v2 = a1[3];
    result = 4;
    if (!v2)
      return result;
LABEL_44:
    if (v2 == 45 || v2 == 95)
      return result;
    return 1;
  }
  if ((char)v1 < 97)
  {
    switch(*a1)
    {
      case 'E':
        goto LABEL_3;
      case 'F':
      case 'G':
      case 'I':
      case 'J':
      case 'K':
      case 'M':
        return 1;
      case 'H':
        goto LABEL_19;
      case 'L':
        goto LABEL_15;
      case 'N':
        goto LABEL_28;
      default:
        if (v1 == 65)
          goto LABEL_33;
        if (v1 == 84)
          goto LABEL_26;
        return 1;
    }
  }
  if (*a1 <= 0x6Bu)
  {
    if (v1 == 97)
    {
LABEL_33:
      if ((a1[1] & 0xDF) != 0x5A)
        return 1;
      v2 = a1[2];
      if ((v2 & 0xFFFFFFDF) == 0x45)
        v2 = a1[3];
      goto LABEL_43;
    }
    if (v1 != 104)
      return 1;
LABEL_19:
    if ((a1[1] & 0xDF) != 0x59)
      return 1;
    v2 = a1[2];
    if ((v2 & 0xFFFFFFDF) == 0x45)
      v2 = a1[3];
    result = 6;
    if (v2)
      goto LABEL_44;
  }
  else
  {
    if (v1 == 108)
    {
LABEL_15:
      v4 = a1[1];
      if ((v4 & 0xFFFFFFDF) == 0x49)
      {
        v5 = a1 + 3;
        v4 = a1[2];
      }
      else
      {
        v5 = a1 + 2;
      }
      if ((v4 & 0xFFFFFFDF) != 0x54)
        return 1;
      v2 = *v5;
      result = 3;
      if (!v2)
        return result;
      goto LABEL_44;
    }
    if (v1 != 110)
    {
      if (v1 != 116)
        return 1;
LABEL_26:
      v6 = a1[1];
      if ((v6 & 0xFFFFFFDF) == 0x55)
      {
        v7 = a1 + 3;
        v6 = a1[2];
      }
      else
      {
        v7 = a1 + 2;
      }
      if ((v6 & 0xFFFFFFDF) != 0x52)
        return 1;
      v2 = *v7;
LABEL_43:
      result = 2;
      if (!v2)
        return result;
      goto LABEL_44;
    }
LABEL_28:
    if ((a1[1] & 0xDF) != 0x4C)
      return 1;
    v2 = a1[2];
    if ((v2 & 0xFFFFFFDF) == 0x44)
      v2 = a1[3];
    result = 5;
    if (v2)
      goto LABEL_44;
  }
  return result;
}

uint64_t ucase_toFullLower(unsigned int a1, uint64_t (*a2)(uint64_t, _QWORD), uint64_t a3, _QWORD *a4, int a5)
{
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t result;
  _WORD *v17;
  __int16 v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  char v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  char i;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  int v46;

  *a4 = 0;
  v10 = a1 >> 11;
  if (a1 >> 11 > 0x1A)
  {
    if (HIWORD(a1))
    {
      if (HIWORD(a1) > 0x10u)
      {
        v13 = 3540;
        goto LABEL_14;
      }
      if (v10 > 0x1C0)
      {
        v13 = 13156;
        goto LABEL_14;
      }
      v11 = ((a1 >> 5) & 0x3F) + word_18BDE9618[v10 + 2080];
    }
    else
    {
      if (a1 >> 10 >= 0x37)
        v12 = 0;
      else
        v12 = 320;
      v11 = v12 + (a1 >> 5);
    }
  }
  else
  {
    v11 = a1 >> 5;
  }
  v13 = (a1 & 0x1F) + 4 * word_18BDE9618[v11];
LABEL_14:
  v14 = word_18BDE9618[v13];
  if ((v14 & 8) == 0)
  {
    v15 = a1;
    if ((v14 & 2) != 0)
      v15 = a1 + ((__int16)v14 >> 7);
    goto LABEL_17;
  }
  v17 = (_WORD *)((char *)&unk_18BDE8634 + ((v14 >> 3) & 0x1FFE));
  v19 = v17 + 1;
  v18 = *v17;
  if ((*v17 & 0x4000) == 0)
  {
    if ((v18 & 0x80) != 0)
    {
      v20 = byte_18BDE7ED1[v18 & 0x7F];
      v21 = &v19[v20];
      v22 = &v19[2 * v20 + 1];
      if ((*v17 & 0x100) == 0)
        v22 = v21;
      result = *v22 & 0xF;
      if ((*v22 & 0xF) != 0)
      {
        *a4 = v22 + 1;
        return result;
      }
    }
    goto LABEL_126;
  }
  if (a5 != 3)
  {
LABEL_63:
    if (a1 == 304 && a5 == 2)
      return 105;
    if (a1 == 775 && a5 == 2)
    {
      if (!a2)
      {
LABEL_126:
        if ((v14 & 2) != 0 && (v18 & 0x10) != 0)
        {
          v45 = byte_18BDE7ED1[v18 & 0xF];
          if ((v18 & 0x100) != 0)
            v46 = v19[2 * v45 + 1] | (v19[2 * v45] << 16);
          else
            v46 = v19[v45];
          if ((v18 & 0x400) != 0)
            v46 = -v46;
          return v46 + a1;
        }
        v15 = a1;
        if ((v18 & 1) != 0)
        {
          if ((v18 & 0x100) != 0)
            v15 = (unsigned __int16)v17[2] | ((unsigned __int16)v17[1] << 16);
          else
            v15 = *v19;
        }
LABEL_17:
        if (v15 == a1)
          return ~v15;
        else
          return v15;
      }
      v31 = -1;
      do
      {
        v32 = a2(a3, v31);
        if ((v32 & 0x80000000) != 0)
          break;
        if (v32 == 73)
          return 0;
        if (v32 >> 11 > 0x1A)
        {
          if (HIWORD(v32))
          {
            if (v32 > 0x10FFFF)
            {
              v35 = 3540;
              goto LABEL_80;
            }
            if (v32 > 0xE07FF)
            {
              v35 = 13156;
              goto LABEL_80;
            }
            v33 = ((v32 >> 5) & 0x3F) + word_18BDE9618[(v32 >> 11) + 2080];
          }
          else
          {
            if (v32 >> 10 >= 0x37)
              v34 = 0;
            else
              v34 = 320;
            v33 = v34 + (v32 >> 5);
          }
        }
        else
        {
          v33 = v32 >> 5;
        }
        v35 = (v32 & 0x1F) + 4 * word_18BDE9618[v33];
LABEL_80:
        v36 = word_18BDE9618[v35];
        if ((v36 & 8) != 0)
          LODWORD(v36) = *(unsigned __int16 *)((char *)&unk_18BDE8634 + ((v36 >> 3) & 0x1FFE)) >> 7;
        v31 = 0;
      }
      while ((~(_DWORD)v36 & 0x60) == 0);
    }
    if (a1 != 73 || a5 != 2)
      goto LABEL_112;
    if (!a2)
      return 305;
    for (i = 1; ; i = 0)
    {
      v38 = a2(a3, i);
      if ((v38 & 0x80000000) != 0)
        return 305;
      if (v38 == 775)
        goto LABEL_112;
      if (v38 >> 11 > 0x1A)
      {
        if (HIWORD(v38))
        {
          if (v38 > 0x10FFFF)
          {
            v41 = 3540;
            goto LABEL_103;
          }
          if (v38 > 0xE07FF)
          {
            v41 = 13156;
            goto LABEL_103;
          }
          v39 = ((v38 >> 5) & 0x3F) + word_18BDE9618[(v38 >> 11) + 2080];
        }
        else
        {
          if (v38 >> 10 >= 0x37)
            v40 = 0;
          else
            v40 = 320;
          v39 = v40 + (v38 >> 5);
        }
      }
      else
      {
        v39 = v38 >> 5;
      }
      v41 = (v38 & 0x1F) + 4 * word_18BDE9618[v39];
LABEL_103:
      v42 = word_18BDE9618[v41];
      if ((v42 & 8) != 0)
        LODWORD(v42) = *(unsigned __int16 *)((char *)&unk_18BDE8634 + ((v42 >> 3) & 0x1FFE)) >> 7;
      result = 305;
      if ((~(_DWORD)v42 & 0x60) != 0)
        return result;
    }
  }
  if ((int)a1 > 295)
  {
    if ((int)a1 <= 303)
    {
      if (a1 == 296)
        goto LABEL_143;
      if (a1 != 302)
        goto LABEL_126;
      goto LABEL_36;
    }
LABEL_112:
    if (a1 != 304)
    {
      if (a1 == 931 && !sub_18BC072E8((_BOOL8)a2, a3, 1) && sub_18BC072E8((_BOOL8)a2, a3, -1))
        return 962;
      goto LABEL_126;
    }
    goto LABEL_124;
  }
  if (a1 - 73 >= 2)
  {
    if (a1 == 204)
    {
LABEL_121:
      v43 = &unk_18BDE85E0;
      goto LABEL_144;
    }
    if (a1 == 205)
      goto LABEL_142;
    goto LABEL_126;
  }
LABEL_36:
  if (!a2)
  {
LABEL_57:
    v30 = 0;
    goto LABEL_59;
  }
  v23 = 1;
  do
  {
    v24 = a2(a3, v23);
    if ((v24 & 0x80000000) != 0)
    {
      v30 = (v24 & 0x80000000) == 0;
      goto LABEL_59;
    }
    if (v24 >> 11 > 0x1A)
    {
      if (HIWORD(v24))
      {
        if (v24 > 0x10FFFF)
        {
          v27 = 3540;
          goto LABEL_52;
        }
        if (v24 > 0xE07FF)
        {
          v27 = 13156;
          goto LABEL_52;
        }
        v25 = ((v24 >> 5) & 0x3F) + word_18BDE9618[(v24 >> 11) + 2080];
      }
      else
      {
        if (v24 >> 10 >= 0x37)
          v26 = 0;
        else
          v26 = 320;
        v25 = v26 + (v24 >> 5);
      }
    }
    else
    {
      v25 = v24 >> 5;
    }
    v27 = (v24 & 0x1F) + 4 * word_18BDE9618[v25];
LABEL_52:
    v28 = word_18BDE9618[v27];
    if ((v28 & 8) != 0)
      LODWORD(v28) = *(unsigned __int16 *)((char *)&unk_18BDE8634 + ((v28 >> 3) & 0x1FFE)) >> 7;
    v23 = 0;
    v29 = v28 & 0x60;
  }
  while (v29 == 96);
  if (v29 != 64)
    goto LABEL_57;
  v30 = 1;
LABEL_59:
  if (a1 != 204 && !v30)
  {
    if (a1 != 205)
    {
      if (a1 != 296)
        goto LABEL_63;
LABEL_143:
      v43 = &unk_18BDE85EC;
LABEL_144:
      *a4 = v43;
      return 3;
    }
LABEL_142:
    v43 = &unk_18BDE85E6;
    goto LABEL_144;
  }
  result = 0;
  if ((int)a1 > 204)
  {
    if (a1 == 205)
      goto LABEL_142;
    if (a1 == 296)
      goto LABEL_143;
    if (a1 != 302)
      return result;
    v44 = &unk_18BDE85DA;
LABEL_125:
    *a4 = v44;
    return 2;
  }
  switch(a1)
  {
    case 0x49u:
LABEL_124:
      v44 = &unk_18BDE7FD2;
      goto LABEL_125;
    case 0x4Au:
      v44 = &unk_18BDE85D6;
      goto LABEL_125;
    case 0xCCu:
      goto LABEL_121;
  }
  return result;
}

BOOL sub_18BC072E8(_BOOL8 result, uint64_t a2, char a3)
{
  uint64_t (*v4)(uint64_t, _QWORD);
  unsigned int v5;
  unsigned int TypeOrIgnorable;

  if (result)
  {
    v4 = (uint64_t (*)(uint64_t, _QWORD))result;
    while (1)
    {
      v5 = v4(a2, a3);
      if ((v5 & 0x80000000) != 0)
        break;
      TypeOrIgnorable = ucase_getTypeOrIgnorable(v5);
      a3 = 0;
      if (TypeOrIgnorable <= 3)
        return TypeOrIgnorable != 0;
    }
    return 0;
  }
  return result;
}

uint64_t ucase_toFullUpper(unsigned int a1, uint64_t (*a2)(uint64_t, _QWORD), uint64_t a3, _QWORD *a4, int a5)
{
  return sub_18BC07344(a1, a2, a3, a4, a5, 1);
}

uint64_t sub_18BC07344(unsigned int a1, uint64_t (*a2)(uint64_t, _QWORD), uint64_t a3, _QWORD *a4, int a5, int a6)
{
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  void *v36;
  void *v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;

  *a4 = 0;
  v12 = a1 >> 11;
  if (a1 >> 11 > 0x1A)
  {
    if (HIWORD(a1))
    {
      if (HIWORD(a1) > 0x10u)
      {
        v15 = 3540;
        goto LABEL_14;
      }
      if (v12 > 0x1C0)
      {
        v15 = 13156;
        goto LABEL_14;
      }
      v13 = ((a1 >> 5) & 0x3F) + word_18BDE9618[v12 + 2080];
    }
    else
    {
      if (a1 >> 10 >= 0x37)
        v14 = 0;
      else
        v14 = 320;
      v13 = v14 + (a1 >> 5);
    }
  }
  else
  {
    v13 = a1 >> 5;
  }
  v15 = (a1 & 0x1F) + 4 * word_18BDE9618[v13];
LABEL_14:
  v16 = word_18BDE9618[v15];
  if ((v16 & 8) == 0)
  {
    v17 = a1;
    if ((v16 & 3) == 1)
      v17 = a1 + ((__int16)v16 >> 7);
LABEL_17:
    if (v17 == a1)
      return ~v17;
    else
      return v17;
  }
  v19 = (v16 >> 3) & 0x1FFE;
  v21 = (char *)&unk_18BDE8634 + v19 + 2;
  v20 = *(unsigned __int16 *)((char *)&unk_18BDE8634 + v19);
  if ((v20 & 0x4000) == 0)
  {
    if ((v20 & 0x80) != 0)
    {
      v22 = byte_18BDE7ED1[v20 & 0x7F];
      v23 = &v21[2 * v22];
      v24 = (uint64_t)&v21[4 * v22 + 2];
      if ((v20 & 0x100) != 0)
        v23 = (char *)v24;
      v25 = *(unsigned __int16 *)v23;
      v26 = v25 >> 8;
      if (!a6)
        LOBYTE(v26) = v25 >> 12;
      result = v26 & 0xF;
      if ((v26 & 0xF) != 0)
      {
        v27 = (uint64_t)&v23[2 * (v25 & 0xF) + 2 * (v25 >> 4)];
        v28 = (v25 >> 8) & 0xF;
        if (a6)
          v28 = 0;
        *a4 = v27 + 2 * v28 + 2;
        return result;
      }
    }
    goto LABEL_64;
  }
  if (a1 == 105 && a5 == 2)
    return 304;
  if (a1 == 775 && a5 == 3)
  {
    if (a2)
    {
      v29 = -1;
      while (1)
      {
        v30 = a2(a3, v29);
        if ((v30 & 0x80000000) != 0)
          goto LABEL_57;
        if (v30 >> 11 > 0x1A)
        {
          if (HIWORD(v30))
          {
            if (v30 > 0x10FFFF)
            {
              v33 = 3540;
              goto LABEL_46;
            }
            if (v30 > 0xE07FF)
            {
              v33 = 13156;
              goto LABEL_46;
            }
            v31 = ((v30 >> 5) & 0x3F) + word_18BDE9618[(v30 >> 11) + 2080];
          }
          else
          {
            if (v30 >> 10 >= 0x37)
              v32 = 0;
            else
              v32 = 320;
            v31 = v32 + (v30 >> 5);
          }
        }
        else
        {
          v31 = v30 >> 5;
        }
        v33 = (v30 & 0x1F) + 4 * word_18BDE9618[v31];
LABEL_46:
        v34 = word_18BDE9618[v33];
        if ((v34 & 8) != 0)
          LODWORD(v34) = *(unsigned __int16 *)((char *)&unk_18BDE8634 + ((v34 >> 3) & 0x1FFE)) >> 7;
        v29 = 0;
        v35 = v34 & 0x60;
        if (v35 != 96)
        {
          if (v35 != 32)
            goto LABEL_57;
          return 0;
        }
      }
    }
  }
  else
  {
LABEL_57:
    if (a1 == 1415)
    {
      v36 = &unk_18BE35BB6;
      if (a6)
      {
        v37 = &unk_18BE35BAA;
      }
      else
      {
        v36 = &unk_18BE35BBC;
        v37 = &unk_18BE35BB0;
      }
      if (a5 == 6)
        v36 = v37;
      *a4 = v36;
      return 2;
    }
  }
LABEL_64:
  if ((v16 & 3) != 1 || (v20 & 0x10) == 0)
  {
    if (a6 || (v20 & 8) == 0)
    {
      if ((v20 & 4) == 0)
        return ~a1;
      v40 = 2;
    }
    else
    {
      v40 = 3;
    }
    v41 = byte_18BDE7ED1[~(-1 << v40) & v20];
    if ((v20 & 0x100) != 0)
      v17 = *(unsigned __int16 *)&v21[4 * v41 + 2] | (*(unsigned __int16 *)&v21[4 * v41] << 16);
    else
      v17 = *(unsigned __int16 *)&v21[2 * v41];
    goto LABEL_17;
  }
  v38 = byte_18BDE7ED1[v20 & 0xF];
  if ((v20 & 0x100) != 0)
    v39 = *(unsigned __int16 *)&v21[4 * v38 + 2] | (*(unsigned __int16 *)&v21[4 * v38] << 16);
  else
    v39 = *(unsigned __int16 *)&v21[2 * v38];
  if ((v20 & 0x400) != 0)
    v39 = -v39;
  return v39 + a1;
}

uint64_t ucase_toFullTitle(unsigned int a1, uint64_t (*a2)(uint64_t, _QWORD), uint64_t a3, _QWORD *a4, int a5)
{
  return sub_18BC07344(a1, a2, a3, a4, a5, 0);
}

uint64_t ucase_fold(uint64_t result, char a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  __int16 *v7;
  __int16 *v8;
  unsigned __int16 v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;

  v2 = result >> 11;
  if (result >> 11 <= 0x1A)
  {
    v3 = result >> 5;
LABEL_8:
    v5 = (result & 0x1F) + 4 * word_18BDE9618[v3];
    goto LABEL_9;
  }
  if (!WORD1(result))
  {
    if (result >> 10 >= 0x37)
      v4 = 0;
    else
      v4 = 320;
    v3 = v4 + (result >> 5);
    goto LABEL_8;
  }
  if (WORD1(result) <= 0x10u)
  {
    if (v2 <= 0x1C0)
    {
      v3 = ((result >> 5) & 0x3F) + word_18BDE9618[v2 + 2080];
      goto LABEL_8;
    }
    v5 = 13156;
  }
  else
  {
    v5 = 3540;
  }
LABEL_9:
  v6 = word_18BDE9618[v5];
  if ((v6 & 8) == 0)
  {
    if ((v6 & 2) != 0)
      return (result + ((__int16)v6 >> 7));
    return result;
  }
  v7 = (__int16 *)((char *)&unk_18BDE8634 + ((v6 >> 3) & 0x1FFE));
  v10 = *v7;
  v8 = v7 + 1;
  v9 = v10;
  if (v10 < 0)
  {
    if ((a2 & 7) != 0)
    {
      if ((_DWORD)result == 73)
        return 305;
      if ((_DWORD)result != 304)
        goto LABEL_13;
    }
    else if ((_DWORD)result != 73)
    {
      if ((_DWORD)result == 304)
        return result;
      goto LABEL_13;
    }
    return 105;
  }
LABEL_13:
  if ((v9 & 0x200) != 0)
    return result;
  if ((v6 & 2) != 0 && (v9 & 0x10) != 0)
  {
    v11 = byte_18BDE7ED1[v9 & 0xF];
    if ((v9 & 0x100) != 0)
      v12 = (unsigned __int16)v8[2 * v11 + 1] | ((unsigned __int16)v8[2 * v11] << 16);
    else
      v12 = (unsigned __int16)v8[v11];
    if ((v9 & 0x400) != 0)
      v12 = -v12;
    return (v12 + result);
  }
  else
  {
    if ((v9 & 2) != 0)
    {
      v13 = 1;
    }
    else
    {
      if ((v9 & 1) == 0)
        return result;
      v13 = 0;
    }
    v14 = byte_18BDE7ED1[~(-1 << v13) & v9];
    if ((v9 & 0x100) != 0)
      return (unsigned __int16)v8[2 * v14 + 1] | ((unsigned __int16)v8[2 * v14] << 16);
    else
      return (unsigned __int16)v8[v14];
  }
}

uint64_t ucase_toFullFolding(unsigned int a1, _QWORD *a2, char a3)
{
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int16 *v9;
  __int16 *v10;
  int v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v20;

  *a2 = 0;
  v3 = a1 >> 11;
  if (a1 >> 11 <= 0x1A)
  {
    v4 = a1 >> 5;
LABEL_8:
    v6 = (a1 & 0x1F) + 4 * word_18BDE9618[v4];
    goto LABEL_9;
  }
  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37)
      v5 = 0;
    else
      v5 = 320;
    v4 = v5 + (a1 >> 5);
    goto LABEL_8;
  }
  if (HIWORD(a1) <= 0x10u)
  {
    if (v3 <= 0x1C0)
    {
      v4 = ((a1 >> 5) & 0x3F) + word_18BDE9618[v3 + 2080];
      goto LABEL_8;
    }
    v6 = 13156;
  }
  else
  {
    v6 = 3540;
  }
LABEL_9:
  v7 = word_18BDE9618[v6];
  if ((v7 & 8) == 0)
  {
    LODWORD(v8) = a1;
    if ((v7 & 2) != 0)
      LODWORD(v8) = a1 + ((__int16)v7 >> 7);
    goto LABEL_12;
  }
  v9 = (__int16 *)((char *)&unk_18BDE8634 + ((v7 >> 3) & 0x1FFE));
  v11 = *v9;
  v10 = v9 + 1;
  v12 = (unsigned __int16)v11;
  v13 = v11;
  if (v11 < 0)
  {
    if ((a3 & 7) != 0)
    {
      if (a1 == 73)
        return 305;
      if (a1 != 304)
        goto LABEL_32;
    }
    else if (a1 != 73)
    {
      if (a1 == 304)
      {
        *a2 = &unk_18BDE7FD2;
        return 2;
      }
      goto LABEL_32;
    }
    return 105;
  }
  if ((v13 & 0x80) != 0)
  {
    v14 = byte_18BDE7ED1[v12 & 0x7F];
    v15 = &v10[v14];
    v16 = (uint64_t)&v10[2 * v14 + 1];
    if ((v13 & 0x100) != 0)
      v15 = (__int16 *)v16;
    v8 = *v15 >> 4;
    if (*v15 >> 4)
    {
      *a2 = &v15[(*v15 & 0xF) + 1];
      return v8;
    }
  }
LABEL_32:
  if ((v13 & 0x200) != 0)
    return ~a1;
  if ((v7 & 2) == 0 || (v13 & 0x10) == 0)
  {
    if ((v13 & 2) != 0)
    {
      v20 = 1;
    }
    else
    {
      if ((v13 & 1) == 0)
        return ~a1;
      v20 = 0;
    }
    v8 = byte_18BDE7ED1[~(-1 << v20) & v12];
    if ((v13 & 0x100) != 0)
      LODWORD(v8) = (unsigned __int16)v10[2 * v8 + 1] | ((unsigned __int16)v10[2 * v8] << 16);
    else
      LODWORD(v8) = (unsigned __int16)v10[v8];
LABEL_12:
    if ((_DWORD)v8 == a1)
      return ~(_DWORD)v8;
    else
      return v8;
  }
  v17 = byte_18BDE7ED1[v12 & 0xF];
  if ((v13 & 0x100) != 0)
    v18 = (unsigned __int16)v10[2 * v17 + 1] | ((unsigned __int16)v10[2 * v17] << 16);
  else
    v18 = (unsigned __int16)v10[v17];
  if ((v13 & 0x400) != 0)
    v18 = -v18;
  return v18 + a1;
}

UBool u_isULowercase(UChar32 c)
{
  return ucase_getType(c) == 1;
}

UBool u_isUUppercase(UChar32 c)
{
  return ucase_getType(c) == 2;
}

uint64_t sub_18BC07A94(unsigned int a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 isCaseSensitive;
  int v6;
  int v7;
  uint64_t v9;

  v2 = a1;
  v3 = 0;
  if (a2 > 33)
  {
    switch(a2)
    {
      case '1':
        return ucase_getType(a1) != 0;
      case '2':
        return ucase_getTypeOrIgnorable(a1) >> 2;
      case '3':
        v6 = ucase_toFullLower(a1, 0, 0, &v9, 1);
        return v6 >= 0;
      case '4':
        v7 = 1;
        goto LABEL_22;
      case '5':
        goto LABEL_21;
      case '6':
        return v3;
      case '7':
        v3 = 1;
        if ((ucase_toFullLower(a1, 0, 0, &v9, 1) & 0x80000000) != 0
          && (sub_18BC07344(v2, 0, 0, &v9, 1, 1) & 0x80000000) != 0)
        {
LABEL_21:
          a1 = v2;
          v7 = 0;
LABEL_22:
          v6 = sub_18BC07344(a1, 0, 0, &v9, 1, v7);
          return v6 >= 0;
        }
        return v3;
      default:
        if (a2 != 34)
          return v3;
        isCaseSensitive = ucase_isCaseSensitive(a1);
        break;
    }
    return isCaseSensitive;
  }
  switch(a2)
  {
    case 22:
      return ucase_getType(a1) == 1;
    case 27:
      return ucase_isSoftDotted(a1);
    case 30:
      return ucase_getType(a1) == 2;
  }
  return v3;
}

uint64_t ucasemap_setLocale(uint64_t result, char *a2, int *a3)
{
  uint64_t v5;
  _BYTE *v6;
  int Name;
  int v8;

  if (*a3 <= 0)
  {
    v5 = result;
    if (a2 && !*a2)
    {
      *(_BYTE *)(result + 8) = 0;
LABEL_12:
      result = 1;
LABEL_14:
      *(_DWORD *)(v5 + 40) = result;
      return result;
    }
    v6 = (_BYTE *)(result + 8);
    Name = uloc_getName(a2, (char *)(result + 8), 32, a3);
    v8 = *a3;
    if (*a3 == 15 || Name == 32)
    {
      *a3 = 0;
      if (uloc_getLanguage((uint64_t)a2, (char *)(v5 + 8), 32, a3) == 32)
      {
        *a3 = 15;
LABEL_11:
        *v6 = 0;
        goto LABEL_12;
      }
      v8 = *a3;
    }
    if (v8 <= 0)
    {
      result = sub_18BC06B5C((unsigned __int8 *)(v5 + 8));
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  return result;
}

uint64_t *ucasemap_open(char *a1, unint64_t a2, int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v7;
  uint64_t *v9;

  v3 = (uint64_t *)*a3;
  if ((int)v3 > 0)
    return 0;
  v7 = a2;
  v9 = icu::UMemory::operator new(v3, (icu::UMemory *)0x30, a2);
  v4 = v9;
  if (!v9)
  {
    *a3 = 7;
    return v4;
  }
  *v9 = 0;
  *((_DWORD *)v9 + 10) = 0;
  *((_DWORD *)v9 + 11) = v7;
  ucasemap_setLocale((uint64_t)v9, a1, a3);
  if (*a3 >= 1)
  {
    if (*v4)
      (*(void (**)(uint64_t))(*(_QWORD *)*v4 + 8))(*v4);
    icu::UMemory::operator delete(v4);
    return 0;
  }
  return v4;
}

void ucasemap_close(uint64_t *a1)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    icu::UMemory::operator delete(a1);
  }
}

uint64_t ucasemap_getLocale(uint64_t a1)
{
  return a1 + 8;
}

uint64_t ucasemap_getOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t ucasemap_setOptions(uint64_t result, int a2, int *a3)
{
  if (*a3 <= 0)
    *(_DWORD *)(result + 44) = a2;
  return result;
}

uint64_t sub_18BC07DD8(uint64_t result, icu::ByteSink *a2, _QWORD *a3, uint64_t a4, int a5, uint64_t a6, icu::Edits *a7, int *a8)
{
  int v12;
  uint64_t v13;
  int v14;
  icu::Edits *v15;
  icu::Edits *v16;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  const unsigned __int8 *v39;
  unsigned int v40;
  unsigned int v41;
  icu::ByteSinkUtil *v42;
  uint64_t v43;
  icu::ByteSink *v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  const unsigned __int8 *v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  int v68;
  uint64_t v69;
  _QWORD v70[2];
  uint64_t v71;
  uint64_t v72;

  if (*a8 <= 0)
  {
    if ((~(_DWORD)a2 & 0x600) == 0)
    {
      *a8 = 1;
      return result;
    }
    v68 = result;
    v72 = 0;
    v70[0] = a4;
    v70[1] = 0;
    v71 = a5;
    if (a5 >= 1)
    {
      v12 = 0;
      v13 = 10;
      do
      {
        v14 = v12;
        result = (*(uint64_t (**)(_QWORD *))(*a3 + 8 * v13))(a3);
        if ((int)result > a5 || (_DWORD)result == -1)
          v12 = a5;
        else
          v12 = result;
        if (v14 >= v12)
          goto LABEL_140;
        v18 = v14 + 1;
        v19 = (unsigned __int8 *)(a4 + v14);
        v20 = (char)*v19;
        v21 = *v19;
        if ((v20 & 0x80000000) == 0)
          goto LABEL_36;
        if ((_DWORD)v18 != v12)
        {
          if (v21 < 0xE0)
          {
            if (v21 >= 0xC2)
            {
              v24 = v21 & 0x1F;
LABEL_25:
              v25 = *(unsigned __int8 *)(a4 + (int)v18) ^ 0x80;
              v26 = v25 | (v24 << 6);
              if (v25 > 0x3F)
              {
                v21 = -1;
              }
              else
              {
                LODWORD(v18) = v18 + 1;
                v21 = v26;
              }
              if (((unsigned __int16)a2 & 0x200) != 0)
              {
LABEL_67:
                v27 = v14;
                v28 = v18;
                goto LABEL_68;
              }
              goto LABEL_37;
            }
LABEL_35:
            v21 = -1;
LABEL_36:
            if (((unsigned __int16)a2 & 0x200) != 0)
              goto LABEL_67;
            goto LABEL_37;
          }
          if (v21 <= 0xEF)
          {
            v22 = v20 & 0xF;
            if (((a00000000000000[v22] >> (*(_BYTE *)(a4 + v18) >> 5)) & 1) == 0)
              goto LABEL_35;
            v23 = *(_BYTE *)(a4 + v18) & 0x3F;
            goto LABEL_21;
          }
          if (v21 > 0xF4)
            goto LABEL_35;
          v22 = *(unsigned __int8 *)(a4 + v18);
          if (((byte_18BDEFCE8[v22 >> 4] >> (v21 + 16)) & 1) == 0)
            goto LABEL_35;
          v18 = v14 + 2;
          if (v14 + 2 != v12)
          {
            v23 = *(unsigned __int8 *)(a4 + v18) ^ 0x80;
            if (v23 > 0x3F)
            {
              v21 = -1;
              if (((unsigned __int16)a2 & 0x200) != 0)
                goto LABEL_67;
              goto LABEL_37;
            }
            LODWORD(v22) = v22 & 0x3F | ((v21 - 240) << 6);
LABEL_21:
            LODWORD(v18) = v18 + 1;
            if ((_DWORD)v18 != v12)
            {
              v24 = v23 | ((_DWORD)v22 << 6);
              goto LABEL_25;
            }
          }
        }
        v21 = -1;
        LODWORD(v18) = v12;
        if (((unsigned __int16)a2 & 0x200) != 0)
          goto LABEL_67;
LABEL_37:
        v27 = v14;
        while (1)
        {
          v28 = v18;
          v29 = v21;
          if (((unsigned __int16)a2 & 0x400) == 0)
          {
            result = u_charType(v21);
            if (((1 << result) & 0xF020E2E) != 0)
              goto LABEL_62;
            if ((_DWORD)result != 4)
              goto LABEL_43;
            v29 = v21;
          }
          result = ucase_getType(v29);
          if ((_DWORD)result)
            goto LABEL_62;
LABEL_43:
          if (v28 == v12)
            break;
          v30 = v28 + 1;
          v31 = *(char *)(a4 + v28);
          v32 = *(unsigned __int8 *)(a4 + v28);
          v27 = v28;
          LODWORD(v18) = v28 + 1;
          v21 = v32;
          if (v31 < 0)
          {
            v21 = -1;
            v27 = v28;
            LODWORD(v18) = v12;
            if ((_DWORD)v30 != v12)
            {
              if (v32 < 0xE0)
              {
                v27 = v28;
                LODWORD(v18) = v28 + 1;
                if (v32 >= 0xC2)
                {
                  v36 = v32 & 0x1F;
                  LODWORD(v18) = v28 + 1;
                  goto LABEL_54;
                }
              }
              else if (v32 > 0xEF)
              {
                v27 = v28;
                LODWORD(v18) = v28 + 1;
                if (v32 <= 0xF4)
                {
                  v38 = v32 - 240;
                  v33 = *(unsigned __int8 *)(a4 + v30);
                  v27 = v28;
                  LODWORD(v18) = v28 + 1;
                  if (((byte_18BDEFCE8[v33 >> 4] >> v38) & 1) != 0)
                  {
                    v30 = v28 + 2;
                    v27 = v28;
                    LODWORD(v18) = v12;
                    if (v28 + 2 != v12)
                    {
                      v34 = *(unsigned __int8 *)(a4 + v30) ^ 0x80;
                      v27 = v28;
                      LODWORD(v18) = v28 + 2;
                      if (v34 <= 0x3F)
                      {
                        LODWORD(v33) = v33 & 0x3F | (v38 << 6);
                        goto LABEL_50;
                      }
                    }
                  }
                }
              }
              else
              {
                v33 = v31 & 0xF;
                v27 = v28;
                LODWORD(v18) = v28 + 1;
                if (((a00000000000000[v33] >> (*(_BYTE *)(a4 + v30) >> 5)) & 1) != 0)
                {
                  v34 = *(_BYTE *)(a4 + v30) & 0x3F;
LABEL_50:
                  v35 = v30 + 1;
                  v27 = v28;
                  LODWORD(v18) = v12;
                  if (v35 != v12)
                  {
                    v36 = v34 | ((_DWORD)v33 << 6);
                    LODWORD(v18) = v35;
LABEL_54:
                    v37 = *(unsigned __int8 *)(a4 + (int)v18) ^ 0x80;
                    v27 = v28;
                    if (v37 <= 0x3F)
                    {
                      v21 = v37 | (v36 << 6);
                      LODWORD(v18) = v18 + 1;
                      v27 = v28;
                    }
                  }
                }
              }
            }
          }
        }
        v28 = v12;
        v27 = v12;
LABEL_62:
        v39 = (const unsigned __int8 *)(v27 - v14);
        if (v27 > v14)
        {
          if (*a8 <= 0)
          {
            if ((int)v39 >= 1)
              result = (uint64_t)icu::ByteSinkUtil::appendNonEmptyUnchanged((_DWORD *)(a4 + v14), v39, a6, a2, a7, v16);
            goto LABEL_68;
          }
          return result;
        }
LABEL_68:
        if (v28 <= v27)
          goto LABEL_140;
        if ((v21 & 0x80000000) != 0)
        {
          if (*a8 > 0)
            return result;
          if (v28 - v27 >= 1)
            result = (uint64_t)icu::ByteSinkUtil::appendNonEmptyUnchanged((_DWORD *)(a4 + v27), (const unsigned __int8 *)(v28 - v27), a6, a2, a7, v16);
          goto LABEL_83;
        }
        HIDWORD(v71) = v27;
        LODWORD(v72) = v28;
        v69 = 0;
        v40 = ucase_toFullTitle(v21, (uint64_t (*)(uint64_t, _QWORD))sub_18BC0854C, (uint64_t)v70, &v69, v68);
        v21 = v40;
        if ((v40 & 0x80000000) != 0)
        {
          result = (uint64_t)a7;
          if (a7)
            result = (uint64_t)icu::Edits::addUnchanged(a7, v28 - v27);
          if (((unsigned __int16)a2 & 0x4000) != 0)
            goto LABEL_83;
          v41 = ~v21;
          v42 = (icu::ByteSinkUtil *)(v28 - v27);
          v43 = a6;
          v44 = 0;
LABEL_82:
          result = icu::ByteSinkUtil::appendCodePoint(v42, v41, v43, v44, v15);
          goto LABEL_83;
        }
        v15 = a7;
        if (v40 >= 0x20)
        {
          v42 = (icu::ByteSinkUtil *)(v28 - v27);
          v41 = v21;
          v43 = a6;
          v44 = a7;
          goto LABEL_82;
        }
        result = icu::ByteSinkUtil::appendChange(v28 - v27, v69, v40, a6, a7, a8);
        if (!(_DWORD)result)
          return result;
LABEL_83:
        if (v68 != 5)
          goto LABEL_132;
        if (v28 >= v12)
          goto LABEL_132;
        v45 = v21 ^ ((int)v21 >> 31);
        if (v45 != 205 && v45 != 73)
          goto LABEL_132;
        v46 = v28 + 1;
        v47 = *(unsigned __int8 *)(a4 + v28);
        if (v45 != 73)
        {
          v48 = 0;
LABEL_94:
          v49 = 1;
LABEL_96:
          if (v47 == 106)
          {
            v50 = 1;
            if (v49)
              goto LABEL_101;
            v64 = 0;
          }
          else
          {
            if (v47 != 74)
              goto LABEL_132;
            v50 = 0;
            v48 = v48 | 1;
            if ((v49 & 1) == 0)
            {
              v64 = 0;
              goto LABEL_112;
            }
LABEL_101:
            v51 = (int)v46 + 1;
            if ((int)v51 >= v12 || *(unsigned __int8 *)(a4 + (int)v46) != 204 || *(unsigned __int8 *)(a4 + v51) != 129)
              goto LABEL_132;
            LODWORD(v46) = v46 + 2;
            if (v50)
              v48 = v48;
            else
              v48 = (v48 + 2);
            if (v50)
              v52 = 2;
            else
              v52 = 0;
            v64 = v52;
          }
LABEL_112:
          if ((int)v46 < v12)
          {
            v63 = v48;
            v53 = *(char *)(a4 + (int)v46);
            v54 = *(unsigned __int8 *)(a4 + (int)v46);
            if (v53 < 0)
            {
              v55 = (int)v46 + 1;
              if ((_DWORD)v55 == v12)
                goto LABEL_130;
              if (v54 < 0xE0)
              {
                if (v54 < 0xC2)
                  goto LABEL_130;
                v58 = v54 & 0x1F;
LABEL_123:
                v59 = *(unsigned __int8 *)(a4 + (int)v55) ^ 0x80;
                if (v59 > 0x3F)
                  goto LABEL_130;
                v54 = v59 | (v58 << 6);
              }
              else
              {
                if (v54 <= 0xEF)
                {
                  v56 = v53 & 0xF;
                  if (((a00000000000000[v56] >> (*(_BYTE *)(a4 + v55) >> 5)) & 1) != 0)
                  {
                    v57 = *(_BYTE *)(a4 + v55) & 0x3F;
                    goto LABEL_119;
                  }
                  goto LABEL_130;
                }
                if (v54 <= 0xF4)
                {
                  v55 = *(unsigned __int8 *)(a4 + v55);
                  if (((byte_18BDEFCE8[v55 >> 4] >> (v54 + 16)) & 1) != 0 && (_DWORD)v46 + 2 != v12)
                  {
                    v57 = *(unsigned __int8 *)(a4 + (int)v46 + 2) ^ 0x80;
                    if (v57 <= 0x3F)
                    {
                      LODWORD(v56) = v55 & 0x3F | ((v54 - 240) << 6);
                      LODWORD(v55) = v46 + 2;
LABEL_119:
                      LODWORD(v55) = v55 + 1;
                      if ((_DWORD)v55 != v12)
                      {
                        v58 = v57 | ((_DWORD)v56 << 6);
                        goto LABEL_123;
                      }
                    }
                  }
                }
LABEL_130:
                v54 = -1;
              }
            }
            result = u_charType(v54);
            v48 = v63;
            if (((1 << result) & 0x1C0) != 0)
              goto LABEL_132;
          }
          if (*a8 <= 0 && (_DWORD)v48)
          {
            v61 = v48;
            result = (uint64_t)icu::ByteSinkUtil::appendNonEmptyUnchanged((_DWORD *)(a4 + v28), (const unsigned __int8 *)v48, a6, a2, a7, v16);
            LODWORD(v48) = v61;
          }
          v62 = v48 + v28;
          if (v50)
          {
            result = icu::ByteSinkUtil::appendCodePoint((icu::ByteSinkUtil *)1, 0x4Au, a6, a7, v15);
            ++v62;
          }
          if (v64 && *a8 <= 0)
            result = (uint64_t)icu::ByteSinkUtil::appendNonEmptyUnchanged((_DWORD *)(a4 + v62), (const unsigned __int8 *)v64, a6, a2, a7, v16);
          goto LABEL_133;
        }
        if (v47 != 204)
        {
          v49 = 0;
          v48 = 0;
          goto LABEL_96;
        }
        if ((int)v46 < v12 && *(unsigned __int8 *)(a4 + v46) == 129 && v28 + 2 != v12)
        {
          LODWORD(v46) = v28 + 3;
          v47 = *(unsigned __int8 *)(a4 + v28 + 2);
          v48 = 2;
          goto LABEL_94;
        }
LABEL_132:
        LODWORD(v46) = v28;
LABEL_133:
        v60 = (const unsigned __int8 *)(v12 - v46);
        if (v12 > (int)v46)
        {
          if (((unsigned __int16)a2 & 0x100) != 0)
          {
            if (*a8 > 0)
              return result;
            if ((int)v60 >= 1)
              result = (uint64_t)icu::ByteSinkUtil::appendNonEmptyUnchanged((_DWORD *)(a4 + (int)v46), v60, a6, a2, a7, v16);
          }
          else
          {
            result = sub_18BC086C0(v68, a2, a4, (uint64_t)v70, v46, v12, a6, a7, a8);
            if (*a8 > 0)
              return result;
          }
        }
LABEL_140:
        v13 = 13;
      }
      while (v12 < a5);
    }
  }
  return result;
}

uint64_t sub_18BC0854C(uint64_t a1, int a2)
{
  int32_t v2;
  int32_t v3;
  const uint8_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int32_t v9;
  const uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  if (a2 < 0)
  {
    v2 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 12) = v2;
    *(_BYTE *)(a1 + 28) = a2;
    goto LABEL_5;
  }
  if (a2)
  {
    v2 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 12) = v2;
    *(_BYTE *)(a1 + 28) = a2;
    goto LABEL_9;
  }
  v2 = *(_DWORD *)(a1 + 12);
  if (*(char *)(a1 + 28) < 0)
  {
LABEL_5:
    v3 = *(_DWORD *)(a1 + 8);
    if (v3 >= v2)
      return 0xFFFFFFFFLL;
    v4 = *(const uint8_t **)a1;
    v5 = v2 - 1;
    *(_DWORD *)(a1 + 12) = v5;
    v6 = (char)v4[v5];
    v7 = v6;
    if (v6 < 0)
      return utf8_prevCharSafeBody(v4, v3, (int32_t *)(a1 + 12), v6, -1);
    return v7;
  }
LABEL_9:
  v9 = *(_DWORD *)(a1 + 16);
  if (v2 >= v9)
    return 0xFFFFFFFFLL;
  v10 = *(const uint8_t **)a1;
  v11 = v2;
  v12 = v2 + 1;
  *(_DWORD *)(a1 + 12) = v12;
  v13 = (char)v10[v2];
  v7 = v13;
  if (v13 < 0)
  {
    if ((_DWORD)v12 != v9)
    {
      if (v13 < 0xE0u)
      {
        if (v13 < 0xC2u)
          return 0xFFFFFFFFLL;
        v16 = v13 & 0x1F;
      }
      else
      {
        if (v13 > 0xEFu)
        {
          if (v13 > 0xF4u)
            return 0xFFFFFFFFLL;
          v14 = v10[v12];
          if (((byte_18BDEFCE8[v14 >> 4] >> (v7 + 16)) & 1) == 0)
            return 0xFFFFFFFFLL;
          v12 = v11 + 2;
          *(_DWORD *)(a1 + 12) = v11 + 2;
          if ((_DWORD)v11 + 2 == v9)
            return 0xFFFFFFFFLL;
          v15 = v10[v12] ^ 0x80;
          if (v15 > 0x3F)
            return 0xFFFFFFFFLL;
          LODWORD(v14) = v14 & 0x3F | (((_DWORD)v7 - 240) << 6);
        }
        else
        {
          v14 = v13 & 0xF;
          if (((a00000000000000[v14] >> (v10[v12] >> 5)) & 1) == 0)
            return 0xFFFFFFFFLL;
          v15 = v10[v12] & 0x3F;
        }
        LODWORD(v12) = v12 + 1;
        *(_DWORD *)(a1 + 12) = v12;
        if ((_DWORD)v12 == v9)
          return 0xFFFFFFFFLL;
        v16 = v15 | ((_DWORD)v14 << 6);
      }
      v17 = v10[(int)v12] ^ 0x80;
      if (v17 <= 0x3F)
      {
        v7 = v17 | (v16 << 6);
        *(_DWORD *)(a1 + 12) = v12 + 1;
        return v7;
      }
    }
    return 0xFFFFFFFFLL;
  }
  return v7;
}

uint64_t sub_18BC086C0(int a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, icu::Edits *a8, int *a9)
{
  _BYTE *v13;
  uint64_t result;
  icu::Edits *v15;
  icu::Edits *v16;
  int v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v25;
  int v26;
  const unsigned __int8 *v27;
  icu::Edits *v28;
  int v29;
  int v30;
  BOOL v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  const unsigned __int8 *v40;
  icu::ByteSinkUtil *v41;
  unint64_t v42;
  int v43;
  int v44;
  const unsigned __int8 *v45;
  unsigned int v46;
  BOOL v48;
  const unsigned __int8 *v49;
  const unsigned __int8 *v50;
  uint64_t v52;
  _BYTE *v57;
  uint64_t v58;
  char v59;

  if (a1 == 1)
    goto LABEL_4;
  if (a1 < 0)
  {
    if ((a2 & 7) == 0)
      goto LABEL_4;
LABEL_6:
    v13 = &unk_18BDE8156;
    goto LABEL_7;
  }
  if ((a1 & 0xFFFFFFFE) == 2)
    goto LABEL_6;
LABEL_4:
  v13 = &unk_18BDE7FD6;
LABEL_7:
  v57 = v13;
  result = (uint64_t)sub_18BC05D2C();
  v17 = *a9;
  if (*a9 > 0 || a5 >= a6)
  {
    v19 = a5;
    LODWORD(v20) = a5;
    goto LABEL_105;
  }
  v52 = result;
  v19 = a5;
  while (1)
  {
    while (1)
    {
      v20 = a5 + 1;
      v21 = *(unsigned __int8 *)(a3 + a5);
      LODWORD(v22) = *(unsigned __int8 *)(a3 + a5);
      if (*(char *)(a3 + a5) < 0)
        break;
      v23 = v57[v21];
      if (!v57[v21])
        goto LABEL_95;
      if (v23 != 128)
      {
        v27 = (const unsigned __int8 *)(a5 - v19);
        if ((int)v27 >= 1)
          icu::ByteSinkUtil::appendNonEmptyUnchanged((_DWORD *)(a3 + v19), v27, a7, (icu::ByteSink *)a2, a8, v16);
        v59 = v23 + v21;
        result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a7 + 16))(a7, &v59, 1);
        if (!a8)
          goto LABEL_34;
        v28 = a8;
        v29 = 1;
        v30 = 1;
LABEL_33:
        result = (uint64_t)icu::Edits::addReplace(v28, v29, v30);
LABEL_34:
        v19 = v20;
        goto LABEL_95;
      }
LABEL_16:
      v58 = 0;
      if (a1 < 0)
      {
        result = ucase_toFullFolding(v22, &v58, a2);
      }
      else
      {
        *(_DWORD *)(a4 + 20) = a5;
        *(_DWORD *)(a4 + 24) = v20;
        result = ucase_toFullLower(v22, (uint64_t (*)(uint64_t, _QWORD))sub_18BC0854C, a4, &v58, a1);
      }
      v39 = result;
      if ((result & 0x80000000) == 0)
      {
        if (*a9 <= 0)
        {
          v40 = (const unsigned __int8 *)(a5 - v19);
          if ((int)v40 >= 1)
            icu::ByteSinkUtil::appendNonEmptyUnchanged((_DWORD *)(a3 + v19), v40, a7, (icu::ByteSink *)a2, a8, v16);
        }
        v41 = (icu::ByteSinkUtil *)(v20 - a5);
        if (v39 > 0x1F)
          result = icu::ByteSinkUtil::appendCodePoint(v41, v39, a7, a8, v15);
        else
          result = icu::ByteSinkUtil::appendChange((int)v41, v58, v39, a7, a8, a9);
        v19 = v20;
      }
      v17 = *a9;
      if (*a9 <= 0)
      {
        a5 = v20;
        if ((int)v20 < a6)
          continue;
      }
      goto LABEL_105;
    }
    if (v22 > 0xE2)
      break;
    if ((v22 + 62) > 3u || (int)v20 >= a6)
      goto LABEL_42;
    v25 = *(unsigned __int8 *)(a3 + v20) ^ 0x80;
    if (v25 > 0x3F)
      goto LABEL_42;
    LODWORD(v20) = a5 + 2;
    v22 = (((_DWORD)v22 << 6) - 12288) | (unint64_t)v25;
    v26 = v57[v22];
    if (v57[v22])
    {
      if (v26 == 128)
      {
        if ((v22 & 0x80000000) != 0)
          goto LABEL_105;
        goto LABEL_16;
      }
      v45 = (const unsigned __int8 *)(a5 - v19);
      if ((int)v45 >= 1)
        icu::ByteSinkUtil::appendNonEmptyUnchanged((_DWORD *)(a3 + v19), v45, a7, (icu::ByteSink *)a2, a8, v16);
      result = icu::ByteSinkUtil::appendTwoBytes((int)v22 + (char)v26, a7);
      if (!a8)
        goto LABEL_34;
      v28 = a8;
      v29 = 2;
      v30 = 2;
      goto LABEL_33;
    }
LABEL_95:
    v17 = *a9;
    v48 = *a9 <= 0 && (int)v20 < a6;
    a5 = v20;
    if (!v48)
      goto LABEL_105;
  }
  v32 = (v21 < 0xEA || (v21 + 21) <= 1u) && a5 + 3 <= a6;
  if (v32 && *(char *)(a3 + v20) <= -65 && *(char *)(a5 + a3 + 2) < -64)
  {
    LODWORD(v20) = a5 + 3;
    goto LABEL_95;
  }
LABEL_42:
  if ((_DWORD)v20 == a6)
    goto LABEL_104;
  if (v22 < 0xE0)
  {
    if (v21 < 0xC2)
      goto LABEL_95;
    v35 = v22 & 0x1F;
LABEL_51:
    v36 = *(unsigned __int8 *)(a3 + (int)v20) ^ 0x80;
    if (v36 > 0x3F)
      goto LABEL_95;
    LODWORD(v22) = v36 | (v35 << 6);
    v37 = *(_QWORD *)v52;
    if (((v35 >> 5) & 0x1FFFFF) > 0x1A)
    {
      if (WORD1(v22))
      {
        if (v22 >= 0x110000)
        {
          v44 = *(_DWORD *)(v52 + 24) + 128;
          goto LABEL_89;
        }
        if ((int)v22 >= *(_DWORD *)(v52 + 44))
        {
          v44 = *(_DWORD *)(v52 + 48);
LABEL_89:
          LODWORD(v20) = v20 + 1;
          v46 = *(unsigned __int16 *)(v37 + 2 * v44);
          if ((v46 & 8) != 0)
            goto LABEL_16;
          if (v46 >= 0x80 && (v46 & 2) != 0)
          {
            v49 = (const unsigned __int8 *)(a5 - v19);
            if ((int)v49 >= 1)
              icu::ByteSinkUtil::appendNonEmptyUnchanged((_DWORD *)(a3 + v19), v49, a7, (icu::ByteSink *)a2, a8, v16);
            result = icu::ByteSinkUtil::appendCodePoint((icu::ByteSinkUtil *)(v20 - a5), (int)v22 + ((__int16)v46 >> 7), a7, a8, v15);
            goto LABEL_34;
          }
          goto LABEL_95;
        }
        v38 = ((v22 >> 5) & 0x3F) + *(unsigned __int16 *)(v37 + 2 * ((v35 >> 5) + 2080));
      }
      else
      {
        if (v22 >> 10 >= 0x37)
          v43 = 0;
        else
          v43 = 320;
        v38 = v43 + (v22 >> 5);
      }
    }
    else
    {
      v38 = v22 >> 5;
    }
    v44 = (v36 & 0x1F) + 4 * *(unsigned __int16 *)(v37 + 2 * v38);
    goto LABEL_89;
  }
  if (v21 <= 0xEF)
  {
    v33 = v21 & 0xF;
    if (((a00000000000000[v21 & 0xF] >> (*(_BYTE *)(a3 + v20) >> 5)) & 1) == 0)
      goto LABEL_95;
    v34 = *(_BYTE *)(a3 + v20) & 0x3F;
    goto LABEL_47;
  }
  if (v21 > 0xF4)
    goto LABEL_95;
  v42 = *(unsigned __int8 *)(a3 + v20);
  if (((byte_18BDEFCE8[v42 >> 4] >> (v22 + 16)) & 1) == 0)
    goto LABEL_95;
  v20 = a5 + 2;
  if (a5 + 2 != a6)
  {
    v34 = *(unsigned __int8 *)(a3 + v20) ^ 0x80;
    if (v34 > 0x3F)
      goto LABEL_95;
    v33 = v42 & 0x3F | (((_DWORD)v22 - 240) << 6);
LABEL_47:
    LODWORD(v20) = v20 + 1;
    if ((_DWORD)v20 == a6)
      goto LABEL_104;
    v35 = v34 | (v33 << 6);
    goto LABEL_51;
  }
LABEL_104:
  v17 = *a9;
  LODWORD(v20) = a6;
LABEL_105:
  v50 = (const unsigned __int8 *)(v20 - v19);
  if (v17 <= 0 && (int)v50 >= 1)
    return (uint64_t)icu::ByteSinkUtil::appendNonEmptyUnchanged((_DWORD *)(a3 + v19), v50, a7, (icu::ByteSink *)a2, a8, v16);
  return result;
}

BOOL sub_18BC08BA8(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int TypeOrIgnorable;

  while (a2 < a3)
  {
    v5 = a2 + 1;
    v6 = *(char *)(a1 + a2);
    v7 = *(unsigned __int8 *)(a1 + a2);
    if (v6 < 0)
    {
      if ((_DWORD)v5 != a3)
      {
        if (v7 < 0xE0)
        {
          if (v7 >= 0xC2)
          {
            v10 = v7 & 0x1F;
LABEL_13:
            v11 = *(unsigned __int8 *)(a1 + (int)v5) ^ 0x80;
            v12 = v11 | (v10 << 6);
            if (v11 > 0x3F)
            {
              v7 = -1;
            }
            else
            {
              LODWORD(v5) = v5 + 1;
              v7 = v12;
            }
            goto LABEL_22;
          }
LABEL_21:
          v7 = -1;
          goto LABEL_22;
        }
        if (v7 > 0xEF)
        {
          if (v7 > 0xF4)
            goto LABEL_21;
          v8 = *(unsigned __int8 *)(a1 + v5);
          if (((byte_18BDEFCE8[v8 >> 4] >> (v7 + 16)) & 1) == 0)
            goto LABEL_21;
          v5 = a2 + 2;
          if (a2 + 2 == a3)
            goto LABEL_4;
          v9 = *(unsigned __int8 *)(a1 + v5) ^ 0x80;
          if (v9 > 0x3F)
          {
            v7 = -1;
            goto LABEL_22;
          }
          LODWORD(v8) = v8 & 0x3F | ((v7 - 240) << 6);
        }
        else
        {
          v8 = v6 & 0xF;
          if (((a00000000000000[v8] >> (*(_BYTE *)(a1 + v5) >> 5)) & 1) == 0)
            goto LABEL_21;
          v9 = *(_BYTE *)(a1 + v5) & 0x3F;
        }
        LODWORD(v5) = v5 + 1;
        if ((_DWORD)v5 != a3)
        {
          v10 = v9 | ((_DWORD)v8 << 6);
          goto LABEL_13;
        }
      }
LABEL_4:
      v7 = -1;
      LODWORD(v5) = a3;
    }
LABEL_22:
    TypeOrIgnorable = ucase_getTypeOrIgnorable(v7);
    a2 = v5;
    if ((TypeOrIgnorable & 4) == 0)
      return TypeOrIgnorable != 0;
  }
  return 0;
}

uint64_t sub_18BC08CF8(uint64_t result, uint64_t a2, int a3, uint64_t a4, icu::Edits *a5, int *a6)
{
  uint64_t v9;
  char v10;
  _BOOL4 v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  int TypeOrIgnorable;
  int v24;
  char v25;
  icu::Edits *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  icu::Edits *v42;
  unsigned int v43;
  char v44;
  char v45;
  char v46;
  int v47;
  char v48;
  const unsigned __int8 *v49;
  int v50;
  uint64_t v51;
  char v53;
  BOOL v54;
  int v55;
  BOOL v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unsigned int v61;
  _BOOL4 v62;
  uint64_t v63;
  unsigned __int8 *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  v61 = result;
  if (a3 < 1)
    return result;
  LODWORD(v9) = 0;
  v10 = 0;
  v12 = (result & 0x4000) == 0 && a5 == 0;
  v62 = v12;
  while (1)
  {
    v66 = (int)v9;
    v13 = (int)v9 + 1;
    v14 = (unsigned __int8 *)(a2 + (int)v9);
    LODWORD(v9) = v9 + 1;
    v15 = (char)*v14;
    v16 = *v14;
    if ((v15 & 0x80000000) == 0)
      goto LABEL_29;
    if ((_DWORD)v9 == a3)
    {
LABEL_11:
      v16 = -1;
      LODWORD(v9) = a3;
      goto LABEL_29;
    }
    if (v16 < 0xE0)
    {
      if (v16 < 0xC2)
        goto LABEL_28;
      v19 = v16 & 0x1F;
    }
    else
    {
      if (v16 > 0xEF)
      {
        if (v16 > 0xF4)
          goto LABEL_28;
        v22 = *(unsigned __int8 *)(a2 + v13);
        if (((byte_18BDEFCE8[v22 >> 4] >> (v16 + 16)) & 1) == 0)
          goto LABEL_28;
        v9 = v66 + 2;
        if ((_DWORD)v66 + 2 == a3)
          goto LABEL_11;
        v18 = *(unsigned __int8 *)(a2 + v9) ^ 0x80;
        if (v18 > 0x3F)
        {
LABEL_28:
          v16 = -1;
          goto LABEL_29;
        }
        v17 = v22 & 0x3F | ((v16 - 240) << 6);
      }
      else
      {
        v17 = v15 & 0xF;
        if (((a00000000000000[*v14 & 0xF] >> (*(_BYTE *)(a2 + v13) >> 5)) & 1) == 0)
          goto LABEL_28;
        v18 = *(_BYTE *)(a2 + v13) & 0x3F;
      }
      LODWORD(v9) = v9 + 1;
      if ((_DWORD)v9 == a3)
        goto LABEL_11;
      v19 = v18 | (v17 << 6);
    }
    v20 = *(unsigned __int8 *)(a2 + (int)v9) ^ 0x80;
    v21 = v20 | (v19 << 6);
    if (v20 > 0x3F)
    {
      v16 = -1;
    }
    else
    {
      LODWORD(v9) = v9 + 1;
      v16 = v21;
    }
LABEL_29:
    TypeOrIgnorable = ucase_getTypeOrIgnorable(v16);
    v24 = v10 & 1;
    v25 = TypeOrIgnorable != 0;
    if ((TypeOrIgnorable & 4) != 0)
      v25 = v10 & 1;
    v67 = v25;
    result = sub_18BC6A6F8(v16);
    if ((_DWORD)result)
    {
      v27 = result;
      v28 = result & 0x3FF;
      v63 = v13;
      if ((result & 0x1000) != 0 && (v10 & 6) != 0 && (v28 == 933 || v28 == 921))
      {
        if ((v10 & 4) != 0)
          v29 = 0x8000;
        else
          v29 = 0x10000;
        v27 = result | v29;
      }
      v30 = (v27 >> 13) & 1;
      v65 = v14;
      if ((int)v9 >= a3)
      {
        LODWORD(v32) = v9;
        v31 = v27;
        goto LABEL_73;
      }
      v31 = v27;
      while (1)
      {
        v32 = (int)v9 + 1;
        v33 = *(char *)(a2 + (int)v9);
        v34 = *(unsigned __int8 *)(a2 + (int)v9);
        if ((v33 & 0x80000000) == 0)
          goto LABEL_62;
        if ((_DWORD)v32 == a3)
        {
LABEL_44:
          v34 = -1;
          LODWORD(v32) = a3;
          goto LABEL_62;
        }
        if (v34 < 0xE0)
        {
          if (v34 < 0xC2)
            goto LABEL_61;
          v37 = v34 & 0x1F;
        }
        else
        {
          if (v34 > 0xEF)
          {
            if (v34 > 0xF4
              || (v35 = *(unsigned __int8 *)(a2 + v32), ((byte_18BDEFCE8[v35 >> 4] >> (v34 + 16)) & 1) == 0))
            {
LABEL_61:
              v34 = -1;
              goto LABEL_62;
            }
            v32 = (int)v9 + 2;
            if ((_DWORD)v9 + 2 == a3)
              goto LABEL_44;
            v36 = *(unsigned __int8 *)(a2 + v32) ^ 0x80;
            if (v36 > 0x3F)
            {
              v34 = -1;
              goto LABEL_62;
            }
            LODWORD(v35) = v35 & 0x3F | ((v34 - 240) << 6);
          }
          else
          {
            v35 = v33 & 0xF;
            if (((a00000000000000[v35] >> (*(_BYTE *)(a2 + v32) >> 5)) & 1) == 0)
              goto LABEL_61;
            v36 = *(_BYTE *)(a2 + v32) & 0x3F;
          }
          LODWORD(v32) = v32 + 1;
          if ((_DWORD)v32 == a3)
            goto LABEL_44;
          v37 = v36 | ((_DWORD)v35 << 6);
        }
        v38 = *(unsigned __int8 *)(a2 + (int)v32) ^ 0x80;
        v39 = v38 | (v37 << 6);
        if (v38 > 0x3F)
        {
          v34 = -1;
        }
        else
        {
          LODWORD(v32) = v32 + 1;
          v34 = v39;
        }
LABEL_62:
        v40 = sub_18BC6A770(v34);
        if (!v40)
        {
          LODWORD(v32) = v9;
LABEL_73:
          if ((v27 & 0x4000) != 0)
            v45 = 4;
          else
            v45 = 2;
          if ((v31 & 0xD000) == 0x5000)
            v46 = v45;
          else
            v46 = 0;
          if (v28 != 919 || (v31 & 0x4000) == 0 || v30 || v24 || sub_18BC08BA8(a2, v32, a3))
          {
            if ((v31 & 0x8000) == 0)
            {
              LOBYTE(v47) = 1;
              goto LABEL_102;
            }
            if (v28 != 933)
            {
              v48 = v67;
              if (v28 == 921)
              {
                v31 = 0;
                LOBYTE(v47) = 1;
                v28 = 938;
              }
              else
              {
                LOBYTE(v47) = 1;
              }
LABEL_103:
              v44 = v46 | v48;
              if (v62)
              {
                v50 = v31 & 0x18000;
                goto LABEL_134;
              }
              v51 = v66 + 2;
              v53 = (int)v66 + 2 > (int)v32
                 || *v65 != ((v28 >> 6) | 0xC0)
                 || *(unsigned __int8 *)(a2 + v63) != (v28 & 0x3F | 0x80)
                 || v30 != 0;
              v50 = v31 & 0x18000;
              if (v50)
              {
                v54 = (int)v66 + 4 > (int)v32
                   || *(unsigned __int8 *)(a2 + v51) != 204
                   || *(unsigned __int8 *)(v66 + a2 + 3) != 136;
                v53 |= v54;
                LODWORD(v51) = v66 + 4;
              }
              if ((v47 & 1) == 0)
              {
                v55 = v51 + 2;
                v56 = (int)v51 + 2 > (int)v32
                   || *(unsigned __int8 *)(a2 + (int)v51) != 204
                   || *(unsigned __int8 *)((int)v51 + a2 + 1) != 129;
                v53 |= v56;
                LODWORD(v51) = v55;
              }
              v57 = v32 - v66;
              v58 = v51 - v66 + 2 * v30;
              if ((v53 & 1) != 0 || v57 != v58)
              {
                if (a5)
                  icu::Edits::addReplace(a5, v57, v58);
              }
              else
              {
                result = (uint64_t)a5;
                if (a5)
                  result = (uint64_t)icu::Edits::addUnchanged(a5, v57);
                if ((v61 & 0x4000) != 0)
                {
LABEL_141:
                  LODWORD(v9) = v32;
                  goto LABEL_142;
                }
              }
LABEL_134:
              result = icu::ByteSinkUtil::appendTwoBytes(v28, a4);
              if (v50)
                result = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a4 + 16))(a4, "̈", 2);
              if ((v47 & 1) == 0)
                result = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a4 + 16))(a4, "́", 2);
              if (v30 >= 1)
              {
                v59 = v30 + 1;
                do
                {
                  result = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a4 + 16))(a4, "Ι", 2);
                  --v59;
                }
                while (v59 > 1);
              }
              goto LABEL_141;
            }
            v31 = 0;
            LOBYTE(v47) = 1;
            v28 = 939;
          }
          else
          {
            v47 = (v27 >> 14) & 1;
            if ((v27 & 0x4000) != 0)
              v28 = 905;
            else
              v28 = 919;
          }
LABEL_102:
          v48 = v67;
          goto LABEL_103;
        }
        v31 |= v40;
        v30 += (v40 >> 13) & 1;
        LODWORD(v9) = v32;
        if ((int)v32 >= a3)
          goto LABEL_73;
      }
    }
    if ((v16 & 0x80000000) != 0)
    {
      v44 = v67;
      if (*a6 > 0)
        return result;
      v49 = (const unsigned __int8 *)(v9 - v66);
      if ((int)v49 >= 1)
        result = (uint64_t)icu::ByteSinkUtil::appendNonEmptyUnchanged(v14, v49, a4, (icu::ByteSink *)v61, a5, v26);
      goto LABEL_142;
    }
    v68 = 0;
    v41 = ucase_toFullUpper(v16, 0, 0, &v68, 4);
    v43 = v41;
    if ((v41 & 0x80000000) == 0)
      break;
    result = (uint64_t)a5;
    if (a5)
      result = (uint64_t)icu::Edits::addUnchanged(a5, (int)v9 - (int)v66);
    v44 = v67;
    if ((v61 & 0x4000) == 0)
      result = icu::ByteSinkUtil::appendCodePoint((icu::ByteSinkUtil *)(v9 - v66), ~v43, a4, 0, v42);
LABEL_142:
    v10 = v44;
    if ((int)v9 >= a3)
      return result;
  }
  if (v41 >= 0x20)
  {
    result = icu::ByteSinkUtil::appendCodePoint((icu::ByteSinkUtil *)(v9 - v66), v41, a4, a5, v42);
    v44 = v67;
    goto LABEL_142;
  }
  result = icu::ByteSinkUtil::appendChange((int)v9 - (int)v66, v68, v41, a4, a5, a6);
  v44 = v67;
  if ((_DWORD)result)
    goto LABEL_142;
  return result;
}

uint64_t sub_18BC09364(uint64_t result, uint64_t a2, uint64_t a3, char *__s, size_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, char *, size_t, uint64_t, icu::Edits *, UErrorCode *), uint64_t a7, icu::Edits *this, UErrorCode *a9)
{
  size_t v9;
  BOOL v11;
  int v12;
  uint64_t v18;

  if (*(int *)a9 <= 0)
  {
    v9 = a5;
    if (__s)
      v11 = 1;
    else
      v11 = (_DWORD)a5 == 0;
    v12 = !v11;
    if ((int)a5 < -1 || v12)
    {
      *a9 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      v18 = result;
      if ((_DWORD)a5 == -1)
        v9 = strlen(__s);
      if ((a2 & 0x2000) == 0 && this)
        icu::Edits::reset((uint64_t)this);
      a6(v18, a2, a3, __s, v9, a7, this, a9);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a7 + 32))(a7);
      if (this)
      {
        if (*(int *)a9 <= 0)
          return icu::Edits::copyErrorTo(this, a9);
      }
    }
  }
  return result;
}

uint64_t sub_18BC09478(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, int a5, char *__s, size_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, char *, size_t, __int128 *, icu::Edits *, UErrorCode *), icu::Edits *a9, UErrorCode *a10)
{
  uint64_t v10;
  size_t v13;
  BOOL v20;
  _BOOL4 v21;
  __int128 v22;
  __int128 v23;

  if (*(int *)a10 > 0)
    return 0;
  if (a5 < 0)
    goto LABEL_6;
  v13 = a7;
  if (!a4)
  {
    if (a5)
      goto LABEL_6;
  }
  v20 = __s || (_DWORD)a7 == 0;
  v21 = !v20;
  if ((int)a7 < -1 || v21)
    goto LABEL_6;
  if ((_DWORD)a7 == -1)
    v13 = strlen(__s);
  if (a4 && (__s >= a4 && &a4[a5] > __s || a4 >= __s && &__s[(int)v13] > a4))
  {
LABEL_6:
    v10 = 0;
    *a10 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  else
  {
    v22 = 0u;
    v23 = 0u;
    icu::CheckedArrayByteSink::CheckedArrayByteSink((uint64_t)&v22, a4, a5);
    if ((a2 & 0x2000) == 0 && a9)
      icu::Edits::reset((uint64_t)a9);
    a8(a1, a2, a3, __s, v13, &v22, a9, a10);
    icu::ByteSink::Flush((icu::ByteSink *)&v22);
    if (*(int *)a10 <= 0)
    {
      if (BYTE12(v23))
      {
        *a10 = U_BUFFER_OVERFLOW_ERROR;
      }
      else if (a9)
      {
        icu::Edits::copyErrorTo(a9, a10);
      }
    }
    v10 = u_terminateChars((uint64_t)a4, a5, DWORD2(v23), (int *)a10);
    icu::CheckedArrayByteSink::~CheckedArrayByteSink((icu::CheckedArrayByteSink *)&v22);
  }
  return v10;
}

uint64_t ucasemap_utf8ToLower(uint64_t a1, char *a2, int a3, char *__s, size_t a5, UErrorCode *a6)
{
  return sub_18BC09478(*(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), 0, a2, a3, __s, a5, (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, __int128 *, icu::Edits *, UErrorCode *))sub_18BC09658, 0, a6);
}

uint64_t sub_18BC09658(int a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, icu::Edits *a7, int *a8)
{
  _QWORD v9[4];

  v9[3] = 0;
  v9[0] = a4;
  v9[1] = 0;
  v9[2] = a5;
  return sub_18BC086C0(a1, a2, a4, (uint64_t)v9, 0, a5, a6, a7, a8);
}

uint64_t ucasemap_utf8ToUpper(uint64_t a1, char *a2, int a3, char *__s, size_t a5, UErrorCode *a6)
{
  return sub_18BC09478(*(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), 0, a2, a3, __s, a5, (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, __int128 *, icu::Edits *, UErrorCode *))sub_18BC096E8, 0, a6);
}

uint64_t sub_18BC096E8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, icu::Edits *a7, int *a8)
{
  uint64_t result;
  icu::ByteSink *v15;
  icu::Edits *v16;
  icu::Edits *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  const unsigned __int8 *v26;
  icu::ByteSinkUtil *v27;
  uint64_t v29;
  int v30;
  const unsigned __int8 *v31;
  icu::Edits *v32;
  int v33;
  int v34;
  BOOL v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  const unsigned __int8 *v47;
  const unsigned __int8 *v48;
  BOOL v49;
  const unsigned __int8 *v50;
  uint64_t v52;
  int v53;
  unsigned int v54;
  icu::ByteSink *v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  if (a1 == 4)
    return sub_18BC08CF8(a2, a4, a5, a6, a7, a8);
  v54 = a2;
  v58 = 0;
  v56[0] = a4;
  v56[1] = 0;
  v57 = a5;
  v15 = (icu::ByteSink *)&unk_18BDE82D6;
  if (a1 == 2)
    v15 = (icu::ByteSink *)&unk_18BDE8456;
  v55 = v15;
  result = (uint64_t)sub_18BC05D2C();
  v18 = 0;
  v19 = *a8;
  if (a5 < 1 || v19 > 0)
  {
    LODWORD(v21) = 0;
    goto LABEL_97;
  }
  v52 = result;
  v53 = a1;
  v20 = 0;
  v18 = 0;
  while (1)
  {
    while (1)
    {
      v21 = v20 + 1;
      v22 = *(unsigned __int8 *)(a4 + v20);
      LODWORD(v23) = *(unsigned __int8 *)(a4 + v20);
      if (*(char *)(a4 + v20) < 0)
        break;
      v24 = *((unsigned __int8 *)v55 + v22);
      if (!*((_BYTE *)v55 + v22))
        goto LABEL_87;
      if (v24 != 128)
      {
        v31 = (const unsigned __int8 *)(v20 - v18);
        if ((int)v31 >= 1)
          icu::ByteSinkUtil::appendNonEmptyUnchanged((_DWORD *)(a4 + v18), v31, a6, (icu::ByteSink *)v54, a7, v17);
        LOBYTE(v59) = v24 + v23;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a6 + 16))(a6, &v59, 1);
        if (!a7)
          goto LABEL_33;
        v32 = a7;
        v33 = 1;
        v34 = 1;
LABEL_32:
        result = (uint64_t)icu::Edits::addReplace(v32, v33, v34);
LABEL_33:
        v18 = v21;
        goto LABEL_87;
      }
LABEL_11:
      HIDWORD(v57) = v20;
      LODWORD(v58) = v21;
      v59 = 0;
      result = ucase_toFullUpper(v23, (uint64_t (*)(uint64_t, _QWORD))sub_18BC0854C, (uint64_t)v56, &v59, v53);
      if ((result & 0x80000000) == 0)
      {
        v25 = result;
        if (*a8 <= 0)
        {
          v26 = (const unsigned __int8 *)(v20 - v18);
          if ((int)v26 >= 1)
            icu::ByteSinkUtil::appendNonEmptyUnchanged((_DWORD *)(a4 + v18), v26, a6, (icu::ByteSink *)v54, a7, v17);
        }
        v27 = (icu::ByteSinkUtil *)(v21 - v20);
        if (v25 > 0x1F)
          result = icu::ByteSinkUtil::appendCodePoint(v27, v25, a6, a7, v16);
        else
          result = icu::ByteSinkUtil::appendChange((int)v27, v59, v25, a6, a7, a8);
        v18 = v21;
      }
      v19 = *a8;
      if (*a8 <= 0)
      {
        v20 = v21;
        if ((int)v21 < a5)
          continue;
      }
      goto LABEL_97;
    }
    if (v23 > 0xE2)
      break;
    if ((v22 + 62) > 3u || (int)v21 >= a5)
      goto LABEL_41;
    v29 = *(unsigned __int8 *)(a4 + v21) ^ 0x80;
    if (v29 > 0x3F)
      goto LABEL_41;
    LODWORD(v21) = v20 + 2;
    v23 = (((_DWORD)v23 << 6) - 12288) | (unint64_t)v29;
    v30 = *((unsigned __int8 *)v55 + v23);
    if (*((_BYTE *)v55 + v23))
    {
      if (v30 == 128)
      {
        if ((v23 & 0x80000000) != 0)
          goto LABEL_97;
        goto LABEL_11;
      }
      v48 = (const unsigned __int8 *)(v20 - v18);
      if ((int)v48 >= 1)
        icu::ByteSinkUtil::appendNonEmptyUnchanged((_DWORD *)(a4 + v18), v48, a6, (icu::ByteSink *)v54, a7, v17);
      result = icu::ByteSinkUtil::appendTwoBytes((int)v23 + (char)v30, a6);
      if (!a7)
        goto LABEL_33;
      v32 = a7;
      v33 = 2;
      v34 = 2;
      goto LABEL_32;
    }
LABEL_87:
    v19 = *a8;
    v49 = *a8 <= 0 && (int)v21 < a5;
    v20 = v21;
    if (!v49)
      goto LABEL_97;
  }
  v36 = (v22 < 0xEA || (v22 + 21) <= 1u) && v20 + 3 <= a5;
  if (v36 && *(char *)(a4 + v21) <= -65 && *(char *)(v20 + a4 + 2) < -64)
  {
    LODWORD(v21) = v20 + 3;
    goto LABEL_87;
  }
LABEL_41:
  if ((_DWORD)v21 == a5)
    goto LABEL_96;
  if (v23 < 0xE0)
  {
    if (v22 < 0xC2)
      goto LABEL_87;
    v39 = v23 & 0x1F;
LABEL_50:
    v40 = *(unsigned __int8 *)(a4 + (int)v21) ^ 0x80;
    if (v40 > 0x3F)
      goto LABEL_87;
    LODWORD(v23) = v40 | (v39 << 6);
    v41 = *(_QWORD *)v52;
    if (((v39 >> 5) & 0x1FFFFF) <= 0x1A)
    {
      v42 = v23 >> 5;
LABEL_71:
      v44 = (v40 & 0x1F) + 4 * *(unsigned __int16 *)(v41 + 2 * v42);
      goto LABEL_72;
    }
    if (!WORD1(v23))
    {
      if (v23 >> 10 >= 0x37)
        v43 = 0;
      else
        v43 = 320;
      v42 = v43 + (v23 >> 5);
      goto LABEL_71;
    }
    if (v23 < 0x110000)
    {
      if ((int)v23 < *(_DWORD *)(v52 + 44))
      {
        v42 = ((v23 >> 5) & 0x3F) + *(unsigned __int16 *)(v41 + 2 * ((v39 >> 5) + 2080));
        goto LABEL_71;
      }
      v44 = *(_DWORD *)(v52 + 48);
    }
    else
    {
      v44 = *(_DWORD *)(v52 + 24) + 128;
    }
LABEL_72:
    LODWORD(v21) = v21 + 1;
    v45 = *(unsigned __int16 *)(v41 + 2 * v44);
    if ((v45 & 8) != 0)
      goto LABEL_11;
    if (v45 >= 0x80 && (v45 & 3) == 1)
    {
      v47 = (const unsigned __int8 *)(v20 - v18);
      if ((int)v47 >= 1)
        icu::ByteSinkUtil::appendNonEmptyUnchanged((_DWORD *)(a4 + v18), v47, a6, (icu::ByteSink *)v54, a7, v17);
      result = icu::ByteSinkUtil::appendCodePoint((icu::ByteSinkUtil *)(v21 - v20), (int)v23 + ((__int16)v45 >> 7), a6, a7, v16);
      goto LABEL_33;
    }
    goto LABEL_87;
  }
  if (v22 <= 0xEF)
  {
    v37 = v22 & 0xF;
    if (((a00000000000000[v37] >> (*(_BYTE *)(a4 + v21) >> 5)) & 1) == 0)
      goto LABEL_87;
    v38 = *(_BYTE *)(a4 + v21) & 0x3F;
    goto LABEL_46;
  }
  if (v22 > 0xF4)
    goto LABEL_87;
  v37 = *(unsigned __int8 *)(a4 + v21);
  if (((byte_18BDEFCE8[v37 >> 4] >> (v23 + 16)) & 1) == 0)
    goto LABEL_87;
  v21 = v20 + 2;
  if (v20 + 2 != a5)
  {
    v38 = *(unsigned __int8 *)(a4 + v21) ^ 0x80;
    if (v38 > 0x3F)
      goto LABEL_87;
    LODWORD(v37) = v37 & 0x3F | (((_DWORD)v23 - 240) << 6);
LABEL_46:
    LODWORD(v21) = v21 + 1;
    if ((_DWORD)v21 == a5)
      goto LABEL_96;
    v39 = v38 | ((_DWORD)v37 << 6);
    goto LABEL_50;
  }
LABEL_96:
  LODWORD(v21) = a5;
LABEL_97:
  v50 = (const unsigned __int8 *)(v21 - v18);
  if (v19 <= 0 && (int)v50 >= 1)
    return (uint64_t)icu::ByteSinkUtil::appendNonEmptyUnchanged((_DWORD *)(a4 + v18), v50, a6, (icu::ByteSink *)v54, a7, v17);
  return result;
}

uint64_t ucasemap_utf8FoldCase(uint64_t a1, char *a2, int a3, char *__s, size_t a5, UErrorCode *a6)
{
  return sub_18BC09478(1, *(unsigned int *)(a1 + 44), 0, a2, a3, __s, a5, (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, __int128 *, icu::Edits *, UErrorCode *))sub_18BC09C1C, 0, a6);
}

uint64_t sub_18BC09C1C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, icu::Edits *a7, int *a8)
{
  return sub_18BC086C0(-1, a2, a4, 0, 0, a5, a6, a7, a8);
}

uint64_t icu::CaseMap::utf8ToLower(unsigned __int8 *a1, uint64_t a2, char *a3, size_t a4, uint64_t a5, icu::Edits *a6, UErrorCode *a7)
{
  uint64_t v13;

  v13 = sub_18BC6BDA0(a1);
  return sub_18BC09364(v13, a2, 0, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, uint64_t, icu::Edits *, UErrorCode *))sub_18BC09658, a5, a6, a7);
}

uint64_t icu::CaseMap::utf8ToUpper(unsigned __int8 *a1, uint64_t a2, char *a3, size_t a4, uint64_t a5, icu::Edits *a6, UErrorCode *a7)
{
  uint64_t v13;

  v13 = sub_18BC6BDA0(a1);
  return sub_18BC09364(v13, a2, 0, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, uint64_t, icu::Edits *, UErrorCode *))sub_18BC096E8, a5, a6, a7);
}

uint64_t icu::CaseMap::utf8Fold(uint64_t a1, char *a2, size_t a3, uint64_t a4, icu::Edits *a5, UErrorCode *a6)
{
  return sub_18BC09364(1, a1, 0, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, uint64_t, icu::Edits *, UErrorCode *))sub_18BC09C1C, a4, a5, a6);
}

uint64_t icu::CaseMap::utf8ToLower(icu::CaseMap *this, const char *a2, char *a3, const char *a4, char *a5, char *a6, icu::Edits *a7, UErrorCode *a8, UErrorCode *a9)
{
  int v11;
  uint64_t v16;

  v11 = (int)a6;
  v16 = sub_18BC6BDA0((unsigned __int8 *)this);
  return sub_18BC09478(v16, (uint64_t)a2, 0, a5, v11, a3, (size_t)a4, (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, __int128 *, icu::Edits *, UErrorCode *))sub_18BC09658, a7, a8);
}

uint64_t icu::CaseMap::utf8ToUpper(icu::CaseMap *this, const char *a2, char *a3, const char *a4, char *a5, char *a6, icu::Edits *a7, UErrorCode *a8, UErrorCode *a9)
{
  int v11;
  uint64_t v16;

  v11 = (int)a6;
  v16 = sub_18BC6BDA0((unsigned __int8 *)this);
  return sub_18BC09478(v16, (uint64_t)a2, 0, a5, v11, a3, (size_t)a4, (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, __int128 *, icu::Edits *, UErrorCode *))sub_18BC096E8, a7, a8);
}

uint64_t icu::CaseMap::utf8Fold(icu::CaseMap *this, char *__s, const char *a3, char *a4, char *a5, icu::Edits *a6, UErrorCode *a7, UErrorCode *a8)
{
  return sub_18BC09478(1, (uint64_t)this, 0, a4, (int)a5, __s, (size_t)a3, (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, __int128 *, icu::Edits *, UErrorCode *))sub_18BC09C1C, a6, a7);
}

uint64_t icu::CaseMap::utf8ToTitle(uint64_t result, uint64_t a2, uint64_t a3, char *a4, size_t a5, uint64_t a6, icu::Edits *a7, UErrorCode *a8)
{
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  UText ut;

  if (*(int *)a8 <= 0)
  {
    v15 = (char *)result;
    memset(&ut, 0, sizeof(ut));
    ut.magic = 878368812;
    ut.sizeOfStruct = 144;
    utext_openUTF8(&ut, a4, (int)a5, a8);
    v19 = 0;
    v16 = sub_18BC69468(0, v15, a2, a3, &v19, (const icu::Locale *)a8);
    if (v16)
    {
      v17 = v16;
      (*(void (**)(uint64_t, UText *, UErrorCode *))(*(_QWORD *)v16 + 64))(v16, &ut, a8);
      v18 = sub_18BC6BDA0((unsigned __int8 *)v15);
      sub_18BC09364(v18, a2, v17, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, uint64_t, icu::Edits *, UErrorCode *))sub_18BC07DD8, a6, a7, a8);
    }
    utext_close(&ut);
    result = v19;
    if (v19)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  return result;
}

uint64_t icu::CaseMap::utf8ToTitle(icu::CaseMap *this, const char *a2, uint64_t a3, icu::BreakIterator *s, const char *a5, char *a6, char *a7, icu::Edits *a8, UErrorCode *status, UErrorCode *a10)
{
  uint64_t v10;
  int v12;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  UText ut;

  if (*(int *)status > 0)
    return 0;
  v12 = (int)a7;
  memset(&ut, 0, sizeof(ut));
  ut.magic = 878368812;
  ut.sizeOfStruct = 144;
  utext_openUTF8(&ut, (const char *)s, (int)a5, status);
  v23 = 0;
  v19 = sub_18BC69468(0, (const char *)this, (char)a2, a3, &v23, (const icu::Locale *)status);
  if (v19)
  {
    v20 = v19;
    (*(void (**)(uint64_t, UText *, UErrorCode *))(*(_QWORD *)v19 + 64))(v19, &ut, status);
    v21 = sub_18BC6BDA0((unsigned __int8 *)this);
    v10 = sub_18BC09478(v21, (uint64_t)a2, v20, a6, v12, (char *)s, (size_t)a5, (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, __int128 *, icu::Edits *, UErrorCode *))sub_18BC07DD8, a8, status);
  }
  else
  {
    v10 = 0;
  }
  utext_close(&ut);
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  return v10;
}

uint64_t ucasemap_getBreakIterator(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ucasemap_setBreakIterator(uint64_t result, uint64_t a2, int *a3)
{
  _QWORD *v4;

  if (*a3 <= 0)
  {
    v4 = (_QWORD *)result;
    result = *(_QWORD *)result;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *v4 = a2;
  }
  return result;
}

uint64_t ucasemap_utf8ToTitle(uint64_t a1, char *a2, int a3, char *s, size_t a5, UErrorCode *status)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  UText ut;

  if (*(int *)status <= 0)
  {
    memset(&ut, 0, sizeof(ut));
    ut.magic = 878368812;
    ut.sizeOfStruct = 144;
    utext_openUTF8(&ut, s, (int)a5, status);
    if (*(int *)status <= 0)
    {
      v14 = *(_QWORD *)a1;
      if (!*(_QWORD *)a1)
      {
        v15 = 0;
        if (!sub_18BC69468(0, (const char *)(a1 + 8), *(_DWORD *)(a1 + 44), 0, &v15, (const icu::Locale *)status))
        {
          utext_close(&ut);
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          return 0;
        }
        v14 = v15;
        *(_QWORD *)a1 = v15;
      }
      (*(void (**)(uint64_t, UText *, UErrorCode *))(*(_QWORD *)v14 + 64))(v14, &ut, status);
      v12 = sub_18BC09478(*(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(_QWORD *)a1, a2, a3, s, a5, (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, __int128 *, icu::Edits *, UErrorCode *))sub_18BC07DD8, 0, status);
      utext_close(&ut);
      return v12;
    }
  }
  return 0;
}

UChar *u_catgets(uint64_t a1, unsigned int a2, unsigned int a3, UChar *s, int *a5, int *a6)
{
  char *v11;
  const UChar *StringByKey;
  _QWORD v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  memset(v14, 0, 24);
  if (a6)
  {
    if (*a6 <= 0)
    {
      v11 = (char *)v14 + (int)T_CString_integerToString(v14, a2, 0xAu);
      *v11 = 37;
      T_CString_integerToString(v11 + 1, a3, 0xAu);
      StringByKey = ures_getStringByKey(a1, (const char *)v14, a5, a6);
      if (*a6 < 1)
        return (UChar *)StringByKey;
    }
  }
  if (a5)
    *a5 = u_strlen(s);
  return s;
}

int8_t u_charType(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (c >> 11 <= 0x1A)
  {
    v1 = c >> 5;
LABEL_11:
    v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
    return word_18BDF71AC[v3] & 0x1F;
  }
  if (!HIWORD(c))
  {
    if (c >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (c >> 5);
    goto LABEL_11;
  }
  if (HIWORD(c) <= 0x10u)
  {
    v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 4820;
  return word_18BDF71AC[v3] & 0x1F;
}

void u_enumCharTypes(UCharEnumTypeRange *enumRange, const void *context)
{
  _QWORD v2[2];

  if (enumRange)
  {
    v2[0] = enumRange;
    v2[1] = context;
    utrie2_enum((uint64_t)&off_1E224CAE0, (uint64_t (*)(uint64_t, uint64_t))sub_18BC0A480, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))sub_18BC0A488, (uint64_t)v2);
  }
}

uint64_t sub_18BC0A480(uint64_t a1, char a2)
{
  return a2 & 0x1F;
}

uint64_t sub_18BC0A488(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))a1)(*(_QWORD *)(a1 + 8), a2, (a3 + 1));
}

UBool u_islower(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (c >> 11 <= 0x1A)
  {
    v1 = c >> 5;
LABEL_11:
    v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
    return (word_18BDF71AC[v3] & 0x1F) == 2;
  }
  if (!HIWORD(c))
  {
    if (c >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (c >> 5);
    goto LABEL_11;
  }
  if (HIWORD(c) <= 0x10u)
  {
    v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 4820;
  return (word_18BDF71AC[v3] & 0x1F) == 2;
}

UBool u_isupper(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (c >> 11 <= 0x1A)
  {
    v1 = c >> 5;
LABEL_11:
    v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
    return (word_18BDF71AC[v3] & 0x1F) == 1;
  }
  if (!HIWORD(c))
  {
    if (c >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (c >> 5);
    goto LABEL_11;
  }
  if (HIWORD(c) <= 0x10u)
  {
    v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 4820;
  return (word_18BDF71AC[v3] & 0x1F) == 1;
}

UBool u_istitle(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (c >> 11 <= 0x1A)
  {
    v1 = c >> 5;
LABEL_11:
    v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
    return (word_18BDF71AC[v3] & 0x1F) == 3;
  }
  if (!HIWORD(c))
  {
    if (c >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (c >> 5);
    goto LABEL_11;
  }
  if (HIWORD(c) <= 0x10u)
  {
    v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 4820;
  return (word_18BDF71AC[v3] & 0x1F) == 3;
}

UBool u_isdigit(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (c >> 11 <= 0x1A)
  {
    v1 = c >> 5;
LABEL_11:
    v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
    return (word_18BDF71AC[v3] & 0x1F) == 9;
  }
  if (!HIWORD(c))
  {
    if (c >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (c >> 5);
    goto LABEL_11;
  }
  if (HIWORD(c) <= 0x10u)
  {
    v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 4820;
  return (word_18BDF71AC[v3] & 0x1F) == 9;
}

UBool u_isxdigit(UChar32 c)
{
  unsigned int v2;
  int v3;
  uint64_t v4;

  if ((c - 65) <= 0x25 && (c - 97) < 0xFFFFFFE6
    || (c - 65313) <= 0x25 && (c - 65345) < 0xFFFFFFE6)
  {
    return 1;
  }
  if (c >> 11 <= 0x1A)
  {
    v2 = c >> 5;
LABEL_16:
    v4 = (c & 0x1F) + 4 * word_18BDF71AC[v2];
    return (word_18BDF71AC[v4] & 0x1F) == 9;
  }
  if (!HIWORD(c))
  {
    if (c >> 10 >= 0x37)
      v3 = 0;
    else
      v3 = 320;
    v2 = v3 + (c >> 5);
    goto LABEL_16;
  }
  if (HIWORD(c) <= 0x10u)
  {
    v2 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    goto LABEL_16;
  }
  v4 = 4820;
  return (word_18BDF71AC[v4] & 0x1F) == 9;
}

UBool u_isalpha(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (c >> 11 <= 0x1A)
  {
    v1 = c >> 5;
LABEL_11:
    v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
    return ((1 << word_18BDF71AC[v3]) & 0x3E) != 0;
  }
  if (!HIWORD(c))
  {
    if (c >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (c >> 5);
    goto LABEL_11;
  }
  if (HIWORD(c) <= 0x10u)
  {
    v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 4820;
  return ((1 << word_18BDF71AC[v3]) & 0x3E) != 0;
}

UBool u_isUAlphabetic(UChar32 c)
{
  return (sub_18BC0A7DC(c, 1) >> 8) & 1;
}

uint64_t sub_18BC0A7DC(unsigned int a1, int a2)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  if (a2 > 2)
    return 0;
  if (a1 >> 11 <= 0x1A)
  {
    v3 = a1 >> 5;
LABEL_13:
    v5 = (a1 & 0x1F) + 4 * word_18BE0279C[v3];
    return dword_18BDEFD10[word_18BE0279C[v5] + a2];
  }
  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37)
      v4 = 0;
    else
      v4 = 320;
    v3 = v4 + (a1 >> 5);
    goto LABEL_13;
  }
  if (HIWORD(a1) <= 0x10u)
  {
    v3 = ((a1 >> 5) & 0x3F) + word_18BE0279C[(a1 >> 11) + 2080];
    goto LABEL_13;
  }
  v5 = 5496;
  return dword_18BDEFD10[word_18BE0279C[v5] + a2];
}

UBool u_isalnum(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (c >> 11 <= 0x1A)
  {
    v1 = c >> 5;
LABEL_11:
    v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
    return ((1 << word_18BDF71AC[v3]) & 0x23E) != 0;
  }
  if (!HIWORD(c))
  {
    if (c >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (c >> 5);
    goto LABEL_11;
  }
  if (HIWORD(c) <= 0x10u)
  {
    v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 4820;
  return ((1 << word_18BDF71AC[v3]) & 0x23E) != 0;
}

BOOL sub_18BC0A8F0(unsigned int a1)
{
  uint64_t v2;

  v2 = 1;
  if ((sub_18BC0A7DC(a1, 1) & 0x100) == 0)
    return u_isdigit(a1) != 0;
  return v2;
}

UBool u_isdefined(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (c >> 11 <= 0x1A)
  {
    v1 = c >> 5;
LABEL_11:
    v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
    return (word_18BDF71AC[v3] & 0x1F) != 0;
  }
  if (!HIWORD(c))
  {
    if (c >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (c >> 5);
    goto LABEL_11;
  }
  if (HIWORD(c) <= 0x10u)
  {
    v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 4820;
  return (word_18BDF71AC[v3] & 0x1F) != 0;
}

UBool u_isbase(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (c >> 11 <= 0x1A)
  {
    v1 = c >> 5;
LABEL_11:
    v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
    return ((1 << word_18BDF71AC[v3]) & 0xFBE) != 0;
  }
  if (!HIWORD(c))
  {
    if (c >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (c >> 5);
    goto LABEL_11;
  }
  if (HIWORD(c) <= 0x10u)
  {
    v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 4820;
  return ((1 << word_18BDF71AC[v3]) & 0xFBE) != 0;
}

UBool u_iscntrl(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (c >> 11 <= 0x1A)
  {
    v1 = c >> 5;
LABEL_11:
    v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
    return ((1 << word_18BDF71AC[v3]) & 0x1E000) != 0;
  }
  if (!HIWORD(c))
  {
    if (c >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (c >> 5);
    goto LABEL_11;
  }
  if (HIWORD(c) <= 0x10u)
  {
    v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 4820;
  return ((1 << word_18BDF71AC[v3]) & 0x1E000) != 0;
}

UBool u_isISOControl(UChar32 c)
{
  return c < 0xA0 && (c - 127) < 0xFFFFFFA1;
}

UBool u_isspace(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;
  UBool v4;

  if (c >> 11 > 0x1A)
  {
    if (HIWORD(c))
    {
      if (HIWORD(c) > 0x10u)
      {
        v3 = 4820;
        goto LABEL_12;
      }
      v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    }
    else
    {
      if (c >> 10 >= 0x37)
        v2 = 0;
      else
        v2 = 320;
      v1 = v2 + (c >> 5);
    }
  }
  else
  {
    v1 = c >> 5;
  }
  v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
LABEL_12:
  v4 = 1;
  if (((1 << word_18BDF71AC[v3]) & 0x7000) == 0)
    return c <= 159 && ((c - 9) < 5 || (c & 0xFFFFFFFC) == 28 || c == 133);
  return v4;
}

UBool u_isJavaSpaceChar(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (c >> 11 <= 0x1A)
  {
    v1 = c >> 5;
LABEL_11:
    v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
    return ((1 << word_18BDF71AC[v3]) & 0x7000) != 0;
  }
  if (!HIWORD(c))
  {
    if (c >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (c >> 5);
    goto LABEL_11;
  }
  if (HIWORD(c) <= 0x10u)
  {
    v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 4820;
  return ((1 << word_18BDF71AC[v3]) & 0x7000) != 0;
}

UBool u_isWhitespace(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (c >> 11 > 0x1A)
  {
    if (HIWORD(c))
    {
      if (HIWORD(c) > 0x10u)
      {
        v3 = 4820;
        goto LABEL_12;
      }
      v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    }
    else
    {
      if (c >> 10 >= 0x37)
        v2 = 0;
      else
        v2 = 320;
      v1 = v2 + (c >> 5);
    }
  }
  else
  {
    v1 = c >> 5;
  }
  v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
LABEL_12:
  if (((1 << word_18BDF71AC[v3]) & 0x7000) != 0)
    return c != 160 && c != 8239 && c != 8199;
  else
    return (c - 9) <= 0x16 && (c - 28) < 0xFFFFFFF2;
}

UBool u_isblank(UChar32 c)
{
  unsigned int v2;
  int v3;
  uint64_t v4;

  if (c <= 0x9F)
    return c == 9 || c == 32;
  if (c >> 11 <= 0x1A)
  {
    v2 = c >> 5;
LABEL_15:
    v4 = (c & 0x1F) + 4 * word_18BDF71AC[v2];
    return (word_18BDF71AC[v4] & 0x1F) == 12;
  }
  if (!HIWORD(c))
  {
    if (c >> 10 >= 0x37)
      v3 = 0;
    else
      v3 = 320;
    v2 = v3 + (c >> 5);
    goto LABEL_15;
  }
  if (HIWORD(c) <= 0x10u)
  {
    v2 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    goto LABEL_15;
  }
  v4 = 4820;
  return (word_18BDF71AC[v4] & 0x1F) == 12;
}

UBool u_isUWhiteSpace(UChar32 c)
{
  return sub_18BC0A7DC(c, 1) & 1;
}

UBool u_isprint(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (c >> 11 <= 0x1A)
  {
    v1 = c >> 5;
LABEL_11:
    v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
    return ((1 << word_18BDF71AC[v3]) & 0x78001) == 0;
  }
  if (!HIWORD(c))
  {
    if (c >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (c >> 5);
    goto LABEL_11;
  }
  if (HIWORD(c) <= 0x10u)
  {
    v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 4820;
  return ((1 << word_18BDF71AC[v3]) & 0x78001) == 0;
}

BOOL sub_18BC0ADF4(unsigned int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  if (a1 >> 11 > 0x1A)
  {
    if (HIWORD(a1))
    {
      if (HIWORD(a1) > 0x10u)
      {
        v3 = 4820;
        return (word_18BDF71AC[v3] & 0x1F) == 0xC || sub_18BC0AE90(a1);
      }
      v1 = ((a1 >> 5) & 0x3F) + word_18BDF71AC[(a1 >> 11) + 2080];
    }
    else
    {
      if (a1 >> 10 >= 0x37)
        v2 = 0;
      else
        v2 = 320;
      v1 = v2 + (a1 >> 5);
    }
  }
  else
  {
    v1 = a1 >> 5;
  }
  v3 = (a1 & 0x1F) + 4 * word_18BDF71AC[v1];
  return (word_18BDF71AC[v3] & 0x1F) == 0xC || sub_18BC0AE90(a1);
}

BOOL sub_18BC0AE90(unsigned int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  if (a1 >> 11 <= 0x1A)
  {
    v1 = a1 >> 5;
LABEL_11:
    v3 = (a1 & 0x1F) + 4 * word_18BDF71AC[v1];
    return ((1 << word_18BDF71AC[v3]) & 0x4F001) == 0;
  }
  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (a1 >> 5);
    goto LABEL_11;
  }
  if (HIWORD(a1) <= 0x10u)
  {
    v1 = ((a1 >> 5) & 0x3F) + word_18BDF71AC[(a1 >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 4820;
  return ((1 << word_18BDF71AC[v3]) & 0x4F001) == 0;
}

UBool u_isgraph(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (c >> 11 <= 0x1A)
  {
    v1 = c >> 5;
LABEL_11:
    v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
    return ((1 << word_18BDF71AC[v3]) & 0x5F001) == 0;
  }
  if (!HIWORD(c))
  {
    if (c >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (c >> 5);
    goto LABEL_11;
  }
  if (HIWORD(c) <= 0x10u)
  {
    v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 4820;
  return ((1 << word_18BDF71AC[v3]) & 0x5F001) == 0;
}

UBool u_ispunct(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (c >> 11 <= 0x1A)
  {
    v1 = c >> 5;
LABEL_11:
    v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
    return ((1 << word_18BDF71AC[v3]) & 0x30F80000) != 0;
  }
  if (!HIWORD(c))
  {
    if (c >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (c >> 5);
    goto LABEL_11;
  }
  if (HIWORD(c) <= 0x10u)
  {
    v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 4820;
  return ((1 << word_18BDF71AC[v3]) & 0x30F80000) != 0;
}

UBool u_isIDIgnorable(UChar32 c)
{
  BOOL v2;
  UBool v3;
  unsigned int v5;
  int v6;
  uint64_t v7;

  if (c > 159)
  {
    if (c >> 11 > 0x1A)
    {
      if (HIWORD(c))
      {
        if (HIWORD(c) > 0x10u)
        {
          v7 = 4820;
          return (word_18BDF71AC[v7] & 0x1F) == 16;
        }
        v5 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
      }
      else
      {
        if (c >> 10 >= 0x37)
          v6 = 0;
        else
          v6 = 320;
        v5 = v6 + (c >> 5);
      }
    }
    else
    {
      v5 = c >> 5;
    }
    v7 = (c & 0x1F) + 4 * word_18BDF71AC[v5];
    return (word_18BDF71AC[v7] & 0x1F) == 16;
  }
  v2 = (c - 32) < 0xFFFFFFE9 || (c - 14) < 0xE;
  v3 = (c - 32) >= 0x5F && v2;
  if (c <= 0x9F)
    return v3;
  else
    return 0;
}

UBool u_isJavaIDStart(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  if (c >> 11 <= 0x1A)
  {
    v1 = c >> 5;
LABEL_11:
    v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
    return ((1 << word_18BDF71AC[v3]) & 0x240003E) != 0;
  }
  if (!HIWORD(c))
  {
    if (c >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (c >> 5);
    goto LABEL_11;
  }
  if (HIWORD(c) <= 0x10u)
  {
    v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 4820;
  return ((1 << word_18BDF71AC[v3]) & 0x240003E) != 0;
}

UBool u_isJavaIDPart(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;
  UBool v4;

  if (c >> 11 > 0x1A)
  {
    if (HIWORD(c))
    {
      if (HIWORD(c) > 0x10u)
      {
        v3 = 4820;
        goto LABEL_12;
      }
      v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    }
    else
    {
      if (c >> 10 >= 0x37)
        v2 = 0;
      else
        v2 = 320;
      v1 = v2 + (c >> 5);
    }
  }
  else
  {
    v1 = c >> 5;
  }
  v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
LABEL_12:
  v4 = 1;
  if (((1 << word_18BDF71AC[v3]) & 0x240077E) == 0)
    return u_isIDIgnorable(c) != 0;
  return v4;
}

int32_t u_charDigitValue(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;

  if (c >> 11 > 0x1A)
  {
    if (HIWORD(c))
    {
      if (HIWORD(c) > 0x10u)
      {
        v3 = 4820;
        goto LABEL_12;
      }
      v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    }
    else
    {
      if (c >> 10 >= 0x37)
        v2 = 0;
      else
        v2 = 320;
      v1 = v2 + (c >> 5);
    }
  }
  else
  {
    v1 = c >> 5;
  }
  v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
LABEL_12:
  v4 = word_18BDF71AC[v3];
  if (v4 >= 0x2C0)
    return -1;
  else
    return (v4 >> 6) - 1;
}

double u_getNumericValue(UChar32 c)
{
  unsigned int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  double result;
  unsigned int v6;
  double v8;
  double v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  double v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;

  if (c >> 11 > 0x1A)
  {
    if (HIWORD(c))
    {
      if (HIWORD(c) > 0x10u)
      {
        v3 = 4820;
        goto LABEL_12;
      }
      v1 = ((c >> 5) & 0x3F) + word_18BDF71AC[(c >> 11) + 2080];
    }
    else
    {
      if (c >> 10 >= 0x37)
        v2 = 0;
      else
        v2 = 320;
      v1 = v2 + (c >> 5);
    }
  }
  else
  {
    v1 = c >> 5;
  }
  v3 = (c & 0x1F) + 4 * word_18BDF71AC[v1];
LABEL_12:
  v4 = word_18BDF71AC[v3];
  result = -123456789.0;
  if (v4 < 0x40)
    return result;
  v6 = v4 >> 6;
  if (v4 <= 0x2BF)
    return (double)(int)(v6 - 1);
  if (v4 <= 0x53F)
    return (double)(int)(v6 - 11);
  if (v4 >> 10 <= 0xA)
    return (double)(int)(v6 - 21);
  if (v4 >> 11 <= 0xE)
  {
    v8 = (double)(int)((v4 >> 10) - 12);
    v9 = (double)(int)(((v4 >> 6) & 0xF) + 1);
    return v8 / v9;
  }
  if (v4 >> 14 > 2)
  {
    v14 = v4 >> 8;
    if (v4 >> 8 <= 0xC8)
      return (double)(int)(((v4 >> 8) - 191) * dword_18BE12920[v4 >> 6]);
    if (v14 > 0xCE)
    {
      if (v14 > 0xD2)
        return result;
      v15 = (2 * (v4 >> 6)) | 1;
      v16 = (v6 - 828) >> 2;
      v17 = 32;
    }
    else
    {
      v15 = (2 * (v4 >> 6)) | 1;
      v16 = (v6 - 804) >> 2;
      v17 = 20;
    }
    v8 = (double)v15;
    v9 = (double)(v17 << v16);
    return v8 / v9;
  }
  v10 = (v4 >> 11) - 14;
  v11 = (v4 >> 6) & 0x1F;
  v12 = v11 + 2;
  result = (double)v10;
  if (v11 >= 2)
  {
    do
    {
      result = result * 10000.0;
      v12 -= 4;
    }
    while (v12 > 3);
  }
  switch(v12)
  {
    case 1u:
      v13 = 10.0;
      return result * v13;
    case 2u:
      v13 = 100.0;
      return result * v13;
    case 3u:
      v13 = 1000.0;
      return result * v13;
  }
  return result;
}

int32_t u_digit(UChar32 ch, int8_t radix)
{
  int v2;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;

  v2 = radix;
  if ((radix - 2) > 0x22)
  {
    v8 = -1;
  }
  else
  {
    v4 = u_charDigitValue(ch);
    if ((ch - 65313) >= 0x1A)
      v5 = v4;
    else
      v5 = ch - 23;
    if ((ch - 65345) <= 0x19)
      v6 = ch - 55;
    else
      v6 = v5;
    if ((ch - 65) <= 0x19)
      v7 = ch - 55;
    else
      v7 = v6;
    if ((ch - 97) <= 0x19)
      v8 = ch - 87;
    else
      v8 = v7;
    if ((v4 & 0x80) == 0)
      v8 = v4;
  }
  if (v8 >= v2)
    return -1;
  else
    return v8;
}

UChar32 u_forDigit(int32_t digit, int8_t radix)
{
  UChar32 v2;

  v2 = digit + 87;
  if (digit <= 9)
    v2 = digit + 48;
  if ((radix - 2) <= 0x22 && radix > digit)
    return v2;
  else
    return 0;
}

void u_getUnicodeVersion(UVersionInfo versionArray)
{
  if (versionArray)
    *(_DWORD *)versionArray = 271;
}

uint64_t sub_18BC0B528(unsigned int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  if (a1 >> 11 <= 0x1A)
  {
    v1 = a1 >> 5;
LABEL_11:
    v3 = (a1 & 0x1F) + 4 * word_18BDF71AC[v1];
    return word_18BDF71AC[v3];
  }
  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37)
      v2 = 0;
    else
      v2 = 320;
    v1 = v2 + (a1 >> 5);
    goto LABEL_11;
  }
  if (HIWORD(a1) <= 0x10u)
  {
    v1 = ((a1 >> 5) & 0x3F) + word_18BDF71AC[(a1 >> 11) + 2080];
    goto LABEL_11;
  }
  v3 = 4820;
  return word_18BDF71AC[v3];
}

uint64_t sub_18BC0B598(int a1)
{
  unsigned int v1;

  if (a1 == 2)
    v1 = 49764913;
  else
    v1 = 0;
  if (a1)
    return v1;
  else
    return 739527;
}

void u_charAge(UChar32 c, UVersionInfo versionArray)
{
  unsigned int v3;

  if (versionArray)
  {
    v3 = sub_18BC0A7DC(c, 0);
    *versionArray = v3 >> 28;
    versionArray[1] = HIBYTE(v3) & 0xF;
    *((_WORD *)versionArray + 1) = 0;
  }
}

uint64_t uscript_getScript(unsigned int a1, int *a2)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0xFFFFFFFFLL;
  if (*a2 > 0)
    return 0xFFFFFFFFLL;
  if (a1 >= 0x110000)
  {
    *a2 = 1;
    return 0xFFFFFFFFLL;
  }
  v3 = sub_18BC0A7DC(a1, 0);
  v4 = v3 & 0xF000FF;
  result = v3 | (((v3 >> 20) & 3) << 8);
  if (v4 >= 0x400000)
  {
    if (v4 >= 0x800000)
    {
      if (v4 >= 0xC00000)
        return word_18BDF6F58[result];
      else
        return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL uscript_hasScript(unsigned int a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  char *v5;
  __int16 v7;
  unsigned int v8;

  v3 = sub_18BC0A7DC(a1, 0);
  v4 = v3 | (((v3 >> 20) & 3) << 8);
  if (((v3 >> 22) & 3) != 0)
  {
    v5 = (char *)&unk_18BDF6F58 + 2 * v4;
    if ((v3 & 0xF000FF) >= 0xC00000)
      v5 = (char *)&unk_18BDF6F58 + 2 * *((unsigned __int16 *)v5 + 1);
    if (a2 >> 15)
      return 0;
    do
    {
      v8 = *(unsigned __int16 *)v5;
      v5 += 2;
      v7 = v8;
    }
    while (v8 < a2);
    v4 = v7 & 0x7FFF;
  }
  return v4 == a2;
}

uint64_t uscript_getScriptExtensions(unsigned int a1, int *a2, int a3, int *a4)
{
  uint64_t result;
  int v8;
  unsigned int v9;
  int v10;
  unsigned __int16 *v11;
  __int16 v12;
  __int16 v13;

  if (!a4)
    return 0;
  if (*a4 > 0)
    return 0;
  if (a3 < 0 || !a2 && a3)
  {
    result = 0;
    v8 = 1;
LABEL_9:
    *a4 = v8;
    return result;
  }
  v9 = sub_18BC0A7DC(a1, 0);
  v10 = v9 | (((v9 >> 20) & 3) << 8);
  if (((v9 >> 22) & 3) != 0)
  {
    v11 = &word_18BDF6F58[v10];
    if ((v9 & 0xF000FF) >= 0xC00000)
      v11 = &word_18BDF6F58[v11[1]];
    result = 0;
    do
    {
      while (1)
      {
        v13 = *v11++;
        v12 = v13;
        if ((int)result >= a3)
          break;
        a2[result++] = v12 & 0x7FFF;
        if (v12 < 0)
          return result;
      }
      ++result;
    }
    while ((v12 & 0x8000) == 0);
    v8 = 15;
    goto LABEL_9;
  }
  if (a3)
    *a2 = v10;
  else
    *a4 = 15;
  return 1;
}

UBlockCode ublock_getCode(UChar32 c)
{
  return (sub_18BC0A7DC(c, 0) >> 8) & 0x1FF;
}

uint64_t sub_18BC0B81C(uint64_t result, int *a2)
{
  _QWORD *v2;

  if (*a2 <= 0)
  {
    v2 = (_QWORD *)result;
    utrie2_enum((uint64_t)&off_1E224CAE0, 0, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))sub_18BC0BA40, result);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 9);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 10);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 14);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 28);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 32);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 133);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 134);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 127);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 8202);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 8208);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 8298);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 8304);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 65279);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 65280);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 160);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 161);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 8199);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 8200);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 8239);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 8240);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 97);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 123);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 65);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 91);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 65345);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 65371);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 65313);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 65339);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 103);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 71);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 65351);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 65319);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 8288);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 65520);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 65532);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 917504);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 921600);
    ((void (*)(_QWORD, uint64_t))v2[1])(*v2, 847);
    return ((uint64_t (*)(_QWORD, uint64_t))v2[1])(*v2, 848);
  }
  return result;
}

uint64_t sub_18BC0BA40(uint64_t a1)
{
  (*(void (**)(_QWORD))(a1 + 8))(*(_QWORD *)a1);
  return 1;
}

uint64_t sub_18BC0BA5C(uint64_t result, int *a2)
{
  if (*a2 <= 0)
    return utrie2_enum((uint64_t)&off_1E224CB30, 0, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))sub_18BC0BA40, result);
  return result;
}

void icu::UCharsTrie::~UCharsTrie(void **this)
{
  uprv_free(*this);
}

{
  uprv_free(*this);
}

uint64_t icu::UCharsTrie::current(icu::UCharsTrie *this)
{
  unsigned __int16 *v1;
  unsigned int v2;

  v1 = (unsigned __int16 *)*((_QWORD *)this + 2);
  if (!v1)
    return 0;
  if ((*((_DWORD *)this + 6) & 0x80000000) != 0)
  {
    v2 = *v1;
    if (v2 >= 0x40)
      return (v2 >> 15) ^ 3;
  }
  return 1;
}

uint64_t icu::UCharsTrie::firstForCodePoint(icu::UCharsTrie *this, int a2)
{
  __int16 v2;

  v2 = a2;
  if (a2 >= 0x10000)
  {
    *((_DWORD *)this + 6) = -1;
    if ((icu::UCharsTrie::nextImpl((uint64_t)this, *((unsigned __int16 **)this + 1), (unsigned __int16)((a2 >> 10) - 10304)) & 1) != 0)return icu::UCharsTrie::next(this, v2 & 0x3FF | 0xDC00u);
    else
      return 0;
  }
  else
  {
    *((_DWORD *)this + 6) = -1;
    return icu::UCharsTrie::nextImpl((uint64_t)this, *((unsigned __int16 **)this + 1), a2);
  }
}

uint64_t icu::UCharsTrie::next(icu::UCharsTrie *this, int a2)
{
  unsigned __int16 *v3;
  int v4;
  unsigned __int16 *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v3 = (unsigned __int16 *)*((_QWORD *)this + 2);
  if (!v3)
    return 0;
  v4 = *((_DWORD *)this + 6);
  if (v4 < 0)
    return icu::UCharsTrie::nextImpl((uint64_t)this, v3, a2);
  v6 = *v3;
  v5 = v3 + 1;
  if (v6 == a2)
  {
    *((_DWORD *)this + 6) = v4 - 1;
    *((_QWORD *)this + 2) = v5;
    if (v4)
      return 1;
    v7 = *v5;
    if (v7 < 0x40)
      return 1;
    else
      return (v7 >> 15) ^ 3;
  }
  else
  {
    v8 = 0;
    *((_QWORD *)this + 2) = 0;
  }
  return v8;
}

uint64_t icu::UCharsTrie::nextForCodePoint(icu::UCharsTrie *this, int a2)
{
  int v2;

  v2 = a2;
  if (a2 >= 0x10000)
  {
    if ((icu::UCharsTrie::next(this, (unsigned __int16)((a2 >> 10) - 10304)) & 1) == 0)
      return 0;
    v2 = v2 & 0x3FF | 0xDC00;
  }
  return icu::UCharsTrie::next(this, v2);
}

uint64_t icu::UCharsTrie::branchNext(uint64_t a1, unsigned __int16 *a2, int a3, int a4)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned __int16 *v12;
  int v13;
  __int16 *v14;
  unsigned int v15;
  unsigned __int16 *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned __int16 *v20;
  unsigned int v21;

  if (!a3)
  {
    v4 = *a2++;
    a3 = v4;
  }
  v5 = a3 + 1;
  if (a3 < 5)
  {
    v6 = a3 + 1;
  }
  else
  {
    do
    {
      v6 = v5 >> 1;
      if (*a2 <= a4)
      {
        v6 = v5 - v6;
        v9 = a2[1];
        v10 = v9 >> 10;
        v11 = v9 == 0xFFFF;
        v12 = a2 + 3;
        if (v11)
          v12 = a2 + 4;
        if (v10 >= 0x3F)
          a2 = v12;
        else
          a2 += 2;
      }
      else
      {
        v7 = a2[1];
        if (v7 >> 10 < 0x3F)
        {
          v8 = a2 + 2;
        }
        else if (v7 == 0xFFFF)
        {
          v7 = a2[3] | (a2[2] << 16);
          v8 = a2 + 4;
        }
        else
        {
          v8 = a2 + 3;
          v7 = (a2[2] | (v7 << 16)) + 0x4000000;
        }
        a2 = &v8[v7];
      }
      v5 = v6;
    }
    while (v6 > 5);
  }
  v13 = v6 + 1;
  while (1)
  {
    v14 = (__int16 *)(a2 + 1);
    if (*a2 == a4)
      break;
    v15 = a2[1] & 0x7FFF;
    v16 = a2 + 4;
    if (v15 != 0x7FFF)
      v16 = a2 + 3;
    if (v15 >= 0x4000)
      a2 = v16;
    else
      a2 += 2;
    if (--v13 <= 2)
    {
      if (*a2 == a4)
      {
        v17 = a2[1];
        *(_QWORD *)(a1 + 16) = a2 + 1;
        LODWORD(v18) = (v17 >> 15) ^ 3;
        if (v17 >= 0x40)
          return v18;
        else
          return 1;
      }
      else
      {
        v18 = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      return v18;
    }
  }
  if (*v14 < 0)
  {
    v18 = 2;
  }
  else
  {
    v19 = (unsigned __int16)*v14;
    if (v19 >= 0x4000)
    {
      if (v19 > 0x7FFE)
      {
        v19 = a2[3] | (a2[2] << 16);
        v20 = a2 + 4;
      }
      else
      {
        v20 = a2 + 3;
        v19 = (a2[2] | (v19 << 16)) - 0x40000000;
      }
    }
    else
    {
      v20 = a2 + 2;
    }
    v14 = (__int16 *)&v20[v19];
    v21 = (unsigned __int16)*v14;
    if (v21 < 0x40)
      v18 = 1;
    else
      v18 = (v21 >> 15) ^ 3;
  }
  *(_QWORD *)(a1 + 16) = v14;
  return v18;
}

uint64_t icu::UCharsTrie::nextImpl(uint64_t a1, unsigned __int16 *a2, int a3)
{
  unsigned __int16 *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned __int16 *v8;
  unsigned __int16 *v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;

  v6 = *a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 < 0x30)
    return icu::UCharsTrie::branchNext(a1, v4, v5, a3);
  v7 = v5 & 0x3F;
  while (v5 > 0x3F)
  {
    if (v5 >> 15)
      goto LABEL_17;
    v8 = v4 + 2;
    if (v5 >> 6 <= 0x1FE)
      v8 = v4 + 1;
    if (v5 >> 6 >= 0x101)
      v4 = v8;
    v5 = v7;
    if (v7 < 0x30)
    {
      v5 = v7;
      return icu::UCharsTrie::branchNext(a1, v4, v5, a3);
    }
  }
  v11 = *v4;
  v10 = v4 + 1;
  if (v11 != a3)
  {
LABEL_17:
    v14 = 0;
    *(_QWORD *)(a1 + 16) = 0;
    return v14;
  }
  *(_DWORD *)(a1 + 24) = v5 - 49;
  *(_QWORD *)(a1 + 16) = v10;
  if (v5 > 0x30)
    return 1;
  v12 = *v10;
  v13 = v12 >= 0x40;
  LODWORD(v14) = (v12 >> 15) ^ 3;
  if (v13)
    return v14;
  else
    return 1;
}

uint64_t icu::UCharsTrie::next(uint64_t a1, _WORD **a2, int a3)
{
  int v3;
  _WORD *v5;
  unsigned __int16 *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t result;
  unsigned __int16 *v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;

  v3 = a3;
  v5 = *a2;
  if ((a3 & 0x80000000) == 0)
  {
    if (a3)
      goto LABEL_3;
LABEL_45:
    v20 = *(unsigned __int16 **)(a1 + 16);
    if (v20)
    {
      if ((*(_DWORD *)(a1 + 24) & 0x80000000) != 0)
      {
        v21 = *v20;
        if (v21 >= 0x40)
          return (v21 >> 15) ^ 3;
      }
      return 1;
    }
    return 0;
  }
  if (!*v5)
    goto LABEL_45;
LABEL_3:
  v6 = *(unsigned __int16 **)(a1 + 16);
  if (!v6)
    return 0;
  v7 = *(_DWORD *)(a1 + 24);
  if (a3 < 0)
    goto LABEL_14;
  while (v3)
  {
    v8 = 0;
    if (v7 >= -1)
      v9 = -1;
    else
      v9 = v7;
    v10 = 1 - v3;
    v11 = v7;
    while (1)
    {
      v12 = (unsigned __int16)v5[v8];
      if (v11 < 0)
        break;
      if (v12 != v6[v8])
      {
LABEL_50:
        result = 0;
        *(_QWORD *)(a1 + 16) = 0;
        return result;
      }
      --v11;
      ++v8;
      if (++v10 == 1)
      {
        v6 += (v3 - 1) + 1;
        v7 -= v3;
        goto LABEL_51;
      }
    }
    v6 = (unsigned __int16 *)((char *)v6 + v8 * 2);
    v5 = (_WORD *)((char *)v5 + v8 * 2 + 2);
    v3 = -v10;
    while (1)
    {
      *(_DWORD *)(a1 + 24) = v9;
LABEL_25:
      v16 = *v6;
      v14 = v6 + 1;
      v15 = v16;
      v17 = v16 & 0x3F;
      while (1)
      {
        if (v15 <= 0x2F)
        {
          result = icu::UCharsTrie::branchNext(a1, v14, v15, v12);
          if (!(_DWORD)result)
            return result;
          if (v3 < 0)
          {
            v12 = (unsigned __int16)*v5;
            if (!*v5)
              return result;
          }
          else
          {
            if (!v3)
              return result;
            v12 = (unsigned __int16)*v5;
            --v3;
          }
          if ((_DWORD)result != 2)
          {
            ++v5;
            v6 = *(unsigned __int16 **)(a1 + 16);
            goto LABEL_25;
          }
          goto LABEL_50;
        }
        if (v15 <= 0x3F)
          break;
        if (v15 >= 0x8000)
          goto LABEL_50;
        v18 = v15 >> 6;
        v15 = v17;
        if (v18 >= 0x101)
        {
          if (v18 <= 0x1FE)
            ++v14;
          else
            v14 += 2;
          v15 = v17;
        }
      }
      if (v12 != *v14)
        goto LABEL_50;
      v6 = v14 + 1;
      v7 = v15 - 49;
      if ((v3 & 0x80000000) == 0)
        break;
LABEL_14:
      v12 = (unsigned __int16)*v5;
      if (!*v5)
        goto LABEL_51;
      if (v7 >= -1)
        v9 = -1;
      else
        v9 = v7;
      ++v5;
      while ((v7 & 0x80000000) == 0)
      {
        if (v12 != *v6)
          goto LABEL_50;
        ++v6;
        --v7;
        v13 = (unsigned __int16)*v5++;
        v12 = v13;
        if (!v13)
          goto LABEL_51;
      }
    }
  }
LABEL_51:
  *(_DWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 16) = v6;
  if ((v7 & 0x80000000) == 0)
    return 1;
  v22 = *v6;
  v23 = v22 >= 0x40;
  v24 = (v22 >> 15) ^ 3;
  if (v23)
    return v24;
  else
    return 1;
}

uint64_t icu::UCharsTrie::findUniqueValueFromBranch(unsigned __int16 *a1, int a2, uint64_t a3, unsigned int *a4)
{
  int v6;
  int v8;
  _WORD *v9;
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned __int16 *v14;
  int v15;
  unsigned __int16 *v16;
  unsigned __int16 v17;
  int v18;
  int v19;
  uint64_t v20;

  v6 = a2;
  if (a2 < 6)
  {
LABEL_15:
    v15 = v6 + 1;
    while (1)
    {
      v16 = a1 + 2;
      v17 = a1[1];
      v18 = v17 & 0x7FFF;
      if (v18 >= 0x4000)
      {
        if (v18 == 0x7FFF)
        {
          v19 = a1[2] << 16;
          v16 = a1 + 3;
          v20 = 4;
        }
        else
        {
          v19 = (v18 << 16) - 0x40000000;
          v20 = 3;
        }
        v18 = v19 | *v16;
        a1 += v20;
        if ((v17 & 0x8000) == 0)
        {
LABEL_25:
          if (!icu::UCharsTrie::findUniqueValue(&a1[v18], a3, a4))
            return 0;
          goto LABEL_26;
        }
      }
      else
      {
        a1 += 2;
        if ((v17 & 0x8000) == 0)
          goto LABEL_25;
      }
      if (!(_BYTE)a3)
      {
        *a4 = v18;
LABEL_26:
        LOBYTE(a3) = 1;
        goto LABEL_27;
      }
      if (v18 != *a4)
        return 0;
LABEL_27:
      if (--v15 <= 2)
        return (uint64_t)(a1 + 1);
    }
  }
  while (1)
  {
    v8 = a1[1];
    if (v8 >> 10 < 0x3F)
    {
      v9 = a1 + 2;
    }
    else if (v8 == 0xFFFF)
    {
      v8 = a1[3] | (a1[2] << 16);
      v9 = a1 + 4;
    }
    else
    {
      v9 = a1 + 3;
      v8 = (a1[2] | (v8 << 16)) + 0x4000000;
    }
    result = icu::UCharsTrie::findUniqueValueFromBranch(&v9[v8], v6 >> 1, a3, a4);
    if (!result)
      return result;
    v6 -= v6 >> 1;
    v11 = a1[1];
    v12 = v11 >> 10;
    v13 = v11 == 0xFFFF;
    v14 = a1 + 3;
    if (v13)
      v14 = a1 + 4;
    if (v12 >= 0x3F)
      a1 = v14;
    else
      a1 += 2;
    if (v6 <= 5)
      goto LABEL_15;
  }
}

uint64_t icu::UCharsTrie::findUniqueValue(unsigned __int16 *a1, char a2, unsigned int *a3)
{
  unsigned __int16 *v4;
  unsigned int i;
  unsigned int v6;
  unsigned __int16 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int16 *v14;
  int v15;

  v6 = *a1;
  v4 = a1 + 1;
  for (i = v6; ; i &= 0x3Fu)
  {
    while (1)
    {
      while (i <= 0x2F)
      {
        if (!i)
        {
          v9 = *v4++;
          i = v9;
        }
        result = icu::UCharsTrie::findUniqueValueFromBranch(v4, i + 1, a2, a3);
        if (!result)
          return result;
        v11 = *(unsigned __int16 *)result;
        v4 = (unsigned __int16 *)(result + 2);
        i = v11;
        a2 = 1;
      }
      if (i > 0x3F)
        break;
      v7 = &v4[i - 47];
      v8 = *v7;
      v4 = v7 + 1;
      i = v8;
    }
    v12 = i >> 6;
    if (i >= 0x8000)
    {
      v13 = i & 0x7FFF;
      if (v13 >= 0x4000)
      {
        if (v13 == 0x7FFF)
        {
          v14 = v4 + 1;
          v15 = *v4 << 16;
        }
        else
        {
          v15 = (v13 << 16) - 0x40000000;
          v14 = v4;
        }
        v13 = v15 | *v14;
      }
    }
    else if (v12 > 0x100)
    {
      v13 = v12 > 0x1FE ? v4[1] | (*v4 << 16) : (*v4 | (((i >> 6) & 0x1FF) << 16)) - 16842752;
    }
    else
    {
      v13 = v12 - 1;
    }
    if (a2)
    {
      if (v13 != *a3)
        return 0;
    }
    else
    {
      *a3 = v13;
      a2 = 1;
    }
    if (i >> 15)
      break;
    if (v12 >= 0x101)
    {
      if (v12 > 0x1FE)
        v4 += 2;
      else
        ++v4;
    }
  }
  return 1;
}

uint64_t icu::UCharsTrie::getNextUChars(icu::UCharsTrie *this, icu::Appendable *a2)
{
  unsigned __int16 *v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned int v10;

  v2 = (unsigned __int16 *)*((_QWORD *)this + 2);
  if (!v2)
    return 0;
  if ((*((_DWORD *)this + 6) & 0x80000000) == 0)
  {
    v4 = *v2;
LABEL_4:
    (*(void (**)(icu::Appendable *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v4);
    return 1;
  }
  v7 = v2 + 1;
  v6 = *v2;
  if (v6 >= 0x40)
  {
    if ((v6 & 0x8000) == 0)
    {
      v8 = v2 + 3;
      v9 = v2 + 2;
      if (v6 >> 6 > 0x1FE)
        v9 = v8;
      if (v6 >> 6 >= 0x101)
        v7 = v9;
      v6 &= 0x3Fu;
      goto LABEL_12;
    }
    return 0;
  }
LABEL_12:
  if (v6 > 0x2F)
  {
    v4 = *v7;
    goto LABEL_4;
  }
  if (!v6)
  {
    v10 = *v7++;
    v6 = v10;
  }
  v5 = v6 + 1;
  (*(void (**)(icu::Appendable *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v5);
  icu::UCharsTrie::getNextBranchUChars(v7, v5, (uint64_t)a2);
  return v5;
}

uint64_t icu::UCharsTrie::getNextBranchUChars(unsigned __int16 *a1, int a2, uint64_t a3)
{
  int v4;
  int v6;
  unsigned __int16 *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned __int16 *v11;
  int v12;
  unsigned int v13;
  unsigned __int16 *v14;

  v4 = a2;
  if (a2 >= 6)
  {
    do
    {
      v6 = a1[1];
      if (v6 >> 10 < 0x3F)
      {
        v7 = a1 + 2;
      }
      else if (v6 == 0xFFFF)
      {
        v6 = a1[3] | (a1[2] << 16);
        v7 = a1 + 4;
      }
      else
      {
        v7 = a1 + 3;
        v6 = (a1[2] | (v6 << 16)) + 0x4000000;
      }
      icu::UCharsTrie::getNextBranchUChars(&v7[v6], v4 >> 1, a3);
      v4 -= v4 >> 1;
      v8 = a1[1];
      v9 = v8 >> 10;
      v10 = v8 == 0xFFFF;
      v11 = a1 + 3;
      if (v10)
        v11 = a1 + 4;
      if (v9 >= 0x3F)
        a1 = v11;
      else
        a1 += 2;
    }
    while (v4 > 5);
  }
  v12 = v4 + 1;
  do
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, *a1);
    v13 = a1[1] & 0x7FFF;
    v14 = a1 + 4;
    if (v13 != 0x7FFF)
      v14 = a1 + 3;
    if (v13 >= 0x4000)
      a1 = v14;
    else
      a1 += 2;
    --v12;
  }
  while (v12 > 2);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, *a1);
}

unsigned int *sub_18BC0C590(unsigned int *result, uint64_t a2, unsigned int a3, uint64_t a4, int *a5)
{
  unsigned int *v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  __int16 v17;

  if (*a5 <= 0)
  {
    v8 = result;
    if (*(__int16 *)(a2 + 8) < 0)
    {
      v9 = *(_DWORD *)(a2 + 12);
      if (v9 >= 0x10000)
      {
        *a5 = 8;
        return result;
      }
    }
    else
    {
      v9 = *(unsigned __int16 *)(a2 + 8) >> 5;
    }
    v10 = *(unsigned __int16 *)(a4 + 8);
    v11 = (__int16)v10;
    v12 = v10 >> 5;
    if (v11 < 0)
      v12 = *(_DWORD *)(a4 + 12);
    *result = v12;
    v17 = v9;
    icu::UnicodeString::doAppend(a4, (uint64_t)&v17, 0, 1);
    v8[1] = a3;
    v13 = *(unsigned __int16 *)(a2 + 8);
    v14 = (__int16)v13;
    v15 = v13 >> 5;
    if (v14 >= 0)
      v16 = v15;
    else
      v16 = *(unsigned int *)(a2 + 12);
    return (unsigned int *)icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)a2, 0, v16);
  }
  return result;
}

uint64_t sub_18BC0C660(int *a1, int *a2, icu::UnicodeString *this)
{
  int32_t v5;
  int v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v10[8];
  unsigned __int16 v11;
  _BYTE v12[14];
  _BYTE *v13;
  _BYTE v14[8];
  unsigned __int16 v15;
  int32_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  sub_18BC0C758(this, a1, (icu::UnicodeString *)v14);
  sub_18BC0C758(this, a2, (icu::UnicodeString *)v10);
  if ((v11 & 1) != 0)
  {
    v8 = (v15 & 1) == 0;
  }
  else
  {
    if ((v15 & 0x8000u) == 0)
      v5 = v15 >> 5;
    else
      v5 = v16;
    if ((v11 & 0x8000u) == 0)
      v6 = v11 >> 5;
    else
      v6 = *(_DWORD *)&v12[2];
    if ((v11 & 2) != 0)
      v7 = v12;
    else
      v7 = v13;
    v8 = icu::UnicodeString::doCompare((uint64_t)v14, 0, v5, (uint64_t)v7, v6 & (v6 >> 31), v6 & ~(v6 >> 31));
  }
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v10);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v14);
  return v8;
}

icu::UnicodeString *sub_18BC0C758@<X0>(icu::UnicodeString *this@<X1>, int *a2@<X0>, icu::UnicodeString *a3@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  int32_t v7;

  v3 = *a2;
  v4 = *((unsigned __int16 *)this + 4);
  if ((v4 & 0x8000u) == 0)
    v5 = v4 >> 5;
  else
    v5 = *((_DWORD *)this + 3);
  if (v5 <= v3)
  {
    v7 = 0xFFFF;
  }
  else
  {
    if ((v4 & 2) != 0)
      v6 = (char *)this + 10;
    else
      v6 = (char *)*((_QWORD *)this + 3);
    v7 = *(unsigned __int16 *)&v6[2 * v3];
  }
  return icu::UnicodeString::tempSubString(this, (int)v3 + 1, v7, a3);
}

double icu::UCharsTrieBuilder::UCharsTrieBuilder(icu::UCharsTrieBuilder *this, UErrorCode *a2)
{
  _QWORD *v2;
  double result;

  v2 = icu::StringTrieBuilder::StringTrieBuilder(this);
  *v2 = off_1E224CB90;
  v2[2] = off_1E2256B38;
  *((_WORD *)v2 + 12) = 2;
  result = 0.0;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  return result;
}

{
  _QWORD *v2;
  double result;

  v2 = icu::StringTrieBuilder::StringTrieBuilder(this);
  *v2 = off_1E224CB90;
  v2[2] = off_1E2256B38;
  *((_WORD *)v2 + 12) = 2;
  result = 0.0;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  return result;
}

void icu::UCharsTrieBuilder::~UCharsTrieBuilder(icu::UCharsTrieBuilder *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1E224CB90;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
    icu::UMemory::operator delete[](v2);
  uprv_free(*((void **)this + 12));
  icu::UnicodeString::~UnicodeString(v3, (icu::UCharsTrieBuilder *)((char *)this + 16));
  icu::StringTrieBuilder::~StringTrieBuilder((void ***)this);
}

{
  void *v1;

  icu::UCharsTrieBuilder::~UCharsTrieBuilder(this);
  icu::UMemory::operator delete(v1);
}

icu::UCharsTrieBuilder *icu::UCharsTrieBuilder::add(icu::UCharsTrieBuilder *this, const icu::UnicodeString *a2, unsigned int a3, UErrorCode *a4)
{
  UErrorCode v6;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  void *v16;

  if (*(int *)a4 <= 0)
  {
    if (*((int *)this + 27) > 0)
    {
      v6 = U_NO_WRITE_PERMISSION;
LABEL_4:
      *a4 = v6;
      return this;
    }
    v10 = *((_DWORD *)this + 23);
    if (v10 == *((_DWORD *)this + 22))
    {
      if (v10)
        v11 = 4 * v10;
      else
        v11 = 1024;
      if (v11 < 0)
        v12 = -1;
      else
        v12 = 8 * v11;
      v13 = (unsigned int *)icu::UMemory::operator new[]((icu::UMemory *)v12, (unint64_t)a2);
      if (!v13)
        goto LABEL_22;
      v14 = v13;
      v15 = *((unsigned int *)this + 23);
      if ((int)v15 >= 1)
        memcpy(v13, *((const void **)this + 10), 8 * v15);
      v16 = (void *)*((_QWORD *)this + 10);
      if (v16)
        icu::UMemory::operator delete[](v16);
      *((_QWORD *)this + 10) = v14;
      *((_DWORD *)this + 22) = v11;
      v10 = *((_DWORD *)this + 23);
    }
    else
    {
      v14 = (unsigned int *)*((_QWORD *)this + 10);
    }
    *((_DWORD *)this + 23) = v10 + 1;
    sub_18BC0C590(&v14[2 * v10], (uint64_t)a2, a3, (uint64_t)this + 16, (int *)a4);
    if (*(int *)a4 <= 0 && (*((_WORD *)this + 12) & 1) != 0)
    {
LABEL_22:
      v6 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_4;
    }
  }
  return this;
}

uint64_t icu::UCharsTrieBuilder::build(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  icu::UCharsTrieBuilder::buildUChars((icu::StringTrieBuilder *)a1, a2, a3);
  if (*(int *)a3 > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x20, v5);
  if (result)
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = v7 + 2 * (*(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 108));
    *(_QWORD *)result = v7;
    *(_QWORD *)(result + 8) = v8;
    *(_QWORD *)(result + 16) = v8;
    *(_DWORD *)(result + 24) = -1;
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
  }
  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

void icu::UCharsTrieBuilder::buildUChars(icu::StringTrieBuilder *this, uint64_t a2, UErrorCode *a3)
{
  int v4;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  void *v16;
  UErrorCode v17;
  _OWORD v18[4];
  _OWORD v19[4];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 <= 0)
  {
    v4 = *((_DWORD *)this + 27);
    if (!*((_QWORD *)this + 12) || v4 <= 0)
    {
      if (!v4)
      {
        v10 = *((unsigned int *)this + 23);
        if (!(_DWORD)v10)
        {
          v17 = U_INDEX_OUTOFBOUNDS_ERROR;
          goto LABEL_39;
        }
        if ((*((_WORD *)this + 12) & 1) != 0)
        {
LABEL_37:
          v17 = U_MEMORY_ALLOCATION_ERROR;
LABEL_39:
          *a3 = v17;
          return;
        }
        uprv_sortArray(*((_QWORD *)this + 10), v10, 8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18BC0CCD4, (uint64_t)this + 16, 0, (int *)a3);
        if (*(int *)a3 > 0)
          return;
        memset(v19, 0, sizeof(v19));
        sub_18BC0C758((icu::StringTrieBuilder *)((char *)this + 16), *((int **)this + 10), (icu::UnicodeString *)v19);
        if (*((int *)this + 23) >= 2)
        {
          v11 = 1;
          v12 = 8;
          do
          {
            memset(v18, 0, sizeof(v18));
            sub_18BC0C758((icu::StringTrieBuilder *)((char *)this + 16), (int *)(*((_QWORD *)this + 10) + v12), (icu::UnicodeString *)v18);
            if ((BYTE8(v19[0]) & 1) != 0)
            {
              if ((BYTE8(v18[0]) & 1) != 0)
                goto LABEL_42;
            }
            else
            {
              if ((SWORD4(v19[0]) & 0x8000u) == 0)
                v13 = WORD4(v19[0]) >> 5;
              else
                v13 = HIDWORD(v19[0]);
              if ((SWORD4(v18[0]) & 0x8000u) == 0)
                v14 = WORD4(v18[0]) >> 5;
              else
                v14 = HIDWORD(v18[0]);
              if ((BYTE8(v18[0]) & 1) == 0
                && v13 == v14
                && icu::UnicodeString::doEquals((icu::UnicodeString *)v19, (const icu::UnicodeString *)v18, v13))
              {
LABEL_42:
                *a3 = U_ILLEGAL_ARGUMENT_ERROR;
                icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v18);
                icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v19);
                return;
              }
            }
            icu::UnicodeString::fastCopyFrom((UChar **)v19, (UChar **)v18);
            icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v18);
            ++v11;
            v12 += 8;
          }
          while (v11 < *((int *)this + 23));
        }
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v19);
      }
      *((_DWORD *)this + 27) = 0;
      v8 = *((unsigned __int16 *)this + 12);
      if ((v8 & 0x8000) != 0)
        v9 = *((_DWORD *)this + 7);
      else
        v9 = v8 >> 5;
      if (v9 <= 1024)
        v15 = 1024;
      else
        v15 = v9;
      if (*((_DWORD *)this + 26) < v15)
      {
        uprv_free(*((void **)this + 12));
        v16 = uprv_malloc((2 * v15));
        *((_QWORD *)this + 12) = v16;
        if (!v16)
        {
          *a3 = U_MEMORY_ALLOCATION_ERROR;
          *((_DWORD *)this + 26) = 0;
          return;
        }
        *((_DWORD *)this + 26) = v15;
      }
      icu::StringTrieBuilder::build(this, a2, *((unsigned int *)this + 23), a3);
      if (*((_QWORD *)this + 12))
        return;
      goto LABEL_37;
    }
  }
}

icu::UnicodeString *icu::UCharsTrieBuilder::buildUnicodeString(uint64_t a1, uint64_t a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  int v7;
  const UChar *v9;

  icu::UCharsTrieBuilder::buildUChars((icu::StringTrieBuilder *)a1, a2, a4);
  if (*(int *)a4 <= 0)
  {
    v7 = *(_DWORD *)(a1 + 108);
    v9 = (const UChar *)(*(_QWORD *)(a1 + 96) + 2 * (*(_DWORD *)(a1 + 104) - v7));
    icu::UnicodeString::setTo(a3, 0, &v9, v7);
  }
  return a3;
}

uint64_t sub_18BC0CCD4(icu::UnicodeString *this, int *a2, int *a3)
{
  return sub_18BC0C660(a2, a3, this);
}

uint64_t icu::UCharsTrieBuilder::getElementStringLength(icu::UCharsTrieBuilder *this, int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  char *v5;

  v2 = *(int *)(*((_QWORD *)this + 10) + 8 * a2);
  v3 = *((unsigned __int16 *)this + 12);
  if ((v3 & 0x8000u) == 0)
    v4 = v3 >> 5;
  else
    v4 = *((_DWORD *)this + 7);
  if (v4 <= v2)
    return 0xFFFFLL;
  if ((v3 & 2) != 0)
    v5 = (char *)this + 26;
  else
    v5 = (char *)*((_QWORD *)this + 5);
  return *(unsigned __int16 *)&v5[2 * v2];
}

uint64_t icu::UCharsTrieBuilder::getElementUnit(icu::UCharsTrieBuilder *this, int a2, int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;

  v3 = a3 + *(_DWORD *)(*((_QWORD *)this + 10) + 8 * a2) + 1;
  v4 = *((unsigned __int16 *)this + 12);
  if ((v4 & 0x8000u) == 0)
    v5 = v4 >> 5;
  else
    v5 = *((_DWORD *)this + 7);
  if (v5 <= v3)
    return 0xFFFFLL;
  if ((v4 & 2) != 0)
    v6 = (char *)this + 26;
  else
    v6 = (char *)*((_QWORD *)this + 5);
  return *(unsigned __int16 *)&v6[2 * v3];
}

uint64_t icu::UCharsTrieBuilder::getElementValue(icu::UCharsTrieBuilder *this, int a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 10) + 8 * a2 + 4);
}

uint64_t icu::UCharsTrieBuilder::getLimitOfLinearMatch(icu::UCharsTrieBuilder *this, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t i;
  char *v14;
  int v15;
  unsigned int v16;
  char *v17;
  int v18;

  v4 = *((_QWORD *)this + 10);
  v5 = *(int *)(v4 + 8 * a2);
  v6 = *((unsigned __int16 *)this + 12);
  if ((v6 & 0x8000u) == 0)
    v7 = v6 >> 5;
  else
    v7 = *((_DWORD *)this + 7);
  if (v7 <= v5)
  {
    LODWORD(v9) = 0xFFFF;
  }
  else
  {
    v8 = (char *)this + 26;
    if ((v6 & 2) == 0)
      v8 = (char *)*((_QWORD *)this + 5);
    LODWORD(v9) = *(unsigned __int16 *)&v8[2 * v5];
  }
  v10 = (_DWORD *)(v4 + 8 * a3);
  v11 = v9;
  if ((int)v9 <= (int)a4 + 1)
    v9 = (a4 + 1);
  else
    v9 = v9;
  v12 = v5 + 2;
  for (i = (int)a4 + 1; i < v11; ++i)
  {
    if (v7 <= v12 + (int)a4)
    {
      v15 = 0xFFFF;
    }
    else
    {
      v14 = (char *)*((_QWORD *)this + 5);
      if ((v6 & 2) != 0)
        v14 = (char *)this + 26;
      v15 = *(unsigned __int16 *)&v14[2 * v12 + 2 * (int)a4];
    }
    v16 = a4 + *v10 + 2;
    if (v7 <= v16)
    {
      v18 = 0xFFFF;
    }
    else
    {
      v17 = (char *)*((_QWORD *)this + 5);
      if ((v6 & 2) != 0)
        v17 = (char *)this + 26;
      v18 = *(unsigned __int16 *)&v17[2 * v16];
    }
    a4 = (a4 + 1);
    if (v15 != v18)
      return a4;
  }
  return v9;
}

uint64_t icu::UCharsTrieBuilder::countElementUnits(icu::UCharsTrieBuilder *this, uint64_t a2, int a3, int a4)
{
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  int v12;
  _DWORD *v13;
  unsigned int v14;
  char *v15;
  int v16;

  v4 = 0;
  v5 = *((_QWORD *)this + 10);
  v6 = a4 + 1;
  v7 = *((unsigned __int16 *)this + 12);
  if ((v7 & 0x8000u) == 0)
    v8 = v7 >> 5;
  else
    v8 = *((_DWORD *)this + 7);
  v9 = a3;
LABEL_5:
  v10 = *(_DWORD *)(v5 + 8 * (int)a2) + v6;
  if (v8 <= v10)
  {
    v12 = 0xFFFF;
  }
  else
  {
    v11 = (char *)*((_QWORD *)this + 5);
    if ((v7 & 2) != 0)
      v11 = (char *)this + 26;
    v12 = *(unsigned __int16 *)&v11[2 * v10];
  }
  a2 = (int)a2;
  v13 = (_DWORD *)(v5 + 8 + 8 * (int)a2);
  while (++a2 < v9)
  {
    v14 = *v13 + v6;
    if (v8 <= v14)
    {
      v16 = 0xFFFF;
    }
    else
    {
      v15 = (char *)*((_QWORD *)this + 5);
      if ((v7 & 2) != 0)
        v15 = (char *)this + 26;
      v16 = *(unsigned __int16 *)&v15[2 * v14];
    }
    v13 += 2;
    if (v12 != v16)
    {
      ++v4;
      goto LABEL_5;
    }
  }
  return (v4 + 1);
}

uint64_t icu::UCharsTrieBuilder::skipElementsBySomeUnits(icu::UCharsTrieBuilder *this, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  char *v14;
  int v15;
  BOOL v16;

  v4 = *((_QWORD *)this + 10);
  v5 = a3 + 1;
  v6 = *((unsigned __int16 *)this + 12);
  if ((v6 & 0x8000u) == 0)
    v7 = v6 >> 5;
  else
    v7 = *((_DWORD *)this + 7);
  do
  {
    v8 = *(_DWORD *)(v4 + 8 * (int)a2) + v5;
    if (v7 <= v8)
    {
      v10 = 0xFFFF;
    }
    else
    {
      v9 = (char *)*((_QWORD *)this + 5);
      if ((v6 & 2) != 0)
        v9 = (char *)this + 26;
      v10 = *(unsigned __int16 *)&v9[2 * v8];
    }
    v11 = (int *)(v4 + 8 + 8 * (int)a2);
    do
    {
      v12 = *v11;
      v11 += 2;
      v13 = v12 + v5;
      if (v7 <= v12 + v5)
      {
        v15 = 0xFFFF;
      }
      else
      {
        v14 = (char *)*((_QWORD *)this + 5);
        if ((v6 & 2) != 0)
          v14 = (char *)this + 26;
        v15 = *(unsigned __int16 *)&v14[2 * v13];
      }
      a2 = (a2 + 1);
    }
    while (v10 == v15);
    v16 = __OFSUB__(a4--, 1);
  }
  while (!((a4 < 0) ^ v16 | (a4 == 0)));
  return a2;
}

uint64_t icu::UCharsTrieBuilder::indexOfElementWithNextUnit(uint64_t a1, int a2, int a3, int a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;

  v4 = a3 + 1;
  v5 = *(unsigned __int16 *)(a1 + 24);
  v6 = v5 >> 5;
  if ((v5 & 0x8000u) != 0)
    v6 = *(_DWORD *)(a1 + 28);
  LODWORD(v7) = a2 - 1;
  v8 = (int *)(*(_QWORD *)(a1 + 80) + 8 * a2);
  do
  {
    v9 = *v8;
    v8 += 2;
    v10 = v4 + v9;
    if (v6 <= v4 + v9)
    {
      v12 = 0xFFFF;
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 40);
      if ((v5 & 2) != 0)
        v11 = a1 + 26;
      v12 = *(unsigned __int16 *)(v11 + 2 * v10);
    }
    v7 = (v7 + 1);
  }
  while (v12 == a4);
  return v7;
}

uint64_t icu::UCharsTrieBuilder::UCTLinearMatchNode::UCTLinearMatchNode(uint64_t a1, unsigned __int16 *a2, int a3, uint64_t a4)
{
  int v5;
  unsigned int v6;

  if (a4)
    v5 = *(_DWORD *)(a4 + 8);
  else
    v5 = 0;
  v6 = v5 + 37 * a3 + 298634171;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = a3;
  *(_QWORD *)a1 = &off_1E224CC40;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 8) = ustr_hashUCharsN(a2, a3) + 37 * v6;
  return a1;
}

uint64_t icu::UCharsTrieBuilder::UCTLinearMatchNode::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 == a2)
    return 1;
  result = icu::StringTrieBuilder::LinearMatchNode::operator==(a1, a2);
  if ((_DWORD)result)
    return u_memcmp(*(const UChar **)(a1 + 40), *(const UChar **)(a2 + 40), *(_DWORD *)(a1 + 24)) == 0;
  return result;
}

uint64_t icu::UCharsTrieBuilder::UCTLinearMatchNode::write(icu::UCharsTrieBuilder::UCTLinearMatchNode *this, icu::StringTrieBuilder *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4));
  icu::UCharsTrieBuilder::write((uint64_t)a2, *((const UChar **)this + 5), *((_DWORD *)this + 6));
  v4 = *((char *)this + 16);
  v5 = *((unsigned int *)this + 5);
  v6 = (*(uint64_t (**)(icu::StringTrieBuilder *))(*(_QWORD *)a2 + 96))(a2);
  result = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, v4, v5, (v6 + *((_DWORD *)this + 6) - 1));
  *((_DWORD *)this + 3) = result;
  return result;
}

uint64_t icu::UCharsTrieBuilder::write(uint64_t a1, const UChar *a2, int32_t a3)
{
  int v6;

  v6 = *(_DWORD *)(a1 + 108) + a3;
  if (icu::UCharsTrieBuilder::ensureCapacity((icu::UCharsTrieBuilder *)a1, v6))
  {
    *(_DWORD *)(a1 + 108) = v6;
    u_memcpy((UChar *)(*(_QWORD *)(a1 + 96) + 2 * (*(_DWORD *)(a1 + 104) - v6)), a2, a3);
  }
  return *(unsigned int *)(a1 + 108);
}

uint64_t *icu::UCharsTrieBuilder::createLinearMatchNode(icu::UCharsTrieBuilder *this, unint64_t a2, int a3, int a4, icu::StringTrieBuilder::Node *a5)
{
  int v8;
  uint64_t *v10;
  _BYTE *v11;
  void *v12;
  _BYTE v14[8];
  __int16 v15;
  _BYTE v16[54];
  uint64_t *v17;

  v8 = a2;
  v17 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v10 = icu::UMemory::operator new(v17, (icu::UMemory *)0x30, a2);
  if (v10)
  {
    sub_18BC0C758((icu::UCharsTrieBuilder *)((char *)this + 16), (int *)(*((_QWORD *)this + 10) + 8 * v8), (icu::UnicodeString *)v14);
    if ((v15 & 0x11) != 0)
    {
      v11 = 0;
    }
    else if ((v15 & 2) != 0)
    {
      v11 = v16;
    }
    else
    {
      v11 = *(_BYTE **)&v16[14];
    }
    icu::UCharsTrieBuilder::UCTLinearMatchNode::UCTLinearMatchNode((uint64_t)v10, (unsigned __int16 *)&v11[2 * a3], a4, (uint64_t)a5);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v14);
  }
  return v10;
}

uint64_t icu::UCharsTrieBuilder::ensureCapacity(icu::UCharsTrieBuilder *this, int a2)
{
  int v3;
  int v4;
  UChar *v5;
  UChar *v6;
  uint64_t v7;

  if (!*((_QWORD *)this + 12))
    return 0;
  v3 = *((_DWORD *)this + 26);
  if (v3 >= a2)
    return 1;
  do
  {
    v4 = v3;
    v3 *= 2;
  }
  while (v3 <= a2);
  v5 = (UChar *)uprv_malloc(4 * v4);
  v6 = v5;
  if (v5)
  {
    u_memcpy(&v5[v3 - *((_DWORD *)this + 27)], (const UChar *)(*((_QWORD *)this + 12) + 2 * (*((_DWORD *)this + 26) - *((_DWORD *)this + 27))), *((_DWORD *)this + 27));
    v7 = 1;
  }
  else
  {
    v3 = 0;
    v7 = 0;
  }
  uprv_free(*((void **)this + 12));
  *((_QWORD *)this + 12) = v6;
  *((_DWORD *)this + 26) = v3;
  return v7;
}

uint64_t icu::UCharsTrieBuilder::write(icu::UCharsTrieBuilder *this, __int16 a2)
{
  int v4;
  uint64_t v5;

  v4 = *((_DWORD *)this + 27);
  v5 = (v4 + 1);
  if (!icu::UCharsTrieBuilder::ensureCapacity(this, v4 + 1))
    return *((unsigned int *)this + 27);
  *((_DWORD *)this + 27) = v5;
  *(_WORD *)(*((_QWORD *)this + 12) + 2 * (*((_DWORD *)this + 26) - (int)v5)) = a2;
  return v5;
}

uint64_t icu::UCharsTrieBuilder::writeElementUnits(icu::UCharsTrieBuilder *this, int a2, int a3, int32_t a4)
{
  _BYTE *v7;
  uint64_t v8;
  void *v9;
  _BYTE v11[8];
  __int16 v12;
  _BYTE v13[54];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  sub_18BC0C758((icu::UCharsTrieBuilder *)((char *)this + 16), (int *)(*((_QWORD *)this + 10) + 8 * a2), (icu::UnicodeString *)v11);
  if ((v12 & 0x11) != 0)
  {
    v7 = 0;
  }
  else if ((v12 & 2) != 0)
  {
    v7 = v13;
  }
  else
  {
    v7 = *(_BYTE **)&v13[14];
  }
  v8 = icu::UCharsTrieBuilder::write((uint64_t)this, (const UChar *)&v7[2 * a3], a4);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v11);
  return v8;
}

uint64_t icu::UCharsTrieBuilder::writeValueAndFinal(icu::UCharsTrieBuilder *this, unsigned int a2, int a3)
{
  int32_t v4;
  __int16 v5;
  UChar v6[2];
  __int16 v7;

  if (!(a2 >> 14))
    return (*(uint64_t (**)(icu::UCharsTrieBuilder *, _QWORD))(*(_QWORD *)this + 120))(this, a2 | (a3 << 15));
  v7 = 0;
  if (a2 < 0x3FFF0000)
  {
    v5 = HIWORD(a2) + 0x4000;
    v4 = 2;
  }
  else
  {
    v7 = a2;
    v4 = 3;
    v5 = 0x7FFF;
    a2 >>= 16;
  }
  v6[1] = a2;
  v6[0] = v5 | ((_WORD)a3 << 15);
  return icu::UCharsTrieBuilder::write((uint64_t)this, v6, v4);
}

uint64_t icu::UCharsTrieBuilder::writeValueAndType(icu::UCharsTrieBuilder *this, int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v4;
  int32_t v5;
  int v6;
  UChar v8;
  int v9;

  if (!a2)
    return (*(uint64_t (**)(icu::UCharsTrieBuilder *, uint64_t))(*(_QWORD *)this + 120))(this, a4);
  v9 = 0;
  if (a3 < 0xFE0000)
  {
    if (a3 > 0xFF)
    {
      v6 = ((a3 >> 10) & 0x7FC0) + 16448;
      LOWORD(v9) = a3;
      v5 = 2;
    }
    else
    {
      LOWORD(v6) = ((_WORD)a3 << 6) + 64;
      v5 = 1;
    }
  }
  else
  {
    HIDWORD(v4) = a3;
    LODWORD(v4) = a3;
    v9 = v4 >> 16;
    v5 = 3;
    LOWORD(v6) = 32704;
  }
  v8 = v6 | a4;
  return icu::UCharsTrieBuilder::write((uint64_t)this, &v8, v5);
}

uint64_t icu::UCharsTrieBuilder::writeDeltaTo(icu::UCharsTrieBuilder *this, int a2)
{
  int v2;
  UChar v4;
  unsigned int v5;
  UChar v6;
  int v7;

  v2 = *((_DWORD *)this + 27) - a2;
  if (v2 <= 64511)
    return (*(uint64_t (**)(icu::UCharsTrieBuilder *))(*(_QWORD *)this + 120))(this);
  v7 = 0;
  if (HIWORD(v2) > 0x3FEu)
  {
    LOWORD(v7) = HIWORD(v2);
    v5 = 2;
    v4 = -1;
  }
  else
  {
    v4 = HIWORD(v2) - 1024;
    v5 = 1;
  }
  v6 = v4;
  *(&v6 + v5) = v2;
  return icu::UCharsTrieBuilder::write((uint64_t)this, &v6, v5 + 1);
}

uint64_t sub_18BC0D630()
{
  return 1;
}

uint64_t sub_18BC0D638()
{
  return 5;
}

uint64_t sub_18BC0D640()
{
  return 48;
}

uint64_t sub_18BC0D648()
{
  return 16;
}

void sub_18BC0D654(icu::UObject *a1)
{
  void *v1;

  icu::UObject::~UObject(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::UCharsTrie::Iterator::Iterator(uint64_t a1, uint64_t *a2, int a3, UErrorCode *a4)
{
  uint64_t v5;
  uint64_t *v6;
  icu::UVector32 *v8;

  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = off_1E2256B38;
  *(_WORD *)(a1 + 48) = 2;
  *(_DWORD *)(a1 + 104) = a3;
  *(_DWORD *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v6 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v6 <= 0)
  {
    v8 = (icu::UVector32 *)icu::UMemory::operator new(v6, (icu::UMemory *)0x20, (unint64_t)a2);
    if (v8)
    {
      *(_QWORD *)(a1 + 112) = icu::UVector32::UVector32(v8, a4);
    }
    else
    {
      *(_QWORD *)(a1 + 112) = 0;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return a1;
}

icu::UCharsTrie::Iterator *icu::UCharsTrie::Iterator::Iterator(icu::UCharsTrie::Iterator *this, const icu::UCharsTrie *a2, int a3, UErrorCode *a4)
{
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t *v8;
  icu::UVector32 *v11;
  int v12;
  int v13;
  uint64_t v15;

  v5 = *((_QWORD *)a2 + 2);
  *(_QWORD *)this = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v5;
  *((_QWORD *)this + 2) = v5;
  v6 = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 6) = v6;
  *((_DWORD *)this + 7) = v6;
  *((_BYTE *)this + 32) = 0;
  *((_QWORD *)this + 5) = off_1E2256B38;
  v7 = (char *)this + 40;
  *((_WORD *)this + 24) = 2;
  *((_DWORD *)this + 26) = a3;
  *((_DWORD *)this + 27) = 0;
  *((_QWORD *)this + 14) = 0;
  v8 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v8 <= 0)
  {
    v11 = (icu::UVector32 *)icu::UMemory::operator new(v8, (icu::UMemory *)0x20, (unint64_t)a2);
    if (v11)
    {
      *((_QWORD *)this + 14) = icu::UVector32::UVector32(v11, a4);
      if (*(int *)a4 < 1)
      {
        v12 = *((_DWORD *)this + 6);
        if ((v12 & 0x80000000) == 0)
        {
          v13 = *((_DWORD *)this + 26);
          if (v12 < v13 || v13 < 1)
            v15 = (v12 + 1);
          else
            v15 = v13;
          icu::UnicodeString::doAppend((uint64_t)v7, *((_QWORD *)this + 1), 0, v15);
          *((_QWORD *)this + 1) += 2 * (int)v15;
          *((_DWORD *)this + 6) -= v15;
        }
      }
    }
    else
    {
      *((_QWORD *)this + 14) = 0;
      if (*(int *)a4 <= 0)
        *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return this;
}

void icu::UCharsTrie::Iterator::~Iterator(icu::UCharsTrie::Iterator *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 14);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UnicodeString::~UnicodeString((icu::UCharsTrie::Iterator *)((char *)this + 40));
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 14);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UnicodeString::~UnicodeString((icu::UCharsTrie::Iterator *)((char *)this + 40));
}

icu::UCharsTrie::Iterator *icu::UCharsTrie::Iterator::reset(icu::UCharsTrie::Iterator *this)
{
  uint64_t v2;
  int v3;
  int v4;
  int v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = v2;
  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 6) = v3;
  *((_BYTE *)this + 32) = 0;
  v4 = *((_DWORD *)this + 26);
  if (v3 < v4 || v4 < 1)
    v6 = v3 + 1;
  else
    v6 = *((_DWORD *)this + 26);
  v7 = *((unsigned __int16 *)this + 24);
  if ((v7 & 1) == 0 || v6)
  {
    if ((v7 & 0x8000) != 0)
      v8 = *((_DWORD *)this + 13);
    else
      v8 = v7 >> 5;
    if (v8 > v6)
    {
      if (v6 > 1023)
      {
        *((_WORD *)this + 24) = v7 | 0xFFE0;
        *((_DWORD *)this + 13) = v6;
      }
      else
      {
        *((_WORD *)this + 24) = *((_WORD *)this + 24) & 0x1F | (32 * v6);
      }
    }
  }
  else
  {
    icu::UnicodeString::unBogus((uint64_t)this + 40);
    v2 = *((_QWORD *)this + 1);
    v3 = *((_DWORD *)this + 6);
  }
  *((_QWORD *)this + 1) = v2 + 2 * v6;
  *((_DWORD *)this + 6) = v3 - v6;
  icu::UVector32::setSize(*((icu::UVector32 **)this + 14), 0);
  return this;
}

BOOL icu::UCharsTrie::Iterator::hasNext(icu::UCharsTrie::Iterator *this)
{
  return *((_QWORD *)this + 1) || *(_DWORD *)(*((_QWORD *)this + 14) + 8) != 0;
}

uint64_t icu::UCharsTrie::Iterator::next(icu::UCharsTrie::Iterator *this, UErrorCode *a2)
{
  uint64_t result;
  unsigned __int16 *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned __int16 *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  __int16 *v28;
  __int16 v29;
  int v30;
  int v31;
  __int16 v32;

  if (*(int *)a2 > 0)
    return 0;
  v5 = (unsigned __int16 *)*((_QWORD *)this + 1);
  if (!v5)
  {
    v6 = *((_QWORD *)this + 14);
    v7 = *(_DWORD *)(v6 + 8);
    if (!v7)
      return 0;
    if (v7 <= 0)
    {
      v10 = 0;
      v11 = 0;
      v9 = *(_QWORD *)this;
      v12 = v7 - 2;
    }
    else
    {
      v8 = *(_QWORD *)(v6 + 24);
      v9 = *(_QWORD *)this;
      v10 = *(_DWORD *)(v8 + 4 * (v7 - 1));
      if (v7 == 1)
      {
        v11 = 0;
        v12 = -1;
      }
      else
      {
        v12 = v7 - 2;
        v11 = *(_DWORD *)(v8 + 4 * (v7 - 2));
      }
    }
    icu::UVector32::setSize((icu::UVector32 *)v6, v12);
    v23 = *((unsigned __int16 *)this + 24);
    if ((_WORD)v10 || (v23 & 1) == 0)
    {
      if ((v23 & 0x8000) != 0)
        v24 = *((_DWORD *)this + 13);
      else
        v24 = v23 >> 5;
      if (v24 > (unsigned __int16)v10)
      {
        if ((unsigned __int16)v10 > 0x3FFu)
        {
          *((_WORD *)this + 24) = v23 | 0xFFE0;
          *((_DWORD *)this + 13) = (unsigned __int16)v10;
        }
        else
        {
          *((_WORD *)this + 24) = *((_WORD *)this + 24) & 0x1F | (32 * v10);
        }
      }
    }
    else
    {
      icu::UnicodeString::unBogus((uint64_t)this + 40);
    }
    v28 = (__int16 *)(v9 + 2 * v11);
    if (v10 < 0x20000)
    {
      v29 = *v28;
      v5 = (unsigned __int16 *)(v28 + 1);
      v32 = v29;
      icu::UnicodeString::doAppend((uint64_t)this + 40, (uint64_t)&v32, 0, 1);
    }
    else
    {
      v5 = icu::UCharsTrie::Iterator::branchNext((uint64_t *)this, v28, HIWORD(v10), a2);
      if (!v5)
        return 1;
    }
  }
  if ((*((_DWORD *)this + 6) & 0x80000000) == 0)
  {
LABEL_5:
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 27) = -1;
    return 1;
  }
  while (1)
  {
    v14 = (__int16 *)(v5 + 1);
    v13 = *v5;
    if (v13 >= 0x40)
      break;
LABEL_18:
    v16 = *((_DWORD *)this + 26);
    if (v16 < 1)
    {
      if (v13 < 0x30)
        goto LABEL_26;
      v19 = v13 - 47;
LABEL_34:
      icu::UnicodeString::doAppend((uint64_t)this + 40, (uint64_t)v14, 0, v19);
      v5 = (unsigned __int16 *)&v14[v19];
    }
    else
    {
      v17 = *((unsigned __int16 *)this + 24);
      if (*((__int16 *)this + 24) < 0)
        v18 = *((_DWORD *)this + 13);
      else
        v18 = v17 >> 5;
      if (v18 == v16)
        goto LABEL_5;
      if (v13 >= 0x30)
      {
        v19 = v13 - 47;
        if ((v17 & 0x8000) != 0)
        {
          v27 = *((_DWORD *)this + 13);
          if ((int)(v27 + v19) > v16)
            goto LABEL_52;
        }
        else if (v19 + (v17 >> 5) > v16)
        {
          v27 = v17 >> 5;
LABEL_52:
          icu::UnicodeString::doAppend((uint64_t)this + 40, (uint64_t)v14, 0, v16 - v27);
          goto LABEL_5;
        }
        goto LABEL_34;
      }
LABEL_26:
      if (!v13)
      {
        v20 = (unsigned __int16)*v14++;
        v13 = v20;
      }
      v5 = icu::UCharsTrie::Iterator::branchNext((uint64_t *)this, v14, v13 + 1, a2);
      if (!v5)
        return 1;
    }
  }
  if (*((_BYTE *)this + 32))
  {
    v15 = v5 + 3;
    if (v13 >> 6 <= 0x1FE)
      v15 = v5 + 2;
    if (v13 >> 6 >= 0x101)
      v14 = (__int16 *)v15;
    v13 &= 0x3Fu;
    *((_BYTE *)this + 32) = 0;
    goto LABEL_18;
  }
  if ((v13 & 0x8000) != 0)
  {
    v25 = v13 & 0x7FFF;
    if (v25 >= 0x4000)
    {
      if (v25 == 0x7FFF)
      {
        v26 = v5[1] << 16;
        v14 = (__int16 *)(v5 + 2);
      }
      else
      {
        v26 = (v25 << 16) - 0x40000000;
      }
      v25 = v26 | (unsigned __int16)*v14;
    }
    *((_DWORD *)this + 27) = v25;
    goto LABEL_70;
  }
  v21 = v13 >> 6;
  if (v21 > 0x100)
  {
    if (v21 > 0x1FE)
      v22 = v5[2] | (v5[1] << 16);
    else
      v22 = ((unsigned __int16)*v14 | ((v21 & 0x1FF) << 16)) - 16842752;
  }
  else
  {
    v22 = v21 - 1;
  }
  *((_DWORD *)this + 27) = v22;
  v30 = *((_DWORD *)this + 26);
  if (v30 >= 1)
  {
    v31 = *((__int16 *)this + 24) < 0 ? *((_DWORD *)this + 13) : *((unsigned __int16 *)this + 24) >> 5;
    if (v31 == v30)
    {
LABEL_70:
      *((_QWORD *)this + 1) = 0;
      return 1;
    }
  }
  *((_QWORD *)this + 1) = v5;
  result = 1;
  *((_BYTE *)this + 32) = 1;
  return result;
}

unsigned __int16 *icu::UCharsTrie::Iterator::branchNext(uint64_t *a1, __int16 *a2, int a3, UErrorCode *a4)
{
  unsigned int v5;
  _WORD *v8;
  unsigned int v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  BOOL v19;
  unsigned __int16 *v20;
  __int16 v21;
  int v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned __int16 *result;
  __int16 v33;

  v5 = a3;
  if (a3 >= 6)
  {
    while (1)
    {
      v8 = a2 + 2;
      v9 = (unsigned __int16)a2[1];
      v10 = a2 + 2;
      if (v9 >> 10 >= 0x3F)
      {
        if (v9 == 0xFFFF)
          v10 = a2 + 4;
        else
          v10 = a2 + 3;
      }
      v11 = a1[14];
      v12 = *a1;
      v13 = *(_DWORD *)(v11 + 8);
      if (v13 < -1 || *(_DWORD *)(v11 + 12) <= v13)
      {
        if (!icu::UVector32::expandCapacity((icu::UVector32 *)a1[14], v13 + 1, a4))
          goto LABEL_11;
        v13 = *(_DWORD *)(v11 + 8);
      }
      *(_DWORD *)(*(_QWORD *)(v11 + 24) + 4 * v13) = ((unint64_t)v10 - v12) >> 1;
      ++*(_DWORD *)(v11 + 8);
LABEL_11:
      v14 = a1[14];
      if ((__int16)a1[6] < 0)
        v15 = *((_DWORD *)a1 + 13);
      else
        v15 = *((unsigned __int16 *)a1 + 24) >> 5;
      v16 = *(_DWORD *)(v14 + 8);
      if (v16 >= -1 && *(_DWORD *)(v14 + 12) > v16)
        goto LABEL_18;
      if (icu::UVector32::expandCapacity((icu::UVector32 *)a1[14], v16 + 1, a4))
      {
        v16 = *(_DWORD *)(v14 + 8);
LABEL_18:
        *(_DWORD *)(*(_QWORD *)(v14 + 24) + 4 * v16) = v15 | ((v5 - (v5 >> 1)) << 16);
        ++*(_DWORD *)(v14 + 8);
      }
      v17 = (unsigned __int16)a2[1];
      if (v17 >> 10 >= 0x3F)
      {
        if (v17 == 0xFFFF)
        {
          v17 = (unsigned __int16)a2[3] | ((unsigned __int16)a2[2] << 16);
          v8 = a2 + 4;
        }
        else
        {
          v8 = a2 + 3;
          v17 = ((unsigned __int16)a2[2] | (v17 << 16)) + 0x4000000;
        }
      }
      v18 = v5 >> 1;
      a2 = &v8[v17];
      v19 = v5 > 0xB;
      v5 >>= 1;
      if (!v19)
        goto LABEL_26;
    }
  }
  v18 = a3;
LABEL_26:
  v20 = (unsigned __int16 *)(a2 + 2);
  v21 = a2[1];
  v22 = v21 & 0x7FFF;
  if (v22 >= 0x4000)
  {
    if (v22 == 0x7FFF)
    {
      v23 = (unsigned __int16)a2[2] << 16;
      v20 = (unsigned __int16 *)(a2 + 3);
      v24 = 4;
    }
    else
    {
      v23 = (v22 << 16) - 0x40000000;
      v24 = 3;
    }
    v22 = v23 | *v20;
    v20 = (unsigned __int16 *)&a2[v24];
  }
  v25 = *a2;
  v26 = a1[14];
  v27 = *a1;
  v28 = *(_DWORD *)(v26 + 8);
  if (v28 < -1 || *(_DWORD *)(v26 + 12) <= v28)
  {
    if (!icu::UVector32::expandCapacity((icu::UVector32 *)a1[14], v28 + 1, a4))
      goto LABEL_36;
    v28 = *(_DWORD *)(v26 + 8);
  }
  *(_DWORD *)(*(_QWORD *)(v26 + 24) + 4 * v28) = ((unint64_t)v20 - v27) >> 1;
  ++*(_DWORD *)(v26 + 8);
LABEL_36:
  v29 = a1[14];
  if ((__int16)a1[6] < 0)
    v30 = *((_DWORD *)a1 + 13);
  else
    v30 = *((unsigned __int16 *)a1 + 24) >> 5;
  v31 = *(_DWORD *)(v29 + 8);
  if (v31 < -1 || *(_DWORD *)(v29 + 12) <= v31)
  {
    if (!icu::UVector32::expandCapacity((icu::UVector32 *)a1[14], v31 + 1, a4))
      goto LABEL_44;
    v31 = *(_DWORD *)(v29 + 8);
  }
  *(_DWORD *)(*(_QWORD *)(v29 + 24) + 4 * v31) = v30 | ((v18 << 16) - 0x10000);
  ++*(_DWORD *)(v29 + 8);
LABEL_44:
  v33 = v25;
  icu::UnicodeString::doAppend((uint64_t)(a1 + 5), (uint64_t)&v33, 0, 1);
  if ((v21 & 0x8000) == 0)
    return &v20[v22];
  result = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 27) = v22;
  return result;
}

void *icu::UCharCharacterIterator::getStaticClassID(icu::UCharCharacterIterator *this)
{
  return &unk_1EE0093F1;
}

void *icu::UCharCharacterIterator::getDynamicClassID(icu::UCharCharacterIterator *this)
{
  return &unk_1EE0093F1;
}

_QWORD *icu::UCharCharacterIterator::UCharCharacterIterator(icu::UCharCharacterIterator *this)
{
  _QWORD *result;

  result = icu::CharacterIterator::CharacterIterator(this);
  *result = off_1E224CCB0;
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = icu::CharacterIterator::CharacterIterator(this);
  *result = off_1E224CCB0;
  result[3] = 0;
  return result;
}

uint64_t icu::UCharCharacterIterator::UCharCharacterIterator(icu::CharacterIterator *this, const UChar **a2, int32_t a3)
{
  uint64_t result;

  if (*a2)
  {
    if (a3 < 0)
      a3 = u_strlen(*a2);
  }
  else
  {
    a3 = 0;
  }
  result = icu::CharacterIterator::CharacterIterator((uint64_t)this, a3);
  *(_QWORD *)this = off_1E224CCB0;
  *((_QWORD *)this + 3) = *a2;
  return result;
}

uint64_t icu::UCharCharacterIterator::UCharCharacterIterator(icu::CharacterIterator *this, const UChar **a2, int32_t a3, unsigned int a4)
{
  uint64_t result;

  if (*a2)
  {
    if (a3 < 0)
      a3 = u_strlen(*a2);
  }
  else
  {
    a3 = 0;
  }
  result = icu::CharacterIterator::CharacterIterator((uint64_t)this, a3, a4);
  *(_QWORD *)this = off_1E224CCB0;
  *((_QWORD *)this + 3) = *a2;
  return result;
}

uint64_t icu::UCharCharacterIterator::UCharCharacterIterator(icu::CharacterIterator *this, const UChar **a2, int32_t a3, unsigned int a4, signed int a5, int a6)
{
  uint64_t result;

  if (*a2)
  {
    if (a3 < 0)
      a3 = u_strlen(*a2);
  }
  else
  {
    a3 = 0;
  }
  result = icu::CharacterIterator::CharacterIterator((uint64_t)this, a3, a4, a5, a6);
  *(_QWORD *)this = off_1E224CCB0;
  *((_QWORD *)this + 3) = *a2;
  return result;
}

void icu::UCharCharacterIterator::UCharCharacterIterator(icu::UCharCharacterIterator *this, const icu::UCharCharacterIterator *a2)
{
  _QWORD *v3;

  icu::CharacterIterator::CharacterIterator(this, a2);
  *v3 = off_1E224CCB0;
  v3[3] = *((_QWORD *)a2 + 3);
}

{
  _QWORD *v3;

  icu::CharacterIterator::CharacterIterator(this, a2);
  *v3 = off_1E224CCB0;
  v3[3] = *((_QWORD *)a2 + 3);
}

uint64_t icu::UCharCharacterIterator::operator=(uint64_t a1, uint64_t a2)
{
  icu::CharacterIterator::operator=(a1, a2);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

void icu::UCharCharacterIterator::~UCharCharacterIterator(icu::UCharCharacterIterator *this)
{
  void *v1;

  icu::CharacterIterator::~CharacterIterator(this);
  icu::UMemory::operator delete(v1);
}

BOOL icu::UCharCharacterIterator::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (a1 == a2)
    return 1;
  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if (result)
    return *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
        && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
        && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
        && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
        && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  return result;
}

uint64_t icu::UCharCharacterIterator::hashCode(icu::UCharCharacterIterator *this)
{
  return *((_DWORD *)this + 3) ^ *((_DWORD *)this + 4) ^ ustr_hashUCharsN(*((unsigned __int16 **)this + 3), *((_DWORD *)this + 2)) ^ *((_DWORD *)this + 5);
}

void icu::UCharCharacterIterator::clone(icu::UCharCharacterIterator *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::CharacterIterator *v4;
  _QWORD *v5;

  v4 = (icu::CharacterIterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x20, a2);
  if (v4)
  {
    icu::CharacterIterator::CharacterIterator(v4, this);
    *v5 = off_1E224CCB0;
    v5[3] = *((_QWORD *)this + 3);
  }
}

uint64_t icu::UCharCharacterIterator::first(icu::UCharCharacterIterator *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 5);
  v2 = *((int *)this + 4);
  *((_DWORD *)this + 3) = v2;
  if ((int)v2 >= v1)
    return 0xFFFFLL;
  else
    return *(unsigned __int16 *)(*((_QWORD *)this + 3) + 2 * v2);
}

uint64_t icu::UCharCharacterIterator::firstPostInc(icu::UCharCharacterIterator *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_DWORD *)this + 5);
  v2 = *((int *)this + 4);
  *((_DWORD *)this + 3) = v2;
  if ((int)v2 >= v1)
    return 0xFFFFLL;
  v3 = *((_QWORD *)this + 3);
  *((_DWORD *)this + 3) = v2 + 1;
  return *(unsigned __int16 *)(v3 + 2 * v2);
}

uint64_t icu::UCharCharacterIterator::last(icu::UCharCharacterIterator *this)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;

  v2 = *((_DWORD *)this + 4);
  v1 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 3) = v1;
  if (v1 <= v2)
    return 0xFFFFLL;
  v3 = *((_QWORD *)this + 3);
  v4 = v1 - 1;
  *((_DWORD *)this + 3) = v4;
  return *(unsigned __int16 *)(v3 + 2 * v4);
}

uint64_t icu::UCharCharacterIterator::setIndex(icu::UCharCharacterIterator *this, int a2)
{
  int v2;
  int v3;

  v2 = *((_DWORD *)this + 4);
  if (v2 <= a2)
  {
    v3 = *((_DWORD *)this + 5);
    if (v3 < a2)
    {
      *((_DWORD *)this + 3) = v3;
      return 0xFFFFLL;
    }
    *((_DWORD *)this + 3) = a2;
  }
  else
  {
    *((_DWORD *)this + 3) = v2;
    v3 = *((_DWORD *)this + 5);
    a2 = v2;
  }
  if (a2 < v3)
    return *(unsigned __int16 *)(*((_QWORD *)this + 3) + 2 * a2);
  return 0xFFFFLL;
}

uint64_t icu::UCharCharacterIterator::current(icu::UCharCharacterIterator *this)
{
  uint64_t v1;

  v1 = *((int *)this + 3);
  if ((int)v1 < *((_DWORD *)this + 4) || (int)v1 >= *((_DWORD *)this + 5))
    return 0xFFFFLL;
  else
    return *(unsigned __int16 *)(*((_QWORD *)this + 3) + 2 * v1);
}

uint64_t icu::UCharCharacterIterator::next(icu::UCharCharacterIterator *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((int *)this + 3);
  v2 = v1 + 1;
  if ((int)v1 + 1 >= *((_DWORD *)this + 5))
  {
    v3 = 0xFFFFLL;
    LODWORD(v2) = *((_DWORD *)this + 5);
  }
  else
  {
    v3 = *(unsigned __int16 *)(*((_QWORD *)this + 3) + 2 * v2);
  }
  *((_DWORD *)this + 3) = v2;
  return v3;
}

uint64_t icu::UCharCharacterIterator::nextPostInc(icu::UCharCharacterIterator *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((int *)this + 3);
  if ((int)v1 >= *((_DWORD *)this + 5))
    return 0xFFFFLL;
  v2 = *((_QWORD *)this + 3);
  *((_DWORD *)this + 3) = v1 + 1;
  return *(unsigned __int16 *)(v2 + 2 * v1);
}

BOOL icu::UCharCharacterIterator::hasNext(icu::UCharCharacterIterator *this)
{
  return *((_DWORD *)this + 3) < *((_DWORD *)this + 5);
}

uint64_t icu::UCharCharacterIterator::previous(icu::UCharCharacterIterator *this)
{
  int v1;
  uint64_t v2;
  int v3;

  v1 = *((_DWORD *)this + 3);
  if (v1 <= *((_DWORD *)this + 4))
    return 0xFFFFLL;
  v2 = *((_QWORD *)this + 3);
  v3 = v1 - 1;
  *((_DWORD *)this + 3) = v3;
  return *(unsigned __int16 *)(v2 + 2 * v3);
}

BOOL icu::UCharCharacterIterator::hasPrevious(icu::UCharCharacterIterator *this)
{
  return *((_DWORD *)this + 3) > *((_DWORD *)this + 4);
}

uint64_t icu::UCharCharacterIterator::first32(icu::UCharCharacterIterator *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  int v7;

  v1 = *((_DWORD *)this + 5);
  v2 = *((int *)this + 4);
  *((_DWORD *)this + 3) = v2;
  if ((int)v2 >= v1)
    return 0xFFFFLL;
  v3 = *((_QWORD *)this + 3);
  v4 = v2 + 1;
  result = *(unsigned __int16 *)(v3 + 2 * v2);
  if ((result & 0xFC00) == 0xD800 && v4 != v1)
  {
    v7 = *(unsigned __int16 *)(v3 + 2 * v4);
    if ((v7 & 0xFC00) == 0xDC00)
      return (v7 + ((_DWORD)result << 10) - 56613888);
  }
  return result;
}

uint64_t icu::UCharCharacterIterator::first32PostInc(icu::UCharCharacterIterator *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v7;

  v1 = *((_DWORD *)this + 5);
  v2 = *((int *)this + 4);
  *((_DWORD *)this + 3) = v2;
  if ((int)v2 >= v1)
    return 0xFFFFLL;
  v3 = *((_QWORD *)this + 3);
  v4 = v2 + 1;
  *((_DWORD *)this + 3) = v2 + 1;
  v5 = *(unsigned __int16 *)(v3 + 2 * v2);
  if ((v5 & 0xFC00) == 0xD800 && v4 != v1)
  {
    v7 = *(unsigned __int16 *)(v3 + 2 * v4);
    if ((v7 & 0xFC00) == 0xDC00)
    {
      *((_DWORD *)this + 3) = v2 + 2;
      return (v7 + ((_DWORD)v5 << 10) - 56613888);
    }
  }
  return v5;
}

uint64_t icu::UCharCharacterIterator::last32(icu::UCharCharacterIterator *this)
{
  int v1;
  int v2;
  uint64_t v4;
  uint64_t result;
  int v7;
  int v8;

  v2 = *((_DWORD *)this + 4);
  v1 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 3) = v1;
  if (v1 <= v2)
    return 0xFFFFLL;
  v4 = *((_QWORD *)this + 3);
  *((_DWORD *)this + 3) = v1 - 1;
  result = *(unsigned __int16 *)(v4 + 2 * (v1 - 1));
  if (v1 - 1 > v2 && (result & 0xFC00) == 56320)
  {
    v7 = v1 - 2;
    v8 = *(unsigned __int16 *)(v4 + 2 * v7);
    if ((v8 & 0xFC00) == 0xD800)
    {
      *((_DWORD *)this + 3) = v7;
      return (result + (v8 << 10) - 56613888);
    }
  }
  return result;
}

uint64_t icu::UCharCharacterIterator::setIndex32(icu::UCharCharacterIterator *this, int a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  int v10;
  int v12;

  v4 = *((_DWORD *)this + 4);
  v3 = *((_DWORD *)this + 5);
  if (v3 >= a2)
    v5 = a2;
  else
    v5 = *((_DWORD *)this + 5);
  if (v4 <= a2)
    v6 = v5;
  else
    v6 = *((_DWORD *)this + 4);
  if (v6 >= v3)
  {
    *((_DWORD *)this + 3) = v6;
    return 0xFFFFLL;
  }
  else
  {
    v7 = *((_QWORD *)this + 3);
    result = *(unsigned __int16 *)(v7 + 2 * v6);
    if (v6 > v4 && (result & 0xFC00) == 56320)
    {
      if ((*(_WORD *)(v7 + 2 * (v6 - 1)) & 0xFC00) == 0xD800)
        --v6;
      result = *(unsigned __int16 *)(v7 + 2 * v6);
    }
    *((_DWORD *)this + 3) = v6;
    v10 = v6 + 1;
    if ((result & 0xFC00) == 0xD800 && v10 != v3)
    {
      v12 = *(unsigned __int16 *)(v7 + 2 * v10);
      if ((v12 & 0xFC00) == 0xDC00)
        return (v12 + ((_DWORD)result << 10) - 56613888);
    }
  }
  return result;
}

uint64_t icu::UCharCharacterIterator::current32(icu::UCharCharacterIterator *this)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  int v7;
  int v8;
  int v9;

  v1 = *((_DWORD *)this + 4);
  v2 = *((int *)this + 3);
  if ((int)v2 < v1)
    return 0xFFFFLL;
  v3 = *((_DWORD *)this + 5);
  if ((int)v2 >= v3)
    return 0xFFFFLL;
  v4 = *((_QWORD *)this + 3);
  result = *(unsigned __int16 *)(v4 + 2 * v2);
  if ((result & 0xF800) != 0xD800)
    return result;
  if ((result & 0x400) != 0)
  {
    if ((int)v2 > v1)
    {
      v9 = *(unsigned __int16 *)(v4 + 2 * ((int)v2 - 1));
      if ((v9 & 0xFC00) == 0xD800)
      {
        v8 = result + (v9 << 10);
        return (v8 - 56613888);
      }
    }
  }
  else
  {
    v6 = v2 + 1;
    if (v6 != v3)
    {
      v7 = *(unsigned __int16 *)(v4 + 2 * v6);
      if ((v7 & 0xFC00) == 0xDC00)
      {
        v8 = v7 + ((_DWORD)result << 10);
        return (v8 - 56613888);
      }
    }
  }
  return result;
}

uint64_t icu::UCharCharacterIterator::next32(icu::UCharCharacterIterator *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t result;
  int v9;

  v1 = *((int *)this + 3);
  v2 = *((_DWORD *)this + 5);
  if ((int)v1 >= v2)
    goto LABEL_15;
  v3 = *((_QWORD *)this + 3);
  v4 = v1 + 1;
  *((_DWORD *)this + 3) = v1 + 1;
  v5 = (*(_WORD *)(v3 + 2 * v1) & 0xFC00) != 0xD800 || v4 == v2;
  if (!v5 && (*(_WORD *)(v3 + 2 * v4) & 0xFC00) == 0xDC00)
  {
    v4 = v1 + 2;
    *((_DWORD *)this + 3) = v1 + 2;
  }
  if (v4 >= v2)
  {
LABEL_15:
    *((_DWORD *)this + 3) = v2;
    return 0xFFFFLL;
  }
  else
  {
    v6 = v4 + 1;
    result = *(unsigned __int16 *)(v3 + 2 * v4);
    if ((result & 0xFC00) == 0xD800 && (_DWORD)v6 != v2)
    {
      v9 = *(unsigned __int16 *)(v3 + 2 * v6);
      if ((v9 & 0xFC00) == 0xDC00)
        return (v9 + ((_DWORD)result << 10) - 56613888);
    }
  }
  return result;
}

uint64_t icu::UCharCharacterIterator::next32PostInc(icu::UCharCharacterIterator *this)
{
  uint64_t v1;
  int v2;
  uint64_t v4;
  int v5;
  uint64_t result;
  int v8;

  v1 = *((int *)this + 3);
  v2 = *((_DWORD *)this + 5);
  if ((int)v1 >= v2)
    return 0xFFFFLL;
  v4 = *((_QWORD *)this + 3);
  v5 = v1 + 1;
  *((_DWORD *)this + 3) = v1 + 1;
  result = *(unsigned __int16 *)(v4 + 2 * v1);
  if ((result & 0xFC00) == 0xD800 && v5 != v2)
  {
    v8 = *(unsigned __int16 *)(v4 + 2 * v5);
    if ((v8 & 0xFC00) == 0xDC00)
    {
      *((_DWORD *)this + 3) = v1 + 2;
      return (v8 + ((_DWORD)result << 10) - 56613888);
    }
  }
  return result;
}

uint64_t icu::UCharCharacterIterator::previous32(icu::UCharCharacterIterator *this)
{
  int v1;
  int v2;
  uint64_t v4;
  uint64_t result;
  int v7;
  int v8;

  v1 = *((_DWORD *)this + 3);
  v2 = *((_DWORD *)this + 4);
  if (v1 <= v2)
    return 0xFFFFLL;
  v4 = *((_QWORD *)this + 3);
  *((_DWORD *)this + 3) = v1 - 1;
  result = *(unsigned __int16 *)(v4 + 2 * (v1 - 1));
  if (v1 - 1 > v2 && (result & 0xFC00) == 56320)
  {
    v7 = v1 - 2;
    v8 = *(unsigned __int16 *)(v4 + 2 * v7);
    if ((v8 & 0xFC00) == 0xD800)
    {
      *((_DWORD *)this + 3) = v7;
      return (result + (v8 << 10) - 56613888);
    }
  }
  return result;
}

uint64_t icu::UCharCharacterIterator::move(_DWORD *a1, int a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  if (a3)
  {
    if (a3 == 1)
    {
      v3 = a1[3];
    }
    else
    {
      if (a3 != 2)
      {
        v4 = a1[3];
        goto LABEL_9;
      }
      v3 = a1[5];
    }
  }
  else
  {
    v3 = a1[4];
  }
  v4 = (v3 + a2);
  a1[3] = v4;
LABEL_9:
  v5 = a1[4];
  if ((int)v4 < (int)v5 || (v5 = a1[5], (int)v4 > (int)v5))
  {
    a1[3] = v5;
    return v5;
  }
  return v4;
}

uint64_t icu::UCharCharacterIterator::move32(uint64_t a1, int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  switch(a3)
  {
    case 2:
      LODWORD(v10) = *(_DWORD *)(a1 + 20);
      *(_DWORD *)(a1 + 12) = v10;
      if (a2 < 0)
      {
        v11 = *(_DWORD *)(a1 + 16);
        v12 = 1 - a2;
        do
        {
          if ((int)v10 <= v11)
            break;
          v13 = *(_QWORD *)(a1 + 24);
          v14 = (int)v10;
          v10 = (int)v10 - 1;
          *(_DWORD *)(a1 + 12) = v10;
          if ((int)v10 > v11 && (*(_WORD *)(v13 + 2 * v10) & 0xFC00) == 0xDC00)
          {
            v15 = v14 - 2;
            if ((*(_WORD *)(v13 + 2 * v15) & 0xFC00) == 0xD800)
            {
              *(_DWORD *)(a1 + 12) = v15;
              LODWORD(v10) = v15;
            }
          }
          --v12;
        }
        while (v12 > 1);
      }
      break;
    case 1:
      if (a2 < 1)
      {
        if (a2 < 0)
        {
          LODWORD(v24) = *(_DWORD *)(a1 + 12);
          v23 = *(_DWORD *)(a1 + 16);
          v25 = 1 - a2;
          do
          {
            if ((int)v24 <= v23)
              break;
            v26 = *(_QWORD *)(a1 + 24);
            v27 = (int)v24;
            v24 = (int)v24 - 1;
            *(_DWORD *)(a1 + 12) = v24;
            if ((int)v24 > v23 && (*(_WORD *)(v26 + 2 * v24) & 0xFC00) == 0xDC00)
            {
              v28 = v27 - 2;
              if ((*(_WORD *)(v26 + 2 * v28) & 0xFC00) == 0xD800)
              {
                *(_DWORD *)(a1 + 12) = v28;
                LODWORD(v24) = v28;
              }
            }
            --v25;
          }
          while (v25 > 1);
        }
      }
      else
      {
        v16 = *(_DWORD *)(a1 + 20);
        v17 = *(_DWORD *)(a1 + 12);
        v18 = a2 + 1;
        do
        {
          if (v17 >= v16)
          {
            if ((v16 & 0x80000000) == 0)
              return *(unsigned int *)(a1 + 12);
            v19 = *(_QWORD *)(a1 + 24);
            v20 = *(_WORD *)(v19 + 2 * v17);
            if (!v20)
              return *(unsigned int *)(a1 + 12);
          }
          else
          {
            v19 = *(_QWORD *)(a1 + 24);
            v20 = *(_WORD *)(v19 + 2 * v17);
          }
          v21 = v17 + 1;
          *(_DWORD *)(a1 + 12) = v21;
          v22 = (v20 & 0xFC00) != 0xD800 || (_DWORD)v21 == v16;
          if (!v22 && (*(_WORD *)(v19 + 2 * v21) & 0xFC00) == 0xDC00)
          {
            LODWORD(v21) = v17 + 2;
            *(_DWORD *)(a1 + 12) = v17 + 2;
          }
          --v18;
          v17 = v21;
        }
        while (v18 > 1);
      }
      break;
    case 0:
      v3 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 12) = v3;
      if (a2 >= 1)
      {
        v4 = *(_DWORD *)(a1 + 20);
        v5 = a2 + 1;
        do
        {
          if (v3 >= v4)
          {
            if ((v4 & 0x80000000) == 0)
              return *(unsigned int *)(a1 + 12);
            v6 = *(_QWORD *)(a1 + 24);
            v7 = *(_WORD *)(v6 + 2 * v3);
            if (!v7)
              return *(unsigned int *)(a1 + 12);
          }
          else
          {
            v6 = *(_QWORD *)(a1 + 24);
            v7 = *(_WORD *)(v6 + 2 * v3);
          }
          v8 = v3 + 1;
          *(_DWORD *)(a1 + 12) = v8;
          v9 = (v7 & 0xFC00) != 0xD800 || (_DWORD)v8 == v4;
          if (!v9 && (*(_WORD *)(v6 + 2 * v8) & 0xFC00) == 0xDC00)
          {
            LODWORD(v8) = v3 + 2;
            *(_DWORD *)(a1 + 12) = v3 + 2;
          }
          --v5;
          v3 = v8;
        }
        while (v5 > 1);
      }
      break;
  }
  return *(unsigned int *)(a1 + 12);
}

uint64_t icu::UCharCharacterIterator::setText(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;
  BOOL v4;
  int v5;

  v3 = *a2;
  *(_QWORD *)(result + 24) = *a2;
  if (v3)
    v4 = a3 < 0;
  else
    v4 = 1;
  if (v4)
    v5 = 0;
  else
    v5 = a3;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = v5;
  *(_DWORD *)(result + 8) = v5;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void *icu::UCharCharacterIterator::getText(icu::UCharCharacterIterator *this, icu::UnicodeString *a2)
{
  void *v3;
  _BYTE v5[64];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  icu::UnicodeString::UnicodeString((uint64_t)v5, *((_QWORD *)this + 3), *((unsigned int *)this + 2));
  icu::UnicodeString::operator=(a2, (icu::UnicodeString *)v5);
  return icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)v5);
}

uint64_t u_cleanup()
{
  umtx_lock(0);
  umtx_unlock(0);
  sub_18BC0EC24();
  sub_18BBB3348();
  return sub_18BC76368();
}

uint64_t sub_18BC0EC24()
{
  uint64_t i;
  void (*v1)(void);
  uint64_t j;
  void (*v3)(void);

  for (i = 0; i != 8; ++i)
  {
    v1 = (void (*)(void))qword_1ECD27960[i];
    if (v1)
    {
      v1();
      qword_1ECD27960[i] = 0;
    }
  }
  for (j = 0; j != 30; ++j)
  {
    v3 = (void (*)(void))qword_1ECD279A0[j];
    if (v3)
    {
      v3();
      qword_1ECD279A0[j] = 0;
    }
  }
  return 1;
}

uint64_t ucln_cleanupOne(uint64_t result)
{
  uint64_t (*v1)(void);
  uint64_t v2;

  v1 = (uint64_t (*)(void))qword_1ECD27960[(int)result];
  if (v1)
  {
    v2 = (int)result;
    result = v1();
    qword_1ECD27960[v2] = 0;
  }
  return result;
}

void sub_18BC0ECC4(unsigned int a1, uint64_t a2)
{
  if (a1 == 29)
  {
    qword_1ECD27A88 = a2;
  }
  else if (a1 <= 0x1D)
  {
    umtx_lock(0);
    qword_1ECD279A0[a1] = a2;
    umtx_unlock(0);
  }
}

uint64_t ucln_registerCleanup(uint64_t result, uint64_t a2)
{
  if (result <= 7)
    qword_1ECD27960[result] = a2;
  return result;
}

uint64_t sub_18BC0ED38(_BYTE *a1)
{
  unsigned int v1;

  if (a1)
  {
    v1 = bswap32(*(unsigned __int16 *)a1) >> 16;
    if (a1[8])
      return (unsigned __int16)v1;
    else
      return *(unsigned __int16 *)a1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_18BC0ED64(_BYTE *a1)
{
  unsigned int v1;

  if (a1)
  {
    v1 = bswap32(*(unsigned __int16 *)a1) >> 16;
    if (a1[4])
      return (unsigned __int16)v1;
    else
      return *(unsigned __int16 *)a1;
  }
  else
  {
    return 0;
  }
}

void sub_18BC0ED90(_OWORD *a1, int *a2)
{
  unsigned __int8 *v2;
  int v3;
  uint64_t (**v4)();

  if (*a2 <= 0)
  {
    if (!a1)
      goto LABEL_8;
    v2 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
    if (!v2 || v2[2] != 218 || v2[3] != 39 || v2[8] || v2[9])
      goto LABEL_8;
    v3 = v2[12];
    if (v3 == 84)
    {
      if (v2[13] == 111 && v2[14] == 67 && v2[15] == 80 && v2[16] == 1)
      {
        v4 = off_1E224CDB0;
        goto LABEL_21;
      }
    }
    else if (v3 == 67 && v2[13] == 109 && v2[14] == 110 && v2[15] == 68 && v2[16] == 1)
    {
      v4 = off_1E224CDA0;
LABEL_21:
      *(_QWORD *)a1 = v4;
      *((_QWORD *)a1 + 2) = &v2[*(unsigned __int16 *)v2];
      return;
    }
LABEL_8:
    *a2 = 3;
    udata_close(a1);
  }
}

char *sub_18BC0EE7C(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int *v3;
  _DWORD *v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  signed int v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;

  v3 = *(int **)(a1 + 16);
  if (!v3)
    return *(char **)(a1 + 8);
  v4 = v3 + 1;
  v5 = *v3;
  if (!*v3)
    return 0;
  v6 = (unsigned __int8 *)v3 + v3[1];
  v7 = -1;
  v8 = a2;
  do
  {
    v10 = *v8++;
    v9 = v10;
    v12 = *v6++;
    v11 = v12;
    ++v7;
    if (v9)
      v13 = v9 == v11;
    else
      v13 = 0;
  }
  while (v13);
  if (v9 != v11)
  {
    v16 = v5 - 1;
    v17 = (unsigned __int8 *)v3 + v4[2 * v5 - 2];
    v18 = -1;
    v19 = a2;
    do
    {
      v21 = *v19++;
      v20 = v21;
      v23 = *v17++;
      v22 = v23;
      ++v18;
      if (v20)
        v24 = v20 == v22;
      else
        v24 = 0;
    }
    while (v24);
    if (v20 == v22)
    {
      v14 = v5 - 1;
LABEL_18:
      if ((v14 & 0x80000000) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 3)
    {
      v26 = 1;
      do
      {
        v27 = v26 + v16;
        if (v26 + v16 < 0 != __OFADD__(v26, v16))
          ++v27;
        v14 = v27 >> 1;
        if (v7 >= v18)
          v28 = v18;
        else
          v28 = v7;
        v29 = &a2[v28];
        v30 = (unsigned __int8 *)v3 + v4[2 * v14] + v28;
        v31 = v28 - 1;
        do
        {
          v33 = *v29++;
          v32 = v33;
          v35 = *v30++;
          v34 = v35;
          ++v31;
          if (v32)
            v36 = v32 == v34;
          else
            v36 = 0;
        }
        while (v36);
        if (v32 >= v34)
        {
          if (v32 == v34)
            goto LABEL_18;
          v26 = v14 + 1;
          v7 = v31;
        }
        else
        {
          v18 = v31;
          v16 = v14;
        }
      }
      while (v26 < v16);
    }
    return 0;
  }
  v14 = 0;
LABEL_19:
  if ((int)(v14 + 1) >= v5)
    v25 = -1;
  else
    v25 = v4[2 * v14 + 3] - v4[2 * v14 + 1];
  *a3 = v25;
  return (char *)v3 + v4[2 * v14 + 1];
}

